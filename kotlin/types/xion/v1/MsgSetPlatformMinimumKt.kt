// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: xion/v1/tx.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package xion.v1;

@kotlin.jvm.JvmName("-initializemsgSetPlatformMinimum")
public inline fun msgSetPlatformMinimum(block: xion.v1.MsgSetPlatformMinimumKt.Dsl.() -> kotlin.Unit): xion.v1.Tx.MsgSetPlatformMinimum =
  xion.v1.MsgSetPlatformMinimumKt.Dsl._create(xion.v1.Tx.MsgSetPlatformMinimum.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `xion.v1.MsgSetPlatformMinimum`
 */
public object MsgSetPlatformMinimumKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: xion.v1.Tx.MsgSetPlatformMinimum.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: xion.v1.Tx.MsgSetPlatformMinimum.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): xion.v1.Tx.MsgSetPlatformMinimum = _builder.build()

    /**
     * `string authority = 1 [json_name = "authority", (.cosmos_proto.scalar) = "cosmos.AddressString"];`
     */
    public var authority: kotlin.String
      @JvmName("getAuthority")
      get() = _builder.authority
      @JvmName("setAuthority")
      set(value) {
        _builder.authority = value
      }
    /**
     * `string authority = 1 [json_name = "authority", (.cosmos_proto.scalar) = "cosmos.AddressString"];`
     */
    public fun clearAuthority() {
      _builder.clearAuthority()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class MinimumsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `repeated .cosmos.base.v1beta1.Coin minimums = 3 [json_name = "minimums", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];`
     */
     public val minimums: com.google.protobuf.kotlin.DslList<cosmos.base.v1beta1.CoinOuterClass.Coin, MinimumsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.minimumsList
      )
    /**
     * `repeated .cosmos.base.v1beta1.Coin minimums = 3 [json_name = "minimums", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];`
     * @param value The minimums to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addMinimums")
    public fun com.google.protobuf.kotlin.DslList<cosmos.base.v1beta1.CoinOuterClass.Coin, MinimumsProxy>.add(value: cosmos.base.v1beta1.CoinOuterClass.Coin) {
      _builder.addMinimums(value)
    }
    /**
     * `repeated .cosmos.base.v1beta1.Coin minimums = 3 [json_name = "minimums", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];`
     * @param value The minimums to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignMinimums")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<cosmos.base.v1beta1.CoinOuterClass.Coin, MinimumsProxy>.plusAssign(value: cosmos.base.v1beta1.CoinOuterClass.Coin) {
      add(value)
    }
    /**
     * `repeated .cosmos.base.v1beta1.Coin minimums = 3 [json_name = "minimums", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];`
     * @param values The minimums to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllMinimums")
    public fun com.google.protobuf.kotlin.DslList<cosmos.base.v1beta1.CoinOuterClass.Coin, MinimumsProxy>.addAll(values: kotlin.collections.Iterable<cosmos.base.v1beta1.CoinOuterClass.Coin>) {
      _builder.addAllMinimums(values)
    }
    /**
     * `repeated .cosmos.base.v1beta1.Coin minimums = 3 [json_name = "minimums", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];`
     * @param values The minimums to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllMinimums")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<cosmos.base.v1beta1.CoinOuterClass.Coin, MinimumsProxy>.plusAssign(values: kotlin.collections.Iterable<cosmos.base.v1beta1.CoinOuterClass.Coin>) {
      addAll(values)
    }
    /**
     * `repeated .cosmos.base.v1beta1.Coin minimums = 3 [json_name = "minimums", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];`
     * @param index The index to set the value at.
     * @param value The minimums to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setMinimums")
    public operator fun com.google.protobuf.kotlin.DslList<cosmos.base.v1beta1.CoinOuterClass.Coin, MinimumsProxy>.set(index: kotlin.Int, value: cosmos.base.v1beta1.CoinOuterClass.Coin) {
      _builder.setMinimums(index, value)
    }
    /**
     * `repeated .cosmos.base.v1beta1.Coin minimums = 3 [json_name = "minimums", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearMinimums")
    public fun com.google.protobuf.kotlin.DslList<cosmos.base.v1beta1.CoinOuterClass.Coin, MinimumsProxy>.clear() {
      _builder.clearMinimums()
    }

  }
}
@kotlin.jvm.JvmSynthetic
public inline fun xion.v1.Tx.MsgSetPlatformMinimum.copy(block: `xion.v1`.MsgSetPlatformMinimumKt.Dsl.() -> kotlin.Unit): xion.v1.Tx.MsgSetPlatformMinimum =
  `xion.v1`.MsgSetPlatformMinimumKt.Dsl._create(this.toBuilder()).apply { block() }._build()

