// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: xion/jwk/v1/query.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package xion.jwk.v1;

@kotlin.jvm.JvmName("-initializequeryGetAudienceClaimRequest")
public inline fun queryGetAudienceClaimRequest(block: xion.jwk.v1.QueryGetAudienceClaimRequestKt.Dsl.() -> kotlin.Unit): xion.jwk.v1.QueryOuterClass.QueryGetAudienceClaimRequest =
  xion.jwk.v1.QueryGetAudienceClaimRequestKt.Dsl._create(xion.jwk.v1.QueryOuterClass.QueryGetAudienceClaimRequest.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `xion.jwk.v1.QueryGetAudienceClaimRequest`
 */
public object QueryGetAudienceClaimRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: xion.jwk.v1.QueryOuterClass.QueryGetAudienceClaimRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: xion.jwk.v1.QueryOuterClass.QueryGetAudienceClaimRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): xion.jwk.v1.QueryOuterClass.QueryGetAudienceClaimRequest = _builder.build()

    /**
     * `bytes hash = 1 [json_name = "hash"];`
     */
    public var hash: com.google.protobuf.ByteString
      @JvmName("getHash")
      get() = _builder.hash
      @JvmName("setHash")
      set(value) {
        _builder.hash = value
      }
    /**
     * `bytes hash = 1 [json_name = "hash"];`
     */
    public fun clearHash() {
      _builder.clearHash()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun xion.jwk.v1.QueryOuterClass.QueryGetAudienceClaimRequest.copy(block: `xion.jwk.v1`.QueryGetAudienceClaimRequestKt.Dsl.() -> kotlin.Unit): xion.jwk.v1.QueryOuterClass.QueryGetAudienceClaimRequest =
  `xion.jwk.v1`.QueryGetAudienceClaimRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

