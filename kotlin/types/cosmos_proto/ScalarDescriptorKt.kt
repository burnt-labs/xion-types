// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos_proto/cosmos.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos_proto;

@kotlin.jvm.JvmName("-initializescalarDescriptor")
public inline fun scalarDescriptor(block: cosmos_proto.ScalarDescriptorKt.Dsl.() -> kotlin.Unit): cosmos_proto.Cosmos.ScalarDescriptor =
  cosmos_proto.ScalarDescriptorKt.Dsl._create(cosmos_proto.Cosmos.ScalarDescriptor.newBuilder()).apply { block() }._build()
/**
 * ```
 * ScalarDescriptor describes an scalar type to be used with
 * the scalar field option and declared by declare_scalar.
 * Scalars extend simple protobuf built-in types with additional
 * syntax and semantics, for instance to represent big integers.
 * Scalars should ideally define an encoding such that there is only one
 * valid syntactical representation for a given semantic meaning,
 * i.e. the encoding should be deterministic.
 * ```
 *
 * Protobuf type `cosmos_proto.ScalarDescriptor`
 */
public object ScalarDescriptorKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos_proto.Cosmos.ScalarDescriptor.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos_proto.Cosmos.ScalarDescriptor.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos_proto.Cosmos.ScalarDescriptor = _builder.build()

    /**
     * ```
     * name is the name of the scalar. It should be a short-name (without
     * a period) such that the fully qualified name of the scalar will be
     * package.name, ex. for the package a.b and scalar named C, the
     * fully-qualified name will be a.b.C.
     * ```
     *
     * `string name = 1 [json_name = "name"];`
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.name
      @JvmName("setName")
      set(value) {
        _builder.name = value
      }
    /**
     * ```
     * name is the name of the scalar. It should be a short-name (without
     * a period) such that the fully qualified name of the scalar will be
     * package.name, ex. for the package a.b and scalar named C, the
     * fully-qualified name will be a.b.C.
     * ```
     *
     * `string name = 1 [json_name = "name"];`
     */
    public fun clearName() {
      _builder.clearName()
    }

    /**
     * ```
     * description is a human-readable description of the scalar and its
     * encoding format. For instance a big integer or decimal scalar should
     * specify precisely the expected encoding format.
     * ```
     *
     * `string description = 2 [json_name = "description"];`
     */
    public var description: kotlin.String
      @JvmName("getDescription")
      get() = _builder.description
      @JvmName("setDescription")
      set(value) {
        _builder.description = value
      }
    /**
     * ```
     * description is a human-readable description of the scalar and its
     * encoding format. For instance a big integer or decimal scalar should
     * specify precisely the expected encoding format.
     * ```
     *
     * `string description = 2 [json_name = "description"];`
     */
    public fun clearDescription() {
      _builder.clearDescription()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class FieldTypeProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * field_type is the type of field with which this scalar can be used.
     * Scalars can be used with one and only one type of field so that
     * encoding standards and simple and clear. Currently only string and
     * bytes fields are supported for scalars.
     * ```
     *
     * `repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];`
     */
    public val fieldType: com.google.protobuf.kotlin.DslList<cosmos_proto.Cosmos.ScalarType, FieldTypeProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.fieldTypeList
      )
    /**
     * ```
     * field_type is the type of field with which this scalar can be used.
     * Scalars can be used with one and only one type of field so that
     * encoding standards and simple and clear. Currently only string and
     * bytes fields are supported for scalars.
     * ```
     *
     * `repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];`
     * @param value The fieldType to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addFieldType")
    public fun com.google.protobuf.kotlin.DslList<cosmos_proto.Cosmos.ScalarType, FieldTypeProxy>.add(value: cosmos_proto.Cosmos.ScalarType) {
      _builder.addFieldType(value)
    }/**
     * ```
     * field_type is the type of field with which this scalar can be used.
     * Scalars can be used with one and only one type of field so that
     * encoding standards and simple and clear. Currently only string and
     * bytes fields are supported for scalars.
     * ```
     *
     * `repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];`
     * @param value The fieldType to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignFieldType")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<cosmos_proto.Cosmos.ScalarType, FieldTypeProxy>.plusAssign(value: cosmos_proto.Cosmos.ScalarType) {
      add(value)
    }/**
     * ```
     * field_type is the type of field with which this scalar can be used.
     * Scalars can be used with one and only one type of field so that
     * encoding standards and simple and clear. Currently only string and
     * bytes fields are supported for scalars.
     * ```
     *
     * `repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];`
     * @param values The fieldType to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllFieldType")
    public fun com.google.protobuf.kotlin.DslList<cosmos_proto.Cosmos.ScalarType, FieldTypeProxy>.addAll(values: kotlin.collections.Iterable<cosmos_proto.Cosmos.ScalarType>) {
      _builder.addAllFieldType(values)
    }/**
     * ```
     * field_type is the type of field with which this scalar can be used.
     * Scalars can be used with one and only one type of field so that
     * encoding standards and simple and clear. Currently only string and
     * bytes fields are supported for scalars.
     * ```
     *
     * `repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];`
     * @param values The fieldType to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllFieldType")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<cosmos_proto.Cosmos.ScalarType, FieldTypeProxy>.plusAssign(values: kotlin.collections.Iterable<cosmos_proto.Cosmos.ScalarType>) {
      addAll(values)
    }/**
     * ```
     * field_type is the type of field with which this scalar can be used.
     * Scalars can be used with one and only one type of field so that
     * encoding standards and simple and clear. Currently only string and
     * bytes fields are supported for scalars.
     * ```
     *
     * `repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];`
     * @param index The index to set the value at.
     * @param value The fieldType to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setFieldType")
    public operator fun com.google.protobuf.kotlin.DslList<cosmos_proto.Cosmos.ScalarType, FieldTypeProxy>.set(index: kotlin.Int, value: cosmos_proto.Cosmos.ScalarType) {
      _builder.setFieldType(index, value)
    }/**
     * ```
     * field_type is the type of field with which this scalar can be used.
     * Scalars can be used with one and only one type of field so that
     * encoding standards and simple and clear. Currently only string and
     * bytes fields are supported for scalars.
     * ```
     *
     * `repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearFieldType")
    public fun com.google.protobuf.kotlin.DslList<cosmos_proto.Cosmos.ScalarType, FieldTypeProxy>.clear() {
      _builder.clearFieldType()
    }}
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos_proto.Cosmos.ScalarDescriptor.copy(block: `cosmos_proto`.ScalarDescriptorKt.Dsl.() -> kotlin.Unit): cosmos_proto.Cosmos.ScalarDescriptor =
  `cosmos_proto`.ScalarDescriptorKt.Dsl._create(this.toBuilder()).apply { block() }._build()

