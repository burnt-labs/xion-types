// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tendermint/crypto/keys.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package tendermint.crypto;

@kotlin.jvm.JvmName("-initializepublicKey")
public inline fun publicKey(block: tendermint.crypto.PublicKeyKt.Dsl.() -> kotlin.Unit): tendermint.crypto.Keys.PublicKey =
  tendermint.crypto.PublicKeyKt.Dsl._create(tendermint.crypto.Keys.PublicKey.newBuilder()).apply { block() }._build()
/**
 * ```
 * PublicKey defines the keys available for use with Validators
 * ```
 *
 * Protobuf type `tendermint.crypto.PublicKey`
 */
public object PublicKeyKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: tendermint.crypto.Keys.PublicKey.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: tendermint.crypto.Keys.PublicKey.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): tendermint.crypto.Keys.PublicKey = _builder.build()

    /**
     * `bytes ed25519 = 1 [json_name = "ed25519"];`
     */
    public var ed25519: com.google.protobuf.ByteString
      @JvmName("getEd25519")
      get() = _builder.ed25519
      @JvmName("setEd25519")
      set(value) {
        _builder.ed25519 = value
      }
    /**
     * `bytes ed25519 = 1 [json_name = "ed25519"];`
     */
    public fun clearEd25519() {
      _builder.clearEd25519()
    }
    /**
     * `bytes ed25519 = 1 [json_name = "ed25519"];`
     * @return Whether the ed25519 field is set.
     */
    public fun hasEd25519(): kotlin.Boolean {
      return _builder.hasEd25519()
    }

    /**
     * `bytes secp256k1 = 2 [json_name = "secp256k1"];`
     */
    public var secp256K1: com.google.protobuf.ByteString
      @JvmName("getSecp256K1")
      get() = _builder.secp256K1
      @JvmName("setSecp256K1")
      set(value) {
        _builder.secp256K1 = value
      }
    /**
     * `bytes secp256k1 = 2 [json_name = "secp256k1"];`
     */
    public fun clearSecp256K1() {
      _builder.clearSecp256K1()
    }
    /**
     * `bytes secp256k1 = 2 [json_name = "secp256k1"];`
     * @return Whether the secp256k1 field is set.
     */
    public fun hasSecp256K1(): kotlin.Boolean {
      return _builder.hasSecp256K1()
    }
    public val sumCase: tendermint.crypto.Keys.PublicKey.SumCase
    @kotlin.jvm.JvmName("getSumCase")
      get() = _builder.getSumCase()

    public fun clearSum() {
      _builder.clearSum()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun tendermint.crypto.Keys.PublicKey.copy(block: `tendermint.crypto`.PublicKeyKt.Dsl.() -> kotlin.Unit): tendermint.crypto.Keys.PublicKey =
  `tendermint.crypto`.PublicKeyKt.Dsl._create(this.toBuilder()).apply { block() }._build()

