// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tendermint/p2p/types.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package tendermint.p2p;

@kotlin.jvm.JvmName("-initializenetAddress")
public inline fun netAddress(block: tendermint.p2p.NetAddressKt.Dsl.() -> kotlin.Unit): tendermint.p2p.Types.NetAddress =
  tendermint.p2p.NetAddressKt.Dsl._create(tendermint.p2p.Types.NetAddress.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `tendermint.p2p.NetAddress`
 */
public object NetAddressKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: tendermint.p2p.Types.NetAddress.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: tendermint.p2p.Types.NetAddress.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): tendermint.p2p.Types.NetAddress = _builder.build()

    /**
     * `string id = 1 [json_name = "id", (.gogoproto.customname) = "ID"];`
     */
    public var id: kotlin.String
      @JvmName("getId")
      get() = _builder.id
      @JvmName("setId")
      set(value) {
        _builder.id = value
      }
    /**
     * `string id = 1 [json_name = "id", (.gogoproto.customname) = "ID"];`
     */
    public fun clearId() {
      _builder.clearId()
    }

    /**
     * `string ip = 2 [json_name = "ip", (.gogoproto.customname) = "IP"];`
     */
    public var ip: kotlin.String
      @JvmName("getIp")
      get() = _builder.ip
      @JvmName("setIp")
      set(value) {
        _builder.ip = value
      }
    /**
     * `string ip = 2 [json_name = "ip", (.gogoproto.customname) = "IP"];`
     */
    public fun clearIp() {
      _builder.clearIp()
    }

    /**
     * `uint32 port = 3 [json_name = "port"];`
     */
    public var port: kotlin.Int
      @JvmName("getPort")
      get() = _builder.port
      @JvmName("setPort")
      set(value) {
        _builder.port = value
      }
    /**
     * `uint32 port = 3 [json_name = "port"];`
     */
    public fun clearPort() {
      _builder.clearPort()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun tendermint.p2p.Types.NetAddress.copy(block: `tendermint.p2p`.NetAddressKt.Dsl.() -> kotlin.Unit): tendermint.p2p.Types.NetAddress =
  `tendermint.p2p`.NetAddressKt.Dsl._create(this.toBuilder()).apply { block() }._build()

