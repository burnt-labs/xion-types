// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tendermint/types/types.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package tendermint.types;

@kotlin.jvm.JvmName("-initializelightBlock")
public inline fun lightBlock(block: tendermint.types.LightBlockKt.Dsl.() -> kotlin.Unit): tendermint.types.Types.LightBlock =
  tendermint.types.LightBlockKt.Dsl._create(tendermint.types.Types.LightBlock.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `tendermint.types.LightBlock`
 */
public object LightBlockKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: tendermint.types.Types.LightBlock.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: tendermint.types.Types.LightBlock.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): tendermint.types.Types.LightBlock = _builder.build()

    /**
     * `.tendermint.types.SignedHeader signed_header = 1 [json_name = "signedHeader"];`
     */
    public var signedHeader: tendermint.types.Types.SignedHeader
      @JvmName("getSignedHeader")
      get() = _builder.signedHeader
      @JvmName("setSignedHeader")
      set(value) {
        _builder.signedHeader = value
      }
    /**
     * `.tendermint.types.SignedHeader signed_header = 1 [json_name = "signedHeader"];`
     */
    public fun clearSignedHeader() {
      _builder.clearSignedHeader()
    }
    /**
     * `.tendermint.types.SignedHeader signed_header = 1 [json_name = "signedHeader"];`
     * @return Whether the signedHeader field is set.
     */
    public fun hasSignedHeader(): kotlin.Boolean {
      return _builder.hasSignedHeader()
    }

    public val LightBlockKt.Dsl.signedHeaderOrNull: tendermint.types.Types.SignedHeader?
      get() = _builder.signedHeaderOrNull

    /**
     * `.tendermint.types.ValidatorSet validator_set = 2 [json_name = "validatorSet"];`
     */
    public var validatorSet: tendermint.types.ValidatorOuterClass.ValidatorSet
      @JvmName("getValidatorSet")
      get() = _builder.validatorSet
      @JvmName("setValidatorSet")
      set(value) {
        _builder.validatorSet = value
      }
    /**
     * `.tendermint.types.ValidatorSet validator_set = 2 [json_name = "validatorSet"];`
     */
    public fun clearValidatorSet() {
      _builder.clearValidatorSet()
    }
    /**
     * `.tendermint.types.ValidatorSet validator_set = 2 [json_name = "validatorSet"];`
     * @return Whether the validatorSet field is set.
     */
    public fun hasValidatorSet(): kotlin.Boolean {
      return _builder.hasValidatorSet()
    }

    public val LightBlockKt.Dsl.validatorSetOrNull: tendermint.types.ValidatorOuterClass.ValidatorSet?
      get() = _builder.validatorSetOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun tendermint.types.Types.LightBlock.copy(block: `tendermint.types`.LightBlockKt.Dsl.() -> kotlin.Unit): tendermint.types.Types.LightBlock =
  `tendermint.types`.LightBlockKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val tendermint.types.Types.LightBlockOrBuilder.signedHeaderOrNull: tendermint.types.Types.SignedHeader?
  get() = if (hasSignedHeader()) getSignedHeader() else null

public val tendermint.types.Types.LightBlockOrBuilder.validatorSetOrNull: tendermint.types.ValidatorOuterClass.ValidatorSet?
  get() = if (hasValidatorSet()) getValidatorSet() else null

