// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tendermint/types/types.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package tendermint.types;

@kotlin.jvm.JvmName("-initializecommitSig")
public inline fun commitSig(block: tendermint.types.CommitSigKt.Dsl.() -> kotlin.Unit): tendermint.types.Types.CommitSig =
  tendermint.types.CommitSigKt.Dsl._create(tendermint.types.Types.CommitSig.newBuilder()).apply { block() }._build()
/**
 * ```
 * CommitSig is a part of the Vote included in a Commit.
 * ```
 *
 * Protobuf type `tendermint.types.CommitSig`
 */
public object CommitSigKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: tendermint.types.Types.CommitSig.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: tendermint.types.Types.CommitSig.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): tendermint.types.Types.CommitSig = _builder.build()

    /**
     * `.tendermint.types.BlockIDFlag block_id_flag = 1 [json_name = "blockIdFlag"];`
     */
    public var blockIdFlag: tendermint.types.ValidatorOuterClass.BlockIDFlag
      @JvmName("getBlockIdFlag")
      get() = _builder.blockIdFlag
      @JvmName("setBlockIdFlag")
      set(value) {
        _builder.blockIdFlag = value
      }
    public var blockIdFlagValue: kotlin.Int
      @JvmName("getBlockIdFlagValue")
      get() = _builder.blockIdFlagValue
      @JvmName("setBlockIdFlagValue")
      set(value) {
        _builder.blockIdFlagValue = value
      }
    /**
     * `.tendermint.types.BlockIDFlag block_id_flag = 1 [json_name = "blockIdFlag"];`
     */
    public fun clearBlockIdFlag() {
      _builder.clearBlockIdFlag()
    }

    /**
     * `bytes validator_address = 2 [json_name = "validatorAddress"];`
     */
    public var validatorAddress: com.google.protobuf.ByteString
      @JvmName("getValidatorAddress")
      get() = _builder.validatorAddress
      @JvmName("setValidatorAddress")
      set(value) {
        _builder.validatorAddress = value
      }
    /**
     * `bytes validator_address = 2 [json_name = "validatorAddress"];`
     */
    public fun clearValidatorAddress() {
      _builder.clearValidatorAddress()
    }

    /**
     * `.google.protobuf.Timestamp timestamp = 3 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];`
     */
    public var timestamp: com.google.protobuf.Timestamp
      @JvmName("getTimestamp")
      get() = _builder.timestamp
      @JvmName("setTimestamp")
      set(value) {
        _builder.timestamp = value
      }
    /**
     * `.google.protobuf.Timestamp timestamp = 3 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];`
     */
    public fun clearTimestamp() {
      _builder.clearTimestamp()
    }
    /**
     * `.google.protobuf.Timestamp timestamp = 3 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];`
     * @return Whether the timestamp field is set.
     */
    public fun hasTimestamp(): kotlin.Boolean {
      return _builder.hasTimestamp()
    }

    public val CommitSigKt.Dsl.timestampOrNull: com.google.protobuf.Timestamp?
      get() = _builder.timestampOrNull

    /**
     * `bytes signature = 4 [json_name = "signature"];`
     */
    public var signature: com.google.protobuf.ByteString
      @JvmName("getSignature")
      get() = _builder.signature
      @JvmName("setSignature")
      set(value) {
        _builder.signature = value
      }
    /**
     * `bytes signature = 4 [json_name = "signature"];`
     */
    public fun clearSignature() {
      _builder.clearSignature()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun tendermint.types.Types.CommitSig.copy(block: `tendermint.types`.CommitSigKt.Dsl.() -> kotlin.Unit): tendermint.types.Types.CommitSig =
  `tendermint.types`.CommitSigKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val tendermint.types.Types.CommitSigOrBuilder.timestampOrNull: com.google.protobuf.Timestamp?
  get() = if (hasTimestamp()) getTimestamp() else null

