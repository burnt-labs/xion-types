// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tendermint/types/evidence.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package tendermint.types;

@kotlin.jvm.JvmName("-initializeevidence")
public inline fun evidence(block: tendermint.types.EvidenceKt.Dsl.() -> kotlin.Unit): tendermint.types.EvidenceOuterClass.Evidence =
  tendermint.types.EvidenceKt.Dsl._create(tendermint.types.EvidenceOuterClass.Evidence.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `tendermint.types.Evidence`
 */
public object EvidenceKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: tendermint.types.EvidenceOuterClass.Evidence.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: tendermint.types.EvidenceOuterClass.Evidence.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): tendermint.types.EvidenceOuterClass.Evidence = _builder.build()

    /**
     * `.tendermint.types.DuplicateVoteEvidence duplicate_vote_evidence = 1 [json_name = "duplicateVoteEvidence"];`
     */
    public var duplicateVoteEvidence: tendermint.types.EvidenceOuterClass.DuplicateVoteEvidence
      @JvmName("getDuplicateVoteEvidence")
      get() = _builder.duplicateVoteEvidence
      @JvmName("setDuplicateVoteEvidence")
      set(value) {
        _builder.duplicateVoteEvidence = value
      }
    /**
     * `.tendermint.types.DuplicateVoteEvidence duplicate_vote_evidence = 1 [json_name = "duplicateVoteEvidence"];`
     */
    public fun clearDuplicateVoteEvidence() {
      _builder.clearDuplicateVoteEvidence()
    }
    /**
     * `.tendermint.types.DuplicateVoteEvidence duplicate_vote_evidence = 1 [json_name = "duplicateVoteEvidence"];`
     * @return Whether the duplicateVoteEvidence field is set.
     */
    public fun hasDuplicateVoteEvidence(): kotlin.Boolean {
      return _builder.hasDuplicateVoteEvidence()
    }

    /**
     * `.tendermint.types.LightClientAttackEvidence light_client_attack_evidence = 2 [json_name = "lightClientAttackEvidence"];`
     */
    public var lightClientAttackEvidence: tendermint.types.EvidenceOuterClass.LightClientAttackEvidence
      @JvmName("getLightClientAttackEvidence")
      get() = _builder.lightClientAttackEvidence
      @JvmName("setLightClientAttackEvidence")
      set(value) {
        _builder.lightClientAttackEvidence = value
      }
    /**
     * `.tendermint.types.LightClientAttackEvidence light_client_attack_evidence = 2 [json_name = "lightClientAttackEvidence"];`
     */
    public fun clearLightClientAttackEvidence() {
      _builder.clearLightClientAttackEvidence()
    }
    /**
     * `.tendermint.types.LightClientAttackEvidence light_client_attack_evidence = 2 [json_name = "lightClientAttackEvidence"];`
     * @return Whether the lightClientAttackEvidence field is set.
     */
    public fun hasLightClientAttackEvidence(): kotlin.Boolean {
      return _builder.hasLightClientAttackEvidence()
    }
    public val sumCase: tendermint.types.EvidenceOuterClass.Evidence.SumCase
    @kotlin.jvm.JvmName("getSumCase")
      get() = _builder.getSumCase()

    public fun clearSum() {
      _builder.clearSum()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun tendermint.types.EvidenceOuterClass.Evidence.copy(block: `tendermint.types`.EvidenceKt.Dsl.() -> kotlin.Unit): tendermint.types.EvidenceOuterClass.Evidence =
  `tendermint.types`.EvidenceKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val tendermint.types.EvidenceOuterClass.EvidenceOrBuilder.duplicateVoteEvidenceOrNull: tendermint.types.EvidenceOuterClass.DuplicateVoteEvidence?
  get() = if (hasDuplicateVoteEvidence()) getDuplicateVoteEvidence() else null

public val tendermint.types.EvidenceOuterClass.EvidenceOrBuilder.lightClientAttackEvidenceOrNull: tendermint.types.EvidenceOuterClass.LightClientAttackEvidence?
  get() = if (hasLightClientAttackEvidence()) getLightClientAttackEvidence() else null

