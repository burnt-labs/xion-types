// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: test.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package test_proto;

@kotlin.jvm.JvmName("-initializegoSkipTest")
public inline fun goSkipTest(block: test_proto.GoSkipTestKt.Dsl.() -> kotlin.Unit): test_proto.Test.GoSkipTest =
  test_proto.GoSkipTestKt.Dsl._create(test_proto.Test.GoSkipTest.newBuilder()).apply { block() }._build()
/**
 * ```
 * For testing skipping of unrecognized fields.
 * Numbers are all big, larger than tag numbers in GoTestField,
 * the message used in the corresponding test.
 * ```
 *
 * Protobuf type `test_proto.GoSkipTest`
 */
public object GoSkipTestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: test_proto.Test.GoSkipTest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: test_proto.Test.GoSkipTest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): test_proto.Test.GoSkipTest = _builder.build()

    /**
     * `required int32 skip_int32 = 11 [json_name = "skipInt32"];`
     */
    public var skipInt32: kotlin.Int
      @JvmName("getSkipInt32")
      get() = _builder.skipInt32
      @JvmName("setSkipInt32")
      set(value) {
        _builder.skipInt32 = value
      }
    /**
     * `required int32 skip_int32 = 11 [json_name = "skipInt32"];`
     */
    public fun clearSkipInt32() {
      _builder.clearSkipInt32()
    }
    /**
     * `required int32 skip_int32 = 11 [json_name = "skipInt32"];`
     * @return Whether the skipInt32 field is set.
     */
    public fun hasSkipInt32(): kotlin.Boolean {
      return _builder.hasSkipInt32()
    }

    /**
     * `required fixed32 skip_fixed32 = 12 [json_name = "skipFixed32"];`
     */
    public var skipFixed32: kotlin.Int
      @JvmName("getSkipFixed32")
      get() = _builder.skipFixed32
      @JvmName("setSkipFixed32")
      set(value) {
        _builder.skipFixed32 = value
      }
    /**
     * `required fixed32 skip_fixed32 = 12 [json_name = "skipFixed32"];`
     */
    public fun clearSkipFixed32() {
      _builder.clearSkipFixed32()
    }
    /**
     * `required fixed32 skip_fixed32 = 12 [json_name = "skipFixed32"];`
     * @return Whether the skipFixed32 field is set.
     */
    public fun hasSkipFixed32(): kotlin.Boolean {
      return _builder.hasSkipFixed32()
    }

    /**
     * `required fixed64 skip_fixed64 = 13 [json_name = "skipFixed64"];`
     */
    public var skipFixed64: kotlin.Long
      @JvmName("getSkipFixed64")
      get() = _builder.skipFixed64
      @JvmName("setSkipFixed64")
      set(value) {
        _builder.skipFixed64 = value
      }
    /**
     * `required fixed64 skip_fixed64 = 13 [json_name = "skipFixed64"];`
     */
    public fun clearSkipFixed64() {
      _builder.clearSkipFixed64()
    }
    /**
     * `required fixed64 skip_fixed64 = 13 [json_name = "skipFixed64"];`
     * @return Whether the skipFixed64 field is set.
     */
    public fun hasSkipFixed64(): kotlin.Boolean {
      return _builder.hasSkipFixed64()
    }

    /**
     * `required string skip_string = 14 [json_name = "skipString"];`
     */
    public var skipString: kotlin.String
      @JvmName("getSkipString")
      get() = _builder.skipString
      @JvmName("setSkipString")
      set(value) {
        _builder.skipString = value
      }
    /**
     * `required string skip_string = 14 [json_name = "skipString"];`
     */
    public fun clearSkipString() {
      _builder.clearSkipString()
    }
    /**
     * `required string skip_string = 14 [json_name = "skipString"];`
     * @return Whether the skipString field is set.
     */
    public fun hasSkipString(): kotlin.Boolean {
      return _builder.hasSkipString()
    }

    /**
     * `required group SkipGroup = 15 [json_name = "skipgroup"] { ... }`
     */
    public var skipGroup: test_proto.Test.GoSkipTest.SkipGroup
      @JvmName("getSkipGroup")
      get() = _builder.skipGroup
      @JvmName("setSkipGroup")
      set(value) {
        _builder.skipGroup = value
      }
    /**
     * `required group SkipGroup = 15 [json_name = "skipgroup"] { ... }`
     */
    public fun clearSkipGroup() {
      _builder.clearSkipGroup()
    }
    /**
     * `required group SkipGroup = 15 [json_name = "skipgroup"] { ... }`
     * @return Whether the skipgroup field is set.
     */
    public fun hasSkipGroup(): kotlin.Boolean {
      return _builder.hasSkipGroup()
    }

    public val GoSkipTestKt.Dsl.skipGroupOrNull: test_proto.Test.GoSkipTest.SkipGroup?
      get() = _builder.skipGroupOrNull
  }
  @kotlin.jvm.JvmName("-initializeskipGroup")
  public inline fun skipGroup(block: test_proto.GoSkipTestKt.SkipGroupKt.Dsl.() -> kotlin.Unit): test_proto.Test.GoSkipTest.SkipGroup =
    test_proto.GoSkipTestKt.SkipGroupKt.Dsl._create(test_proto.Test.GoSkipTest.SkipGroup.newBuilder()).apply { block() }._build()
  /**
   * Protobuf type `test_proto.GoSkipTest.SkipGroup`
   */
  public object SkipGroupKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: test_proto.Test.GoSkipTest.SkipGroup.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
        internal fun _create(builder: test_proto.Test.GoSkipTest.SkipGroup.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
      internal fun _build(): test_proto.Test.GoSkipTest.SkipGroup = _builder.build()

      /**
       * `required int32 group_int32 = 16 [json_name = "groupInt32"];`
       */
      public var groupInt32: kotlin.Int
        @JvmName("getGroupInt32")
        get() = _builder.groupInt32
        @JvmName("setGroupInt32")
        set(value) {
          _builder.groupInt32 = value
        }
      /**
       * `required int32 group_int32 = 16 [json_name = "groupInt32"];`
       */
      public fun clearGroupInt32() {
        _builder.clearGroupInt32()
      }
      /**
       * `required int32 group_int32 = 16 [json_name = "groupInt32"];`
       * @return Whether the groupInt32 field is set.
       */
      public fun hasGroupInt32(): kotlin.Boolean {
        return _builder.hasGroupInt32()
      }

      /**
       * `required string group_string = 17 [json_name = "groupString"];`
       */
      public var groupString: kotlin.String
        @JvmName("getGroupString")
        get() = _builder.groupString
        @JvmName("setGroupString")
        set(value) {
          _builder.groupString = value
        }
      /**
       * `required string group_string = 17 [json_name = "groupString"];`
       */
      public fun clearGroupString() {
        _builder.clearGroupString()
      }
      /**
       * `required string group_string = 17 [json_name = "groupString"];`
       * @return Whether the groupString field is set.
       */
      public fun hasGroupString(): kotlin.Boolean {
        return _builder.hasGroupString()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun test_proto.Test.GoSkipTest.copy(block: `test_proto`.GoSkipTestKt.Dsl.() -> kotlin.Unit): test_proto.Test.GoSkipTest =
  `test_proto`.GoSkipTestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun test_proto.Test.GoSkipTest.SkipGroup.copy(block: `test_proto`.GoSkipTestKt.SkipGroupKt.Dsl.() -> kotlin.Unit): test_proto.Test.GoSkipTest.SkipGroup =
  `test_proto`.GoSkipTestKt.SkipGroupKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val test_proto.Test.GoSkipTestOrBuilder.skipGroupOrNull: test_proto.Test.GoSkipTest.SkipGroup?
  get() = if (hasSkipGroup()) getSkipGroup() else null

