// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: test.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package test_proto;

@kotlin.jvm.JvmName("-initializegoTestRequiredGroupField")
public inline fun goTestRequiredGroupField(block: test_proto.GoTestRequiredGroupFieldKt.Dsl.() -> kotlin.Unit): test_proto.Test.GoTestRequiredGroupField =
  test_proto.GoTestRequiredGroupFieldKt.Dsl._create(test_proto.Test.GoTestRequiredGroupField.newBuilder()).apply { block() }._build()
/**
 * ```
 * For testing a group containing a required field.
 * ```
 *
 * Protobuf type `test_proto.GoTestRequiredGroupField`
 */
public object GoTestRequiredGroupFieldKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: test_proto.Test.GoTestRequiredGroupField.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: test_proto.Test.GoTestRequiredGroupField.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): test_proto.Test.GoTestRequiredGroupField = _builder.build()

    /**
     * `required group Group = 1 [json_name = "group"] { ... }`
     */
    public var group: test_proto.Test.GoTestRequiredGroupField.Group
      @JvmName("getGroup")
      get() = _builder.group
      @JvmName("setGroup")
      set(value) {
        _builder.group = value
      }
    /**
     * `required group Group = 1 [json_name = "group"] { ... }`
     */
    public fun clearGroup() {
      _builder.clearGroup()
    }
    /**
     * `required group Group = 1 [json_name = "group"] { ... }`
     * @return Whether the group field is set.
     */
    public fun hasGroup(): kotlin.Boolean {
      return _builder.hasGroup()
    }

    public val GoTestRequiredGroupFieldKt.Dsl.groupOrNull: test_proto.Test.GoTestRequiredGroupField.Group?
      get() = _builder.groupOrNull
  }
  @kotlin.jvm.JvmName("-initializegroup")
  public inline fun group(block: test_proto.GoTestRequiredGroupFieldKt.GroupKt.Dsl.() -> kotlin.Unit): test_proto.Test.GoTestRequiredGroupField.Group =
    test_proto.GoTestRequiredGroupFieldKt.GroupKt.Dsl._create(test_proto.Test.GoTestRequiredGroupField.Group.newBuilder()).apply { block() }._build()
  /**
   * Protobuf type `test_proto.GoTestRequiredGroupField.Group`
   */
  public object GroupKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: test_proto.Test.GoTestRequiredGroupField.Group.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
        internal fun _create(builder: test_proto.Test.GoTestRequiredGroupField.Group.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
      internal fun _build(): test_proto.Test.GoTestRequiredGroupField.Group = _builder.build()

      /**
       * `required int32 Field = 2 [json_name = "Field"];`
       */
      public var field: kotlin.Int
        @JvmName("getField")
        get() = _builder.field
        @JvmName("setField")
        set(value) {
          _builder.field = value
        }
      /**
       * `required int32 Field = 2 [json_name = "Field"];`
       */
      public fun clearField() {
        _builder.clearField()
      }
      /**
       * `required int32 Field = 2 [json_name = "Field"];`
       * @return Whether the field field is set.
       */
      public fun hasField(): kotlin.Boolean {
        return _builder.hasField()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun test_proto.Test.GoTestRequiredGroupField.copy(block: `test_proto`.GoTestRequiredGroupFieldKt.Dsl.() -> kotlin.Unit): test_proto.Test.GoTestRequiredGroupField =
  `test_proto`.GoTestRequiredGroupFieldKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun test_proto.Test.GoTestRequiredGroupField.Group.copy(block: `test_proto`.GoTestRequiredGroupFieldKt.GroupKt.Dsl.() -> kotlin.Unit): test_proto.Test.GoTestRequiredGroupField.Group =
  `test_proto`.GoTestRequiredGroupFieldKt.GroupKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val test_proto.Test.GoTestRequiredGroupFieldOrBuilder.groupOrNull: test_proto.Test.GoTestRequiredGroupField.Group?
  get() = if (hasGroup()) getGroup() else null

