// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: test.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package test_proto;

@kotlin.jvm.JvmName("-initializedefaults")
public inline fun defaults(block: test_proto.DefaultsKt.Dsl.() -> kotlin.Unit): test_proto.Test.Defaults =
  test_proto.DefaultsKt.Dsl._create(test_proto.Test.Defaults.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `test_proto.Defaults`
 */
public object DefaultsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: test_proto.Test.Defaults.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: test_proto.Test.Defaults.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): test_proto.Test.Defaults = _builder.build()

    /**
     * ```
     * Default-valued fields of all basic types.
     * Same as GoTest, but copied here to make testing easier.
     * ```
     *
     * `optional bool F_Bool = 1 [default = true, json_name = "FBool"];`
     */
    public var fBool: kotlin.Boolean
      @JvmName("getFBool")
      get() = _builder.fBool
      @JvmName("setFBool")
      set(value) {
        _builder.fBool = value
      }
    /**
     * ```
     * Default-valued fields of all basic types.
     * Same as GoTest, but copied here to make testing easier.
     * ```
     *
     * `optional bool F_Bool = 1 [default = true, json_name = "FBool"];`
     */
    public fun clearFBool() {
      _builder.clearFBool()
    }
    /**
     * ```
     * Default-valued fields of all basic types.
     * Same as GoTest, but copied here to make testing easier.
     * ```
     *
     * `optional bool F_Bool = 1 [default = true, json_name = "FBool"];`
     * @return Whether the fBool field is set.
     */
    public fun hasFBool(): kotlin.Boolean {
      return _builder.hasFBool()
    }

    /**
     * `optional int32 F_Int32 = 2 [default = 32, json_name = "FInt32"];`
     */
    public var fInt32: kotlin.Int
      @JvmName("getFInt32")
      get() = _builder.fInt32
      @JvmName("setFInt32")
      set(value) {
        _builder.fInt32 = value
      }
    /**
     * `optional int32 F_Int32 = 2 [default = 32, json_name = "FInt32"];`
     */
    public fun clearFInt32() {
      _builder.clearFInt32()
    }
    /**
     * `optional int32 F_Int32 = 2 [default = 32, json_name = "FInt32"];`
     * @return Whether the fInt32 field is set.
     */
    public fun hasFInt32(): kotlin.Boolean {
      return _builder.hasFInt32()
    }

    /**
     * `optional int64 F_Int64 = 3 [default = 64, json_name = "FInt64"];`
     */
    public var fInt64: kotlin.Long
      @JvmName("getFInt64")
      get() = _builder.fInt64
      @JvmName("setFInt64")
      set(value) {
        _builder.fInt64 = value
      }
    /**
     * `optional int64 F_Int64 = 3 [default = 64, json_name = "FInt64"];`
     */
    public fun clearFInt64() {
      _builder.clearFInt64()
    }
    /**
     * `optional int64 F_Int64 = 3 [default = 64, json_name = "FInt64"];`
     * @return Whether the fInt64 field is set.
     */
    public fun hasFInt64(): kotlin.Boolean {
      return _builder.hasFInt64()
    }

    /**
     * `optional fixed32 F_Fixed32 = 4 [default = 320, json_name = "FFixed32"];`
     */
    public var fFixed32: kotlin.Int
      @JvmName("getFFixed32")
      get() = _builder.fFixed32
      @JvmName("setFFixed32")
      set(value) {
        _builder.fFixed32 = value
      }
    /**
     * `optional fixed32 F_Fixed32 = 4 [default = 320, json_name = "FFixed32"];`
     */
    public fun clearFFixed32() {
      _builder.clearFFixed32()
    }
    /**
     * `optional fixed32 F_Fixed32 = 4 [default = 320, json_name = "FFixed32"];`
     * @return Whether the fFixed32 field is set.
     */
    public fun hasFFixed32(): kotlin.Boolean {
      return _builder.hasFFixed32()
    }

    /**
     * `optional fixed64 F_Fixed64 = 5 [default = 640, json_name = "FFixed64"];`
     */
    public var fFixed64: kotlin.Long
      @JvmName("getFFixed64")
      get() = _builder.fFixed64
      @JvmName("setFFixed64")
      set(value) {
        _builder.fFixed64 = value
      }
    /**
     * `optional fixed64 F_Fixed64 = 5 [default = 640, json_name = "FFixed64"];`
     */
    public fun clearFFixed64() {
      _builder.clearFFixed64()
    }
    /**
     * `optional fixed64 F_Fixed64 = 5 [default = 640, json_name = "FFixed64"];`
     * @return Whether the fFixed64 field is set.
     */
    public fun hasFFixed64(): kotlin.Boolean {
      return _builder.hasFFixed64()
    }

    /**
     * `optional uint32 F_Uint32 = 6 [default = 3200, json_name = "FUint32"];`
     */
    public var fUint32: kotlin.Int
      @JvmName("getFUint32")
      get() = _builder.fUint32
      @JvmName("setFUint32")
      set(value) {
        _builder.fUint32 = value
      }
    /**
     * `optional uint32 F_Uint32 = 6 [default = 3200, json_name = "FUint32"];`
     */
    public fun clearFUint32() {
      _builder.clearFUint32()
    }
    /**
     * `optional uint32 F_Uint32 = 6 [default = 3200, json_name = "FUint32"];`
     * @return Whether the fUint32 field is set.
     */
    public fun hasFUint32(): kotlin.Boolean {
      return _builder.hasFUint32()
    }

    /**
     * `optional uint64 F_Uint64 = 7 [default = 6400, json_name = "FUint64"];`
     */
    public var fUint64: kotlin.Long
      @JvmName("getFUint64")
      get() = _builder.fUint64
      @JvmName("setFUint64")
      set(value) {
        _builder.fUint64 = value
      }
    /**
     * `optional uint64 F_Uint64 = 7 [default = 6400, json_name = "FUint64"];`
     */
    public fun clearFUint64() {
      _builder.clearFUint64()
    }
    /**
     * `optional uint64 F_Uint64 = 7 [default = 6400, json_name = "FUint64"];`
     * @return Whether the fUint64 field is set.
     */
    public fun hasFUint64(): kotlin.Boolean {
      return _builder.hasFUint64()
    }

    /**
     * `optional float F_Float = 8 [default = 314159, json_name = "FFloat"];`
     */
    public var fFloat: kotlin.Float
      @JvmName("getFFloat")
      get() = _builder.fFloat
      @JvmName("setFFloat")
      set(value) {
        _builder.fFloat = value
      }
    /**
     * `optional float F_Float = 8 [default = 314159, json_name = "FFloat"];`
     */
    public fun clearFFloat() {
      _builder.clearFFloat()
    }
    /**
     * `optional float F_Float = 8 [default = 314159, json_name = "FFloat"];`
     * @return Whether the fFloat field is set.
     */
    public fun hasFFloat(): kotlin.Boolean {
      return _builder.hasFFloat()
    }

    /**
     * `optional double F_Double = 9 [default = 271828, json_name = "FDouble"];`
     */
    public var fDouble: kotlin.Double
      @JvmName("getFDouble")
      get() = _builder.fDouble
      @JvmName("setFDouble")
      set(value) {
        _builder.fDouble = value
      }
    /**
     * `optional double F_Double = 9 [default = 271828, json_name = "FDouble"];`
     */
    public fun clearFDouble() {
      _builder.clearFDouble()
    }
    /**
     * `optional double F_Double = 9 [default = 271828, json_name = "FDouble"];`
     * @return Whether the fDouble field is set.
     */
    public fun hasFDouble(): kotlin.Boolean {
      return _builder.hasFDouble()
    }

    /**
     * `optional string F_String = 10 [default = "hello, \"world!\"\n", json_name = "FString"];`
     */
    public var fString: kotlin.String
      @JvmName("getFString")
      get() = _builder.fString
      @JvmName("setFString")
      set(value) {
        _builder.fString = value
      }
    /**
     * `optional string F_String = 10 [default = "hello, \"world!\"\n", json_name = "FString"];`
     */
    public fun clearFString() {
      _builder.clearFString()
    }
    /**
     * `optional string F_String = 10 [default = "hello, \"world!\"\n", json_name = "FString"];`
     * @return Whether the fString field is set.
     */
    public fun hasFString(): kotlin.Boolean {
      return _builder.hasFString()
    }

    /**
     * `optional bytes F_Bytes = 11 [default = "Bignose", json_name = "FBytes"];`
     */
    public var fBytes: com.google.protobuf.ByteString
      @JvmName("getFBytes")
      get() = _builder.fBytes
      @JvmName("setFBytes")
      set(value) {
        _builder.fBytes = value
      }
    /**
     * `optional bytes F_Bytes = 11 [default = "Bignose", json_name = "FBytes"];`
     */
    public fun clearFBytes() {
      _builder.clearFBytes()
    }
    /**
     * `optional bytes F_Bytes = 11 [default = "Bignose", json_name = "FBytes"];`
     * @return Whether the fBytes field is set.
     */
    public fun hasFBytes(): kotlin.Boolean {
      return _builder.hasFBytes()
    }

    /**
     * `optional sint32 F_Sint32 = 12 [default = -32, json_name = "FSint32"];`
     */
    public var fSint32: kotlin.Int
      @JvmName("getFSint32")
      get() = _builder.fSint32
      @JvmName("setFSint32")
      set(value) {
        _builder.fSint32 = value
      }
    /**
     * `optional sint32 F_Sint32 = 12 [default = -32, json_name = "FSint32"];`
     */
    public fun clearFSint32() {
      _builder.clearFSint32()
    }
    /**
     * `optional sint32 F_Sint32 = 12 [default = -32, json_name = "FSint32"];`
     * @return Whether the fSint32 field is set.
     */
    public fun hasFSint32(): kotlin.Boolean {
      return _builder.hasFSint32()
    }

    /**
     * `optional sint64 F_Sint64 = 13 [default = -64, json_name = "FSint64"];`
     */
    public var fSint64: kotlin.Long
      @JvmName("getFSint64")
      get() = _builder.fSint64
      @JvmName("setFSint64")
      set(value) {
        _builder.fSint64 = value
      }
    /**
     * `optional sint64 F_Sint64 = 13 [default = -64, json_name = "FSint64"];`
     */
    public fun clearFSint64() {
      _builder.clearFSint64()
    }
    /**
     * `optional sint64 F_Sint64 = 13 [default = -64, json_name = "FSint64"];`
     * @return Whether the fSint64 field is set.
     */
    public fun hasFSint64(): kotlin.Boolean {
      return _builder.hasFSint64()
    }

    /**
     * `optional .test_proto.Defaults.Color F_Enum = 14 [default = GREEN, json_name = "FEnum"];`
     */
    public var fEnum: test_proto.Test.Defaults.Color
      @JvmName("getFEnum")
      get() = _builder.fEnum
      @JvmName("setFEnum")
      set(value) {
        _builder.fEnum = value
      }
    /**
     * `optional .test_proto.Defaults.Color F_Enum = 14 [default = GREEN, json_name = "FEnum"];`
     */
    public fun clearFEnum() {
      _builder.clearFEnum()
    }
    /**
     * `optional .test_proto.Defaults.Color F_Enum = 14 [default = GREEN, json_name = "FEnum"];`
     * @return Whether the fEnum field is set.
     */
    public fun hasFEnum(): kotlin.Boolean {
      return _builder.hasFEnum()
    }

    /**
     * ```
     * More fields with crazy defaults.
     * ```
     *
     * `optional float F_Pinf = 15 [default = inf, json_name = "FPinf"];`
     */
    public var fPinf: kotlin.Float
      @JvmName("getFPinf")
      get() = _builder.fPinf
      @JvmName("setFPinf")
      set(value) {
        _builder.fPinf = value
      }
    /**
     * ```
     * More fields with crazy defaults.
     * ```
     *
     * `optional float F_Pinf = 15 [default = inf, json_name = "FPinf"];`
     */
    public fun clearFPinf() {
      _builder.clearFPinf()
    }
    /**
     * ```
     * More fields with crazy defaults.
     * ```
     *
     * `optional float F_Pinf = 15 [default = inf, json_name = "FPinf"];`
     * @return Whether the fPinf field is set.
     */
    public fun hasFPinf(): kotlin.Boolean {
      return _builder.hasFPinf()
    }

    /**
     * `optional float F_Ninf = 16 [default = -inf, json_name = "FNinf"];`
     */
    public var fNinf: kotlin.Float
      @JvmName("getFNinf")
      get() = _builder.fNinf
      @JvmName("setFNinf")
      set(value) {
        _builder.fNinf = value
      }
    /**
     * `optional float F_Ninf = 16 [default = -inf, json_name = "FNinf"];`
     */
    public fun clearFNinf() {
      _builder.clearFNinf()
    }
    /**
     * `optional float F_Ninf = 16 [default = -inf, json_name = "FNinf"];`
     * @return Whether the fNinf field is set.
     */
    public fun hasFNinf(): kotlin.Boolean {
      return _builder.hasFNinf()
    }

    /**
     * `optional float F_Nan = 17 [default = nan, json_name = "FNan"];`
     */
    public var fNan: kotlin.Float
      @JvmName("getFNan")
      get() = _builder.fNan
      @JvmName("setFNan")
      set(value) {
        _builder.fNan = value
      }
    /**
     * `optional float F_Nan = 17 [default = nan, json_name = "FNan"];`
     */
    public fun clearFNan() {
      _builder.clearFNan()
    }
    /**
     * `optional float F_Nan = 17 [default = nan, json_name = "FNan"];`
     * @return Whether the fNan field is set.
     */
    public fun hasFNan(): kotlin.Boolean {
      return _builder.hasFNan()
    }

    /**
     * ```
     * Sub-message.
     * ```
     *
     * `optional .test_proto.SubDefaults sub = 18 [json_name = "sub"];`
     */
    public var sub: test_proto.Test.SubDefaults
      @JvmName("getSub")
      get() = _builder.sub
      @JvmName("setSub")
      set(value) {
        _builder.sub = value
      }
    /**
     * ```
     * Sub-message.
     * ```
     *
     * `optional .test_proto.SubDefaults sub = 18 [json_name = "sub"];`
     */
    public fun clearSub() {
      _builder.clearSub()
    }
    /**
     * ```
     * Sub-message.
     * ```
     *
     * `optional .test_proto.SubDefaults sub = 18 [json_name = "sub"];`
     * @return Whether the sub field is set.
     */
    public fun hasSub(): kotlin.Boolean {
      return _builder.hasSub()
    }

    public val DefaultsKt.Dsl.subOrNull: test_proto.Test.SubDefaults?
      get() = _builder.subOrNull

    /**
     * ```
     * Redundant but explicit defaults.
     * ```
     *
     * `optional string str_zero = 19 [default = "", json_name = "strZero"];`
     */
    public var strZero: kotlin.String
      @JvmName("getStrZero")
      get() = _builder.strZero
      @JvmName("setStrZero")
      set(value) {
        _builder.strZero = value
      }
    /**
     * ```
     * Redundant but explicit defaults.
     * ```
     *
     * `optional string str_zero = 19 [default = "", json_name = "strZero"];`
     */
    public fun clearStrZero() {
      _builder.clearStrZero()
    }
    /**
     * ```
     * Redundant but explicit defaults.
     * ```
     *
     * `optional string str_zero = 19 [default = "", json_name = "strZero"];`
     * @return Whether the strZero field is set.
     */
    public fun hasStrZero(): kotlin.Boolean {
      return _builder.hasStrZero()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun test_proto.Test.Defaults.copy(block: `test_proto`.DefaultsKt.Dsl.() -> kotlin.Unit): test_proto.Test.Defaults =
  `test_proto`.DefaultsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val test_proto.Test.DefaultsOrBuilder.subOrNull: test_proto.Test.SubDefaults?
  get() = if (hasSub()) getSub() else null

