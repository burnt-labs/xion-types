// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: test.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package test_proto;

@kotlin.jvm.JvmName("-initializegoTestField")
public inline fun goTestField(block: test_proto.GoTestFieldKt.Dsl.() -> kotlin.Unit): test_proto.Test.GoTestField =
  test_proto.GoTestFieldKt.Dsl._create(test_proto.Test.GoTestField.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `test_proto.GoTestField`
 */
public object GoTestFieldKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: test_proto.Test.GoTestField.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: test_proto.Test.GoTestField.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): test_proto.Test.GoTestField = _builder.build()

    /**
     * `required string Label = 1 [json_name = "Label"];`
     */
    public var label: kotlin.String
      @JvmName("getLabel")
      get() = _builder.label
      @JvmName("setLabel")
      set(value) {
        _builder.label = value
      }
    /**
     * `required string Label = 1 [json_name = "Label"];`
     */
    public fun clearLabel() {
      _builder.clearLabel()
    }
    /**
     * `required string Label = 1 [json_name = "Label"];`
     * @return Whether the label field is set.
     */
    public fun hasLabel(): kotlin.Boolean {
      return _builder.hasLabel()
    }

    /**
     * `required string Type = 2 [json_name = "Type"];`
     */
    public var type: kotlin.String
      @JvmName("getType")
      get() = _builder.type
      @JvmName("setType")
      set(value) {
        _builder.type = value
      }
    /**
     * `required string Type = 2 [json_name = "Type"];`
     */
    public fun clearType() {
      _builder.clearType()
    }
    /**
     * `required string Type = 2 [json_name = "Type"];`
     * @return Whether the type field is set.
     */
    public fun hasType(): kotlin.Boolean {
      return _builder.hasType()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun test_proto.Test.GoTestField.copy(block: `test_proto`.GoTestFieldKt.Dsl.() -> kotlin.Unit): test_proto.Test.GoTestField =
  `test_proto`.GoTestFieldKt.Dsl._create(this.toBuilder()).apply { block() }._build()

