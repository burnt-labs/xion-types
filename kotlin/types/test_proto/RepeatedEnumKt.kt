// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: test.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package test_proto;

@kotlin.jvm.JvmName("-initializerepeatedEnum")
public inline fun repeatedEnum(block: test_proto.RepeatedEnumKt.Dsl.() -> kotlin.Unit): test_proto.Test.RepeatedEnum =
  test_proto.RepeatedEnumKt.Dsl._create(test_proto.Test.RepeatedEnum.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `test_proto.RepeatedEnum`
 */
public object RepeatedEnumKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: test_proto.Test.RepeatedEnum.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: test_proto.Test.RepeatedEnum.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): test_proto.Test.RepeatedEnum = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class ColorProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `repeated .test_proto.RepeatedEnum.Color color = 1 [json_name = "color"];`
     */
    public val color: com.google.protobuf.kotlin.DslList<test_proto.Test.RepeatedEnum.Color, ColorProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.colorList
      )
    /**
     * `repeated .test_proto.RepeatedEnum.Color color = 1 [json_name = "color"];`
     * @param value The color to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addColor")
    public fun com.google.protobuf.kotlin.DslList<test_proto.Test.RepeatedEnum.Color, ColorProxy>.add(value: test_proto.Test.RepeatedEnum.Color) {
      _builder.addColor(value)
    }/**
     * `repeated .test_proto.RepeatedEnum.Color color = 1 [json_name = "color"];`
     * @param value The color to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignColor")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<test_proto.Test.RepeatedEnum.Color, ColorProxy>.plusAssign(value: test_proto.Test.RepeatedEnum.Color) {
      add(value)
    }/**
     * `repeated .test_proto.RepeatedEnum.Color color = 1 [json_name = "color"];`
     * @param values The color to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllColor")
    public fun com.google.protobuf.kotlin.DslList<test_proto.Test.RepeatedEnum.Color, ColorProxy>.addAll(values: kotlin.collections.Iterable<test_proto.Test.RepeatedEnum.Color>) {
      _builder.addAllColor(values)
    }/**
     * `repeated .test_proto.RepeatedEnum.Color color = 1 [json_name = "color"];`
     * @param values The color to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllColor")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<test_proto.Test.RepeatedEnum.Color, ColorProxy>.plusAssign(values: kotlin.collections.Iterable<test_proto.Test.RepeatedEnum.Color>) {
      addAll(values)
    }/**
     * `repeated .test_proto.RepeatedEnum.Color color = 1 [json_name = "color"];`
     * @param index The index to set the value at.
     * @param value The color to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setColor")
    public operator fun com.google.protobuf.kotlin.DslList<test_proto.Test.RepeatedEnum.Color, ColorProxy>.set(index: kotlin.Int, value: test_proto.Test.RepeatedEnum.Color) {
      _builder.setColor(index, value)
    }/**
     * `repeated .test_proto.RepeatedEnum.Color color = 1 [json_name = "color"];`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearColor")
    public fun com.google.protobuf.kotlin.DslList<test_proto.Test.RepeatedEnum.Color, ColorProxy>.clear() {
      _builder.clearColor()
    }}
}
@kotlin.jvm.JvmSynthetic
public inline fun test_proto.Test.RepeatedEnum.copy(block: `test_proto`.RepeatedEnumKt.Dsl.() -> kotlin.Unit): test_proto.Test.RepeatedEnum =
  `test_proto`.RepeatedEnumKt.Dsl._create(this.toBuilder()).apply { block() }._build()

