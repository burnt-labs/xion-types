// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: test.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package test_proto;

@kotlin.jvm.JvmName("-initializeoneof")
public inline fun oneof(block: test_proto.OneofKt.Dsl.() -> kotlin.Unit): test_proto.Test.Oneof =
  test_proto.OneofKt.Dsl._create(test_proto.Test.Oneof.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `test_proto.Oneof`
 */
public object OneofKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: test_proto.Test.Oneof.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: test_proto.Test.Oneof.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): test_proto.Test.Oneof = _builder.build()

    /**
     * `bool F_Bool = 1 [json_name = "FBool"];`
     */
    public var fBool: kotlin.Boolean
      @JvmName("getFBool")
      get() = _builder.fBool
      @JvmName("setFBool")
      set(value) {
        _builder.fBool = value
      }
    /**
     * `bool F_Bool = 1 [json_name = "FBool"];`
     */
    public fun clearFBool() {
      _builder.clearFBool()
    }
    /**
     * `bool F_Bool = 1 [json_name = "FBool"];`
     * @return Whether the fBool field is set.
     */
    public fun hasFBool(): kotlin.Boolean {
      return _builder.hasFBool()
    }

    /**
     * `int32 F_Int32 = 2 [json_name = "FInt32"];`
     */
    public var fInt32: kotlin.Int
      @JvmName("getFInt32")
      get() = _builder.fInt32
      @JvmName("setFInt32")
      set(value) {
        _builder.fInt32 = value
      }
    /**
     * `int32 F_Int32 = 2 [json_name = "FInt32"];`
     */
    public fun clearFInt32() {
      _builder.clearFInt32()
    }
    /**
     * `int32 F_Int32 = 2 [json_name = "FInt32"];`
     * @return Whether the fInt32 field is set.
     */
    public fun hasFInt32(): kotlin.Boolean {
      return _builder.hasFInt32()
    }

    /**
     * `int64 F_Int64 = 3 [json_name = "FInt64"];`
     */
    public var fInt64: kotlin.Long
      @JvmName("getFInt64")
      get() = _builder.fInt64
      @JvmName("setFInt64")
      set(value) {
        _builder.fInt64 = value
      }
    /**
     * `int64 F_Int64 = 3 [json_name = "FInt64"];`
     */
    public fun clearFInt64() {
      _builder.clearFInt64()
    }
    /**
     * `int64 F_Int64 = 3 [json_name = "FInt64"];`
     * @return Whether the fInt64 field is set.
     */
    public fun hasFInt64(): kotlin.Boolean {
      return _builder.hasFInt64()
    }

    /**
     * `fixed32 F_Fixed32 = 4 [json_name = "FFixed32"];`
     */
    public var fFixed32: kotlin.Int
      @JvmName("getFFixed32")
      get() = _builder.fFixed32
      @JvmName("setFFixed32")
      set(value) {
        _builder.fFixed32 = value
      }
    /**
     * `fixed32 F_Fixed32 = 4 [json_name = "FFixed32"];`
     */
    public fun clearFFixed32() {
      _builder.clearFFixed32()
    }
    /**
     * `fixed32 F_Fixed32 = 4 [json_name = "FFixed32"];`
     * @return Whether the fFixed32 field is set.
     */
    public fun hasFFixed32(): kotlin.Boolean {
      return _builder.hasFFixed32()
    }

    /**
     * `fixed64 F_Fixed64 = 5 [json_name = "FFixed64"];`
     */
    public var fFixed64: kotlin.Long
      @JvmName("getFFixed64")
      get() = _builder.fFixed64
      @JvmName("setFFixed64")
      set(value) {
        _builder.fFixed64 = value
      }
    /**
     * `fixed64 F_Fixed64 = 5 [json_name = "FFixed64"];`
     */
    public fun clearFFixed64() {
      _builder.clearFFixed64()
    }
    /**
     * `fixed64 F_Fixed64 = 5 [json_name = "FFixed64"];`
     * @return Whether the fFixed64 field is set.
     */
    public fun hasFFixed64(): kotlin.Boolean {
      return _builder.hasFFixed64()
    }

    /**
     * `uint32 F_Uint32 = 6 [json_name = "FUint32"];`
     */
    public var fUint32: kotlin.Int
      @JvmName("getFUint32")
      get() = _builder.fUint32
      @JvmName("setFUint32")
      set(value) {
        _builder.fUint32 = value
      }
    /**
     * `uint32 F_Uint32 = 6 [json_name = "FUint32"];`
     */
    public fun clearFUint32() {
      _builder.clearFUint32()
    }
    /**
     * `uint32 F_Uint32 = 6 [json_name = "FUint32"];`
     * @return Whether the fUint32 field is set.
     */
    public fun hasFUint32(): kotlin.Boolean {
      return _builder.hasFUint32()
    }

    /**
     * `uint64 F_Uint64 = 7 [json_name = "FUint64"];`
     */
    public var fUint64: kotlin.Long
      @JvmName("getFUint64")
      get() = _builder.fUint64
      @JvmName("setFUint64")
      set(value) {
        _builder.fUint64 = value
      }
    /**
     * `uint64 F_Uint64 = 7 [json_name = "FUint64"];`
     */
    public fun clearFUint64() {
      _builder.clearFUint64()
    }
    /**
     * `uint64 F_Uint64 = 7 [json_name = "FUint64"];`
     * @return Whether the fUint64 field is set.
     */
    public fun hasFUint64(): kotlin.Boolean {
      return _builder.hasFUint64()
    }

    /**
     * `float F_Float = 8 [json_name = "FFloat"];`
     */
    public var fFloat: kotlin.Float
      @JvmName("getFFloat")
      get() = _builder.fFloat
      @JvmName("setFFloat")
      set(value) {
        _builder.fFloat = value
      }
    /**
     * `float F_Float = 8 [json_name = "FFloat"];`
     */
    public fun clearFFloat() {
      _builder.clearFFloat()
    }
    /**
     * `float F_Float = 8 [json_name = "FFloat"];`
     * @return Whether the fFloat field is set.
     */
    public fun hasFFloat(): kotlin.Boolean {
      return _builder.hasFFloat()
    }

    /**
     * `double F_Double = 9 [json_name = "FDouble"];`
     */
    public var fDouble: kotlin.Double
      @JvmName("getFDouble")
      get() = _builder.fDouble
      @JvmName("setFDouble")
      set(value) {
        _builder.fDouble = value
      }
    /**
     * `double F_Double = 9 [json_name = "FDouble"];`
     */
    public fun clearFDouble() {
      _builder.clearFDouble()
    }
    /**
     * `double F_Double = 9 [json_name = "FDouble"];`
     * @return Whether the fDouble field is set.
     */
    public fun hasFDouble(): kotlin.Boolean {
      return _builder.hasFDouble()
    }

    /**
     * `string F_String = 10 [json_name = "FString"];`
     */
    public var fString: kotlin.String
      @JvmName("getFString")
      get() = _builder.fString
      @JvmName("setFString")
      set(value) {
        _builder.fString = value
      }
    /**
     * `string F_String = 10 [json_name = "FString"];`
     */
    public fun clearFString() {
      _builder.clearFString()
    }
    /**
     * `string F_String = 10 [json_name = "FString"];`
     * @return Whether the fString field is set.
     */
    public fun hasFString(): kotlin.Boolean {
      return _builder.hasFString()
    }

    /**
     * `bytes F_Bytes = 11 [json_name = "FBytes"];`
     */
    public var fBytes: com.google.protobuf.ByteString
      @JvmName("getFBytes")
      get() = _builder.fBytes
      @JvmName("setFBytes")
      set(value) {
        _builder.fBytes = value
      }
    /**
     * `bytes F_Bytes = 11 [json_name = "FBytes"];`
     */
    public fun clearFBytes() {
      _builder.clearFBytes()
    }
    /**
     * `bytes F_Bytes = 11 [json_name = "FBytes"];`
     * @return Whether the fBytes field is set.
     */
    public fun hasFBytes(): kotlin.Boolean {
      return _builder.hasFBytes()
    }

    /**
     * `sint32 F_Sint32 = 12 [json_name = "FSint32"];`
     */
    public var fSint32: kotlin.Int
      @JvmName("getFSint32")
      get() = _builder.fSint32
      @JvmName("setFSint32")
      set(value) {
        _builder.fSint32 = value
      }
    /**
     * `sint32 F_Sint32 = 12 [json_name = "FSint32"];`
     */
    public fun clearFSint32() {
      _builder.clearFSint32()
    }
    /**
     * `sint32 F_Sint32 = 12 [json_name = "FSint32"];`
     * @return Whether the fSint32 field is set.
     */
    public fun hasFSint32(): kotlin.Boolean {
      return _builder.hasFSint32()
    }

    /**
     * `sint64 F_Sint64 = 13 [json_name = "FSint64"];`
     */
    public var fSint64: kotlin.Long
      @JvmName("getFSint64")
      get() = _builder.fSint64
      @JvmName("setFSint64")
      set(value) {
        _builder.fSint64 = value
      }
    /**
     * `sint64 F_Sint64 = 13 [json_name = "FSint64"];`
     */
    public fun clearFSint64() {
      _builder.clearFSint64()
    }
    /**
     * `sint64 F_Sint64 = 13 [json_name = "FSint64"];`
     * @return Whether the fSint64 field is set.
     */
    public fun hasFSint64(): kotlin.Boolean {
      return _builder.hasFSint64()
    }

    /**
     * `.test_proto.MyMessage.Color F_Enum = 14 [json_name = "FEnum"];`
     */
    public var fEnum: test_proto.Test.MyMessage.Color
      @JvmName("getFEnum")
      get() = _builder.fEnum
      @JvmName("setFEnum")
      set(value) {
        _builder.fEnum = value
      }
    /**
     * `.test_proto.MyMessage.Color F_Enum = 14 [json_name = "FEnum"];`
     */
    public fun clearFEnum() {
      _builder.clearFEnum()
    }
    /**
     * `.test_proto.MyMessage.Color F_Enum = 14 [json_name = "FEnum"];`
     * @return Whether the fEnum field is set.
     */
    public fun hasFEnum(): kotlin.Boolean {
      return _builder.hasFEnum()
    }

    /**
     * `.test_proto.GoTestField F_Message = 15 [json_name = "FMessage"];`
     */
    public var fMessage: test_proto.Test.GoTestField
      @JvmName("getFMessage")
      get() = _builder.fMessage
      @JvmName("setFMessage")
      set(value) {
        _builder.fMessage = value
      }
    /**
     * `.test_proto.GoTestField F_Message = 15 [json_name = "FMessage"];`
     */
    public fun clearFMessage() {
      _builder.clearFMessage()
    }
    /**
     * `.test_proto.GoTestField F_Message = 15 [json_name = "FMessage"];`
     * @return Whether the fMessage field is set.
     */
    public fun hasFMessage(): kotlin.Boolean {
      return _builder.hasFMessage()
    }

    /**
     * `group F_Group = 16 [json_name = "fGroup"] { ... }`
     */
    public var fGroup: test_proto.Test.Oneof.F_Group
      @JvmName("getFGroup")
      get() = _builder.fGroup
      @JvmName("setFGroup")
      set(value) {
        _builder.fGroup = value
      }
    /**
     * `group F_Group = 16 [json_name = "fGroup"] { ... }`
     */
    public fun clearFGroup() {
      _builder.clearFGroup()
    }
    /**
     * `group F_Group = 16 [json_name = "fGroup"] { ... }`
     * @return Whether the fGroup field is set.
     */
    public fun hasFGroup(): kotlin.Boolean {
      return _builder.hasFGroup()
    }

    /**
     * `int32 F_Largest_Tag = 536870911 [json_name = "FLargestTag"];`
     */
    public var fLargestTag: kotlin.Int
      @JvmName("getFLargestTag")
      get() = _builder.fLargestTag
      @JvmName("setFLargestTag")
      set(value) {
        _builder.fLargestTag = value
      }
    /**
     * `int32 F_Largest_Tag = 536870911 [json_name = "FLargestTag"];`
     */
    public fun clearFLargestTag() {
      _builder.clearFLargestTag()
    }
    /**
     * `int32 F_Largest_Tag = 536870911 [json_name = "FLargestTag"];`
     * @return Whether the fLargestTag field is set.
     */
    public fun hasFLargestTag(): kotlin.Boolean {
      return _builder.hasFLargestTag()
    }

    /**
     * `int32 value = 100 [json_name = "value"];`
     */
    public var value: kotlin.Int
      @JvmName("getValue")
      get() = _builder.value
      @JvmName("setValue")
      set(value) {
        _builder.value = value
      }
    /**
     * `int32 value = 100 [json_name = "value"];`
     */
    public fun clearValue() {
      _builder.clearValue()
    }
    /**
     * `int32 value = 100 [json_name = "value"];`
     * @return Whether the value field is set.
     */
    public fun hasValue(): kotlin.Boolean {
      return _builder.hasValue()
    }
    public val unionCase: test_proto.Test.Oneof.UnionCase
    @kotlin.jvm.JvmName("getUnionCase")
      get() = _builder.getUnionCase()

    public fun clearUnion() {
      _builder.clearUnion()
    }
    public val tormatoCase: test_proto.Test.Oneof.TormatoCase
    @kotlin.jvm.JvmName("getTormatoCase")
      get() = _builder.getTormatoCase()

    public fun clearTormato() {
      _builder.clearTormato()
    }
  }
  @kotlin.jvm.JvmName("-initializefGroup")
  public inline fun fGroup(block: test_proto.OneofKt.F_GroupKt.Dsl.() -> kotlin.Unit): test_proto.Test.Oneof.F_Group =
    test_proto.OneofKt.F_GroupKt.Dsl._create(test_proto.Test.Oneof.F_Group.newBuilder()).apply { block() }._build()
  /**
   * Protobuf type `test_proto.Oneof.F_Group`
   */
  public object F_GroupKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: test_proto.Test.Oneof.F_Group.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
        internal fun _create(builder: test_proto.Test.Oneof.F_Group.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
      internal fun _build(): test_proto.Test.Oneof.F_Group = _builder.build()

      /**
       * `optional int32 x = 17 [json_name = "x"];`
       */
      public var x: kotlin.Int
        @JvmName("getX")
        get() = _builder.x
        @JvmName("setX")
        set(value) {
          _builder.x = value
        }
      /**
       * `optional int32 x = 17 [json_name = "x"];`
       */
      public fun clearX() {
        _builder.clearX()
      }
      /**
       * `optional int32 x = 17 [json_name = "x"];`
       * @return Whether the x field is set.
       */
      public fun hasX(): kotlin.Boolean {
        return _builder.hasX()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun test_proto.Test.Oneof.copy(block: `test_proto`.OneofKt.Dsl.() -> kotlin.Unit): test_proto.Test.Oneof =
  `test_proto`.OneofKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun test_proto.Test.Oneof.F_Group.copy(block: `test_proto`.OneofKt.F_GroupKt.Dsl.() -> kotlin.Unit): test_proto.Test.Oneof.F_Group =
  `test_proto`.OneofKt.F_GroupKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val test_proto.Test.OneofOrBuilder.fMessageOrNull: test_proto.Test.GoTestField?
  get() = if (hasFMessage()) getFMessage() else null

public val test_proto.Test.OneofOrBuilder.fGroupOrNull: test_proto.Test.Oneof.F_Group?
  get() = if (hasFGroup()) getFGroup() else null

