// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: test.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package test_proto;

@kotlin.jvm.JvmName("-initializeoldMessage")
public inline fun oldMessage(block: test_proto.OldMessageKt.Dsl.() -> kotlin.Unit): test_proto.Test.OldMessage =
  test_proto.OldMessageKt.Dsl._create(test_proto.Test.OldMessage.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `test_proto.OldMessage`
 */
public object OldMessageKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: test_proto.Test.OldMessage.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: test_proto.Test.OldMessage.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): test_proto.Test.OldMessage = _builder.build()

    /**
     * `optional .test_proto.OldMessage.Nested nested = 1 [json_name = "nested"];`
     */
    public var nested: test_proto.Test.OldMessage.Nested
      @JvmName("getNested")
      get() = _builder.nested
      @JvmName("setNested")
      set(value) {
        _builder.nested = value
      }
    /**
     * `optional .test_proto.OldMessage.Nested nested = 1 [json_name = "nested"];`
     */
    public fun clearNested() {
      _builder.clearNested()
    }
    /**
     * `optional .test_proto.OldMessage.Nested nested = 1 [json_name = "nested"];`
     * @return Whether the nested field is set.
     */
    public fun hasNested(): kotlin.Boolean {
      return _builder.hasNested()
    }

    public val OldMessageKt.Dsl.nestedOrNull: test_proto.Test.OldMessage.Nested?
      get() = _builder.nestedOrNull

    /**
     * `optional int32 num = 2 [json_name = "num"];`
     */
    public var num: kotlin.Int
      @JvmName("getNum")
      get() = _builder.num
      @JvmName("setNum")
      set(value) {
        _builder.num = value
      }
    /**
     * `optional int32 num = 2 [json_name = "num"];`
     */
    public fun clearNum() {
      _builder.clearNum()
    }
    /**
     * `optional int32 num = 2 [json_name = "num"];`
     * @return Whether the num field is set.
     */
    public fun hasNum(): kotlin.Boolean {
      return _builder.hasNum()
    }
  }
  @kotlin.jvm.JvmName("-initializenested")
  public inline fun nested(block: test_proto.OldMessageKt.NestedKt.Dsl.() -> kotlin.Unit): test_proto.Test.OldMessage.Nested =
    test_proto.OldMessageKt.NestedKt.Dsl._create(test_proto.Test.OldMessage.Nested.newBuilder()).apply { block() }._build()
  /**
   * Protobuf type `test_proto.OldMessage.Nested`
   */
  public object NestedKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: test_proto.Test.OldMessage.Nested.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
        internal fun _create(builder: test_proto.Test.OldMessage.Nested.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
      internal fun _build(): test_proto.Test.OldMessage.Nested = _builder.build()

      /**
       * `optional string name = 1 [json_name = "name"];`
       */
      public var name: kotlin.String
        @JvmName("getName")
        get() = _builder.name
        @JvmName("setName")
        set(value) {
          _builder.name = value
        }
      /**
       * `optional string name = 1 [json_name = "name"];`
       */
      public fun clearName() {
        _builder.clearName()
      }
      /**
       * `optional string name = 1 [json_name = "name"];`
       * @return Whether the name field is set.
       */
      public fun hasName(): kotlin.Boolean {
        return _builder.hasName()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun test_proto.Test.OldMessage.copy(block: `test_proto`.OldMessageKt.Dsl.() -> kotlin.Unit): test_proto.Test.OldMessage =
  `test_proto`.OldMessageKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun test_proto.Test.OldMessage.Nested.copy(block: `test_proto`.OldMessageKt.NestedKt.Dsl.() -> kotlin.Unit): test_proto.Test.OldMessage.Nested =
  `test_proto`.OldMessageKt.NestedKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val test_proto.Test.OldMessageOrBuilder.nestedOrNull: test_proto.Test.OldMessage.Nested?
  get() = if (hasNested()) getNested() else null

