// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: test.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package test_proto;

@kotlin.jvm.JvmName("-initializefloatingPoint")
public inline fun floatingPoint(block: test_proto.FloatingPointKt.Dsl.() -> kotlin.Unit): test_proto.Test.FloatingPoint =
  test_proto.FloatingPointKt.Dsl._create(test_proto.Test.FloatingPoint.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `test_proto.FloatingPoint`
 */
public object FloatingPointKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: test_proto.Test.FloatingPoint.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: test_proto.Test.FloatingPoint.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): test_proto.Test.FloatingPoint = _builder.build()

    /**
     * `required double f = 1 [json_name = "f"];`
     */
    public var f: kotlin.Double
      @JvmName("getF")
      get() = _builder.f
      @JvmName("setF")
      set(value) {
        _builder.f = value
      }
    /**
     * `required double f = 1 [json_name = "f"];`
     */
    public fun clearF() {
      _builder.clearF()
    }
    /**
     * `required double f = 1 [json_name = "f"];`
     * @return Whether the f field is set.
     */
    public fun hasF(): kotlin.Boolean {
      return _builder.hasF()
    }

    /**
     * `optional bool exact = 2 [json_name = "exact"];`
     */
    public var exact: kotlin.Boolean
      @JvmName("getExact")
      get() = _builder.exact
      @JvmName("setExact")
      set(value) {
        _builder.exact = value
      }
    /**
     * `optional bool exact = 2 [json_name = "exact"];`
     */
    public fun clearExact() {
      _builder.clearExact()
    }
    /**
     * `optional bool exact = 2 [json_name = "exact"];`
     * @return Whether the exact field is set.
     */
    public fun hasExact(): kotlin.Boolean {
      return _builder.hasExact()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun test_proto.Test.FloatingPoint.copy(block: `test_proto`.FloatingPointKt.Dsl.() -> kotlin.Unit): test_proto.Test.FloatingPoint =
  `test_proto`.FloatingPointKt.Dsl._create(this.toBuilder()).apply { block() }._build()

