// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: osmosis/tokenfactory/v1beta1/tx.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package osmosis.tokenfactory.v1beta1;

@kotlin.jvm.JvmName("-initializemsgBurn")
public inline fun msgBurn(block: osmosis.tokenfactory.v1beta1.MsgBurnKt.Dsl.() -> kotlin.Unit): osmosis.tokenfactory.v1beta1.Tx.MsgBurn =
  osmosis.tokenfactory.v1beta1.MsgBurnKt.Dsl._create(osmosis.tokenfactory.v1beta1.Tx.MsgBurn.newBuilder()).apply { block() }._build()
/**
 * ```
 * MsgBurn is the sdk.Msg type for allowing an admin account to burn
 * a token.  For now, we only support burning from the sender account.
 * ```
 *
 * Protobuf type `osmosis.tokenfactory.v1beta1.MsgBurn`
 */
public object MsgBurnKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: osmosis.tokenfactory.v1beta1.Tx.MsgBurn.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: osmosis.tokenfactory.v1beta1.Tx.MsgBurn.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): osmosis.tokenfactory.v1beta1.Tx.MsgBurn = _builder.build()

    /**
     * `string sender = 1 [json_name = "sender", (.gogoproto.moretags) = "yaml:\"sender\""];`
     */
    public var sender: kotlin.String
      @JvmName("getSender")
      get() = _builder.sender
      @JvmName("setSender")
      set(value) {
        _builder.sender = value
      }
    /**
     * `string sender = 1 [json_name = "sender", (.gogoproto.moretags) = "yaml:\"sender\""];`
     */
    public fun clearSender() {
      _builder.clearSender()
    }

    /**
     * `.cosmos.base.v1beta1.Coin amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"amount\"", (.amino.encoding) = "legacy_coin"];`
     */
    public var amount: cosmos.base.v1beta1.CoinOuterClass.Coin
      @JvmName("getAmount")
      get() = _builder.amount
      @JvmName("setAmount")
      set(value) {
        _builder.amount = value
      }
    /**
     * `.cosmos.base.v1beta1.Coin amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"amount\"", (.amino.encoding) = "legacy_coin"];`
     */
    public fun clearAmount() {
      _builder.clearAmount()
    }
    /**
     * `.cosmos.base.v1beta1.Coin amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"amount\"", (.amino.encoding) = "legacy_coin"];`
     * @return Whether the amount field is set.
     */
    public fun hasAmount(): kotlin.Boolean {
      return _builder.hasAmount()
    }

    public val MsgBurnKt.Dsl.amountOrNull: cosmos.base.v1beta1.CoinOuterClass.Coin?
      get() = _builder.amountOrNull

    /**
     * `string burnFromAddress = 3 [json_name = "burnFromAddress", (.gogoproto.moretags) = "yaml:\"burn_from_address\"", (.amino.dont_omitempty) = true];`
     */
    public var burnFromAddress: kotlin.String
      @JvmName("getBurnFromAddress")
      get() = _builder.burnFromAddress
      @JvmName("setBurnFromAddress")
      set(value) {
        _builder.burnFromAddress = value
      }
    /**
     * `string burnFromAddress = 3 [json_name = "burnFromAddress", (.gogoproto.moretags) = "yaml:\"burn_from_address\"", (.amino.dont_omitempty) = true];`
     */
    public fun clearBurnFromAddress() {
      _builder.clearBurnFromAddress()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun osmosis.tokenfactory.v1beta1.Tx.MsgBurn.copy(block: `osmosis.tokenfactory.v1beta1`.MsgBurnKt.Dsl.() -> kotlin.Unit): osmosis.tokenfactory.v1beta1.Tx.MsgBurn =
  `osmosis.tokenfactory.v1beta1`.MsgBurnKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val osmosis.tokenfactory.v1beta1.Tx.MsgBurnOrBuilder.amountOrNull: cosmos.base.v1beta1.CoinOuterClass.Coin?
  get() = if (hasAmount()) getAmount() else null

