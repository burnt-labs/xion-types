// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: osmosis/tokenfactory/v1beta1/tx.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package osmosis.tokenfactory.v1beta1;

@kotlin.jvm.JvmName("-initializemsgCreateDenom")
public inline fun msgCreateDenom(block: osmosis.tokenfactory.v1beta1.MsgCreateDenomKt.Dsl.() -> kotlin.Unit): osmosis.tokenfactory.v1beta1.Tx.MsgCreateDenom =
  osmosis.tokenfactory.v1beta1.MsgCreateDenomKt.Dsl._create(osmosis.tokenfactory.v1beta1.Tx.MsgCreateDenom.newBuilder()).apply { block() }._build()
/**
 * ```
 * MsgCreateDenom defines the message structure for the CreateDenom gRPC service
 * method. It allows an account to create a new denom. It requires a sender
 * address and a sub denomination. The (sender_address, sub_denomination) tuple
 * must be unique and cannot be re-used.
 *
 * The resulting denom created is defined as
 * <factory/{creatorAddress}/{subdenom}>. The resulting denom's admin is
 * originally set to be the creator, but this can be changed later. The token
 * denom does not indicate the current admin.
 * ```
 *
 * Protobuf type `osmosis.tokenfactory.v1beta1.MsgCreateDenom`
 */
public object MsgCreateDenomKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: osmosis.tokenfactory.v1beta1.Tx.MsgCreateDenom.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: osmosis.tokenfactory.v1beta1.Tx.MsgCreateDenom.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): osmosis.tokenfactory.v1beta1.Tx.MsgCreateDenom = _builder.build()

    /**
     * `string sender = 1 [json_name = "sender", (.gogoproto.moretags) = "yaml:\"sender\""];`
     */
    public var sender: kotlin.String
      @JvmName("getSender")
      get() = _builder.sender
      @JvmName("setSender")
      set(value) {
        _builder.sender = value
      }
    /**
     * `string sender = 1 [json_name = "sender", (.gogoproto.moretags) = "yaml:\"sender\""];`
     */
    public fun clearSender() {
      _builder.clearSender()
    }

    /**
     * ```
     * subdenom can be up to 44 "alphanumeric" characters long.
     * ```
     *
     * `string subdenom = 2 [json_name = "subdenom", (.gogoproto.moretags) = "yaml:\"subdenom\""];`
     */
    public var subdenom: kotlin.String
      @JvmName("getSubdenom")
      get() = _builder.subdenom
      @JvmName("setSubdenom")
      set(value) {
        _builder.subdenom = value
      }
    /**
     * ```
     * subdenom can be up to 44 "alphanumeric" characters long.
     * ```
     *
     * `string subdenom = 2 [json_name = "subdenom", (.gogoproto.moretags) = "yaml:\"subdenom\""];`
     */
    public fun clearSubdenom() {
      _builder.clearSubdenom()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun osmosis.tokenfactory.v1beta1.Tx.MsgCreateDenom.copy(block: `osmosis.tokenfactory.v1beta1`.MsgCreateDenomKt.Dsl.() -> kotlin.Unit): osmosis.tokenfactory.v1beta1.Tx.MsgCreateDenom =
  `osmosis.tokenfactory.v1beta1`.MsgCreateDenomKt.Dsl._create(this.toBuilder()).apply { block() }._build()

