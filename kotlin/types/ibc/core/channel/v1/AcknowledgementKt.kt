// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ibc/core/channel/v1/channel.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package ibc.core.channel.v1;

@kotlin.jvm.JvmName("-initializeacknowledgement")
public inline fun acknowledgement(block: ibc.core.channel.v1.AcknowledgementKt.Dsl.() -> kotlin.Unit): ibc.core.channel.v1.ChannelOuterClass.Acknowledgement =
  ibc.core.channel.v1.AcknowledgementKt.Dsl._create(ibc.core.channel.v1.ChannelOuterClass.Acknowledgement.newBuilder()).apply { block() }._build()
/**
 * ```
 * Acknowledgement is the recommended acknowledgement format to be used by
 * app-specific protocols.
 * NOTE: The field numbers 21 and 22 were explicitly chosen to avoid accidental
 * conflicts with other protobuf message formats used for acknowledgements.
 * The first byte of any message with this format will be the non-ASCII values
 * `0xaa` (result) or `0xb2` (error). Implemented as defined by ICS:
 * https://github.com/cosmos/ibc/tree/master/spec/core/ics-004-channel-and-packet-semantics#acknowledgement-envelope
 * ```
 *
 * Protobuf type `ibc.core.channel.v1.Acknowledgement`
 */
public object AcknowledgementKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: ibc.core.channel.v1.ChannelOuterClass.Acknowledgement.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: ibc.core.channel.v1.ChannelOuterClass.Acknowledgement.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): ibc.core.channel.v1.ChannelOuterClass.Acknowledgement = _builder.build()

    /**
     * `bytes result = 21 [json_name = "result"];`
     */
    public var result: com.google.protobuf.ByteString
      @JvmName("getResult")
      get() = _builder.result
      @JvmName("setResult")
      set(value) {
        _builder.result = value
      }
    /**
     * `bytes result = 21 [json_name = "result"];`
     */
    public fun clearResult() {
      _builder.clearResult()
    }
    /**
     * `bytes result = 21 [json_name = "result"];`
     * @return Whether the result field is set.
     */
    public fun hasResult(): kotlin.Boolean {
      return _builder.hasResult()
    }

    /**
     * `string error = 22 [json_name = "error"];`
     */
    public var error: kotlin.String
      @JvmName("getError")
      get() = _builder.error
      @JvmName("setError")
      set(value) {
        _builder.error = value
      }
    /**
     * `string error = 22 [json_name = "error"];`
     */
    public fun clearError() {
      _builder.clearError()
    }
    /**
     * `string error = 22 [json_name = "error"];`
     * @return Whether the error field is set.
     */
    public fun hasError(): kotlin.Boolean {
      return _builder.hasError()
    }
    public val responseCase: ibc.core.channel.v1.ChannelOuterClass.Acknowledgement.ResponseCase
    @kotlin.jvm.JvmName("getResponseCase")
      get() = _builder.getResponseCase()

    public fun clearResponse() {
      _builder.clearResponse()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun ibc.core.channel.v1.ChannelOuterClass.Acknowledgement.copy(block: `ibc.core.channel.v1`.AcknowledgementKt.Dsl.() -> kotlin.Unit): ibc.core.channel.v1.ChannelOuterClass.Acknowledgement =
  `ibc.core.channel.v1`.AcknowledgementKt.Dsl._create(this.toBuilder()).apply { block() }._build()

