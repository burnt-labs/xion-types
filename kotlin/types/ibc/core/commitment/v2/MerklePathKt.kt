// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ibc/core/commitment/v2/commitment.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package ibc.core.commitment.v2;

@kotlin.jvm.JvmName("-initializemerklePath")
public inline fun merklePath(block: ibc.core.commitment.v2.MerklePathKt.Dsl.() -> kotlin.Unit): ibc.core.commitment.v2.Commitment.MerklePath =
  ibc.core.commitment.v2.MerklePathKt.Dsl._create(ibc.core.commitment.v2.Commitment.MerklePath.newBuilder()).apply { block() }._build()
/**
 * ```
 * MerklePath is the path used to verify commitment proofs, which can be an
 * arbitrary structured object (defined by a commitment type).
 * ICS-23 verification supports membership proofs for nested merkle trees.
 * The ICS-24 standard provable keys MUST be stored in the lowest level tree with an optional prefix.
 * The IC24 provable tree may then be stored in a higher level tree(s) that hash up to the root hash
 * stored in the consensus state of the client.
 * Each element of the path represents the key of a merkle tree from the root to the leaf.
 * The elements of the path before the final element must be the path to the tree that contains
 * the ICS24 provable store. Thus, it should remain constant for all ICS24 proofs.
 * The final element of the path is the key of the leaf in the ICS24 provable store,
 * Thus IBC core will append the ICS24 path to the final element of the MerklePath
 * stored in the counterparty to create the full path to the leaf for proof verification.
 * Examples:
 * Cosmos SDK:
 * The Cosmos SDK commits to a multi-tree where each store is an IAVL tree and all store hashes
 * are hashed in a simple merkle tree to get the final root hash. Thus, the MerklePath in the counterparty
 * MerklePrefix has the following structure: ["ibc", ""]
 * The core IBC handler will append the ICS24 path to the final element of the MerklePath
 * like so: ["ibc", "{packetCommitmentPath}"] which will then be used for final verification.
 * Ethereum:
 * The Ethereum client commits to a single Patricia merkle trie. The ICS24 provable store is managed
 * by the smart contract state. Each smart contract has a specific prefix reserved within the global trie.
 * Thus the MerklePath in the counterparty is the prefix to the smart contract state in the global trie.
 * Since there is only one tree in the commitment structure of ethereum the MerklePath in the counterparty
 * MerklePrefix has the following structure: ["IBCCoreContractAddressStoragePrefix"]
 * The core IBC handler will append the ICS24 path to the final element of the MerklePath
 * like so: ["IBCCoreContractAddressStoragePrefix{packetCommitmentPath}"] which will then be used for final
 * verification. Thus the MerklePath in the counterparty MerklePrefix is the nested key path from the root hash of the
 * consensus state down to the ICS24 provable store. The IBC handler retrieves the counterparty key path to the ICS24
 * provable store from the MerklePath and appends the ICS24 path to get the final key path to the value being verified
 * by the client against the root hash in the client's consensus state.
 * ```
 *
 * Protobuf type `ibc.core.commitment.v2.MerklePath`
 */
public object MerklePathKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: ibc.core.commitment.v2.Commitment.MerklePath.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: ibc.core.commitment.v2.Commitment.MerklePath.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): ibc.core.commitment.v2.Commitment.MerklePath = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class KeyPathProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `repeated bytes key_path = 1 [json_name = "keyPath"];`
     */
     public val keyPath: com.google.protobuf.kotlin.DslList<com.google.protobuf.ByteString, KeyPathProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.keyPathList
      )
    /**
     * `repeated bytes key_path = 1 [json_name = "keyPath"];`
     * @param value The keyPath to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addKeyPath")
    public fun com.google.protobuf.kotlin.DslList<com.google.protobuf.ByteString, KeyPathProxy>.add(value: com.google.protobuf.ByteString) {
      _builder.addKeyPath(value)
    }/**
     * `repeated bytes key_path = 1 [json_name = "keyPath"];`
     * @param value The keyPath to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignKeyPath")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.google.protobuf.ByteString, KeyPathProxy>.plusAssign(value: com.google.protobuf.ByteString) {
      add(value)
    }/**
     * `repeated bytes key_path = 1 [json_name = "keyPath"];`
     * @param values The keyPath to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllKeyPath")
    public fun com.google.protobuf.kotlin.DslList<com.google.protobuf.ByteString, KeyPathProxy>.addAll(values: kotlin.collections.Iterable<com.google.protobuf.ByteString>) {
      _builder.addAllKeyPath(values)
    }/**
     * `repeated bytes key_path = 1 [json_name = "keyPath"];`
     * @param values The keyPath to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllKeyPath")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.google.protobuf.ByteString, KeyPathProxy>.plusAssign(values: kotlin.collections.Iterable<com.google.protobuf.ByteString>) {
      addAll(values)
    }/**
     * `repeated bytes key_path = 1 [json_name = "keyPath"];`
     * @param index The index to set the value at.
     * @param value The keyPath to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setKeyPath")
    public operator fun com.google.protobuf.kotlin.DslList<com.google.protobuf.ByteString, KeyPathProxy>.set(index: kotlin.Int, value: com.google.protobuf.ByteString) {
      _builder.setKeyPath(index, value)
    }/**
     * `repeated bytes key_path = 1 [json_name = "keyPath"];`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearKeyPath")
    public fun com.google.protobuf.kotlin.DslList<com.google.protobuf.ByteString, KeyPathProxy>.clear() {
      _builder.clearKeyPath()
    }}
}
@kotlin.jvm.JvmSynthetic
public inline fun ibc.core.commitment.v2.Commitment.MerklePath.copy(block: `ibc.core.commitment.v2`.MerklePathKt.Dsl.() -> kotlin.Unit): ibc.core.commitment.v2.Commitment.MerklePath =
  `ibc.core.commitment.v2`.MerklePathKt.Dsl._create(this.toBuilder()).apply { block() }._build()

