// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ibc/core/client/v2/counterparty.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package ibc.core.client.v2;

@kotlin.jvm.JvmName("-initializecounterpartyInfo")
public inline fun counterpartyInfo(block: ibc.core.client.v2.CounterpartyInfoKt.Dsl.() -> kotlin.Unit): ibc.core.client.v2.Counterparty.CounterpartyInfo =
  ibc.core.client.v2.CounterpartyInfoKt.Dsl._create(ibc.core.client.v2.Counterparty.CounterpartyInfo.newBuilder()).apply { block() }._build()
/**
 * ```
 * CounterpartyInfo defines the key that the counterparty will use to message our client
 * ```
 *
 * Protobuf type `ibc.core.client.v2.CounterpartyInfo`
 */
public object CounterpartyInfoKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: ibc.core.client.v2.Counterparty.CounterpartyInfo.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: ibc.core.client.v2.Counterparty.CounterpartyInfo.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): ibc.core.client.v2.Counterparty.CounterpartyInfo = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class MerklePrefixProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * merkle prefix key is the prefix that ics provable keys are stored under
     * ```
     *
     * `repeated bytes merkle_prefix = 1 [json_name = "merklePrefix"];`
     */
     public val merklePrefix: com.google.protobuf.kotlin.DslList<com.google.protobuf.ByteString, MerklePrefixProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.merklePrefixList
      )
    /**
     * ```
     * merkle prefix key is the prefix that ics provable keys are stored under
     * ```
     *
     * `repeated bytes merkle_prefix = 1 [json_name = "merklePrefix"];`
     * @param value The merklePrefix to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addMerklePrefix")
    public fun com.google.protobuf.kotlin.DslList<com.google.protobuf.ByteString, MerklePrefixProxy>.add(value: com.google.protobuf.ByteString) {
      _builder.addMerklePrefix(value)
    }/**
     * ```
     * merkle prefix key is the prefix that ics provable keys are stored under
     * ```
     *
     * `repeated bytes merkle_prefix = 1 [json_name = "merklePrefix"];`
     * @param value The merklePrefix to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignMerklePrefix")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.google.protobuf.ByteString, MerklePrefixProxy>.plusAssign(value: com.google.protobuf.ByteString) {
      add(value)
    }/**
     * ```
     * merkle prefix key is the prefix that ics provable keys are stored under
     * ```
     *
     * `repeated bytes merkle_prefix = 1 [json_name = "merklePrefix"];`
     * @param values The merklePrefix to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllMerklePrefix")
    public fun com.google.protobuf.kotlin.DslList<com.google.protobuf.ByteString, MerklePrefixProxy>.addAll(values: kotlin.collections.Iterable<com.google.protobuf.ByteString>) {
      _builder.addAllMerklePrefix(values)
    }/**
     * ```
     * merkle prefix key is the prefix that ics provable keys are stored under
     * ```
     *
     * `repeated bytes merkle_prefix = 1 [json_name = "merklePrefix"];`
     * @param values The merklePrefix to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllMerklePrefix")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.google.protobuf.ByteString, MerklePrefixProxy>.plusAssign(values: kotlin.collections.Iterable<com.google.protobuf.ByteString>) {
      addAll(values)
    }/**
     * ```
     * merkle prefix key is the prefix that ics provable keys are stored under
     * ```
     *
     * `repeated bytes merkle_prefix = 1 [json_name = "merklePrefix"];`
     * @param index The index to set the value at.
     * @param value The merklePrefix to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setMerklePrefix")
    public operator fun com.google.protobuf.kotlin.DslList<com.google.protobuf.ByteString, MerklePrefixProxy>.set(index: kotlin.Int, value: com.google.protobuf.ByteString) {
      _builder.setMerklePrefix(index, value)
    }/**
     * ```
     * merkle prefix key is the prefix that ics provable keys are stored under
     * ```
     *
     * `repeated bytes merkle_prefix = 1 [json_name = "merklePrefix"];`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearMerklePrefix")
    public fun com.google.protobuf.kotlin.DslList<com.google.protobuf.ByteString, MerklePrefixProxy>.clear() {
      _builder.clearMerklePrefix()
    }
    /**
     * ```
     * client identifier is the identifier used to send packet messages to our client
     * ```
     *
     * `string client_id = 2 [json_name = "clientId"];`
     */
    public var clientId: kotlin.String
      @JvmName("getClientId")
      get() = _builder.clientId
      @JvmName("setClientId")
      set(value) {
        _builder.clientId = value
      }
    /**
     * ```
     * client identifier is the identifier used to send packet messages to our client
     * ```
     *
     * `string client_id = 2 [json_name = "clientId"];`
     */
    public fun clearClientId() {
      _builder.clearClientId()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun ibc.core.client.v2.Counterparty.CounterpartyInfo.copy(block: `ibc.core.client.v2`.CounterpartyInfoKt.Dsl.() -> kotlin.Unit): ibc.core.client.v2.Counterparty.CounterpartyInfo =
  `ibc.core.client.v2`.CounterpartyInfoKt.Dsl._create(this.toBuilder()).apply { block() }._build()

