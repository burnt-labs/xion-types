// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: abstractaccount/v1/account.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package abstractaccount.v1;

@kotlin.jvm.JvmName("-initializenilPubKey")
public inline fun nilPubKey(block: abstractaccount.v1.NilPubKeyKt.Dsl.() -> kotlin.Unit): abstractaccount.v1.Account.NilPubKey =
  abstractaccount.v1.NilPubKeyKt.Dsl._create(abstractaccount.v1.Account.NilPubKey.newBuilder()).apply { block() }._build()
/**
 * ```
 * NilPubKey is the pubkey type of the AbstractAccount. Basically, it represents
 * a pubkey that doesn't exist.
 *
 * The actual pubkey of an AbstractAccount (if it has one) is to be stored
 * inside the contract, not at the SDK level. Signature verification is also
 * done inside the contract, typically in the BeforeTx hook.
 * ```
 *
 * Protobuf type `abstractaccount.v1.NilPubKey`
 */
public object NilPubKeyKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: abstractaccount.v1.Account.NilPubKey.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: abstractaccount.v1.Account.NilPubKey.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): abstractaccount.v1.Account.NilPubKey = _builder.build()

    /**
     * `bytes address_bytes = 1 [json_name = "addressBytes"];`
     */
    public var addressBytes: com.google.protobuf.ByteString
      @JvmName("getAddressBytes")
      get() = _builder.addressBytes
      @JvmName("setAddressBytes")
      set(value) {
        _builder.addressBytes = value
      }
    /**
     * `bytes address_bytes = 1 [json_name = "addressBytes"];`
     */
    public fun clearAddressBytes() {
      _builder.clearAddressBytes()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun abstractaccount.v1.Account.NilPubKey.copy(block: `abstractaccount.v1`.NilPubKeyKt.Dsl.() -> kotlin.Unit): abstractaccount.v1.Account.NilPubKey =
  `abstractaccount.v1`.NilPubKeyKt.Dsl._create(this.toBuilder()).apply { block() }._build()

