// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/store/v1beta1/commit_info.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.store.v1beta1;

@kotlin.jvm.JvmName("-initializestoreInfo")
public inline fun storeInfo(block: cosmos.store.v1beta1.StoreInfoKt.Dsl.() -> kotlin.Unit): cosmos.store.v1beta1.CommitInfoOuterClass.StoreInfo =
  cosmos.store.v1beta1.StoreInfoKt.Dsl._create(cosmos.store.v1beta1.CommitInfoOuterClass.StoreInfo.newBuilder()).apply { block() }._build()
/**
 * ```
 * StoreInfo defines store-specific commit information. It contains a reference
 * between a store name and the commit ID.
 * ```
 *
 * Protobuf type `cosmos.store.v1beta1.StoreInfo`
 */
public object StoreInfoKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.store.v1beta1.CommitInfoOuterClass.StoreInfo.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.store.v1beta1.CommitInfoOuterClass.StoreInfo.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.store.v1beta1.CommitInfoOuterClass.StoreInfo = _builder.build()

    /**
     * `string name = 1 [json_name = "name"];`
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.name
      @JvmName("setName")
      set(value) {
        _builder.name = value
      }
    /**
     * `string name = 1 [json_name = "name"];`
     */
    public fun clearName() {
      _builder.clearName()
    }

    /**
     * `.cosmos.store.v1beta1.CommitID commit_id = 2 [json_name = "commitId", (.gogoproto.nullable) = false];`
     */
    public var commitId: cosmos.store.v1beta1.CommitInfoOuterClass.CommitID
      @JvmName("getCommitId")
      get() = _builder.commitId
      @JvmName("setCommitId")
      set(value) {
        _builder.commitId = value
      }
    /**
     * `.cosmos.store.v1beta1.CommitID commit_id = 2 [json_name = "commitId", (.gogoproto.nullable) = false];`
     */
    public fun clearCommitId() {
      _builder.clearCommitId()
    }
    /**
     * `.cosmos.store.v1beta1.CommitID commit_id = 2 [json_name = "commitId", (.gogoproto.nullable) = false];`
     * @return Whether the commitId field is set.
     */
    public fun hasCommitId(): kotlin.Boolean {
      return _builder.hasCommitId()
    }

    public val StoreInfoKt.Dsl.commitIdOrNull: cosmos.store.v1beta1.CommitInfoOuterClass.CommitID?
      get() = _builder.commitIdOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.store.v1beta1.CommitInfoOuterClass.StoreInfo.copy(block: `cosmos.store.v1beta1`.StoreInfoKt.Dsl.() -> kotlin.Unit): cosmos.store.v1beta1.CommitInfoOuterClass.StoreInfo =
  `cosmos.store.v1beta1`.StoreInfoKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.store.v1beta1.CommitInfoOuterClass.StoreInfoOrBuilder.commitIdOrNull: cosmos.store.v1beta1.CommitInfoOuterClass.CommitID?
  get() = if (hasCommitId()) getCommitId() else null

