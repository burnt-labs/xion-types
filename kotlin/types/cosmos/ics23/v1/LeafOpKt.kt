// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/ics23/v1/proofs.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.ics23.v1;

@kotlin.jvm.JvmName("-initializeleafOp")
public inline fun leafOp(block: cosmos.ics23.v1.LeafOpKt.Dsl.() -> kotlin.Unit): cosmos.ics23.v1.Proofs.LeafOp =
  cosmos.ics23.v1.LeafOpKt.Dsl._create(cosmos.ics23.v1.Proofs.LeafOp.newBuilder()).apply { block() }._build()
/**
 * ```
 * *
 * LeafOp represents the raw key-value data we wish to prove, and
 * must be flexible to represent the internal transformation from
 * the original key-value pairs into the basis hash, for many existing
 * merkle trees.
 *
 * key and value are passed in. So that the signature of this operation is:
 * leafOp(key, value) -> output
 *
 * To process this, first prehash the keys and values if needed (ANY means no hash in this case):
 * hkey = prehashKey(key)
 * hvalue = prehashValue(value)
 *
 * Then combine the bytes, and hash it
 * output = hash(prefix || length(hkey) || hkey || length(hvalue) || hvalue)
 * ```
 *
 * Protobuf type `cosmos.ics23.v1.LeafOp`
 */
public object LeafOpKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.ics23.v1.Proofs.LeafOp.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.ics23.v1.Proofs.LeafOp.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.ics23.v1.Proofs.LeafOp = _builder.build()

    /**
     * `.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];`
     */
    public var hash: cosmos.ics23.v1.Proofs.HashOp
      @JvmName("getHash")
      get() = _builder.hash
      @JvmName("setHash")
      set(value) {
        _builder.hash = value
      }
    public var hashValue: kotlin.Int
      @JvmName("getHashValue")
      get() = _builder.hashValue
      @JvmName("setHashValue")
      set(value) {
        _builder.hashValue = value
      }
    /**
     * `.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];`
     */
    public fun clearHash() {
      _builder.clearHash()
    }

    /**
     * `.cosmos.ics23.v1.HashOp prehash_key = 2 [json_name = "prehashKey"];`
     */
    public var prehashKey: cosmos.ics23.v1.Proofs.HashOp
      @JvmName("getPrehashKey")
      get() = _builder.prehashKey
      @JvmName("setPrehashKey")
      set(value) {
        _builder.prehashKey = value
      }
    public var prehashKeyValue: kotlin.Int
      @JvmName("getPrehashKeyValue")
      get() = _builder.prehashKeyValue
      @JvmName("setPrehashKeyValue")
      set(value) {
        _builder.prehashKeyValue = value
      }
    /**
     * `.cosmos.ics23.v1.HashOp prehash_key = 2 [json_name = "prehashKey"];`
     */
    public fun clearPrehashKey() {
      _builder.clearPrehashKey()
    }

    /**
     * `.cosmos.ics23.v1.HashOp prehash_value = 3 [json_name = "prehashValue"];`
     */
    public var prehashValue: cosmos.ics23.v1.Proofs.HashOp
      @JvmName("getPrehashValue")
      get() = _builder.prehashValue
      @JvmName("setPrehashValue")
      set(value) {
        _builder.prehashValue = value
      }
    public var prehashValueValue: kotlin.Int
      @JvmName("getPrehashValueValue")
      get() = _builder.prehashValueValue
      @JvmName("setPrehashValueValue")
      set(value) {
        _builder.prehashValueValue = value
      }
    /**
     * `.cosmos.ics23.v1.HashOp prehash_value = 3 [json_name = "prehashValue"];`
     */
    public fun clearPrehashValue() {
      _builder.clearPrehashValue()
    }

    /**
     * `.cosmos.ics23.v1.LengthOp length = 4 [json_name = "length"];`
     */
    public var length: cosmos.ics23.v1.Proofs.LengthOp
      @JvmName("getLength")
      get() = _builder.length
      @JvmName("setLength")
      set(value) {
        _builder.length = value
      }
    public var lengthValue: kotlin.Int
      @JvmName("getLengthValue")
      get() = _builder.lengthValue
      @JvmName("setLengthValue")
      set(value) {
        _builder.lengthValue = value
      }
    /**
     * `.cosmos.ics23.v1.LengthOp length = 4 [json_name = "length"];`
     */
    public fun clearLength() {
      _builder.clearLength()
    }

    /**
     * ```
     * prefix is a fixed bytes that may optionally be included at the beginning to differentiate
     * a leaf node from an inner node.
     * ```
     *
     * `bytes prefix = 5 [json_name = "prefix"];`
     */
    public var prefix: com.google.protobuf.ByteString
      @JvmName("getPrefix")
      get() = _builder.prefix
      @JvmName("setPrefix")
      set(value) {
        _builder.prefix = value
      }
    /**
     * ```
     * prefix is a fixed bytes that may optionally be included at the beginning to differentiate
     * a leaf node from an inner node.
     * ```
     *
     * `bytes prefix = 5 [json_name = "prefix"];`
     */
    public fun clearPrefix() {
      _builder.clearPrefix()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.ics23.v1.Proofs.LeafOp.copy(block: `cosmos.ics23.v1`.LeafOpKt.Dsl.() -> kotlin.Unit): cosmos.ics23.v1.Proofs.LeafOp =
  `cosmos.ics23.v1`.LeafOpKt.Dsl._create(this.toBuilder()).apply { block() }._build()

