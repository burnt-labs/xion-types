// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/ics23/v1/proofs.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.ics23.v1;

@kotlin.jvm.JvmName("-initializecompressedBatchProof")
public inline fun compressedBatchProof(block: cosmos.ics23.v1.CompressedBatchProofKt.Dsl.() -> kotlin.Unit): cosmos.ics23.v1.Proofs.CompressedBatchProof =
  cosmos.ics23.v1.CompressedBatchProofKt.Dsl._create(cosmos.ics23.v1.Proofs.CompressedBatchProof.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `cosmos.ics23.v1.CompressedBatchProof`
 */
public object CompressedBatchProofKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.ics23.v1.Proofs.CompressedBatchProof.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.ics23.v1.Proofs.CompressedBatchProof.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.ics23.v1.Proofs.CompressedBatchProof = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class EntriesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];`
     */
     public val entries: com.google.protobuf.kotlin.DslList<cosmos.ics23.v1.Proofs.CompressedBatchEntry, EntriesProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.entriesList
      )
    /**
     * `repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];`
     * @param value The entries to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addEntries")
    public fun com.google.protobuf.kotlin.DslList<cosmos.ics23.v1.Proofs.CompressedBatchEntry, EntriesProxy>.add(value: cosmos.ics23.v1.Proofs.CompressedBatchEntry) {
      _builder.addEntries(value)
    }
    /**
     * `repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];`
     * @param value The entries to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignEntries")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<cosmos.ics23.v1.Proofs.CompressedBatchEntry, EntriesProxy>.plusAssign(value: cosmos.ics23.v1.Proofs.CompressedBatchEntry) {
      add(value)
    }
    /**
     * `repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];`
     * @param values The entries to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllEntries")
    public fun com.google.protobuf.kotlin.DslList<cosmos.ics23.v1.Proofs.CompressedBatchEntry, EntriesProxy>.addAll(values: kotlin.collections.Iterable<cosmos.ics23.v1.Proofs.CompressedBatchEntry>) {
      _builder.addAllEntries(values)
    }
    /**
     * `repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];`
     * @param values The entries to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllEntries")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<cosmos.ics23.v1.Proofs.CompressedBatchEntry, EntriesProxy>.plusAssign(values: kotlin.collections.Iterable<cosmos.ics23.v1.Proofs.CompressedBatchEntry>) {
      addAll(values)
    }
    /**
     * `repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];`
     * @param index The index to set the value at.
     * @param value The entries to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setEntries")
    public operator fun com.google.protobuf.kotlin.DslList<cosmos.ics23.v1.Proofs.CompressedBatchEntry, EntriesProxy>.set(index: kotlin.Int, value: cosmos.ics23.v1.Proofs.CompressedBatchEntry) {
      _builder.setEntries(index, value)
    }
    /**
     * `repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearEntries")
    public fun com.google.protobuf.kotlin.DslList<cosmos.ics23.v1.Proofs.CompressedBatchEntry, EntriesProxy>.clear() {
      _builder.clearEntries()
    }


    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class LookupInnersProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];`
     */
     public val lookupInners: com.google.protobuf.kotlin.DslList<cosmos.ics23.v1.Proofs.InnerOp, LookupInnersProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.lookupInnersList
      )
    /**
     * `repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];`
     * @param value The lookupInners to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addLookupInners")
    public fun com.google.protobuf.kotlin.DslList<cosmos.ics23.v1.Proofs.InnerOp, LookupInnersProxy>.add(value: cosmos.ics23.v1.Proofs.InnerOp) {
      _builder.addLookupInners(value)
    }
    /**
     * `repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];`
     * @param value The lookupInners to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignLookupInners")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<cosmos.ics23.v1.Proofs.InnerOp, LookupInnersProxy>.plusAssign(value: cosmos.ics23.v1.Proofs.InnerOp) {
      add(value)
    }
    /**
     * `repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];`
     * @param values The lookupInners to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllLookupInners")
    public fun com.google.protobuf.kotlin.DslList<cosmos.ics23.v1.Proofs.InnerOp, LookupInnersProxy>.addAll(values: kotlin.collections.Iterable<cosmos.ics23.v1.Proofs.InnerOp>) {
      _builder.addAllLookupInners(values)
    }
    /**
     * `repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];`
     * @param values The lookupInners to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllLookupInners")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<cosmos.ics23.v1.Proofs.InnerOp, LookupInnersProxy>.plusAssign(values: kotlin.collections.Iterable<cosmos.ics23.v1.Proofs.InnerOp>) {
      addAll(values)
    }
    /**
     * `repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];`
     * @param index The index to set the value at.
     * @param value The lookupInners to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setLookupInners")
    public operator fun com.google.protobuf.kotlin.DslList<cosmos.ics23.v1.Proofs.InnerOp, LookupInnersProxy>.set(index: kotlin.Int, value: cosmos.ics23.v1.Proofs.InnerOp) {
      _builder.setLookupInners(index, value)
    }
    /**
     * `repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearLookupInners")
    public fun com.google.protobuf.kotlin.DslList<cosmos.ics23.v1.Proofs.InnerOp, LookupInnersProxy>.clear() {
      _builder.clearLookupInners()
    }

  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.ics23.v1.Proofs.CompressedBatchProof.copy(block: `cosmos.ics23.v1`.CompressedBatchProofKt.Dsl.() -> kotlin.Unit): cosmos.ics23.v1.Proofs.CompressedBatchProof =
  `cosmos.ics23.v1`.CompressedBatchProofKt.Dsl._create(this.toBuilder()).apply { block() }._build()

