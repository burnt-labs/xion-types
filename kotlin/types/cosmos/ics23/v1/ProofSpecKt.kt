// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/ics23/v1/proofs.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.ics23.v1;

@kotlin.jvm.JvmName("-initializeproofSpec")
public inline fun proofSpec(block: cosmos.ics23.v1.ProofSpecKt.Dsl.() -> kotlin.Unit): cosmos.ics23.v1.Proofs.ProofSpec =
  cosmos.ics23.v1.ProofSpecKt.Dsl._create(cosmos.ics23.v1.Proofs.ProofSpec.newBuilder()).apply { block() }._build()
/**
 * ```
 * *
 * ProofSpec defines what the expected parameters are for a given proof type.
 * This can be stored in the client and used to validate any incoming proofs.
 *
 * verify(ProofSpec, Proof) -> Proof | Error
 *
 * As demonstrated in tests, if we don't fix the algorithm used to calculate the
 * LeafHash for a given tree, there are many possible key-value pairs that can
 * generate a given hash (by interpretting the preimage differently).
 * We need this for proper security, requires client knows a priori what
 * tree format server uses. But not in code, rather a configuration object.
 * ```
 *
 * Protobuf type `cosmos.ics23.v1.ProofSpec`
 */
public object ProofSpecKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.ics23.v1.Proofs.ProofSpec.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.ics23.v1.Proofs.ProofSpec.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.ics23.v1.Proofs.ProofSpec = _builder.build()

    /**
     * ```
     * any field in the ExistenceProof must be the same as in this spec.
     * except Prefix, which is just the first bytes of prefix (spec can be longer)
     * ```
     *
     * `.cosmos.ics23.v1.LeafOp leaf_spec = 1 [json_name = "leafSpec"];`
     */
    public var leafSpec: cosmos.ics23.v1.Proofs.LeafOp
      @JvmName("getLeafSpec")
      get() = _builder.leafSpec
      @JvmName("setLeafSpec")
      set(value) {
        _builder.leafSpec = value
      }
    /**
     * ```
     * any field in the ExistenceProof must be the same as in this spec.
     * except Prefix, which is just the first bytes of prefix (spec can be longer)
     * ```
     *
     * `.cosmos.ics23.v1.LeafOp leaf_spec = 1 [json_name = "leafSpec"];`
     */
    public fun clearLeafSpec() {
      _builder.clearLeafSpec()
    }
    /**
     * ```
     * any field in the ExistenceProof must be the same as in this spec.
     * except Prefix, which is just the first bytes of prefix (spec can be longer)
     * ```
     *
     * `.cosmos.ics23.v1.LeafOp leaf_spec = 1 [json_name = "leafSpec"];`
     * @return Whether the leafSpec field is set.
     */
    public fun hasLeafSpec(): kotlin.Boolean {
      return _builder.hasLeafSpec()
    }

    public val ProofSpecKt.Dsl.leafSpecOrNull: cosmos.ics23.v1.Proofs.LeafOp?
      get() = _builder.leafSpecOrNull

    /**
     * `.cosmos.ics23.v1.InnerSpec inner_spec = 2 [json_name = "innerSpec"];`
     */
    public var innerSpec: cosmos.ics23.v1.Proofs.InnerSpec
      @JvmName("getInnerSpec")
      get() = _builder.innerSpec
      @JvmName("setInnerSpec")
      set(value) {
        _builder.innerSpec = value
      }
    /**
     * `.cosmos.ics23.v1.InnerSpec inner_spec = 2 [json_name = "innerSpec"];`
     */
    public fun clearInnerSpec() {
      _builder.clearInnerSpec()
    }
    /**
     * `.cosmos.ics23.v1.InnerSpec inner_spec = 2 [json_name = "innerSpec"];`
     * @return Whether the innerSpec field is set.
     */
    public fun hasInnerSpec(): kotlin.Boolean {
      return _builder.hasInnerSpec()
    }

    public val ProofSpecKt.Dsl.innerSpecOrNull: cosmos.ics23.v1.Proofs.InnerSpec?
      get() = _builder.innerSpecOrNull

    /**
     * ```
     * max_depth (if > 0) is the maximum number of InnerOps allowed (mainly for fixed-depth tries)
     * ```
     *
     * `int32 max_depth = 3 [json_name = "maxDepth"];`
     */
    public var maxDepth: kotlin.Int
      @JvmName("getMaxDepth")
      get() = _builder.maxDepth
      @JvmName("setMaxDepth")
      set(value) {
        _builder.maxDepth = value
      }
    /**
     * ```
     * max_depth (if > 0) is the maximum number of InnerOps allowed (mainly for fixed-depth tries)
     * ```
     *
     * `int32 max_depth = 3 [json_name = "maxDepth"];`
     */
    public fun clearMaxDepth() {
      _builder.clearMaxDepth()
    }

    /**
     * ```
     * min_depth (if > 0) is the minimum number of InnerOps allowed (mainly for fixed-depth tries)
     * ```
     *
     * `int32 min_depth = 4 [json_name = "minDepth"];`
     */
    public var minDepth: kotlin.Int
      @JvmName("getMinDepth")
      get() = _builder.minDepth
      @JvmName("setMinDepth")
      set(value) {
        _builder.minDepth = value
      }
    /**
     * ```
     * min_depth (if > 0) is the minimum number of InnerOps allowed (mainly for fixed-depth tries)
     * ```
     *
     * `int32 min_depth = 4 [json_name = "minDepth"];`
     */
    public fun clearMinDepth() {
      _builder.clearMinDepth()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.ics23.v1.Proofs.ProofSpec.copy(block: `cosmos.ics23.v1`.ProofSpecKt.Dsl.() -> kotlin.Unit): cosmos.ics23.v1.Proofs.ProofSpec =
  `cosmos.ics23.v1`.ProofSpecKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.ics23.v1.Proofs.ProofSpecOrBuilder.leafSpecOrNull: cosmos.ics23.v1.Proofs.LeafOp?
  get() = if (hasLeafSpec()) getLeafSpec() else null

public val cosmos.ics23.v1.Proofs.ProofSpecOrBuilder.innerSpecOrNull: cosmos.ics23.v1.Proofs.InnerSpec?
  get() = if (hasInnerSpec()) getInnerSpec() else null

