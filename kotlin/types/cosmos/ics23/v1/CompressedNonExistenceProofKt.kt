// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/ics23/v1/proofs.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.ics23.v1;

@kotlin.jvm.JvmName("-initializecompressedNonExistenceProof")
public inline fun compressedNonExistenceProof(block: cosmos.ics23.v1.CompressedNonExistenceProofKt.Dsl.() -> kotlin.Unit): cosmos.ics23.v1.Proofs.CompressedNonExistenceProof =
  cosmos.ics23.v1.CompressedNonExistenceProofKt.Dsl._create(cosmos.ics23.v1.Proofs.CompressedNonExistenceProof.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `cosmos.ics23.v1.CompressedNonExistenceProof`
 */
public object CompressedNonExistenceProofKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.ics23.v1.Proofs.CompressedNonExistenceProof.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.ics23.v1.Proofs.CompressedNonExistenceProof.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.ics23.v1.Proofs.CompressedNonExistenceProof = _builder.build()

    /**
     * ```
     * TODO: remove this as unnecessary??? we prove a range
     * ```
     *
     * `bytes key = 1 [json_name = "key"];`
     */
    public var key: com.google.protobuf.ByteString
      @JvmName("getKey")
      get() = _builder.key
      @JvmName("setKey")
      set(value) {
        _builder.key = value
      }
    /**
     * ```
     * TODO: remove this as unnecessary??? we prove a range
     * ```
     *
     * `bytes key = 1 [json_name = "key"];`
     */
    public fun clearKey() {
      _builder.clearKey()
    }

    /**
     * `.cosmos.ics23.v1.CompressedExistenceProof left = 2 [json_name = "left"];`
     */
    public var left: cosmos.ics23.v1.Proofs.CompressedExistenceProof
      @JvmName("getLeft")
      get() = _builder.left
      @JvmName("setLeft")
      set(value) {
        _builder.left = value
      }
    /**
     * `.cosmos.ics23.v1.CompressedExistenceProof left = 2 [json_name = "left"];`
     */
    public fun clearLeft() {
      _builder.clearLeft()
    }
    /**
     * `.cosmos.ics23.v1.CompressedExistenceProof left = 2 [json_name = "left"];`
     * @return Whether the left field is set.
     */
    public fun hasLeft(): kotlin.Boolean {
      return _builder.hasLeft()
    }

    public val CompressedNonExistenceProofKt.Dsl.leftOrNull: cosmos.ics23.v1.Proofs.CompressedExistenceProof?
      get() = _builder.leftOrNull

    /**
     * `.cosmos.ics23.v1.CompressedExistenceProof right = 3 [json_name = "right"];`
     */
    public var right: cosmos.ics23.v1.Proofs.CompressedExistenceProof
      @JvmName("getRight")
      get() = _builder.right
      @JvmName("setRight")
      set(value) {
        _builder.right = value
      }
    /**
     * `.cosmos.ics23.v1.CompressedExistenceProof right = 3 [json_name = "right"];`
     */
    public fun clearRight() {
      _builder.clearRight()
    }
    /**
     * `.cosmos.ics23.v1.CompressedExistenceProof right = 3 [json_name = "right"];`
     * @return Whether the right field is set.
     */
    public fun hasRight(): kotlin.Boolean {
      return _builder.hasRight()
    }

    public val CompressedNonExistenceProofKt.Dsl.rightOrNull: cosmos.ics23.v1.Proofs.CompressedExistenceProof?
      get() = _builder.rightOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.ics23.v1.Proofs.CompressedNonExistenceProof.copy(block: `cosmos.ics23.v1`.CompressedNonExistenceProofKt.Dsl.() -> kotlin.Unit): cosmos.ics23.v1.Proofs.CompressedNonExistenceProof =
  `cosmos.ics23.v1`.CompressedNonExistenceProofKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.ics23.v1.Proofs.CompressedNonExistenceProofOrBuilder.leftOrNull: cosmos.ics23.v1.Proofs.CompressedExistenceProof?
  get() = if (hasLeft()) getLeft() else null

public val cosmos.ics23.v1.Proofs.CompressedNonExistenceProofOrBuilder.rightOrNull: cosmos.ics23.v1.Proofs.CompressedExistenceProof?
  get() = if (hasRight()) getRight() else null

