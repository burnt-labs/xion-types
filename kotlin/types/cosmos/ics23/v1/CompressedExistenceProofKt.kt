// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/ics23/v1/proofs.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.ics23.v1;

@kotlin.jvm.JvmName("-initializecompressedExistenceProof")
public inline fun compressedExistenceProof(block: cosmos.ics23.v1.CompressedExistenceProofKt.Dsl.() -> kotlin.Unit): cosmos.ics23.v1.Proofs.CompressedExistenceProof =
  cosmos.ics23.v1.CompressedExistenceProofKt.Dsl._create(cosmos.ics23.v1.Proofs.CompressedExistenceProof.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `cosmos.ics23.v1.CompressedExistenceProof`
 */
public object CompressedExistenceProofKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.ics23.v1.Proofs.CompressedExistenceProof.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.ics23.v1.Proofs.CompressedExistenceProof.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.ics23.v1.Proofs.CompressedExistenceProof = _builder.build()

    /**
     * `bytes key = 1 [json_name = "key"];`
     */
    public var key: com.google.protobuf.ByteString
      @JvmName("getKey")
      get() = _builder.key
      @JvmName("setKey")
      set(value) {
        _builder.key = value
      }
    /**
     * `bytes key = 1 [json_name = "key"];`
     */
    public fun clearKey() {
      _builder.clearKey()
    }

    /**
     * `bytes value = 2 [json_name = "value"];`
     */
    public var value: com.google.protobuf.ByteString
      @JvmName("getValue")
      get() = _builder.value
      @JvmName("setValue")
      set(value) {
        _builder.value = value
      }
    /**
     * `bytes value = 2 [json_name = "value"];`
     */
    public fun clearValue() {
      _builder.clearValue()
    }

    /**
     * `.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];`
     */
    public var leaf: cosmos.ics23.v1.Proofs.LeafOp
      @JvmName("getLeaf")
      get() = _builder.leaf
      @JvmName("setLeaf")
      set(value) {
        _builder.leaf = value
      }
    /**
     * `.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];`
     */
    public fun clearLeaf() {
      _builder.clearLeaf()
    }
    /**
     * `.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];`
     * @return Whether the leaf field is set.
     */
    public fun hasLeaf(): kotlin.Boolean {
      return _builder.hasLeaf()
    }

    public val CompressedExistenceProofKt.Dsl.leafOrNull: cosmos.ics23.v1.Proofs.LeafOp?
      get() = _builder.leafOrNull

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class PathProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * these are indexes into the lookup_inners table in CompressedBatchProof
     * ```
     *
     * `repeated int32 path = 4 [json_name = "path"];`
     */
     public val path: com.google.protobuf.kotlin.DslList<kotlin.Int, PathProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.pathList
      )
    /**
     * ```
     * these are indexes into the lookup_inners table in CompressedBatchProof
     * ```
     *
     * `repeated int32 path = 4 [json_name = "path"];`
     * @param value The path to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addPath")
    public fun com.google.protobuf.kotlin.DslList<kotlin.Int, PathProxy>.add(value: kotlin.Int) {
      _builder.addPath(value)
    }/**
     * ```
     * these are indexes into the lookup_inners table in CompressedBatchProof
     * ```
     *
     * `repeated int32 path = 4 [json_name = "path"];`
     * @param value The path to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignPath")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, PathProxy>.plusAssign(value: kotlin.Int) {
      add(value)
    }/**
     * ```
     * these are indexes into the lookup_inners table in CompressedBatchProof
     * ```
     *
     * `repeated int32 path = 4 [json_name = "path"];`
     * @param values The path to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllPath")
    public fun com.google.protobuf.kotlin.DslList<kotlin.Int, PathProxy>.addAll(values: kotlin.collections.Iterable<kotlin.Int>) {
      _builder.addAllPath(values)
    }/**
     * ```
     * these are indexes into the lookup_inners table in CompressedBatchProof
     * ```
     *
     * `repeated int32 path = 4 [json_name = "path"];`
     * @param values The path to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllPath")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, PathProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.Int>) {
      addAll(values)
    }/**
     * ```
     * these are indexes into the lookup_inners table in CompressedBatchProof
     * ```
     *
     * `repeated int32 path = 4 [json_name = "path"];`
     * @param index The index to set the value at.
     * @param value The path to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setPath")
    public operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, PathProxy>.set(index: kotlin.Int, value: kotlin.Int) {
      _builder.setPath(index, value)
    }/**
     * ```
     * these are indexes into the lookup_inners table in CompressedBatchProof
     * ```
     *
     * `repeated int32 path = 4 [json_name = "path"];`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearPath")
    public fun com.google.protobuf.kotlin.DslList<kotlin.Int, PathProxy>.clear() {
      _builder.clearPath()
    }}
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.ics23.v1.Proofs.CompressedExistenceProof.copy(block: `cosmos.ics23.v1`.CompressedExistenceProofKt.Dsl.() -> kotlin.Unit): cosmos.ics23.v1.Proofs.CompressedExistenceProof =
  `cosmos.ics23.v1`.CompressedExistenceProofKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.ics23.v1.Proofs.CompressedExistenceProofOrBuilder.leafOrNull: cosmos.ics23.v1.Proofs.LeafOp?
  get() = if (hasLeaf()) getLeaf() else null

