// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/ics23/v1/proofs.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.ics23.v1;

@kotlin.jvm.JvmName("-initializeinnerOp")
public inline fun innerOp(block: cosmos.ics23.v1.InnerOpKt.Dsl.() -> kotlin.Unit): cosmos.ics23.v1.Proofs.InnerOp =
  cosmos.ics23.v1.InnerOpKt.Dsl._create(cosmos.ics23.v1.Proofs.InnerOp.newBuilder()).apply { block() }._build()
/**
 * ```
 * *
 * InnerOp represents a merkle-proof step that is not a leaf.
 * It represents concatenating two children and hashing them to provide the next result.
 *
 * The result of the previous step is passed in, so the signature of this op is:
 * innerOp(child) -> output
 *
 * The result of applying InnerOp should be:
 * output = op.hash(op.prefix || child || op.suffix)
 *
 * where the || operator is concatenation of binary data,
 * and child is the result of hashing all the tree below this step.
 *
 * Any special data, like prepending child with the length, or prepending the entire operation with
 * some value to differentiate from leaf nodes, should be included in prefix and suffix.
 * If either of prefix or suffix is empty, we just treat it as an empty string
 * ```
 *
 * Protobuf type `cosmos.ics23.v1.InnerOp`
 */
public object InnerOpKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.ics23.v1.Proofs.InnerOp.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.ics23.v1.Proofs.InnerOp.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.ics23.v1.Proofs.InnerOp = _builder.build()

    /**
     * `.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];`
     */
    public var hash: cosmos.ics23.v1.Proofs.HashOp
      @JvmName("getHash")
      get() = _builder.hash
      @JvmName("setHash")
      set(value) {
        _builder.hash = value
      }
    public var hashValue: kotlin.Int
      @JvmName("getHashValue")
      get() = _builder.hashValue
      @JvmName("setHashValue")
      set(value) {
        _builder.hashValue = value
      }
    /**
     * `.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];`
     */
    public fun clearHash() {
      _builder.clearHash()
    }

    /**
     * `bytes prefix = 2 [json_name = "prefix"];`
     */
    public var prefix: com.google.protobuf.ByteString
      @JvmName("getPrefix")
      get() = _builder.prefix
      @JvmName("setPrefix")
      set(value) {
        _builder.prefix = value
      }
    /**
     * `bytes prefix = 2 [json_name = "prefix"];`
     */
    public fun clearPrefix() {
      _builder.clearPrefix()
    }

    /**
     * `bytes suffix = 3 [json_name = "suffix"];`
     */
    public var suffix: com.google.protobuf.ByteString
      @JvmName("getSuffix")
      get() = _builder.suffix
      @JvmName("setSuffix")
      set(value) {
        _builder.suffix = value
      }
    /**
     * `bytes suffix = 3 [json_name = "suffix"];`
     */
    public fun clearSuffix() {
      _builder.clearSuffix()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.ics23.v1.Proofs.InnerOp.copy(block: `cosmos.ics23.v1`.InnerOpKt.Dsl.() -> kotlin.Unit): cosmos.ics23.v1.Proofs.InnerOp =
  `cosmos.ics23.v1`.InnerOpKt.Dsl._create(this.toBuilder()).apply { block() }._build()

