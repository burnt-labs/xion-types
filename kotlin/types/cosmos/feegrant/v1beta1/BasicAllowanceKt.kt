// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/feegrant/v1beta1/feegrant.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.feegrant.v1beta1;

@kotlin.jvm.JvmName("-initializebasicAllowance")
public inline fun basicAllowance(block: cosmos.feegrant.v1beta1.BasicAllowanceKt.Dsl.() -> kotlin.Unit): cosmos.feegrant.v1beta1.Feegrant.BasicAllowance =
  cosmos.feegrant.v1beta1.BasicAllowanceKt.Dsl._create(cosmos.feegrant.v1beta1.Feegrant.BasicAllowance.newBuilder()).apply { block() }._build()
/**
 * ```
 * BasicAllowance implements Allowance with a one-time grant of coins
 * that optionally expires. The grantee can use up to SpendLimit to cover fees.
 * ```
 *
 * Protobuf type `cosmos.feegrant.v1beta1.BasicAllowance`
 */
public object BasicAllowanceKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.feegrant.v1beta1.Feegrant.BasicAllowance.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.feegrant.v1beta1.Feegrant.BasicAllowance.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.feegrant.v1beta1.Feegrant.BasicAllowance = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class SpendLimitProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * spend_limit specifies the maximum amount of coins that can be spent
     * by this allowance and will be updated as coins are spent. If it is
     * empty, there is no spend limit and any amount of coins can be spent.
     * ```
     *
     * `repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];`
     */
     public val spendLimit: com.google.protobuf.kotlin.DslList<cosmos.base.v1beta1.CoinOuterClass.Coin, SpendLimitProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.spendLimitList
      )
    /**
     * ```
     * spend_limit specifies the maximum amount of coins that can be spent
     * by this allowance and will be updated as coins are spent. If it is
     * empty, there is no spend limit and any amount of coins can be spent.
     * ```
     *
     * `repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];`
     * @param value The spendLimit to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addSpendLimit")
    public fun com.google.protobuf.kotlin.DslList<cosmos.base.v1beta1.CoinOuterClass.Coin, SpendLimitProxy>.add(value: cosmos.base.v1beta1.CoinOuterClass.Coin) {
      _builder.addSpendLimit(value)
    }
    /**
     * ```
     * spend_limit specifies the maximum amount of coins that can be spent
     * by this allowance and will be updated as coins are spent. If it is
     * empty, there is no spend limit and any amount of coins can be spent.
     * ```
     *
     * `repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];`
     * @param value The spendLimit to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignSpendLimit")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<cosmos.base.v1beta1.CoinOuterClass.Coin, SpendLimitProxy>.plusAssign(value: cosmos.base.v1beta1.CoinOuterClass.Coin) {
      add(value)
    }
    /**
     * ```
     * spend_limit specifies the maximum amount of coins that can be spent
     * by this allowance and will be updated as coins are spent. If it is
     * empty, there is no spend limit and any amount of coins can be spent.
     * ```
     *
     * `repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];`
     * @param values The spendLimit to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllSpendLimit")
    public fun com.google.protobuf.kotlin.DslList<cosmos.base.v1beta1.CoinOuterClass.Coin, SpendLimitProxy>.addAll(values: kotlin.collections.Iterable<cosmos.base.v1beta1.CoinOuterClass.Coin>) {
      _builder.addAllSpendLimit(values)
    }
    /**
     * ```
     * spend_limit specifies the maximum amount of coins that can be spent
     * by this allowance and will be updated as coins are spent. If it is
     * empty, there is no spend limit and any amount of coins can be spent.
     * ```
     *
     * `repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];`
     * @param values The spendLimit to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllSpendLimit")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<cosmos.base.v1beta1.CoinOuterClass.Coin, SpendLimitProxy>.plusAssign(values: kotlin.collections.Iterable<cosmos.base.v1beta1.CoinOuterClass.Coin>) {
      addAll(values)
    }
    /**
     * ```
     * spend_limit specifies the maximum amount of coins that can be spent
     * by this allowance and will be updated as coins are spent. If it is
     * empty, there is no spend limit and any amount of coins can be spent.
     * ```
     *
     * `repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];`
     * @param index The index to set the value at.
     * @param value The spendLimit to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setSpendLimit")
    public operator fun com.google.protobuf.kotlin.DslList<cosmos.base.v1beta1.CoinOuterClass.Coin, SpendLimitProxy>.set(index: kotlin.Int, value: cosmos.base.v1beta1.CoinOuterClass.Coin) {
      _builder.setSpendLimit(index, value)
    }
    /**
     * ```
     * spend_limit specifies the maximum amount of coins that can be spent
     * by this allowance and will be updated as coins are spent. If it is
     * empty, there is no spend limit and any amount of coins can be spent.
     * ```
     *
     * `repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearSpendLimit")
    public fun com.google.protobuf.kotlin.DslList<cosmos.base.v1beta1.CoinOuterClass.Coin, SpendLimitProxy>.clear() {
      _builder.clearSpendLimit()
    }


    /**
     * ```
     * expiration specifies an optional time when this allowance expires
     * ```
     *
     * `.google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.stdtime) = true];`
     */
    public var expiration: com.google.protobuf.Timestamp
      @JvmName("getExpiration")
      get() = _builder.expiration
      @JvmName("setExpiration")
      set(value) {
        _builder.expiration = value
      }
    /**
     * ```
     * expiration specifies an optional time when this allowance expires
     * ```
     *
     * `.google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.stdtime) = true];`
     */
    public fun clearExpiration() {
      _builder.clearExpiration()
    }
    /**
     * ```
     * expiration specifies an optional time when this allowance expires
     * ```
     *
     * `.google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.stdtime) = true];`
     * @return Whether the expiration field is set.
     */
    public fun hasExpiration(): kotlin.Boolean {
      return _builder.hasExpiration()
    }

    public val BasicAllowanceKt.Dsl.expirationOrNull: com.google.protobuf.Timestamp?
      get() = _builder.expirationOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.feegrant.v1beta1.Feegrant.BasicAllowance.copy(block: `cosmos.feegrant.v1beta1`.BasicAllowanceKt.Dsl.() -> kotlin.Unit): cosmos.feegrant.v1beta1.Feegrant.BasicAllowance =
  `cosmos.feegrant.v1beta1`.BasicAllowanceKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.feegrant.v1beta1.Feegrant.BasicAllowanceOrBuilder.expirationOrNull: com.google.protobuf.Timestamp?
  get() = if (hasExpiration()) getExpiration() else null

