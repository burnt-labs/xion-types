// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/crypto/keyring/v1/record.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.crypto.keyring.v1;

@kotlin.jvm.JvmName("-initializerecord")
public inline fun record(block: cosmos.crypto.keyring.v1.RecordKt.Dsl.() -> kotlin.Unit): cosmos.crypto.keyring.v1.RecordOuterClass.Record =
  cosmos.crypto.keyring.v1.RecordKt.Dsl._create(cosmos.crypto.keyring.v1.RecordOuterClass.Record.newBuilder()).apply { block() }._build()
/**
 * ```
 * Record is used for representing a key in the keyring.
 * ```
 *
 * Protobuf type `cosmos.crypto.keyring.v1.Record`
 */
public object RecordKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.crypto.keyring.v1.RecordOuterClass.Record.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.crypto.keyring.v1.RecordOuterClass.Record.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.crypto.keyring.v1.RecordOuterClass.Record = _builder.build()

    /**
     * ```
     * name represents a name of Record
     * ```
     *
     * `string name = 1 [json_name = "name"];`
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.name
      @JvmName("setName")
      set(value) {
        _builder.name = value
      }
    /**
     * ```
     * name represents a name of Record
     * ```
     *
     * `string name = 1 [json_name = "name"];`
     */
    public fun clearName() {
      _builder.clearName()
    }

    /**
     * ```
     * pub_key represents a public key in any format
     * ```
     *
     * `.google.protobuf.Any pub_key = 2 [json_name = "pubKey"];`
     */
    public var pubKey: com.google.protobuf.Any
      @JvmName("getPubKey")
      get() = _builder.pubKey
      @JvmName("setPubKey")
      set(value) {
        _builder.pubKey = value
      }
    /**
     * ```
     * pub_key represents a public key in any format
     * ```
     *
     * `.google.protobuf.Any pub_key = 2 [json_name = "pubKey"];`
     */
    public fun clearPubKey() {
      _builder.clearPubKey()
    }
    /**
     * ```
     * pub_key represents a public key in any format
     * ```
     *
     * `.google.protobuf.Any pub_key = 2 [json_name = "pubKey"];`
     * @return Whether the pubKey field is set.
     */
    public fun hasPubKey(): kotlin.Boolean {
      return _builder.hasPubKey()
    }

    public val RecordKt.Dsl.pubKeyOrNull: com.google.protobuf.Any?
      get() = _builder.pubKeyOrNull

    /**
     * ```
     * local stores the private key locally.
     * ```
     *
     * `.cosmos.crypto.keyring.v1.Record.Local local = 3 [json_name = "local"];`
     */
    public var local: cosmos.crypto.keyring.v1.RecordOuterClass.Record.Local
      @JvmName("getLocal")
      get() = _builder.local
      @JvmName("setLocal")
      set(value) {
        _builder.local = value
      }
    /**
     * ```
     * local stores the private key locally.
     * ```
     *
     * `.cosmos.crypto.keyring.v1.Record.Local local = 3 [json_name = "local"];`
     */
    public fun clearLocal() {
      _builder.clearLocal()
    }
    /**
     * ```
     * local stores the private key locally.
     * ```
     *
     * `.cosmos.crypto.keyring.v1.Record.Local local = 3 [json_name = "local"];`
     * @return Whether the local field is set.
     */
    public fun hasLocal(): kotlin.Boolean {
      return _builder.hasLocal()
    }

    /**
     * ```
     * ledger stores the information about a Ledger key.
     * ```
     *
     * `.cosmos.crypto.keyring.v1.Record.Ledger ledger = 4 [json_name = "ledger"];`
     */
    public var ledger: cosmos.crypto.keyring.v1.RecordOuterClass.Record.Ledger
      @JvmName("getLedger")
      get() = _builder.ledger
      @JvmName("setLedger")
      set(value) {
        _builder.ledger = value
      }
    /**
     * ```
     * ledger stores the information about a Ledger key.
     * ```
     *
     * `.cosmos.crypto.keyring.v1.Record.Ledger ledger = 4 [json_name = "ledger"];`
     */
    public fun clearLedger() {
      _builder.clearLedger()
    }
    /**
     * ```
     * ledger stores the information about a Ledger key.
     * ```
     *
     * `.cosmos.crypto.keyring.v1.Record.Ledger ledger = 4 [json_name = "ledger"];`
     * @return Whether the ledger field is set.
     */
    public fun hasLedger(): kotlin.Boolean {
      return _builder.hasLedger()
    }

    /**
     * ```
     * Multi does not store any other information.
     * ```
     *
     * `.cosmos.crypto.keyring.v1.Record.Multi multi = 5 [json_name = "multi"];`
     */
    public var multi: cosmos.crypto.keyring.v1.RecordOuterClass.Record.Multi
      @JvmName("getMulti")
      get() = _builder.multi
      @JvmName("setMulti")
      set(value) {
        _builder.multi = value
      }
    /**
     * ```
     * Multi does not store any other information.
     * ```
     *
     * `.cosmos.crypto.keyring.v1.Record.Multi multi = 5 [json_name = "multi"];`
     */
    public fun clearMulti() {
      _builder.clearMulti()
    }
    /**
     * ```
     * Multi does not store any other information.
     * ```
     *
     * `.cosmos.crypto.keyring.v1.Record.Multi multi = 5 [json_name = "multi"];`
     * @return Whether the multi field is set.
     */
    public fun hasMulti(): kotlin.Boolean {
      return _builder.hasMulti()
    }

    /**
     * ```
     * Offline does not store any other information.
     * ```
     *
     * `.cosmos.crypto.keyring.v1.Record.Offline offline = 6 [json_name = "offline"];`
     */
    public var offline: cosmos.crypto.keyring.v1.RecordOuterClass.Record.Offline
      @JvmName("getOffline")
      get() = _builder.offline
      @JvmName("setOffline")
      set(value) {
        _builder.offline = value
      }
    /**
     * ```
     * Offline does not store any other information.
     * ```
     *
     * `.cosmos.crypto.keyring.v1.Record.Offline offline = 6 [json_name = "offline"];`
     */
    public fun clearOffline() {
      _builder.clearOffline()
    }
    /**
     * ```
     * Offline does not store any other information.
     * ```
     *
     * `.cosmos.crypto.keyring.v1.Record.Offline offline = 6 [json_name = "offline"];`
     * @return Whether the offline field is set.
     */
    public fun hasOffline(): kotlin.Boolean {
      return _builder.hasOffline()
    }
    public val itemCase: cosmos.crypto.keyring.v1.RecordOuterClass.Record.ItemCase
    @kotlin.jvm.JvmName("getItemCase")
      get() = _builder.getItemCase()

    public fun clearItem() {
      _builder.clearItem()
    }
  }
  @kotlin.jvm.JvmName("-initializelocal")
  public inline fun local(block: cosmos.crypto.keyring.v1.RecordKt.LocalKt.Dsl.() -> kotlin.Unit): cosmos.crypto.keyring.v1.RecordOuterClass.Record.Local =
    cosmos.crypto.keyring.v1.RecordKt.LocalKt.Dsl._create(cosmos.crypto.keyring.v1.RecordOuterClass.Record.Local.newBuilder()).apply { block() }._build()
  /**
   * ```
   * Item is a keyring item stored in a keyring backend.
   * Local item
   * ```
   *
   * Protobuf type `cosmos.crypto.keyring.v1.Record.Local`
   */
  public object LocalKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: cosmos.crypto.keyring.v1.RecordOuterClass.Record.Local.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
        internal fun _create(builder: cosmos.crypto.keyring.v1.RecordOuterClass.Record.Local.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
      internal fun _build(): cosmos.crypto.keyring.v1.RecordOuterClass.Record.Local = _builder.build()

      /**
       * `.google.protobuf.Any priv_key = 1 [json_name = "privKey"];`
       */
      public var privKey: com.google.protobuf.Any
        @JvmName("getPrivKey")
        get() = _builder.privKey
        @JvmName("setPrivKey")
        set(value) {
          _builder.privKey = value
        }
      /**
       * `.google.protobuf.Any priv_key = 1 [json_name = "privKey"];`
       */
      public fun clearPrivKey() {
        _builder.clearPrivKey()
      }
      /**
       * `.google.protobuf.Any priv_key = 1 [json_name = "privKey"];`
       * @return Whether the privKey field is set.
       */
      public fun hasPrivKey(): kotlin.Boolean {
        return _builder.hasPrivKey()
      }

      public val LocalKt.Dsl.privKeyOrNull: com.google.protobuf.Any?
        get() = _builder.privKeyOrNull
    }
  }
  @kotlin.jvm.JvmName("-initializeledger")
  public inline fun ledger(block: cosmos.crypto.keyring.v1.RecordKt.LedgerKt.Dsl.() -> kotlin.Unit): cosmos.crypto.keyring.v1.RecordOuterClass.Record.Ledger =
    cosmos.crypto.keyring.v1.RecordKt.LedgerKt.Dsl._create(cosmos.crypto.keyring.v1.RecordOuterClass.Record.Ledger.newBuilder()).apply { block() }._build()
  /**
   * ```
   * Ledger item
   * ```
   *
   * Protobuf type `cosmos.crypto.keyring.v1.Record.Ledger`
   */
  public object LedgerKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: cosmos.crypto.keyring.v1.RecordOuterClass.Record.Ledger.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
        internal fun _create(builder: cosmos.crypto.keyring.v1.RecordOuterClass.Record.Ledger.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
      internal fun _build(): cosmos.crypto.keyring.v1.RecordOuterClass.Record.Ledger = _builder.build()

      /**
       * `.cosmos.crypto.hd.v1.BIP44Params path = 1 [json_name = "path"];`
       */
      public var path: cosmos.crypto.hd.v1.Hd.BIP44Params
        @JvmName("getPath")
        get() = _builder.path
        @JvmName("setPath")
        set(value) {
          _builder.path = value
        }
      /**
       * `.cosmos.crypto.hd.v1.BIP44Params path = 1 [json_name = "path"];`
       */
      public fun clearPath() {
        _builder.clearPath()
      }
      /**
       * `.cosmos.crypto.hd.v1.BIP44Params path = 1 [json_name = "path"];`
       * @return Whether the path field is set.
       */
      public fun hasPath(): kotlin.Boolean {
        return _builder.hasPath()
      }

      public val LedgerKt.Dsl.pathOrNull: cosmos.crypto.hd.v1.Hd.BIP44Params?
        get() = _builder.pathOrNull
    }
  }
  @kotlin.jvm.JvmName("-initializemulti")
  public inline fun multi(block: cosmos.crypto.keyring.v1.RecordKt.MultiKt.Dsl.() -> kotlin.Unit): cosmos.crypto.keyring.v1.RecordOuterClass.Record.Multi =
    cosmos.crypto.keyring.v1.RecordKt.MultiKt.Dsl._create(cosmos.crypto.keyring.v1.RecordOuterClass.Record.Multi.newBuilder()).apply { block() }._build()
  /**
   * ```
   * Multi item
   * ```
   *
   * Protobuf type `cosmos.crypto.keyring.v1.Record.Multi`
   */
  public object MultiKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: cosmos.crypto.keyring.v1.RecordOuterClass.Record.Multi.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
        internal fun _create(builder: cosmos.crypto.keyring.v1.RecordOuterClass.Record.Multi.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
      internal fun _build(): cosmos.crypto.keyring.v1.RecordOuterClass.Record.Multi = _builder.build()
    }
  }
  @kotlin.jvm.JvmName("-initializeoffline")
  public inline fun offline(block: cosmos.crypto.keyring.v1.RecordKt.OfflineKt.Dsl.() -> kotlin.Unit): cosmos.crypto.keyring.v1.RecordOuterClass.Record.Offline =
    cosmos.crypto.keyring.v1.RecordKt.OfflineKt.Dsl._create(cosmos.crypto.keyring.v1.RecordOuterClass.Record.Offline.newBuilder()).apply { block() }._build()
  /**
   * ```
   * Offline item
   * ```
   *
   * Protobuf type `cosmos.crypto.keyring.v1.Record.Offline`
   */
  public object OfflineKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: cosmos.crypto.keyring.v1.RecordOuterClass.Record.Offline.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
        internal fun _create(builder: cosmos.crypto.keyring.v1.RecordOuterClass.Record.Offline.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
      internal fun _build(): cosmos.crypto.keyring.v1.RecordOuterClass.Record.Offline = _builder.build()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.crypto.keyring.v1.RecordOuterClass.Record.copy(block: `cosmos.crypto.keyring.v1`.RecordKt.Dsl.() -> kotlin.Unit): cosmos.crypto.keyring.v1.RecordOuterClass.Record =
  `cosmos.crypto.keyring.v1`.RecordKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun cosmos.crypto.keyring.v1.RecordOuterClass.Record.Local.copy(block: `cosmos.crypto.keyring.v1`.RecordKt.LocalKt.Dsl.() -> kotlin.Unit): cosmos.crypto.keyring.v1.RecordOuterClass.Record.Local =
  `cosmos.crypto.keyring.v1`.RecordKt.LocalKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.crypto.keyring.v1.RecordOuterClass.Record.LocalOrBuilder.privKeyOrNull: com.google.protobuf.Any?
  get() = if (hasPrivKey()) getPrivKey() else null

@kotlin.jvm.JvmSynthetic
public inline fun cosmos.crypto.keyring.v1.RecordOuterClass.Record.Ledger.copy(block: `cosmos.crypto.keyring.v1`.RecordKt.LedgerKt.Dsl.() -> kotlin.Unit): cosmos.crypto.keyring.v1.RecordOuterClass.Record.Ledger =
  `cosmos.crypto.keyring.v1`.RecordKt.LedgerKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.crypto.keyring.v1.RecordOuterClass.Record.LedgerOrBuilder.pathOrNull: cosmos.crypto.hd.v1.Hd.BIP44Params?
  get() = if (hasPath()) getPath() else null

@kotlin.jvm.JvmSynthetic
public inline fun cosmos.crypto.keyring.v1.RecordOuterClass.Record.Multi.copy(block: `cosmos.crypto.keyring.v1`.RecordKt.MultiKt.Dsl.() -> kotlin.Unit): cosmos.crypto.keyring.v1.RecordOuterClass.Record.Multi =
  `cosmos.crypto.keyring.v1`.RecordKt.MultiKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun cosmos.crypto.keyring.v1.RecordOuterClass.Record.Offline.copy(block: `cosmos.crypto.keyring.v1`.RecordKt.OfflineKt.Dsl.() -> kotlin.Unit): cosmos.crypto.keyring.v1.RecordOuterClass.Record.Offline =
  `cosmos.crypto.keyring.v1`.RecordKt.OfflineKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.crypto.keyring.v1.RecordOuterClass.RecordOrBuilder.pubKeyOrNull: com.google.protobuf.Any?
  get() = if (hasPubKey()) getPubKey() else null

public val cosmos.crypto.keyring.v1.RecordOuterClass.RecordOrBuilder.localOrNull: cosmos.crypto.keyring.v1.RecordOuterClass.Record.Local?
  get() = if (hasLocal()) getLocal() else null

public val cosmos.crypto.keyring.v1.RecordOuterClass.RecordOrBuilder.ledgerOrNull: cosmos.crypto.keyring.v1.RecordOuterClass.Record.Ledger?
  get() = if (hasLedger()) getLedger() else null

public val cosmos.crypto.keyring.v1.RecordOuterClass.RecordOrBuilder.multiOrNull: cosmos.crypto.keyring.v1.RecordOuterClass.Record.Multi?
  get() = if (hasMulti()) getMulti() else null

public val cosmos.crypto.keyring.v1.RecordOuterClass.RecordOrBuilder.offlineOrNull: cosmos.crypto.keyring.v1.RecordOuterClass.Record.Offline?
  get() = if (hasOffline()) getOffline() else null

