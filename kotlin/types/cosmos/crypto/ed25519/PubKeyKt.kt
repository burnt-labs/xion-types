// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/crypto/ed25519/keys.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.crypto.ed25519;

@kotlin.jvm.JvmName("-initializepubKey")
public inline fun pubKey(block: cosmos.crypto.ed25519.PubKeyKt.Dsl.() -> kotlin.Unit): cosmos.crypto.ed25519.Keys.PubKey =
  cosmos.crypto.ed25519.PubKeyKt.Dsl._create(cosmos.crypto.ed25519.Keys.PubKey.newBuilder()).apply { block() }._build()
/**
 * ```
 * PubKey is an ed25519 public key for handling Tendermint keys in SDK.
 * It's needed for Any serialization and SDK compatibility.
 * It must not be used in a non Tendermint key context because it doesn't implement
 * ADR-28. Nevertheless, you will like to use ed25519 in app user level
 * then you must create a new proto message and follow ADR-28 for Address construction.
 * ```
 *
 * Protobuf type `cosmos.crypto.ed25519.PubKey`
 */
public object PubKeyKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.crypto.ed25519.Keys.PubKey.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.crypto.ed25519.Keys.PubKey.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.crypto.ed25519.Keys.PubKey = _builder.build()

    /**
     * `bytes key = 1 [json_name = "key", (.gogoproto.casttype) = "crypto/ed25519.PublicKey"];`
     */
    public var key: com.google.protobuf.ByteString
      @JvmName("getKey")
      get() = _builder.key
      @JvmName("setKey")
      set(value) {
        _builder.key = value
      }
    /**
     * `bytes key = 1 [json_name = "key", (.gogoproto.casttype) = "crypto/ed25519.PublicKey"];`
     */
    public fun clearKey() {
      _builder.clearKey()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.crypto.ed25519.Keys.PubKey.copy(block: `cosmos.crypto.ed25519`.PubKeyKt.Dsl.() -> kotlin.Unit): cosmos.crypto.ed25519.Keys.PubKey =
  `cosmos.crypto.ed25519`.PubKeyKt.Dsl._create(this.toBuilder()).apply { block() }._build()

