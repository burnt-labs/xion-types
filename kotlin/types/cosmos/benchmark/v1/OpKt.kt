// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/benchmark/v1/benchmark.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.benchmark.v1;

@kotlin.jvm.JvmName("-initializeop")
public inline fun op(block: cosmos.benchmark.v1.OpKt.Dsl.() -> kotlin.Unit): cosmos.benchmark.v1.Benchmark.Op =
  cosmos.benchmark.v1.OpKt.Dsl._create(cosmos.benchmark.v1.Benchmark.Op.newBuilder()).apply { block() }._build()
/**
 * ```
 * Op is a message describing a benchmark operation.
 * ```
 *
 * Protobuf type `cosmos.benchmark.v1.Op`
 */
public object OpKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.benchmark.v1.Benchmark.Op.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.benchmark.v1.Benchmark.Op.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.benchmark.v1.Benchmark.Op = _builder.build()

    /**
     * `uint64 seed = 1 [json_name = "seed"];`
     */
    public var seed: kotlin.Long
      @JvmName("getSeed")
      get() = _builder.seed
      @JvmName("setSeed")
      set(value) {
        _builder.seed = value
      }
    /**
     * `uint64 seed = 1 [json_name = "seed"];`
     */
    public fun clearSeed() {
      _builder.clearSeed()
    }

    /**
     * `string actor = 2 [json_name = "actor"];`
     */
    public var actor: kotlin.String
      @JvmName("getActor")
      get() = _builder.actor
      @JvmName("setActor")
      set(value) {
        _builder.actor = value
      }
    /**
     * `string actor = 2 [json_name = "actor"];`
     */
    public fun clearActor() {
      _builder.clearActor()
    }

    /**
     * `uint64 key_length = 3 [json_name = "keyLength"];`
     */
    public var keyLength: kotlin.Long
      @JvmName("getKeyLength")
      get() = _builder.keyLength
      @JvmName("setKeyLength")
      set(value) {
        _builder.keyLength = value
      }
    /**
     * `uint64 key_length = 3 [json_name = "keyLength"];`
     */
    public fun clearKeyLength() {
      _builder.clearKeyLength()
    }

    /**
     * `uint64 value_length = 4 [json_name = "valueLength"];`
     */
    public var valueLength: kotlin.Long
      @JvmName("getValueLength")
      get() = _builder.valueLength
      @JvmName("setValueLength")
      set(value) {
        _builder.valueLength = value
      }
    /**
     * `uint64 value_length = 4 [json_name = "valueLength"];`
     */
    public fun clearValueLength() {
      _builder.clearValueLength()
    }

    /**
     * `uint32 iterations = 5 [json_name = "iterations"];`
     */
    public var iterations: kotlin.Int
      @JvmName("getIterations")
      get() = _builder.iterations
      @JvmName("setIterations")
      set(value) {
        _builder.iterations = value
      }
    /**
     * `uint32 iterations = 5 [json_name = "iterations"];`
     */
    public fun clearIterations() {
      _builder.clearIterations()
    }

    /**
     * `bool delete = 6 [json_name = "delete"];`
     */
    public var delete: kotlin.Boolean
      @JvmName("getDelete")
      get() = _builder.delete
      @JvmName("setDelete")
      set(value) {
        _builder.delete = value
      }
    /**
     * `bool delete = 6 [json_name = "delete"];`
     */
    public fun clearDelete() {
      _builder.clearDelete()
    }

    /**
     * `bool exists = 7 [json_name = "exists"];`
     */
    public var exists: kotlin.Boolean
      @JvmName("getExists")
      get() = _builder.exists
      @JvmName("setExists")
      set(value) {
        _builder.exists = value
      }
    /**
     * `bool exists = 7 [json_name = "exists"];`
     */
    public fun clearExists() {
      _builder.clearExists()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.benchmark.v1.Benchmark.Op.copy(block: `cosmos.benchmark.v1`.OpKt.Dsl.() -> kotlin.Unit): cosmos.benchmark.v1.Benchmark.Op =
  `cosmos.benchmark.v1`.OpKt.Dsl._create(this.toBuilder()).apply { block() }._build()

