// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/benchmark/module/v1/module.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.benchmark.module.v1;

@kotlin.jvm.JvmName("-initializegeneratorParams")
public inline fun generatorParams(block: cosmos.benchmark.module.v1.GeneratorParamsKt.Dsl.() -> kotlin.Unit): cosmos.benchmark.module.v1.ModuleOuterClass.GeneratorParams =
  cosmos.benchmark.module.v1.GeneratorParamsKt.Dsl._create(cosmos.benchmark.module.v1.ModuleOuterClass.GeneratorParams.newBuilder()).apply { block() }._build()
/**
 * ```
 * GenesisParams defines the genesis parameters for the benchmark module.
 * ```
 *
 * Protobuf type `cosmos.benchmark.module.v1.GeneratorParams`
 */
public object GeneratorParamsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.benchmark.module.v1.ModuleOuterClass.GeneratorParams.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.benchmark.module.v1.ModuleOuterClass.GeneratorParams.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.benchmark.module.v1.ModuleOuterClass.GeneratorParams = _builder.build()

    /**
     * ```
     * seed is the seed for the random number generator.
     * ```
     *
     * `uint64 seed = 1 [json_name = "seed"];`
     */
    public var seed: kotlin.Long
      @JvmName("getSeed")
      get() = _builder.seed
      @JvmName("setSeed")
      set(value) {
        _builder.seed = value
      }
    /**
     * ```
     * seed is the seed for the random number generator.
     * ```
     *
     * `uint64 seed = 1 [json_name = "seed"];`
     */
    public fun clearSeed() {
      _builder.clearSeed()
    }

    /**
     * ```
     * bucket_count is the number of store keys to uniformly distribute genesis_count keys across.
     * ```
     *
     * `uint64 bucket_count = 2 [json_name = "bucketCount"];`
     */
    public var bucketCount: kotlin.Long
      @JvmName("getBucketCount")
      get() = _builder.bucketCount
      @JvmName("setBucketCount")
      set(value) {
        _builder.bucketCount = value
      }
    /**
     * ```
     * bucket_count is the number of store keys to uniformly distribute genesis_count keys across.
     * ```
     *
     * `uint64 bucket_count = 2 [json_name = "bucketCount"];`
     */
    public fun clearBucketCount() {
      _builder.clearBucketCount()
    }

    /**
     * ```
     * key_mean is the mean size (in normal distribution) of keys in each bucket.
     * ```
     *
     * `uint64 key_mean = 3 [json_name = "keyMean"];`
     */
    public var keyMean: kotlin.Long
      @JvmName("getKeyMean")
      get() = _builder.keyMean
      @JvmName("setKeyMean")
      set(value) {
        _builder.keyMean = value
      }
    /**
     * ```
     * key_mean is the mean size (in normal distribution) of keys in each bucket.
     * ```
     *
     * `uint64 key_mean = 3 [json_name = "keyMean"];`
     */
    public fun clearKeyMean() {
      _builder.clearKeyMean()
    }

    /**
     * ```
     * key_std_dev is the standard deviation of key sizes in each bucket.
     * ```
     *
     * `uint64 key_std_dev = 4 [json_name = "keyStdDev"];`
     */
    public var keyStdDev: kotlin.Long
      @JvmName("getKeyStdDev")
      get() = _builder.keyStdDev
      @JvmName("setKeyStdDev")
      set(value) {
        _builder.keyStdDev = value
      }
    /**
     * ```
     * key_std_dev is the standard deviation of key sizes in each bucket.
     * ```
     *
     * `uint64 key_std_dev = 4 [json_name = "keyStdDev"];`
     */
    public fun clearKeyStdDev() {
      _builder.clearKeyStdDev()
    }

    /**
     * ```
     * value_mean is the mean size (in normal distribution) of values in each bucket.
     * ```
     *
     * `uint64 value_mean = 6 [json_name = "valueMean"];`
     */
    public var valueMean: kotlin.Long
      @JvmName("getValueMean")
      get() = _builder.valueMean
      @JvmName("setValueMean")
      set(value) {
        _builder.valueMean = value
      }
    /**
     * ```
     * value_mean is the mean size (in normal distribution) of values in each bucket.
     * ```
     *
     * `uint64 value_mean = 6 [json_name = "valueMean"];`
     */
    public fun clearValueMean() {
      _builder.clearValueMean()
    }

    /**
     * ```
     * value_std_dev is the standard deviation of value sizes in each bucket.
     * ```
     *
     * `uint64 value_std_dev = 7 [json_name = "valueStdDev"];`
     */
    public var valueStdDev: kotlin.Long
      @JvmName("getValueStdDev")
      get() = _builder.valueStdDev
      @JvmName("setValueStdDev")
      set(value) {
        _builder.valueStdDev = value
      }
    /**
     * ```
     * value_std_dev is the standard deviation of value sizes in each bucket.
     * ```
     *
     * `uint64 value_std_dev = 7 [json_name = "valueStdDev"];`
     */
    public fun clearValueStdDev() {
      _builder.clearValueStdDev()
    }

    /**
     * ```
     * genesis_count is the number of keys to insert in the store, distributed across all buckets.
     * ```
     *
     * `uint64 genesis_count = 8 [json_name = "genesisCount"];`
     */
    public var genesisCount: kotlin.Long
      @JvmName("getGenesisCount")
      get() = _builder.genesisCount
      @JvmName("setGenesisCount")
      set(value) {
        _builder.genesisCount = value
      }
    /**
     * ```
     * genesis_count is the number of keys to insert in the store, distributed across all buckets.
     * ```
     *
     * `uint64 genesis_count = 8 [json_name = "genesisCount"];`
     */
    public fun clearGenesisCount() {
      _builder.clearGenesisCount()
    }

    /**
     * ```
     * insert_weight is the weight of insert operations.
     * ```
     *
     * `float insert_weight = 9 [json_name = "insertWeight"];`
     */
    public var insertWeight: kotlin.Float
      @JvmName("getInsertWeight")
      get() = _builder.insertWeight
      @JvmName("setInsertWeight")
      set(value) {
        _builder.insertWeight = value
      }
    /**
     * ```
     * insert_weight is the weight of insert operations.
     * ```
     *
     * `float insert_weight = 9 [json_name = "insertWeight"];`
     */
    public fun clearInsertWeight() {
      _builder.clearInsertWeight()
    }

    /**
     * ```
     * update_weight is the weight of update operations.
     * ```
     *
     * `float update_weight = 10 [json_name = "updateWeight"];`
     */
    public var updateWeight: kotlin.Float
      @JvmName("getUpdateWeight")
      get() = _builder.updateWeight
      @JvmName("setUpdateWeight")
      set(value) {
        _builder.updateWeight = value
      }
    /**
     * ```
     * update_weight is the weight of update operations.
     * ```
     *
     * `float update_weight = 10 [json_name = "updateWeight"];`
     */
    public fun clearUpdateWeight() {
      _builder.clearUpdateWeight()
    }

    /**
     * ```
     * get_weight is the weight of get operations.
     * ```
     *
     * `float get_weight = 12 [json_name = "getWeight"];`
     */
    public var getWeight: kotlin.Float
      @JvmName("getGetWeight")
      get() = _builder.getWeight
      @JvmName("setGetWeight")
      set(value) {
        _builder.getWeight = value
      }
    /**
     * ```
     * get_weight is the weight of get operations.
     * ```
     *
     * `float get_weight = 12 [json_name = "getWeight"];`
     */
    public fun clearGetWeight() {
      _builder.clearGetWeight()
    }

    /**
     * ```
     * delete_weight is the weight of delete operations.
     * ```
     *
     * `float delete_weight = 11 [json_name = "deleteWeight"];`
     */
    public var deleteWeight: kotlin.Float
      @JvmName("getDeleteWeight")
      get() = _builder.deleteWeight
      @JvmName("setDeleteWeight")
      set(value) {
        _builder.deleteWeight = value
      }
    /**
     * ```
     * delete_weight is the weight of delete operations.
     * ```
     *
     * `float delete_weight = 11 [json_name = "deleteWeight"];`
     */
    public fun clearDeleteWeight() {
      _builder.clearDeleteWeight()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.benchmark.module.v1.ModuleOuterClass.GeneratorParams.copy(block: `cosmos.benchmark.module.v1`.GeneratorParamsKt.Dsl.() -> kotlin.Unit): cosmos.benchmark.module.v1.ModuleOuterClass.GeneratorParams =
  `cosmos.benchmark.module.v1`.GeneratorParamsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

