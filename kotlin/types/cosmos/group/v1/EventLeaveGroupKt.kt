// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/group/v1/events.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.group.v1;

@kotlin.jvm.JvmName("-initializeeventLeaveGroup")
public inline fun eventLeaveGroup(block: cosmos.group.v1.EventLeaveGroupKt.Dsl.() -> kotlin.Unit): cosmos.group.v1.Events.EventLeaveGroup =
  cosmos.group.v1.EventLeaveGroupKt.Dsl._create(cosmos.group.v1.Events.EventLeaveGroup.newBuilder()).apply { block() }._build()
/**
 * ```
 * EventLeaveGroup is an event emitted when group member leaves the group.
 * ```
 *
 * Protobuf type `cosmos.group.v1.EventLeaveGroup`
 */
public object EventLeaveGroupKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.group.v1.Events.EventLeaveGroup.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.group.v1.Events.EventLeaveGroup.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.group.v1.Events.EventLeaveGroup = _builder.build()

    /**
     * ```
     * group_id is the unique ID of the group.
     * ```
     *
     * `uint64 group_id = 1 [json_name = "groupId"];`
     */
    public var groupId: kotlin.Long
      @JvmName("getGroupId")
      get() = _builder.groupId
      @JvmName("setGroupId")
      set(value) {
        _builder.groupId = value
      }
    /**
     * ```
     * group_id is the unique ID of the group.
     * ```
     *
     * `uint64 group_id = 1 [json_name = "groupId"];`
     */
    public fun clearGroupId() {
      _builder.clearGroupId()
    }

    /**
     * ```
     * address is the account address of the group member.
     * ```
     *
     * `string address = 2 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];`
     */
    public var address: kotlin.String
      @JvmName("getAddress")
      get() = _builder.address
      @JvmName("setAddress")
      set(value) {
        _builder.address = value
      }
    /**
     * ```
     * address is the account address of the group member.
     * ```
     *
     * `string address = 2 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];`
     */
    public fun clearAddress() {
      _builder.clearAddress()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.group.v1.Events.EventLeaveGroup.copy(block: `cosmos.group.v1`.EventLeaveGroupKt.Dsl.() -> kotlin.Unit): cosmos.group.v1.Events.EventLeaveGroup =
  `cosmos.group.v1`.EventLeaveGroupKt.Dsl._create(this.toBuilder()).apply { block() }._build()

