// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/group/v1/types.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.group.v1;

@kotlin.jvm.JvmName("-initializethresholdDecisionPolicy")
public inline fun thresholdDecisionPolicy(block: cosmos.group.v1.ThresholdDecisionPolicyKt.Dsl.() -> kotlin.Unit): cosmos.group.v1.Types.ThresholdDecisionPolicy =
  cosmos.group.v1.ThresholdDecisionPolicyKt.Dsl._create(cosmos.group.v1.Types.ThresholdDecisionPolicy.newBuilder()).apply { block() }._build()
/**
 * ```
 * ThresholdDecisionPolicy is a decision policy where a proposal passes when it
 * satisfies the two following conditions:
 * 1. The sum of all `YES` voter's weights is greater or equal than the defined
 * `threshold`.
 * 2. The voting and execution periods of the proposal respect the parameters
 * given by `windows`.
 * ```
 *
 * Protobuf type `cosmos.group.v1.ThresholdDecisionPolicy`
 */
public object ThresholdDecisionPolicyKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.group.v1.Types.ThresholdDecisionPolicy.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.group.v1.Types.ThresholdDecisionPolicy.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.group.v1.Types.ThresholdDecisionPolicy = _builder.build()

    /**
     * ```
     * threshold is the minimum weighted sum of `YES` votes that must be met or
     * exceeded for a proposal to succeed.
     * ```
     *
     * `string threshold = 1 [json_name = "threshold"];`
     */
    public var threshold: kotlin.String
      @JvmName("getThreshold")
      get() = _builder.threshold
      @JvmName("setThreshold")
      set(value) {
        _builder.threshold = value
      }
    /**
     * ```
     * threshold is the minimum weighted sum of `YES` votes that must be met or
     * exceeded for a proposal to succeed.
     * ```
     *
     * `string threshold = 1 [json_name = "threshold"];`
     */
    public fun clearThreshold() {
      _builder.clearThreshold()
    }

    /**
     * ```
     * windows defines the different windows for voting and execution.
     * ```
     *
     * `.cosmos.group.v1.DecisionPolicyWindows windows = 2 [json_name = "windows"];`
     */
    public var windows: cosmos.group.v1.Types.DecisionPolicyWindows
      @JvmName("getWindows")
      get() = _builder.windows
      @JvmName("setWindows")
      set(value) {
        _builder.windows = value
      }
    /**
     * ```
     * windows defines the different windows for voting and execution.
     * ```
     *
     * `.cosmos.group.v1.DecisionPolicyWindows windows = 2 [json_name = "windows"];`
     */
    public fun clearWindows() {
      _builder.clearWindows()
    }
    /**
     * ```
     * windows defines the different windows for voting and execution.
     * ```
     *
     * `.cosmos.group.v1.DecisionPolicyWindows windows = 2 [json_name = "windows"];`
     * @return Whether the windows field is set.
     */
    public fun hasWindows(): kotlin.Boolean {
      return _builder.hasWindows()
    }

    public val ThresholdDecisionPolicyKt.Dsl.windowsOrNull: cosmos.group.v1.Types.DecisionPolicyWindows?
      get() = _builder.windowsOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.group.v1.Types.ThresholdDecisionPolicy.copy(block: `cosmos.group.v1`.ThresholdDecisionPolicyKt.Dsl.() -> kotlin.Unit): cosmos.group.v1.Types.ThresholdDecisionPolicy =
  `cosmos.group.v1`.ThresholdDecisionPolicyKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.group.v1.Types.ThresholdDecisionPolicyOrBuilder.windowsOrNull: cosmos.group.v1.Types.DecisionPolicyWindows?
  get() = if (hasWindows()) getWindows() else null

