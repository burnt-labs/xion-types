// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/group/v1/events.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.group.v1;

@kotlin.jvm.JvmName("-initializeeventCreateGroup")
public inline fun eventCreateGroup(block: cosmos.group.v1.EventCreateGroupKt.Dsl.() -> kotlin.Unit): cosmos.group.v1.Events.EventCreateGroup =
  cosmos.group.v1.EventCreateGroupKt.Dsl._create(cosmos.group.v1.Events.EventCreateGroup.newBuilder()).apply { block() }._build()
/**
 * ```
 * EventCreateGroup is an event emitted when a group is created.
 * ```
 *
 * Protobuf type `cosmos.group.v1.EventCreateGroup`
 */
public object EventCreateGroupKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.group.v1.Events.EventCreateGroup.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.group.v1.Events.EventCreateGroup.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.group.v1.Events.EventCreateGroup = _builder.build()

    /**
     * ```
     * group_id is the unique ID of the group.
     * ```
     *
     * `uint64 group_id = 1 [json_name = "groupId"];`
     */
    public var groupId: kotlin.Long
      @JvmName("getGroupId")
      get() = _builder.groupId
      @JvmName("setGroupId")
      set(value) {
        _builder.groupId = value
      }
    /**
     * ```
     * group_id is the unique ID of the group.
     * ```
     *
     * `uint64 group_id = 1 [json_name = "groupId"];`
     */
    public fun clearGroupId() {
      _builder.clearGroupId()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.group.v1.Events.EventCreateGroup.copy(block: `cosmos.group.v1`.EventCreateGroupKt.Dsl.() -> kotlin.Unit): cosmos.group.v1.Events.EventCreateGroup =
  `cosmos.group.v1`.EventCreateGroupKt.Dsl._create(this.toBuilder()).apply { block() }._build()

