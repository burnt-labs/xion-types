// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/group/v1/events.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.group.v1;

@kotlin.jvm.JvmName("-initializeeventSubmitProposal")
public inline fun eventSubmitProposal(block: cosmos.group.v1.EventSubmitProposalKt.Dsl.() -> kotlin.Unit): cosmos.group.v1.Events.EventSubmitProposal =
  cosmos.group.v1.EventSubmitProposalKt.Dsl._create(cosmos.group.v1.Events.EventSubmitProposal.newBuilder()).apply { block() }._build()
/**
 * ```
 * EventSubmitProposal is an event emitted when a proposal is created.
 * ```
 *
 * Protobuf type `cosmos.group.v1.EventSubmitProposal`
 */
public object EventSubmitProposalKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.group.v1.Events.EventSubmitProposal.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.group.v1.Events.EventSubmitProposal.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.group.v1.Events.EventSubmitProposal = _builder.build()

    /**
     * ```
     * proposal_id is the unique ID of the proposal.
     * ```
     *
     * `uint64 proposal_id = 1 [json_name = "proposalId"];`
     */
    public var proposalId: kotlin.Long
      @JvmName("getProposalId")
      get() = _builder.proposalId
      @JvmName("setProposalId")
      set(value) {
        _builder.proposalId = value
      }
    /**
     * ```
     * proposal_id is the unique ID of the proposal.
     * ```
     *
     * `uint64 proposal_id = 1 [json_name = "proposalId"];`
     */
    public fun clearProposalId() {
      _builder.clearProposalId()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.group.v1.Events.EventSubmitProposal.copy(block: `cosmos.group.v1`.EventSubmitProposalKt.Dsl.() -> kotlin.Unit): cosmos.group.v1.Events.EventSubmitProposal =
  `cosmos.group.v1`.EventSubmitProposalKt.Dsl._create(this.toBuilder()).apply { block() }._build()

