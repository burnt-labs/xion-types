// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/group/v1/tx.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.group.v1;

@kotlin.jvm.JvmName("-initializemsgVote")
public inline fun msgVote(block: cosmos.group.v1.MsgVoteKt.Dsl.() -> kotlin.Unit): cosmos.group.v1.Tx.MsgVote =
  cosmos.group.v1.MsgVoteKt.Dsl._create(cosmos.group.v1.Tx.MsgVote.newBuilder()).apply { block() }._build()
/**
 * ```
 * MsgVote is the Msg/Vote request type.
 * ```
 *
 * Protobuf type `cosmos.group.v1.MsgVote`
 */
public object MsgVoteKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.group.v1.Tx.MsgVote.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.group.v1.Tx.MsgVote.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.group.v1.Tx.MsgVote = _builder.build()

    /**
     * ```
     * proposal is the unique ID of the proposal.
     * ```
     *
     * `uint64 proposal_id = 1 [json_name = "proposalId"];`
     */
    public var proposalId: kotlin.Long
      @JvmName("getProposalId")
      get() = _builder.proposalId
      @JvmName("setProposalId")
      set(value) {
        _builder.proposalId = value
      }
    /**
     * ```
     * proposal is the unique ID of the proposal.
     * ```
     *
     * `uint64 proposal_id = 1 [json_name = "proposalId"];`
     */
    public fun clearProposalId() {
      _builder.clearProposalId()
    }

    /**
     * ```
     * voter is the voter account address.
     * ```
     *
     * `string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];`
     */
    public var voter: kotlin.String
      @JvmName("getVoter")
      get() = _builder.voter
      @JvmName("setVoter")
      set(value) {
        _builder.voter = value
      }
    /**
     * ```
     * voter is the voter account address.
     * ```
     *
     * `string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];`
     */
    public fun clearVoter() {
      _builder.clearVoter()
    }

    /**
     * ```
     * option is the voter's choice on the proposal.
     * ```
     *
     * `.cosmos.group.v1.VoteOption option = 3 [json_name = "option"];`
     */
    public var option: cosmos.group.v1.Types.VoteOption
      @JvmName("getOption")
      get() = _builder.option
      @JvmName("setOption")
      set(value) {
        _builder.option = value
      }
    public var optionValue: kotlin.Int
      @JvmName("getOptionValue")
      get() = _builder.optionValue
      @JvmName("setOptionValue")
      set(value) {
        _builder.optionValue = value
      }
    /**
     * ```
     * option is the voter's choice on the proposal.
     * ```
     *
     * `.cosmos.group.v1.VoteOption option = 3 [json_name = "option"];`
     */
    public fun clearOption() {
      _builder.clearOption()
    }

    /**
     * ```
     * metadata is any arbitrary metadata attached to the vote.
     * ```
     *
     * `string metadata = 4 [json_name = "metadata"];`
     */
    public var metadata: kotlin.String
      @JvmName("getMetadata")
      get() = _builder.metadata
      @JvmName("setMetadata")
      set(value) {
        _builder.metadata = value
      }
    /**
     * ```
     * metadata is any arbitrary metadata attached to the vote.
     * ```
     *
     * `string metadata = 4 [json_name = "metadata"];`
     */
    public fun clearMetadata() {
      _builder.clearMetadata()
    }

    /**
     * ```
     * exec defines whether the proposal should be executed
     * immediately after voting or not.
     * ```
     *
     * `.cosmos.group.v1.Exec exec = 5 [json_name = "exec"];`
     */
    public var exec: cosmos.group.v1.Tx.Exec
      @JvmName("getExec")
      get() = _builder.exec
      @JvmName("setExec")
      set(value) {
        _builder.exec = value
      }
    public var execValue: kotlin.Int
      @JvmName("getExecValue")
      get() = _builder.execValue
      @JvmName("setExecValue")
      set(value) {
        _builder.execValue = value
      }
    /**
     * ```
     * exec defines whether the proposal should be executed
     * immediately after voting or not.
     * ```
     *
     * `.cosmos.group.v1.Exec exec = 5 [json_name = "exec"];`
     */
    public fun clearExec() {
      _builder.clearExec()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.group.v1.Tx.MsgVote.copy(block: `cosmos.group.v1`.MsgVoteKt.Dsl.() -> kotlin.Unit): cosmos.group.v1.Tx.MsgVote =
  `cosmos.group.v1`.MsgVoteKt.Dsl._create(this.toBuilder()).apply { block() }._build()

