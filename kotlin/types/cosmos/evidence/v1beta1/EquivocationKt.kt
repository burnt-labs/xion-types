// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/evidence/v1beta1/evidence.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.evidence.v1beta1;

@kotlin.jvm.JvmName("-initializeequivocation")
public inline fun equivocation(block: cosmos.evidence.v1beta1.EquivocationKt.Dsl.() -> kotlin.Unit): cosmos.evidence.v1beta1.Evidence.Equivocation =
  cosmos.evidence.v1beta1.EquivocationKt.Dsl._create(cosmos.evidence.v1beta1.Evidence.Equivocation.newBuilder()).apply { block() }._build()
/**
 * ```
 * Equivocation implements the Evidence interface and defines evidence of double
 * signing misbehavior.
 * ```
 *
 * Protobuf type `cosmos.evidence.v1beta1.Equivocation`
 */
public object EquivocationKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.evidence.v1beta1.Evidence.Equivocation.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.evidence.v1beta1.Evidence.Equivocation.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.evidence.v1beta1.Evidence.Equivocation = _builder.build()

    /**
     * ```
     * height is the equivocation height.
     * ```
     *
     * `int64 height = 1 [json_name = "height"];`
     */
    public var height: kotlin.Long
      @JvmName("getHeight")
      get() = _builder.height
      @JvmName("setHeight")
      set(value) {
        _builder.height = value
      }
    /**
     * ```
     * height is the equivocation height.
     * ```
     *
     * `int64 height = 1 [json_name = "height"];`
     */
    public fun clearHeight() {
      _builder.clearHeight()
    }

    /**
     * ```
     * time is the equivocation time.
     * ```
     *
     * `.google.protobuf.Timestamp time = 2 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];`
     */
    public var time: com.google.protobuf.Timestamp
      @JvmName("getTime")
      get() = _builder.time
      @JvmName("setTime")
      set(value) {
        _builder.time = value
      }
    /**
     * ```
     * time is the equivocation time.
     * ```
     *
     * `.google.protobuf.Timestamp time = 2 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];`
     */
    public fun clearTime() {
      _builder.clearTime()
    }
    /**
     * ```
     * time is the equivocation time.
     * ```
     *
     * `.google.protobuf.Timestamp time = 2 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];`
     * @return Whether the time field is set.
     */
    public fun hasTime(): kotlin.Boolean {
      return _builder.hasTime()
    }

    public val EquivocationKt.Dsl.timeOrNull: com.google.protobuf.Timestamp?
      get() = _builder.timeOrNull

    /**
     * ```
     * power is the equivocation validator power.
     * ```
     *
     * `int64 power = 3 [json_name = "power"];`
     */
    public var power: kotlin.Long
      @JvmName("getPower")
      get() = _builder.power
      @JvmName("setPower")
      set(value) {
        _builder.power = value
      }
    /**
     * ```
     * power is the equivocation validator power.
     * ```
     *
     * `int64 power = 3 [json_name = "power"];`
     */
    public fun clearPower() {
      _builder.clearPower()
    }

    /**
     * ```
     * consensus_address is the equivocation validator consensus address.
     * ```
     *
     * `string consensus_address = 4 [json_name = "consensusAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];`
     */
    public var consensusAddress: kotlin.String
      @JvmName("getConsensusAddress")
      get() = _builder.consensusAddress
      @JvmName("setConsensusAddress")
      set(value) {
        _builder.consensusAddress = value
      }
    /**
     * ```
     * consensus_address is the equivocation validator consensus address.
     * ```
     *
     * `string consensus_address = 4 [json_name = "consensusAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];`
     */
    public fun clearConsensusAddress() {
      _builder.clearConsensusAddress()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.evidence.v1beta1.Evidence.Equivocation.copy(block: `cosmos.evidence.v1beta1`.EquivocationKt.Dsl.() -> kotlin.Unit): cosmos.evidence.v1beta1.Evidence.Equivocation =
  `cosmos.evidence.v1beta1`.EquivocationKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.evidence.v1beta1.Evidence.EquivocationOrBuilder.timeOrNull: com.google.protobuf.Timestamp?
  get() = if (hasTime()) getTime() else null

