// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/nft/v1beta1/nft.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.nft.v1beta1;

@kotlin.jvm.JvmName("-initializenFT")
public inline fun nFT(block: cosmos.nft.v1beta1.NFTKt.Dsl.() -> kotlin.Unit): cosmos.nft.v1beta1.Nft.NFT =
  cosmos.nft.v1beta1.NFTKt.Dsl._create(cosmos.nft.v1beta1.Nft.NFT.newBuilder()).apply { block() }._build()
/**
 * ```
 * NFT defines the NFT.
 * ```
 *
 * Protobuf type `cosmos.nft.v1beta1.NFT`
 */
public object NFTKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.nft.v1beta1.Nft.NFT.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.nft.v1beta1.Nft.NFT.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.nft.v1beta1.Nft.NFT = _builder.build()

    /**
     * ```
     * class_id associated with the NFT, similar to the contract address of ERC721
     * ```
     *
     * `string class_id = 1 [json_name = "classId"];`
     */
    public var classId: kotlin.String
      @JvmName("getClassId")
      get() = _builder.classId
      @JvmName("setClassId")
      set(value) {
        _builder.classId = value
      }
    /**
     * ```
     * class_id associated with the NFT, similar to the contract address of ERC721
     * ```
     *
     * `string class_id = 1 [json_name = "classId"];`
     */
    public fun clearClassId() {
      _builder.clearClassId()
    }

    /**
     * ```
     * id is a unique identifier of the NFT
     * ```
     *
     * `string id = 2 [json_name = "id"];`
     */
    public var id: kotlin.String
      @JvmName("getId")
      get() = _builder.id
      @JvmName("setId")
      set(value) {
        _builder.id = value
      }
    /**
     * ```
     * id is a unique identifier of the NFT
     * ```
     *
     * `string id = 2 [json_name = "id"];`
     */
    public fun clearId() {
      _builder.clearId()
    }

    /**
     * ```
     * uri for the NFT metadata stored off chain
     * ```
     *
     * `string uri = 3 [json_name = "uri"];`
     */
    public var uri: kotlin.String
      @JvmName("getUri")
      get() = _builder.uri
      @JvmName("setUri")
      set(value) {
        _builder.uri = value
      }
    /**
     * ```
     * uri for the NFT metadata stored off chain
     * ```
     *
     * `string uri = 3 [json_name = "uri"];`
     */
    public fun clearUri() {
      _builder.clearUri()
    }

    /**
     * ```
     * uri_hash is a hash of the document pointed by uri
     * ```
     *
     * `string uri_hash = 4 [json_name = "uriHash"];`
     */
    public var uriHash: kotlin.String
      @JvmName("getUriHash")
      get() = _builder.uriHash
      @JvmName("setUriHash")
      set(value) {
        _builder.uriHash = value
      }
    /**
     * ```
     * uri_hash is a hash of the document pointed by uri
     * ```
     *
     * `string uri_hash = 4 [json_name = "uriHash"];`
     */
    public fun clearUriHash() {
      _builder.clearUriHash()
    }

    /**
     * ```
     * data is an app specific data of the NFT. Optional
     * ```
     *
     * `.google.protobuf.Any data = 10 [json_name = "data"];`
     */
    public var data: com.google.protobuf.Any
      @JvmName("getData")
      get() = _builder.data
      @JvmName("setData")
      set(value) {
        _builder.data = value
      }
    /**
     * ```
     * data is an app specific data of the NFT. Optional
     * ```
     *
     * `.google.protobuf.Any data = 10 [json_name = "data"];`
     */
    public fun clearData() {
      _builder.clearData()
    }
    /**
     * ```
     * data is an app specific data of the NFT. Optional
     * ```
     *
     * `.google.protobuf.Any data = 10 [json_name = "data"];`
     * @return Whether the data field is set.
     */
    public fun hasData(): kotlin.Boolean {
      return _builder.hasData()
    }

    public val NFTKt.Dsl.dataOrNull: com.google.protobuf.Any?
      get() = _builder.dataOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.nft.v1beta1.Nft.NFT.copy(block: `cosmos.nft.v1beta1`.NFTKt.Dsl.() -> kotlin.Unit): cosmos.nft.v1beta1.Nft.NFT =
  `cosmos.nft.v1beta1`.NFTKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.nft.v1beta1.Nft.NFTOrBuilder.dataOrNull: com.google.protobuf.Any?
  get() = if (hasData()) getData() else null

