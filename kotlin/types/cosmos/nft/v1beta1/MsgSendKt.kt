// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/nft/v1beta1/tx.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.nft.v1beta1;

@kotlin.jvm.JvmName("-initializemsgSend")
public inline fun msgSend(block: cosmos.nft.v1beta1.MsgSendKt.Dsl.() -> kotlin.Unit): cosmos.nft.v1beta1.Tx.MsgSend =
  cosmos.nft.v1beta1.MsgSendKt.Dsl._create(cosmos.nft.v1beta1.Tx.MsgSend.newBuilder()).apply { block() }._build()
/**
 * ```
 * MsgSend represents a message to send a nft from one account to another account.
 * ```
 *
 * Protobuf type `cosmos.nft.v1beta1.MsgSend`
 */
public object MsgSendKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.nft.v1beta1.Tx.MsgSend.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.nft.v1beta1.Tx.MsgSend.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.nft.v1beta1.Tx.MsgSend = _builder.build()

    /**
     * ```
     * class_id defines the unique identifier of the nft classification, similar to the contract address of ERC721
     * ```
     *
     * `string class_id = 1 [json_name = "classId"];`
     */
    public var classId: kotlin.String
      @JvmName("getClassId")
      get() = _builder.classId
      @JvmName("setClassId")
      set(value) {
        _builder.classId = value
      }
    /**
     * ```
     * class_id defines the unique identifier of the nft classification, similar to the contract address of ERC721
     * ```
     *
     * `string class_id = 1 [json_name = "classId"];`
     */
    public fun clearClassId() {
      _builder.clearClassId()
    }

    /**
     * ```
     * id defines the unique identification of nft
     * ```
     *
     * `string id = 2 [json_name = "id"];`
     */
    public var id: kotlin.String
      @JvmName("getId")
      get() = _builder.id
      @JvmName("setId")
      set(value) {
        _builder.id = value
      }
    /**
     * ```
     * id defines the unique identification of nft
     * ```
     *
     * `string id = 2 [json_name = "id"];`
     */
    public fun clearId() {
      _builder.clearId()
    }

    /**
     * ```
     * sender is the address of the owner of nft
     * ```
     *
     * `string sender = 3 [json_name = "sender", (.cosmos_proto.scalar) = "cosmos.AddressString"];`
     */
    public var sender: kotlin.String
      @JvmName("getSender")
      get() = _builder.sender
      @JvmName("setSender")
      set(value) {
        _builder.sender = value
      }
    /**
     * ```
     * sender is the address of the owner of nft
     * ```
     *
     * `string sender = 3 [json_name = "sender", (.cosmos_proto.scalar) = "cosmos.AddressString"];`
     */
    public fun clearSender() {
      _builder.clearSender()
    }

    /**
     * ```
     * receiver is the receiver address of nft
     * ```
     *
     * `string receiver = 4 [json_name = "receiver", (.cosmos_proto.scalar) = "cosmos.AddressString"];`
     */
    public var receiver: kotlin.String
      @JvmName("getReceiver")
      get() = _builder.receiver
      @JvmName("setReceiver")
      set(value) {
        _builder.receiver = value
      }
    /**
     * ```
     * receiver is the receiver address of nft
     * ```
     *
     * `string receiver = 4 [json_name = "receiver", (.cosmos_proto.scalar) = "cosmos.AddressString"];`
     */
    public fun clearReceiver() {
      _builder.clearReceiver()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.nft.v1beta1.Tx.MsgSend.copy(block: `cosmos.nft.v1beta1`.MsgSendKt.Dsl.() -> kotlin.Unit): cosmos.nft.v1beta1.Tx.MsgSend =
  `cosmos.nft.v1beta1`.MsgSendKt.Dsl._create(this.toBuilder()).apply { block() }._build()

