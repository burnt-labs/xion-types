// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/distribution/v1beta1/query.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.distribution.v1beta1;

@kotlin.jvm.JvmName("-initializequeryValidatorCommissionResponse")
public inline fun queryValidatorCommissionResponse(block: cosmos.distribution.v1beta1.QueryValidatorCommissionResponseKt.Dsl.() -> kotlin.Unit): cosmos.distribution.v1beta1.QueryOuterClass.QueryValidatorCommissionResponse =
  cosmos.distribution.v1beta1.QueryValidatorCommissionResponseKt.Dsl._create(cosmos.distribution.v1beta1.QueryOuterClass.QueryValidatorCommissionResponse.newBuilder()).apply { block() }._build()
/**
 * ```
 * QueryValidatorCommissionResponse is the response type for the
 * Query/ValidatorCommission RPC method
 * ```
 *
 * Protobuf type `cosmos.distribution.v1beta1.QueryValidatorCommissionResponse`
 */
public object QueryValidatorCommissionResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.distribution.v1beta1.QueryOuterClass.QueryValidatorCommissionResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.distribution.v1beta1.QueryOuterClass.QueryValidatorCommissionResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.distribution.v1beta1.QueryOuterClass.QueryValidatorCommissionResponse = _builder.build()

    /**
     * ```
     * commission defines the commission the validator received.
     * ```
     *
     * `.cosmos.distribution.v1beta1.ValidatorAccumulatedCommission commission = 1 [json_name = "commission", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];`
     */
    public var commission: cosmos.distribution.v1beta1.Distribution.ValidatorAccumulatedCommission
      @JvmName("getCommission")
      get() = _builder.commission
      @JvmName("setCommission")
      set(value) {
        _builder.commission = value
      }
    /**
     * ```
     * commission defines the commission the validator received.
     * ```
     *
     * `.cosmos.distribution.v1beta1.ValidatorAccumulatedCommission commission = 1 [json_name = "commission", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];`
     */
    public fun clearCommission() {
      _builder.clearCommission()
    }
    /**
     * ```
     * commission defines the commission the validator received.
     * ```
     *
     * `.cosmos.distribution.v1beta1.ValidatorAccumulatedCommission commission = 1 [json_name = "commission", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];`
     * @return Whether the commission field is set.
     */
    public fun hasCommission(): kotlin.Boolean {
      return _builder.hasCommission()
    }

    public val QueryValidatorCommissionResponseKt.Dsl.commissionOrNull: cosmos.distribution.v1beta1.Distribution.ValidatorAccumulatedCommission?
      get() = _builder.commissionOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.distribution.v1beta1.QueryOuterClass.QueryValidatorCommissionResponse.copy(block: `cosmos.distribution.v1beta1`.QueryValidatorCommissionResponseKt.Dsl.() -> kotlin.Unit): cosmos.distribution.v1beta1.QueryOuterClass.QueryValidatorCommissionResponse =
  `cosmos.distribution.v1beta1`.QueryValidatorCommissionResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.distribution.v1beta1.QueryOuterClass.QueryValidatorCommissionResponseOrBuilder.commissionOrNull: cosmos.distribution.v1beta1.Distribution.ValidatorAccumulatedCommission?
  get() = if (hasCommission()) getCommission() else null

