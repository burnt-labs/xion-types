// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/vesting/v1beta1/tx.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.vesting.v1beta1;

@kotlin.jvm.JvmName("-initializemsgCreatePermanentLockedAccountResponse")
public inline fun msgCreatePermanentLockedAccountResponse(block: cosmos.vesting.v1beta1.MsgCreatePermanentLockedAccountResponseKt.Dsl.() -> kotlin.Unit): cosmos.vesting.v1beta1.Tx.MsgCreatePermanentLockedAccountResponse =
  cosmos.vesting.v1beta1.MsgCreatePermanentLockedAccountResponseKt.Dsl._create(cosmos.vesting.v1beta1.Tx.MsgCreatePermanentLockedAccountResponse.newBuilder()).apply { block() }._build()
/**
 * ```
 * MsgCreatePermanentLockedAccountResponse defines the Msg/CreatePermanentLockedAccount response type.
 * ```
 *
 * Protobuf type `cosmos.vesting.v1beta1.MsgCreatePermanentLockedAccountResponse`
 */
public object MsgCreatePermanentLockedAccountResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.vesting.v1beta1.Tx.MsgCreatePermanentLockedAccountResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.vesting.v1beta1.Tx.MsgCreatePermanentLockedAccountResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.vesting.v1beta1.Tx.MsgCreatePermanentLockedAccountResponse = _builder.build()
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.vesting.v1beta1.Tx.MsgCreatePermanentLockedAccountResponse.copy(block: `cosmos.vesting.v1beta1`.MsgCreatePermanentLockedAccountResponseKt.Dsl.() -> kotlin.Unit): cosmos.vesting.v1beta1.Tx.MsgCreatePermanentLockedAccountResponse =
  `cosmos.vesting.v1beta1`.MsgCreatePermanentLockedAccountResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

