// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/autocli/v1/options.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.autocli.v1;

@kotlin.jvm.JvmName("-initializeflagOptions")
public inline fun flagOptions(block: cosmos.autocli.v1.FlagOptionsKt.Dsl.() -> kotlin.Unit): cosmos.autocli.v1.Options.FlagOptions =
  cosmos.autocli.v1.FlagOptionsKt.Dsl._create(cosmos.autocli.v1.Options.FlagOptions.newBuilder()).apply { block() }._build()
/**
 * ```
 * FlagOptions are options for flags generated from rpc request fields.
 * By default, all request fields are configured as flags based on the
 * kebab-case name of the field. Fields can be turned into positional arguments
 * instead by using RpcCommandOptions.positional_args.
 * ```
 *
 * Protobuf type `cosmos.autocli.v1.FlagOptions`
 */
public object FlagOptionsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.autocli.v1.Options.FlagOptions.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.autocli.v1.Options.FlagOptions.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.autocli.v1.Options.FlagOptions = _builder.build()

    /**
     * ```
     * name is an alternate name to use for the field flag.
     * ```
     *
     * `string name = 1 [json_name = "name"];`
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.name
      @JvmName("setName")
      set(value) {
        _builder.name = value
      }
    /**
     * ```
     * name is an alternate name to use for the field flag.
     * ```
     *
     * `string name = 1 [json_name = "name"];`
     */
    public fun clearName() {
      _builder.clearName()
    }

    /**
     * ```
     * shorthand is a one-letter abbreviated flag.
     * ```
     *
     * `string shorthand = 2 [json_name = "shorthand"];`
     */
    public var shorthand: kotlin.String
      @JvmName("getShorthand")
      get() = _builder.shorthand
      @JvmName("setShorthand")
      set(value) {
        _builder.shorthand = value
      }
    /**
     * ```
     * shorthand is a one-letter abbreviated flag.
     * ```
     *
     * `string shorthand = 2 [json_name = "shorthand"];`
     */
    public fun clearShorthand() {
      _builder.clearShorthand()
    }

    /**
     * ```
     * usage is the help message.
     * ```
     *
     * `string usage = 3 [json_name = "usage"];`
     */
    public var usage: kotlin.String
      @JvmName("getUsage")
      get() = _builder.usage
      @JvmName("setUsage")
      set(value) {
        _builder.usage = value
      }
    /**
     * ```
     * usage is the help message.
     * ```
     *
     * `string usage = 3 [json_name = "usage"];`
     */
    public fun clearUsage() {
      _builder.clearUsage()
    }

    /**
     * ```
     * default_value is the default value as text.
     * ```
     *
     * `string default_value = 4 [json_name = "defaultValue"];`
     */
    public var defaultValue: kotlin.String
      @JvmName("getDefaultValue")
      get() = _builder.defaultValue
      @JvmName("setDefaultValue")
      set(value) {
        _builder.defaultValue = value
      }
    /**
     * ```
     * default_value is the default value as text.
     * ```
     *
     * `string default_value = 4 [json_name = "defaultValue"];`
     */
    public fun clearDefaultValue() {
      _builder.clearDefaultValue()
    }

    /**
     * ```
     * deprecated is the usage text to show if this flag is deprecated.
     * ```
     *
     * `string deprecated = 6 [json_name = "deprecated"];`
     */
    public var deprecated: kotlin.String
      @JvmName("getDeprecated")
      get() = _builder.deprecated
      @JvmName("setDeprecated")
      set(value) {
        _builder.deprecated = value
      }
    /**
     * ```
     * deprecated is the usage text to show if this flag is deprecated.
     * ```
     *
     * `string deprecated = 6 [json_name = "deprecated"];`
     */
    public fun clearDeprecated() {
      _builder.clearDeprecated()
    }

    /**
     * ```
     * shorthand_deprecated is the usage text to show if the shorthand of this flag is deprecated.
     * ```
     *
     * `string shorthand_deprecated = 7 [json_name = "shorthandDeprecated"];`
     */
    public var shorthandDeprecated: kotlin.String
      @JvmName("getShorthandDeprecated")
      get() = _builder.shorthandDeprecated
      @JvmName("setShorthandDeprecated")
      set(value) {
        _builder.shorthandDeprecated = value
      }
    /**
     * ```
     * shorthand_deprecated is the usage text to show if the shorthand of this flag is deprecated.
     * ```
     *
     * `string shorthand_deprecated = 7 [json_name = "shorthandDeprecated"];`
     */
    public fun clearShorthandDeprecated() {
      _builder.clearShorthandDeprecated()
    }

    /**
     * ```
     * hidden hides the flag from help/usage text
     * ```
     *
     * `bool hidden = 8 [json_name = "hidden"];`
     */
    public var hidden: kotlin.Boolean
      @JvmName("getHidden")
      get() = _builder.hidden
      @JvmName("setHidden")
      set(value) {
        _builder.hidden = value
      }
    /**
     * ```
     * hidden hides the flag from help/usage text
     * ```
     *
     * `bool hidden = 8 [json_name = "hidden"];`
     */
    public fun clearHidden() {
      _builder.clearHidden()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.autocli.v1.Options.FlagOptions.copy(block: `cosmos.autocli.v1`.FlagOptionsKt.Dsl.() -> kotlin.Unit): cosmos.autocli.v1.Options.FlagOptions =
  `cosmos.autocli.v1`.FlagOptionsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

