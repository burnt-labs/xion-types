// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/autocli/v1/options.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.autocli.v1;

@kotlin.jvm.JvmName("-initializemoduleOptions")
public inline fun moduleOptions(block: cosmos.autocli.v1.ModuleOptionsKt.Dsl.() -> kotlin.Unit): cosmos.autocli.v1.Options.ModuleOptions =
  cosmos.autocli.v1.ModuleOptionsKt.Dsl._create(cosmos.autocli.v1.Options.ModuleOptions.newBuilder()).apply { block() }._build()
/**
 * ```
 * ModuleOptions describes the CLI options for a Cosmos SDK module.
 * ```
 *
 * Protobuf type `cosmos.autocli.v1.ModuleOptions`
 */
public object ModuleOptionsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.autocli.v1.Options.ModuleOptions.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.autocli.v1.Options.ModuleOptions.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.autocli.v1.Options.ModuleOptions = _builder.build()

    /**
     * ```
     * tx describes the tx commands for the module.
     * ```
     *
     * `.cosmos.autocli.v1.ServiceCommandDescriptor tx = 1 [json_name = "tx"];`
     */
    public var tx: cosmos.autocli.v1.Options.ServiceCommandDescriptor
      @JvmName("getTx")
      get() = _builder.tx
      @JvmName("setTx")
      set(value) {
        _builder.tx = value
      }
    /**
     * ```
     * tx describes the tx commands for the module.
     * ```
     *
     * `.cosmos.autocli.v1.ServiceCommandDescriptor tx = 1 [json_name = "tx"];`
     */
    public fun clearTx() {
      _builder.clearTx()
    }
    /**
     * ```
     * tx describes the tx commands for the module.
     * ```
     *
     * `.cosmos.autocli.v1.ServiceCommandDescriptor tx = 1 [json_name = "tx"];`
     * @return Whether the tx field is set.
     */
    public fun hasTx(): kotlin.Boolean {
      return _builder.hasTx()
    }

    public val ModuleOptionsKt.Dsl.txOrNull: cosmos.autocli.v1.Options.ServiceCommandDescriptor?
      get() = _builder.txOrNull

    /**
     * ```
     * query describes the queries commands for the module.
     * ```
     *
     * `.cosmos.autocli.v1.ServiceCommandDescriptor query = 2 [json_name = "query"];`
     */
    public var query: cosmos.autocli.v1.Options.ServiceCommandDescriptor
      @JvmName("getQuery")
      get() = _builder.query
      @JvmName("setQuery")
      set(value) {
        _builder.query = value
      }
    /**
     * ```
     * query describes the queries commands for the module.
     * ```
     *
     * `.cosmos.autocli.v1.ServiceCommandDescriptor query = 2 [json_name = "query"];`
     */
    public fun clearQuery() {
      _builder.clearQuery()
    }
    /**
     * ```
     * query describes the queries commands for the module.
     * ```
     *
     * `.cosmos.autocli.v1.ServiceCommandDescriptor query = 2 [json_name = "query"];`
     * @return Whether the query field is set.
     */
    public fun hasQuery(): kotlin.Boolean {
      return _builder.hasQuery()
    }

    public val ModuleOptionsKt.Dsl.queryOrNull: cosmos.autocli.v1.Options.ServiceCommandDescriptor?
      get() = _builder.queryOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.autocli.v1.Options.ModuleOptions.copy(block: `cosmos.autocli.v1`.ModuleOptionsKt.Dsl.() -> kotlin.Unit): cosmos.autocli.v1.Options.ModuleOptions =
  `cosmos.autocli.v1`.ModuleOptionsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.autocli.v1.Options.ModuleOptionsOrBuilder.txOrNull: cosmos.autocli.v1.Options.ServiceCommandDescriptor?
  get() = if (hasTx()) getTx() else null

public val cosmos.autocli.v1.Options.ModuleOptionsOrBuilder.queryOrNull: cosmos.autocli.v1.Options.ServiceCommandDescriptor?
  get() = if (hasQuery()) getQuery() else null

