// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/autocli/v1/options.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.autocli.v1;

@kotlin.jvm.JvmName("-initializepositionalArgDescriptor")
public inline fun positionalArgDescriptor(block: cosmos.autocli.v1.PositionalArgDescriptorKt.Dsl.() -> kotlin.Unit): cosmos.autocli.v1.Options.PositionalArgDescriptor =
  cosmos.autocli.v1.PositionalArgDescriptorKt.Dsl._create(cosmos.autocli.v1.Options.PositionalArgDescriptor.newBuilder()).apply { block() }._build()
/**
 * ```
 * PositionalArgDescriptor describes a positional argument.
 * ```
 *
 * Protobuf type `cosmos.autocli.v1.PositionalArgDescriptor`
 */
public object PositionalArgDescriptorKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.autocli.v1.Options.PositionalArgDescriptor.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.autocli.v1.Options.PositionalArgDescriptor.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.autocli.v1.Options.PositionalArgDescriptor = _builder.build()

    /**
     * ```
     * proto_field specifies the proto field to use as the positional arg. Any
     * fields used as positional args will not have a flag generated.
     * ```
     *
     * `string proto_field = 1 [json_name = "protoField"];`
     */
    public var protoField: kotlin.String
      @JvmName("getProtoField")
      get() = _builder.protoField
      @JvmName("setProtoField")
      set(value) {
        _builder.protoField = value
      }
    /**
     * ```
     * proto_field specifies the proto field to use as the positional arg. Any
     * fields used as positional args will not have a flag generated.
     * ```
     *
     * `string proto_field = 1 [json_name = "protoField"];`
     */
    public fun clearProtoField() {
      _builder.clearProtoField()
    }

    /**
     * ```
     * varargs makes a positional parameter a varargs parameter. This can only be
     * applied to last positional parameter and the proto_field must a repeated
     * field. Note: It is mutually exclusive with optional.
     * ```
     *
     * `bool varargs = 2 [json_name = "varargs"];`
     */
    public var varargs: kotlin.Boolean
      @JvmName("getVarargs")
      get() = _builder.varargs
      @JvmName("setVarargs")
      set(value) {
        _builder.varargs = value
      }
    /**
     * ```
     * varargs makes a positional parameter a varargs parameter. This can only be
     * applied to last positional parameter and the proto_field must a repeated
     * field. Note: It is mutually exclusive with optional.
     * ```
     *
     * `bool varargs = 2 [json_name = "varargs"];`
     */
    public fun clearVarargs() {
      _builder.clearVarargs()
    }

    /**
     * ```
     * optional makes the last positional parameter optional.
     * Note: It is mutually exclusive with varargs.
     * ```
     *
     * `bool optional = 3 [json_name = "optional"];`
     */
    public var optional: kotlin.Boolean
      @JvmName("getOptional")
      get() = _builder.optional
      @JvmName("setOptional")
      set(value) {
        _builder.optional = value
      }
    /**
     * ```
     * optional makes the last positional parameter optional.
     * Note: It is mutually exclusive with varargs.
     * ```
     *
     * `bool optional = 3 [json_name = "optional"];`
     */
    public fun clearOptional() {
      _builder.clearOptional()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.autocli.v1.Options.PositionalArgDescriptor.copy(block: `cosmos.autocli.v1`.PositionalArgDescriptorKt.Dsl.() -> kotlin.Unit): cosmos.autocli.v1.Options.PositionalArgDescriptor =
  `cosmos.autocli.v1`.PositionalArgDescriptorKt.Dsl._create(this.toBuilder()).apply { block() }._build()

