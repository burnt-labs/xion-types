// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/app/v1alpha1/module.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.app.v1alpha1;

@kotlin.jvm.JvmName("-initializemoduleDescriptor")
public inline fun moduleDescriptor(block: cosmos.app.v1alpha1.ModuleDescriptorKt.Dsl.() -> kotlin.Unit): cosmos.app.v1alpha1.Module.ModuleDescriptor =
  cosmos.app.v1alpha1.ModuleDescriptorKt.Dsl._create(cosmos.app.v1alpha1.Module.ModuleDescriptor.newBuilder()).apply { block() }._build()
/**
 * ```
 * ModuleDescriptor describes an app module.
 * ```
 *
 * Protobuf type `cosmos.app.v1alpha1.ModuleDescriptor`
 */
public object ModuleDescriptorKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.app.v1alpha1.Module.ModuleDescriptor.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.app.v1alpha1.Module.ModuleDescriptor.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.app.v1alpha1.Module.ModuleDescriptor = _builder.build()

    /**
     * ```
     * go_import names the package that should be imported by an app to load the
     * module in the runtime module registry. It is required to make debugging
     * of configuration errors easier for users.
     * ```
     *
     * `string go_import = 1 [json_name = "goImport"];`
     */
    public var goImport: kotlin.String
      @JvmName("getGoImport")
      get() = _builder.goImport
      @JvmName("setGoImport")
      set(value) {
        _builder.goImport = value
      }
    /**
     * ```
     * go_import names the package that should be imported by an app to load the
     * module in the runtime module registry. It is required to make debugging
     * of configuration errors easier for users.
     * ```
     *
     * `string go_import = 1 [json_name = "goImport"];`
     */
    public fun clearGoImport() {
      _builder.clearGoImport()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class UsePackageProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * use_package refers to a protobuf package that this module
     * uses and exposes to the world. In an app, only one module should "use"
     * or own a single protobuf package. It is assumed that the module uses
     * all of the .proto files in a single package.
     * ```
     *
     * `repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];`
     */
     public val usePackage: com.google.protobuf.kotlin.DslList<cosmos.app.v1alpha1.Module.PackageReference, UsePackageProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.usePackageList
      )
    /**
     * ```
     * use_package refers to a protobuf package that this module
     * uses and exposes to the world. In an app, only one module should "use"
     * or own a single protobuf package. It is assumed that the module uses
     * all of the .proto files in a single package.
     * ```
     *
     * `repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];`
     * @param value The usePackage to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addUsePackage")
    public fun com.google.protobuf.kotlin.DslList<cosmos.app.v1alpha1.Module.PackageReference, UsePackageProxy>.add(value: cosmos.app.v1alpha1.Module.PackageReference) {
      _builder.addUsePackage(value)
    }
    /**
     * ```
     * use_package refers to a protobuf package that this module
     * uses and exposes to the world. In an app, only one module should "use"
     * or own a single protobuf package. It is assumed that the module uses
     * all of the .proto files in a single package.
     * ```
     *
     * `repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];`
     * @param value The usePackage to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignUsePackage")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<cosmos.app.v1alpha1.Module.PackageReference, UsePackageProxy>.plusAssign(value: cosmos.app.v1alpha1.Module.PackageReference) {
      add(value)
    }
    /**
     * ```
     * use_package refers to a protobuf package that this module
     * uses and exposes to the world. In an app, only one module should "use"
     * or own a single protobuf package. It is assumed that the module uses
     * all of the .proto files in a single package.
     * ```
     *
     * `repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];`
     * @param values The usePackage to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllUsePackage")
    public fun com.google.protobuf.kotlin.DslList<cosmos.app.v1alpha1.Module.PackageReference, UsePackageProxy>.addAll(values: kotlin.collections.Iterable<cosmos.app.v1alpha1.Module.PackageReference>) {
      _builder.addAllUsePackage(values)
    }
    /**
     * ```
     * use_package refers to a protobuf package that this module
     * uses and exposes to the world. In an app, only one module should "use"
     * or own a single protobuf package. It is assumed that the module uses
     * all of the .proto files in a single package.
     * ```
     *
     * `repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];`
     * @param values The usePackage to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllUsePackage")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<cosmos.app.v1alpha1.Module.PackageReference, UsePackageProxy>.plusAssign(values: kotlin.collections.Iterable<cosmos.app.v1alpha1.Module.PackageReference>) {
      addAll(values)
    }
    /**
     * ```
     * use_package refers to a protobuf package that this module
     * uses and exposes to the world. In an app, only one module should "use"
     * or own a single protobuf package. It is assumed that the module uses
     * all of the .proto files in a single package.
     * ```
     *
     * `repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];`
     * @param index The index to set the value at.
     * @param value The usePackage to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setUsePackage")
    public operator fun com.google.protobuf.kotlin.DslList<cosmos.app.v1alpha1.Module.PackageReference, UsePackageProxy>.set(index: kotlin.Int, value: cosmos.app.v1alpha1.Module.PackageReference) {
      _builder.setUsePackage(index, value)
    }
    /**
     * ```
     * use_package refers to a protobuf package that this module
     * uses and exposes to the world. In an app, only one module should "use"
     * or own a single protobuf package. It is assumed that the module uses
     * all of the .proto files in a single package.
     * ```
     *
     * `repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearUsePackage")
    public fun com.google.protobuf.kotlin.DslList<cosmos.app.v1alpha1.Module.PackageReference, UsePackageProxy>.clear() {
      _builder.clearUsePackage()
    }


    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class CanMigrateFromProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * can_migrate_from defines which module versions this module can migrate
     * state from. The framework will check that one module version is able to
     * migrate from a previous module version before attempting to update its
     * config. It is assumed that modules can transitively migrate from earlier
     * versions. For instance if v3 declares it can migrate from v2, and v2
     * declares it can migrate from v1, the framework knows how to migrate
     * from v1 to v3, assuming all 3 module versions are registered at runtime.
     * ```
     *
     * `repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];`
     */
     public val canMigrateFrom: com.google.protobuf.kotlin.DslList<cosmos.app.v1alpha1.Module.MigrateFromInfo, CanMigrateFromProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.canMigrateFromList
      )
    /**
     * ```
     * can_migrate_from defines which module versions this module can migrate
     * state from. The framework will check that one module version is able to
     * migrate from a previous module version before attempting to update its
     * config. It is assumed that modules can transitively migrate from earlier
     * versions. For instance if v3 declares it can migrate from v2, and v2
     * declares it can migrate from v1, the framework knows how to migrate
     * from v1 to v3, assuming all 3 module versions are registered at runtime.
     * ```
     *
     * `repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];`
     * @param value The canMigrateFrom to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addCanMigrateFrom")
    public fun com.google.protobuf.kotlin.DslList<cosmos.app.v1alpha1.Module.MigrateFromInfo, CanMigrateFromProxy>.add(value: cosmos.app.v1alpha1.Module.MigrateFromInfo) {
      _builder.addCanMigrateFrom(value)
    }
    /**
     * ```
     * can_migrate_from defines which module versions this module can migrate
     * state from. The framework will check that one module version is able to
     * migrate from a previous module version before attempting to update its
     * config. It is assumed that modules can transitively migrate from earlier
     * versions. For instance if v3 declares it can migrate from v2, and v2
     * declares it can migrate from v1, the framework knows how to migrate
     * from v1 to v3, assuming all 3 module versions are registered at runtime.
     * ```
     *
     * `repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];`
     * @param value The canMigrateFrom to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignCanMigrateFrom")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<cosmos.app.v1alpha1.Module.MigrateFromInfo, CanMigrateFromProxy>.plusAssign(value: cosmos.app.v1alpha1.Module.MigrateFromInfo) {
      add(value)
    }
    /**
     * ```
     * can_migrate_from defines which module versions this module can migrate
     * state from. The framework will check that one module version is able to
     * migrate from a previous module version before attempting to update its
     * config. It is assumed that modules can transitively migrate from earlier
     * versions. For instance if v3 declares it can migrate from v2, and v2
     * declares it can migrate from v1, the framework knows how to migrate
     * from v1 to v3, assuming all 3 module versions are registered at runtime.
     * ```
     *
     * `repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];`
     * @param values The canMigrateFrom to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllCanMigrateFrom")
    public fun com.google.protobuf.kotlin.DslList<cosmos.app.v1alpha1.Module.MigrateFromInfo, CanMigrateFromProxy>.addAll(values: kotlin.collections.Iterable<cosmos.app.v1alpha1.Module.MigrateFromInfo>) {
      _builder.addAllCanMigrateFrom(values)
    }
    /**
     * ```
     * can_migrate_from defines which module versions this module can migrate
     * state from. The framework will check that one module version is able to
     * migrate from a previous module version before attempting to update its
     * config. It is assumed that modules can transitively migrate from earlier
     * versions. For instance if v3 declares it can migrate from v2, and v2
     * declares it can migrate from v1, the framework knows how to migrate
     * from v1 to v3, assuming all 3 module versions are registered at runtime.
     * ```
     *
     * `repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];`
     * @param values The canMigrateFrom to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllCanMigrateFrom")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<cosmos.app.v1alpha1.Module.MigrateFromInfo, CanMigrateFromProxy>.plusAssign(values: kotlin.collections.Iterable<cosmos.app.v1alpha1.Module.MigrateFromInfo>) {
      addAll(values)
    }
    /**
     * ```
     * can_migrate_from defines which module versions this module can migrate
     * state from. The framework will check that one module version is able to
     * migrate from a previous module version before attempting to update its
     * config. It is assumed that modules can transitively migrate from earlier
     * versions. For instance if v3 declares it can migrate from v2, and v2
     * declares it can migrate from v1, the framework knows how to migrate
     * from v1 to v3, assuming all 3 module versions are registered at runtime.
     * ```
     *
     * `repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];`
     * @param index The index to set the value at.
     * @param value The canMigrateFrom to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setCanMigrateFrom")
    public operator fun com.google.protobuf.kotlin.DslList<cosmos.app.v1alpha1.Module.MigrateFromInfo, CanMigrateFromProxy>.set(index: kotlin.Int, value: cosmos.app.v1alpha1.Module.MigrateFromInfo) {
      _builder.setCanMigrateFrom(index, value)
    }
    /**
     * ```
     * can_migrate_from defines which module versions this module can migrate
     * state from. The framework will check that one module version is able to
     * migrate from a previous module version before attempting to update its
     * config. It is assumed that modules can transitively migrate from earlier
     * versions. For instance if v3 declares it can migrate from v2, and v2
     * declares it can migrate from v1, the framework knows how to migrate
     * from v1 to v3, assuming all 3 module versions are registered at runtime.
     * ```
     *
     * `repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearCanMigrateFrom")
    public fun com.google.protobuf.kotlin.DslList<cosmos.app.v1alpha1.Module.MigrateFromInfo, CanMigrateFromProxy>.clear() {
      _builder.clearCanMigrateFrom()
    }

  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.app.v1alpha1.Module.ModuleDescriptor.copy(block: `cosmos.app.v1alpha1`.ModuleDescriptorKt.Dsl.() -> kotlin.Unit): cosmos.app.v1alpha1.Module.ModuleDescriptor =
  `cosmos.app.v1alpha1`.ModuleDescriptorKt.Dsl._create(this.toBuilder()).apply { block() }._build()

