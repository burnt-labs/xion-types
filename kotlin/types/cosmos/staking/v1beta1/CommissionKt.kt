// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/staking/v1beta1/staking.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.staking.v1beta1;

@kotlin.jvm.JvmName("-initializecommission")
public inline fun commission(block: cosmos.staking.v1beta1.CommissionKt.Dsl.() -> kotlin.Unit): cosmos.staking.v1beta1.Staking.Commission =
  cosmos.staking.v1beta1.CommissionKt.Dsl._create(cosmos.staking.v1beta1.Staking.Commission.newBuilder()).apply { block() }._build()
/**
 * ```
 * Commission defines commission parameters for a given validator.
 * ```
 *
 * Protobuf type `cosmos.staking.v1beta1.Commission`
 */
public object CommissionKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.staking.v1beta1.Staking.Commission.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.staking.v1beta1.Staking.Commission.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.staking.v1beta1.Staking.Commission = _builder.build()

    /**
     * ```
     * commission_rates defines the initial commission rates to be used for creating a validator.
     * ```
     *
     * `.cosmos.staking.v1beta1.CommissionRates commission_rates = 1 [json_name = "commissionRates", (.gogoproto.nullable) = false, (.gogoproto.embed) = true, (.amino.dont_omitempty) = true];`
     */
    public var commissionRates: cosmos.staking.v1beta1.Staking.CommissionRates
      @JvmName("getCommissionRates")
      get() = _builder.commissionRates
      @JvmName("setCommissionRates")
      set(value) {
        _builder.commissionRates = value
      }
    /**
     * ```
     * commission_rates defines the initial commission rates to be used for creating a validator.
     * ```
     *
     * `.cosmos.staking.v1beta1.CommissionRates commission_rates = 1 [json_name = "commissionRates", (.gogoproto.nullable) = false, (.gogoproto.embed) = true, (.amino.dont_omitempty) = true];`
     */
    public fun clearCommissionRates() {
      _builder.clearCommissionRates()
    }
    /**
     * ```
     * commission_rates defines the initial commission rates to be used for creating a validator.
     * ```
     *
     * `.cosmos.staking.v1beta1.CommissionRates commission_rates = 1 [json_name = "commissionRates", (.gogoproto.nullable) = false, (.gogoproto.embed) = true, (.amino.dont_omitempty) = true];`
     * @return Whether the commissionRates field is set.
     */
    public fun hasCommissionRates(): kotlin.Boolean {
      return _builder.hasCommissionRates()
    }

    public val CommissionKt.Dsl.commissionRatesOrNull: cosmos.staking.v1beta1.Staking.CommissionRates?
      get() = _builder.commissionRatesOrNull

    /**
     * ```
     * update_time is the last time the commission rate was changed.
     * ```
     *
     * `.google.protobuf.Timestamp update_time = 2 [json_name = "updateTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];`
     */
    public var updateTime: com.google.protobuf.Timestamp
      @JvmName("getUpdateTime")
      get() = _builder.updateTime
      @JvmName("setUpdateTime")
      set(value) {
        _builder.updateTime = value
      }
    /**
     * ```
     * update_time is the last time the commission rate was changed.
     * ```
     *
     * `.google.protobuf.Timestamp update_time = 2 [json_name = "updateTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];`
     */
    public fun clearUpdateTime() {
      _builder.clearUpdateTime()
    }
    /**
     * ```
     * update_time is the last time the commission rate was changed.
     * ```
     *
     * `.google.protobuf.Timestamp update_time = 2 [json_name = "updateTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];`
     * @return Whether the updateTime field is set.
     */
    public fun hasUpdateTime(): kotlin.Boolean {
      return _builder.hasUpdateTime()
    }

    public val CommissionKt.Dsl.updateTimeOrNull: com.google.protobuf.Timestamp?
      get() = _builder.updateTimeOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.staking.v1beta1.Staking.Commission.copy(block: `cosmos.staking.v1beta1`.CommissionKt.Dsl.() -> kotlin.Unit): cosmos.staking.v1beta1.Staking.Commission =
  `cosmos.staking.v1beta1`.CommissionKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.staking.v1beta1.Staking.CommissionOrBuilder.commissionRatesOrNull: cosmos.staking.v1beta1.Staking.CommissionRates?
  get() = if (hasCommissionRates()) getCommissionRates() else null

public val cosmos.staking.v1beta1.Staking.CommissionOrBuilder.updateTimeOrNull: com.google.protobuf.Timestamp?
  get() = if (hasUpdateTime()) getUpdateTime() else null

