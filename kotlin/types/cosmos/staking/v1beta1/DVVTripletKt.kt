// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/staking/v1beta1/staking.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.staking.v1beta1;

@kotlin.jvm.JvmName("-initializedVVTriplet")
public inline fun dVVTriplet(block: cosmos.staking.v1beta1.DVVTripletKt.Dsl.() -> kotlin.Unit): cosmos.staking.v1beta1.Staking.DVVTriplet =
  cosmos.staking.v1beta1.DVVTripletKt.Dsl._create(cosmos.staking.v1beta1.Staking.DVVTriplet.newBuilder()).apply { block() }._build()
/**
 * ```
 * DVVTriplet is struct that just has a delegator-validator-validator triplet
 * with no other data. It is intended to be used as a marshalable pointer. For
 * example, a DVVTriplet can be used to construct the key to getting a
 * Redelegation from state.
 * ```
 *
 * Protobuf type `cosmos.staking.v1beta1.DVVTriplet`
 */
public object DVVTripletKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.staking.v1beta1.Staking.DVVTriplet.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.staking.v1beta1.Staking.DVVTriplet.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.staking.v1beta1.Staking.DVVTriplet = _builder.build()

    /**
     * `string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];`
     */
    public var delegatorAddress: kotlin.String
      @JvmName("getDelegatorAddress")
      get() = _builder.delegatorAddress
      @JvmName("setDelegatorAddress")
      set(value) {
        _builder.delegatorAddress = value
      }
    /**
     * `string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];`
     */
    public fun clearDelegatorAddress() {
      _builder.clearDelegatorAddress()
    }

    /**
     * `string validator_src_address = 2 [json_name = "validatorSrcAddress", (.cosmos_proto.scalar) = "cosmos.ValidatorAddressString"];`
     */
    public var validatorSrcAddress: kotlin.String
      @JvmName("getValidatorSrcAddress")
      get() = _builder.validatorSrcAddress
      @JvmName("setValidatorSrcAddress")
      set(value) {
        _builder.validatorSrcAddress = value
      }
    /**
     * `string validator_src_address = 2 [json_name = "validatorSrcAddress", (.cosmos_proto.scalar) = "cosmos.ValidatorAddressString"];`
     */
    public fun clearValidatorSrcAddress() {
      _builder.clearValidatorSrcAddress()
    }

    /**
     * `string validator_dst_address = 3 [json_name = "validatorDstAddress", (.cosmos_proto.scalar) = "cosmos.ValidatorAddressString"];`
     */
    public var validatorDstAddress: kotlin.String
      @JvmName("getValidatorDstAddress")
      get() = _builder.validatorDstAddress
      @JvmName("setValidatorDstAddress")
      set(value) {
        _builder.validatorDstAddress = value
      }
    /**
     * `string validator_dst_address = 3 [json_name = "validatorDstAddress", (.cosmos_proto.scalar) = "cosmos.ValidatorAddressString"];`
     */
    public fun clearValidatorDstAddress() {
      _builder.clearValidatorDstAddress()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.staking.v1beta1.Staking.DVVTriplet.copy(block: `cosmos.staking.v1beta1`.DVVTripletKt.Dsl.() -> kotlin.Unit): cosmos.staking.v1beta1.Staking.DVVTriplet =
  `cosmos.staking.v1beta1`.DVVTripletKt.Dsl._create(this.toBuilder()).apply { block() }._build()

