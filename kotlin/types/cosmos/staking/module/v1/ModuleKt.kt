// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/staking/module/v1/module.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.staking.module.v1;

@kotlin.jvm.JvmName("-initializemodule")
public inline fun module(block: cosmos.staking.module.v1.ModuleKt.Dsl.() -> kotlin.Unit): cosmos.staking.module.v1.ModuleOuterClass.Module =
  cosmos.staking.module.v1.ModuleKt.Dsl._create(cosmos.staking.module.v1.ModuleOuterClass.Module.newBuilder()).apply { block() }._build()
/**
 * ```
 * Module is the config object of the staking module.
 * ```
 *
 * Protobuf type `cosmos.staking.module.v1.Module`
 */
public object ModuleKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.staking.module.v1.ModuleOuterClass.Module.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.staking.module.v1.ModuleOuterClass.Module.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.staking.module.v1.ModuleOuterClass.Module = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class HooksOrderProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * hooks_order specifies the order of staking hooks and should be a list
     * of module names which provide a staking hooks instance. If no order is
     * provided, then hooks will be applied in alphabetical order of module names.
     * ```
     *
     * `repeated string hooks_order = 1 [json_name = "hooksOrder"];`
     * @return A list containing the hooksOrder.
     */
    public val hooksOrder: com.google.protobuf.kotlin.DslList<kotlin.String, HooksOrderProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.hooksOrderList
      )
    /**
     * ```
     * hooks_order specifies the order of staking hooks and should be a list
     * of module names which provide a staking hooks instance. If no order is
     * provided, then hooks will be applied in alphabetical order of module names.
     * ```
     *
     * `repeated string hooks_order = 1 [json_name = "hooksOrder"];`
     * @param value The hooksOrder to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addHooksOrder")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, HooksOrderProxy>.add(value: kotlin.String) {
      _builder.addHooksOrder(value)
    }
    /**
     * ```
     * hooks_order specifies the order of staking hooks and should be a list
     * of module names which provide a staking hooks instance. If no order is
     * provided, then hooks will be applied in alphabetical order of module names.
     * ```
     *
     * `repeated string hooks_order = 1 [json_name = "hooksOrder"];`
     * @param value The hooksOrder to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignHooksOrder")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, HooksOrderProxy>.plusAssign(value: kotlin.String) {
      add(value)
    }
    /**
     * ```
     * hooks_order specifies the order of staking hooks and should be a list
     * of module names which provide a staking hooks instance. If no order is
     * provided, then hooks will be applied in alphabetical order of module names.
     * ```
     *
     * `repeated string hooks_order = 1 [json_name = "hooksOrder"];`
     * @param values The hooksOrder to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllHooksOrder")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, HooksOrderProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllHooksOrder(values)
    }
    /**
     * ```
     * hooks_order specifies the order of staking hooks and should be a list
     * of module names which provide a staking hooks instance. If no order is
     * provided, then hooks will be applied in alphabetical order of module names.
     * ```
     *
     * `repeated string hooks_order = 1 [json_name = "hooksOrder"];`
     * @param values The hooksOrder to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllHooksOrder")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, HooksOrderProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
      addAll(values)
    }
    /**
     * ```
     * hooks_order specifies the order of staking hooks and should be a list
     * of module names which provide a staking hooks instance. If no order is
     * provided, then hooks will be applied in alphabetical order of module names.
     * ```
     *
     * `repeated string hooks_order = 1 [json_name = "hooksOrder"];`
     * @param index The index to set the value at.
     * @param value The hooksOrder to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setHooksOrder")
    public operator fun com.google.protobuf.kotlin.DslList<kotlin.String, HooksOrderProxy>.set(index: kotlin.Int, value: kotlin.String) {
      _builder.setHooksOrder(index, value)
    }/**
     * ```
     * hooks_order specifies the order of staking hooks and should be a list
     * of module names which provide a staking hooks instance. If no order is
     * provided, then hooks will be applied in alphabetical order of module names.
     * ```
     *
     * `repeated string hooks_order = 1 [json_name = "hooksOrder"];`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearHooksOrder")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, HooksOrderProxy>.clear() {
      _builder.clearHooksOrder()
    }
    /**
     * ```
     * authority defines the custom module authority. If not set, defaults to the governance module.
     * ```
     *
     * `string authority = 2 [json_name = "authority"];`
     */
    public var authority: kotlin.String
      @JvmName("getAuthority")
      get() = _builder.authority
      @JvmName("setAuthority")
      set(value) {
        _builder.authority = value
      }
    /**
     * ```
     * authority defines the custom module authority. If not set, defaults to the governance module.
     * ```
     *
     * `string authority = 2 [json_name = "authority"];`
     */
    public fun clearAuthority() {
      _builder.clearAuthority()
    }

    /**
     * ```
     * bech32_prefix_validator is the bech32 validator prefix for the app.
     * ```
     *
     * `string bech32_prefix_validator = 3 [json_name = "bech32PrefixValidator"];`
     */
    public var bech32PrefixValidator: kotlin.String
      @JvmName("getBech32PrefixValidator")
      get() = _builder.bech32PrefixValidator
      @JvmName("setBech32PrefixValidator")
      set(value) {
        _builder.bech32PrefixValidator = value
      }
    /**
     * ```
     * bech32_prefix_validator is the bech32 validator prefix for the app.
     * ```
     *
     * `string bech32_prefix_validator = 3 [json_name = "bech32PrefixValidator"];`
     */
    public fun clearBech32PrefixValidator() {
      _builder.clearBech32PrefixValidator()
    }

    /**
     * ```
     * bech32_prefix_consensus is the bech32 consensus node prefix for the app.
     * ```
     *
     * `string bech32_prefix_consensus = 4 [json_name = "bech32PrefixConsensus"];`
     */
    public var bech32PrefixConsensus: kotlin.String
      @JvmName("getBech32PrefixConsensus")
      get() = _builder.bech32PrefixConsensus
      @JvmName("setBech32PrefixConsensus")
      set(value) {
        _builder.bech32PrefixConsensus = value
      }
    /**
     * ```
     * bech32_prefix_consensus is the bech32 consensus node prefix for the app.
     * ```
     *
     * `string bech32_prefix_consensus = 4 [json_name = "bech32PrefixConsensus"];`
     */
    public fun clearBech32PrefixConsensus() {
      _builder.clearBech32PrefixConsensus()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.staking.module.v1.ModuleOuterClass.Module.copy(block: `cosmos.staking.module.v1`.ModuleKt.Dsl.() -> kotlin.Unit): cosmos.staking.module.v1.ModuleOuterClass.Module =
  `cosmos.staking.module.v1`.ModuleKt.Dsl._create(this.toBuilder()).apply { block() }._build()

