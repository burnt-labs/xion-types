// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/base/reflection/v2alpha1/reflection.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.base.reflection.v2alpha1;

@kotlin.jvm.JvmName("-initializegetConfigurationDescriptorResponse")
public inline fun getConfigurationDescriptorResponse(block: cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponseKt.Dsl.() -> kotlin.Unit): cosmos.base.reflection.v2alpha1.Reflection.GetConfigurationDescriptorResponse =
  cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponseKt.Dsl._create(cosmos.base.reflection.v2alpha1.Reflection.GetConfigurationDescriptorResponse.newBuilder()).apply { block() }._build()
/**
 * ```
 * GetConfigurationDescriptorResponse is the response returned by the GetConfigurationDescriptor RPC
 * ```
 *
 * Protobuf type `cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse`
 */
public object GetConfigurationDescriptorResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.base.reflection.v2alpha1.Reflection.GetConfigurationDescriptorResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.base.reflection.v2alpha1.Reflection.GetConfigurationDescriptorResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.base.reflection.v2alpha1.Reflection.GetConfigurationDescriptorResponse = _builder.build()

    /**
     * ```
     * config describes the application's sdk.Config
     * ```
     *
     * `.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor config = 1 [json_name = "config"];`
     */
    public var config: cosmos.base.reflection.v2alpha1.Reflection.ConfigurationDescriptor
      @JvmName("getConfig")
      get() = _builder.config
      @JvmName("setConfig")
      set(value) {
        _builder.config = value
      }
    /**
     * ```
     * config describes the application's sdk.Config
     * ```
     *
     * `.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor config = 1 [json_name = "config"];`
     */
    public fun clearConfig() {
      _builder.clearConfig()
    }
    /**
     * ```
     * config describes the application's sdk.Config
     * ```
     *
     * `.cosmos.base.reflection.v2alpha1.ConfigurationDescriptor config = 1 [json_name = "config"];`
     * @return Whether the config field is set.
     */
    public fun hasConfig(): kotlin.Boolean {
      return _builder.hasConfig()
    }

    public val GetConfigurationDescriptorResponseKt.Dsl.configOrNull: cosmos.base.reflection.v2alpha1.Reflection.ConfigurationDescriptor?
      get() = _builder.configOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.base.reflection.v2alpha1.Reflection.GetConfigurationDescriptorResponse.copy(block: `cosmos.base.reflection.v2alpha1`.GetConfigurationDescriptorResponseKt.Dsl.() -> kotlin.Unit): cosmos.base.reflection.v2alpha1.Reflection.GetConfigurationDescriptorResponse =
  `cosmos.base.reflection.v2alpha1`.GetConfigurationDescriptorResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.base.reflection.v2alpha1.Reflection.GetConfigurationDescriptorResponseOrBuilder.configOrNull: cosmos.base.reflection.v2alpha1.Reflection.ConfigurationDescriptor?
  get() = if (hasConfig()) getConfig() else null

