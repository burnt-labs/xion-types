// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/base/reflection/v2alpha1/reflection.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.base.reflection.v2alpha1;

@kotlin.jvm.JvmName("-initializesigningModeDescriptor")
public inline fun signingModeDescriptor(block: cosmos.base.reflection.v2alpha1.SigningModeDescriptorKt.Dsl.() -> kotlin.Unit): cosmos.base.reflection.v2alpha1.Reflection.SigningModeDescriptor =
  cosmos.base.reflection.v2alpha1.SigningModeDescriptorKt.Dsl._create(cosmos.base.reflection.v2alpha1.Reflection.SigningModeDescriptor.newBuilder()).apply { block() }._build()
/**
 * ```
 * SigningModeDescriptor provides information on a signing flow of the application
 * NOTE(fdymylja): here we could go as far as providing an entire flow on how
 * to sign a message given a SigningModeDescriptor, but it's better to think about
 * this another time
 * ```
 *
 * Protobuf type `cosmos.base.reflection.v2alpha1.SigningModeDescriptor`
 */
public object SigningModeDescriptorKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.base.reflection.v2alpha1.Reflection.SigningModeDescriptor.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.base.reflection.v2alpha1.Reflection.SigningModeDescriptor.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.base.reflection.v2alpha1.Reflection.SigningModeDescriptor = _builder.build()

    /**
     * ```
     * name defines the unique name of the signing mode
     * ```
     *
     * `string name = 1 [json_name = "name"];`
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.name
      @JvmName("setName")
      set(value) {
        _builder.name = value
      }
    /**
     * ```
     * name defines the unique name of the signing mode
     * ```
     *
     * `string name = 1 [json_name = "name"];`
     */
    public fun clearName() {
      _builder.clearName()
    }

    /**
     * ```
     * number is the unique int32 identifier for the sign_mode enum
     * ```
     *
     * `int32 number = 2 [json_name = "number"];`
     */
    public var number: kotlin.Int
      @JvmName("getNumber")
      get() = _builder.number
      @JvmName("setNumber")
      set(value) {
        _builder.number = value
      }
    /**
     * ```
     * number is the unique int32 identifier for the sign_mode enum
     * ```
     *
     * `int32 number = 2 [json_name = "number"];`
     */
    public fun clearNumber() {
      _builder.clearNumber()
    }

    /**
     * ```
     * authn_info_provider_method_fullname defines the fullname of the method to call to get
     * the metadata required to authenticate using the provided sign_modes
     * ```
     *
     * `string authn_info_provider_method_fullname = 3 [json_name = "authnInfoProviderMethodFullname"];`
     */
    public var authnInfoProviderMethodFullname: kotlin.String
      @JvmName("getAuthnInfoProviderMethodFullname")
      get() = _builder.authnInfoProviderMethodFullname
      @JvmName("setAuthnInfoProviderMethodFullname")
      set(value) {
        _builder.authnInfoProviderMethodFullname = value
      }
    /**
     * ```
     * authn_info_provider_method_fullname defines the fullname of the method to call to get
     * the metadata required to authenticate using the provided sign_modes
     * ```
     *
     * `string authn_info_provider_method_fullname = 3 [json_name = "authnInfoProviderMethodFullname"];`
     */
    public fun clearAuthnInfoProviderMethodFullname() {
      _builder.clearAuthnInfoProviderMethodFullname()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.base.reflection.v2alpha1.Reflection.SigningModeDescriptor.copy(block: `cosmos.base.reflection.v2alpha1`.SigningModeDescriptorKt.Dsl.() -> kotlin.Unit): cosmos.base.reflection.v2alpha1.Reflection.SigningModeDescriptor =
  `cosmos.base.reflection.v2alpha1`.SigningModeDescriptorKt.Dsl._create(this.toBuilder()).apply { block() }._build()

