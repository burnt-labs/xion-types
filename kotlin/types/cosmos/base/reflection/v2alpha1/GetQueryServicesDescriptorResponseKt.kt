// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/base/reflection/v2alpha1/reflection.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package cosmos.base.reflection.v2alpha1;

@kotlin.jvm.JvmName("-initializegetQueryServicesDescriptorResponse")
public inline fun getQueryServicesDescriptorResponse(block: cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponseKt.Dsl.() -> kotlin.Unit): cosmos.base.reflection.v2alpha1.Reflection.GetQueryServicesDescriptorResponse =
  cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponseKt.Dsl._create(cosmos.base.reflection.v2alpha1.Reflection.GetQueryServicesDescriptorResponse.newBuilder()).apply { block() }._build()
/**
 * ```
 * GetQueryServicesDescriptorResponse is the response returned by the GetQueryServicesDescriptor RPC
 * ```
 *
 * Protobuf type `cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse`
 */
public object GetQueryServicesDescriptorResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.base.reflection.v2alpha1.Reflection.GetQueryServicesDescriptorResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: cosmos.base.reflection.v2alpha1.Reflection.GetQueryServicesDescriptorResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): cosmos.base.reflection.v2alpha1.Reflection.GetQueryServicesDescriptorResponse = _builder.build()

    /**
     * ```
     * queries provides information on the available queryable services
     * ```
     *
     * `.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor queries = 1 [json_name = "queries"];`
     */
    public var queries: cosmos.base.reflection.v2alpha1.Reflection.QueryServicesDescriptor
      @JvmName("getQueries")
      get() = _builder.queries
      @JvmName("setQueries")
      set(value) {
        _builder.queries = value
      }
    /**
     * ```
     * queries provides information on the available queryable services
     * ```
     *
     * `.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor queries = 1 [json_name = "queries"];`
     */
    public fun clearQueries() {
      _builder.clearQueries()
    }
    /**
     * ```
     * queries provides information on the available queryable services
     * ```
     *
     * `.cosmos.base.reflection.v2alpha1.QueryServicesDescriptor queries = 1 [json_name = "queries"];`
     * @return Whether the queries field is set.
     */
    public fun hasQueries(): kotlin.Boolean {
      return _builder.hasQueries()
    }

    public val GetQueryServicesDescriptorResponseKt.Dsl.queriesOrNull: cosmos.base.reflection.v2alpha1.Reflection.QueryServicesDescriptor?
      get() = _builder.queriesOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.base.reflection.v2alpha1.Reflection.GetQueryServicesDescriptorResponse.copy(block: `cosmos.base.reflection.v2alpha1`.GetQueryServicesDescriptorResponseKt.Dsl.() -> kotlin.Unit): cosmos.base.reflection.v2alpha1.Reflection.GetQueryServicesDescriptorResponse =
  `cosmos.base.reflection.v2alpha1`.GetQueryServicesDescriptorResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.base.reflection.v2alpha1.Reflection.GetQueryServicesDescriptorResponseOrBuilder.queriesOrNull: cosmos.base.reflection.v2alpha1.Reflection.QueryServicesDescriptor?
  get() = if (hasQueries()) getQueries() else null

