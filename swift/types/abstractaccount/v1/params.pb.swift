// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: abstractaccount/v1/params.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Params defines the parameters for the abstractaccount module.
struct Abstractaccount_V1_Params: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// AllowAllCodeIDs determines whether a Wasm code ID can be used to register
  /// AbstractAccounts:
  /// - if set to true, any code ID can be used;
  /// - if set to false, only code IDs whitelisted in the AllowedCodeIDs list can
  /// be used.
  var allowAllCodeIds: Bool = false

  /// AllowedCodeIDs is the whitelist of Wasm code IDs that can be used to
  /// regiseter AbstractAccounts.
  var allowedCodeIds: [UInt64] = []

  /// MaxGasBefore is the maximum amount of gas that can be consumed by the
  /// contract call in the before_tx decorator.
  ///
  /// Must be greater than zero.
  var maxGasBefore: UInt64 = 0

  /// MaxGasAfter is the maximum amount of gas that can be consumed by the
  /// contract call in the after_tx decorator.
  ///
  /// Must be greater than zero.
  var maxGasAfter: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "abstractaccount.v1"

extension Abstractaccount_V1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "allow_all_code_ids"),
    2: .standard(proto: "allowed_code_ids"),
    3: .standard(proto: "max_gas_before"),
    4: .standard(proto: "max_gas_after"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.allowAllCodeIds) }()
      case 2: try { try decoder.decodeRepeatedUInt64Field(value: &self.allowedCodeIds) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.maxGasBefore) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.maxGasAfter) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.allowAllCodeIds != false {
      try visitor.visitSingularBoolField(value: self.allowAllCodeIds, fieldNumber: 1)
    }
    if !self.allowedCodeIds.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.allowedCodeIds, fieldNumber: 2)
    }
    if self.maxGasBefore != 0 {
      try visitor.visitSingularUInt64Field(value: self.maxGasBefore, fieldNumber: 3)
    }
    if self.maxGasAfter != 0 {
      try visitor.visitSingularUInt64Field(value: self.maxGasAfter, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Abstractaccount_V1_Params, rhs: Abstractaccount_V1_Params) -> Bool {
    if lhs.allowAllCodeIds != rhs.allowAllCodeIds {return false}
    if lhs.allowedCodeIds != rhs.allowedCodeIds {return false}
    if lhs.maxGasBefore != rhs.maxGasBefore {return false}
    if lhs.maxGasAfter != rhs.maxGasAfter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
