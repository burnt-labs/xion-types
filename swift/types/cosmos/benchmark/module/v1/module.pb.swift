// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cosmos/benchmark/module/v1/module.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Module is the config object of the benchmark module.
struct Cosmos_Benchmark_Module_V1_Module: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var genesisParams: Cosmos_Benchmark_Module_V1_GeneratorParams {
    get {return _genesisParams ?? Cosmos_Benchmark_Module_V1_GeneratorParams()}
    set {_genesisParams = newValue}
  }
  /// Returns true if `genesisParams` has been explicitly set.
  var hasGenesisParams: Bool {return self._genesisParams != nil}
  /// Clears the value of `genesisParams`. Subsequent reads from it will return its default value.
  mutating func clearGenesisParams() {self._genesisParams = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _genesisParams: Cosmos_Benchmark_Module_V1_GeneratorParams? = nil
}

/// GenesisParams defines the genesis parameters for the benchmark module.
struct Cosmos_Benchmark_Module_V1_GeneratorParams: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// seed is the seed for the random number generator.
  var seed: UInt64 = 0

  /// bucket_count is the number of store keys to uniformly distribute genesis_count keys across.
  var bucketCount: UInt64 = 0

  /// key_mean is the mean size (in normal distribution) of keys in each bucket.
  var keyMean: UInt64 = 0

  /// key_std_dev is the standard deviation of key sizes in each bucket.
  var keyStdDev: UInt64 = 0

  /// value_mean is the mean size (in normal distribution) of values in each bucket.
  var valueMean: UInt64 = 0

  /// value_std_dev is the standard deviation of value sizes in each bucket.
  var valueStdDev: UInt64 = 0

  /// genesis_count is the number of keys to insert in the store, distributed across all buckets.
  var genesisCount: UInt64 = 0

  /// insert_weight is the weight of insert operations.
  var insertWeight: Float = 0

  /// update_weight is the weight of update operations.
  var updateWeight: Float = 0

  /// get_weight is the weight of get operations.
  var getWeight: Float = 0

  /// delete_weight is the weight of delete operations.
  var deleteWeight: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cosmos.benchmark.module.v1"

extension Cosmos_Benchmark_Module_V1_Module: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Module"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "genesis_params"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._genesisParams) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._genesisParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Benchmark_Module_V1_Module, rhs: Cosmos_Benchmark_Module_V1_Module) -> Bool {
    if lhs._genesisParams != rhs._genesisParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Benchmark_Module_V1_GeneratorParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GeneratorParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "seed"),
    2: .standard(proto: "bucket_count"),
    3: .standard(proto: "key_mean"),
    4: .standard(proto: "key_std_dev"),
    6: .standard(proto: "value_mean"),
    7: .standard(proto: "value_std_dev"),
    8: .standard(proto: "genesis_count"),
    9: .standard(proto: "insert_weight"),
    10: .standard(proto: "update_weight"),
    12: .standard(proto: "get_weight"),
    11: .standard(proto: "delete_weight"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.seed) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.bucketCount) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.keyMean) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.keyStdDev) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.valueMean) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.valueStdDev) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.genesisCount) }()
      case 9: try { try decoder.decodeSingularFloatField(value: &self.insertWeight) }()
      case 10: try { try decoder.decodeSingularFloatField(value: &self.updateWeight) }()
      case 11: try { try decoder.decodeSingularFloatField(value: &self.deleteWeight) }()
      case 12: try { try decoder.decodeSingularFloatField(value: &self.getWeight) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.seed != 0 {
      try visitor.visitSingularUInt64Field(value: self.seed, fieldNumber: 1)
    }
    if self.bucketCount != 0 {
      try visitor.visitSingularUInt64Field(value: self.bucketCount, fieldNumber: 2)
    }
    if self.keyMean != 0 {
      try visitor.visitSingularUInt64Field(value: self.keyMean, fieldNumber: 3)
    }
    if self.keyStdDev != 0 {
      try visitor.visitSingularUInt64Field(value: self.keyStdDev, fieldNumber: 4)
    }
    if self.valueMean != 0 {
      try visitor.visitSingularUInt64Field(value: self.valueMean, fieldNumber: 6)
    }
    if self.valueStdDev != 0 {
      try visitor.visitSingularUInt64Field(value: self.valueStdDev, fieldNumber: 7)
    }
    if self.genesisCount != 0 {
      try visitor.visitSingularUInt64Field(value: self.genesisCount, fieldNumber: 8)
    }
    if self.insertWeight.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.insertWeight, fieldNumber: 9)
    }
    if self.updateWeight.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.updateWeight, fieldNumber: 10)
    }
    if self.deleteWeight.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.deleteWeight, fieldNumber: 11)
    }
    if self.getWeight.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.getWeight, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Benchmark_Module_V1_GeneratorParams, rhs: Cosmos_Benchmark_Module_V1_GeneratorParams) -> Bool {
    if lhs.seed != rhs.seed {return false}
    if lhs.bucketCount != rhs.bucketCount {return false}
    if lhs.keyMean != rhs.keyMean {return false}
    if lhs.keyStdDev != rhs.keyStdDev {return false}
    if lhs.valueMean != rhs.valueMean {return false}
    if lhs.valueStdDev != rhs.valueStdDev {return false}
    if lhs.genesisCount != rhs.genesisCount {return false}
    if lhs.insertWeight != rhs.insertWeight {return false}
    if lhs.updateWeight != rhs.updateWeight {return false}
    if lhs.getWeight != rhs.getWeight {return false}
    if lhs.deleteWeight != rhs.deleteWeight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
