// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cosmos/benchmark/v1/benchmark.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Op is a message describing a benchmark operation.
public struct Cosmos_Benchmark_V1_Op: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var seed: UInt64 = 0

  public var actor: String = String()

  public var keyLength: UInt64 = 0

  public var valueLength: UInt64 = 0

  public var iterations: UInt32 = 0

  public var delete: Bool = false

  public var exists: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cosmos.benchmark.v1"

extension Cosmos_Benchmark_V1_Op: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Op"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "seed"),
    2: .same(proto: "actor"),
    3: .standard(proto: "key_length"),
    4: .standard(proto: "value_length"),
    5: .same(proto: "iterations"),
    6: .same(proto: "delete"),
    7: .same(proto: "exists"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.seed) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.actor) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.keyLength) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.valueLength) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.iterations) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.delete) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.exists) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.seed != 0 {
      try visitor.visitSingularUInt64Field(value: self.seed, fieldNumber: 1)
    }
    if !self.actor.isEmpty {
      try visitor.visitSingularStringField(value: self.actor, fieldNumber: 2)
    }
    if self.keyLength != 0 {
      try visitor.visitSingularUInt64Field(value: self.keyLength, fieldNumber: 3)
    }
    if self.valueLength != 0 {
      try visitor.visitSingularUInt64Field(value: self.valueLength, fieldNumber: 4)
    }
    if self.iterations != 0 {
      try visitor.visitSingularUInt32Field(value: self.iterations, fieldNumber: 5)
    }
    if self.delete != false {
      try visitor.visitSingularBoolField(value: self.delete, fieldNumber: 6)
    }
    if self.exists != false {
      try visitor.visitSingularBoolField(value: self.exists, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cosmos_Benchmark_V1_Op, rhs: Cosmos_Benchmark_V1_Op) -> Bool {
    if lhs.seed != rhs.seed {return false}
    if lhs.actor != rhs.actor {return false}
    if lhs.keyLength != rhs.keyLength {return false}
    if lhs.valueLength != rhs.valueLength {return false}
    if lhs.iterations != rhs.iterations {return false}
    if lhs.delete != rhs.delete {return false}
    if lhs.exists != rhs.exists {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
