// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cosmos/protocolpool/v1/types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ContinuousFund defines the fields of continuous fund proposal.
public struct Cosmos_Protocolpool_V1_ContinuousFund: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Recipient is the address string of the account receiving funds.
  public var recipient: String = String()

  /// Percentage is the percentage of funds to be allocated from Community pool.
  public var percentage: String = String()

  /// Optional, if expiry is set, removes the state object when expired.
  public var expiry: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _expiry ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_expiry = newValue}
  }
  /// Returns true if `expiry` has been explicitly set.
  public var hasExpiry: Bool {return self._expiry != nil}
  /// Clears the value of `expiry`. Subsequent reads from it will return its default value.
  public mutating func clearExpiry() {self._expiry = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _expiry: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Params defines the parameters for the protocolpool module.
public struct Cosmos_Protocolpool_V1_Params: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// EnabledDistributionDenoms lists the denoms that are allowed to be distributed.
  /// This is to avoid spending time distributing undesired tokens to continuous funds and budgets.
  public var enabledDistributionDenoms: [String] = []

  /// DistributionFrequency is the frequency (in terms of blocks) that funds are distributed out from the
  /// x/protocolpool module.
  public var distributionFrequency: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cosmos.protocolpool.v1"

extension Cosmos_Protocolpool_V1_ContinuousFund: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContinuousFund"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "recipient"),
    2: .same(proto: "percentage"),
    3: .same(proto: "expiry"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.recipient) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.percentage) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._expiry) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.recipient.isEmpty {
      try visitor.visitSingularStringField(value: self.recipient, fieldNumber: 1)
    }
    if !self.percentage.isEmpty {
      try visitor.visitSingularStringField(value: self.percentage, fieldNumber: 2)
    }
    try { if let v = self._expiry {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cosmos_Protocolpool_V1_ContinuousFund, rhs: Cosmos_Protocolpool_V1_ContinuousFund) -> Bool {
    if lhs.recipient != rhs.recipient {return false}
    if lhs.percentage != rhs.percentage {return false}
    if lhs._expiry != rhs._expiry {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Protocolpool_V1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Params"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "enabled_distribution_denoms"),
    2: .standard(proto: "distribution_frequency"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.enabledDistributionDenoms) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.distributionFrequency) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.enabledDistributionDenoms.isEmpty {
      try visitor.visitRepeatedStringField(value: self.enabledDistributionDenoms, fieldNumber: 1)
    }
    if self.distributionFrequency != 0 {
      try visitor.visitSingularUInt64Field(value: self.distributionFrequency, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cosmos_Protocolpool_V1_Params, rhs: Cosmos_Protocolpool_V1_Params) -> Bool {
    if lhs.enabledDistributionDenoms != rhs.enabledDistributionDenoms {return false}
    if lhs.distributionFrequency != rhs.distributionFrequency {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
