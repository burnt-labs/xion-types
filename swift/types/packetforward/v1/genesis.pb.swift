// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: packetforward/v1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the packetforward genesis state
struct Packetforward_V1_GenesisState: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// key - information about forwarded packet: src_channel
  /// (parsedReceiver.Channel), src_port (parsedReceiver.Port), sequence value -
  /// information about original packet for refunding if necessary: retries,
  /// srcPacketSender, srcPacket.DestinationChannel, srcPacket.DestinationPort
  var inFlightPackets: Dictionary<String,Packetforward_V1_InFlightPacket> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// InFlightPacket contains information about original packet for
/// writing the acknowledgement and refunding if necessary.
struct Packetforward_V1_InFlightPacket: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var originalSenderAddress: String = String()

  var refundChannelID: String = String()

  var refundPortID: String = String()

  var packetSrcChannelID: String = String()

  var packetSrcPortID: String = String()

  var packetTimeoutTimestamp: UInt64 = 0

  var packetTimeoutHeight: String = String()

  var packetData: Data = Data()

  var refundSequence: UInt64 = 0

  var retriesRemaining: Int32 = 0

  var timeout: UInt64 = 0

  var nonrefundable: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "packetforward.v1"

extension Packetforward_V1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "in_flight_packets"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Packetforward_V1_InFlightPacket>.self, value: &self.inFlightPackets) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.inFlightPackets.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Packetforward_V1_InFlightPacket>.self, value: self.inFlightPackets, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Packetforward_V1_GenesisState, rhs: Packetforward_V1_GenesisState) -> Bool {
    if lhs.inFlightPackets != rhs.inFlightPackets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Packetforward_V1_InFlightPacket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InFlightPacket"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "original_sender_address"),
    2: .standard(proto: "refund_channel_id"),
    3: .standard(proto: "refund_port_id"),
    4: .standard(proto: "packet_src_channel_id"),
    5: .standard(proto: "packet_src_port_id"),
    6: .standard(proto: "packet_timeout_timestamp"),
    7: .standard(proto: "packet_timeout_height"),
    8: .standard(proto: "packet_data"),
    9: .standard(proto: "refund_sequence"),
    10: .standard(proto: "retries_remaining"),
    11: .same(proto: "timeout"),
    12: .same(proto: "nonrefundable"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.originalSenderAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.refundChannelID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.refundPortID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.packetSrcChannelID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.packetSrcPortID) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.packetTimeoutTimestamp) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.packetTimeoutHeight) }()
      case 8: try { try decoder.decodeSingularBytesField(value: &self.packetData) }()
      case 9: try { try decoder.decodeSingularUInt64Field(value: &self.refundSequence) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self.retriesRemaining) }()
      case 11: try { try decoder.decodeSingularUInt64Field(value: &self.timeout) }()
      case 12: try { try decoder.decodeSingularBoolField(value: &self.nonrefundable) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.originalSenderAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.originalSenderAddress, fieldNumber: 1)
    }
    if !self.refundChannelID.isEmpty {
      try visitor.visitSingularStringField(value: self.refundChannelID, fieldNumber: 2)
    }
    if !self.refundPortID.isEmpty {
      try visitor.visitSingularStringField(value: self.refundPortID, fieldNumber: 3)
    }
    if !self.packetSrcChannelID.isEmpty {
      try visitor.visitSingularStringField(value: self.packetSrcChannelID, fieldNumber: 4)
    }
    if !self.packetSrcPortID.isEmpty {
      try visitor.visitSingularStringField(value: self.packetSrcPortID, fieldNumber: 5)
    }
    if self.packetTimeoutTimestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.packetTimeoutTimestamp, fieldNumber: 6)
    }
    if !self.packetTimeoutHeight.isEmpty {
      try visitor.visitSingularStringField(value: self.packetTimeoutHeight, fieldNumber: 7)
    }
    if !self.packetData.isEmpty {
      try visitor.visitSingularBytesField(value: self.packetData, fieldNumber: 8)
    }
    if self.refundSequence != 0 {
      try visitor.visitSingularUInt64Field(value: self.refundSequence, fieldNumber: 9)
    }
    if self.retriesRemaining != 0 {
      try visitor.visitSingularInt32Field(value: self.retriesRemaining, fieldNumber: 10)
    }
    if self.timeout != 0 {
      try visitor.visitSingularUInt64Field(value: self.timeout, fieldNumber: 11)
    }
    if self.nonrefundable != false {
      try visitor.visitSingularBoolField(value: self.nonrefundable, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Packetforward_V1_InFlightPacket, rhs: Packetforward_V1_InFlightPacket) -> Bool {
    if lhs.originalSenderAddress != rhs.originalSenderAddress {return false}
    if lhs.refundChannelID != rhs.refundChannelID {return false}
    if lhs.refundPortID != rhs.refundPortID {return false}
    if lhs.packetSrcChannelID != rhs.packetSrcChannelID {return false}
    if lhs.packetSrcPortID != rhs.packetSrcPortID {return false}
    if lhs.packetTimeoutTimestamp != rhs.packetTimeoutTimestamp {return false}
    if lhs.packetTimeoutHeight != rhs.packetTimeoutHeight {return false}
    if lhs.packetData != rhs.packetData {return false}
    if lhs.refundSequence != rhs.refundSequence {return false}
    if lhs.retriesRemaining != rhs.retriesRemaining {return false}
    if lhs.timeout != rhs.timeout {return false}
    if lhs.nonrefundable != rhs.nonrefundable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
