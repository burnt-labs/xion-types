// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: feeabstraction/feeabs/v1beta1/proposal.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// HostChainFeeAbsStatus
enum Feeabstraction_Feeabs_V1beta1_HostChainFeeAbsStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case updated // = 0
  case outdated // = 1
  case frozen // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .updated
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .updated
    case 1: self = .outdated
    case 2: self = .frozen
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .updated: return 0
    case .outdated: return 1
    case .frozen: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Feeabstraction_Feeabs_V1beta1_HostChainFeeAbsStatus] = [
    .updated,
    .outdated,
    .frozen,
  ]

}

/// HostChainFeeAbsConfig
struct Feeabstraction_Feeabs_V1beta1_HostChainFeeAbsConfig: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ibc token is allowed to be used as fee token
  var ibcDenom: String = String()

  /// token_in in cross_chain swap contract.
  var osmosisPoolTokenDenomIn: String = String()

  /// pool id
  var poolID: UInt64 = 0

  /// Host chain fee abstraction connection status
  var status: Feeabstraction_Feeabs_V1beta1_HostChainFeeAbsStatus = .updated

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// AddHostZoneProposal
struct Feeabstraction_Feeabs_V1beta1_AddHostZoneProposal: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the title of the proposal
  var title: String = String()

  /// the description of the proposal
  var description_p: String = String()

  /// the host chain config
  var hostChainConfig: Feeabstraction_Feeabs_V1beta1_HostChainFeeAbsConfig {
    get {return _hostChainConfig ?? Feeabstraction_Feeabs_V1beta1_HostChainFeeAbsConfig()}
    set {_hostChainConfig = newValue}
  }
  /// Returns true if `hostChainConfig` has been explicitly set.
  var hasHostChainConfig: Bool {return self._hostChainConfig != nil}
  /// Clears the value of `hostChainConfig`. Subsequent reads from it will return its default value.
  mutating func clearHostChainConfig() {self._hostChainConfig = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _hostChainConfig: Feeabstraction_Feeabs_V1beta1_HostChainFeeAbsConfig? = nil
}

/// DeleteHostZoneProposal
struct Feeabstraction_Feeabs_V1beta1_DeleteHostZoneProposal: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the title of the proposal
  var title: String = String()

  /// the description of the proposal
  var description_p: String = String()

  /// the  ibc denom of this token
  var ibcDenom: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// SetHostZoneProposal
struct Feeabstraction_Feeabs_V1beta1_SetHostZoneProposal: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the title of the proposal
  var title: String = String()

  /// the description of the proposal
  var description_p: String = String()

  /// the host chain config
  var hostChainConfig: Feeabstraction_Feeabs_V1beta1_HostChainFeeAbsConfig {
    get {return _hostChainConfig ?? Feeabstraction_Feeabs_V1beta1_HostChainFeeAbsConfig()}
    set {_hostChainConfig = newValue}
  }
  /// Returns true if `hostChainConfig` has been explicitly set.
  var hasHostChainConfig: Bool {return self._hostChainConfig != nil}
  /// Clears the value of `hostChainConfig`. Subsequent reads from it will return its default value.
  mutating func clearHostChainConfig() {self._hostChainConfig = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _hostChainConfig: Feeabstraction_Feeabs_V1beta1_HostChainFeeAbsConfig? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "feeabstraction.feeabs.v1beta1"

extension Feeabstraction_Feeabs_V1beta1_HostChainFeeAbsStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UPDATED"),
    1: .same(proto: "OUTDATED"),
    2: .same(proto: "FROZEN"),
  ]
}

extension Feeabstraction_Feeabs_V1beta1_HostChainFeeAbsConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HostChainFeeAbsConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ibc_denom"),
    2: .standard(proto: "osmosis_pool_token_denom_in"),
    3: .standard(proto: "pool_id"),
    4: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.ibcDenom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.osmosisPoolTokenDenomIn) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ibcDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.ibcDenom, fieldNumber: 1)
    }
    if !self.osmosisPoolTokenDenomIn.isEmpty {
      try visitor.visitSingularStringField(value: self.osmosisPoolTokenDenomIn, fieldNumber: 2)
    }
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 3)
    }
    if self.status != .updated {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Feeabstraction_Feeabs_V1beta1_HostChainFeeAbsConfig, rhs: Feeabstraction_Feeabs_V1beta1_HostChainFeeAbsConfig) -> Bool {
    if lhs.ibcDenom != rhs.ibcDenom {return false}
    if lhs.osmosisPoolTokenDenomIn != rhs.osmosisPoolTokenDenomIn {return false}
    if lhs.poolID != rhs.poolID {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Feeabstraction_Feeabs_V1beta1_AddHostZoneProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddHostZoneProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "host_chain_config"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._hostChainConfig) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try { if let v = self._hostChainConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Feeabstraction_Feeabs_V1beta1_AddHostZoneProposal, rhs: Feeabstraction_Feeabs_V1beta1_AddHostZoneProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs._hostChainConfig != rhs._hostChainConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Feeabstraction_Feeabs_V1beta1_DeleteHostZoneProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteHostZoneProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "ibc_denom"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.ibcDenom) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.ibcDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.ibcDenom, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Feeabstraction_Feeabs_V1beta1_DeleteHostZoneProposal, rhs: Feeabstraction_Feeabs_V1beta1_DeleteHostZoneProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.ibcDenom != rhs.ibcDenom {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Feeabstraction_Feeabs_V1beta1_SetHostZoneProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetHostZoneProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "host_chain_config"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._hostChainConfig) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try { if let v = self._hostChainConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Feeabstraction_Feeabs_V1beta1_SetHostZoneProposal, rhs: Feeabstraction_Feeabs_V1beta1_SetHostZoneProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs._hostChainConfig != rhs._hostChainConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
