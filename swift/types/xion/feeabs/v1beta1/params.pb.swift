// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: xion/feeabs/v1beta1/params.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Params defines the parameters for the feeabs module.
struct Xion_Feeabs_V1beta1_Params: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// native ibced in osmosis
  var nativeIbcedInOsmosis: String = String()

  /// osmosis query TWAP path
  var osmosisQueryTwapPath: String = String()

  /// chain name for ibc path unwinding
  var chainName: String = String()

  /// transfer channel for cross chain swap with osmosis
  var ibcTransferChannel: String = String()

  /// query twap price icq channel with osmosis
  var ibcQueryIcqChannel: String = String()

  /// osmosis crosschain swap contract address
  var osmosisCrosschainSwapAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "xion.feeabs.v1beta1"

extension Xion_Feeabs_V1beta1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "native_ibced_in_osmosis"),
    2: .standard(proto: "osmosis_query_twap_path"),
    3: .standard(proto: "chain_name"),
    4: .standard(proto: "ibc_transfer_channel"),
    5: .standard(proto: "ibc_query_icq_channel"),
    6: .standard(proto: "osmosis_crosschain_swap_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.nativeIbcedInOsmosis) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.osmosisQueryTwapPath) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.chainName) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.ibcTransferChannel) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.ibcQueryIcqChannel) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.osmosisCrosschainSwapAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nativeIbcedInOsmosis.isEmpty {
      try visitor.visitSingularStringField(value: self.nativeIbcedInOsmosis, fieldNumber: 1)
    }
    if !self.osmosisQueryTwapPath.isEmpty {
      try visitor.visitSingularStringField(value: self.osmosisQueryTwapPath, fieldNumber: 2)
    }
    if !self.chainName.isEmpty {
      try visitor.visitSingularStringField(value: self.chainName, fieldNumber: 3)
    }
    if !self.ibcTransferChannel.isEmpty {
      try visitor.visitSingularStringField(value: self.ibcTransferChannel, fieldNumber: 4)
    }
    if !self.ibcQueryIcqChannel.isEmpty {
      try visitor.visitSingularStringField(value: self.ibcQueryIcqChannel, fieldNumber: 5)
    }
    if !self.osmosisCrosschainSwapAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.osmosisCrosschainSwapAddress, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Xion_Feeabs_V1beta1_Params, rhs: Xion_Feeabs_V1beta1_Params) -> Bool {
    if lhs.nativeIbcedInOsmosis != rhs.nativeIbcedInOsmosis {return false}
    if lhs.osmosisQueryTwapPath != rhs.osmosisQueryTwapPath {return false}
    if lhs.chainName != rhs.chainName {return false}
    if lhs.ibcTransferChannel != rhs.ibcTransferChannel {return false}
    if lhs.ibcQueryIcqChannel != rhs.ibcQueryIcqChannel {return false}
    if lhs.osmosisCrosschainSwapAddress != rhs.osmosisCrosschainSwapAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
