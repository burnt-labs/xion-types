// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: xion/feeabs/v1beta1/epoch.proto
// Protobuf Java Version: 4.29.4

package xion.feeabs.v1beta1;

public final class Epoch {
  private Epoch() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 4,
      /* suffix= */ "",
      Epoch.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface EpochInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:xion.feeabs.v1beta1.EpochInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * identifier is a unique reference to this particular timer.
     * </pre>
     *
     * <code>string identifier = 1 [json_name = "identifier"];</code>
     * @return The identifier.
     */
    java.lang.String getIdentifier();
    /**
     * <pre>
     * identifier is a unique reference to this particular timer.
     * </pre>
     *
     * <code>string identifier = 1 [json_name = "identifier"];</code>
     * @return The bytes for identifier.
     */
    com.google.protobuf.ByteString
        getIdentifierBytes();

    /**
     * <pre>
     * start_time is the time at which the timer first ever ticks.
     * If start_time is in the future, the epoch will not begin until the start
     * time.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 2 [json_name = "startTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"start_time&#92;"", (.gogoproto.stdtime) = true];</code>
     * @return Whether the startTime field is set.
     */
    boolean hasStartTime();
    /**
     * <pre>
     * start_time is the time at which the timer first ever ticks.
     * If start_time is in the future, the epoch will not begin until the start
     * time.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 2 [json_name = "startTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"start_time&#92;"", (.gogoproto.stdtime) = true];</code>
     * @return The startTime.
     */
    com.google.protobuf.Timestamp getStartTime();
    /**
     * <pre>
     * start_time is the time at which the timer first ever ticks.
     * If start_time is in the future, the epoch will not begin until the start
     * time.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 2 [json_name = "startTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"start_time&#92;"", (.gogoproto.stdtime) = true];</code>
     */
    com.google.protobuf.TimestampOrBuilder getStartTimeOrBuilder();

    /**
     * <pre>
     * duration is the time in between epoch ticks.
     * In order for intended behavior to be met, duration should
     * be greater than the chains expected block time.
     * Duration must be non-zero.
     * </pre>
     *
     * <code>.google.protobuf.Duration duration = 3 [json_name = "duration", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "duration,omitempty", (.gogoproto.moretags) = "yaml:&#92;"duration&#92;"", (.gogoproto.stdduration) = true];</code>
     * @return Whether the duration field is set.
     */
    boolean hasDuration();
    /**
     * <pre>
     * duration is the time in between epoch ticks.
     * In order for intended behavior to be met, duration should
     * be greater than the chains expected block time.
     * Duration must be non-zero.
     * </pre>
     *
     * <code>.google.protobuf.Duration duration = 3 [json_name = "duration", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "duration,omitempty", (.gogoproto.moretags) = "yaml:&#92;"duration&#92;"", (.gogoproto.stdduration) = true];</code>
     * @return The duration.
     */
    com.google.protobuf.Duration getDuration();
    /**
     * <pre>
     * duration is the time in between epoch ticks.
     * In order for intended behavior to be met, duration should
     * be greater than the chains expected block time.
     * Duration must be non-zero.
     * </pre>
     *
     * <code>.google.protobuf.Duration duration = 3 [json_name = "duration", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "duration,omitempty", (.gogoproto.moretags) = "yaml:&#92;"duration&#92;"", (.gogoproto.stdduration) = true];</code>
     */
    com.google.protobuf.DurationOrBuilder getDurationOrBuilder();

    /**
     * <pre>
     * current_epoch is the current epoch number, or in other words,
     * how many times has the timer 'ticked'.
     * The first tick (current_epoch=1) is defined as
     * the first block whose blocktime is greater than the EpochInfo start_time.
     * </pre>
     *
     * <code>int64 current_epoch = 4 [json_name = "currentEpoch"];</code>
     * @return The currentEpoch.
     */
    long getCurrentEpoch();

    /**
     * <pre>
     * current_epoch_start_time describes the start time of the current timer
     * interval. The interval is (current_epoch_start_time,
     * current_epoch_start_time + duration] When the timer ticks, this is set to
     * current_epoch_start_time = last_epoch_start_time + duration only one timer
     * tick for a given identifier can occur per block.
     *
     * NOTE! The current_epoch_start_time may diverge significantly from the
     * wall-clock time the epoch began at. Wall-clock time of epoch start may be
     * &gt;&gt; current_epoch_start_time. Suppose current_epoch_start_time = 10,
     * duration = 5. Suppose the chain goes offline at t=14, and comes back online
     * at t=30, and produces blocks at every successive time. (t=31, 32, etc.)
     * * The t=30 block will start the epoch for (10, 15]
     * * The t=31 block will start the epoch for (15, 20]
     * * The t=32 block will start the epoch for (20, 25]
     * * The t=33 block will start the epoch for (25, 30]
     * * The t=34 block will start the epoch for (30, 35]
     * * The **t=36** block will start the epoch for (35, 40]
     * </pre>
     *
     * <code>.google.protobuf.Timestamp current_epoch_start_time = 5 [json_name = "currentEpochStartTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"current_epoch_start_time&#92;"", (.gogoproto.stdtime) = true];</code>
     * @return Whether the currentEpochStartTime field is set.
     */
    boolean hasCurrentEpochStartTime();
    /**
     * <pre>
     * current_epoch_start_time describes the start time of the current timer
     * interval. The interval is (current_epoch_start_time,
     * current_epoch_start_time + duration] When the timer ticks, this is set to
     * current_epoch_start_time = last_epoch_start_time + duration only one timer
     * tick for a given identifier can occur per block.
     *
     * NOTE! The current_epoch_start_time may diverge significantly from the
     * wall-clock time the epoch began at. Wall-clock time of epoch start may be
     * &gt;&gt; current_epoch_start_time. Suppose current_epoch_start_time = 10,
     * duration = 5. Suppose the chain goes offline at t=14, and comes back online
     * at t=30, and produces blocks at every successive time. (t=31, 32, etc.)
     * * The t=30 block will start the epoch for (10, 15]
     * * The t=31 block will start the epoch for (15, 20]
     * * The t=32 block will start the epoch for (20, 25]
     * * The t=33 block will start the epoch for (25, 30]
     * * The t=34 block will start the epoch for (30, 35]
     * * The **t=36** block will start the epoch for (35, 40]
     * </pre>
     *
     * <code>.google.protobuf.Timestamp current_epoch_start_time = 5 [json_name = "currentEpochStartTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"current_epoch_start_time&#92;"", (.gogoproto.stdtime) = true];</code>
     * @return The currentEpochStartTime.
     */
    com.google.protobuf.Timestamp getCurrentEpochStartTime();
    /**
     * <pre>
     * current_epoch_start_time describes the start time of the current timer
     * interval. The interval is (current_epoch_start_time,
     * current_epoch_start_time + duration] When the timer ticks, this is set to
     * current_epoch_start_time = last_epoch_start_time + duration only one timer
     * tick for a given identifier can occur per block.
     *
     * NOTE! The current_epoch_start_time may diverge significantly from the
     * wall-clock time the epoch began at. Wall-clock time of epoch start may be
     * &gt;&gt; current_epoch_start_time. Suppose current_epoch_start_time = 10,
     * duration = 5. Suppose the chain goes offline at t=14, and comes back online
     * at t=30, and produces blocks at every successive time. (t=31, 32, etc.)
     * * The t=30 block will start the epoch for (10, 15]
     * * The t=31 block will start the epoch for (15, 20]
     * * The t=32 block will start the epoch for (20, 25]
     * * The t=33 block will start the epoch for (25, 30]
     * * The t=34 block will start the epoch for (30, 35]
     * * The **t=36** block will start the epoch for (35, 40]
     * </pre>
     *
     * <code>.google.protobuf.Timestamp current_epoch_start_time = 5 [json_name = "currentEpochStartTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"current_epoch_start_time&#92;"", (.gogoproto.stdtime) = true];</code>
     */
    com.google.protobuf.TimestampOrBuilder getCurrentEpochStartTimeOrBuilder();

    /**
     * <pre>
     * epoch_counting_started is a boolean, that indicates whether this
     * epoch timer has began yet.
     * </pre>
     *
     * <code>bool epoch_counting_started = 6 [json_name = "epochCountingStarted"];</code>
     * @return The epochCountingStarted.
     */
    boolean getEpochCountingStarted();

    /**
     * <pre>
     * current_epoch_start_height is the block height at which the current epoch
     * started. (The block height at which the timer last ticked)
     * </pre>
     *
     * <code>int64 current_epoch_start_height = 8 [json_name = "currentEpochStartHeight"];</code>
     * @return The currentEpochStartHeight.
     */
    long getCurrentEpochStartHeight();
  }
  /**
   * <pre>
   * EpochInfo defines information of a epoch
   * </pre>
   *
   * Protobuf type {@code xion.feeabs.v1beta1.EpochInfo}
   */
  public static final class EpochInfo extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:xion.feeabs.v1beta1.EpochInfo)
      EpochInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 4,
        /* suffix= */ "",
        EpochInfo.class.getName());
    }
    // Use EpochInfo.newBuilder() to construct.
    private EpochInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private EpochInfo() {
      identifier_ = "";
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return xion.feeabs.v1beta1.Epoch.internal_static_xion_feeabs_v1beta1_EpochInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return xion.feeabs.v1beta1.Epoch.internal_static_xion_feeabs_v1beta1_EpochInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              xion.feeabs.v1beta1.Epoch.EpochInfo.class, xion.feeabs.v1beta1.Epoch.EpochInfo.Builder.class);
    }

    private int bitField0_;
    public static final int IDENTIFIER_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object identifier_ = "";
    /**
     * <pre>
     * identifier is a unique reference to this particular timer.
     * </pre>
     *
     * <code>string identifier = 1 [json_name = "identifier"];</code>
     * @return The identifier.
     */
    @java.lang.Override
    public java.lang.String getIdentifier() {
      java.lang.Object ref = identifier_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        identifier_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * identifier is a unique reference to this particular timer.
     * </pre>
     *
     * <code>string identifier = 1 [json_name = "identifier"];</code>
     * @return The bytes for identifier.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIdentifierBytes() {
      java.lang.Object ref = identifier_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        identifier_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int START_TIME_FIELD_NUMBER = 2;
    private com.google.protobuf.Timestamp startTime_;
    /**
     * <pre>
     * start_time is the time at which the timer first ever ticks.
     * If start_time is in the future, the epoch will not begin until the start
     * time.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 2 [json_name = "startTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"start_time&#92;"", (.gogoproto.stdtime) = true];</code>
     * @return Whether the startTime field is set.
     */
    @java.lang.Override
    public boolean hasStartTime() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * start_time is the time at which the timer first ever ticks.
     * If start_time is in the future, the epoch will not begin until the start
     * time.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 2 [json_name = "startTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"start_time&#92;"", (.gogoproto.stdtime) = true];</code>
     * @return The startTime.
     */
    @java.lang.Override
    public com.google.protobuf.Timestamp getStartTime() {
      return startTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : startTime_;
    }
    /**
     * <pre>
     * start_time is the time at which the timer first ever ticks.
     * If start_time is in the future, the epoch will not begin until the start
     * time.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 2 [json_name = "startTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"start_time&#92;"", (.gogoproto.stdtime) = true];</code>
     */
    @java.lang.Override
    public com.google.protobuf.TimestampOrBuilder getStartTimeOrBuilder() {
      return startTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : startTime_;
    }

    public static final int DURATION_FIELD_NUMBER = 3;
    private com.google.protobuf.Duration duration_;
    /**
     * <pre>
     * duration is the time in between epoch ticks.
     * In order for intended behavior to be met, duration should
     * be greater than the chains expected block time.
     * Duration must be non-zero.
     * </pre>
     *
     * <code>.google.protobuf.Duration duration = 3 [json_name = "duration", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "duration,omitempty", (.gogoproto.moretags) = "yaml:&#92;"duration&#92;"", (.gogoproto.stdduration) = true];</code>
     * @return Whether the duration field is set.
     */
    @java.lang.Override
    public boolean hasDuration() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * duration is the time in between epoch ticks.
     * In order for intended behavior to be met, duration should
     * be greater than the chains expected block time.
     * Duration must be non-zero.
     * </pre>
     *
     * <code>.google.protobuf.Duration duration = 3 [json_name = "duration", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "duration,omitempty", (.gogoproto.moretags) = "yaml:&#92;"duration&#92;"", (.gogoproto.stdduration) = true];</code>
     * @return The duration.
     */
    @java.lang.Override
    public com.google.protobuf.Duration getDuration() {
      return duration_ == null ? com.google.protobuf.Duration.getDefaultInstance() : duration_;
    }
    /**
     * <pre>
     * duration is the time in between epoch ticks.
     * In order for intended behavior to be met, duration should
     * be greater than the chains expected block time.
     * Duration must be non-zero.
     * </pre>
     *
     * <code>.google.protobuf.Duration duration = 3 [json_name = "duration", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "duration,omitempty", (.gogoproto.moretags) = "yaml:&#92;"duration&#92;"", (.gogoproto.stdduration) = true];</code>
     */
    @java.lang.Override
    public com.google.protobuf.DurationOrBuilder getDurationOrBuilder() {
      return duration_ == null ? com.google.protobuf.Duration.getDefaultInstance() : duration_;
    }

    public static final int CURRENT_EPOCH_FIELD_NUMBER = 4;
    private long currentEpoch_ = 0L;
    /**
     * <pre>
     * current_epoch is the current epoch number, or in other words,
     * how many times has the timer 'ticked'.
     * The first tick (current_epoch=1) is defined as
     * the first block whose blocktime is greater than the EpochInfo start_time.
     * </pre>
     *
     * <code>int64 current_epoch = 4 [json_name = "currentEpoch"];</code>
     * @return The currentEpoch.
     */
    @java.lang.Override
    public long getCurrentEpoch() {
      return currentEpoch_;
    }

    public static final int CURRENT_EPOCH_START_TIME_FIELD_NUMBER = 5;
    private com.google.protobuf.Timestamp currentEpochStartTime_;
    /**
     * <pre>
     * current_epoch_start_time describes the start time of the current timer
     * interval. The interval is (current_epoch_start_time,
     * current_epoch_start_time + duration] When the timer ticks, this is set to
     * current_epoch_start_time = last_epoch_start_time + duration only one timer
     * tick for a given identifier can occur per block.
     *
     * NOTE! The current_epoch_start_time may diverge significantly from the
     * wall-clock time the epoch began at. Wall-clock time of epoch start may be
     * &gt;&gt; current_epoch_start_time. Suppose current_epoch_start_time = 10,
     * duration = 5. Suppose the chain goes offline at t=14, and comes back online
     * at t=30, and produces blocks at every successive time. (t=31, 32, etc.)
     * * The t=30 block will start the epoch for (10, 15]
     * * The t=31 block will start the epoch for (15, 20]
     * * The t=32 block will start the epoch for (20, 25]
     * * The t=33 block will start the epoch for (25, 30]
     * * The t=34 block will start the epoch for (30, 35]
     * * The **t=36** block will start the epoch for (35, 40]
     * </pre>
     *
     * <code>.google.protobuf.Timestamp current_epoch_start_time = 5 [json_name = "currentEpochStartTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"current_epoch_start_time&#92;"", (.gogoproto.stdtime) = true];</code>
     * @return Whether the currentEpochStartTime field is set.
     */
    @java.lang.Override
    public boolean hasCurrentEpochStartTime() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * current_epoch_start_time describes the start time of the current timer
     * interval. The interval is (current_epoch_start_time,
     * current_epoch_start_time + duration] When the timer ticks, this is set to
     * current_epoch_start_time = last_epoch_start_time + duration only one timer
     * tick for a given identifier can occur per block.
     *
     * NOTE! The current_epoch_start_time may diverge significantly from the
     * wall-clock time the epoch began at. Wall-clock time of epoch start may be
     * &gt;&gt; current_epoch_start_time. Suppose current_epoch_start_time = 10,
     * duration = 5. Suppose the chain goes offline at t=14, and comes back online
     * at t=30, and produces blocks at every successive time. (t=31, 32, etc.)
     * * The t=30 block will start the epoch for (10, 15]
     * * The t=31 block will start the epoch for (15, 20]
     * * The t=32 block will start the epoch for (20, 25]
     * * The t=33 block will start the epoch for (25, 30]
     * * The t=34 block will start the epoch for (30, 35]
     * * The **t=36** block will start the epoch for (35, 40]
     * </pre>
     *
     * <code>.google.protobuf.Timestamp current_epoch_start_time = 5 [json_name = "currentEpochStartTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"current_epoch_start_time&#92;"", (.gogoproto.stdtime) = true];</code>
     * @return The currentEpochStartTime.
     */
    @java.lang.Override
    public com.google.protobuf.Timestamp getCurrentEpochStartTime() {
      return currentEpochStartTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : currentEpochStartTime_;
    }
    /**
     * <pre>
     * current_epoch_start_time describes the start time of the current timer
     * interval. The interval is (current_epoch_start_time,
     * current_epoch_start_time + duration] When the timer ticks, this is set to
     * current_epoch_start_time = last_epoch_start_time + duration only one timer
     * tick for a given identifier can occur per block.
     *
     * NOTE! The current_epoch_start_time may diverge significantly from the
     * wall-clock time the epoch began at. Wall-clock time of epoch start may be
     * &gt;&gt; current_epoch_start_time. Suppose current_epoch_start_time = 10,
     * duration = 5. Suppose the chain goes offline at t=14, and comes back online
     * at t=30, and produces blocks at every successive time. (t=31, 32, etc.)
     * * The t=30 block will start the epoch for (10, 15]
     * * The t=31 block will start the epoch for (15, 20]
     * * The t=32 block will start the epoch for (20, 25]
     * * The t=33 block will start the epoch for (25, 30]
     * * The t=34 block will start the epoch for (30, 35]
     * * The **t=36** block will start the epoch for (35, 40]
     * </pre>
     *
     * <code>.google.protobuf.Timestamp current_epoch_start_time = 5 [json_name = "currentEpochStartTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"current_epoch_start_time&#92;"", (.gogoproto.stdtime) = true];</code>
     */
    @java.lang.Override
    public com.google.protobuf.TimestampOrBuilder getCurrentEpochStartTimeOrBuilder() {
      return currentEpochStartTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : currentEpochStartTime_;
    }

    public static final int EPOCH_COUNTING_STARTED_FIELD_NUMBER = 6;
    private boolean epochCountingStarted_ = false;
    /**
     * <pre>
     * epoch_counting_started is a boolean, that indicates whether this
     * epoch timer has began yet.
     * </pre>
     *
     * <code>bool epoch_counting_started = 6 [json_name = "epochCountingStarted"];</code>
     * @return The epochCountingStarted.
     */
    @java.lang.Override
    public boolean getEpochCountingStarted() {
      return epochCountingStarted_;
    }

    public static final int CURRENT_EPOCH_START_HEIGHT_FIELD_NUMBER = 8;
    private long currentEpochStartHeight_ = 0L;
    /**
     * <pre>
     * current_epoch_start_height is the block height at which the current epoch
     * started. (The block height at which the timer last ticked)
     * </pre>
     *
     * <code>int64 current_epoch_start_height = 8 [json_name = "currentEpochStartHeight"];</code>
     * @return The currentEpochStartHeight.
     */
    @java.lang.Override
    public long getCurrentEpochStartHeight() {
      return currentEpochStartHeight_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(identifier_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, identifier_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(2, getStartTime());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(3, getDuration());
      }
      if (currentEpoch_ != 0L) {
        output.writeInt64(4, currentEpoch_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(5, getCurrentEpochStartTime());
      }
      if (epochCountingStarted_ != false) {
        output.writeBool(6, epochCountingStarted_);
      }
      if (currentEpochStartHeight_ != 0L) {
        output.writeInt64(8, currentEpochStartHeight_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(identifier_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, identifier_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getStartTime());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getDuration());
      }
      if (currentEpoch_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, currentEpoch_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getCurrentEpochStartTime());
      }
      if (epochCountingStarted_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, epochCountingStarted_);
      }
      if (currentEpochStartHeight_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(8, currentEpochStartHeight_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof xion.feeabs.v1beta1.Epoch.EpochInfo)) {
        return super.equals(obj);
      }
      xion.feeabs.v1beta1.Epoch.EpochInfo other = (xion.feeabs.v1beta1.Epoch.EpochInfo) obj;

      if (!getIdentifier()
          .equals(other.getIdentifier())) return false;
      if (hasStartTime() != other.hasStartTime()) return false;
      if (hasStartTime()) {
        if (!getStartTime()
            .equals(other.getStartTime())) return false;
      }
      if (hasDuration() != other.hasDuration()) return false;
      if (hasDuration()) {
        if (!getDuration()
            .equals(other.getDuration())) return false;
      }
      if (getCurrentEpoch()
          != other.getCurrentEpoch()) return false;
      if (hasCurrentEpochStartTime() != other.hasCurrentEpochStartTime()) return false;
      if (hasCurrentEpochStartTime()) {
        if (!getCurrentEpochStartTime()
            .equals(other.getCurrentEpochStartTime())) return false;
      }
      if (getEpochCountingStarted()
          != other.getEpochCountingStarted()) return false;
      if (getCurrentEpochStartHeight()
          != other.getCurrentEpochStartHeight()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + IDENTIFIER_FIELD_NUMBER;
      hash = (53 * hash) + getIdentifier().hashCode();
      if (hasStartTime()) {
        hash = (37 * hash) + START_TIME_FIELD_NUMBER;
        hash = (53 * hash) + getStartTime().hashCode();
      }
      if (hasDuration()) {
        hash = (37 * hash) + DURATION_FIELD_NUMBER;
        hash = (53 * hash) + getDuration().hashCode();
      }
      hash = (37 * hash) + CURRENT_EPOCH_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getCurrentEpoch());
      if (hasCurrentEpochStartTime()) {
        hash = (37 * hash) + CURRENT_EPOCH_START_TIME_FIELD_NUMBER;
        hash = (53 * hash) + getCurrentEpochStartTime().hashCode();
      }
      hash = (37 * hash) + EPOCH_COUNTING_STARTED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getEpochCountingStarted());
      hash = (37 * hash) + CURRENT_EPOCH_START_HEIGHT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getCurrentEpochStartHeight());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static xion.feeabs.v1beta1.Epoch.EpochInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static xion.feeabs.v1beta1.Epoch.EpochInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static xion.feeabs.v1beta1.Epoch.EpochInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static xion.feeabs.v1beta1.Epoch.EpochInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static xion.feeabs.v1beta1.Epoch.EpochInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static xion.feeabs.v1beta1.Epoch.EpochInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static xion.feeabs.v1beta1.Epoch.EpochInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static xion.feeabs.v1beta1.Epoch.EpochInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static xion.feeabs.v1beta1.Epoch.EpochInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static xion.feeabs.v1beta1.Epoch.EpochInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static xion.feeabs.v1beta1.Epoch.EpochInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static xion.feeabs.v1beta1.Epoch.EpochInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(xion.feeabs.v1beta1.Epoch.EpochInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * EpochInfo defines information of a epoch
     * </pre>
     *
     * Protobuf type {@code xion.feeabs.v1beta1.EpochInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:xion.feeabs.v1beta1.EpochInfo)
        xion.feeabs.v1beta1.Epoch.EpochInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return xion.feeabs.v1beta1.Epoch.internal_static_xion_feeabs_v1beta1_EpochInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return xion.feeabs.v1beta1.Epoch.internal_static_xion_feeabs_v1beta1_EpochInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                xion.feeabs.v1beta1.Epoch.EpochInfo.class, xion.feeabs.v1beta1.Epoch.EpochInfo.Builder.class);
      }

      // Construct using xion.feeabs.v1beta1.Epoch.EpochInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getStartTimeFieldBuilder();
          getDurationFieldBuilder();
          getCurrentEpochStartTimeFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        identifier_ = "";
        startTime_ = null;
        if (startTimeBuilder_ != null) {
          startTimeBuilder_.dispose();
          startTimeBuilder_ = null;
        }
        duration_ = null;
        if (durationBuilder_ != null) {
          durationBuilder_.dispose();
          durationBuilder_ = null;
        }
        currentEpoch_ = 0L;
        currentEpochStartTime_ = null;
        if (currentEpochStartTimeBuilder_ != null) {
          currentEpochStartTimeBuilder_.dispose();
          currentEpochStartTimeBuilder_ = null;
        }
        epochCountingStarted_ = false;
        currentEpochStartHeight_ = 0L;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return xion.feeabs.v1beta1.Epoch.internal_static_xion_feeabs_v1beta1_EpochInfo_descriptor;
      }

      @java.lang.Override
      public xion.feeabs.v1beta1.Epoch.EpochInfo getDefaultInstanceForType() {
        return xion.feeabs.v1beta1.Epoch.EpochInfo.getDefaultInstance();
      }

      @java.lang.Override
      public xion.feeabs.v1beta1.Epoch.EpochInfo build() {
        xion.feeabs.v1beta1.Epoch.EpochInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public xion.feeabs.v1beta1.Epoch.EpochInfo buildPartial() {
        xion.feeabs.v1beta1.Epoch.EpochInfo result = new xion.feeabs.v1beta1.Epoch.EpochInfo(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(xion.feeabs.v1beta1.Epoch.EpochInfo result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.identifier_ = identifier_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.startTime_ = startTimeBuilder_ == null
              ? startTime_
              : startTimeBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.duration_ = durationBuilder_ == null
              ? duration_
              : durationBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.currentEpoch_ = currentEpoch_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.currentEpochStartTime_ = currentEpochStartTimeBuilder_ == null
              ? currentEpochStartTime_
              : currentEpochStartTimeBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.epochCountingStarted_ = epochCountingStarted_;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.currentEpochStartHeight_ = currentEpochStartHeight_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof xion.feeabs.v1beta1.Epoch.EpochInfo) {
          return mergeFrom((xion.feeabs.v1beta1.Epoch.EpochInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(xion.feeabs.v1beta1.Epoch.EpochInfo other) {
        if (other == xion.feeabs.v1beta1.Epoch.EpochInfo.getDefaultInstance()) return this;
        if (!other.getIdentifier().isEmpty()) {
          identifier_ = other.identifier_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasStartTime()) {
          mergeStartTime(other.getStartTime());
        }
        if (other.hasDuration()) {
          mergeDuration(other.getDuration());
        }
        if (other.getCurrentEpoch() != 0L) {
          setCurrentEpoch(other.getCurrentEpoch());
        }
        if (other.hasCurrentEpochStartTime()) {
          mergeCurrentEpochStartTime(other.getCurrentEpochStartTime());
        }
        if (other.getEpochCountingStarted() != false) {
          setEpochCountingStarted(other.getEpochCountingStarted());
        }
        if (other.getCurrentEpochStartHeight() != 0L) {
          setCurrentEpochStartHeight(other.getCurrentEpochStartHeight());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                identifier_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getStartTimeFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getDurationFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 32: {
                currentEpoch_ = input.readInt64();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 42: {
                input.readMessage(
                    getCurrentEpochStartTimeFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              case 48: {
                epochCountingStarted_ = input.readBool();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              case 64: {
                currentEpochStartHeight_ = input.readInt64();
                bitField0_ |= 0x00000040;
                break;
              } // case 64
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object identifier_ = "";
      /**
       * <pre>
       * identifier is a unique reference to this particular timer.
       * </pre>
       *
       * <code>string identifier = 1 [json_name = "identifier"];</code>
       * @return The identifier.
       */
      public java.lang.String getIdentifier() {
        java.lang.Object ref = identifier_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          identifier_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * identifier is a unique reference to this particular timer.
       * </pre>
       *
       * <code>string identifier = 1 [json_name = "identifier"];</code>
       * @return The bytes for identifier.
       */
      public com.google.protobuf.ByteString
          getIdentifierBytes() {
        java.lang.Object ref = identifier_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          identifier_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * identifier is a unique reference to this particular timer.
       * </pre>
       *
       * <code>string identifier = 1 [json_name = "identifier"];</code>
       * @param value The identifier to set.
       * @return This builder for chaining.
       */
      public Builder setIdentifier(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        identifier_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * identifier is a unique reference to this particular timer.
       * </pre>
       *
       * <code>string identifier = 1 [json_name = "identifier"];</code>
       * @return This builder for chaining.
       */
      public Builder clearIdentifier() {
        identifier_ = getDefaultInstance().getIdentifier();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * identifier is a unique reference to this particular timer.
       * </pre>
       *
       * <code>string identifier = 1 [json_name = "identifier"];</code>
       * @param value The bytes for identifier to set.
       * @return This builder for chaining.
       */
      public Builder setIdentifierBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        identifier_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private com.google.protobuf.Timestamp startTime_;
      private com.google.protobuf.SingleFieldBuilder<
          com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> startTimeBuilder_;
      /**
       * <pre>
       * start_time is the time at which the timer first ever ticks.
       * If start_time is in the future, the epoch will not begin until the start
       * time.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp start_time = 2 [json_name = "startTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"start_time&#92;"", (.gogoproto.stdtime) = true];</code>
       * @return Whether the startTime field is set.
       */
      public boolean hasStartTime() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * start_time is the time at which the timer first ever ticks.
       * If start_time is in the future, the epoch will not begin until the start
       * time.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp start_time = 2 [json_name = "startTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"start_time&#92;"", (.gogoproto.stdtime) = true];</code>
       * @return The startTime.
       */
      public com.google.protobuf.Timestamp getStartTime() {
        if (startTimeBuilder_ == null) {
          return startTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : startTime_;
        } else {
          return startTimeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * start_time is the time at which the timer first ever ticks.
       * If start_time is in the future, the epoch will not begin until the start
       * time.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp start_time = 2 [json_name = "startTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"start_time&#92;"", (.gogoproto.stdtime) = true];</code>
       */
      public Builder setStartTime(com.google.protobuf.Timestamp value) {
        if (startTimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          startTime_ = value;
        } else {
          startTimeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * start_time is the time at which the timer first ever ticks.
       * If start_time is in the future, the epoch will not begin until the start
       * time.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp start_time = 2 [json_name = "startTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"start_time&#92;"", (.gogoproto.stdtime) = true];</code>
       */
      public Builder setStartTime(
          com.google.protobuf.Timestamp.Builder builderForValue) {
        if (startTimeBuilder_ == null) {
          startTime_ = builderForValue.build();
        } else {
          startTimeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * start_time is the time at which the timer first ever ticks.
       * If start_time is in the future, the epoch will not begin until the start
       * time.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp start_time = 2 [json_name = "startTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"start_time&#92;"", (.gogoproto.stdtime) = true];</code>
       */
      public Builder mergeStartTime(com.google.protobuf.Timestamp value) {
        if (startTimeBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            startTime_ != null &&
            startTime_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
            getStartTimeBuilder().mergeFrom(value);
          } else {
            startTime_ = value;
          }
        } else {
          startTimeBuilder_.mergeFrom(value);
        }
        if (startTime_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * start_time is the time at which the timer first ever ticks.
       * If start_time is in the future, the epoch will not begin until the start
       * time.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp start_time = 2 [json_name = "startTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"start_time&#92;"", (.gogoproto.stdtime) = true];</code>
       */
      public Builder clearStartTime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        startTime_ = null;
        if (startTimeBuilder_ != null) {
          startTimeBuilder_.dispose();
          startTimeBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * start_time is the time at which the timer first ever ticks.
       * If start_time is in the future, the epoch will not begin until the start
       * time.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp start_time = 2 [json_name = "startTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"start_time&#92;"", (.gogoproto.stdtime) = true];</code>
       */
      public com.google.protobuf.Timestamp.Builder getStartTimeBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getStartTimeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * start_time is the time at which the timer first ever ticks.
       * If start_time is in the future, the epoch will not begin until the start
       * time.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp start_time = 2 [json_name = "startTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"start_time&#92;"", (.gogoproto.stdtime) = true];</code>
       */
      public com.google.protobuf.TimestampOrBuilder getStartTimeOrBuilder() {
        if (startTimeBuilder_ != null) {
          return startTimeBuilder_.getMessageOrBuilder();
        } else {
          return startTime_ == null ?
              com.google.protobuf.Timestamp.getDefaultInstance() : startTime_;
        }
      }
      /**
       * <pre>
       * start_time is the time at which the timer first ever ticks.
       * If start_time is in the future, the epoch will not begin until the start
       * time.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp start_time = 2 [json_name = "startTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"start_time&#92;"", (.gogoproto.stdtime) = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
          getStartTimeFieldBuilder() {
        if (startTimeBuilder_ == null) {
          startTimeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                  getStartTime(),
                  getParentForChildren(),
                  isClean());
          startTime_ = null;
        }
        return startTimeBuilder_;
      }

      private com.google.protobuf.Duration duration_;
      private com.google.protobuf.SingleFieldBuilder<
          com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> durationBuilder_;
      /**
       * <pre>
       * duration is the time in between epoch ticks.
       * In order for intended behavior to be met, duration should
       * be greater than the chains expected block time.
       * Duration must be non-zero.
       * </pre>
       *
       * <code>.google.protobuf.Duration duration = 3 [json_name = "duration", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "duration,omitempty", (.gogoproto.moretags) = "yaml:&#92;"duration&#92;"", (.gogoproto.stdduration) = true];</code>
       * @return Whether the duration field is set.
       */
      public boolean hasDuration() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * duration is the time in between epoch ticks.
       * In order for intended behavior to be met, duration should
       * be greater than the chains expected block time.
       * Duration must be non-zero.
       * </pre>
       *
       * <code>.google.protobuf.Duration duration = 3 [json_name = "duration", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "duration,omitempty", (.gogoproto.moretags) = "yaml:&#92;"duration&#92;"", (.gogoproto.stdduration) = true];</code>
       * @return The duration.
       */
      public com.google.protobuf.Duration getDuration() {
        if (durationBuilder_ == null) {
          return duration_ == null ? com.google.protobuf.Duration.getDefaultInstance() : duration_;
        } else {
          return durationBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * duration is the time in between epoch ticks.
       * In order for intended behavior to be met, duration should
       * be greater than the chains expected block time.
       * Duration must be non-zero.
       * </pre>
       *
       * <code>.google.protobuf.Duration duration = 3 [json_name = "duration", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "duration,omitempty", (.gogoproto.moretags) = "yaml:&#92;"duration&#92;"", (.gogoproto.stdduration) = true];</code>
       */
      public Builder setDuration(com.google.protobuf.Duration value) {
        if (durationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          duration_ = value;
        } else {
          durationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * duration is the time in between epoch ticks.
       * In order for intended behavior to be met, duration should
       * be greater than the chains expected block time.
       * Duration must be non-zero.
       * </pre>
       *
       * <code>.google.protobuf.Duration duration = 3 [json_name = "duration", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "duration,omitempty", (.gogoproto.moretags) = "yaml:&#92;"duration&#92;"", (.gogoproto.stdduration) = true];</code>
       */
      public Builder setDuration(
          com.google.protobuf.Duration.Builder builderForValue) {
        if (durationBuilder_ == null) {
          duration_ = builderForValue.build();
        } else {
          durationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * duration is the time in between epoch ticks.
       * In order for intended behavior to be met, duration should
       * be greater than the chains expected block time.
       * Duration must be non-zero.
       * </pre>
       *
       * <code>.google.protobuf.Duration duration = 3 [json_name = "duration", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "duration,omitempty", (.gogoproto.moretags) = "yaml:&#92;"duration&#92;"", (.gogoproto.stdduration) = true];</code>
       */
      public Builder mergeDuration(com.google.protobuf.Duration value) {
        if (durationBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            duration_ != null &&
            duration_ != com.google.protobuf.Duration.getDefaultInstance()) {
            getDurationBuilder().mergeFrom(value);
          } else {
            duration_ = value;
          }
        } else {
          durationBuilder_.mergeFrom(value);
        }
        if (duration_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * duration is the time in between epoch ticks.
       * In order for intended behavior to be met, duration should
       * be greater than the chains expected block time.
       * Duration must be non-zero.
       * </pre>
       *
       * <code>.google.protobuf.Duration duration = 3 [json_name = "duration", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "duration,omitempty", (.gogoproto.moretags) = "yaml:&#92;"duration&#92;"", (.gogoproto.stdduration) = true];</code>
       */
      public Builder clearDuration() {
        bitField0_ = (bitField0_ & ~0x00000004);
        duration_ = null;
        if (durationBuilder_ != null) {
          durationBuilder_.dispose();
          durationBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * duration is the time in between epoch ticks.
       * In order for intended behavior to be met, duration should
       * be greater than the chains expected block time.
       * Duration must be non-zero.
       * </pre>
       *
       * <code>.google.protobuf.Duration duration = 3 [json_name = "duration", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "duration,omitempty", (.gogoproto.moretags) = "yaml:&#92;"duration&#92;"", (.gogoproto.stdduration) = true];</code>
       */
      public com.google.protobuf.Duration.Builder getDurationBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getDurationFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * duration is the time in between epoch ticks.
       * In order for intended behavior to be met, duration should
       * be greater than the chains expected block time.
       * Duration must be non-zero.
       * </pre>
       *
       * <code>.google.protobuf.Duration duration = 3 [json_name = "duration", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "duration,omitempty", (.gogoproto.moretags) = "yaml:&#92;"duration&#92;"", (.gogoproto.stdduration) = true];</code>
       */
      public com.google.protobuf.DurationOrBuilder getDurationOrBuilder() {
        if (durationBuilder_ != null) {
          return durationBuilder_.getMessageOrBuilder();
        } else {
          return duration_ == null ?
              com.google.protobuf.Duration.getDefaultInstance() : duration_;
        }
      }
      /**
       * <pre>
       * duration is the time in between epoch ticks.
       * In order for intended behavior to be met, duration should
       * be greater than the chains expected block time.
       * Duration must be non-zero.
       * </pre>
       *
       * <code>.google.protobuf.Duration duration = 3 [json_name = "duration", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "duration,omitempty", (.gogoproto.moretags) = "yaml:&#92;"duration&#92;"", (.gogoproto.stdduration) = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
          getDurationFieldBuilder() {
        if (durationBuilder_ == null) {
          durationBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                  getDuration(),
                  getParentForChildren(),
                  isClean());
          duration_ = null;
        }
        return durationBuilder_;
      }

      private long currentEpoch_ ;
      /**
       * <pre>
       * current_epoch is the current epoch number, or in other words,
       * how many times has the timer 'ticked'.
       * The first tick (current_epoch=1) is defined as
       * the first block whose blocktime is greater than the EpochInfo start_time.
       * </pre>
       *
       * <code>int64 current_epoch = 4 [json_name = "currentEpoch"];</code>
       * @return The currentEpoch.
       */
      @java.lang.Override
      public long getCurrentEpoch() {
        return currentEpoch_;
      }
      /**
       * <pre>
       * current_epoch is the current epoch number, or in other words,
       * how many times has the timer 'ticked'.
       * The first tick (current_epoch=1) is defined as
       * the first block whose blocktime is greater than the EpochInfo start_time.
       * </pre>
       *
       * <code>int64 current_epoch = 4 [json_name = "currentEpoch"];</code>
       * @param value The currentEpoch to set.
       * @return This builder for chaining.
       */
      public Builder setCurrentEpoch(long value) {

        currentEpoch_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * current_epoch is the current epoch number, or in other words,
       * how many times has the timer 'ticked'.
       * The first tick (current_epoch=1) is defined as
       * the first block whose blocktime is greater than the EpochInfo start_time.
       * </pre>
       *
       * <code>int64 current_epoch = 4 [json_name = "currentEpoch"];</code>
       * @return This builder for chaining.
       */
      public Builder clearCurrentEpoch() {
        bitField0_ = (bitField0_ & ~0x00000008);
        currentEpoch_ = 0L;
        onChanged();
        return this;
      }

      private com.google.protobuf.Timestamp currentEpochStartTime_;
      private com.google.protobuf.SingleFieldBuilder<
          com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> currentEpochStartTimeBuilder_;
      /**
       * <pre>
       * current_epoch_start_time describes the start time of the current timer
       * interval. The interval is (current_epoch_start_time,
       * current_epoch_start_time + duration] When the timer ticks, this is set to
       * current_epoch_start_time = last_epoch_start_time + duration only one timer
       * tick for a given identifier can occur per block.
       *
       * NOTE! The current_epoch_start_time may diverge significantly from the
       * wall-clock time the epoch began at. Wall-clock time of epoch start may be
       * &gt;&gt; current_epoch_start_time. Suppose current_epoch_start_time = 10,
       * duration = 5. Suppose the chain goes offline at t=14, and comes back online
       * at t=30, and produces blocks at every successive time. (t=31, 32, etc.)
       * * The t=30 block will start the epoch for (10, 15]
       * * The t=31 block will start the epoch for (15, 20]
       * * The t=32 block will start the epoch for (20, 25]
       * * The t=33 block will start the epoch for (25, 30]
       * * The t=34 block will start the epoch for (30, 35]
       * * The **t=36** block will start the epoch for (35, 40]
       * </pre>
       *
       * <code>.google.protobuf.Timestamp current_epoch_start_time = 5 [json_name = "currentEpochStartTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"current_epoch_start_time&#92;"", (.gogoproto.stdtime) = true];</code>
       * @return Whether the currentEpochStartTime field is set.
       */
      public boolean hasCurrentEpochStartTime() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * current_epoch_start_time describes the start time of the current timer
       * interval. The interval is (current_epoch_start_time,
       * current_epoch_start_time + duration] When the timer ticks, this is set to
       * current_epoch_start_time = last_epoch_start_time + duration only one timer
       * tick for a given identifier can occur per block.
       *
       * NOTE! The current_epoch_start_time may diverge significantly from the
       * wall-clock time the epoch began at. Wall-clock time of epoch start may be
       * &gt;&gt; current_epoch_start_time. Suppose current_epoch_start_time = 10,
       * duration = 5. Suppose the chain goes offline at t=14, and comes back online
       * at t=30, and produces blocks at every successive time. (t=31, 32, etc.)
       * * The t=30 block will start the epoch for (10, 15]
       * * The t=31 block will start the epoch for (15, 20]
       * * The t=32 block will start the epoch for (20, 25]
       * * The t=33 block will start the epoch for (25, 30]
       * * The t=34 block will start the epoch for (30, 35]
       * * The **t=36** block will start the epoch for (35, 40]
       * </pre>
       *
       * <code>.google.protobuf.Timestamp current_epoch_start_time = 5 [json_name = "currentEpochStartTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"current_epoch_start_time&#92;"", (.gogoproto.stdtime) = true];</code>
       * @return The currentEpochStartTime.
       */
      public com.google.protobuf.Timestamp getCurrentEpochStartTime() {
        if (currentEpochStartTimeBuilder_ == null) {
          return currentEpochStartTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : currentEpochStartTime_;
        } else {
          return currentEpochStartTimeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * current_epoch_start_time describes the start time of the current timer
       * interval. The interval is (current_epoch_start_time,
       * current_epoch_start_time + duration] When the timer ticks, this is set to
       * current_epoch_start_time = last_epoch_start_time + duration only one timer
       * tick for a given identifier can occur per block.
       *
       * NOTE! The current_epoch_start_time may diverge significantly from the
       * wall-clock time the epoch began at. Wall-clock time of epoch start may be
       * &gt;&gt; current_epoch_start_time. Suppose current_epoch_start_time = 10,
       * duration = 5. Suppose the chain goes offline at t=14, and comes back online
       * at t=30, and produces blocks at every successive time. (t=31, 32, etc.)
       * * The t=30 block will start the epoch for (10, 15]
       * * The t=31 block will start the epoch for (15, 20]
       * * The t=32 block will start the epoch for (20, 25]
       * * The t=33 block will start the epoch for (25, 30]
       * * The t=34 block will start the epoch for (30, 35]
       * * The **t=36** block will start the epoch for (35, 40]
       * </pre>
       *
       * <code>.google.protobuf.Timestamp current_epoch_start_time = 5 [json_name = "currentEpochStartTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"current_epoch_start_time&#92;"", (.gogoproto.stdtime) = true];</code>
       */
      public Builder setCurrentEpochStartTime(com.google.protobuf.Timestamp value) {
        if (currentEpochStartTimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          currentEpochStartTime_ = value;
        } else {
          currentEpochStartTimeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * current_epoch_start_time describes the start time of the current timer
       * interval. The interval is (current_epoch_start_time,
       * current_epoch_start_time + duration] When the timer ticks, this is set to
       * current_epoch_start_time = last_epoch_start_time + duration only one timer
       * tick for a given identifier can occur per block.
       *
       * NOTE! The current_epoch_start_time may diverge significantly from the
       * wall-clock time the epoch began at. Wall-clock time of epoch start may be
       * &gt;&gt; current_epoch_start_time. Suppose current_epoch_start_time = 10,
       * duration = 5. Suppose the chain goes offline at t=14, and comes back online
       * at t=30, and produces blocks at every successive time. (t=31, 32, etc.)
       * * The t=30 block will start the epoch for (10, 15]
       * * The t=31 block will start the epoch for (15, 20]
       * * The t=32 block will start the epoch for (20, 25]
       * * The t=33 block will start the epoch for (25, 30]
       * * The t=34 block will start the epoch for (30, 35]
       * * The **t=36** block will start the epoch for (35, 40]
       * </pre>
       *
       * <code>.google.protobuf.Timestamp current_epoch_start_time = 5 [json_name = "currentEpochStartTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"current_epoch_start_time&#92;"", (.gogoproto.stdtime) = true];</code>
       */
      public Builder setCurrentEpochStartTime(
          com.google.protobuf.Timestamp.Builder builderForValue) {
        if (currentEpochStartTimeBuilder_ == null) {
          currentEpochStartTime_ = builderForValue.build();
        } else {
          currentEpochStartTimeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * current_epoch_start_time describes the start time of the current timer
       * interval. The interval is (current_epoch_start_time,
       * current_epoch_start_time + duration] When the timer ticks, this is set to
       * current_epoch_start_time = last_epoch_start_time + duration only one timer
       * tick for a given identifier can occur per block.
       *
       * NOTE! The current_epoch_start_time may diverge significantly from the
       * wall-clock time the epoch began at. Wall-clock time of epoch start may be
       * &gt;&gt; current_epoch_start_time. Suppose current_epoch_start_time = 10,
       * duration = 5. Suppose the chain goes offline at t=14, and comes back online
       * at t=30, and produces blocks at every successive time. (t=31, 32, etc.)
       * * The t=30 block will start the epoch for (10, 15]
       * * The t=31 block will start the epoch for (15, 20]
       * * The t=32 block will start the epoch for (20, 25]
       * * The t=33 block will start the epoch for (25, 30]
       * * The t=34 block will start the epoch for (30, 35]
       * * The **t=36** block will start the epoch for (35, 40]
       * </pre>
       *
       * <code>.google.protobuf.Timestamp current_epoch_start_time = 5 [json_name = "currentEpochStartTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"current_epoch_start_time&#92;"", (.gogoproto.stdtime) = true];</code>
       */
      public Builder mergeCurrentEpochStartTime(com.google.protobuf.Timestamp value) {
        if (currentEpochStartTimeBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0) &&
            currentEpochStartTime_ != null &&
            currentEpochStartTime_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
            getCurrentEpochStartTimeBuilder().mergeFrom(value);
          } else {
            currentEpochStartTime_ = value;
          }
        } else {
          currentEpochStartTimeBuilder_.mergeFrom(value);
        }
        if (currentEpochStartTime_ != null) {
          bitField0_ |= 0x00000010;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * current_epoch_start_time describes the start time of the current timer
       * interval. The interval is (current_epoch_start_time,
       * current_epoch_start_time + duration] When the timer ticks, this is set to
       * current_epoch_start_time = last_epoch_start_time + duration only one timer
       * tick for a given identifier can occur per block.
       *
       * NOTE! The current_epoch_start_time may diverge significantly from the
       * wall-clock time the epoch began at. Wall-clock time of epoch start may be
       * &gt;&gt; current_epoch_start_time. Suppose current_epoch_start_time = 10,
       * duration = 5. Suppose the chain goes offline at t=14, and comes back online
       * at t=30, and produces blocks at every successive time. (t=31, 32, etc.)
       * * The t=30 block will start the epoch for (10, 15]
       * * The t=31 block will start the epoch for (15, 20]
       * * The t=32 block will start the epoch for (20, 25]
       * * The t=33 block will start the epoch for (25, 30]
       * * The t=34 block will start the epoch for (30, 35]
       * * The **t=36** block will start the epoch for (35, 40]
       * </pre>
       *
       * <code>.google.protobuf.Timestamp current_epoch_start_time = 5 [json_name = "currentEpochStartTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"current_epoch_start_time&#92;"", (.gogoproto.stdtime) = true];</code>
       */
      public Builder clearCurrentEpochStartTime() {
        bitField0_ = (bitField0_ & ~0x00000010);
        currentEpochStartTime_ = null;
        if (currentEpochStartTimeBuilder_ != null) {
          currentEpochStartTimeBuilder_.dispose();
          currentEpochStartTimeBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * current_epoch_start_time describes the start time of the current timer
       * interval. The interval is (current_epoch_start_time,
       * current_epoch_start_time + duration] When the timer ticks, this is set to
       * current_epoch_start_time = last_epoch_start_time + duration only one timer
       * tick for a given identifier can occur per block.
       *
       * NOTE! The current_epoch_start_time may diverge significantly from the
       * wall-clock time the epoch began at. Wall-clock time of epoch start may be
       * &gt;&gt; current_epoch_start_time. Suppose current_epoch_start_time = 10,
       * duration = 5. Suppose the chain goes offline at t=14, and comes back online
       * at t=30, and produces blocks at every successive time. (t=31, 32, etc.)
       * * The t=30 block will start the epoch for (10, 15]
       * * The t=31 block will start the epoch for (15, 20]
       * * The t=32 block will start the epoch for (20, 25]
       * * The t=33 block will start the epoch for (25, 30]
       * * The t=34 block will start the epoch for (30, 35]
       * * The **t=36** block will start the epoch for (35, 40]
       * </pre>
       *
       * <code>.google.protobuf.Timestamp current_epoch_start_time = 5 [json_name = "currentEpochStartTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"current_epoch_start_time&#92;"", (.gogoproto.stdtime) = true];</code>
       */
      public com.google.protobuf.Timestamp.Builder getCurrentEpochStartTimeBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getCurrentEpochStartTimeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * current_epoch_start_time describes the start time of the current timer
       * interval. The interval is (current_epoch_start_time,
       * current_epoch_start_time + duration] When the timer ticks, this is set to
       * current_epoch_start_time = last_epoch_start_time + duration only one timer
       * tick for a given identifier can occur per block.
       *
       * NOTE! The current_epoch_start_time may diverge significantly from the
       * wall-clock time the epoch began at. Wall-clock time of epoch start may be
       * &gt;&gt; current_epoch_start_time. Suppose current_epoch_start_time = 10,
       * duration = 5. Suppose the chain goes offline at t=14, and comes back online
       * at t=30, and produces blocks at every successive time. (t=31, 32, etc.)
       * * The t=30 block will start the epoch for (10, 15]
       * * The t=31 block will start the epoch for (15, 20]
       * * The t=32 block will start the epoch for (20, 25]
       * * The t=33 block will start the epoch for (25, 30]
       * * The t=34 block will start the epoch for (30, 35]
       * * The **t=36** block will start the epoch for (35, 40]
       * </pre>
       *
       * <code>.google.protobuf.Timestamp current_epoch_start_time = 5 [json_name = "currentEpochStartTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"current_epoch_start_time&#92;"", (.gogoproto.stdtime) = true];</code>
       */
      public com.google.protobuf.TimestampOrBuilder getCurrentEpochStartTimeOrBuilder() {
        if (currentEpochStartTimeBuilder_ != null) {
          return currentEpochStartTimeBuilder_.getMessageOrBuilder();
        } else {
          return currentEpochStartTime_ == null ?
              com.google.protobuf.Timestamp.getDefaultInstance() : currentEpochStartTime_;
        }
      }
      /**
       * <pre>
       * current_epoch_start_time describes the start time of the current timer
       * interval. The interval is (current_epoch_start_time,
       * current_epoch_start_time + duration] When the timer ticks, this is set to
       * current_epoch_start_time = last_epoch_start_time + duration only one timer
       * tick for a given identifier can occur per block.
       *
       * NOTE! The current_epoch_start_time may diverge significantly from the
       * wall-clock time the epoch began at. Wall-clock time of epoch start may be
       * &gt;&gt; current_epoch_start_time. Suppose current_epoch_start_time = 10,
       * duration = 5. Suppose the chain goes offline at t=14, and comes back online
       * at t=30, and produces blocks at every successive time. (t=31, 32, etc.)
       * * The t=30 block will start the epoch for (10, 15]
       * * The t=31 block will start the epoch for (15, 20]
       * * The t=32 block will start the epoch for (20, 25]
       * * The t=33 block will start the epoch for (25, 30]
       * * The t=34 block will start the epoch for (30, 35]
       * * The **t=36** block will start the epoch for (35, 40]
       * </pre>
       *
       * <code>.google.protobuf.Timestamp current_epoch_start_time = 5 [json_name = "currentEpochStartTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"current_epoch_start_time&#92;"", (.gogoproto.stdtime) = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
          getCurrentEpochStartTimeFieldBuilder() {
        if (currentEpochStartTimeBuilder_ == null) {
          currentEpochStartTimeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                  getCurrentEpochStartTime(),
                  getParentForChildren(),
                  isClean());
          currentEpochStartTime_ = null;
        }
        return currentEpochStartTimeBuilder_;
      }

      private boolean epochCountingStarted_ ;
      /**
       * <pre>
       * epoch_counting_started is a boolean, that indicates whether this
       * epoch timer has began yet.
       * </pre>
       *
       * <code>bool epoch_counting_started = 6 [json_name = "epochCountingStarted"];</code>
       * @return The epochCountingStarted.
       */
      @java.lang.Override
      public boolean getEpochCountingStarted() {
        return epochCountingStarted_;
      }
      /**
       * <pre>
       * epoch_counting_started is a boolean, that indicates whether this
       * epoch timer has began yet.
       * </pre>
       *
       * <code>bool epoch_counting_started = 6 [json_name = "epochCountingStarted"];</code>
       * @param value The epochCountingStarted to set.
       * @return This builder for chaining.
       */
      public Builder setEpochCountingStarted(boolean value) {

        epochCountingStarted_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * epoch_counting_started is a boolean, that indicates whether this
       * epoch timer has began yet.
       * </pre>
       *
       * <code>bool epoch_counting_started = 6 [json_name = "epochCountingStarted"];</code>
       * @return This builder for chaining.
       */
      public Builder clearEpochCountingStarted() {
        bitField0_ = (bitField0_ & ~0x00000020);
        epochCountingStarted_ = false;
        onChanged();
        return this;
      }

      private long currentEpochStartHeight_ ;
      /**
       * <pre>
       * current_epoch_start_height is the block height at which the current epoch
       * started. (The block height at which the timer last ticked)
       * </pre>
       *
       * <code>int64 current_epoch_start_height = 8 [json_name = "currentEpochStartHeight"];</code>
       * @return The currentEpochStartHeight.
       */
      @java.lang.Override
      public long getCurrentEpochStartHeight() {
        return currentEpochStartHeight_;
      }
      /**
       * <pre>
       * current_epoch_start_height is the block height at which the current epoch
       * started. (The block height at which the timer last ticked)
       * </pre>
       *
       * <code>int64 current_epoch_start_height = 8 [json_name = "currentEpochStartHeight"];</code>
       * @param value The currentEpochStartHeight to set.
       * @return This builder for chaining.
       */
      public Builder setCurrentEpochStartHeight(long value) {

        currentEpochStartHeight_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * current_epoch_start_height is the block height at which the current epoch
       * started. (The block height at which the timer last ticked)
       * </pre>
       *
       * <code>int64 current_epoch_start_height = 8 [json_name = "currentEpochStartHeight"];</code>
       * @return This builder for chaining.
       */
      public Builder clearCurrentEpochStartHeight() {
        bitField0_ = (bitField0_ & ~0x00000040);
        currentEpochStartHeight_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:xion.feeabs.v1beta1.EpochInfo)
    }

    // @@protoc_insertion_point(class_scope:xion.feeabs.v1beta1.EpochInfo)
    private static final xion.feeabs.v1beta1.Epoch.EpochInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new xion.feeabs.v1beta1.Epoch.EpochInfo();
    }

    public static xion.feeabs.v1beta1.Epoch.EpochInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<EpochInfo>
        PARSER = new com.google.protobuf.AbstractParser<EpochInfo>() {
      @java.lang.Override
      public EpochInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<EpochInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<EpochInfo> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public xion.feeabs.v1beta1.Epoch.EpochInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ExponentialBackoffOrBuilder extends
      // @@protoc_insertion_point(interface_extends:xion.feeabs.v1beta1.ExponentialBackoff)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int64 jump = 1 [json_name = "jump"];</code>
     * @return The jump.
     */
    long getJump();

    /**
     * <code>int64 future_epoch = 2 [json_name = "futureEpoch"];</code>
     * @return The futureEpoch.
     */
    long getFutureEpoch();
  }
  /**
   * <pre>
   * ExponentialBackoff defines backoff epoch
   * </pre>
   *
   * Protobuf type {@code xion.feeabs.v1beta1.ExponentialBackoff}
   */
  public static final class ExponentialBackoff extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:xion.feeabs.v1beta1.ExponentialBackoff)
      ExponentialBackoffOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 4,
        /* suffix= */ "",
        ExponentialBackoff.class.getName());
    }
    // Use ExponentialBackoff.newBuilder() to construct.
    private ExponentialBackoff(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private ExponentialBackoff() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return xion.feeabs.v1beta1.Epoch.internal_static_xion_feeabs_v1beta1_ExponentialBackoff_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return xion.feeabs.v1beta1.Epoch.internal_static_xion_feeabs_v1beta1_ExponentialBackoff_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              xion.feeabs.v1beta1.Epoch.ExponentialBackoff.class, xion.feeabs.v1beta1.Epoch.ExponentialBackoff.Builder.class);
    }

    public static final int JUMP_FIELD_NUMBER = 1;
    private long jump_ = 0L;
    /**
     * <code>int64 jump = 1 [json_name = "jump"];</code>
     * @return The jump.
     */
    @java.lang.Override
    public long getJump() {
      return jump_;
    }

    public static final int FUTURE_EPOCH_FIELD_NUMBER = 2;
    private long futureEpoch_ = 0L;
    /**
     * <code>int64 future_epoch = 2 [json_name = "futureEpoch"];</code>
     * @return The futureEpoch.
     */
    @java.lang.Override
    public long getFutureEpoch() {
      return futureEpoch_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (jump_ != 0L) {
        output.writeInt64(1, jump_);
      }
      if (futureEpoch_ != 0L) {
        output.writeInt64(2, futureEpoch_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (jump_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, jump_);
      }
      if (futureEpoch_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, futureEpoch_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof xion.feeabs.v1beta1.Epoch.ExponentialBackoff)) {
        return super.equals(obj);
      }
      xion.feeabs.v1beta1.Epoch.ExponentialBackoff other = (xion.feeabs.v1beta1.Epoch.ExponentialBackoff) obj;

      if (getJump()
          != other.getJump()) return false;
      if (getFutureEpoch()
          != other.getFutureEpoch()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + JUMP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getJump());
      hash = (37 * hash) + FUTURE_EPOCH_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getFutureEpoch());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static xion.feeabs.v1beta1.Epoch.ExponentialBackoff parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static xion.feeabs.v1beta1.Epoch.ExponentialBackoff parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static xion.feeabs.v1beta1.Epoch.ExponentialBackoff parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static xion.feeabs.v1beta1.Epoch.ExponentialBackoff parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static xion.feeabs.v1beta1.Epoch.ExponentialBackoff parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static xion.feeabs.v1beta1.Epoch.ExponentialBackoff parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static xion.feeabs.v1beta1.Epoch.ExponentialBackoff parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static xion.feeabs.v1beta1.Epoch.ExponentialBackoff parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static xion.feeabs.v1beta1.Epoch.ExponentialBackoff parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static xion.feeabs.v1beta1.Epoch.ExponentialBackoff parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static xion.feeabs.v1beta1.Epoch.ExponentialBackoff parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static xion.feeabs.v1beta1.Epoch.ExponentialBackoff parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(xion.feeabs.v1beta1.Epoch.ExponentialBackoff prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * ExponentialBackoff defines backoff epoch
     * </pre>
     *
     * Protobuf type {@code xion.feeabs.v1beta1.ExponentialBackoff}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:xion.feeabs.v1beta1.ExponentialBackoff)
        xion.feeabs.v1beta1.Epoch.ExponentialBackoffOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return xion.feeabs.v1beta1.Epoch.internal_static_xion_feeabs_v1beta1_ExponentialBackoff_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return xion.feeabs.v1beta1.Epoch.internal_static_xion_feeabs_v1beta1_ExponentialBackoff_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                xion.feeabs.v1beta1.Epoch.ExponentialBackoff.class, xion.feeabs.v1beta1.Epoch.ExponentialBackoff.Builder.class);
      }

      // Construct using xion.feeabs.v1beta1.Epoch.ExponentialBackoff.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        jump_ = 0L;
        futureEpoch_ = 0L;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return xion.feeabs.v1beta1.Epoch.internal_static_xion_feeabs_v1beta1_ExponentialBackoff_descriptor;
      }

      @java.lang.Override
      public xion.feeabs.v1beta1.Epoch.ExponentialBackoff getDefaultInstanceForType() {
        return xion.feeabs.v1beta1.Epoch.ExponentialBackoff.getDefaultInstance();
      }

      @java.lang.Override
      public xion.feeabs.v1beta1.Epoch.ExponentialBackoff build() {
        xion.feeabs.v1beta1.Epoch.ExponentialBackoff result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public xion.feeabs.v1beta1.Epoch.ExponentialBackoff buildPartial() {
        xion.feeabs.v1beta1.Epoch.ExponentialBackoff result = new xion.feeabs.v1beta1.Epoch.ExponentialBackoff(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(xion.feeabs.v1beta1.Epoch.ExponentialBackoff result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.jump_ = jump_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.futureEpoch_ = futureEpoch_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof xion.feeabs.v1beta1.Epoch.ExponentialBackoff) {
          return mergeFrom((xion.feeabs.v1beta1.Epoch.ExponentialBackoff)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(xion.feeabs.v1beta1.Epoch.ExponentialBackoff other) {
        if (other == xion.feeabs.v1beta1.Epoch.ExponentialBackoff.getDefaultInstance()) return this;
        if (other.getJump() != 0L) {
          setJump(other.getJump());
        }
        if (other.getFutureEpoch() != 0L) {
          setFutureEpoch(other.getFutureEpoch());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                jump_ = input.readInt64();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                futureEpoch_ = input.readInt64();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private long jump_ ;
      /**
       * <code>int64 jump = 1 [json_name = "jump"];</code>
       * @return The jump.
       */
      @java.lang.Override
      public long getJump() {
        return jump_;
      }
      /**
       * <code>int64 jump = 1 [json_name = "jump"];</code>
       * @param value The jump to set.
       * @return This builder for chaining.
       */
      public Builder setJump(long value) {

        jump_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int64 jump = 1 [json_name = "jump"];</code>
       * @return This builder for chaining.
       */
      public Builder clearJump() {
        bitField0_ = (bitField0_ & ~0x00000001);
        jump_ = 0L;
        onChanged();
        return this;
      }

      private long futureEpoch_ ;
      /**
       * <code>int64 future_epoch = 2 [json_name = "futureEpoch"];</code>
       * @return The futureEpoch.
       */
      @java.lang.Override
      public long getFutureEpoch() {
        return futureEpoch_;
      }
      /**
       * <code>int64 future_epoch = 2 [json_name = "futureEpoch"];</code>
       * @param value The futureEpoch to set.
       * @return This builder for chaining.
       */
      public Builder setFutureEpoch(long value) {

        futureEpoch_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>int64 future_epoch = 2 [json_name = "futureEpoch"];</code>
       * @return This builder for chaining.
       */
      public Builder clearFutureEpoch() {
        bitField0_ = (bitField0_ & ~0x00000002);
        futureEpoch_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:xion.feeabs.v1beta1.ExponentialBackoff)
    }

    // @@protoc_insertion_point(class_scope:xion.feeabs.v1beta1.ExponentialBackoff)
    private static final xion.feeabs.v1beta1.Epoch.ExponentialBackoff DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new xion.feeabs.v1beta1.Epoch.ExponentialBackoff();
    }

    public static xion.feeabs.v1beta1.Epoch.ExponentialBackoff getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ExponentialBackoff>
        PARSER = new com.google.protobuf.AbstractParser<ExponentialBackoff>() {
      @java.lang.Override
      public ExponentialBackoff parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ExponentialBackoff> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ExponentialBackoff> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public xion.feeabs.v1beta1.Epoch.ExponentialBackoff getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_xion_feeabs_v1beta1_EpochInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_xion_feeabs_v1beta1_EpochInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_xion_feeabs_v1beta1_ExponentialBackoff_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_xion_feeabs_v1beta1_ExponentialBackoff_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\037xion/feeabs/v1beta1/epoch.proto\022\023xion." +
      "feeabs.v1beta1\032\024gogoproto/gogo.proto\032\036go" +
      "ogle/protobuf/duration.proto\032\037google/pro" +
      "tobuf/timestamp.proto\"\220\004\n\tEpochInfo\022\036\n\ni" +
      "dentifier\030\001 \001(\tR\nidentifier\022X\n\nstart_tim" +
      "e\030\002 \001(\0132\032.google.protobuf.TimestampB\035\310\336\037" +
      "\000\362\336\037\021yaml:\"start_time\"\220\337\037\001R\tstartTime\022h\n" +
      "\010duration\030\003 \001(\0132\031.google.protobuf.Durati" +
      "onB1\310\336\037\000\352\336\037\022duration,omitempty\362\336\037\017yaml:\"" +
      "duration\"\230\337\037\001R\010duration\022#\n\rcurrent_epoch" +
      "\030\004 \001(\003R\014currentEpoch\022\200\001\n\030current_epoch_s" +
      "tart_time\030\005 \001(\0132\032.google.protobuf.Timest" +
      "ampB+\310\336\037\000\362\336\037\037yaml:\"current_epoch_start_t" +
      "ime\"\220\337\037\001R\025currentEpochStartTime\0224\n\026epoch" +
      "_counting_started\030\006 \001(\010R\024epochCountingSt" +
      "arted\022;\n\032current_epoch_start_height\030\010 \001(" +
      "\003R\027currentEpochStartHeightJ\004\010\007\020\010\"K\n\022Expo" +
      "nentialBackoff\022\022\n\004jump\030\001 \001(\003R\004jump\022!\n\014fu" +
      "ture_epoch\030\002 \001(\003R\013futureEpochB+Z)github." +
      "com/burnt-labs/xion/x/feeabs/typesb\006prot" +
      "o3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.GoGoProtos.getDescriptor(),
          com.google.protobuf.DurationProto.getDescriptor(),
          com.google.protobuf.TimestampProto.getDescriptor(),
        });
    internal_static_xion_feeabs_v1beta1_EpochInfo_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_xion_feeabs_v1beta1_EpochInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_xion_feeabs_v1beta1_EpochInfo_descriptor,
        new java.lang.String[] { "Identifier", "StartTime", "Duration", "CurrentEpoch", "CurrentEpochStartTime", "EpochCountingStarted", "CurrentEpochStartHeight", });
    internal_static_xion_feeabs_v1beta1_ExponentialBackoff_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_xion_feeabs_v1beta1_ExponentialBackoff_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_xion_feeabs_v1beta1_ExponentialBackoff_descriptor,
        new java.lang.String[] { "Jump", "FutureEpoch", });
    descriptor.resolveAllFeaturesImmutable();
    com.google.protobuf.GoGoProtos.getDescriptor();
    com.google.protobuf.DurationProto.getDescriptor();
    com.google.protobuf.TimestampProto.getDescriptor();
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.google.protobuf.GoGoProtos.jsontag);
    registry.add(com.google.protobuf.GoGoProtos.moretags);
    registry.add(com.google.protobuf.GoGoProtos.nullable);
    registry.add(com.google.protobuf.GoGoProtos.stdduration);
    registry.add(com.google.protobuf.GoGoProtos.stdtime);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
