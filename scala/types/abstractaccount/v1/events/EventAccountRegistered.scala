// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package abstractaccount.v1.events

/** EventAccountRegistered is emitted when an AbstractAccount is registered.
  */
@SerialVersionUID(0L)
final case class EventAccountRegistered(
    creator: _root_.scala.Predef.String = "",
    codeId: _root_.scala.Long = 0L,
    contractAddr: _root_.scala.Predef.String = "",
    accountNumber: _root_.scala.Long = 0L,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[EventAccountRegistered] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = creator
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = codeId
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(2, __value)
        }
      };
      
      {
        val __value = contractAddr
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = accountNumber
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(4, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = creator
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = codeId
        if (__v != 0L) {
          _output__.writeUInt64(2, __v)
        }
      };
      {
        val __v = contractAddr
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = accountNumber
        if (__v != 0L) {
          _output__.writeUInt64(4, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withCreator(__v: _root_.scala.Predef.String): EventAccountRegistered = copy(creator = __v)
    def withCodeId(__v: _root_.scala.Long): EventAccountRegistered = copy(codeId = __v)
    def withContractAddr(__v: _root_.scala.Predef.String): EventAccountRegistered = copy(contractAddr = __v)
    def withAccountNumber(__v: _root_.scala.Long): EventAccountRegistered = copy(accountNumber = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = creator
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = codeId
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = contractAddr
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = accountNumber
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(creator)
        case 2 => _root_.scalapb.descriptors.PLong(codeId)
        case 3 => _root_.scalapb.descriptors.PString(contractAddr)
        case 4 => _root_.scalapb.descriptors.PLong(accountNumber)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: abstractaccount.v1.events.EventAccountRegistered.type = abstractaccount.v1.events.EventAccountRegistered
    // @@protoc_insertion_point(GeneratedMessage[abstractaccount.v1.EventAccountRegistered])
}

object EventAccountRegistered extends scalapb.GeneratedMessageCompanion[abstractaccount.v1.events.EventAccountRegistered] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[abstractaccount.v1.events.EventAccountRegistered] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): abstractaccount.v1.events.EventAccountRegistered = {
    var __creator: _root_.scala.Predef.String = ""
    var __codeId: _root_.scala.Long = 0L
    var __contractAddr: _root_.scala.Predef.String = ""
    var __accountNumber: _root_.scala.Long = 0L
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __creator = _input__.readStringRequireUtf8()
        case 16 =>
          __codeId = _input__.readUInt64()
        case 26 =>
          __contractAddr = _input__.readStringRequireUtf8()
        case 32 =>
          __accountNumber = _input__.readUInt64()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    abstractaccount.v1.events.EventAccountRegistered(
        creator = __creator,
        codeId = __codeId,
        contractAddr = __contractAddr,
        accountNumber = __accountNumber,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[abstractaccount.v1.events.EventAccountRegistered] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      abstractaccount.v1.events.EventAccountRegistered(
        creator = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        codeId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        contractAddr = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        accountNumber = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = abstractaccount.v1.events.EventsProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = abstractaccount.v1.events.EventsProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = abstractaccount.v1.events.EventAccountRegistered(
    creator = "",
    codeId = 0L,
    contractAddr = "",
    accountNumber = 0L
  )
  implicit class EventAccountRegisteredLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, abstractaccount.v1.events.EventAccountRegistered]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, abstractaccount.v1.events.EventAccountRegistered](_l) {
    def creator: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.creator)((c_, f_) => c_.copy(creator = f_))
    def codeId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.codeId)((c_, f_) => c_.copy(codeId = f_))
    def contractAddr: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.contractAddr)((c_, f_) => c_.copy(contractAddr = f_))
    def accountNumber: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.accountNumber)((c_, f_) => c_.copy(accountNumber = f_))
  }
  final val CREATOR_FIELD_NUMBER = 1
  final val CODE_ID_FIELD_NUMBER = 2
  final val CONTRACT_ADDR_FIELD_NUMBER = 3
  final val ACCOUNT_NUMBER_FIELD_NUMBER = 4
  def of(
    creator: _root_.scala.Predef.String,
    codeId: _root_.scala.Long,
    contractAddr: _root_.scala.Predef.String,
    accountNumber: _root_.scala.Long
  ): _root_.abstractaccount.v1.events.EventAccountRegistered = _root_.abstractaccount.v1.events.EventAccountRegistered(
    creator,
    codeId,
    contractAddr,
    accountNumber
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[abstractaccount.v1.EventAccountRegistered])
}
