// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package abstractaccount.v1

/** Params defines the parameters for the abstractaccount module.
  *
  * @param allowAllCodeIds
  *   AllowAllCodeIDs determines whether a Wasm code ID can be used to register
  *   AbstractAccounts:
  *   - if set to true, any code ID can be used;
  *   - if set to false, only code IDs whitelisted in the AllowedCodeIDs list can
  *   be used.
  * @param allowedCodeIds
  *   AllowedCodeIDs is the whitelist of Wasm code IDs that can be used to
  *   regiseter AbstractAccounts.
  * @param maxGasBefore
  *   MaxGasBefore is the maximum amount of gas that can be consumed by the
  *   contract call in the before_tx decorator.
  *  
  *   Must be greater than zero.
  * @param maxGasAfter
  *   MaxGasAfter is the maximum amount of gas that can be consumed by the
  *   contract call in the after_tx decorator.
  *  
  *   Must be greater than zero.
  */
@SerialVersionUID(0L)
final case class Params(
    allowAllCodeIds: _root_.scala.Boolean = false,
    allowedCodeIds: _root_.scala.Seq[_root_.scala.Long] = _root_.scala.Seq.empty,
    maxGasBefore: _root_.scala.Long = 0L,
    maxGasAfter: _root_.scala.Long = 0L,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Params] {
    private[this] def allowedCodeIdsSerializedSize = {
      if (__allowedCodeIdsSerializedSizeField == 0) __allowedCodeIdsSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        allowedCodeIds.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeUInt64SizeNoTag(__i))
        __s
      }
      __allowedCodeIdsSerializedSizeField
    }
    @transient private[this] var __allowedCodeIdsSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = allowAllCodeIds
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(1, __value)
        }
      };
      if (allowedCodeIds.nonEmpty) {
        val __localsize = allowedCodeIdsSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      
      {
        val __value = maxGasBefore
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(3, __value)
        }
      };
      
      {
        val __value = maxGasAfter
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(4, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = allowAllCodeIds
        if (__v != false) {
          _output__.writeBool(1, __v)
        }
      };
      if (allowedCodeIds.nonEmpty) {
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(allowedCodeIdsSerializedSize)
        allowedCodeIds.foreach(_output__.writeUInt64NoTag)
      };
      {
        val __v = maxGasBefore
        if (__v != 0L) {
          _output__.writeUInt64(3, __v)
        }
      };
      {
        val __v = maxGasAfter
        if (__v != 0L) {
          _output__.writeUInt64(4, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withAllowAllCodeIds(__v: _root_.scala.Boolean): Params = copy(allowAllCodeIds = __v)
    def clearAllowedCodeIds = copy(allowedCodeIds = _root_.scala.Seq.empty)
    def addAllowedCodeIds(__vs: _root_.scala.Long *): Params = addAllAllowedCodeIds(__vs)
    def addAllAllowedCodeIds(__vs: Iterable[_root_.scala.Long]): Params = copy(allowedCodeIds = allowedCodeIds ++ __vs)
    def withAllowedCodeIds(__v: _root_.scala.Seq[_root_.scala.Long]): Params = copy(allowedCodeIds = __v)
    def withMaxGasBefore(__v: _root_.scala.Long): Params = copy(maxGasBefore = __v)
    def withMaxGasAfter(__v: _root_.scala.Long): Params = copy(maxGasAfter = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = allowAllCodeIds
          if (__t != false) __t else null
        }
        case 2 => allowedCodeIds
        case 3 => {
          val __t = maxGasBefore
          if (__t != 0L) __t else null
        }
        case 4 => {
          val __t = maxGasAfter
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PBoolean(allowAllCodeIds)
        case 2 => _root_.scalapb.descriptors.PRepeated(allowedCodeIds.iterator.map(_root_.scalapb.descriptors.PLong(_)).toVector)
        case 3 => _root_.scalapb.descriptors.PLong(maxGasBefore)
        case 4 => _root_.scalapb.descriptors.PLong(maxGasAfter)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: abstractaccount.v1.Params.type = abstractaccount.v1.Params
    // @@protoc_insertion_point(GeneratedMessage[abstractaccount.v1.Params])
}

object Params extends scalapb.GeneratedMessageCompanion[abstractaccount.v1.Params] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[abstractaccount.v1.Params] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): abstractaccount.v1.Params = {
    var __allowAllCodeIds: _root_.scala.Boolean = false
    val __allowedCodeIds: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Long]
    var __maxGasBefore: _root_.scala.Long = 0L
    var __maxGasAfter: _root_.scala.Long = 0L
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __allowAllCodeIds = _input__.readBool()
        case 16 =>
          __allowedCodeIds += _input__.readUInt64()
        case 18 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __allowedCodeIds += _input__.readUInt64()
          }
          _input__.popLimit(oldLimit)
        }
        case 24 =>
          __maxGasBefore = _input__.readUInt64()
        case 32 =>
          __maxGasAfter = _input__.readUInt64()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    abstractaccount.v1.Params(
        allowAllCodeIds = __allowAllCodeIds,
        allowedCodeIds = __allowedCodeIds.result(),
        maxGasBefore = __maxGasBefore,
        maxGasAfter = __maxGasAfter,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[abstractaccount.v1.Params] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      abstractaccount.v1.Params(
        allowAllCodeIds = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        allowedCodeIds = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[_root_.scala.Long]]).getOrElse(_root_.scala.Seq.empty),
        maxGasBefore = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        maxGasAfter = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = abstractaccount.v1.ParamsProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = abstractaccount.v1.ParamsProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = abstractaccount.v1.Params(
    allowAllCodeIds = false,
    allowedCodeIds = _root_.scala.Seq.empty,
    maxGasBefore = 0L,
    maxGasAfter = 0L
  )
  implicit class ParamsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, abstractaccount.v1.Params]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, abstractaccount.v1.Params](_l) {
    def allowAllCodeIds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.allowAllCodeIds)((c_, f_) => c_.copy(allowAllCodeIds = f_))
    def allowedCodeIds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Long]] = field(_.allowedCodeIds)((c_, f_) => c_.copy(allowedCodeIds = f_))
    def maxGasBefore: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.maxGasBefore)((c_, f_) => c_.copy(maxGasBefore = f_))
    def maxGasAfter: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.maxGasAfter)((c_, f_) => c_.copy(maxGasAfter = f_))
  }
  final val ALLOW_ALL_CODE_IDS_FIELD_NUMBER = 1
  final val ALLOWED_CODE_IDS_FIELD_NUMBER = 2
  final val MAX_GAS_BEFORE_FIELD_NUMBER = 3
  final val MAX_GAS_AFTER_FIELD_NUMBER = 4
  def of(
    allowAllCodeIds: _root_.scala.Boolean,
    allowedCodeIds: _root_.scala.Seq[_root_.scala.Long],
    maxGasBefore: _root_.scala.Long,
    maxGasAfter: _root_.scala.Long
  ): _root_.abstractaccount.v1.Params = _root_.abstractaccount.v1.Params(
    allowAllCodeIds,
    allowedCodeIds,
    maxGasBefore,
    maxGasAfter
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[abstractaccount.v1.Params])
}
