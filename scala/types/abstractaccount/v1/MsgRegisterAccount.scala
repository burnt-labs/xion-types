// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package abstractaccount.v1

/** MsgRegisterAccount is the message for registering a new AbstractAccount.
  *
  * @param sender
  *   Sender is the actor who signs the message
  * @param codeId
  *   CodeID indicates which wasm binary code is to be used for this contract
  * @param msg
  *   Msg is the JSON-encoded instantiate message for the contract
  * @param funds
  *   Funds are coins to be deposited to the contract on instantiattion
  * @param salt
  *   Salt is an arbinary value to be used in deriving the account address.
  *   Max 64 bytes.
  */
@SerialVersionUID(0L)
final case class MsgRegisterAccount(
    sender: _root_.scala.Predef.String = "",
    codeId: _root_.scala.Long = 0L,
    msg: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    funds: _root_.scala.Seq[cosmos.base.v1beta1.Coin] = _root_.scala.Seq.empty,
    salt: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[MsgRegisterAccount] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = sender
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = codeId
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(2, __value)
        }
      };
      
      {
        val __value = msg
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(3, __value)
        }
      };
      funds.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = salt
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(5, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = sender
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = codeId
        if (__v != 0L) {
          _output__.writeUInt64(2, __v)
        }
      };
      {
        val __v = msg
        if (!__v.isEmpty) {
          _output__.writeBytes(3, __v)
        }
      };
      funds.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = salt
        if (!__v.isEmpty) {
          _output__.writeBytes(5, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withSender(__v: _root_.scala.Predef.String): MsgRegisterAccount = copy(sender = __v)
    def withCodeId(__v: _root_.scala.Long): MsgRegisterAccount = copy(codeId = __v)
    def withMsg(__v: _root_.com.google.protobuf.ByteString): MsgRegisterAccount = copy(msg = __v)
    def clearFunds = copy(funds = _root_.scala.Seq.empty)
    def addFunds(__vs: cosmos.base.v1beta1.Coin *): MsgRegisterAccount = addAllFunds(__vs)
    def addAllFunds(__vs: Iterable[cosmos.base.v1beta1.Coin]): MsgRegisterAccount = copy(funds = funds ++ __vs)
    def withFunds(__v: _root_.scala.Seq[cosmos.base.v1beta1.Coin]): MsgRegisterAccount = copy(funds = __v)
    def withSalt(__v: _root_.com.google.protobuf.ByteString): MsgRegisterAccount = copy(salt = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = sender
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = codeId
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = msg
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 4 => funds
        case 5 => {
          val __t = salt
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(sender)
        case 2 => _root_.scalapb.descriptors.PLong(codeId)
        case 3 => _root_.scalapb.descriptors.PByteString(msg)
        case 4 => _root_.scalapb.descriptors.PRepeated(funds.iterator.map(_.toPMessage).toVector)
        case 5 => _root_.scalapb.descriptors.PByteString(salt)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: abstractaccount.v1.MsgRegisterAccount.type = abstractaccount.v1.MsgRegisterAccount
    // @@protoc_insertion_point(GeneratedMessage[abstractaccount.v1.MsgRegisterAccount])
}

object MsgRegisterAccount extends scalapb.GeneratedMessageCompanion[abstractaccount.v1.MsgRegisterAccount] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[abstractaccount.v1.MsgRegisterAccount] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): abstractaccount.v1.MsgRegisterAccount = {
    var __sender: _root_.scala.Predef.String = ""
    var __codeId: _root_.scala.Long = 0L
    var __msg: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
    val __funds: _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.Coin] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.Coin]
    var __salt: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __sender = _input__.readStringRequireUtf8()
        case 16 =>
          __codeId = _input__.readUInt64()
        case 26 =>
          __msg = _input__.readBytes()
        case 34 =>
          __funds += _root_.scalapb.LiteParser.readMessage[cosmos.base.v1beta1.Coin](_input__)
        case 42 =>
          __salt = _input__.readBytes()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    abstractaccount.v1.MsgRegisterAccount(
        sender = __sender,
        codeId = __codeId,
        msg = __msg,
        funds = __funds.result(),
        salt = __salt,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[abstractaccount.v1.MsgRegisterAccount] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      abstractaccount.v1.MsgRegisterAccount(
        sender = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        codeId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        msg = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        funds = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[cosmos.base.v1beta1.Coin]]).getOrElse(_root_.scala.Seq.empty),
        salt = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = abstractaccount.v1.TxProto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = abstractaccount.v1.TxProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = cosmos.base.v1beta1.Coin
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = abstractaccount.v1.MsgRegisterAccount(
    sender = "",
    codeId = 0L,
    msg = _root_.com.google.protobuf.ByteString.EMPTY,
    funds = _root_.scala.Seq.empty,
    salt = _root_.com.google.protobuf.ByteString.EMPTY
  )
  implicit class MsgRegisterAccountLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, abstractaccount.v1.MsgRegisterAccount]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, abstractaccount.v1.MsgRegisterAccount](_l) {
    def sender: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.sender)((c_, f_) => c_.copy(sender = f_))
    def codeId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.codeId)((c_, f_) => c_.copy(codeId = f_))
    def msg: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.msg)((c_, f_) => c_.copy(msg = f_))
    def funds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.base.v1beta1.Coin]] = field(_.funds)((c_, f_) => c_.copy(funds = f_))
    def salt: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.salt)((c_, f_) => c_.copy(salt = f_))
  }
  final val SENDER_FIELD_NUMBER = 1
  final val CODE_ID_FIELD_NUMBER = 2
  final val MSG_FIELD_NUMBER = 3
  final val FUNDS_FIELD_NUMBER = 4
  final val SALT_FIELD_NUMBER = 5
  def of(
    sender: _root_.scala.Predef.String,
    codeId: _root_.scala.Long,
    msg: _root_.com.google.protobuf.ByteString,
    funds: _root_.scala.Seq[cosmos.base.v1beta1.Coin],
    salt: _root_.com.google.protobuf.ByteString
  ): _root_.abstractaccount.v1.MsgRegisterAccount = _root_.abstractaccount.v1.MsgRegisterAccount(
    sender,
    codeId,
    msg,
    funds,
    salt
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[abstractaccount.v1.MsgRegisterAccount])
}
