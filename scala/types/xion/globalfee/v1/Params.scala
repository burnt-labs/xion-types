// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package xion.globalfee.v1

/** Params defines the set of module parameters.
  *
  * @param minimumGasPrices
  *   minimum_gas_prices stores the minimum gas price(s) for all TX on the chain.
  *   When multiple coins are defined then they are accepted alternatively.
  *   The list must be sorted by denoms asc. No duplicate denoms or zero amount
  *   values allowed. For more information see
  *   https://docs.cosmos.network/main/modules/auth#concepts
  * @param bypassMinFeeMsgTypes
  *   bypass_min_fee_msg_types defines a list of message type urls
  *   that are free of fee charge.
  * @param maxTotalBypassMinFeeMsgGasUsage
  *   max_total_bypass_min_fee_msg_gas_usage defines the total maximum gas usage
  *   allowed for a transaction containing only messages of types in
  *   bypass_min_fee_msg_types to bypass fee charge.
  */
@SerialVersionUID(0L)
final case class Params(
    minimumGasPrices: _root_.scala.Seq[cosmos.base.v1beta1.DecCoin] = _root_.scala.Seq.empty,
    bypassMinFeeMsgTypes: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    maxTotalBypassMinFeeMsgGasUsage: _root_.scala.Long = 0L,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Params] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      minimumGasPrices.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      bypassMinFeeMsgTypes.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      }
      
      {
        val __value = maxTotalBypassMinFeeMsgGasUsage
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(3, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      minimumGasPrices.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      bypassMinFeeMsgTypes.foreach { __v =>
        val __m = __v
        _output__.writeString(2, __m)
      };
      {
        val __v = maxTotalBypassMinFeeMsgGasUsage
        if (__v != 0L) {
          _output__.writeUInt64(3, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def clearMinimumGasPrices = copy(minimumGasPrices = _root_.scala.Seq.empty)
    def addMinimumGasPrices(__vs: cosmos.base.v1beta1.DecCoin *): Params = addAllMinimumGasPrices(__vs)
    def addAllMinimumGasPrices(__vs: Iterable[cosmos.base.v1beta1.DecCoin]): Params = copy(minimumGasPrices = minimumGasPrices ++ __vs)
    def withMinimumGasPrices(__v: _root_.scala.Seq[cosmos.base.v1beta1.DecCoin]): Params = copy(minimumGasPrices = __v)
    def clearBypassMinFeeMsgTypes = copy(bypassMinFeeMsgTypes = _root_.scala.Seq.empty)
    def addBypassMinFeeMsgTypes(__vs: _root_.scala.Predef.String *): Params = addAllBypassMinFeeMsgTypes(__vs)
    def addAllBypassMinFeeMsgTypes(__vs: Iterable[_root_.scala.Predef.String]): Params = copy(bypassMinFeeMsgTypes = bypassMinFeeMsgTypes ++ __vs)
    def withBypassMinFeeMsgTypes(__v: _root_.scala.Seq[_root_.scala.Predef.String]): Params = copy(bypassMinFeeMsgTypes = __v)
    def withMaxTotalBypassMinFeeMsgGasUsage(__v: _root_.scala.Long): Params = copy(maxTotalBypassMinFeeMsgGasUsage = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => minimumGasPrices
        case 2 => bypassMinFeeMsgTypes
        case 3 => {
          val __t = maxTotalBypassMinFeeMsgGasUsage
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(minimumGasPrices.iterator.map(_.toPMessage).toVector)
        case 2 => _root_.scalapb.descriptors.PRepeated(bypassMinFeeMsgTypes.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 3 => _root_.scalapb.descriptors.PLong(maxTotalBypassMinFeeMsgGasUsage)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: xion.globalfee.v1.Params.type = xion.globalfee.v1.Params
    // @@protoc_insertion_point(GeneratedMessage[xion.globalfee.v1.Params])
}

object Params extends scalapb.GeneratedMessageCompanion[xion.globalfee.v1.Params] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[xion.globalfee.v1.Params] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): xion.globalfee.v1.Params = {
    val __minimumGasPrices: _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.DecCoin] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.DecCoin]
    val __bypassMinFeeMsgTypes: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var __maxTotalBypassMinFeeMsgGasUsage: _root_.scala.Long = 0L
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __minimumGasPrices += _root_.scalapb.LiteParser.readMessage[cosmos.base.v1beta1.DecCoin](_input__)
        case 18 =>
          __bypassMinFeeMsgTypes += _input__.readStringRequireUtf8()
        case 24 =>
          __maxTotalBypassMinFeeMsgGasUsage = _input__.readUInt64()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    xion.globalfee.v1.Params(
        minimumGasPrices = __minimumGasPrices.result(),
        bypassMinFeeMsgTypes = __bypassMinFeeMsgTypes.result(),
        maxTotalBypassMinFeeMsgGasUsage = __maxTotalBypassMinFeeMsgGasUsage,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[xion.globalfee.v1.Params] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      xion.globalfee.v1.Params(
        minimumGasPrices = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[cosmos.base.v1beta1.DecCoin]]).getOrElse(_root_.scala.Seq.empty),
        bypassMinFeeMsgTypes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        maxTotalBypassMinFeeMsgGasUsage = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = xion.globalfee.v1.GenesisProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = xion.globalfee.v1.GenesisProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = cosmos.base.v1beta1.DecCoin
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = xion.globalfee.v1.Params(
    minimumGasPrices = _root_.scala.Seq.empty,
    bypassMinFeeMsgTypes = _root_.scala.Seq.empty,
    maxTotalBypassMinFeeMsgGasUsage = 0L
  )
  implicit class ParamsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, xion.globalfee.v1.Params]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, xion.globalfee.v1.Params](_l) {
    def minimumGasPrices: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.base.v1beta1.DecCoin]] = field(_.minimumGasPrices)((c_, f_) => c_.copy(minimumGasPrices = f_))
    def bypassMinFeeMsgTypes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.bypassMinFeeMsgTypes)((c_, f_) => c_.copy(bypassMinFeeMsgTypes = f_))
    def maxTotalBypassMinFeeMsgGasUsage: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.maxTotalBypassMinFeeMsgGasUsage)((c_, f_) => c_.copy(maxTotalBypassMinFeeMsgGasUsage = f_))
  }
  final val MINIMUM_GAS_PRICES_FIELD_NUMBER = 1
  final val BYPASS_MIN_FEE_MSG_TYPES_FIELD_NUMBER = 2
  final val MAX_TOTAL_BYPASS_MIN_FEE_MSG_GAS_USAGE_FIELD_NUMBER = 3
  def of(
    minimumGasPrices: _root_.scala.Seq[cosmos.base.v1beta1.DecCoin],
    bypassMinFeeMsgTypes: _root_.scala.Seq[_root_.scala.Predef.String],
    maxTotalBypassMinFeeMsgGasUsage: _root_.scala.Long
  ): _root_.xion.globalfee.v1.Params = _root_.xion.globalfee.v1.Params(
    minimumGasPrices,
    bypassMinFeeMsgTypes,
    maxTotalBypassMinFeeMsgGasUsage
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[xion.globalfee.v1.Params])
}
