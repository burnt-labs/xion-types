// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package xion.mint.v1.event

/** MintIncentiveTokens defines an event emitted on each block from the mint
  * module EndBlocker
  */
@SerialVersionUID(0L)
final case class MintIncentiveTokens(
    bondedRatio: _root_.scala.Predef.String = "",
    inflation: _root_.scala.Predef.String = "",
    annualProvisions: _root_.scala.Predef.String = "",
    neededAmount: _root_.scala.Long = 0L,
    collectedAmount: _root_.scala.Long = 0L,
    mintedAmount: _root_.scala.Long = 0L,
    burnedAmount: _root_.scala.Long = 0L,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[MintIncentiveTokens] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = bondedRatio
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = inflation
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = annualProvisions
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = neededAmount
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(4, __value)
        }
      };
      
      {
        val __value = collectedAmount
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(5, __value)
        }
      };
      
      {
        val __value = mintedAmount
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(6, __value)
        }
      };
      
      {
        val __value = burnedAmount
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(7, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = bondedRatio
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = inflation
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = annualProvisions
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = neededAmount
        if (__v != 0L) {
          _output__.writeUInt64(4, __v)
        }
      };
      {
        val __v = collectedAmount
        if (__v != 0L) {
          _output__.writeUInt64(5, __v)
        }
      };
      {
        val __v = mintedAmount
        if (__v != 0L) {
          _output__.writeUInt64(6, __v)
        }
      };
      {
        val __v = burnedAmount
        if (__v != 0L) {
          _output__.writeUInt64(7, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withBondedRatio(__v: _root_.scala.Predef.String): MintIncentiveTokens = copy(bondedRatio = __v)
    def withInflation(__v: _root_.scala.Predef.String): MintIncentiveTokens = copy(inflation = __v)
    def withAnnualProvisions(__v: _root_.scala.Predef.String): MintIncentiveTokens = copy(annualProvisions = __v)
    def withNeededAmount(__v: _root_.scala.Long): MintIncentiveTokens = copy(neededAmount = __v)
    def withCollectedAmount(__v: _root_.scala.Long): MintIncentiveTokens = copy(collectedAmount = __v)
    def withMintedAmount(__v: _root_.scala.Long): MintIncentiveTokens = copy(mintedAmount = __v)
    def withBurnedAmount(__v: _root_.scala.Long): MintIncentiveTokens = copy(burnedAmount = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = bondedRatio
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = inflation
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = annualProvisions
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = neededAmount
          if (__t != 0L) __t else null
        }
        case 5 => {
          val __t = collectedAmount
          if (__t != 0L) __t else null
        }
        case 6 => {
          val __t = mintedAmount
          if (__t != 0L) __t else null
        }
        case 7 => {
          val __t = burnedAmount
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(bondedRatio)
        case 2 => _root_.scalapb.descriptors.PString(inflation)
        case 3 => _root_.scalapb.descriptors.PString(annualProvisions)
        case 4 => _root_.scalapb.descriptors.PLong(neededAmount)
        case 5 => _root_.scalapb.descriptors.PLong(collectedAmount)
        case 6 => _root_.scalapb.descriptors.PLong(mintedAmount)
        case 7 => _root_.scalapb.descriptors.PLong(burnedAmount)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: xion.mint.v1.event.MintIncentiveTokens.type = xion.mint.v1.event.MintIncentiveTokens
    // @@protoc_insertion_point(GeneratedMessage[xion.mint.v1.MintIncentiveTokens])
}

object MintIncentiveTokens extends scalapb.GeneratedMessageCompanion[xion.mint.v1.event.MintIncentiveTokens] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[xion.mint.v1.event.MintIncentiveTokens] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): xion.mint.v1.event.MintIncentiveTokens = {
    var __bondedRatio: _root_.scala.Predef.String = ""
    var __inflation: _root_.scala.Predef.String = ""
    var __annualProvisions: _root_.scala.Predef.String = ""
    var __neededAmount: _root_.scala.Long = 0L
    var __collectedAmount: _root_.scala.Long = 0L
    var __mintedAmount: _root_.scala.Long = 0L
    var __burnedAmount: _root_.scala.Long = 0L
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __bondedRatio = _input__.readStringRequireUtf8()
        case 18 =>
          __inflation = _input__.readStringRequireUtf8()
        case 26 =>
          __annualProvisions = _input__.readStringRequireUtf8()
        case 32 =>
          __neededAmount = _input__.readUInt64()
        case 40 =>
          __collectedAmount = _input__.readUInt64()
        case 48 =>
          __mintedAmount = _input__.readUInt64()
        case 56 =>
          __burnedAmount = _input__.readUInt64()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    xion.mint.v1.event.MintIncentiveTokens(
        bondedRatio = __bondedRatio,
        inflation = __inflation,
        annualProvisions = __annualProvisions,
        neededAmount = __neededAmount,
        collectedAmount = __collectedAmount,
        mintedAmount = __mintedAmount,
        burnedAmount = __burnedAmount,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[xion.mint.v1.event.MintIncentiveTokens] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      xion.mint.v1.event.MintIncentiveTokens(
        bondedRatio = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        inflation = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        annualProvisions = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        neededAmount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        collectedAmount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        mintedAmount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        burnedAmount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = xion.mint.v1.event.EventProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = xion.mint.v1.event.EventProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = xion.mint.v1.event.MintIncentiveTokens(
    bondedRatio = "",
    inflation = "",
    annualProvisions = "",
    neededAmount = 0L,
    collectedAmount = 0L,
    mintedAmount = 0L,
    burnedAmount = 0L
  )
  implicit class MintIncentiveTokensLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, xion.mint.v1.event.MintIncentiveTokens]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, xion.mint.v1.event.MintIncentiveTokens](_l) {
    def bondedRatio: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.bondedRatio)((c_, f_) => c_.copy(bondedRatio = f_))
    def inflation: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.inflation)((c_, f_) => c_.copy(inflation = f_))
    def annualProvisions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.annualProvisions)((c_, f_) => c_.copy(annualProvisions = f_))
    def neededAmount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.neededAmount)((c_, f_) => c_.copy(neededAmount = f_))
    def collectedAmount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.collectedAmount)((c_, f_) => c_.copy(collectedAmount = f_))
    def mintedAmount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.mintedAmount)((c_, f_) => c_.copy(mintedAmount = f_))
    def burnedAmount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.burnedAmount)((c_, f_) => c_.copy(burnedAmount = f_))
  }
  final val BONDED_RATIO_FIELD_NUMBER = 1
  final val INFLATION_FIELD_NUMBER = 2
  final val ANNUAL_PROVISIONS_FIELD_NUMBER = 3
  final val NEEDED_AMOUNT_FIELD_NUMBER = 4
  final val COLLECTED_AMOUNT_FIELD_NUMBER = 5
  final val MINTED_AMOUNT_FIELD_NUMBER = 6
  final val BURNED_AMOUNT_FIELD_NUMBER = 7
  def of(
    bondedRatio: _root_.scala.Predef.String,
    inflation: _root_.scala.Predef.String,
    annualProvisions: _root_.scala.Predef.String,
    neededAmount: _root_.scala.Long,
    collectedAmount: _root_.scala.Long,
    mintedAmount: _root_.scala.Long,
    burnedAmount: _root_.scala.Long
  ): _root_.xion.mint.v1.event.MintIncentiveTokens = _root_.xion.mint.v1.event.MintIncentiveTokens(
    bondedRatio,
    inflation,
    annualProvisions,
    neededAmount,
    collectedAmount,
    mintedAmount,
    burnedAmount
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[xion.mint.v1.MintIncentiveTokens])
}
