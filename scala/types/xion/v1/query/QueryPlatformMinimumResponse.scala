// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package xion.v1.query

@SerialVersionUID(0L)
final case class QueryPlatformMinimumResponse(
    minimums: _root_.scala.Seq[cosmos.base.v1beta1.coin.Coin] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[QueryPlatformMinimumResponse] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      minimums.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      minimums.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def clearMinimums = copy(minimums = _root_.scala.Seq.empty)
    def addMinimums(__vs: cosmos.base.v1beta1.coin.Coin *): QueryPlatformMinimumResponse = addAllMinimums(__vs)
    def addAllMinimums(__vs: Iterable[cosmos.base.v1beta1.coin.Coin]): QueryPlatformMinimumResponse = copy(minimums = minimums ++ __vs)
    def withMinimums(__v: _root_.scala.Seq[cosmos.base.v1beta1.coin.Coin]): QueryPlatformMinimumResponse = copy(minimums = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 3 => minimums
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 3 => _root_.scalapb.descriptors.PRepeated(minimums.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: xion.v1.query.QueryPlatformMinimumResponse.type = xion.v1.query.QueryPlatformMinimumResponse
    // @@protoc_insertion_point(GeneratedMessage[xion.v1.QueryPlatformMinimumResponse])
}

object QueryPlatformMinimumResponse extends scalapb.GeneratedMessageCompanion[xion.v1.query.QueryPlatformMinimumResponse] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[xion.v1.query.QueryPlatformMinimumResponse] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): xion.v1.query.QueryPlatformMinimumResponse = {
    val __minimums: _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.coin.Coin] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.coin.Coin]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 26 =>
          __minimums += _root_.scalapb.LiteParser.readMessage[cosmos.base.v1beta1.coin.Coin](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    xion.v1.query.QueryPlatformMinimumResponse(
        minimums = __minimums.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[xion.v1.query.QueryPlatformMinimumResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      xion.v1.query.QueryPlatformMinimumResponse(
        minimums = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[cosmos.base.v1beta1.coin.Coin]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = xion.v1.query.QueryProto.javaDescriptor.getMessageTypes().get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = xion.v1.query.QueryProto.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = cosmos.base.v1beta1.coin.Coin
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = xion.v1.query.QueryPlatformMinimumResponse(
    minimums = _root_.scala.Seq.empty
  )
  implicit class QueryPlatformMinimumResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, xion.v1.query.QueryPlatformMinimumResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, xion.v1.query.QueryPlatformMinimumResponse](_l) {
    def minimums: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.base.v1beta1.coin.Coin]] = field(_.minimums)((c_, f_) => c_.copy(minimums = f_))
  }
  final val MINIMUMS_FIELD_NUMBER = 3
  def of(
    minimums: _root_.scala.Seq[cosmos.base.v1beta1.coin.Coin]
  ): _root_.xion.v1.query.QueryPlatformMinimumResponse = _root_.xion.v1.query.QueryPlatformMinimumResponse(
    minimums
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[xion.v1.QueryPlatformMinimumResponse])
}
