// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package xion.feeabs.v1beta1.proposal

/** HostChainFeeAbsConfig
  *
  * @param ibcDenom
  *   ibc token is allowed to be used as fee token
  * @param osmosisPoolTokenDenomIn
  *   token_in in cross_chain swap contract.
  * @param poolId
  *   pool id
  * @param status
  *   Host chain fee abstraction connection status
  */
@SerialVersionUID(0L)
final case class HostChainFeeAbsConfig(
    ibcDenom: _root_.scala.Predef.String = "",
    osmosisPoolTokenDenomIn: _root_.scala.Predef.String = "",
    poolId: _root_.scala.Long = 0L,
    status: xion.feeabs.v1beta1.proposal.HostChainFeeAbsStatus = xion.feeabs.v1beta1.proposal.HostChainFeeAbsStatus.UPDATED,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[HostChainFeeAbsConfig] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = ibcDenom
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = osmosisPoolTokenDenomIn
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = poolId
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(3, __value)
        }
      };
      
      {
        val __value = status.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(4, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = ibcDenom
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = osmosisPoolTokenDenomIn
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = poolId
        if (__v != 0L) {
          _output__.writeUInt64(3, __v)
        }
      };
      {
        val __v = status.value
        if (__v != 0) {
          _output__.writeEnum(4, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withIbcDenom(__v: _root_.scala.Predef.String): HostChainFeeAbsConfig = copy(ibcDenom = __v)
    def withOsmosisPoolTokenDenomIn(__v: _root_.scala.Predef.String): HostChainFeeAbsConfig = copy(osmosisPoolTokenDenomIn = __v)
    def withPoolId(__v: _root_.scala.Long): HostChainFeeAbsConfig = copy(poolId = __v)
    def withStatus(__v: xion.feeabs.v1beta1.proposal.HostChainFeeAbsStatus): HostChainFeeAbsConfig = copy(status = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = ibcDenom
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = osmosisPoolTokenDenomIn
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = poolId
          if (__t != 0L) __t else null
        }
        case 4 => {
          val __t = status.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(ibcDenom)
        case 2 => _root_.scalapb.descriptors.PString(osmosisPoolTokenDenomIn)
        case 3 => _root_.scalapb.descriptors.PLong(poolId)
        case 4 => _root_.scalapb.descriptors.PEnum(status.scalaValueDescriptor)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: xion.feeabs.v1beta1.proposal.HostChainFeeAbsConfig.type = xion.feeabs.v1beta1.proposal.HostChainFeeAbsConfig
    // @@protoc_insertion_point(GeneratedMessage[xion.feeabs.v1beta1.HostChainFeeAbsConfig])
}

object HostChainFeeAbsConfig extends scalapb.GeneratedMessageCompanion[xion.feeabs.v1beta1.proposal.HostChainFeeAbsConfig] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[xion.feeabs.v1beta1.proposal.HostChainFeeAbsConfig] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): xion.feeabs.v1beta1.proposal.HostChainFeeAbsConfig = {
    var __ibcDenom: _root_.scala.Predef.String = ""
    var __osmosisPoolTokenDenomIn: _root_.scala.Predef.String = ""
    var __poolId: _root_.scala.Long = 0L
    var __status: xion.feeabs.v1beta1.proposal.HostChainFeeAbsStatus = xion.feeabs.v1beta1.proposal.HostChainFeeAbsStatus.UPDATED
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __ibcDenom = _input__.readStringRequireUtf8()
        case 18 =>
          __osmosisPoolTokenDenomIn = _input__.readStringRequireUtf8()
        case 24 =>
          __poolId = _input__.readUInt64()
        case 32 =>
          __status = xion.feeabs.v1beta1.proposal.HostChainFeeAbsStatus.fromValue(_input__.readEnum())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    xion.feeabs.v1beta1.proposal.HostChainFeeAbsConfig(
        ibcDenom = __ibcDenom,
        osmosisPoolTokenDenomIn = __osmosisPoolTokenDenomIn,
        poolId = __poolId,
        status = __status,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[xion.feeabs.v1beta1.proposal.HostChainFeeAbsConfig] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      xion.feeabs.v1beta1.proposal.HostChainFeeAbsConfig(
        ibcDenom = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        osmosisPoolTokenDenomIn = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        poolId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        status = xion.feeabs.v1beta1.proposal.HostChainFeeAbsStatus.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(xion.feeabs.v1beta1.proposal.HostChainFeeAbsStatus.UPDATED.scalaValueDescriptor).number)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = xion.feeabs.v1beta1.proposal.ProposalProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = xion.feeabs.v1beta1.proposal.ProposalProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 4 => xion.feeabs.v1beta1.proposal.HostChainFeeAbsStatus
    }
  }
  lazy val defaultInstance = xion.feeabs.v1beta1.proposal.HostChainFeeAbsConfig(
    ibcDenom = "",
    osmosisPoolTokenDenomIn = "",
    poolId = 0L,
    status = xion.feeabs.v1beta1.proposal.HostChainFeeAbsStatus.UPDATED
  )
  implicit class HostChainFeeAbsConfigLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, xion.feeabs.v1beta1.proposal.HostChainFeeAbsConfig]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, xion.feeabs.v1beta1.proposal.HostChainFeeAbsConfig](_l) {
    def ibcDenom: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.ibcDenom)((c_, f_) => c_.copy(ibcDenom = f_))
    def osmosisPoolTokenDenomIn: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.osmosisPoolTokenDenomIn)((c_, f_) => c_.copy(osmosisPoolTokenDenomIn = f_))
    def poolId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.poolId)((c_, f_) => c_.copy(poolId = f_))
    def status: _root_.scalapb.lenses.Lens[UpperPB, xion.feeabs.v1beta1.proposal.HostChainFeeAbsStatus] = field(_.status)((c_, f_) => c_.copy(status = f_))
  }
  final val IBC_DENOM_FIELD_NUMBER = 1
  final val OSMOSIS_POOL_TOKEN_DENOM_IN_FIELD_NUMBER = 2
  final val POOL_ID_FIELD_NUMBER = 3
  final val STATUS_FIELD_NUMBER = 4
  def of(
    ibcDenom: _root_.scala.Predef.String,
    osmosisPoolTokenDenomIn: _root_.scala.Predef.String,
    poolId: _root_.scala.Long,
    status: xion.feeabs.v1beta1.proposal.HostChainFeeAbsStatus
  ): _root_.xion.feeabs.v1beta1.proposal.HostChainFeeAbsConfig = _root_.xion.feeabs.v1beta1.proposal.HostChainFeeAbsConfig(
    ibcDenom,
    osmosisPoolTokenDenomIn,
    poolId,
    status
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[xion.feeabs.v1beta1.HostChainFeeAbsConfig])
}
