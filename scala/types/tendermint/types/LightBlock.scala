// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package tendermint.types

@SerialVersionUID(0L)
final case class LightBlock(
    signedHeader: _root_.scala.Option[tendermint.types.SignedHeader] = _root_.scala.None,
    validatorSet: _root_.scala.Option[tendermint.types.ValidatorSet] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[LightBlock] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (signedHeader.isDefined) {
        val __value = signedHeader.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (validatorSet.isDefined) {
        val __value = validatorSet.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      signedHeader.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      validatorSet.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getSignedHeader: tendermint.types.SignedHeader = signedHeader.getOrElse(tendermint.types.SignedHeader.defaultInstance)
    def clearSignedHeader: LightBlock = copy(signedHeader = _root_.scala.None)
    def withSignedHeader(__v: tendermint.types.SignedHeader): LightBlock = copy(signedHeader = Option(__v))
    def getValidatorSet: tendermint.types.ValidatorSet = validatorSet.getOrElse(tendermint.types.ValidatorSet.defaultInstance)
    def clearValidatorSet: LightBlock = copy(validatorSet = _root_.scala.None)
    def withValidatorSet(__v: tendermint.types.ValidatorSet): LightBlock = copy(validatorSet = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => signedHeader.orNull
        case 2 => validatorSet.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => signedHeader.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => validatorSet.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tendermint.types.LightBlock.type = tendermint.types.LightBlock
    // @@protoc_insertion_point(GeneratedMessage[tendermint.types.LightBlock])
}

object LightBlock extends scalapb.GeneratedMessageCompanion[tendermint.types.LightBlock] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tendermint.types.LightBlock] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tendermint.types.LightBlock = {
    var __signedHeader: _root_.scala.Option[tendermint.types.SignedHeader] = _root_.scala.None
    var __validatorSet: _root_.scala.Option[tendermint.types.ValidatorSet] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __signedHeader = _root_.scala.Option(__signedHeader.fold(_root_.scalapb.LiteParser.readMessage[tendermint.types.SignedHeader](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __validatorSet = _root_.scala.Option(__validatorSet.fold(_root_.scalapb.LiteParser.readMessage[tendermint.types.ValidatorSet](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tendermint.types.LightBlock(
        signedHeader = __signedHeader,
        validatorSet = __validatorSet,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tendermint.types.LightBlock] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tendermint.types.LightBlock(
        signedHeader = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[tendermint.types.SignedHeader]]),
        validatorSet = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[tendermint.types.ValidatorSet]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tendermint.types.TypesProto.javaDescriptor.getMessageTypes().get(12)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tendermint.types.TypesProto.scalaDescriptor.messages(12)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = tendermint.types.SignedHeader
      case 2 => __out = tendermint.types.ValidatorSet
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tendermint.types.LightBlock(
    signedHeader = _root_.scala.None,
    validatorSet = _root_.scala.None
  )
  implicit class LightBlockLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.LightBlock]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tendermint.types.LightBlock](_l) {
    def signedHeader: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.SignedHeader] = field(_.getSignedHeader)((c_, f_) => c_.copy(signedHeader = _root_.scala.Option(f_)))
    def optionalSignedHeader: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tendermint.types.SignedHeader]] = field(_.signedHeader)((c_, f_) => c_.copy(signedHeader = f_))
    def validatorSet: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.ValidatorSet] = field(_.getValidatorSet)((c_, f_) => c_.copy(validatorSet = _root_.scala.Option(f_)))
    def optionalValidatorSet: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tendermint.types.ValidatorSet]] = field(_.validatorSet)((c_, f_) => c_.copy(validatorSet = f_))
  }
  final val SIGNED_HEADER_FIELD_NUMBER = 1
  final val VALIDATOR_SET_FIELD_NUMBER = 2
  def of(
    signedHeader: _root_.scala.Option[tendermint.types.SignedHeader],
    validatorSet: _root_.scala.Option[tendermint.types.ValidatorSet]
  ): _root_.tendermint.types.LightBlock = _root_.tendermint.types.LightBlock(
    signedHeader,
    validatorSet
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tendermint.types.LightBlock])
}
