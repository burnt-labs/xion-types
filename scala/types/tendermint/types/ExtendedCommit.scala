// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package tendermint.types

@SerialVersionUID(0L)
final case class ExtendedCommit(
    height: _root_.scala.Long = 0L,
    round: _root_.scala.Int = 0,
    blockId: _root_.scala.Option[tendermint.types.BlockID] = _root_.scala.None,
    extendedSignatures: _root_.scala.Seq[tendermint.types.ExtendedCommitSig] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ExtendedCommit] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = height
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
        }
      };
      
      {
        val __value = round
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
        }
      };
      if (blockId.isDefined) {
        val __value = blockId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      extendedSignatures.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = height
        if (__v != 0L) {
          _output__.writeInt64(1, __v)
        }
      };
      {
        val __v = round
        if (__v != 0) {
          _output__.writeInt32(2, __v)
        }
      };
      blockId.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      extendedSignatures.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withHeight(__v: _root_.scala.Long): ExtendedCommit = copy(height = __v)
    def withRound(__v: _root_.scala.Int): ExtendedCommit = copy(round = __v)
    def getBlockId: tendermint.types.BlockID = blockId.getOrElse(tendermint.types.BlockID.defaultInstance)
    def clearBlockId: ExtendedCommit = copy(blockId = _root_.scala.None)
    def withBlockId(__v: tendermint.types.BlockID): ExtendedCommit = copy(blockId = Option(__v))
    def clearExtendedSignatures = copy(extendedSignatures = _root_.scala.Seq.empty)
    def addExtendedSignatures(__vs: tendermint.types.ExtendedCommitSig *): ExtendedCommit = addAllExtendedSignatures(__vs)
    def addAllExtendedSignatures(__vs: Iterable[tendermint.types.ExtendedCommitSig]): ExtendedCommit = copy(extendedSignatures = extendedSignatures ++ __vs)
    def withExtendedSignatures(__v: _root_.scala.Seq[tendermint.types.ExtendedCommitSig]): ExtendedCommit = copy(extendedSignatures = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = height
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = round
          if (__t != 0) __t else null
        }
        case 3 => blockId.orNull
        case 4 => extendedSignatures
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(height)
        case 2 => _root_.scalapb.descriptors.PInt(round)
        case 3 => blockId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PRepeated(extendedSignatures.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tendermint.types.ExtendedCommit.type = tendermint.types.ExtendedCommit
    // @@protoc_insertion_point(GeneratedMessage[tendermint.types.ExtendedCommit])
}

object ExtendedCommit extends scalapb.GeneratedMessageCompanion[tendermint.types.ExtendedCommit] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tendermint.types.ExtendedCommit] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tendermint.types.ExtendedCommit = {
    var __height: _root_.scala.Long = 0L
    var __round: _root_.scala.Int = 0
    var __blockId: _root_.scala.Option[tendermint.types.BlockID] = _root_.scala.None
    val __extendedSignatures: _root_.scala.collection.immutable.VectorBuilder[tendermint.types.ExtendedCommitSig] = new _root_.scala.collection.immutable.VectorBuilder[tendermint.types.ExtendedCommitSig]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __height = _input__.readInt64()
        case 16 =>
          __round = _input__.readInt32()
        case 26 =>
          __blockId = _root_.scala.Option(__blockId.fold(_root_.scalapb.LiteParser.readMessage[tendermint.types.BlockID](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __extendedSignatures += _root_.scalapb.LiteParser.readMessage[tendermint.types.ExtendedCommitSig](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tendermint.types.ExtendedCommit(
        height = __height,
        round = __round,
        blockId = __blockId,
        extendedSignatures = __extendedSignatures.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tendermint.types.ExtendedCommit] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tendermint.types.ExtendedCommit(
        height = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        round = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        blockId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[tendermint.types.BlockID]]),
        extendedSignatures = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[tendermint.types.ExtendedCommitSig]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tendermint.types.TypesProto.javaDescriptor.getMessageTypes().get(8)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tendermint.types.TypesProto.scalaDescriptor.messages(8)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = tendermint.types.BlockID
      case 4 => __out = tendermint.types.ExtendedCommitSig
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tendermint.types.ExtendedCommit(
    height = 0L,
    round = 0,
    blockId = _root_.scala.None,
    extendedSignatures = _root_.scala.Seq.empty
  )
  implicit class ExtendedCommitLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.ExtendedCommit]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tendermint.types.ExtendedCommit](_l) {
    def height: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.height)((c_, f_) => c_.copy(height = f_))
    def round: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.round)((c_, f_) => c_.copy(round = f_))
    def blockId: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.BlockID] = field(_.getBlockId)((c_, f_) => c_.copy(blockId = _root_.scala.Option(f_)))
    def optionalBlockId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tendermint.types.BlockID]] = field(_.blockId)((c_, f_) => c_.copy(blockId = f_))
    def extendedSignatures: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[tendermint.types.ExtendedCommitSig]] = field(_.extendedSignatures)((c_, f_) => c_.copy(extendedSignatures = f_))
  }
  final val HEIGHT_FIELD_NUMBER = 1
  final val ROUND_FIELD_NUMBER = 2
  final val BLOCK_ID_FIELD_NUMBER = 3
  final val EXTENDED_SIGNATURES_FIELD_NUMBER = 4
  def of(
    height: _root_.scala.Long,
    round: _root_.scala.Int,
    blockId: _root_.scala.Option[tendermint.types.BlockID],
    extendedSignatures: _root_.scala.Seq[tendermint.types.ExtendedCommitSig]
  ): _root_.tendermint.types.ExtendedCommit = _root_.tendermint.types.ExtendedCommit(
    height,
    round,
    blockId,
    extendedSignatures
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tendermint.types.ExtendedCommit])
}
