// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package tendermint.types

@SerialVersionUID(0L)
final case class Evidence(
    sum: tendermint.types.Evidence.Sum = tendermint.types.Evidence.Sum.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Evidence] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (sum.duplicateVoteEvidence.isDefined) {
        val __value = sum.duplicateVoteEvidence.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sum.lightClientAttackEvidence.isDefined) {
        val __value = sum.lightClientAttackEvidence.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      sum.duplicateVoteEvidence.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sum.lightClientAttackEvidence.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getDuplicateVoteEvidence: tendermint.types.DuplicateVoteEvidence = sum.duplicateVoteEvidence.getOrElse(tendermint.types.DuplicateVoteEvidence.defaultInstance)
    def withDuplicateVoteEvidence(__v: tendermint.types.DuplicateVoteEvidence): Evidence = copy(sum = tendermint.types.Evidence.Sum.DuplicateVoteEvidence(__v))
    def getLightClientAttackEvidence: tendermint.types.LightClientAttackEvidence = sum.lightClientAttackEvidence.getOrElse(tendermint.types.LightClientAttackEvidence.defaultInstance)
    def withLightClientAttackEvidence(__v: tendermint.types.LightClientAttackEvidence): Evidence = copy(sum = tendermint.types.Evidence.Sum.LightClientAttackEvidence(__v))
    def clearSum: Evidence = copy(sum = tendermint.types.Evidence.Sum.Empty)
    def withSum(__v: tendermint.types.Evidence.Sum): Evidence = copy(sum = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => sum.duplicateVoteEvidence.orNull
        case 2 => sum.lightClientAttackEvidence.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => sum.duplicateVoteEvidence.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => sum.lightClientAttackEvidence.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tendermint.types.Evidence.type = tendermint.types.Evidence
    // @@protoc_insertion_point(GeneratedMessage[tendermint.types.Evidence])
}

object Evidence extends scalapb.GeneratedMessageCompanion[tendermint.types.Evidence] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tendermint.types.Evidence] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tendermint.types.Evidence = {
    var __sum: tendermint.types.Evidence.Sum = tendermint.types.Evidence.Sum.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __sum = tendermint.types.Evidence.Sum.DuplicateVoteEvidence(__sum.duplicateVoteEvidence.fold(_root_.scalapb.LiteParser.readMessage[tendermint.types.DuplicateVoteEvidence](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __sum = tendermint.types.Evidence.Sum.LightClientAttackEvidence(__sum.lightClientAttackEvidence.fold(_root_.scalapb.LiteParser.readMessage[tendermint.types.LightClientAttackEvidence](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tendermint.types.Evidence(
        sum = __sum,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tendermint.types.Evidence] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tendermint.types.Evidence(
        sum = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[tendermint.types.DuplicateVoteEvidence]]).map(tendermint.types.Evidence.Sum.DuplicateVoteEvidence(_))
            .orElse[tendermint.types.Evidence.Sum](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[tendermint.types.LightClientAttackEvidence]]).map(tendermint.types.Evidence.Sum.LightClientAttackEvidence(_)))
            .getOrElse(tendermint.types.Evidence.Sum.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tendermint.types.EvidenceProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tendermint.types.EvidenceProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = tendermint.types.DuplicateVoteEvidence
      case 2 => __out = tendermint.types.LightClientAttackEvidence
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tendermint.types.Evidence(
    sum = tendermint.types.Evidence.Sum.Empty
  )
  sealed trait Sum extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isDuplicateVoteEvidence: _root_.scala.Boolean = false
    def isLightClientAttackEvidence: _root_.scala.Boolean = false
    def duplicateVoteEvidence: _root_.scala.Option[tendermint.types.DuplicateVoteEvidence] = _root_.scala.None
    def lightClientAttackEvidence: _root_.scala.Option[tendermint.types.LightClientAttackEvidence] = _root_.scala.None
  }
  object Sum {
    @SerialVersionUID(0L)
    case object Empty extends tendermint.types.Evidence.Sum {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class DuplicateVoteEvidence(value: tendermint.types.DuplicateVoteEvidence) extends tendermint.types.Evidence.Sum {
      type ValueType = tendermint.types.DuplicateVoteEvidence
      override def isDuplicateVoteEvidence: _root_.scala.Boolean = true
      override def duplicateVoteEvidence: _root_.scala.Option[tendermint.types.DuplicateVoteEvidence] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class LightClientAttackEvidence(value: tendermint.types.LightClientAttackEvidence) extends tendermint.types.Evidence.Sum {
      type ValueType = tendermint.types.LightClientAttackEvidence
      override def isLightClientAttackEvidence: _root_.scala.Boolean = true
      override def lightClientAttackEvidence: _root_.scala.Option[tendermint.types.LightClientAttackEvidence] = Some(value)
      override def number: _root_.scala.Int = 2
    }
  }
  implicit class EvidenceLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.Evidence]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tendermint.types.Evidence](_l) {
    def duplicateVoteEvidence: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.DuplicateVoteEvidence] = field(_.getDuplicateVoteEvidence)((c_, f_) => c_.copy(sum = tendermint.types.Evidence.Sum.DuplicateVoteEvidence(f_)))
    def lightClientAttackEvidence: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.LightClientAttackEvidence] = field(_.getLightClientAttackEvidence)((c_, f_) => c_.copy(sum = tendermint.types.Evidence.Sum.LightClientAttackEvidence(f_)))
    def sum: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.Evidence.Sum] = field(_.sum)((c_, f_) => c_.copy(sum = f_))
  }
  final val DUPLICATE_VOTE_EVIDENCE_FIELD_NUMBER = 1
  final val LIGHT_CLIENT_ATTACK_EVIDENCE_FIELD_NUMBER = 2
  def of(
    sum: tendermint.types.Evidence.Sum
  ): _root_.tendermint.types.Evidence = _root_.tendermint.types.Evidence(
    sum
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tendermint.types.Evidence])
}
