// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package tendermint.types

@SerialVersionUID(0L)
final case class BlockMeta(
    blockId: _root_.scala.Option[tendermint.types.BlockID] = _root_.scala.None,
    blockSize: _root_.scala.Long = 0L,
    header: _root_.scala.Option[tendermint.types.Header] = _root_.scala.None,
    numTxs: _root_.scala.Long = 0L,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[BlockMeta] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (blockId.isDefined) {
        val __value = blockId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = blockSize
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      if (header.isDefined) {
        val __value = header.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = numTxs
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      blockId.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = blockSize
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      header.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = numTxs
        if (__v != 0L) {
          _output__.writeInt64(4, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getBlockId: tendermint.types.BlockID = blockId.getOrElse(tendermint.types.BlockID.defaultInstance)
    def clearBlockId: BlockMeta = copy(blockId = _root_.scala.None)
    def withBlockId(__v: tendermint.types.BlockID): BlockMeta = copy(blockId = Option(__v))
    def withBlockSize(__v: _root_.scala.Long): BlockMeta = copy(blockSize = __v)
    def getHeader: tendermint.types.Header = header.getOrElse(tendermint.types.Header.defaultInstance)
    def clearHeader: BlockMeta = copy(header = _root_.scala.None)
    def withHeader(__v: tendermint.types.Header): BlockMeta = copy(header = Option(__v))
    def withNumTxs(__v: _root_.scala.Long): BlockMeta = copy(numTxs = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => blockId.orNull
        case 2 => {
          val __t = blockSize
          if (__t != 0L) __t else null
        }
        case 3 => header.orNull
        case 4 => {
          val __t = numTxs
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => blockId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PLong(blockSize)
        case 3 => header.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PLong(numTxs)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tendermint.types.BlockMeta.type = tendermint.types.BlockMeta
    // @@protoc_insertion_point(GeneratedMessage[tendermint.types.BlockMeta])
}

object BlockMeta extends scalapb.GeneratedMessageCompanion[tendermint.types.BlockMeta] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tendermint.types.BlockMeta] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tendermint.types.BlockMeta = {
    var __blockId: _root_.scala.Option[tendermint.types.BlockID] = _root_.scala.None
    var __blockSize: _root_.scala.Long = 0L
    var __header: _root_.scala.Option[tendermint.types.Header] = _root_.scala.None
    var __numTxs: _root_.scala.Long = 0L
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __blockId = _root_.scala.Option(__blockId.fold(_root_.scalapb.LiteParser.readMessage[tendermint.types.BlockID](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 16 =>
          __blockSize = _input__.readInt64()
        case 26 =>
          __header = _root_.scala.Option(__header.fold(_root_.scalapb.LiteParser.readMessage[tendermint.types.Header](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 32 =>
          __numTxs = _input__.readInt64()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tendermint.types.BlockMeta(
        blockId = __blockId,
        blockSize = __blockSize,
        header = __header,
        numTxs = __numTxs,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tendermint.types.BlockMeta] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tendermint.types.BlockMeta(
        blockId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[tendermint.types.BlockID]]),
        blockSize = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        header = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[tendermint.types.Header]]),
        numTxs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tendermint.types.TypesProto.javaDescriptor.getMessageTypes().get(13)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tendermint.types.TypesProto.scalaDescriptor.messages(13)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = tendermint.types.BlockID
      case 3 => __out = tendermint.types.Header
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tendermint.types.BlockMeta(
    blockId = _root_.scala.None,
    blockSize = 0L,
    header = _root_.scala.None,
    numTxs = 0L
  )
  implicit class BlockMetaLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.BlockMeta]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tendermint.types.BlockMeta](_l) {
    def blockId: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.BlockID] = field(_.getBlockId)((c_, f_) => c_.copy(blockId = _root_.scala.Option(f_)))
    def optionalBlockId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tendermint.types.BlockID]] = field(_.blockId)((c_, f_) => c_.copy(blockId = f_))
    def blockSize: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.blockSize)((c_, f_) => c_.copy(blockSize = f_))
    def header: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.Header] = field(_.getHeader)((c_, f_) => c_.copy(header = _root_.scala.Option(f_)))
    def optionalHeader: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tendermint.types.Header]] = field(_.header)((c_, f_) => c_.copy(header = f_))
    def numTxs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.numTxs)((c_, f_) => c_.copy(numTxs = f_))
  }
  final val BLOCK_ID_FIELD_NUMBER = 1
  final val BLOCK_SIZE_FIELD_NUMBER = 2
  final val HEADER_FIELD_NUMBER = 3
  final val NUM_TXS_FIELD_NUMBER = 4
  def of(
    blockId: _root_.scala.Option[tendermint.types.BlockID],
    blockSize: _root_.scala.Long,
    header: _root_.scala.Option[tendermint.types.Header],
    numTxs: _root_.scala.Long
  ): _root_.tendermint.types.BlockMeta = _root_.tendermint.types.BlockMeta(
    blockId,
    blockSize,
    header,
    numTxs
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tendermint.types.BlockMeta])
}
