// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package tendermint.types

@SerialVersionUID(0L)
final case class SignedHeader(
    header: _root_.scala.Option[tendermint.types.Header] = _root_.scala.None,
    commit: _root_.scala.Option[tendermint.types.Commit] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SignedHeader] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (header.isDefined) {
        val __value = header.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (commit.isDefined) {
        val __value = commit.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      header.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      commit.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getHeader: tendermint.types.Header = header.getOrElse(tendermint.types.Header.defaultInstance)
    def clearHeader: SignedHeader = copy(header = _root_.scala.None)
    def withHeader(__v: tendermint.types.Header): SignedHeader = copy(header = Option(__v))
    def getCommit: tendermint.types.Commit = commit.getOrElse(tendermint.types.Commit.defaultInstance)
    def clearCommit: SignedHeader = copy(commit = _root_.scala.None)
    def withCommit(__v: tendermint.types.Commit): SignedHeader = copy(commit = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => header.orNull
        case 2 => commit.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => header.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => commit.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tendermint.types.SignedHeader.type = tendermint.types.SignedHeader
    // @@protoc_insertion_point(GeneratedMessage[tendermint.types.SignedHeader])
}

object SignedHeader extends scalapb.GeneratedMessageCompanion[tendermint.types.SignedHeader] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tendermint.types.SignedHeader] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tendermint.types.SignedHeader = {
    var __header: _root_.scala.Option[tendermint.types.Header] = _root_.scala.None
    var __commit: _root_.scala.Option[tendermint.types.Commit] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __header = _root_.scala.Option(__header.fold(_root_.scalapb.LiteParser.readMessage[tendermint.types.Header](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __commit = _root_.scala.Option(__commit.fold(_root_.scalapb.LiteParser.readMessage[tendermint.types.Commit](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tendermint.types.SignedHeader(
        header = __header,
        commit = __commit,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tendermint.types.SignedHeader] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tendermint.types.SignedHeader(
        header = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[tendermint.types.Header]]),
        commit = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[tendermint.types.Commit]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tendermint.types.TypesProto.javaDescriptor.getMessageTypes().get(11)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tendermint.types.TypesProto.scalaDescriptor.messages(11)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = tendermint.types.Header
      case 2 => __out = tendermint.types.Commit
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tendermint.types.SignedHeader(
    header = _root_.scala.None,
    commit = _root_.scala.None
  )
  implicit class SignedHeaderLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.SignedHeader]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tendermint.types.SignedHeader](_l) {
    def header: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.Header] = field(_.getHeader)((c_, f_) => c_.copy(header = _root_.scala.Option(f_)))
    def optionalHeader: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tendermint.types.Header]] = field(_.header)((c_, f_) => c_.copy(header = f_))
    def commit: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.Commit] = field(_.getCommit)((c_, f_) => c_.copy(commit = _root_.scala.Option(f_)))
    def optionalCommit: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tendermint.types.Commit]] = field(_.commit)((c_, f_) => c_.copy(commit = f_))
  }
  final val HEADER_FIELD_NUMBER = 1
  final val COMMIT_FIELD_NUMBER = 2
  def of(
    header: _root_.scala.Option[tendermint.types.Header],
    commit: _root_.scala.Option[tendermint.types.Commit]
  ): _root_.tendermint.types.SignedHeader = _root_.tendermint.types.SignedHeader(
    header,
    commit
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tendermint.types.SignedHeader])
}
