// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package tendermint.types

/** LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client.
  */
@SerialVersionUID(0L)
final case class LightClientAttackEvidence(
    conflictingBlock: _root_.scala.Option[tendermint.types.LightBlock] = _root_.scala.None,
    commonHeight: _root_.scala.Long = 0L,
    byzantineValidators: _root_.scala.Seq[tendermint.types.Validator] = _root_.scala.Seq.empty,
    totalVotingPower: _root_.scala.Long = 0L,
    timestamp: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[LightClientAttackEvidence] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (conflictingBlock.isDefined) {
        val __value = conflictingBlock.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = commonHeight
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      byzantineValidators.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = totalVotingPower
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, __value)
        }
      };
      if (timestamp.isDefined) {
        val __value = timestamp.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      conflictingBlock.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = commonHeight
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      byzantineValidators.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = totalVotingPower
        if (__v != 0L) {
          _output__.writeInt64(4, __v)
        }
      };
      timestamp.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getConflictingBlock: tendermint.types.LightBlock = conflictingBlock.getOrElse(tendermint.types.LightBlock.defaultInstance)
    def clearConflictingBlock: LightClientAttackEvidence = copy(conflictingBlock = _root_.scala.None)
    def withConflictingBlock(__v: tendermint.types.LightBlock): LightClientAttackEvidence = copy(conflictingBlock = Option(__v))
    def withCommonHeight(__v: _root_.scala.Long): LightClientAttackEvidence = copy(commonHeight = __v)
    def clearByzantineValidators = copy(byzantineValidators = _root_.scala.Seq.empty)
    def addByzantineValidators(__vs: tendermint.types.Validator *): LightClientAttackEvidence = addAllByzantineValidators(__vs)
    def addAllByzantineValidators(__vs: Iterable[tendermint.types.Validator]): LightClientAttackEvidence = copy(byzantineValidators = byzantineValidators ++ __vs)
    def withByzantineValidators(__v: _root_.scala.Seq[tendermint.types.Validator]): LightClientAttackEvidence = copy(byzantineValidators = __v)
    def withTotalVotingPower(__v: _root_.scala.Long): LightClientAttackEvidence = copy(totalVotingPower = __v)
    def getTimestamp: com.google.protobuf.timestamp.Timestamp = timestamp.getOrElse(com.google.protobuf.timestamp.Timestamp.defaultInstance)
    def clearTimestamp: LightClientAttackEvidence = copy(timestamp = _root_.scala.None)
    def withTimestamp(__v: com.google.protobuf.timestamp.Timestamp): LightClientAttackEvidence = copy(timestamp = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => conflictingBlock.orNull
        case 2 => {
          val __t = commonHeight
          if (__t != 0L) __t else null
        }
        case 3 => byzantineValidators
        case 4 => {
          val __t = totalVotingPower
          if (__t != 0L) __t else null
        }
        case 5 => timestamp.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => conflictingBlock.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PLong(commonHeight)
        case 3 => _root_.scalapb.descriptors.PRepeated(byzantineValidators.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PLong(totalVotingPower)
        case 5 => timestamp.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tendermint.types.LightClientAttackEvidence.type = tendermint.types.LightClientAttackEvidence
    // @@protoc_insertion_point(GeneratedMessage[tendermint.types.LightClientAttackEvidence])
}

object LightClientAttackEvidence extends scalapb.GeneratedMessageCompanion[tendermint.types.LightClientAttackEvidence] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tendermint.types.LightClientAttackEvidence] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tendermint.types.LightClientAttackEvidence = {
    var __conflictingBlock: _root_.scala.Option[tendermint.types.LightBlock] = _root_.scala.None
    var __commonHeight: _root_.scala.Long = 0L
    val __byzantineValidators: _root_.scala.collection.immutable.VectorBuilder[tendermint.types.Validator] = new _root_.scala.collection.immutable.VectorBuilder[tendermint.types.Validator]
    var __totalVotingPower: _root_.scala.Long = 0L
    var __timestamp: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __conflictingBlock = _root_.scala.Option(__conflictingBlock.fold(_root_.scalapb.LiteParser.readMessage[tendermint.types.LightBlock](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 16 =>
          __commonHeight = _input__.readInt64()
        case 26 =>
          __byzantineValidators += _root_.scalapb.LiteParser.readMessage[tendermint.types.Validator](_input__)
        case 32 =>
          __totalVotingPower = _input__.readInt64()
        case 42 =>
          __timestamp = _root_.scala.Option(__timestamp.fold(_root_.scalapb.LiteParser.readMessage[com.google.protobuf.timestamp.Timestamp](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tendermint.types.LightClientAttackEvidence(
        conflictingBlock = __conflictingBlock,
        commonHeight = __commonHeight,
        byzantineValidators = __byzantineValidators.result(),
        totalVotingPower = __totalVotingPower,
        timestamp = __timestamp,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tendermint.types.LightClientAttackEvidence] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tendermint.types.LightClientAttackEvidence(
        conflictingBlock = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[tendermint.types.LightBlock]]),
        commonHeight = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        byzantineValidators = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[tendermint.types.Validator]]).getOrElse(_root_.scala.Seq.empty),
        totalVotingPower = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        timestamp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.timestamp.Timestamp]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tendermint.types.EvidenceProto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tendermint.types.EvidenceProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = tendermint.types.LightBlock
      case 3 => __out = tendermint.types.Validator
      case 5 => __out = com.google.protobuf.timestamp.Timestamp
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tendermint.types.LightClientAttackEvidence(
    conflictingBlock = _root_.scala.None,
    commonHeight = 0L,
    byzantineValidators = _root_.scala.Seq.empty,
    totalVotingPower = 0L,
    timestamp = _root_.scala.None
  )
  implicit class LightClientAttackEvidenceLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.LightClientAttackEvidence]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tendermint.types.LightClientAttackEvidence](_l) {
    def conflictingBlock: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.LightBlock] = field(_.getConflictingBlock)((c_, f_) => c_.copy(conflictingBlock = _root_.scala.Option(f_)))
    def optionalConflictingBlock: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tendermint.types.LightBlock]] = field(_.conflictingBlock)((c_, f_) => c_.copy(conflictingBlock = f_))
    def commonHeight: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.commonHeight)((c_, f_) => c_.copy(commonHeight = f_))
    def byzantineValidators: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[tendermint.types.Validator]] = field(_.byzantineValidators)((c_, f_) => c_.copy(byzantineValidators = f_))
    def totalVotingPower: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.totalVotingPower)((c_, f_) => c_.copy(totalVotingPower = f_))
    def timestamp: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.timestamp.Timestamp] = field(_.getTimestamp)((c_, f_) => c_.copy(timestamp = _root_.scala.Option(f_)))
    def optionalTimestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.timestamp.Timestamp]] = field(_.timestamp)((c_, f_) => c_.copy(timestamp = f_))
  }
  final val CONFLICTING_BLOCK_FIELD_NUMBER = 1
  final val COMMON_HEIGHT_FIELD_NUMBER = 2
  final val BYZANTINE_VALIDATORS_FIELD_NUMBER = 3
  final val TOTAL_VOTING_POWER_FIELD_NUMBER = 4
  final val TIMESTAMP_FIELD_NUMBER = 5
  def of(
    conflictingBlock: _root_.scala.Option[tendermint.types.LightBlock],
    commonHeight: _root_.scala.Long,
    byzantineValidators: _root_.scala.Seq[tendermint.types.Validator],
    totalVotingPower: _root_.scala.Long,
    timestamp: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp]
  ): _root_.tendermint.types.LightClientAttackEvidence = _root_.tendermint.types.LightClientAttackEvidence(
    conflictingBlock,
    commonHeight,
    byzantineValidators,
    totalVotingPower,
    timestamp
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tendermint.types.LightClientAttackEvidence])
}
