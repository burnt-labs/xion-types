// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package tendermint.types

/** DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes.
  */
@SerialVersionUID(0L)
final case class DuplicateVoteEvidence(
    voteA: _root_.scala.Option[tendermint.types.Vote] = _root_.scala.None,
    voteB: _root_.scala.Option[tendermint.types.Vote] = _root_.scala.None,
    totalVotingPower: _root_.scala.Long = 0L,
    validatorPower: _root_.scala.Long = 0L,
    timestamp: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[DuplicateVoteEvidence] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (voteA.isDefined) {
        val __value = voteA.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (voteB.isDefined) {
        val __value = voteB.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = totalVotingPower
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, __value)
        }
      };
      
      {
        val __value = validatorPower
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, __value)
        }
      };
      if (timestamp.isDefined) {
        val __value = timestamp.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      voteA.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      voteB.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = totalVotingPower
        if (__v != 0L) {
          _output__.writeInt64(3, __v)
        }
      };
      {
        val __v = validatorPower
        if (__v != 0L) {
          _output__.writeInt64(4, __v)
        }
      };
      timestamp.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getVoteA: tendermint.types.Vote = voteA.getOrElse(tendermint.types.Vote.defaultInstance)
    def clearVoteA: DuplicateVoteEvidence = copy(voteA = _root_.scala.None)
    def withVoteA(__v: tendermint.types.Vote): DuplicateVoteEvidence = copy(voteA = Option(__v))
    def getVoteB: tendermint.types.Vote = voteB.getOrElse(tendermint.types.Vote.defaultInstance)
    def clearVoteB: DuplicateVoteEvidence = copy(voteB = _root_.scala.None)
    def withVoteB(__v: tendermint.types.Vote): DuplicateVoteEvidence = copy(voteB = Option(__v))
    def withTotalVotingPower(__v: _root_.scala.Long): DuplicateVoteEvidence = copy(totalVotingPower = __v)
    def withValidatorPower(__v: _root_.scala.Long): DuplicateVoteEvidence = copy(validatorPower = __v)
    def getTimestamp: com.google.protobuf.timestamp.Timestamp = timestamp.getOrElse(com.google.protobuf.timestamp.Timestamp.defaultInstance)
    def clearTimestamp: DuplicateVoteEvidence = copy(timestamp = _root_.scala.None)
    def withTimestamp(__v: com.google.protobuf.timestamp.Timestamp): DuplicateVoteEvidence = copy(timestamp = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => voteA.orNull
        case 2 => voteB.orNull
        case 3 => {
          val __t = totalVotingPower
          if (__t != 0L) __t else null
        }
        case 4 => {
          val __t = validatorPower
          if (__t != 0L) __t else null
        }
        case 5 => timestamp.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => voteA.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => voteB.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PLong(totalVotingPower)
        case 4 => _root_.scalapb.descriptors.PLong(validatorPower)
        case 5 => timestamp.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tendermint.types.DuplicateVoteEvidence.type = tendermint.types.DuplicateVoteEvidence
    // @@protoc_insertion_point(GeneratedMessage[tendermint.types.DuplicateVoteEvidence])
}

object DuplicateVoteEvidence extends scalapb.GeneratedMessageCompanion[tendermint.types.DuplicateVoteEvidence] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tendermint.types.DuplicateVoteEvidence] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tendermint.types.DuplicateVoteEvidence = {
    var __voteA: _root_.scala.Option[tendermint.types.Vote] = _root_.scala.None
    var __voteB: _root_.scala.Option[tendermint.types.Vote] = _root_.scala.None
    var __totalVotingPower: _root_.scala.Long = 0L
    var __validatorPower: _root_.scala.Long = 0L
    var __timestamp: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __voteA = _root_.scala.Option(__voteA.fold(_root_.scalapb.LiteParser.readMessage[tendermint.types.Vote](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __voteB = _root_.scala.Option(__voteB.fold(_root_.scalapb.LiteParser.readMessage[tendermint.types.Vote](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 24 =>
          __totalVotingPower = _input__.readInt64()
        case 32 =>
          __validatorPower = _input__.readInt64()
        case 42 =>
          __timestamp = _root_.scala.Option(__timestamp.fold(_root_.scalapb.LiteParser.readMessage[com.google.protobuf.timestamp.Timestamp](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tendermint.types.DuplicateVoteEvidence(
        voteA = __voteA,
        voteB = __voteB,
        totalVotingPower = __totalVotingPower,
        validatorPower = __validatorPower,
        timestamp = __timestamp,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tendermint.types.DuplicateVoteEvidence] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tendermint.types.DuplicateVoteEvidence(
        voteA = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[tendermint.types.Vote]]),
        voteB = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[tendermint.types.Vote]]),
        totalVotingPower = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        validatorPower = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        timestamp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.timestamp.Timestamp]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tendermint.types.EvidenceProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tendermint.types.EvidenceProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = tendermint.types.Vote
      case 2 => __out = tendermint.types.Vote
      case 5 => __out = com.google.protobuf.timestamp.Timestamp
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tendermint.types.DuplicateVoteEvidence(
    voteA = _root_.scala.None,
    voteB = _root_.scala.None,
    totalVotingPower = 0L,
    validatorPower = 0L,
    timestamp = _root_.scala.None
  )
  implicit class DuplicateVoteEvidenceLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.DuplicateVoteEvidence]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tendermint.types.DuplicateVoteEvidence](_l) {
    def voteA: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.Vote] = field(_.getVoteA)((c_, f_) => c_.copy(voteA = _root_.scala.Option(f_)))
    def optionalVoteA: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tendermint.types.Vote]] = field(_.voteA)((c_, f_) => c_.copy(voteA = f_))
    def voteB: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.Vote] = field(_.getVoteB)((c_, f_) => c_.copy(voteB = _root_.scala.Option(f_)))
    def optionalVoteB: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tendermint.types.Vote]] = field(_.voteB)((c_, f_) => c_.copy(voteB = f_))
    def totalVotingPower: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.totalVotingPower)((c_, f_) => c_.copy(totalVotingPower = f_))
    def validatorPower: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.validatorPower)((c_, f_) => c_.copy(validatorPower = f_))
    def timestamp: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.timestamp.Timestamp] = field(_.getTimestamp)((c_, f_) => c_.copy(timestamp = _root_.scala.Option(f_)))
    def optionalTimestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.timestamp.Timestamp]] = field(_.timestamp)((c_, f_) => c_.copy(timestamp = f_))
  }
  final val VOTE_A_FIELD_NUMBER = 1
  final val VOTE_B_FIELD_NUMBER = 2
  final val TOTAL_VOTING_POWER_FIELD_NUMBER = 3
  final val VALIDATOR_POWER_FIELD_NUMBER = 4
  final val TIMESTAMP_FIELD_NUMBER = 5
  def of(
    voteA: _root_.scala.Option[tendermint.types.Vote],
    voteB: _root_.scala.Option[tendermint.types.Vote],
    totalVotingPower: _root_.scala.Long,
    validatorPower: _root_.scala.Long,
    timestamp: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp]
  ): _root_.tendermint.types.DuplicateVoteEvidence = _root_.tendermint.types.DuplicateVoteEvidence(
    voteA,
    voteB,
    totalVotingPower,
    validatorPower,
    timestamp
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tendermint.types.DuplicateVoteEvidence])
}
