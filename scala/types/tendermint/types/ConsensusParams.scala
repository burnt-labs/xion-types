// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package tendermint.types

/** ConsensusParams contains consensus critical parameters that determine the
  * validity of blocks.
  */
@SerialVersionUID(0L)
final case class ConsensusParams(
    block: _root_.scala.Option[tendermint.types.BlockParams] = _root_.scala.None,
    evidence: _root_.scala.Option[tendermint.types.EvidenceParams] = _root_.scala.None,
    validator: _root_.scala.Option[tendermint.types.ValidatorParams] = _root_.scala.None,
    version: _root_.scala.Option[tendermint.types.VersionParams] = _root_.scala.None,
    abci: _root_.scala.Option[tendermint.types.ABCIParams] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ConsensusParams] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (block.isDefined) {
        val __value = block.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (evidence.isDefined) {
        val __value = evidence.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (validator.isDefined) {
        val __value = validator.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (version.isDefined) {
        val __value = version.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (abci.isDefined) {
        val __value = abci.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      block.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      evidence.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      validator.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      version.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      abci.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getBlock: tendermint.types.BlockParams = block.getOrElse(tendermint.types.BlockParams.defaultInstance)
    def clearBlock: ConsensusParams = copy(block = _root_.scala.None)
    def withBlock(__v: tendermint.types.BlockParams): ConsensusParams = copy(block = Option(__v))
    def getEvidence: tendermint.types.EvidenceParams = evidence.getOrElse(tendermint.types.EvidenceParams.defaultInstance)
    def clearEvidence: ConsensusParams = copy(evidence = _root_.scala.None)
    def withEvidence(__v: tendermint.types.EvidenceParams): ConsensusParams = copy(evidence = Option(__v))
    def getValidator: tendermint.types.ValidatorParams = validator.getOrElse(tendermint.types.ValidatorParams.defaultInstance)
    def clearValidator: ConsensusParams = copy(validator = _root_.scala.None)
    def withValidator(__v: tendermint.types.ValidatorParams): ConsensusParams = copy(validator = Option(__v))
    def getVersion: tendermint.types.VersionParams = version.getOrElse(tendermint.types.VersionParams.defaultInstance)
    def clearVersion: ConsensusParams = copy(version = _root_.scala.None)
    def withVersion(__v: tendermint.types.VersionParams): ConsensusParams = copy(version = Option(__v))
    def getAbci: tendermint.types.ABCIParams = abci.getOrElse(tendermint.types.ABCIParams.defaultInstance)
    def clearAbci: ConsensusParams = copy(abci = _root_.scala.None)
    def withAbci(__v: tendermint.types.ABCIParams): ConsensusParams = copy(abci = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => block.orNull
        case 2 => evidence.orNull
        case 3 => validator.orNull
        case 4 => version.orNull
        case 5 => abci.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => block.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => evidence.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => validator.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => version.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => abci.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tendermint.types.ConsensusParams.type = tendermint.types.ConsensusParams
    // @@protoc_insertion_point(GeneratedMessage[tendermint.types.ConsensusParams])
}

object ConsensusParams extends scalapb.GeneratedMessageCompanion[tendermint.types.ConsensusParams] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tendermint.types.ConsensusParams] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tendermint.types.ConsensusParams = {
    var __block: _root_.scala.Option[tendermint.types.BlockParams] = _root_.scala.None
    var __evidence: _root_.scala.Option[tendermint.types.EvidenceParams] = _root_.scala.None
    var __validator: _root_.scala.Option[tendermint.types.ValidatorParams] = _root_.scala.None
    var __version: _root_.scala.Option[tendermint.types.VersionParams] = _root_.scala.None
    var __abci: _root_.scala.Option[tendermint.types.ABCIParams] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __block = _root_.scala.Option(__block.fold(_root_.scalapb.LiteParser.readMessage[tendermint.types.BlockParams](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __evidence = _root_.scala.Option(__evidence.fold(_root_.scalapb.LiteParser.readMessage[tendermint.types.EvidenceParams](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __validator = _root_.scala.Option(__validator.fold(_root_.scalapb.LiteParser.readMessage[tendermint.types.ValidatorParams](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __version = _root_.scala.Option(__version.fold(_root_.scalapb.LiteParser.readMessage[tendermint.types.VersionParams](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 42 =>
          __abci = _root_.scala.Option(__abci.fold(_root_.scalapb.LiteParser.readMessage[tendermint.types.ABCIParams](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tendermint.types.ConsensusParams(
        block = __block,
        evidence = __evidence,
        validator = __validator,
        version = __version,
        abci = __abci,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tendermint.types.ConsensusParams] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tendermint.types.ConsensusParams(
        block = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[tendermint.types.BlockParams]]),
        evidence = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[tendermint.types.EvidenceParams]]),
        validator = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[tendermint.types.ValidatorParams]]),
        version = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[tendermint.types.VersionParams]]),
        abci = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[tendermint.types.ABCIParams]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tendermint.types.ParamsProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tendermint.types.ParamsProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = tendermint.types.BlockParams
      case 2 => __out = tendermint.types.EvidenceParams
      case 3 => __out = tendermint.types.ValidatorParams
      case 4 => __out = tendermint.types.VersionParams
      case 5 => __out = tendermint.types.ABCIParams
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tendermint.types.ConsensusParams(
    block = _root_.scala.None,
    evidence = _root_.scala.None,
    validator = _root_.scala.None,
    version = _root_.scala.None,
    abci = _root_.scala.None
  )
  implicit class ConsensusParamsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.ConsensusParams]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tendermint.types.ConsensusParams](_l) {
    def block: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.BlockParams] = field(_.getBlock)((c_, f_) => c_.copy(block = _root_.scala.Option(f_)))
    def optionalBlock: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tendermint.types.BlockParams]] = field(_.block)((c_, f_) => c_.copy(block = f_))
    def evidence: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.EvidenceParams] = field(_.getEvidence)((c_, f_) => c_.copy(evidence = _root_.scala.Option(f_)))
    def optionalEvidence: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tendermint.types.EvidenceParams]] = field(_.evidence)((c_, f_) => c_.copy(evidence = f_))
    def validator: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.ValidatorParams] = field(_.getValidator)((c_, f_) => c_.copy(validator = _root_.scala.Option(f_)))
    def optionalValidator: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tendermint.types.ValidatorParams]] = field(_.validator)((c_, f_) => c_.copy(validator = f_))
    def version: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.VersionParams] = field(_.getVersion)((c_, f_) => c_.copy(version = _root_.scala.Option(f_)))
    def optionalVersion: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tendermint.types.VersionParams]] = field(_.version)((c_, f_) => c_.copy(version = f_))
    def abci: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.ABCIParams] = field(_.getAbci)((c_, f_) => c_.copy(abci = _root_.scala.Option(f_)))
    def optionalAbci: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tendermint.types.ABCIParams]] = field(_.abci)((c_, f_) => c_.copy(abci = f_))
  }
  final val BLOCK_FIELD_NUMBER = 1
  final val EVIDENCE_FIELD_NUMBER = 2
  final val VALIDATOR_FIELD_NUMBER = 3
  final val VERSION_FIELD_NUMBER = 4
  final val ABCI_FIELD_NUMBER = 5
  def of(
    block: _root_.scala.Option[tendermint.types.BlockParams],
    evidence: _root_.scala.Option[tendermint.types.EvidenceParams],
    validator: _root_.scala.Option[tendermint.types.ValidatorParams],
    version: _root_.scala.Option[tendermint.types.VersionParams],
    abci: _root_.scala.Option[tendermint.types.ABCIParams]
  ): _root_.tendermint.types.ConsensusParams = _root_.tendermint.types.ConsensusParams(
    block,
    evidence,
    validator,
    version,
    abci
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tendermint.types.ConsensusParams])
}
