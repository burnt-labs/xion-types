// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package tendermint.types

/** BlockIdFlag indicates which BlockID the signature is for
  */
sealed abstract class BlockIDFlag(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
  type EnumType = tendermint.types.BlockIDFlag
  type RecognizedType = tendermint.types.BlockIDFlag.Recognized
  def isBlockIdFlagUnknown: _root_.scala.Boolean = false
  def isBlockIdFlagAbsent: _root_.scala.Boolean = false
  def isBlockIdFlagCommit: _root_.scala.Boolean = false
  def isBlockIdFlagNil: _root_.scala.Boolean = false
  def companion: _root_.scalapb.GeneratedEnumCompanion[BlockIDFlag] = tendermint.types.BlockIDFlag
  final def asRecognized: _root_.scala.Option[tendermint.types.BlockIDFlag.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[tendermint.types.BlockIDFlag.Recognized])
}

object BlockIDFlag extends _root_.scalapb.GeneratedEnumCompanion[BlockIDFlag] {
  sealed trait Recognized extends BlockIDFlag
  implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[BlockIDFlag] = this
  
  /** indicates an error condition
    */
  @SerialVersionUID(0L)
  case object BLOCK_ID_FLAG_UNKNOWN extends BlockIDFlag(0) with BlockIDFlag.Recognized {
    val index = 0
    val name = "BLOCK_ID_FLAG_UNKNOWN"
    override def isBlockIdFlagUnknown: _root_.scala.Boolean = true
  }
  
  /** the vote was not received
    */
  @SerialVersionUID(0L)
  case object BLOCK_ID_FLAG_ABSENT extends BlockIDFlag(1) with BlockIDFlag.Recognized {
    val index = 1
    val name = "BLOCK_ID_FLAG_ABSENT"
    override def isBlockIdFlagAbsent: _root_.scala.Boolean = true
  }
  
  /** voted for the block that received the majority
    */
  @SerialVersionUID(0L)
  case object BLOCK_ID_FLAG_COMMIT extends BlockIDFlag(2) with BlockIDFlag.Recognized {
    val index = 2
    val name = "BLOCK_ID_FLAG_COMMIT"
    override def isBlockIdFlagCommit: _root_.scala.Boolean = true
  }
  
  /** voted for nil
    */
  @SerialVersionUID(0L)
  case object BLOCK_ID_FLAG_NIL extends BlockIDFlag(3) with BlockIDFlag.Recognized {
    val index = 3
    val name = "BLOCK_ID_FLAG_NIL"
    override def isBlockIdFlagNil: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends BlockIDFlag(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
  lazy val values: scala.collection.immutable.Seq[ValueType] = scala.collection.immutable.Seq(BLOCK_ID_FLAG_UNKNOWN, BLOCK_ID_FLAG_ABSENT, BLOCK_ID_FLAG_COMMIT, BLOCK_ID_FLAG_NIL)
  def fromValue(__value: _root_.scala.Int): BlockIDFlag = __value match {
    case 0 => BLOCK_ID_FLAG_UNKNOWN
    case 1 => BLOCK_ID_FLAG_ABSENT
    case 2 => BLOCK_ID_FLAG_COMMIT
    case 3 => BLOCK_ID_FLAG_NIL
    case __other => Unrecognized(__other)
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = tendermint.types.ValidatorProto.javaDescriptor.getEnumTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = tendermint.types.ValidatorProto.scalaDescriptor.enums(0)
}