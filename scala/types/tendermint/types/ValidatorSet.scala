// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package tendermint.types

@SerialVersionUID(0L)
final case class ValidatorSet(
    validators: _root_.scala.Seq[tendermint.types.Validator] = _root_.scala.Seq.empty,
    proposer: _root_.scala.Option[tendermint.types.Validator] = _root_.scala.None,
    totalVotingPower: _root_.scala.Long = 0L,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ValidatorSet] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      validators.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (proposer.isDefined) {
        val __value = proposer.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = totalVotingPower
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      validators.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      proposer.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = totalVotingPower
        if (__v != 0L) {
          _output__.writeInt64(3, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def clearValidators = copy(validators = _root_.scala.Seq.empty)
    def addValidators(__vs: tendermint.types.Validator *): ValidatorSet = addAllValidators(__vs)
    def addAllValidators(__vs: Iterable[tendermint.types.Validator]): ValidatorSet = copy(validators = validators ++ __vs)
    def withValidators(__v: _root_.scala.Seq[tendermint.types.Validator]): ValidatorSet = copy(validators = __v)
    def getProposer: tendermint.types.Validator = proposer.getOrElse(tendermint.types.Validator.defaultInstance)
    def clearProposer: ValidatorSet = copy(proposer = _root_.scala.None)
    def withProposer(__v: tendermint.types.Validator): ValidatorSet = copy(proposer = Option(__v))
    def withTotalVotingPower(__v: _root_.scala.Long): ValidatorSet = copy(totalVotingPower = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => validators
        case 2 => proposer.orNull
        case 3 => {
          val __t = totalVotingPower
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(validators.iterator.map(_.toPMessage).toVector)
        case 2 => proposer.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PLong(totalVotingPower)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tendermint.types.ValidatorSet.type = tendermint.types.ValidatorSet
    // @@protoc_insertion_point(GeneratedMessage[tendermint.types.ValidatorSet])
}

object ValidatorSet extends scalapb.GeneratedMessageCompanion[tendermint.types.ValidatorSet] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tendermint.types.ValidatorSet] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tendermint.types.ValidatorSet = {
    val __validators: _root_.scala.collection.immutable.VectorBuilder[tendermint.types.Validator] = new _root_.scala.collection.immutable.VectorBuilder[tendermint.types.Validator]
    var __proposer: _root_.scala.Option[tendermint.types.Validator] = _root_.scala.None
    var __totalVotingPower: _root_.scala.Long = 0L
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __validators += _root_.scalapb.LiteParser.readMessage[tendermint.types.Validator](_input__)
        case 18 =>
          __proposer = _root_.scala.Option(__proposer.fold(_root_.scalapb.LiteParser.readMessage[tendermint.types.Validator](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 24 =>
          __totalVotingPower = _input__.readInt64()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tendermint.types.ValidatorSet(
        validators = __validators.result(),
        proposer = __proposer,
        totalVotingPower = __totalVotingPower,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tendermint.types.ValidatorSet] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tendermint.types.ValidatorSet(
        validators = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[tendermint.types.Validator]]).getOrElse(_root_.scala.Seq.empty),
        proposer = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[tendermint.types.Validator]]),
        totalVotingPower = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tendermint.types.ValidatorProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tendermint.types.ValidatorProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = tendermint.types.Validator
      case 2 => __out = tendermint.types.Validator
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tendermint.types.ValidatorSet(
    validators = _root_.scala.Seq.empty,
    proposer = _root_.scala.None,
    totalVotingPower = 0L
  )
  implicit class ValidatorSetLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.ValidatorSet]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tendermint.types.ValidatorSet](_l) {
    def validators: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[tendermint.types.Validator]] = field(_.validators)((c_, f_) => c_.copy(validators = f_))
    def proposer: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.Validator] = field(_.getProposer)((c_, f_) => c_.copy(proposer = _root_.scala.Option(f_)))
    def optionalProposer: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tendermint.types.Validator]] = field(_.proposer)((c_, f_) => c_.copy(proposer = f_))
    def totalVotingPower: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.totalVotingPower)((c_, f_) => c_.copy(totalVotingPower = f_))
  }
  final val VALIDATORS_FIELD_NUMBER = 1
  final val PROPOSER_FIELD_NUMBER = 2
  final val TOTAL_VOTING_POWER_FIELD_NUMBER = 3
  def of(
    validators: _root_.scala.Seq[tendermint.types.Validator],
    proposer: _root_.scala.Option[tendermint.types.Validator],
    totalVotingPower: _root_.scala.Long
  ): _root_.tendermint.types.ValidatorSet = _root_.tendermint.types.ValidatorSet(
    validators,
    proposer,
    totalVotingPower
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tendermint.types.ValidatorSet])
}
