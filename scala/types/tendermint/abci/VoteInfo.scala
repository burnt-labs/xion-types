// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package tendermint.abci

@SerialVersionUID(0L)
final case class VoteInfo(
    validator: _root_.scala.Option[tendermint.abci.Validator] = _root_.scala.None,
    blockIdFlag: tendermint.types.BlockIDFlag = tendermint.types.BlockIDFlag.BLOCK_ID_FLAG_UNKNOWN,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[VoteInfo] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (validator.isDefined) {
        val __value = validator.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = blockIdFlag.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(3, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      validator.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = blockIdFlag.value
        if (__v != 0) {
          _output__.writeEnum(3, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getValidator: tendermint.abci.Validator = validator.getOrElse(tendermint.abci.Validator.defaultInstance)
    def clearValidator: VoteInfo = copy(validator = _root_.scala.None)
    def withValidator(__v: tendermint.abci.Validator): VoteInfo = copy(validator = Option(__v))
    def withBlockIdFlag(__v: tendermint.types.BlockIDFlag): VoteInfo = copy(blockIdFlag = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => validator.orNull
        case 3 => {
          val __t = blockIdFlag.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => validator.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PEnum(blockIdFlag.scalaValueDescriptor)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tendermint.abci.VoteInfo.type = tendermint.abci.VoteInfo
    // @@protoc_insertion_point(GeneratedMessage[tendermint.abci.VoteInfo])
}

object VoteInfo extends scalapb.GeneratedMessageCompanion[tendermint.abci.VoteInfo] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tendermint.abci.VoteInfo] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tendermint.abci.VoteInfo = {
    var __validator: _root_.scala.Option[tendermint.abci.Validator] = _root_.scala.None
    var __blockIdFlag: tendermint.types.BlockIDFlag = tendermint.types.BlockIDFlag.BLOCK_ID_FLAG_UNKNOWN
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __validator = _root_.scala.Option(__validator.fold(_root_.scalapb.LiteParser.readMessage[tendermint.abci.Validator](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 24 =>
          __blockIdFlag = tendermint.types.BlockIDFlag.fromValue(_input__.readEnum())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tendermint.abci.VoteInfo(
        validator = __validator,
        blockIdFlag = __blockIdFlag,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tendermint.abci.VoteInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tendermint.abci.VoteInfo(
        validator = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[tendermint.abci.Validator]]),
        blockIdFlag = tendermint.types.BlockIDFlag.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(tendermint.types.BlockIDFlag.BLOCK_ID_FLAG_UNKNOWN.scalaValueDescriptor).number)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tendermint.abci.TypesProto.javaDescriptor.getMessageTypes().get(43)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tendermint.abci.TypesProto.scalaDescriptor.messages(43)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = tendermint.abci.Validator
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 3 => tendermint.types.BlockIDFlag
    }
  }
  lazy val defaultInstance = tendermint.abci.VoteInfo(
    validator = _root_.scala.None,
    blockIdFlag = tendermint.types.BlockIDFlag.BLOCK_ID_FLAG_UNKNOWN
  )
  implicit class VoteInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tendermint.abci.VoteInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tendermint.abci.VoteInfo](_l) {
    def validator: _root_.scalapb.lenses.Lens[UpperPB, tendermint.abci.Validator] = field(_.getValidator)((c_, f_) => c_.copy(validator = _root_.scala.Option(f_)))
    def optionalValidator: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tendermint.abci.Validator]] = field(_.validator)((c_, f_) => c_.copy(validator = f_))
    def blockIdFlag: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.BlockIDFlag] = field(_.blockIdFlag)((c_, f_) => c_.copy(blockIdFlag = f_))
  }
  final val VALIDATOR_FIELD_NUMBER = 1
  final val BLOCK_ID_FLAG_FIELD_NUMBER = 3
  def of(
    validator: _root_.scala.Option[tendermint.abci.Validator],
    blockIdFlag: tendermint.types.BlockIDFlag
  ): _root_.tendermint.abci.VoteInfo = _root_.tendermint.abci.VoteInfo(
    validator,
    blockIdFlag
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tendermint.abci.VoteInfo])
}
