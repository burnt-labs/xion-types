// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package tendermint.abci

@SerialVersionUID(0L)
final case class Response(
    value: tendermint.abci.Response.Value = tendermint.abci.Response.Value.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Response] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (value.exception.isDefined) {
        val __value = value.exception.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (value.echo.isDefined) {
        val __value = value.echo.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (value.flush.isDefined) {
        val __value = value.flush.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (value.info.isDefined) {
        val __value = value.info.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (value.initChain.isDefined) {
        val __value = value.initChain.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (value.query.isDefined) {
        val __value = value.query.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (value.checkTx.isDefined) {
        val __value = value.checkTx.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (value.commit.isDefined) {
        val __value = value.commit.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (value.listSnapshots.isDefined) {
        val __value = value.listSnapshots.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (value.offerSnapshot.isDefined) {
        val __value = value.offerSnapshot.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (value.loadSnapshotChunk.isDefined) {
        val __value = value.loadSnapshotChunk.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (value.applySnapshotChunk.isDefined) {
        val __value = value.applySnapshotChunk.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (value.prepareProposal.isDefined) {
        val __value = value.prepareProposal.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (value.processProposal.isDefined) {
        val __value = value.processProposal.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (value.extendVote.isDefined) {
        val __value = value.extendVote.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (value.verifyVoteExtension.isDefined) {
        val __value = value.verifyVoteExtension.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (value.finalizeBlock.isDefined) {
        val __value = value.finalizeBlock.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      value.exception.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      value.echo.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      value.flush.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      value.info.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      value.initChain.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      value.query.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      value.checkTx.foreach { __v =>
        val __m = __v
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      value.commit.foreach { __v =>
        val __m = __v
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      value.listSnapshots.foreach { __v =>
        val __m = __v
        _output__.writeTag(13, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      value.offerSnapshot.foreach { __v =>
        val __m = __v
        _output__.writeTag(14, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      value.loadSnapshotChunk.foreach { __v =>
        val __m = __v
        _output__.writeTag(15, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      value.applySnapshotChunk.foreach { __v =>
        val __m = __v
        _output__.writeTag(16, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      value.prepareProposal.foreach { __v =>
        val __m = __v
        _output__.writeTag(17, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      value.processProposal.foreach { __v =>
        val __m = __v
        _output__.writeTag(18, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      value.extendVote.foreach { __v =>
        val __m = __v
        _output__.writeTag(19, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      value.verifyVoteExtension.foreach { __v =>
        val __m = __v
        _output__.writeTag(20, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      value.finalizeBlock.foreach { __v =>
        val __m = __v
        _output__.writeTag(21, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getException: tendermint.abci.ResponseException = value.exception.getOrElse(tendermint.abci.ResponseException.defaultInstance)
    def withException(__v: tendermint.abci.ResponseException): Response = copy(value = tendermint.abci.Response.Value.Exception(__v))
    def getEcho: tendermint.abci.ResponseEcho = value.echo.getOrElse(tendermint.abci.ResponseEcho.defaultInstance)
    def withEcho(__v: tendermint.abci.ResponseEcho): Response = copy(value = tendermint.abci.Response.Value.Echo(__v))
    def getFlush: tendermint.abci.ResponseFlush = value.flush.getOrElse(tendermint.abci.ResponseFlush.defaultInstance)
    def withFlush(__v: tendermint.abci.ResponseFlush): Response = copy(value = tendermint.abci.Response.Value.Flush(__v))
    def getInfo: tendermint.abci.ResponseInfo = value.info.getOrElse(tendermint.abci.ResponseInfo.defaultInstance)
    def withInfo(__v: tendermint.abci.ResponseInfo): Response = copy(value = tendermint.abci.Response.Value.Info(__v))
    def getInitChain: tendermint.abci.ResponseInitChain = value.initChain.getOrElse(tendermint.abci.ResponseInitChain.defaultInstance)
    def withInitChain(__v: tendermint.abci.ResponseInitChain): Response = copy(value = tendermint.abci.Response.Value.InitChain(__v))
    def getQuery: tendermint.abci.ResponseQuery = value.query.getOrElse(tendermint.abci.ResponseQuery.defaultInstance)
    def withQuery(__v: tendermint.abci.ResponseQuery): Response = copy(value = tendermint.abci.Response.Value.Query(__v))
    def getCheckTx: tendermint.abci.ResponseCheckTx = value.checkTx.getOrElse(tendermint.abci.ResponseCheckTx.defaultInstance)
    def withCheckTx(__v: tendermint.abci.ResponseCheckTx): Response = copy(value = tendermint.abci.Response.Value.CheckTx(__v))
    def getCommit: tendermint.abci.ResponseCommit = value.commit.getOrElse(tendermint.abci.ResponseCommit.defaultInstance)
    def withCommit(__v: tendermint.abci.ResponseCommit): Response = copy(value = tendermint.abci.Response.Value.Commit(__v))
    def getListSnapshots: tendermint.abci.ResponseListSnapshots = value.listSnapshots.getOrElse(tendermint.abci.ResponseListSnapshots.defaultInstance)
    def withListSnapshots(__v: tendermint.abci.ResponseListSnapshots): Response = copy(value = tendermint.abci.Response.Value.ListSnapshots(__v))
    def getOfferSnapshot: tendermint.abci.ResponseOfferSnapshot = value.offerSnapshot.getOrElse(tendermint.abci.ResponseOfferSnapshot.defaultInstance)
    def withOfferSnapshot(__v: tendermint.abci.ResponseOfferSnapshot): Response = copy(value = tendermint.abci.Response.Value.OfferSnapshot(__v))
    def getLoadSnapshotChunk: tendermint.abci.ResponseLoadSnapshotChunk = value.loadSnapshotChunk.getOrElse(tendermint.abci.ResponseLoadSnapshotChunk.defaultInstance)
    def withLoadSnapshotChunk(__v: tendermint.abci.ResponseLoadSnapshotChunk): Response = copy(value = tendermint.abci.Response.Value.LoadSnapshotChunk(__v))
    def getApplySnapshotChunk: tendermint.abci.ResponseApplySnapshotChunk = value.applySnapshotChunk.getOrElse(tendermint.abci.ResponseApplySnapshotChunk.defaultInstance)
    def withApplySnapshotChunk(__v: tendermint.abci.ResponseApplySnapshotChunk): Response = copy(value = tendermint.abci.Response.Value.ApplySnapshotChunk(__v))
    def getPrepareProposal: tendermint.abci.ResponsePrepareProposal = value.prepareProposal.getOrElse(tendermint.abci.ResponsePrepareProposal.defaultInstance)
    def withPrepareProposal(__v: tendermint.abci.ResponsePrepareProposal): Response = copy(value = tendermint.abci.Response.Value.PrepareProposal(__v))
    def getProcessProposal: tendermint.abci.ResponseProcessProposal = value.processProposal.getOrElse(tendermint.abci.ResponseProcessProposal.defaultInstance)
    def withProcessProposal(__v: tendermint.abci.ResponseProcessProposal): Response = copy(value = tendermint.abci.Response.Value.ProcessProposal(__v))
    def getExtendVote: tendermint.abci.ResponseExtendVote = value.extendVote.getOrElse(tendermint.abci.ResponseExtendVote.defaultInstance)
    def withExtendVote(__v: tendermint.abci.ResponseExtendVote): Response = copy(value = tendermint.abci.Response.Value.ExtendVote(__v))
    def getVerifyVoteExtension: tendermint.abci.ResponseVerifyVoteExtension = value.verifyVoteExtension.getOrElse(tendermint.abci.ResponseVerifyVoteExtension.defaultInstance)
    def withVerifyVoteExtension(__v: tendermint.abci.ResponseVerifyVoteExtension): Response = copy(value = tendermint.abci.Response.Value.VerifyVoteExtension(__v))
    def getFinalizeBlock: tendermint.abci.ResponseFinalizeBlock = value.finalizeBlock.getOrElse(tendermint.abci.ResponseFinalizeBlock.defaultInstance)
    def withFinalizeBlock(__v: tendermint.abci.ResponseFinalizeBlock): Response = copy(value = tendermint.abci.Response.Value.FinalizeBlock(__v))
    def clearValue: Response = copy(value = tendermint.abci.Response.Value.Empty)
    def withValue(__v: tendermint.abci.Response.Value): Response = copy(value = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => value.exception.orNull
        case 2 => value.echo.orNull
        case 3 => value.flush.orNull
        case 4 => value.info.orNull
        case 6 => value.initChain.orNull
        case 7 => value.query.orNull
        case 9 => value.checkTx.orNull
        case 12 => value.commit.orNull
        case 13 => value.listSnapshots.orNull
        case 14 => value.offerSnapshot.orNull
        case 15 => value.loadSnapshotChunk.orNull
        case 16 => value.applySnapshotChunk.orNull
        case 17 => value.prepareProposal.orNull
        case 18 => value.processProposal.orNull
        case 19 => value.extendVote.orNull
        case 20 => value.verifyVoteExtension.orNull
        case 21 => value.finalizeBlock.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => value.exception.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => value.echo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => value.flush.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => value.info.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => value.initChain.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => value.query.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => value.checkTx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => value.commit.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => value.listSnapshots.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => value.offerSnapshot.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => value.loadSnapshotChunk.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 16 => value.applySnapshotChunk.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 17 => value.prepareProposal.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 18 => value.processProposal.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 19 => value.extendVote.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 20 => value.verifyVoteExtension.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 21 => value.finalizeBlock.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tendermint.abci.Response.type = tendermint.abci.Response
    // @@protoc_insertion_point(GeneratedMessage[tendermint.abci.Response])
}

object Response extends scalapb.GeneratedMessageCompanion[tendermint.abci.Response] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tendermint.abci.Response] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tendermint.abci.Response = {
    var __value: tendermint.abci.Response.Value = tendermint.abci.Response.Value.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __value = tendermint.abci.Response.Value.Exception(__value.exception.fold(_root_.scalapb.LiteParser.readMessage[tendermint.abci.ResponseException](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __value = tendermint.abci.Response.Value.Echo(__value.echo.fold(_root_.scalapb.LiteParser.readMessage[tendermint.abci.ResponseEcho](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __value = tendermint.abci.Response.Value.Flush(__value.flush.fold(_root_.scalapb.LiteParser.readMessage[tendermint.abci.ResponseFlush](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __value = tendermint.abci.Response.Value.Info(__value.info.fold(_root_.scalapb.LiteParser.readMessage[tendermint.abci.ResponseInfo](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 50 =>
          __value = tendermint.abci.Response.Value.InitChain(__value.initChain.fold(_root_.scalapb.LiteParser.readMessage[tendermint.abci.ResponseInitChain](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 58 =>
          __value = tendermint.abci.Response.Value.Query(__value.query.fold(_root_.scalapb.LiteParser.readMessage[tendermint.abci.ResponseQuery](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 74 =>
          __value = tendermint.abci.Response.Value.CheckTx(__value.checkTx.fold(_root_.scalapb.LiteParser.readMessage[tendermint.abci.ResponseCheckTx](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 98 =>
          __value = tendermint.abci.Response.Value.Commit(__value.commit.fold(_root_.scalapb.LiteParser.readMessage[tendermint.abci.ResponseCommit](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 106 =>
          __value = tendermint.abci.Response.Value.ListSnapshots(__value.listSnapshots.fold(_root_.scalapb.LiteParser.readMessage[tendermint.abci.ResponseListSnapshots](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 114 =>
          __value = tendermint.abci.Response.Value.OfferSnapshot(__value.offerSnapshot.fold(_root_.scalapb.LiteParser.readMessage[tendermint.abci.ResponseOfferSnapshot](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 122 =>
          __value = tendermint.abci.Response.Value.LoadSnapshotChunk(__value.loadSnapshotChunk.fold(_root_.scalapb.LiteParser.readMessage[tendermint.abci.ResponseLoadSnapshotChunk](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 130 =>
          __value = tendermint.abci.Response.Value.ApplySnapshotChunk(__value.applySnapshotChunk.fold(_root_.scalapb.LiteParser.readMessage[tendermint.abci.ResponseApplySnapshotChunk](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 138 =>
          __value = tendermint.abci.Response.Value.PrepareProposal(__value.prepareProposal.fold(_root_.scalapb.LiteParser.readMessage[tendermint.abci.ResponsePrepareProposal](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 146 =>
          __value = tendermint.abci.Response.Value.ProcessProposal(__value.processProposal.fold(_root_.scalapb.LiteParser.readMessage[tendermint.abci.ResponseProcessProposal](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 154 =>
          __value = tendermint.abci.Response.Value.ExtendVote(__value.extendVote.fold(_root_.scalapb.LiteParser.readMessage[tendermint.abci.ResponseExtendVote](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 162 =>
          __value = tendermint.abci.Response.Value.VerifyVoteExtension(__value.verifyVoteExtension.fold(_root_.scalapb.LiteParser.readMessage[tendermint.abci.ResponseVerifyVoteExtension](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 170 =>
          __value = tendermint.abci.Response.Value.FinalizeBlock(__value.finalizeBlock.fold(_root_.scalapb.LiteParser.readMessage[tendermint.abci.ResponseFinalizeBlock](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tendermint.abci.Response(
        value = __value,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tendermint.abci.Response] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tendermint.abci.Response(
        value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[tendermint.abci.ResponseException]]).map(tendermint.abci.Response.Value.Exception(_))
            .orElse[tendermint.abci.Response.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[tendermint.abci.ResponseEcho]]).map(tendermint.abci.Response.Value.Echo(_)))
            .orElse[tendermint.abci.Response.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[tendermint.abci.ResponseFlush]]).map(tendermint.abci.Response.Value.Flush(_)))
            .orElse[tendermint.abci.Response.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[tendermint.abci.ResponseInfo]]).map(tendermint.abci.Response.Value.Info(_)))
            .orElse[tendermint.abci.Response.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[tendermint.abci.ResponseInitChain]]).map(tendermint.abci.Response.Value.InitChain(_)))
            .orElse[tendermint.abci.Response.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[tendermint.abci.ResponseQuery]]).map(tendermint.abci.Response.Value.Query(_)))
            .orElse[tendermint.abci.Response.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[_root_.scala.Option[tendermint.abci.ResponseCheckTx]]).map(tendermint.abci.Response.Value.CheckTx(_)))
            .orElse[tendermint.abci.Response.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[_root_.scala.Option[tendermint.abci.ResponseCommit]]).map(tendermint.abci.Response.Value.Commit(_)))
            .orElse[tendermint.abci.Response.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[_root_.scala.Option[tendermint.abci.ResponseListSnapshots]]).map(tendermint.abci.Response.Value.ListSnapshots(_)))
            .orElse[tendermint.abci.Response.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[_root_.scala.Option[tendermint.abci.ResponseOfferSnapshot]]).map(tendermint.abci.Response.Value.OfferSnapshot(_)))
            .orElse[tendermint.abci.Response.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[_root_.scala.Option[tendermint.abci.ResponseLoadSnapshotChunk]]).map(tendermint.abci.Response.Value.LoadSnapshotChunk(_)))
            .orElse[tendermint.abci.Response.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).flatMap(_.as[_root_.scala.Option[tendermint.abci.ResponseApplySnapshotChunk]]).map(tendermint.abci.Response.Value.ApplySnapshotChunk(_)))
            .orElse[tendermint.abci.Response.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).flatMap(_.as[_root_.scala.Option[tendermint.abci.ResponsePrepareProposal]]).map(tendermint.abci.Response.Value.PrepareProposal(_)))
            .orElse[tendermint.abci.Response.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).flatMap(_.as[_root_.scala.Option[tendermint.abci.ResponseProcessProposal]]).map(tendermint.abci.Response.Value.ProcessProposal(_)))
            .orElse[tendermint.abci.Response.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).flatMap(_.as[_root_.scala.Option[tendermint.abci.ResponseExtendVote]]).map(tendermint.abci.Response.Value.ExtendVote(_)))
            .orElse[tendermint.abci.Response.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).flatMap(_.as[_root_.scala.Option[tendermint.abci.ResponseVerifyVoteExtension]]).map(tendermint.abci.Response.Value.VerifyVoteExtension(_)))
            .orElse[tendermint.abci.Response.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).flatMap(_.as[_root_.scala.Option[tendermint.abci.ResponseFinalizeBlock]]).map(tendermint.abci.Response.Value.FinalizeBlock(_)))
            .getOrElse(tendermint.abci.Response.Value.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tendermint.abci.TypesProto.javaDescriptor.getMessageTypes().get(17)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tendermint.abci.TypesProto.scalaDescriptor.messages(17)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = tendermint.abci.ResponseException
      case 2 => __out = tendermint.abci.ResponseEcho
      case 3 => __out = tendermint.abci.ResponseFlush
      case 4 => __out = tendermint.abci.ResponseInfo
      case 6 => __out = tendermint.abci.ResponseInitChain
      case 7 => __out = tendermint.abci.ResponseQuery
      case 9 => __out = tendermint.abci.ResponseCheckTx
      case 12 => __out = tendermint.abci.ResponseCommit
      case 13 => __out = tendermint.abci.ResponseListSnapshots
      case 14 => __out = tendermint.abci.ResponseOfferSnapshot
      case 15 => __out = tendermint.abci.ResponseLoadSnapshotChunk
      case 16 => __out = tendermint.abci.ResponseApplySnapshotChunk
      case 17 => __out = tendermint.abci.ResponsePrepareProposal
      case 18 => __out = tendermint.abci.ResponseProcessProposal
      case 19 => __out = tendermint.abci.ResponseExtendVote
      case 20 => __out = tendermint.abci.ResponseVerifyVoteExtension
      case 21 => __out = tendermint.abci.ResponseFinalizeBlock
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tendermint.abci.Response(
    value = tendermint.abci.Response.Value.Empty
  )
  sealed trait Value extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isException: _root_.scala.Boolean = false
    def isEcho: _root_.scala.Boolean = false
    def isFlush: _root_.scala.Boolean = false
    def isInfo: _root_.scala.Boolean = false
    def isInitChain: _root_.scala.Boolean = false
    def isQuery: _root_.scala.Boolean = false
    def isCheckTx: _root_.scala.Boolean = false
    def isCommit: _root_.scala.Boolean = false
    def isListSnapshots: _root_.scala.Boolean = false
    def isOfferSnapshot: _root_.scala.Boolean = false
    def isLoadSnapshotChunk: _root_.scala.Boolean = false
    def isApplySnapshotChunk: _root_.scala.Boolean = false
    def isPrepareProposal: _root_.scala.Boolean = false
    def isProcessProposal: _root_.scala.Boolean = false
    def isExtendVote: _root_.scala.Boolean = false
    def isVerifyVoteExtension: _root_.scala.Boolean = false
    def isFinalizeBlock: _root_.scala.Boolean = false
    def exception: _root_.scala.Option[tendermint.abci.ResponseException] = _root_.scala.None
    def echo: _root_.scala.Option[tendermint.abci.ResponseEcho] = _root_.scala.None
    def flush: _root_.scala.Option[tendermint.abci.ResponseFlush] = _root_.scala.None
    def info: _root_.scala.Option[tendermint.abci.ResponseInfo] = _root_.scala.None
    def initChain: _root_.scala.Option[tendermint.abci.ResponseInitChain] = _root_.scala.None
    def query: _root_.scala.Option[tendermint.abci.ResponseQuery] = _root_.scala.None
    def checkTx: _root_.scala.Option[tendermint.abci.ResponseCheckTx] = _root_.scala.None
    def commit: _root_.scala.Option[tendermint.abci.ResponseCommit] = _root_.scala.None
    def listSnapshots: _root_.scala.Option[tendermint.abci.ResponseListSnapshots] = _root_.scala.None
    def offerSnapshot: _root_.scala.Option[tendermint.abci.ResponseOfferSnapshot] = _root_.scala.None
    def loadSnapshotChunk: _root_.scala.Option[tendermint.abci.ResponseLoadSnapshotChunk] = _root_.scala.None
    def applySnapshotChunk: _root_.scala.Option[tendermint.abci.ResponseApplySnapshotChunk] = _root_.scala.None
    def prepareProposal: _root_.scala.Option[tendermint.abci.ResponsePrepareProposal] = _root_.scala.None
    def processProposal: _root_.scala.Option[tendermint.abci.ResponseProcessProposal] = _root_.scala.None
    def extendVote: _root_.scala.Option[tendermint.abci.ResponseExtendVote] = _root_.scala.None
    def verifyVoteExtension: _root_.scala.Option[tendermint.abci.ResponseVerifyVoteExtension] = _root_.scala.None
    def finalizeBlock: _root_.scala.Option[tendermint.abci.ResponseFinalizeBlock] = _root_.scala.None
  }
  object Value {
    @SerialVersionUID(0L)
    case object Empty extends tendermint.abci.Response.Value {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Exception(value: tendermint.abci.ResponseException) extends tendermint.abci.Response.Value {
      type ValueType = tendermint.abci.ResponseException
      override def isException: _root_.scala.Boolean = true
      override def exception: _root_.scala.Option[tendermint.abci.ResponseException] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class Echo(value: tendermint.abci.ResponseEcho) extends tendermint.abci.Response.Value {
      type ValueType = tendermint.abci.ResponseEcho
      override def isEcho: _root_.scala.Boolean = true
      override def echo: _root_.scala.Option[tendermint.abci.ResponseEcho] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class Flush(value: tendermint.abci.ResponseFlush) extends tendermint.abci.Response.Value {
      type ValueType = tendermint.abci.ResponseFlush
      override def isFlush: _root_.scala.Boolean = true
      override def flush: _root_.scala.Option[tendermint.abci.ResponseFlush] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class Info(value: tendermint.abci.ResponseInfo) extends tendermint.abci.Response.Value {
      type ValueType = tendermint.abci.ResponseInfo
      override def isInfo: _root_.scala.Boolean = true
      override def info: _root_.scala.Option[tendermint.abci.ResponseInfo] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class InitChain(value: tendermint.abci.ResponseInitChain) extends tendermint.abci.Response.Value {
      type ValueType = tendermint.abci.ResponseInitChain
      override def isInitChain: _root_.scala.Boolean = true
      override def initChain: _root_.scala.Option[tendermint.abci.ResponseInitChain] = Some(value)
      override def number: _root_.scala.Int = 6
    }
    @SerialVersionUID(0L)
    final case class Query(value: tendermint.abci.ResponseQuery) extends tendermint.abci.Response.Value {
      type ValueType = tendermint.abci.ResponseQuery
      override def isQuery: _root_.scala.Boolean = true
      override def query: _root_.scala.Option[tendermint.abci.ResponseQuery] = Some(value)
      override def number: _root_.scala.Int = 7
    }
    @SerialVersionUID(0L)
    final case class CheckTx(value: tendermint.abci.ResponseCheckTx) extends tendermint.abci.Response.Value {
      type ValueType = tendermint.abci.ResponseCheckTx
      override def isCheckTx: _root_.scala.Boolean = true
      override def checkTx: _root_.scala.Option[tendermint.abci.ResponseCheckTx] = Some(value)
      override def number: _root_.scala.Int = 9
    }
    @SerialVersionUID(0L)
    final case class Commit(value: tendermint.abci.ResponseCommit) extends tendermint.abci.Response.Value {
      type ValueType = tendermint.abci.ResponseCommit
      override def isCommit: _root_.scala.Boolean = true
      override def commit: _root_.scala.Option[tendermint.abci.ResponseCommit] = Some(value)
      override def number: _root_.scala.Int = 12
    }
    @SerialVersionUID(0L)
    final case class ListSnapshots(value: tendermint.abci.ResponseListSnapshots) extends tendermint.abci.Response.Value {
      type ValueType = tendermint.abci.ResponseListSnapshots
      override def isListSnapshots: _root_.scala.Boolean = true
      override def listSnapshots: _root_.scala.Option[tendermint.abci.ResponseListSnapshots] = Some(value)
      override def number: _root_.scala.Int = 13
    }
    @SerialVersionUID(0L)
    final case class OfferSnapshot(value: tendermint.abci.ResponseOfferSnapshot) extends tendermint.abci.Response.Value {
      type ValueType = tendermint.abci.ResponseOfferSnapshot
      override def isOfferSnapshot: _root_.scala.Boolean = true
      override def offerSnapshot: _root_.scala.Option[tendermint.abci.ResponseOfferSnapshot] = Some(value)
      override def number: _root_.scala.Int = 14
    }
    @SerialVersionUID(0L)
    final case class LoadSnapshotChunk(value: tendermint.abci.ResponseLoadSnapshotChunk) extends tendermint.abci.Response.Value {
      type ValueType = tendermint.abci.ResponseLoadSnapshotChunk
      override def isLoadSnapshotChunk: _root_.scala.Boolean = true
      override def loadSnapshotChunk: _root_.scala.Option[tendermint.abci.ResponseLoadSnapshotChunk] = Some(value)
      override def number: _root_.scala.Int = 15
    }
    @SerialVersionUID(0L)
    final case class ApplySnapshotChunk(value: tendermint.abci.ResponseApplySnapshotChunk) extends tendermint.abci.Response.Value {
      type ValueType = tendermint.abci.ResponseApplySnapshotChunk
      override def isApplySnapshotChunk: _root_.scala.Boolean = true
      override def applySnapshotChunk: _root_.scala.Option[tendermint.abci.ResponseApplySnapshotChunk] = Some(value)
      override def number: _root_.scala.Int = 16
    }
    @SerialVersionUID(0L)
    final case class PrepareProposal(value: tendermint.abci.ResponsePrepareProposal) extends tendermint.abci.Response.Value {
      type ValueType = tendermint.abci.ResponsePrepareProposal
      override def isPrepareProposal: _root_.scala.Boolean = true
      override def prepareProposal: _root_.scala.Option[tendermint.abci.ResponsePrepareProposal] = Some(value)
      override def number: _root_.scala.Int = 17
    }
    @SerialVersionUID(0L)
    final case class ProcessProposal(value: tendermint.abci.ResponseProcessProposal) extends tendermint.abci.Response.Value {
      type ValueType = tendermint.abci.ResponseProcessProposal
      override def isProcessProposal: _root_.scala.Boolean = true
      override def processProposal: _root_.scala.Option[tendermint.abci.ResponseProcessProposal] = Some(value)
      override def number: _root_.scala.Int = 18
    }
    @SerialVersionUID(0L)
    final case class ExtendVote(value: tendermint.abci.ResponseExtendVote) extends tendermint.abci.Response.Value {
      type ValueType = tendermint.abci.ResponseExtendVote
      override def isExtendVote: _root_.scala.Boolean = true
      override def extendVote: _root_.scala.Option[tendermint.abci.ResponseExtendVote] = Some(value)
      override def number: _root_.scala.Int = 19
    }
    @SerialVersionUID(0L)
    final case class VerifyVoteExtension(value: tendermint.abci.ResponseVerifyVoteExtension) extends tendermint.abci.Response.Value {
      type ValueType = tendermint.abci.ResponseVerifyVoteExtension
      override def isVerifyVoteExtension: _root_.scala.Boolean = true
      override def verifyVoteExtension: _root_.scala.Option[tendermint.abci.ResponseVerifyVoteExtension] = Some(value)
      override def number: _root_.scala.Int = 20
    }
    @SerialVersionUID(0L)
    final case class FinalizeBlock(value: tendermint.abci.ResponseFinalizeBlock) extends tendermint.abci.Response.Value {
      type ValueType = tendermint.abci.ResponseFinalizeBlock
      override def isFinalizeBlock: _root_.scala.Boolean = true
      override def finalizeBlock: _root_.scala.Option[tendermint.abci.ResponseFinalizeBlock] = Some(value)
      override def number: _root_.scala.Int = 21
    }
  }
  implicit class ResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tendermint.abci.Response]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tendermint.abci.Response](_l) {
    def exception: _root_.scalapb.lenses.Lens[UpperPB, tendermint.abci.ResponseException] = field(_.getException)((c_, f_) => c_.copy(value = tendermint.abci.Response.Value.Exception(f_)))
    def echo: _root_.scalapb.lenses.Lens[UpperPB, tendermint.abci.ResponseEcho] = field(_.getEcho)((c_, f_) => c_.copy(value = tendermint.abci.Response.Value.Echo(f_)))
    def flush: _root_.scalapb.lenses.Lens[UpperPB, tendermint.abci.ResponseFlush] = field(_.getFlush)((c_, f_) => c_.copy(value = tendermint.abci.Response.Value.Flush(f_)))
    def info: _root_.scalapb.lenses.Lens[UpperPB, tendermint.abci.ResponseInfo] = field(_.getInfo)((c_, f_) => c_.copy(value = tendermint.abci.Response.Value.Info(f_)))
    def initChain: _root_.scalapb.lenses.Lens[UpperPB, tendermint.abci.ResponseInitChain] = field(_.getInitChain)((c_, f_) => c_.copy(value = tendermint.abci.Response.Value.InitChain(f_)))
    def query: _root_.scalapb.lenses.Lens[UpperPB, tendermint.abci.ResponseQuery] = field(_.getQuery)((c_, f_) => c_.copy(value = tendermint.abci.Response.Value.Query(f_)))
    def checkTx: _root_.scalapb.lenses.Lens[UpperPB, tendermint.abci.ResponseCheckTx] = field(_.getCheckTx)((c_, f_) => c_.copy(value = tendermint.abci.Response.Value.CheckTx(f_)))
    def commit: _root_.scalapb.lenses.Lens[UpperPB, tendermint.abci.ResponseCommit] = field(_.getCommit)((c_, f_) => c_.copy(value = tendermint.abci.Response.Value.Commit(f_)))
    def listSnapshots: _root_.scalapb.lenses.Lens[UpperPB, tendermint.abci.ResponseListSnapshots] = field(_.getListSnapshots)((c_, f_) => c_.copy(value = tendermint.abci.Response.Value.ListSnapshots(f_)))
    def offerSnapshot: _root_.scalapb.lenses.Lens[UpperPB, tendermint.abci.ResponseOfferSnapshot] = field(_.getOfferSnapshot)((c_, f_) => c_.copy(value = tendermint.abci.Response.Value.OfferSnapshot(f_)))
    def loadSnapshotChunk: _root_.scalapb.lenses.Lens[UpperPB, tendermint.abci.ResponseLoadSnapshotChunk] = field(_.getLoadSnapshotChunk)((c_, f_) => c_.copy(value = tendermint.abci.Response.Value.LoadSnapshotChunk(f_)))
    def applySnapshotChunk: _root_.scalapb.lenses.Lens[UpperPB, tendermint.abci.ResponseApplySnapshotChunk] = field(_.getApplySnapshotChunk)((c_, f_) => c_.copy(value = tendermint.abci.Response.Value.ApplySnapshotChunk(f_)))
    def prepareProposal: _root_.scalapb.lenses.Lens[UpperPB, tendermint.abci.ResponsePrepareProposal] = field(_.getPrepareProposal)((c_, f_) => c_.copy(value = tendermint.abci.Response.Value.PrepareProposal(f_)))
    def processProposal: _root_.scalapb.lenses.Lens[UpperPB, tendermint.abci.ResponseProcessProposal] = field(_.getProcessProposal)((c_, f_) => c_.copy(value = tendermint.abci.Response.Value.ProcessProposal(f_)))
    def extendVote: _root_.scalapb.lenses.Lens[UpperPB, tendermint.abci.ResponseExtendVote] = field(_.getExtendVote)((c_, f_) => c_.copy(value = tendermint.abci.Response.Value.ExtendVote(f_)))
    def verifyVoteExtension: _root_.scalapb.lenses.Lens[UpperPB, tendermint.abci.ResponseVerifyVoteExtension] = field(_.getVerifyVoteExtension)((c_, f_) => c_.copy(value = tendermint.abci.Response.Value.VerifyVoteExtension(f_)))
    def finalizeBlock: _root_.scalapb.lenses.Lens[UpperPB, tendermint.abci.ResponseFinalizeBlock] = field(_.getFinalizeBlock)((c_, f_) => c_.copy(value = tendermint.abci.Response.Value.FinalizeBlock(f_)))
    def value: _root_.scalapb.lenses.Lens[UpperPB, tendermint.abci.Response.Value] = field(_.value)((c_, f_) => c_.copy(value = f_))
  }
  final val EXCEPTION_FIELD_NUMBER = 1
  final val ECHO_FIELD_NUMBER = 2
  final val FLUSH_FIELD_NUMBER = 3
  final val INFO_FIELD_NUMBER = 4
  final val INIT_CHAIN_FIELD_NUMBER = 6
  final val QUERY_FIELD_NUMBER = 7
  final val CHECK_TX_FIELD_NUMBER = 9
  final val COMMIT_FIELD_NUMBER = 12
  final val LIST_SNAPSHOTS_FIELD_NUMBER = 13
  final val OFFER_SNAPSHOT_FIELD_NUMBER = 14
  final val LOAD_SNAPSHOT_CHUNK_FIELD_NUMBER = 15
  final val APPLY_SNAPSHOT_CHUNK_FIELD_NUMBER = 16
  final val PREPARE_PROPOSAL_FIELD_NUMBER = 17
  final val PROCESS_PROPOSAL_FIELD_NUMBER = 18
  final val EXTEND_VOTE_FIELD_NUMBER = 19
  final val VERIFY_VOTE_EXTENSION_FIELD_NUMBER = 20
  final val FINALIZE_BLOCK_FIELD_NUMBER = 21
  def of(
    value: tendermint.abci.Response.Value
  ): _root_.tendermint.abci.Response = _root_.tendermint.abci.Response(
    value
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tendermint.abci.Response])
}
