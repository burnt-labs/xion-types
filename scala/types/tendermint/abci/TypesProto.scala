// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package tendermint.abci

object TypesProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    tendermint.crypto.ProofProto,
    tendermint.crypto.KeysProto,
    tendermint.types.ParamsProto,
    tendermint.types.ValidatorProto,
    com.google.protobuf.timestamp.TimestampProto,
    com.google.protobuf.GogoProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      tendermint.abci.Request,
      tendermint.abci.RequestEcho,
      tendermint.abci.RequestFlush,
      tendermint.abci.RequestInfo,
      tendermint.abci.RequestInitChain,
      tendermint.abci.RequestQuery,
      tendermint.abci.RequestCheckTx,
      tendermint.abci.RequestCommit,
      tendermint.abci.RequestListSnapshots,
      tendermint.abci.RequestOfferSnapshot,
      tendermint.abci.RequestLoadSnapshotChunk,
      tendermint.abci.RequestApplySnapshotChunk,
      tendermint.abci.RequestPrepareProposal,
      tendermint.abci.RequestProcessProposal,
      tendermint.abci.RequestExtendVote,
      tendermint.abci.RequestVerifyVoteExtension,
      tendermint.abci.RequestFinalizeBlock,
      tendermint.abci.Response,
      tendermint.abci.ResponseException,
      tendermint.abci.ResponseEcho,
      tendermint.abci.ResponseFlush,
      tendermint.abci.ResponseInfo,
      tendermint.abci.ResponseInitChain,
      tendermint.abci.ResponseQuery,
      tendermint.abci.ResponseCheckTx,
      tendermint.abci.ResponseCommit,
      tendermint.abci.ResponseListSnapshots,
      tendermint.abci.ResponseOfferSnapshot,
      tendermint.abci.ResponseLoadSnapshotChunk,
      tendermint.abci.ResponseApplySnapshotChunk,
      tendermint.abci.ResponsePrepareProposal,
      tendermint.abci.ResponseProcessProposal,
      tendermint.abci.ResponseExtendVote,
      tendermint.abci.ResponseVerifyVoteExtension,
      tendermint.abci.ResponseFinalizeBlock,
      tendermint.abci.CommitInfo,
      tendermint.abci.ExtendedCommitInfo,
      tendermint.abci.Event,
      tendermint.abci.EventAttribute,
      tendermint.abci.ExecTxResult,
      tendermint.abci.TxResult,
      tendermint.abci.Validator,
      tendermint.abci.ValidatorUpdate,
      tendermint.abci.VoteInfo,
      tendermint.abci.ExtendedVoteInfo,
      tendermint.abci.Misbehavior,
      tendermint.abci.Snapshot
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """Cht0ZW5kZXJtaW50L2FiY2kvdHlwZXMucHJvdG8SD3RlbmRlcm1pbnQuYWJjaRoddGVuZGVybWludC9jcnlwdG8vcHJvb2Yuc
  HJvdG8aHHRlbmRlcm1pbnQvY3J5cHRvL2tleXMucHJvdG8aHXRlbmRlcm1pbnQvdHlwZXMvcGFyYW1zLnByb3RvGiB0ZW5kZXJta
  W50L3R5cGVzL3ZhbGlkYXRvci5wcm90bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90bxoUZ29nb3Byb3RvL2dvZ28uc
  HJvdG8i3AsKB1JlcXVlc3QSPQoEZWNobxgBIAEoCzIcLnRlbmRlcm1pbnQuYWJjaS5SZXF1ZXN0RWNob0IJ4j8GEgRlY2hvSABSB
  GVjaG8SQQoFZmx1c2gYAiABKAsyHS50ZW5kZXJtaW50LmFiY2kuUmVxdWVzdEZsdXNoQgriPwcSBWZsdXNoSABSBWZsdXNoEj0KB
  GluZm8YAyABKAsyHC50ZW5kZXJtaW50LmFiY2kuUmVxdWVzdEluZm9CCeI/BhIEaW5mb0gAUgRpbmZvElIKCmluaXRfY2hhaW4YB
  SABKAsyIS50ZW5kZXJtaW50LmFiY2kuUmVxdWVzdEluaXRDaGFpbkIO4j8LEglpbml0Q2hhaW5IAFIJaW5pdENoYWluEkEKBXF1Z
  XJ5GAYgASgLMh0udGVuZGVybWludC5hYmNpLlJlcXVlc3RRdWVyeUIK4j8HEgVxdWVyeUgAUgVxdWVyeRJKCghjaGVja190eBgII
  AEoCzIfLnRlbmRlcm1pbnQuYWJjaS5SZXF1ZXN0Q2hlY2tUeEIM4j8JEgdjaGVja1R4SABSB2NoZWNrVHgSRQoGY29tbWl0GAsgA
  SgLMh4udGVuZGVybWludC5hYmNpLlJlcXVlc3RDb21taXRCC+I/CBIGY29tbWl0SABSBmNvbW1pdBJiCg5saXN0X3NuYXBzaG90c
  xgMIAEoCzIlLnRlbmRlcm1pbnQuYWJjaS5SZXF1ZXN0TGlzdFNuYXBzaG90c0IS4j8PEg1saXN0U25hcHNob3RzSABSDWxpc3RTb
  mFwc2hvdHMSYgoOb2ZmZXJfc25hcHNob3QYDSABKAsyJS50ZW5kZXJtaW50LmFiY2kuUmVxdWVzdE9mZmVyU25hcHNob3RCEuI/D
  xINb2ZmZXJTbmFwc2hvdEgAUg1vZmZlclNuYXBzaG90EnMKE2xvYWRfc25hcHNob3RfY2h1bmsYDiABKAsyKS50ZW5kZXJtaW50L
  mFiY2kuUmVxdWVzdExvYWRTbmFwc2hvdENodW5rQhbiPxMSEWxvYWRTbmFwc2hvdENodW5rSABSEWxvYWRTbmFwc2hvdENodW5rE
  ncKFGFwcGx5X3NuYXBzaG90X2NodW5rGA8gASgLMioudGVuZGVybWludC5hYmNpLlJlcXVlc3RBcHBseVNuYXBzaG90Q2h1bmtCF
  +I/FBISYXBwbHlTbmFwc2hvdENodW5rSABSEmFwcGx5U25hcHNob3RDaHVuaxJqChBwcmVwYXJlX3Byb3Bvc2FsGBAgASgLMicud
  GVuZGVybWludC5hYmNpLlJlcXVlc3RQcmVwYXJlUHJvcG9zYWxCFOI/ERIPcHJlcGFyZVByb3Bvc2FsSABSD3ByZXBhcmVQcm9wb
  3NhbBJqChBwcm9jZXNzX3Byb3Bvc2FsGBEgASgLMicudGVuZGVybWludC5hYmNpLlJlcXVlc3RQcm9jZXNzUHJvcG9zYWxCFOI/E
  RIPcHJvY2Vzc1Byb3Bvc2FsSABSD3Byb2Nlc3NQcm9wb3NhbBJWCgtleHRlbmRfdm90ZRgSIAEoCzIiLnRlbmRlcm1pbnQuYWJja
  S5SZXF1ZXN0RXh0ZW5kVm90ZUIP4j8MEgpleHRlbmRWb3RlSABSCmV4dGVuZFZvdGUSewoVdmVyaWZ5X3ZvdGVfZXh0ZW5zaW9uG
  BMgASgLMisudGVuZGVybWludC5hYmNpLlJlcXVlc3RWZXJpZnlWb3RlRXh0ZW5zaW9uQhjiPxUSE3ZlcmlmeVZvdGVFeHRlbnNpb
  25IAFITdmVyaWZ5Vm90ZUV4dGVuc2lvbhJiCg5maW5hbGl6ZV9ibG9jaxgUIAEoCzIlLnRlbmRlcm1pbnQuYWJjaS5SZXF1ZXN0R
  mluYWxpemVCbG9ja0IS4j8PEg1maW5hbGl6ZUJsb2NrSABSDWZpbmFsaXplQmxvY2tCBwoFdmFsdWVKBAgEEAVKBAgHEAhKBAgJE
  ApKBAgKEAsiNQoLUmVxdWVzdEVjaG8SJgoHbWVzc2FnZRgBIAEoCUIM4j8JEgdtZXNzYWdlUgdtZXNzYWdlIg4KDFJlcXVlc3RGb
  HVzaCLUAQoLUmVxdWVzdEluZm8SJgoHdmVyc2lvbhgBIAEoCUIM4j8JEgd2ZXJzaW9uUgd2ZXJzaW9uEjYKDWJsb2NrX3ZlcnNpb
  24YAiABKARCEeI/DhIMYmxvY2tWZXJzaW9uUgxibG9ja1ZlcnNpb24SMAoLcDJwX3ZlcnNpb24YAyABKARCD+I/DBIKcDJQVmVyc
  2lvblIKcDJwVmVyc2lvbhIzCgxhYmNpX3ZlcnNpb24YBCABKAlCEOI/DRILYWJjaVZlcnNpb25SC2FiY2lWZXJzaW9uIrADChBSZ
  XF1ZXN0SW5pdENoYWluEkEKBHRpbWUYASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQhHiPwYSBHRpbWXI3h8AkN8fA
  VIEdGltZRInCghjaGFpbl9pZBgCIAEoCUIM4j8JEgdjaGFpbklkUgdjaGFpbklkEmIKEGNvbnNlbnN1c19wYXJhbXMYAyABKAsyI
  S50ZW5kZXJtaW50LnR5cGVzLkNvbnNlbnN1c1BhcmFtc0IU4j8REg9jb25zZW5zdXNQYXJhbXNSD2NvbnNlbnN1c1BhcmFtcxJVC
  gp2YWxpZGF0b3JzGAQgAygLMiAudGVuZGVybWludC5hYmNpLlZhbGlkYXRvclVwZGF0ZUIT4j8MEgp2YWxpZGF0b3JzyN4fAFIKd
  mFsaWRhdG9ycxI6Cg9hcHBfc3RhdGVfYnl0ZXMYBSABKAxCEuI/DxINYXBwU3RhdGVCeXRlc1INYXBwU3RhdGVCeXRlcxI5Cg5pb
  ml0aWFsX2hlaWdodBgGIAEoA0IS4j8PEg1pbml0aWFsSGVpZ2h0Ug1pbml0aWFsSGVpZ2h0IpMBCgxSZXF1ZXN0UXVlcnkSHQoEZ
  GF0YRgBIAEoDEIJ4j8GEgRkYXRhUgRkYXRhEh0KBHBhdGgYAiABKAlCCeI/BhIEcGF0aFIEcGF0aBIjCgZoZWlnaHQYAyABKANCC
  +I/CBIGaGVpZ2h0UgZoZWlnaHQSIAoFcHJvdmUYBCABKAhCCuI/BxIFcHJvdmVSBXByb3ZlImYKDlJlcXVlc3RDaGVja1R4EhcKA
  nR4GAEgASgMQgfiPwQSAnR4UgJ0eBI7CgR0eXBlGAIgASgOMhwudGVuZGVybWludC5hYmNpLkNoZWNrVHhUeXBlQgniPwYSBHR5c
  GVSBHR5cGUiDwoNUmVxdWVzdENvbW1pdCIWChRSZXF1ZXN0TGlzdFNuYXBzaG90cyKFAQoUUmVxdWVzdE9mZmVyU25hcHNob3QSR
  AoIc25hcHNob3QYASABKAsyGS50ZW5kZXJtaW50LmFiY2kuU25hcHNob3RCDeI/ChIIc25hcHNob3RSCHNuYXBzaG90EicKCGFwc
  F9oYXNoGAIgASgMQgziPwkSB2FwcEhhc2hSB2FwcEhhc2gihgEKGFJlcXVlc3RMb2FkU25hcHNob3RDaHVuaxIjCgZoZWlnaHQYA
  SABKARCC+I/CBIGaGVpZ2h0UgZoZWlnaHQSIwoGZm9ybWF0GAIgASgNQgviPwgSBmZvcm1hdFIGZm9ybWF0EiAKBWNodW5rGAMgA
  SgNQgriPwcSBWNodW5rUgVjaHVuayKEAQoZUmVxdWVzdEFwcGx5U25hcHNob3RDaHVuaxIgCgVpbmRleBgBIAEoDUIK4j8HEgVpb
  mRleFIFaW5kZXgSIAoFY2h1bmsYAiABKAxCCuI/BxIFY2h1bmtSBWNodW5rEiMKBnNlbmRlchgDIAEoCUIL4j8IEgZzZW5kZXJSB
  nNlbmRlciKcBAoWUmVxdWVzdFByZXBhcmVQcm9wb3NhbBIxCgxtYXhfdHhfYnl0ZXMYASABKANCD+I/DBIKbWF4VHhCeXRlc1IKb
  WF4VHhCeXRlcxIaCgN0eHMYAiADKAxCCOI/BRIDdHhzUgN0eHMSaQoRbG9jYWxfbGFzdF9jb21taXQYAyABKAsyIy50ZW5kZXJta
  W50LmFiY2kuRXh0ZW5kZWRDb21taXRJbmZvQhjiPxESD2xvY2FsTGFzdENvbW1pdMjeHwBSD2xvY2FsTGFzdENvbW1pdBJUCgtta
  XNiZWhhdmlvchgEIAMoCzIcLnRlbmRlcm1pbnQuYWJjaS5NaXNiZWhhdmlvckIU4j8NEgttaXNiZWhhdmlvcsjeHwBSC21pc2Jla
  GF2aW9yEiMKBmhlaWdodBgFIAEoA0IL4j8IEgZoZWlnaHRSBmhlaWdodBJBCgR0aW1lGAYgASgLMhouZ29vZ2xlLnByb3RvYnVmL
  lRpbWVzdGFtcEIR4j8GEgR0aW1lyN4fAJDfHwFSBHRpbWUSSQoUbmV4dF92YWxpZGF0b3JzX2hhc2gYByABKAxCF+I/FBISbmV4d
  FZhbGlkYXRvcnNIYXNoUhJuZXh0VmFsaWRhdG9yc0hhc2gSPwoQcHJvcG9zZXJfYWRkcmVzcxgIIAEoDEIU4j8REg9wcm9wb3Nlc
  kFkZHJlc3NSD3Byb3Bvc2VyQWRkcmVzcyKJBAoWUmVxdWVzdFByb2Nlc3NQcm9wb3NhbBIaCgN0eHMYASADKAxCCOI/BRIDdHhzU
  gN0eHMSagoUcHJvcG9zZWRfbGFzdF9jb21taXQYAiABKAsyGy50ZW5kZXJtaW50LmFiY2kuQ29tbWl0SW5mb0Ib4j8UEhJwcm9wb
  3NlZExhc3RDb21taXTI3h8AUhJwcm9wb3NlZExhc3RDb21taXQSVAoLbWlzYmVoYXZpb3IYAyADKAsyHC50ZW5kZXJtaW50LmFiY
  2kuTWlzYmVoYXZpb3JCFOI/DRILbWlzYmVoYXZpb3LI3h8AUgttaXNiZWhhdmlvchIdCgRoYXNoGAQgASgMQgniPwYSBGhhc2hSB
  Ghhc2gSIwoGaGVpZ2h0GAUgASgDQgviPwgSBmhlaWdodFIGaGVpZ2h0EkEKBHRpbWUYBiABKAsyGi5nb29nbGUucHJvdG9idWYuV
  GltZXN0YW1wQhHiPwYSBHRpbWXI3h8AkN8fAVIEdGltZRJJChRuZXh0X3ZhbGlkYXRvcnNfaGFzaBgHIAEoDEIX4j8UEhJuZXh0V
  mFsaWRhdG9yc0hhc2hSEm5leHRWYWxpZGF0b3JzSGFzaBI/ChBwcm9wb3Nlcl9hZGRyZXNzGAggASgMQhTiPxESD3Byb3Bvc2VyQ
  WRkcmVzc1IPcHJvcG9zZXJBZGRyZXNzIoQEChFSZXF1ZXN0RXh0ZW5kVm90ZRIdCgRoYXNoGAEgASgMQgniPwYSBGhhc2hSBGhhc
  2gSIwoGaGVpZ2h0GAIgASgDQgviPwgSBmhlaWdodFIGaGVpZ2h0EkEKBHRpbWUYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZ
  XN0YW1wQhHiPwYSBHRpbWXI3h8AkN8fAVIEdGltZRIaCgN0eHMYBCADKAxCCOI/BRIDdHhzUgN0eHMSagoUcHJvcG9zZWRfbGFzd
  F9jb21taXQYBSABKAsyGy50ZW5kZXJtaW50LmFiY2kuQ29tbWl0SW5mb0Ib4j8UEhJwcm9wb3NlZExhc3RDb21taXTI3h8AUhJwc
  m9wb3NlZExhc3RDb21taXQSVAoLbWlzYmVoYXZpb3IYBiADKAsyHC50ZW5kZXJtaW50LmFiY2kuTWlzYmVoYXZpb3JCFOI/DRILb
  WlzYmVoYXZpb3LI3h8AUgttaXNiZWhhdmlvchJJChRuZXh0X3ZhbGlkYXRvcnNfaGFzaBgHIAEoDEIX4j8UEhJuZXh0VmFsaWRhd
  G9yc0hhc2hSEm5leHRWYWxpZGF0b3JzSGFzaBI/ChBwcm9wb3Nlcl9hZGRyZXNzGAggASgMQhTiPxESD3Byb3Bvc2VyQWRkcmVzc
  1IPcHJvcG9zZXJBZGRyZXNzIt8BChpSZXF1ZXN0VmVyaWZ5Vm90ZUV4dGVuc2lvbhIdCgRoYXNoGAEgASgMQgniPwYSBGhhc2hSB
  Ghhc2gSQgoRdmFsaWRhdG9yX2FkZHJlc3MYAiABKAxCFeI/EhIQdmFsaWRhdG9yQWRkcmVzc1IQdmFsaWRhdG9yQWRkcmVzcxIjC
  gZoZWlnaHQYAyABKANCC+I/CBIGaGVpZ2h0UgZoZWlnaHQSOQoOdm90ZV9leHRlbnNpb24YBCABKAxCEuI/DxINdm90ZUV4dGVuc
  2lvblINdm90ZUV4dGVuc2lvbiKEBAoUUmVxdWVzdEZpbmFsaXplQmxvY2sSGgoDdHhzGAEgAygMQgjiPwUSA3R4c1IDdHhzEmcKE
  2RlY2lkZWRfbGFzdF9jb21taXQYAiABKAsyGy50ZW5kZXJtaW50LmFiY2kuQ29tbWl0SW5mb0Ia4j8TEhFkZWNpZGVkTGFzdENvb
  W1pdMjeHwBSEWRlY2lkZWRMYXN0Q29tbWl0ElQKC21pc2JlaGF2aW9yGAMgAygLMhwudGVuZGVybWludC5hYmNpLk1pc2JlaGF2a
  W9yQhTiPw0SC21pc2JlaGF2aW9yyN4fAFILbWlzYmVoYXZpb3ISHQoEaGFzaBgEIAEoDEIJ4j8GEgRoYXNoUgRoYXNoEiMKBmhla
  WdodBgFIAEoA0IL4j8IEgZoZWlnaHRSBmhlaWdodBJBCgR0aW1lGAYgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEIR4
  j8GEgR0aW1lyN4fAJDfHwFSBHRpbWUSSQoUbmV4dF92YWxpZGF0b3JzX2hhc2gYByABKAxCF+I/FBISbmV4dFZhbGlkYXRvcnNIY
  XNoUhJuZXh0VmFsaWRhdG9yc0hhc2gSPwoQcHJvcG9zZXJfYWRkcmVzcxgIIAEoDEIU4j8REg9wcm9wb3NlckFkZHJlc3NSD3Byb
  3Bvc2VyQWRkcmVzcyLBDAoIUmVzcG9uc2USUgoJZXhjZXB0aW9uGAEgASgLMiIudGVuZGVybWludC5hYmNpLlJlc3BvbnNlRXhjZ
  XB0aW9uQg7iPwsSCWV4Y2VwdGlvbkgAUglleGNlcHRpb24SPgoEZWNobxgCIAEoCzIdLnRlbmRlcm1pbnQuYWJjaS5SZXNwb25zZ
  UVjaG9CCeI/BhIEZWNob0gAUgRlY2hvEkIKBWZsdXNoGAMgASgLMh4udGVuZGVybWludC5hYmNpLlJlc3BvbnNlRmx1c2hCCuI/B
  xIFZmx1c2hIAFIFZmx1c2gSPgoEaW5mbxgEIAEoCzIdLnRlbmRlcm1pbnQuYWJjaS5SZXNwb25zZUluZm9CCeI/BhIEaW5mb0gAU
  gRpbmZvElMKCmluaXRfY2hhaW4YBiABKAsyIi50ZW5kZXJtaW50LmFiY2kuUmVzcG9uc2VJbml0Q2hhaW5CDuI/CxIJaW5pdENoY
  WluSABSCWluaXRDaGFpbhJCCgVxdWVyeRgHIAEoCzIeLnRlbmRlcm1pbnQuYWJjaS5SZXNwb25zZVF1ZXJ5QgriPwcSBXF1ZXJ5S
  ABSBXF1ZXJ5EksKCGNoZWNrX3R4GAkgASgLMiAudGVuZGVybWludC5hYmNpLlJlc3BvbnNlQ2hlY2tUeEIM4j8JEgdjaGVja1R4S
  ABSB2NoZWNrVHgSRgoGY29tbWl0GAwgASgLMh8udGVuZGVybWludC5hYmNpLlJlc3BvbnNlQ29tbWl0QgviPwgSBmNvbW1pdEgAU
  gZjb21taXQSYwoObGlzdF9zbmFwc2hvdHMYDSABKAsyJi50ZW5kZXJtaW50LmFiY2kuUmVzcG9uc2VMaXN0U25hcHNob3RzQhLiP
  w8SDWxpc3RTbmFwc2hvdHNIAFINbGlzdFNuYXBzaG90cxJjCg5vZmZlcl9zbmFwc2hvdBgOIAEoCzImLnRlbmRlcm1pbnQuYWJja
  S5SZXNwb25zZU9mZmVyU25hcHNob3RCEuI/DxINb2ZmZXJTbmFwc2hvdEgAUg1vZmZlclNuYXBzaG90EnQKE2xvYWRfc25hcHNob
  3RfY2h1bmsYDyABKAsyKi50ZW5kZXJtaW50LmFiY2kuUmVzcG9uc2VMb2FkU25hcHNob3RDaHVua0IW4j8TEhFsb2FkU25hcHNob
  3RDaHVua0gAUhFsb2FkU25hcHNob3RDaHVuaxJ4ChRhcHBseV9zbmFwc2hvdF9jaHVuaxgQIAEoCzIrLnRlbmRlcm1pbnQuYWJja
  S5SZXNwb25zZUFwcGx5U25hcHNob3RDaHVua0IX4j8UEhJhcHBseVNuYXBzaG90Q2h1bmtIAFISYXBwbHlTbmFwc2hvdENodW5rE
  msKEHByZXBhcmVfcHJvcG9zYWwYESABKAsyKC50ZW5kZXJtaW50LmFiY2kuUmVzcG9uc2VQcmVwYXJlUHJvcG9zYWxCFOI/ERIPc
  HJlcGFyZVByb3Bvc2FsSABSD3ByZXBhcmVQcm9wb3NhbBJrChBwcm9jZXNzX3Byb3Bvc2FsGBIgASgLMigudGVuZGVybWludC5hY
  mNpLlJlc3BvbnNlUHJvY2Vzc1Byb3Bvc2FsQhTiPxESD3Byb2Nlc3NQcm9wb3NhbEgAUg9wcm9jZXNzUHJvcG9zYWwSVwoLZXh0Z
  W5kX3ZvdGUYEyABKAsyIy50ZW5kZXJtaW50LmFiY2kuUmVzcG9uc2VFeHRlbmRWb3RlQg/iPwwSCmV4dGVuZFZvdGVIAFIKZXh0Z
  W5kVm90ZRJ8ChV2ZXJpZnlfdm90ZV9leHRlbnNpb24YFCABKAsyLC50ZW5kZXJtaW50LmFiY2kuUmVzcG9uc2VWZXJpZnlWb3RlR
  Xh0ZW5zaW9uQhjiPxUSE3ZlcmlmeVZvdGVFeHRlbnNpb25IAFITdmVyaWZ5Vm90ZUV4dGVuc2lvbhJjCg5maW5hbGl6ZV9ibG9ja
  xgVIAEoCzImLnRlbmRlcm1pbnQuYWJjaS5SZXNwb25zZUZpbmFsaXplQmxvY2tCEuI/DxINZmluYWxpemVCbG9ja0gAUg1maW5hb
  Gl6ZUJsb2NrQgcKBXZhbHVlSgQIBRAGSgQICBAJSgQIChALSgQICxAMIjUKEVJlc3BvbnNlRXhjZXB0aW9uEiAKBWVycm9yGAEgA
  SgJQgriPwcSBWVycm9yUgVlcnJvciI2CgxSZXNwb25zZUVjaG8SJgoHbWVzc2FnZRgBIAEoCUIM4j8JEgdtZXNzYWdlUgdtZXNzY
  WdlIg8KDVJlc3BvbnNlRmx1c2gijwIKDFJlc3BvbnNlSW5mbxIdCgRkYXRhGAEgASgJQgniPwYSBGRhdGFSBGRhdGESJgoHdmVyc
  2lvbhgCIAEoCUIM4j8JEgd2ZXJzaW9uUgd2ZXJzaW9uEjAKC2FwcF92ZXJzaW9uGAMgASgEQg/iPwwSCmFwcFZlcnNpb25SCmFwc
  FZlcnNpb24SQAoRbGFzdF9ibG9ja19oZWlnaHQYBCABKANCFOI/ERIPbGFzdEJsb2NrSGVpZ2h0Ug9sYXN0QmxvY2tIZWlnaHQSR
  AoTbGFzdF9ibG9ja19hcHBfaGFzaBgFIAEoDEIV4j8SEhBsYXN0QmxvY2tBcHBIYXNoUhBsYXN0QmxvY2tBcHBIYXNoIvcBChFSZ
  XNwb25zZUluaXRDaGFpbhJiChBjb25zZW5zdXNfcGFyYW1zGAEgASgLMiEudGVuZGVybWludC50eXBlcy5Db25zZW5zdXNQYXJhb
  XNCFOI/ERIPY29uc2Vuc3VzUGFyYW1zUg9jb25zZW5zdXNQYXJhbXMSVQoKdmFsaWRhdG9ycxgCIAMoCzIgLnRlbmRlcm1pbnQuY
  WJjaS5WYWxpZGF0b3JVcGRhdGVCE+I/DBIKdmFsaWRhdG9yc8jeHwBSCnZhbGlkYXRvcnMSJwoIYXBwX2hhc2gYAyABKAxCDOI/C
  RIHYXBwSGFzaFIHYXBwSGFzaCLlAgoNUmVzcG9uc2VRdWVyeRIdCgRjb2RlGAEgASgNQgniPwYSBGNvZGVSBGNvZGUSGgoDbG9nG
  AMgASgJQgjiPwUSA2xvZ1IDbG9nEh0KBGluZm8YBCABKAlCCeI/BhIEaW5mb1IEaW5mbxIgCgVpbmRleBgFIAEoA0IK4j8HEgVpb
  mRleFIFaW5kZXgSGgoDa2V5GAYgASgMQgjiPwUSA2tleVIDa2V5EiAKBXZhbHVlGAcgASgMQgriPwcSBXZhbHVlUgV2YWx1ZRJHC
  glwcm9vZl9vcHMYCCABKAsyGy50ZW5kZXJtaW50LmNyeXB0by5Qcm9vZk9wc0IN4j8KEghwcm9vZk9wc1IIcHJvb2ZPcHMSIwoGa
  GVpZ2h0GAkgASgDQgviPwgSBmhlaWdodFIGaGVpZ2h0EiwKCWNvZGVzcGFjZRgKIAEoCUIO4j8LEgljb2Rlc3BhY2VSCWNvZGVzc
  GFjZSKOAwoPUmVzcG9uc2VDaGVja1R4Eh0KBGNvZGUYASABKA1CCeI/BhIEY29kZVIEY29kZRIdCgRkYXRhGAIgASgMQgniPwYSB
  GRhdGFSBGRhdGESGgoDbG9nGAMgASgJQgjiPwUSA2xvZ1IDbG9nEh0KBGluZm8YBCABKAlCCeI/BhIEaW5mb1IEaW5mbxIuCgpnY
  XNfd2FudGVkGAUgASgDQg7iPwsSCWdhc1dhbnRlZFIKZ2FzX3dhbnRlZBIoCghnYXNfdXNlZBgGIAEoA0IM4j8JEgdnYXNVc2VkU
  ghnYXNfdXNlZBJTCgZldmVudHMYByADKAsyFi50ZW5kZXJtaW50LmFiY2kuRXZlbnRCI+I/CBIGZXZlbnRzyN4fAOreHxBldmVud
  HMsb21pdGVtcHR5UgZldmVudHMSLAoJY29kZXNwYWNlGAggASgJQg7iPwsSCWNvZGVzcGFjZVIJY29kZXNwYWNlSgQICRAMUgZzZ
  W5kZXJSCHByaW9yaXR5Ug1tZW1wb29sX2Vycm9yIlQKDlJlc3BvbnNlQ29tbWl0EjYKDXJldGFpbl9oZWlnaHQYAyABKANCEeI/D
  hIMcmV0YWluSGVpZ2h0UgxyZXRhaW5IZWlnaHRKBAgBEAJKBAgCEAMiYAoVUmVzcG9uc2VMaXN0U25hcHNob3RzEkcKCXNuYXBza
  G90cxgBIAMoCzIZLnRlbmRlcm1pbnQuYWJjaS5TbmFwc2hvdEIO4j8LEglzbmFwc2hvdHNSCXNuYXBzaG90cyKoAgoVUmVzcG9uc
  2VPZmZlclNuYXBzaG90ElIKBnJlc3VsdBgBIAEoDjItLnRlbmRlcm1pbnQuYWJjaS5SZXNwb25zZU9mZmVyU25hcHNob3QuUmVzd
  Wx0QgviPwgSBnJlc3VsdFIGcmVzdWx0IroBCgZSZXN1bHQSGQoHVU5LTk9XThAAGgziPwkSB1VOS05PV04SFwoGQUNDRVBUEAEaC
  +I/CBIGQUNDRVBUEhUKBUFCT1JUEAIaCuI/BxIFQUJPUlQSFwoGUkVKRUNUEAMaC+I/CBIGUkVKRUNUEiUKDVJFSkVDVF9GT1JNQ
  VQQBBoS4j8PEg1SRUpFQ1RfRk9STUFUEiUKDVJFSkVDVF9TRU5ERVIQBRoS4j8PEg1SRUpFQ1RfU0VOREVSIj0KGVJlc3BvbnNlT
  G9hZFNuYXBzaG90Q2h1bmsSIAoFY2h1bmsYASABKAxCCuI/BxIFY2h1bmtSBWNodW5rIqwDChpSZXNwb25zZUFwcGx5U25hcHNob
  3RDaHVuaxJXCgZyZXN1bHQYASABKA4yMi50ZW5kZXJtaW50LmFiY2kuUmVzcG9uc2VBcHBseVNuYXBzaG90Q2h1bmsuUmVzdWx0Q
  gviPwgSBnJlc3VsdFIGcmVzdWx0EjkKDnJlZmV0Y2hfY2h1bmtzGAIgAygNQhLiPw8SDXJlZmV0Y2hDaHVua3NSDXJlZmV0Y2hDa
  HVua3MSOQoOcmVqZWN0X3NlbmRlcnMYAyADKAlCEuI/DxINcmVqZWN0U2VuZGVyc1INcmVqZWN0U2VuZGVycyK+AQoGUmVzdWx0E
  hkKB1VOS05PV04QABoM4j8JEgdVTktOT1dOEhcKBkFDQ0VQVBABGgviPwgSBkFDQ0VQVBIVCgVBQk9SVBACGgriPwcSBUFCT1JUE
  hUKBVJFVFJZEAMaCuI/BxIFUkVUUlkSJwoOUkVUUllfU05BUFNIT1QQBBoT4j8QEg5SRVRSWV9TTkFQU0hPVBIpCg9SRUpFQ1RfU
  05BUFNIT1QQBRoU4j8REg9SRUpFQ1RfU05BUFNIT1QiNQoXUmVzcG9uc2VQcmVwYXJlUHJvcG9zYWwSGgoDdHhzGAEgAygMQgjiP
  wUSA3R4c1IDdHhzItYBChdSZXNwb25zZVByb2Nlc3NQcm9wb3NhbBJcCgZzdGF0dXMYASABKA4yNy50ZW5kZXJtaW50LmFiY2kuU
  mVzcG9uc2VQcm9jZXNzUHJvcG9zYWwuUHJvcG9zYWxTdGF0dXNCC+I/CBIGc3RhdHVzUgZzdGF0dXMiXQoOUHJvcG9zYWxTdGF0d
  XMSGQoHVU5LTk9XThAAGgziPwkSB1VOS05PV04SFwoGQUNDRVBUEAEaC+I/CBIGQUNDRVBUEhcKBlJFSkVDVBACGgviPwgSBlJFS
  kVDVCJPChJSZXNwb25zZUV4dGVuZFZvdGUSOQoOdm90ZV9leHRlbnNpb24YASABKAxCEuI/DxINdm90ZUV4dGVuc2lvblINdm90Z
  UV4dGVuc2lvbiLaAQobUmVzcG9uc2VWZXJpZnlWb3RlRXh0ZW5zaW9uEl4KBnN0YXR1cxgBIAEoDjI5LnRlbmRlcm1pbnQuYWJja
  S5SZXNwb25zZVZlcmlmeVZvdGVFeHRlbnNpb24uVmVyaWZ5U3RhdHVzQgviPwgSBnN0YXR1c1IGc3RhdHVzIlsKDFZlcmlmeVN0Y
  XR1cxIZCgdVTktOT1dOEAAaDOI/CRIHVU5LTk9XThIXCgZBQ0NFUFQQARoL4j8IEgZBQ0NFUFQSFwoGUkVKRUNUEAIaC+I/CBIGU
  kVKRUNUIsQDChVSZXNwb25zZUZpbmFsaXplQmxvY2sSUwoGZXZlbnRzGAEgAygLMhYudGVuZGVybWludC5hYmNpLkV2ZW50QiPiP
  wgSBmV2ZW50c8jeHwDq3h8QZXZlbnRzLG9taXRlbXB0eVIGZXZlbnRzEkwKCnR4X3Jlc3VsdHMYAiADKAsyHS50ZW5kZXJtaW50L
  mFiY2kuRXhlY1R4UmVzdWx0Qg7iPwsSCXR4UmVzdWx0c1IJdHhSZXN1bHRzEmgKEXZhbGlkYXRvcl91cGRhdGVzGAMgAygLMiAud
  GVuZGVybWludC5hYmNpLlZhbGlkYXRvclVwZGF0ZUIZ4j8SEhB2YWxpZGF0b3JVcGRhdGVzyN4fAFIQdmFsaWRhdG9yVXBkYXRlc
  xJ1Chdjb25zZW5zdXNfcGFyYW1fdXBkYXRlcxgEIAEoCzIhLnRlbmRlcm1pbnQudHlwZXMuQ29uc2Vuc3VzUGFyYW1zQhriPxcSF
  WNvbnNlbnN1c1BhcmFtVXBkYXRlc1IVY29uc2Vuc3VzUGFyYW1VcGRhdGVzEicKCGFwcF9oYXNoGAUgASgMQgziPwkSB2FwcEhhc
  2hSB2FwcEhhc2gibwoKQ29tbWl0SW5mbxIgCgVyb3VuZBgBIAEoBUIK4j8HEgVyb3VuZFIFcm91bmQSPwoFdm90ZXMYAiADKAsyG
  S50ZW5kZXJtaW50LmFiY2kuVm90ZUluZm9CDuI/BxIFdm90ZXPI3h8AUgV2b3RlcyJ/ChJFeHRlbmRlZENvbW1pdEluZm8SIAoFc
  m91bmQYASABKAVCCuI/BxIFcm91bmRSBXJvdW5kEkcKBXZvdGVzGAIgAygLMiEudGVuZGVybWludC5hYmNpLkV4dGVuZGVkVm90Z
  UluZm9CDuI/BxIFdm90ZXPI3h8AUgV2b3RlcyKUAQoFRXZlbnQSHQoEdHlwZRgBIAEoCUIJ4j8GEgR0eXBlUgR0eXBlEmwKCmF0d
  HJpYnV0ZXMYAiADKAsyHy50ZW5kZXJtaW50LmFiY2kuRXZlbnRBdHRyaWJ1dGVCK+I/DBIKYXR0cmlidXRlc8jeHwDq3h8UYXR0c
  mlidXRlcyxvbWl0ZW1wdHlSCmF0dHJpYnV0ZXMicAoORXZlbnRBdHRyaWJ1dGUSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5E
  iAKBXZhbHVlGAIgASgJQgriPwcSBXZhbHVlUgV2YWx1ZRIgCgVpbmRleBgDIAEoCEIK4j8HEgVpbmRleFIFaW5kZXgi5AIKDEV4Z
  WNUeFJlc3VsdBIdCgRjb2RlGAEgASgNQgniPwYSBGNvZGVSBGNvZGUSHQoEZGF0YRgCIAEoDEIJ4j8GEgRkYXRhUgRkYXRhEhoKA
  2xvZxgDIAEoCUII4j8FEgNsb2dSA2xvZxIdCgRpbmZvGAQgASgJQgniPwYSBGluZm9SBGluZm8SLgoKZ2FzX3dhbnRlZBgFIAEoA
  0IO4j8LEglnYXNXYW50ZWRSCmdhc193YW50ZWQSKAoIZ2FzX3VzZWQYBiABKANCDOI/CRIHZ2FzVXNlZFIIZ2FzX3VzZWQSUwoGZ
  XZlbnRzGAcgAygLMhYudGVuZGVybWludC5hYmNpLkV2ZW50QiPiPwgSBmV2ZW50c8jeHwDq3h8QZXZlbnRzLG9taXRlbXB0eVIGZ
  XZlbnRzEiwKCWNvZGVzcGFjZRgIIAEoCUIO4j8LEgljb2Rlc3BhY2VSCWNvZGVzcGFjZSKyAQoIVHhSZXN1bHQSIwoGaGVpZ2h0G
  AEgASgDQgviPwgSBmhlaWdodFIGaGVpZ2h0EiAKBWluZGV4GAIgASgNQgriPwcSBWluZGV4UgVpbmRleBIXCgJ0eBgDIAEoDEIH4
  j8EEgJ0eFICdHgSRgoGcmVzdWx0GAQgASgLMh0udGVuZGVybWludC5hYmNpLkV4ZWNUeFJlc3VsdEIP4j8IEgZyZXN1bHTI3h8AU
  gZyZXN1bHQiVQoJVmFsaWRhdG9yEiYKB2FkZHJlc3MYASABKAxCDOI/CRIHYWRkcmVzc1IHYWRkcmVzcxIgCgVwb3dlchgDIAEoA
  0IK4j8HEgVwb3dlclIFcG93ZXIiewoPVmFsaWRhdG9yVXBkYXRlEkYKB3B1Yl9rZXkYASABKAsyHC50ZW5kZXJtaW50LmNyeXB0b
  y5QdWJsaWNLZXlCD+I/CBIGcHViS2V5yN4fAFIGcHViS2V5EiAKBXBvd2VyGAIgASgDQgriPwcSBXBvd2VyUgVwb3dlciKzAQoIV
  m90ZUluZm8STAoJdmFsaWRhdG9yGAEgASgLMhoudGVuZGVybWludC5hYmNpLlZhbGlkYXRvckIS4j8LEgl2YWxpZGF0b3LI3h8AU
  gl2YWxpZGF0b3ISUwoNYmxvY2tfaWRfZmxhZxgDIAEoDjIdLnRlbmRlcm1pbnQudHlwZXMuQmxvY2tJREZsYWdCEOI/DRILYmxvY
  2tJZEZsYWdSC2Jsb2NrSWRGbGFnSgQIAhADIsACChBFeHRlbmRlZFZvdGVJbmZvEkwKCXZhbGlkYXRvchgBIAEoCzIaLnRlbmRlc
  m1pbnQuYWJjaS5WYWxpZGF0b3JCEuI/CxIJdmFsaWRhdG9yyN4fAFIJdmFsaWRhdG9yEjkKDnZvdGVfZXh0ZW5zaW9uGAMgASgMQ
  hLiPw8SDXZvdGVFeHRlbnNpb25SDXZvdGVFeHRlbnNpb24SSAoTZXh0ZW5zaW9uX3NpZ25hdHVyZRgEIAEoDEIX4j8UEhJleHRlb
  nNpb25TaWduYXR1cmVSEmV4dGVuc2lvblNpZ25hdHVyZRJTCg1ibG9ja19pZF9mbGFnGAUgASgOMh0udGVuZGVybWludC50eXBlc
  y5CbG9ja0lERmxhZ0IQ4j8NEgtibG9ja0lkRmxhZ1ILYmxvY2tJZEZsYWdKBAgCEAMiyQIKC01pc2JlaGF2aW9yEj8KBHR5cGUYA
  SABKA4yIC50ZW5kZXJtaW50LmFiY2kuTWlzYmVoYXZpb3JUeXBlQgniPwYSBHR5cGVSBHR5cGUSTAoJdmFsaWRhdG9yGAIgASgLM
  houdGVuZGVybWludC5hYmNpLlZhbGlkYXRvckIS4j8LEgl2YWxpZGF0b3LI3h8AUgl2YWxpZGF0b3ISIwoGaGVpZ2h0GAMgASgDQ
  gviPwgSBmhlaWdodFIGaGVpZ2h0EkEKBHRpbWUYBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQhHiPwYSBHRpbWXI3
  h8AkN8fAVIEdGltZRJDChJ0b3RhbF92b3RpbmdfcG93ZXIYBSABKANCFeI/EhIQdG90YWxWb3RpbmdQb3dlclIQdG90YWxWb3Rpb
  mdQb3dlciLDAQoIU25hcHNob3QSIwoGaGVpZ2h0GAEgASgEQgviPwgSBmhlaWdodFIGaGVpZ2h0EiMKBmZvcm1hdBgCIAEoDUIL4
  j8IEgZmb3JtYXRSBmZvcm1hdBIjCgZjaHVua3MYAyABKA1CC+I/CBIGY2h1bmtzUgZjaHVua3MSHQoEaGFzaBgEIAEoDEIJ4j8GE
  gRoYXNoUgRoYXNoEikKCG1ldGFkYXRhGAUgASgMQg3iPwoSCG1ldGFkYXRhUghtZXRhZGF0YSpNCgtDaGVja1R4VHlwZRIYCgNOR
  VcQABoP4j8FEgNORVeKnSADTmV3EiQKB1JFQ0hFQ0sQARoX4j8JEgdSRUNIRUNLip0gB1JlY2hlY2sqiAEKD01pc2JlaGF2aW9yV
  HlwZRIZCgdVTktOT1dOEAAaDOI/CRIHVU5LTk9XThInCg5EVVBMSUNBVEVfVk9URRABGhPiPxASDkRVUExJQ0FURV9WT1RFEjEKE
  0xJR0hUX0NMSUVOVF9BVFRBQ0sQAhoY4j8VEhNMSUdIVF9DTElFTlRfQVRUQUNLMp0LCgRBQkNJEkMKBEVjaG8SHC50ZW5kZXJta
  W50LmFiY2kuUmVxdWVzdEVjaG8aHS50ZW5kZXJtaW50LmFiY2kuUmVzcG9uc2VFY2hvEkYKBUZsdXNoEh0udGVuZGVybWludC5hY
  mNpLlJlcXVlc3RGbHVzaBoeLnRlbmRlcm1pbnQuYWJjaS5SZXNwb25zZUZsdXNoEkMKBEluZm8SHC50ZW5kZXJtaW50LmFiY2kuU
  mVxdWVzdEluZm8aHS50ZW5kZXJtaW50LmFiY2kuUmVzcG9uc2VJbmZvEkwKB0NoZWNrVHgSHy50ZW5kZXJtaW50LmFiY2kuUmVxd
  WVzdENoZWNrVHgaIC50ZW5kZXJtaW50LmFiY2kuUmVzcG9uc2VDaGVja1R4EkYKBVF1ZXJ5Eh0udGVuZGVybWludC5hYmNpLlJlc
  XVlc3RRdWVyeRoeLnRlbmRlcm1pbnQuYWJjaS5SZXNwb25zZVF1ZXJ5EkkKBkNvbW1pdBIeLnRlbmRlcm1pbnQuYWJjaS5SZXF1Z
  XN0Q29tbWl0Gh8udGVuZGVybWludC5hYmNpLlJlc3BvbnNlQ29tbWl0ElIKCUluaXRDaGFpbhIhLnRlbmRlcm1pbnQuYWJjaS5SZ
  XF1ZXN0SW5pdENoYWluGiIudGVuZGVybWludC5hYmNpLlJlc3BvbnNlSW5pdENoYWluEl4KDUxpc3RTbmFwc2hvdHMSJS50ZW5kZ
  XJtaW50LmFiY2kuUmVxdWVzdExpc3RTbmFwc2hvdHMaJi50ZW5kZXJtaW50LmFiY2kuUmVzcG9uc2VMaXN0U25hcHNob3RzEl4KD
  U9mZmVyU25hcHNob3QSJS50ZW5kZXJtaW50LmFiY2kuUmVxdWVzdE9mZmVyU25hcHNob3QaJi50ZW5kZXJtaW50LmFiY2kuUmVzc
  G9uc2VPZmZlclNuYXBzaG90EmoKEUxvYWRTbmFwc2hvdENodW5rEikudGVuZGVybWludC5hYmNpLlJlcXVlc3RMb2FkU25hcHNob
  3RDaHVuaxoqLnRlbmRlcm1pbnQuYWJjaS5SZXNwb25zZUxvYWRTbmFwc2hvdENodW5rEm0KEkFwcGx5U25hcHNob3RDaHVuaxIqL
  nRlbmRlcm1pbnQuYWJjaS5SZXF1ZXN0QXBwbHlTbmFwc2hvdENodW5rGisudGVuZGVybWludC5hYmNpLlJlc3BvbnNlQXBwbHlTb
  mFwc2hvdENodW5rEmQKD1ByZXBhcmVQcm9wb3NhbBInLnRlbmRlcm1pbnQuYWJjaS5SZXF1ZXN0UHJlcGFyZVByb3Bvc2FsGigud
  GVuZGVybWludC5hYmNpLlJlc3BvbnNlUHJlcGFyZVByb3Bvc2FsEmQKD1Byb2Nlc3NQcm9wb3NhbBInLnRlbmRlcm1pbnQuYWJja
  S5SZXF1ZXN0UHJvY2Vzc1Byb3Bvc2FsGigudGVuZGVybWludC5hYmNpLlJlc3BvbnNlUHJvY2Vzc1Byb3Bvc2FsElUKCkV4dGVuZ
  FZvdGUSIi50ZW5kZXJtaW50LmFiY2kuUmVxdWVzdEV4dGVuZFZvdGUaIy50ZW5kZXJtaW50LmFiY2kuUmVzcG9uc2VFeHRlbmRWb
  3RlEnAKE1ZlcmlmeVZvdGVFeHRlbnNpb24SKy50ZW5kZXJtaW50LmFiY2kuUmVxdWVzdFZlcmlmeVZvdGVFeHRlbnNpb24aLC50Z
  W5kZXJtaW50LmFiY2kuUmVzcG9uc2VWZXJpZnlWb3RlRXh0ZW5zaW9uEl4KDUZpbmFsaXplQmxvY2sSJS50ZW5kZXJtaW50LmFiY
  2kuUmVxdWVzdEZpbmFsaXplQmxvY2saJi50ZW5kZXJtaW50LmFiY2kuUmVzcG9uc2VGaW5hbGl6ZUJsb2NrQilaJ2dpdGh1Yi5jb
  20vY29tZXRiZnQvY29tZXRiZnQvYWJjaS90eXBlc2IGcHJvdG8z"""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      tendermint.crypto.ProofProto.javaDescriptor,
      tendermint.crypto.KeysProto.javaDescriptor,
      tendermint.types.ParamsProto.javaDescriptor,
      tendermint.types.ValidatorProto.javaDescriptor,
      com.google.protobuf.timestamp.TimestampProto.javaDescriptor,
      com.google.protobuf.GogoProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}