// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package tendermint.abci

/** @param log
  *   nondeterministic
  * @param info
  *   nondeterministic
  */
@SerialVersionUID(0L)
final case class ResponseCheckTx(
    code: _root_.scala.Int = 0,
    data: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    log: _root_.scala.Predef.String = "",
    info: _root_.scala.Predef.String = "",
    gasWanted: _root_.scala.Long = 0L,
    gasUsed: _root_.scala.Long = 0L,
    events: _root_.scala.Seq[tendermint.abci.Event] = _root_.scala.Seq.empty,
    codespace: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ResponseCheckTx] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = code
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, __value)
        }
      };
      
      {
        val __value = data
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(2, __value)
        }
      };
      
      {
        val __value = log
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = info
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = gasWanted
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, __value)
        }
      };
      
      {
        val __value = gasUsed
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(6, __value)
        }
      };
      events.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = codespace
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = code
        if (__v != 0) {
          _output__.writeUInt32(1, __v)
        }
      };
      {
        val __v = data
        if (!__v.isEmpty) {
          _output__.writeBytes(2, __v)
        }
      };
      {
        val __v = log
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = info
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = gasWanted
        if (__v != 0L) {
          _output__.writeInt64(5, __v)
        }
      };
      {
        val __v = gasUsed
        if (__v != 0L) {
          _output__.writeInt64(6, __v)
        }
      };
      events.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = codespace
        if (!__v.isEmpty) {
          _output__.writeString(8, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withCode(__v: _root_.scala.Int): ResponseCheckTx = copy(code = __v)
    def withData(__v: _root_.com.google.protobuf.ByteString): ResponseCheckTx = copy(data = __v)
    def withLog(__v: _root_.scala.Predef.String): ResponseCheckTx = copy(log = __v)
    def withInfo(__v: _root_.scala.Predef.String): ResponseCheckTx = copy(info = __v)
    def withGasWanted(__v: _root_.scala.Long): ResponseCheckTx = copy(gasWanted = __v)
    def withGasUsed(__v: _root_.scala.Long): ResponseCheckTx = copy(gasUsed = __v)
    def clearEvents = copy(events = _root_.scala.Seq.empty)
    def addEvents(__vs: tendermint.abci.Event *): ResponseCheckTx = addAllEvents(__vs)
    def addAllEvents(__vs: Iterable[tendermint.abci.Event]): ResponseCheckTx = copy(events = events ++ __vs)
    def withEvents(__v: _root_.scala.Seq[tendermint.abci.Event]): ResponseCheckTx = copy(events = __v)
    def withCodespace(__v: _root_.scala.Predef.String): ResponseCheckTx = copy(codespace = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = code
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = data
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 3 => {
          val __t = log
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = info
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = gasWanted
          if (__t != 0L) __t else null
        }
        case 6 => {
          val __t = gasUsed
          if (__t != 0L) __t else null
        }
        case 7 => events
        case 8 => {
          val __t = codespace
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(code)
        case 2 => _root_.scalapb.descriptors.PByteString(data)
        case 3 => _root_.scalapb.descriptors.PString(log)
        case 4 => _root_.scalapb.descriptors.PString(info)
        case 5 => _root_.scalapb.descriptors.PLong(gasWanted)
        case 6 => _root_.scalapb.descriptors.PLong(gasUsed)
        case 7 => _root_.scalapb.descriptors.PRepeated(events.iterator.map(_.toPMessage).toVector)
        case 8 => _root_.scalapb.descriptors.PString(codespace)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tendermint.abci.ResponseCheckTx.type = tendermint.abci.ResponseCheckTx
    // @@protoc_insertion_point(GeneratedMessage[tendermint.abci.ResponseCheckTx])
}

object ResponseCheckTx extends scalapb.GeneratedMessageCompanion[tendermint.abci.ResponseCheckTx] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tendermint.abci.ResponseCheckTx] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tendermint.abci.ResponseCheckTx = {
    var __code: _root_.scala.Int = 0
    var __data: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
    var __log: _root_.scala.Predef.String = ""
    var __info: _root_.scala.Predef.String = ""
    var __gasWanted: _root_.scala.Long = 0L
    var __gasUsed: _root_.scala.Long = 0L
    val __events: _root_.scala.collection.immutable.VectorBuilder[tendermint.abci.Event] = new _root_.scala.collection.immutable.VectorBuilder[tendermint.abci.Event]
    var __codespace: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __code = _input__.readUInt32()
        case 18 =>
          __data = _input__.readBytes()
        case 26 =>
          __log = _input__.readStringRequireUtf8()
        case 34 =>
          __info = _input__.readStringRequireUtf8()
        case 40 =>
          __gasWanted = _input__.readInt64()
        case 48 =>
          __gasUsed = _input__.readInt64()
        case 58 =>
          __events += _root_.scalapb.LiteParser.readMessage[tendermint.abci.Event](_input__)
        case 66 =>
          __codespace = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tendermint.abci.ResponseCheckTx(
        code = __code,
        data = __data,
        log = __log,
        info = __info,
        gasWanted = __gasWanted,
        gasUsed = __gasUsed,
        events = __events.result(),
        codespace = __codespace,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tendermint.abci.ResponseCheckTx] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tendermint.abci.ResponseCheckTx(
        code = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        data = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        log = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        info = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        gasWanted = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        gasUsed = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        events = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[tendermint.abci.Event]]).getOrElse(_root_.scala.Seq.empty),
        codespace = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tendermint.abci.TypesProto.javaDescriptor.getMessageTypes().get(24)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tendermint.abci.TypesProto.scalaDescriptor.messages(24)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 7 => __out = tendermint.abci.Event
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tendermint.abci.ResponseCheckTx(
    code = 0,
    data = _root_.com.google.protobuf.ByteString.EMPTY,
    log = "",
    info = "",
    gasWanted = 0L,
    gasUsed = 0L,
    events = _root_.scala.Seq.empty,
    codespace = ""
  )
  implicit class ResponseCheckTxLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tendermint.abci.ResponseCheckTx]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tendermint.abci.ResponseCheckTx](_l) {
    def code: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.code)((c_, f_) => c_.copy(code = f_))
    def data: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.data)((c_, f_) => c_.copy(data = f_))
    def log: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.log)((c_, f_) => c_.copy(log = f_))
    def info: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.info)((c_, f_) => c_.copy(info = f_))
    def gasWanted: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.gasWanted)((c_, f_) => c_.copy(gasWanted = f_))
    def gasUsed: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.gasUsed)((c_, f_) => c_.copy(gasUsed = f_))
    def events: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[tendermint.abci.Event]] = field(_.events)((c_, f_) => c_.copy(events = f_))
    def codespace: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.codespace)((c_, f_) => c_.copy(codespace = f_))
  }
  final val CODE_FIELD_NUMBER = 1
  final val DATA_FIELD_NUMBER = 2
  final val LOG_FIELD_NUMBER = 3
  final val INFO_FIELD_NUMBER = 4
  final val GAS_WANTED_FIELD_NUMBER = 5
  final val GAS_USED_FIELD_NUMBER = 6
  final val EVENTS_FIELD_NUMBER = 7
  final val CODESPACE_FIELD_NUMBER = 8
  def of(
    code: _root_.scala.Int,
    data: _root_.com.google.protobuf.ByteString,
    log: _root_.scala.Predef.String,
    info: _root_.scala.Predef.String,
    gasWanted: _root_.scala.Long,
    gasUsed: _root_.scala.Long,
    events: _root_.scala.Seq[tendermint.abci.Event],
    codespace: _root_.scala.Predef.String
  ): _root_.tendermint.abci.ResponseCheckTx = _root_.tendermint.abci.ResponseCheckTx(
    code,
    data,
    log,
    info,
    gasWanted,
    gasUsed,
    events,
    codespace
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tendermint.abci.ResponseCheckTx])
}
