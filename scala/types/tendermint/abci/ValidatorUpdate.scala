// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package tendermint.abci

@SerialVersionUID(0L)
final case class ValidatorUpdate(
    pubKey: _root_.scala.Option[tendermint.crypto.PublicKey] = _root_.scala.None,
    power: _root_.scala.Long = 0L,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ValidatorUpdate] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (pubKey.isDefined) {
        val __value = pubKey.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = power
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      pubKey.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = power
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getPubKey: tendermint.crypto.PublicKey = pubKey.getOrElse(tendermint.crypto.PublicKey.defaultInstance)
    def clearPubKey: ValidatorUpdate = copy(pubKey = _root_.scala.None)
    def withPubKey(__v: tendermint.crypto.PublicKey): ValidatorUpdate = copy(pubKey = Option(__v))
    def withPower(__v: _root_.scala.Long): ValidatorUpdate = copy(power = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => pubKey.orNull
        case 2 => {
          val __t = power
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => pubKey.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PLong(power)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tendermint.abci.ValidatorUpdate.type = tendermint.abci.ValidatorUpdate
    // @@protoc_insertion_point(GeneratedMessage[tendermint.abci.ValidatorUpdate])
}

object ValidatorUpdate extends scalapb.GeneratedMessageCompanion[tendermint.abci.ValidatorUpdate] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tendermint.abci.ValidatorUpdate] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tendermint.abci.ValidatorUpdate = {
    var __pubKey: _root_.scala.Option[tendermint.crypto.PublicKey] = _root_.scala.None
    var __power: _root_.scala.Long = 0L
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __pubKey = _root_.scala.Option(__pubKey.fold(_root_.scalapb.LiteParser.readMessage[tendermint.crypto.PublicKey](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 16 =>
          __power = _input__.readInt64()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tendermint.abci.ValidatorUpdate(
        pubKey = __pubKey,
        power = __power,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tendermint.abci.ValidatorUpdate] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tendermint.abci.ValidatorUpdate(
        pubKey = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[tendermint.crypto.PublicKey]]),
        power = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tendermint.abci.TypesProto.javaDescriptor.getMessageTypes().get(42)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tendermint.abci.TypesProto.scalaDescriptor.messages(42)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = tendermint.crypto.PublicKey
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tendermint.abci.ValidatorUpdate(
    pubKey = _root_.scala.None,
    power = 0L
  )
  implicit class ValidatorUpdateLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tendermint.abci.ValidatorUpdate]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tendermint.abci.ValidatorUpdate](_l) {
    def pubKey: _root_.scalapb.lenses.Lens[UpperPB, tendermint.crypto.PublicKey] = field(_.getPubKey)((c_, f_) => c_.copy(pubKey = _root_.scala.Option(f_)))
    def optionalPubKey: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tendermint.crypto.PublicKey]] = field(_.pubKey)((c_, f_) => c_.copy(pubKey = f_))
    def power: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.power)((c_, f_) => c_.copy(power = f_))
  }
  final val PUB_KEY_FIELD_NUMBER = 1
  final val POWER_FIELD_NUMBER = 2
  def of(
    pubKey: _root_.scala.Option[tendermint.crypto.PublicKey],
    power: _root_.scala.Long
  ): _root_.tendermint.abci.ValidatorUpdate = _root_.tendermint.abci.ValidatorUpdate(
    pubKey,
    power
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tendermint.abci.ValidatorUpdate])
}
