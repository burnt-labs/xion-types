// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package tendermint.abci

@SerialVersionUID(0L)
final case class RequestInfo(
    version: _root_.scala.Predef.String = "",
    blockVersion: _root_.scala.Long = 0L,
    p2PVersion: _root_.scala.Long = 0L,
    abciVersion: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[RequestInfo] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = version
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = blockVersion
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(2, __value)
        }
      };
      
      {
        val __value = p2PVersion
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(3, __value)
        }
      };
      
      {
        val __value = abciVersion
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = version
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = blockVersion
        if (__v != 0L) {
          _output__.writeUInt64(2, __v)
        }
      };
      {
        val __v = p2PVersion
        if (__v != 0L) {
          _output__.writeUInt64(3, __v)
        }
      };
      {
        val __v = abciVersion
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withVersion(__v: _root_.scala.Predef.String): RequestInfo = copy(version = __v)
    def withBlockVersion(__v: _root_.scala.Long): RequestInfo = copy(blockVersion = __v)
    def withP2PVersion(__v: _root_.scala.Long): RequestInfo = copy(p2PVersion = __v)
    def withAbciVersion(__v: _root_.scala.Predef.String): RequestInfo = copy(abciVersion = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = version
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = blockVersion
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = p2PVersion
          if (__t != 0L) __t else null
        }
        case 4 => {
          val __t = abciVersion
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(version)
        case 2 => _root_.scalapb.descriptors.PLong(blockVersion)
        case 3 => _root_.scalapb.descriptors.PLong(p2PVersion)
        case 4 => _root_.scalapb.descriptors.PString(abciVersion)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tendermint.abci.RequestInfo.type = tendermint.abci.RequestInfo
    // @@protoc_insertion_point(GeneratedMessage[tendermint.abci.RequestInfo])
}

object RequestInfo extends scalapb.GeneratedMessageCompanion[tendermint.abci.RequestInfo] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tendermint.abci.RequestInfo] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tendermint.abci.RequestInfo = {
    var __version: _root_.scala.Predef.String = ""
    var __blockVersion: _root_.scala.Long = 0L
    var __p2PVersion: _root_.scala.Long = 0L
    var __abciVersion: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __version = _input__.readStringRequireUtf8()
        case 16 =>
          __blockVersion = _input__.readUInt64()
        case 24 =>
          __p2PVersion = _input__.readUInt64()
        case 34 =>
          __abciVersion = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tendermint.abci.RequestInfo(
        version = __version,
        blockVersion = __blockVersion,
        p2PVersion = __p2PVersion,
        abciVersion = __abciVersion,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tendermint.abci.RequestInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tendermint.abci.RequestInfo(
        version = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        blockVersion = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        p2PVersion = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        abciVersion = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tendermint.abci.TypesProto.javaDescriptor.getMessageTypes().get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tendermint.abci.TypesProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tendermint.abci.RequestInfo(
    version = "",
    blockVersion = 0L,
    p2PVersion = 0L,
    abciVersion = ""
  )
  implicit class RequestInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tendermint.abci.RequestInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tendermint.abci.RequestInfo](_l) {
    def version: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.version)((c_, f_) => c_.copy(version = f_))
    def blockVersion: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.blockVersion)((c_, f_) => c_.copy(blockVersion = f_))
    def p2PVersion: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.p2PVersion)((c_, f_) => c_.copy(p2PVersion = f_))
    def abciVersion: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.abciVersion)((c_, f_) => c_.copy(abciVersion = f_))
  }
  final val VERSION_FIELD_NUMBER = 1
  final val BLOCK_VERSION_FIELD_NUMBER = 2
  final val P2P_VERSION_FIELD_NUMBER = 3
  final val ABCI_VERSION_FIELD_NUMBER = 4
  def of(
    version: _root_.scala.Predef.String,
    blockVersion: _root_.scala.Long,
    p2PVersion: _root_.scala.Long,
    abciVersion: _root_.scala.Predef.String
  ): _root_.tendermint.abci.RequestInfo = _root_.tendermint.abci.RequestInfo(
    version,
    blockVersion,
    p2PVersion,
    abciVersion
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tendermint.abci.RequestInfo])
}
