// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package tendermint.p2p

@SerialVersionUID(0L)
final case class DefaultNodeInfo(
    protocolVersion: _root_.scala.Option[tendermint.p2p.ProtocolVersion] = _root_.scala.None,
    defaultNodeId: _root_.scala.Predef.String = "",
    listenAddr: _root_.scala.Predef.String = "",
    network: _root_.scala.Predef.String = "",
    version: _root_.scala.Predef.String = "",
    channels: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    moniker: _root_.scala.Predef.String = "",
    other: _root_.scala.Option[tendermint.p2p.DefaultNodeInfoOther] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[DefaultNodeInfo] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (protocolVersion.isDefined) {
        val __value = protocolVersion.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = defaultNodeId
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = listenAddr
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = network
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = version
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      
      {
        val __value = channels
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(6, __value)
        }
      };
      
      {
        val __value = moniker
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
        }
      };
      if (other.isDefined) {
        val __value = other.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      protocolVersion.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = defaultNodeId
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = listenAddr
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = network
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = version
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = channels
        if (!__v.isEmpty) {
          _output__.writeBytes(6, __v)
        }
      };
      {
        val __v = moniker
        if (!__v.isEmpty) {
          _output__.writeString(7, __v)
        }
      };
      other.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getProtocolVersion: tendermint.p2p.ProtocolVersion = protocolVersion.getOrElse(tendermint.p2p.ProtocolVersion.defaultInstance)
    def clearProtocolVersion: DefaultNodeInfo = copy(protocolVersion = _root_.scala.None)
    def withProtocolVersion(__v: tendermint.p2p.ProtocolVersion): DefaultNodeInfo = copy(protocolVersion = Option(__v))
    def withDefaultNodeId(__v: _root_.scala.Predef.String): DefaultNodeInfo = copy(defaultNodeId = __v)
    def withListenAddr(__v: _root_.scala.Predef.String): DefaultNodeInfo = copy(listenAddr = __v)
    def withNetwork(__v: _root_.scala.Predef.String): DefaultNodeInfo = copy(network = __v)
    def withVersion(__v: _root_.scala.Predef.String): DefaultNodeInfo = copy(version = __v)
    def withChannels(__v: _root_.com.google.protobuf.ByteString): DefaultNodeInfo = copy(channels = __v)
    def withMoniker(__v: _root_.scala.Predef.String): DefaultNodeInfo = copy(moniker = __v)
    def getOther: tendermint.p2p.DefaultNodeInfoOther = other.getOrElse(tendermint.p2p.DefaultNodeInfoOther.defaultInstance)
    def clearOther: DefaultNodeInfo = copy(other = _root_.scala.None)
    def withOther(__v: tendermint.p2p.DefaultNodeInfoOther): DefaultNodeInfo = copy(other = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => protocolVersion.orNull
        case 2 => {
          val __t = defaultNodeId
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = listenAddr
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = network
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = version
          if (__t != "") __t else null
        }
        case 6 => {
          val __t = channels
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 7 => {
          val __t = moniker
          if (__t != "") __t else null
        }
        case 8 => other.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => protocolVersion.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PString(defaultNodeId)
        case 3 => _root_.scalapb.descriptors.PString(listenAddr)
        case 4 => _root_.scalapb.descriptors.PString(network)
        case 5 => _root_.scalapb.descriptors.PString(version)
        case 6 => _root_.scalapb.descriptors.PByteString(channels)
        case 7 => _root_.scalapb.descriptors.PString(moniker)
        case 8 => other.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tendermint.p2p.DefaultNodeInfo.type = tendermint.p2p.DefaultNodeInfo
    // @@protoc_insertion_point(GeneratedMessage[tendermint.p2p.DefaultNodeInfo])
}

object DefaultNodeInfo extends scalapb.GeneratedMessageCompanion[tendermint.p2p.DefaultNodeInfo] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tendermint.p2p.DefaultNodeInfo] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tendermint.p2p.DefaultNodeInfo = {
    var __protocolVersion: _root_.scala.Option[tendermint.p2p.ProtocolVersion] = _root_.scala.None
    var __defaultNodeId: _root_.scala.Predef.String = ""
    var __listenAddr: _root_.scala.Predef.String = ""
    var __network: _root_.scala.Predef.String = ""
    var __version: _root_.scala.Predef.String = ""
    var __channels: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
    var __moniker: _root_.scala.Predef.String = ""
    var __other: _root_.scala.Option[tendermint.p2p.DefaultNodeInfoOther] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __protocolVersion = _root_.scala.Option(__protocolVersion.fold(_root_.scalapb.LiteParser.readMessage[tendermint.p2p.ProtocolVersion](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __defaultNodeId = _input__.readStringRequireUtf8()
        case 26 =>
          __listenAddr = _input__.readStringRequireUtf8()
        case 34 =>
          __network = _input__.readStringRequireUtf8()
        case 42 =>
          __version = _input__.readStringRequireUtf8()
        case 50 =>
          __channels = _input__.readBytes()
        case 58 =>
          __moniker = _input__.readStringRequireUtf8()
        case 66 =>
          __other = _root_.scala.Option(__other.fold(_root_.scalapb.LiteParser.readMessage[tendermint.p2p.DefaultNodeInfoOther](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tendermint.p2p.DefaultNodeInfo(
        protocolVersion = __protocolVersion,
        defaultNodeId = __defaultNodeId,
        listenAddr = __listenAddr,
        network = __network,
        version = __version,
        channels = __channels,
        moniker = __moniker,
        other = __other,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tendermint.p2p.DefaultNodeInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tendermint.p2p.DefaultNodeInfo(
        protocolVersion = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[tendermint.p2p.ProtocolVersion]]),
        defaultNodeId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        listenAddr = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        network = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        version = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        channels = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        moniker = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        other = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[tendermint.p2p.DefaultNodeInfoOther]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tendermint.p2p.TypesProto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tendermint.p2p.TypesProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = tendermint.p2p.ProtocolVersion
      case 8 => __out = tendermint.p2p.DefaultNodeInfoOther
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tendermint.p2p.DefaultNodeInfo(
    protocolVersion = _root_.scala.None,
    defaultNodeId = "",
    listenAddr = "",
    network = "",
    version = "",
    channels = _root_.com.google.protobuf.ByteString.EMPTY,
    moniker = "",
    other = _root_.scala.None
  )
  implicit class DefaultNodeInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tendermint.p2p.DefaultNodeInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tendermint.p2p.DefaultNodeInfo](_l) {
    def protocolVersion: _root_.scalapb.lenses.Lens[UpperPB, tendermint.p2p.ProtocolVersion] = field(_.getProtocolVersion)((c_, f_) => c_.copy(protocolVersion = _root_.scala.Option(f_)))
    def optionalProtocolVersion: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tendermint.p2p.ProtocolVersion]] = field(_.protocolVersion)((c_, f_) => c_.copy(protocolVersion = f_))
    def defaultNodeId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.defaultNodeId)((c_, f_) => c_.copy(defaultNodeId = f_))
    def listenAddr: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.listenAddr)((c_, f_) => c_.copy(listenAddr = f_))
    def network: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.network)((c_, f_) => c_.copy(network = f_))
    def version: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.version)((c_, f_) => c_.copy(version = f_))
    def channels: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.channels)((c_, f_) => c_.copy(channels = f_))
    def moniker: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.moniker)((c_, f_) => c_.copy(moniker = f_))
    def other: _root_.scalapb.lenses.Lens[UpperPB, tendermint.p2p.DefaultNodeInfoOther] = field(_.getOther)((c_, f_) => c_.copy(other = _root_.scala.Option(f_)))
    def optionalOther: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tendermint.p2p.DefaultNodeInfoOther]] = field(_.other)((c_, f_) => c_.copy(other = f_))
  }
  final val PROTOCOL_VERSION_FIELD_NUMBER = 1
  final val DEFAULT_NODE_ID_FIELD_NUMBER = 2
  final val LISTEN_ADDR_FIELD_NUMBER = 3
  final val NETWORK_FIELD_NUMBER = 4
  final val VERSION_FIELD_NUMBER = 5
  final val CHANNELS_FIELD_NUMBER = 6
  final val MONIKER_FIELD_NUMBER = 7
  final val OTHER_FIELD_NUMBER = 8
  def of(
    protocolVersion: _root_.scala.Option[tendermint.p2p.ProtocolVersion],
    defaultNodeId: _root_.scala.Predef.String,
    listenAddr: _root_.scala.Predef.String,
    network: _root_.scala.Predef.String,
    version: _root_.scala.Predef.String,
    channels: _root_.com.google.protobuf.ByteString,
    moniker: _root_.scala.Predef.String,
    other: _root_.scala.Option[tendermint.p2p.DefaultNodeInfoOther]
  ): _root_.tendermint.p2p.DefaultNodeInfo = _root_.tendermint.p2p.DefaultNodeInfo(
    protocolVersion,
    defaultNodeId,
    listenAddr,
    network,
    version,
    channels,
    moniker,
    other
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tendermint.p2p.DefaultNodeInfo])
}
