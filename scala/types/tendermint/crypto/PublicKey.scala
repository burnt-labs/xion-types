// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package tendermint.crypto

/** PublicKey defines the keys available for use with Validators
  */
@SerialVersionUID(0L)
final case class PublicKey(
    sum: tendermint.crypto.PublicKey.Sum = tendermint.crypto.PublicKey.Sum.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[PublicKey] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (sum.ed25519.isDefined) {
        val __value = sum.ed25519.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(1, __value)
      };
      if (sum.secp256K1.isDefined) {
        val __value = sum.secp256K1.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(2, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      sum.ed25519.foreach { __v =>
        val __m = __v
        _output__.writeBytes(1, __m)
      };
      sum.secp256K1.foreach { __v =>
        val __m = __v
        _output__.writeBytes(2, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getEd25519: _root_.com.google.protobuf.ByteString = sum.ed25519.getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
    def withEd25519(__v: _root_.com.google.protobuf.ByteString): PublicKey = copy(sum = tendermint.crypto.PublicKey.Sum.Ed25519(__v))
    def getSecp256K1: _root_.com.google.protobuf.ByteString = sum.secp256K1.getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
    def withSecp256K1(__v: _root_.com.google.protobuf.ByteString): PublicKey = copy(sum = tendermint.crypto.PublicKey.Sum.Secp256K1(__v))
    def clearSum: PublicKey = copy(sum = tendermint.crypto.PublicKey.Sum.Empty)
    def withSum(__v: tendermint.crypto.PublicKey.Sum): PublicKey = copy(sum = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => sum.ed25519.orNull
        case 2 => sum.secp256K1.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => sum.ed25519.map(_root_.scalapb.descriptors.PByteString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => sum.secp256K1.map(_root_.scalapb.descriptors.PByteString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tendermint.crypto.PublicKey.type = tendermint.crypto.PublicKey
    // @@protoc_insertion_point(GeneratedMessage[tendermint.crypto.PublicKey])
}

object PublicKey extends scalapb.GeneratedMessageCompanion[tendermint.crypto.PublicKey] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tendermint.crypto.PublicKey] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tendermint.crypto.PublicKey = {
    var __sum: tendermint.crypto.PublicKey.Sum = tendermint.crypto.PublicKey.Sum.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __sum = tendermint.crypto.PublicKey.Sum.Ed25519(_input__.readBytes())
        case 18 =>
          __sum = tendermint.crypto.PublicKey.Sum.Secp256K1(_input__.readBytes())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tendermint.crypto.PublicKey(
        sum = __sum,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tendermint.crypto.PublicKey] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tendermint.crypto.PublicKey(
        sum = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.com.google.protobuf.ByteString]]).map(tendermint.crypto.PublicKey.Sum.Ed25519(_))
            .orElse[tendermint.crypto.PublicKey.Sum](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.com.google.protobuf.ByteString]]).map(tendermint.crypto.PublicKey.Sum.Secp256K1(_)))
            .getOrElse(tendermint.crypto.PublicKey.Sum.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tendermint.crypto.KeysProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tendermint.crypto.KeysProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tendermint.crypto.PublicKey(
    sum = tendermint.crypto.PublicKey.Sum.Empty
  )
  sealed trait Sum extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isEd25519: _root_.scala.Boolean = false
    def isSecp256K1: _root_.scala.Boolean = false
    def ed25519: _root_.scala.Option[_root_.com.google.protobuf.ByteString] = _root_.scala.None
    def secp256K1: _root_.scala.Option[_root_.com.google.protobuf.ByteString] = _root_.scala.None
  }
  object Sum {
    @SerialVersionUID(0L)
    case object Empty extends tendermint.crypto.PublicKey.Sum {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Ed25519(value: _root_.com.google.protobuf.ByteString) extends tendermint.crypto.PublicKey.Sum {
      type ValueType = _root_.com.google.protobuf.ByteString
      override def isEd25519: _root_.scala.Boolean = true
      override def ed25519: _root_.scala.Option[_root_.com.google.protobuf.ByteString] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class Secp256K1(value: _root_.com.google.protobuf.ByteString) extends tendermint.crypto.PublicKey.Sum {
      type ValueType = _root_.com.google.protobuf.ByteString
      override def isSecp256K1: _root_.scala.Boolean = true
      override def secp256K1: _root_.scala.Option[_root_.com.google.protobuf.ByteString] = Some(value)
      override def number: _root_.scala.Int = 2
    }
  }
  implicit class PublicKeyLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tendermint.crypto.PublicKey]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tendermint.crypto.PublicKey](_l) {
    def ed25519: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.getEd25519)((c_, f_) => c_.copy(sum = tendermint.crypto.PublicKey.Sum.Ed25519(f_)))
    def secp256K1: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.getSecp256K1)((c_, f_) => c_.copy(sum = tendermint.crypto.PublicKey.Sum.Secp256K1(f_)))
    def sum: _root_.scalapb.lenses.Lens[UpperPB, tendermint.crypto.PublicKey.Sum] = field(_.sum)((c_, f_) => c_.copy(sum = f_))
  }
  final val ED25519_FIELD_NUMBER = 1
  final val SECP256K1_FIELD_NUMBER = 2
  def of(
    sum: tendermint.crypto.PublicKey.Sum
  ): _root_.tendermint.crypto.PublicKey = _root_.tendermint.crypto.PublicKey(
    sum
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tendermint.crypto.PublicKey])
}
