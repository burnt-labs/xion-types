// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package tendermint.crypto

@SerialVersionUID(0L)
final case class Proof(
    total: _root_.scala.Long = 0L,
    index: _root_.scala.Long = 0L,
    leafHash: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    aunts: _root_.scala.Seq[_root_.com.google.protobuf.ByteString] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Proof] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = total
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
        }
      };
      
      {
        val __value = index
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      
      {
        val __value = leafHash
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(3, __value)
        }
      };
      aunts.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(4, __value)
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = total
        if (__v != 0L) {
          _output__.writeInt64(1, __v)
        }
      };
      {
        val __v = index
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      {
        val __v = leafHash
        if (!__v.isEmpty) {
          _output__.writeBytes(3, __v)
        }
      };
      aunts.foreach { __v =>
        val __m = __v
        _output__.writeBytes(4, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def withTotal(__v: _root_.scala.Long): Proof = copy(total = __v)
    def withIndex(__v: _root_.scala.Long): Proof = copy(index = __v)
    def withLeafHash(__v: _root_.com.google.protobuf.ByteString): Proof = copy(leafHash = __v)
    def clearAunts = copy(aunts = _root_.scala.Seq.empty)
    def addAunts(__vs: _root_.com.google.protobuf.ByteString *): Proof = addAllAunts(__vs)
    def addAllAunts(__vs: Iterable[_root_.com.google.protobuf.ByteString]): Proof = copy(aunts = aunts ++ __vs)
    def withAunts(__v: _root_.scala.Seq[_root_.com.google.protobuf.ByteString]): Proof = copy(aunts = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = total
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = index
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = leafHash
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 4 => aunts
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(total)
        case 2 => _root_.scalapb.descriptors.PLong(index)
        case 3 => _root_.scalapb.descriptors.PByteString(leafHash)
        case 4 => _root_.scalapb.descriptors.PRepeated(aunts.iterator.map(_root_.scalapb.descriptors.PByteString(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: tendermint.crypto.Proof.type = tendermint.crypto.Proof
    // @@protoc_insertion_point(GeneratedMessage[tendermint.crypto.Proof])
}

object Proof extends scalapb.GeneratedMessageCompanion[tendermint.crypto.Proof] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tendermint.crypto.Proof] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tendermint.crypto.Proof = {
    var __total: _root_.scala.Long = 0L
    var __index: _root_.scala.Long = 0L
    var __leafHash: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
    val __aunts: _root_.scala.collection.immutable.VectorBuilder[_root_.com.google.protobuf.ByteString] = new _root_.scala.collection.immutable.VectorBuilder[_root_.com.google.protobuf.ByteString]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __total = _input__.readInt64()
        case 16 =>
          __index = _input__.readInt64()
        case 26 =>
          __leafHash = _input__.readBytes()
        case 34 =>
          __aunts += _input__.readBytes()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    tendermint.crypto.Proof(
        total = __total,
        index = __index,
        leafHash = __leafHash,
        aunts = __aunts.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tendermint.crypto.Proof] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      tendermint.crypto.Proof(
        total = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        index = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        leafHash = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        aunts = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[_root_.com.google.protobuf.ByteString]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tendermint.crypto.ProofProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tendermint.crypto.ProofProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tendermint.crypto.Proof(
    total = 0L,
    index = 0L,
    leafHash = _root_.com.google.protobuf.ByteString.EMPTY,
    aunts = _root_.scala.Seq.empty
  )
  implicit class ProofLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tendermint.crypto.Proof]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tendermint.crypto.Proof](_l) {
    def total: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.total)((c_, f_) => c_.copy(total = f_))
    def index: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.index)((c_, f_) => c_.copy(index = f_))
    def leafHash: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.leafHash)((c_, f_) => c_.copy(leafHash = f_))
    def aunts: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.com.google.protobuf.ByteString]] = field(_.aunts)((c_, f_) => c_.copy(aunts = f_))
  }
  final val TOTAL_FIELD_NUMBER = 1
  final val INDEX_FIELD_NUMBER = 2
  final val LEAF_HASH_FIELD_NUMBER = 3
  final val AUNTS_FIELD_NUMBER = 4
  def of(
    total: _root_.scala.Long,
    index: _root_.scala.Long,
    leafHash: _root_.com.google.protobuf.ByteString,
    aunts: _root_.scala.Seq[_root_.com.google.protobuf.ByteString]
  ): _root_.tendermint.crypto.Proof = _root_.tendermint.crypto.Proof(
    total,
    index,
    leafHash,
    aunts
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tendermint.crypto.Proof])
}
