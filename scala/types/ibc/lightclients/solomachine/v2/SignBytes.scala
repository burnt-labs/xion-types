// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package ibc.lightclients.solomachine.v2

/** SignBytes defines the signed bytes used for signature verification.
  *
  * @param dataType
  *   type of the data used
  * @param data
  *   marshaled data
  */
@SerialVersionUID(0L)
final case class SignBytes(
    sequence: _root_.scala.Long = 0L,
    timestamp: _root_.scala.Long = 0L,
    diversifier: _root_.scala.Predef.String = "",
    dataType: ibc.lightclients.solomachine.v2.DataType = ibc.lightclients.solomachine.v2.DataType.DATA_TYPE_UNINITIALIZED_UNSPECIFIED,
    data: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SignBytes] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = sequence
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(1, __value)
        }
      };
      
      {
        val __value = timestamp
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(2, __value)
        }
      };
      
      {
        val __value = diversifier
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = dataType.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(4, __value)
        }
      };
      
      {
        val __value = data
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(5, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = sequence
        if (__v != 0L) {
          _output__.writeUInt64(1, __v)
        }
      };
      {
        val __v = timestamp
        if (__v != 0L) {
          _output__.writeUInt64(2, __v)
        }
      };
      {
        val __v = diversifier
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = dataType.value
        if (__v != 0) {
          _output__.writeEnum(4, __v)
        }
      };
      {
        val __v = data
        if (!__v.isEmpty) {
          _output__.writeBytes(5, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withSequence(__v: _root_.scala.Long): SignBytes = copy(sequence = __v)
    def withTimestamp(__v: _root_.scala.Long): SignBytes = copy(timestamp = __v)
    def withDiversifier(__v: _root_.scala.Predef.String): SignBytes = copy(diversifier = __v)
    def withDataType(__v: ibc.lightclients.solomachine.v2.DataType): SignBytes = copy(dataType = __v)
    def withData(__v: _root_.com.google.protobuf.ByteString): SignBytes = copy(data = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = sequence
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = timestamp
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = diversifier
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = dataType.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 5 => {
          val __t = data
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(sequence)
        case 2 => _root_.scalapb.descriptors.PLong(timestamp)
        case 3 => _root_.scalapb.descriptors.PString(diversifier)
        case 4 => _root_.scalapb.descriptors.PEnum(dataType.scalaValueDescriptor)
        case 5 => _root_.scalapb.descriptors.PByteString(data)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: ibc.lightclients.solomachine.v2.SignBytes.type = ibc.lightclients.solomachine.v2.SignBytes
    // @@protoc_insertion_point(GeneratedMessage[ibc.lightclients.solomachine.v2.SignBytes])
}

object SignBytes extends scalapb.GeneratedMessageCompanion[ibc.lightclients.solomachine.v2.SignBytes] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[ibc.lightclients.solomachine.v2.SignBytes] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): ibc.lightclients.solomachine.v2.SignBytes = {
    var __sequence: _root_.scala.Long = 0L
    var __timestamp: _root_.scala.Long = 0L
    var __diversifier: _root_.scala.Predef.String = ""
    var __dataType: ibc.lightclients.solomachine.v2.DataType = ibc.lightclients.solomachine.v2.DataType.DATA_TYPE_UNINITIALIZED_UNSPECIFIED
    var __data: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __sequence = _input__.readUInt64()
        case 16 =>
          __timestamp = _input__.readUInt64()
        case 26 =>
          __diversifier = _input__.readStringRequireUtf8()
        case 32 =>
          __dataType = ibc.lightclients.solomachine.v2.DataType.fromValue(_input__.readEnum())
        case 42 =>
          __data = _input__.readBytes()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    ibc.lightclients.solomachine.v2.SignBytes(
        sequence = __sequence,
        timestamp = __timestamp,
        diversifier = __diversifier,
        dataType = __dataType,
        data = __data,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[ibc.lightclients.solomachine.v2.SignBytes] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      ibc.lightclients.solomachine.v2.SignBytes(
        sequence = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        timestamp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        diversifier = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        dataType = ibc.lightclients.solomachine.v2.DataType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(ibc.lightclients.solomachine.v2.DataType.DATA_TYPE_UNINITIALIZED_UNSPECIFIED.scalaValueDescriptor).number),
        data = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ibc.lightclients.solomachine.v2.SolomachineProto.javaDescriptor.getMessageTypes().get(6)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ibc.lightclients.solomachine.v2.SolomachineProto.scalaDescriptor.messages(6)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 4 => ibc.lightclients.solomachine.v2.DataType
    }
  }
  lazy val defaultInstance = ibc.lightclients.solomachine.v2.SignBytes(
    sequence = 0L,
    timestamp = 0L,
    diversifier = "",
    dataType = ibc.lightclients.solomachine.v2.DataType.DATA_TYPE_UNINITIALIZED_UNSPECIFIED,
    data = _root_.com.google.protobuf.ByteString.EMPTY
  )
  implicit class SignBytesLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, ibc.lightclients.solomachine.v2.SignBytes]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, ibc.lightclients.solomachine.v2.SignBytes](_l) {
    def sequence: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.sequence)((c_, f_) => c_.copy(sequence = f_))
    def timestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.timestamp)((c_, f_) => c_.copy(timestamp = f_))
    def diversifier: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.diversifier)((c_, f_) => c_.copy(diversifier = f_))
    def dataType: _root_.scalapb.lenses.Lens[UpperPB, ibc.lightclients.solomachine.v2.DataType] = field(_.dataType)((c_, f_) => c_.copy(dataType = f_))
    def data: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.data)((c_, f_) => c_.copy(data = f_))
  }
  final val SEQUENCE_FIELD_NUMBER = 1
  final val TIMESTAMP_FIELD_NUMBER = 2
  final val DIVERSIFIER_FIELD_NUMBER = 3
  final val DATA_TYPE_FIELD_NUMBER = 4
  final val DATA_FIELD_NUMBER = 5
  def of(
    sequence: _root_.scala.Long,
    timestamp: _root_.scala.Long,
    diversifier: _root_.scala.Predef.String,
    dataType: ibc.lightclients.solomachine.v2.DataType,
    data: _root_.com.google.protobuf.ByteString
  ): _root_.ibc.lightclients.solomachine.v2.SignBytes = _root_.ibc.lightclients.solomachine.v2.SignBytes(
    sequence,
    timestamp,
    diversifier,
    dataType,
    data
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[ibc.lightclients.solomachine.v2.SignBytes])
}
