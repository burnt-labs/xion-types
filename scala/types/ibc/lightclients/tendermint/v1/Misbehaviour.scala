// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package ibc.lightclients.tendermint.v1

/** Misbehaviour is a wrapper over two conflicting Headers
  * that implements Misbehaviour interface expected by ICS-02
  *
  * @param clientId
  *   ClientID is deprecated
  */
@SerialVersionUID(0L)
final case class Misbehaviour(
    @scala.deprecated(message="Marked as deprecated in proto file", "") clientId: _root_.scala.Predef.String = "",
    header1: _root_.scala.Option[ibc.lightclients.tendermint.v1.Header] = _root_.scala.None,
    header2: _root_.scala.Option[ibc.lightclients.tendermint.v1.Header] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Misbehaviour] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = clientId
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      if (header1.isDefined) {
        val __value = header1.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (header2.isDefined) {
        val __value = header2.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = clientId
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      header1.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      header2.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withClientId(__v: _root_.scala.Predef.String): Misbehaviour = copy(clientId = __v)
    def getHeader1: ibc.lightclients.tendermint.v1.Header = header1.getOrElse(ibc.lightclients.tendermint.v1.Header.defaultInstance)
    def clearHeader1: Misbehaviour = copy(header1 = _root_.scala.None)
    def withHeader1(__v: ibc.lightclients.tendermint.v1.Header): Misbehaviour = copy(header1 = Option(__v))
    def getHeader2: ibc.lightclients.tendermint.v1.Header = header2.getOrElse(ibc.lightclients.tendermint.v1.Header.defaultInstance)
    def clearHeader2: Misbehaviour = copy(header2 = _root_.scala.None)
    def withHeader2(__v: ibc.lightclients.tendermint.v1.Header): Misbehaviour = copy(header2 = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = clientId
          if (__t != "") __t else null
        }
        case 2 => header1.orNull
        case 3 => header2.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(clientId)
        case 2 => header1.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => header2.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: ibc.lightclients.tendermint.v1.Misbehaviour.type = ibc.lightclients.tendermint.v1.Misbehaviour
    // @@protoc_insertion_point(GeneratedMessage[ibc.lightclients.tendermint.v1.Misbehaviour])
}

object Misbehaviour extends scalapb.GeneratedMessageCompanion[ibc.lightclients.tendermint.v1.Misbehaviour] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[ibc.lightclients.tendermint.v1.Misbehaviour] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): ibc.lightclients.tendermint.v1.Misbehaviour = {
    var __clientId: _root_.scala.Predef.String = ""
    var __header1: _root_.scala.Option[ibc.lightclients.tendermint.v1.Header] = _root_.scala.None
    var __header2: _root_.scala.Option[ibc.lightclients.tendermint.v1.Header] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __clientId = _input__.readStringRequireUtf8()
        case 18 =>
          __header1 = _root_.scala.Option(__header1.fold(_root_.scalapb.LiteParser.readMessage[ibc.lightclients.tendermint.v1.Header](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __header2 = _root_.scala.Option(__header2.fold(_root_.scalapb.LiteParser.readMessage[ibc.lightclients.tendermint.v1.Header](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    ibc.lightclients.tendermint.v1.Misbehaviour(
        clientId = __clientId,
        header1 = __header1,
        header2 = __header2,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[ibc.lightclients.tendermint.v1.Misbehaviour] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      ibc.lightclients.tendermint.v1.Misbehaviour(
        clientId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        header1 = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[ibc.lightclients.tendermint.v1.Header]]),
        header2 = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[ibc.lightclients.tendermint.v1.Header]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ibc.lightclients.tendermint.v1.TendermintProto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ibc.lightclients.tendermint.v1.TendermintProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = ibc.lightclients.tendermint.v1.Header
      case 3 => __out = ibc.lightclients.tendermint.v1.Header
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = ibc.lightclients.tendermint.v1.Misbehaviour(
    clientId = "",
    header1 = _root_.scala.None,
    header2 = _root_.scala.None
  )
  implicit class MisbehaviourLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, ibc.lightclients.tendermint.v1.Misbehaviour]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, ibc.lightclients.tendermint.v1.Misbehaviour](_l) {
    def clientId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.clientId)((c_, f_) => c_.copy(clientId = f_))
    def header1: _root_.scalapb.lenses.Lens[UpperPB, ibc.lightclients.tendermint.v1.Header] = field(_.getHeader1)((c_, f_) => c_.copy(header1 = _root_.scala.Option(f_)))
    def optionalHeader1: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[ibc.lightclients.tendermint.v1.Header]] = field(_.header1)((c_, f_) => c_.copy(header1 = f_))
    def header2: _root_.scalapb.lenses.Lens[UpperPB, ibc.lightclients.tendermint.v1.Header] = field(_.getHeader2)((c_, f_) => c_.copy(header2 = _root_.scala.Option(f_)))
    def optionalHeader2: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[ibc.lightclients.tendermint.v1.Header]] = field(_.header2)((c_, f_) => c_.copy(header2 = f_))
  }
  final val CLIENT_ID_FIELD_NUMBER = 1
  final val HEADER_1_FIELD_NUMBER = 2
  final val HEADER_2_FIELD_NUMBER = 3
  def of(
    clientId: _root_.scala.Predef.String,
    header1: _root_.scala.Option[ibc.lightclients.tendermint.v1.Header],
    header2: _root_.scala.Option[ibc.lightclients.tendermint.v1.Header]
  ): _root_.ibc.lightclients.tendermint.v1.Misbehaviour = _root_.ibc.lightclients.tendermint.v1.Misbehaviour(
    clientId,
    header1,
    header2
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[ibc.lightclients.tendermint.v1.Misbehaviour])
}
