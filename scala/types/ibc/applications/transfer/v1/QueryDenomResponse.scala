// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package ibc.applications.transfer.v1

/** QueryDenomResponse is the response type for the Query/Denom RPC
  * method.
  *
  * @param denom
  *   denom returns the requested denomination.
  */
@SerialVersionUID(0L)
final case class QueryDenomResponse(
    denom: _root_.scala.Option[ibc.applications.transfer.v1.Denom] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[QueryDenomResponse] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (denom.isDefined) {
        val __value = denom.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      denom.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getDenom: ibc.applications.transfer.v1.Denom = denom.getOrElse(ibc.applications.transfer.v1.Denom.defaultInstance)
    def clearDenom: QueryDenomResponse = copy(denom = _root_.scala.None)
    def withDenom(__v: ibc.applications.transfer.v1.Denom): QueryDenomResponse = copy(denom = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => denom.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => denom.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: ibc.applications.transfer.v1.QueryDenomResponse.type = ibc.applications.transfer.v1.QueryDenomResponse
    // @@protoc_insertion_point(GeneratedMessage[ibc.applications.transfer.v1.QueryDenomResponse])
}

object QueryDenomResponse extends scalapb.GeneratedMessageCompanion[ibc.applications.transfer.v1.QueryDenomResponse] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[ibc.applications.transfer.v1.QueryDenomResponse] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): ibc.applications.transfer.v1.QueryDenomResponse = {
    var __denom: _root_.scala.Option[ibc.applications.transfer.v1.Denom] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __denom = _root_.scala.Option(__denom.fold(_root_.scalapb.LiteParser.readMessage[ibc.applications.transfer.v1.Denom](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    ibc.applications.transfer.v1.QueryDenomResponse(
        denom = __denom,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[ibc.applications.transfer.v1.QueryDenomResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      ibc.applications.transfer.v1.QueryDenomResponse(
        denom = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[ibc.applications.transfer.v1.Denom]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ibc.applications.transfer.v1.QueryProto.javaDescriptor.getMessageTypes().get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ibc.applications.transfer.v1.QueryProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = ibc.applications.transfer.v1.Denom
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = ibc.applications.transfer.v1.QueryDenomResponse(
    denom = _root_.scala.None
  )
  implicit class QueryDenomResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, ibc.applications.transfer.v1.QueryDenomResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, ibc.applications.transfer.v1.QueryDenomResponse](_l) {
    def denom: _root_.scalapb.lenses.Lens[UpperPB, ibc.applications.transfer.v1.Denom] = field(_.getDenom)((c_, f_) => c_.copy(denom = _root_.scala.Option(f_)))
    def optionalDenom: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[ibc.applications.transfer.v1.Denom]] = field(_.denom)((c_, f_) => c_.copy(denom = f_))
  }
  final val DENOM_FIELD_NUMBER = 1
  def of(
    denom: _root_.scala.Option[ibc.applications.transfer.v1.Denom]
  ): _root_.ibc.applications.transfer.v1.QueryDenomResponse = _root_.ibc.applications.transfer.v1.QueryDenomResponse(
    denom
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[ibc.applications.transfer.v1.QueryDenomResponse])
}
