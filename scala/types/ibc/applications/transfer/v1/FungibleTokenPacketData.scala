// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package ibc.applications.transfer.v1

/** FungibleTokenPacketData defines a struct for the packet payload
  * See FungibleTokenPacketData spec:
  * https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures
  *
  * @param denom
  *   the token denomination to be transferred
  * @param amount
  *   the token amount to be transferred
  * @param sender
  *   the sender address
  * @param receiver
  *   the recipient address on the destination chain
  * @param memo
  *   optional memo
  */
@SerialVersionUID(0L)
final case class FungibleTokenPacketData(
    denom: _root_.scala.Predef.String = "",
    amount: _root_.scala.Predef.String = "",
    sender: _root_.scala.Predef.String = "",
    receiver: _root_.scala.Predef.String = "",
    memo: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[FungibleTokenPacketData] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = denom
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = amount
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = sender
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = receiver
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = memo
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = denom
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = amount
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = sender
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = receiver
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = memo
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withDenom(__v: _root_.scala.Predef.String): FungibleTokenPacketData = copy(denom = __v)
    def withAmount(__v: _root_.scala.Predef.String): FungibleTokenPacketData = copy(amount = __v)
    def withSender(__v: _root_.scala.Predef.String): FungibleTokenPacketData = copy(sender = __v)
    def withReceiver(__v: _root_.scala.Predef.String): FungibleTokenPacketData = copy(receiver = __v)
    def withMemo(__v: _root_.scala.Predef.String): FungibleTokenPacketData = copy(memo = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = denom
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = amount
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = sender
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = receiver
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = memo
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(denom)
        case 2 => _root_.scalapb.descriptors.PString(amount)
        case 3 => _root_.scalapb.descriptors.PString(sender)
        case 4 => _root_.scalapb.descriptors.PString(receiver)
        case 5 => _root_.scalapb.descriptors.PString(memo)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: ibc.applications.transfer.v1.FungibleTokenPacketData.type = ibc.applications.transfer.v1.FungibleTokenPacketData
    // @@protoc_insertion_point(GeneratedMessage[ibc.applications.transfer.v1.FungibleTokenPacketData])
}

object FungibleTokenPacketData extends scalapb.GeneratedMessageCompanion[ibc.applications.transfer.v1.FungibleTokenPacketData] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[ibc.applications.transfer.v1.FungibleTokenPacketData] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): ibc.applications.transfer.v1.FungibleTokenPacketData = {
    var __denom: _root_.scala.Predef.String = ""
    var __amount: _root_.scala.Predef.String = ""
    var __sender: _root_.scala.Predef.String = ""
    var __receiver: _root_.scala.Predef.String = ""
    var __memo: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __denom = _input__.readStringRequireUtf8()
        case 18 =>
          __amount = _input__.readStringRequireUtf8()
        case 26 =>
          __sender = _input__.readStringRequireUtf8()
        case 34 =>
          __receiver = _input__.readStringRequireUtf8()
        case 42 =>
          __memo = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    ibc.applications.transfer.v1.FungibleTokenPacketData(
        denom = __denom,
        amount = __amount,
        sender = __sender,
        receiver = __receiver,
        memo = __memo,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[ibc.applications.transfer.v1.FungibleTokenPacketData] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      ibc.applications.transfer.v1.FungibleTokenPacketData(
        denom = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        amount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        sender = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        receiver = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        memo = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ibc.applications.transfer.v1.PacketProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ibc.applications.transfer.v1.PacketProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = ibc.applications.transfer.v1.FungibleTokenPacketData(
    denom = "",
    amount = "",
    sender = "",
    receiver = "",
    memo = ""
  )
  implicit class FungibleTokenPacketDataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, ibc.applications.transfer.v1.FungibleTokenPacketData]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, ibc.applications.transfer.v1.FungibleTokenPacketData](_l) {
    def denom: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.denom)((c_, f_) => c_.copy(denom = f_))
    def amount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.amount)((c_, f_) => c_.copy(amount = f_))
    def sender: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.sender)((c_, f_) => c_.copy(sender = f_))
    def receiver: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.receiver)((c_, f_) => c_.copy(receiver = f_))
    def memo: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.memo)((c_, f_) => c_.copy(memo = f_))
  }
  final val DENOM_FIELD_NUMBER = 1
  final val AMOUNT_FIELD_NUMBER = 2
  final val SENDER_FIELD_NUMBER = 3
  final val RECEIVER_FIELD_NUMBER = 4
  final val MEMO_FIELD_NUMBER = 5
  def of(
    denom: _root_.scala.Predef.String,
    amount: _root_.scala.Predef.String,
    sender: _root_.scala.Predef.String,
    receiver: _root_.scala.Predef.String,
    memo: _root_.scala.Predef.String
  ): _root_.ibc.applications.transfer.v1.FungibleTokenPacketData = _root_.ibc.applications.transfer.v1.FungibleTokenPacketData(
    denom,
    amount,
    sender,
    receiver,
    memo
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[ibc.applications.transfer.v1.FungibleTokenPacketData])
}
