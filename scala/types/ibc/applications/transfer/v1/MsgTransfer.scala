// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package ibc.applications.transfer.v1

/** MsgTransfer defines a msg to transfer fungible tokens (i.e Coins) between
  * ICS20 enabled chains. See ICS Spec here:
  * https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures
  *
  * @param sourcePort
  *   the port on which the packet will be sent
  * @param sourceChannel
  *   the channel by which the packet will be sent
  * @param token
  *   token to be transferred
  * @param sender
  *   the sender address
  * @param receiver
  *   the recipient address on the destination chain
  * @param timeoutHeight
  *   Timeout height relative to the current block height.
  *   If you are sending with IBC v1 protocol, either timeout_height or timeout_timestamp must be set.
  *   If you are sending with IBC v2 protocol, timeout_timestamp must be set, and timeout_height must be omitted.
  * @param timeoutTimestamp
  *   Timeout timestamp in absolute nanoseconds since unix epoch.
  *   If you are sending with IBC v1 protocol, either timeout_height or timeout_timestamp must be set.
  *   If you are sending with IBC v2 protocol, timeout_timestamp must be set.
  * @param memo
  *   optional memo
  * @param encoding
  *   optional encoding
  */
@SerialVersionUID(0L)
final case class MsgTransfer(
    sourcePort: _root_.scala.Predef.String = "",
    sourceChannel: _root_.scala.Predef.String = "",
    token: _root_.scala.Option[cosmos.base.v1beta1.Coin] = _root_.scala.None,
    sender: _root_.scala.Predef.String = "",
    receiver: _root_.scala.Predef.String = "",
    timeoutHeight: _root_.scala.Option[ibc.core.client.v1.Height] = _root_.scala.None,
    timeoutTimestamp: _root_.scala.Long = 0L,
    memo: _root_.scala.Predef.String = "",
    encoding: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[MsgTransfer] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = sourcePort
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = sourceChannel
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      if (token.isDefined) {
        val __value = token.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = sender
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = receiver
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      if (timeoutHeight.isDefined) {
        val __value = timeoutHeight.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = timeoutTimestamp
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(7, __value)
        }
      };
      
      {
        val __value = memo
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, __value)
        }
      };
      
      {
        val __value = encoding
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = sourcePort
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = sourceChannel
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      token.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = sender
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = receiver
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      timeoutHeight.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = timeoutTimestamp
        if (__v != 0L) {
          _output__.writeUInt64(7, __v)
        }
      };
      {
        val __v = memo
        if (!__v.isEmpty) {
          _output__.writeString(8, __v)
        }
      };
      {
        val __v = encoding
        if (!__v.isEmpty) {
          _output__.writeString(9, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withSourcePort(__v: _root_.scala.Predef.String): MsgTransfer = copy(sourcePort = __v)
    def withSourceChannel(__v: _root_.scala.Predef.String): MsgTransfer = copy(sourceChannel = __v)
    def getToken: cosmos.base.v1beta1.Coin = token.getOrElse(cosmos.base.v1beta1.Coin.defaultInstance)
    def clearToken: MsgTransfer = copy(token = _root_.scala.None)
    def withToken(__v: cosmos.base.v1beta1.Coin): MsgTransfer = copy(token = Option(__v))
    def withSender(__v: _root_.scala.Predef.String): MsgTransfer = copy(sender = __v)
    def withReceiver(__v: _root_.scala.Predef.String): MsgTransfer = copy(receiver = __v)
    def getTimeoutHeight: ibc.core.client.v1.Height = timeoutHeight.getOrElse(ibc.core.client.v1.Height.defaultInstance)
    def clearTimeoutHeight: MsgTransfer = copy(timeoutHeight = _root_.scala.None)
    def withTimeoutHeight(__v: ibc.core.client.v1.Height): MsgTransfer = copy(timeoutHeight = Option(__v))
    def withTimeoutTimestamp(__v: _root_.scala.Long): MsgTransfer = copy(timeoutTimestamp = __v)
    def withMemo(__v: _root_.scala.Predef.String): MsgTransfer = copy(memo = __v)
    def withEncoding(__v: _root_.scala.Predef.String): MsgTransfer = copy(encoding = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = sourcePort
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = sourceChannel
          if (__t != "") __t else null
        }
        case 3 => token.orNull
        case 4 => {
          val __t = sender
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = receiver
          if (__t != "") __t else null
        }
        case 6 => timeoutHeight.orNull
        case 7 => {
          val __t = timeoutTimestamp
          if (__t != 0L) __t else null
        }
        case 8 => {
          val __t = memo
          if (__t != "") __t else null
        }
        case 9 => {
          val __t = encoding
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(sourcePort)
        case 2 => _root_.scalapb.descriptors.PString(sourceChannel)
        case 3 => token.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PString(sender)
        case 5 => _root_.scalapb.descriptors.PString(receiver)
        case 6 => timeoutHeight.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => _root_.scalapb.descriptors.PLong(timeoutTimestamp)
        case 8 => _root_.scalapb.descriptors.PString(memo)
        case 9 => _root_.scalapb.descriptors.PString(encoding)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: ibc.applications.transfer.v1.MsgTransfer.type = ibc.applications.transfer.v1.MsgTransfer
    // @@protoc_insertion_point(GeneratedMessage[ibc.applications.transfer.v1.MsgTransfer])
}

object MsgTransfer extends scalapb.GeneratedMessageCompanion[ibc.applications.transfer.v1.MsgTransfer] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[ibc.applications.transfer.v1.MsgTransfer] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): ibc.applications.transfer.v1.MsgTransfer = {
    var __sourcePort: _root_.scala.Predef.String = ""
    var __sourceChannel: _root_.scala.Predef.String = ""
    var __token: _root_.scala.Option[cosmos.base.v1beta1.Coin] = _root_.scala.None
    var __sender: _root_.scala.Predef.String = ""
    var __receiver: _root_.scala.Predef.String = ""
    var __timeoutHeight: _root_.scala.Option[ibc.core.client.v1.Height] = _root_.scala.None
    var __timeoutTimestamp: _root_.scala.Long = 0L
    var __memo: _root_.scala.Predef.String = ""
    var __encoding: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __sourcePort = _input__.readStringRequireUtf8()
        case 18 =>
          __sourceChannel = _input__.readStringRequireUtf8()
        case 26 =>
          __token = _root_.scala.Option(__token.fold(_root_.scalapb.LiteParser.readMessage[cosmos.base.v1beta1.Coin](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __sender = _input__.readStringRequireUtf8()
        case 42 =>
          __receiver = _input__.readStringRequireUtf8()
        case 50 =>
          __timeoutHeight = _root_.scala.Option(__timeoutHeight.fold(_root_.scalapb.LiteParser.readMessage[ibc.core.client.v1.Height](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 56 =>
          __timeoutTimestamp = _input__.readUInt64()
        case 66 =>
          __memo = _input__.readStringRequireUtf8()
        case 74 =>
          __encoding = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    ibc.applications.transfer.v1.MsgTransfer(
        sourcePort = __sourcePort,
        sourceChannel = __sourceChannel,
        token = __token,
        sender = __sender,
        receiver = __receiver,
        timeoutHeight = __timeoutHeight,
        timeoutTimestamp = __timeoutTimestamp,
        memo = __memo,
        encoding = __encoding,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[ibc.applications.transfer.v1.MsgTransfer] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      ibc.applications.transfer.v1.MsgTransfer(
        sourcePort = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        sourceChannel = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        token = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[cosmos.base.v1beta1.Coin]]),
        sender = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        receiver = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        timeoutHeight = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[ibc.core.client.v1.Height]]),
        timeoutTimestamp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        memo = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        encoding = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ibc.applications.transfer.v1.TxProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ibc.applications.transfer.v1.TxProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = cosmos.base.v1beta1.Coin
      case 6 => __out = ibc.core.client.v1.Height
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = ibc.applications.transfer.v1.MsgTransfer(
    sourcePort = "",
    sourceChannel = "",
    token = _root_.scala.None,
    sender = "",
    receiver = "",
    timeoutHeight = _root_.scala.None,
    timeoutTimestamp = 0L,
    memo = "",
    encoding = ""
  )
  implicit class MsgTransferLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, ibc.applications.transfer.v1.MsgTransfer]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, ibc.applications.transfer.v1.MsgTransfer](_l) {
    def sourcePort: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.sourcePort)((c_, f_) => c_.copy(sourcePort = f_))
    def sourceChannel: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.sourceChannel)((c_, f_) => c_.copy(sourceChannel = f_))
    def token: _root_.scalapb.lenses.Lens[UpperPB, cosmos.base.v1beta1.Coin] = field(_.getToken)((c_, f_) => c_.copy(token = _root_.scala.Option(f_)))
    def optionalToken: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[cosmos.base.v1beta1.Coin]] = field(_.token)((c_, f_) => c_.copy(token = f_))
    def sender: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.sender)((c_, f_) => c_.copy(sender = f_))
    def receiver: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.receiver)((c_, f_) => c_.copy(receiver = f_))
    def timeoutHeight: _root_.scalapb.lenses.Lens[UpperPB, ibc.core.client.v1.Height] = field(_.getTimeoutHeight)((c_, f_) => c_.copy(timeoutHeight = _root_.scala.Option(f_)))
    def optionalTimeoutHeight: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[ibc.core.client.v1.Height]] = field(_.timeoutHeight)((c_, f_) => c_.copy(timeoutHeight = f_))
    def timeoutTimestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.timeoutTimestamp)((c_, f_) => c_.copy(timeoutTimestamp = f_))
    def memo: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.memo)((c_, f_) => c_.copy(memo = f_))
    def encoding: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.encoding)((c_, f_) => c_.copy(encoding = f_))
  }
  final val SOURCE_PORT_FIELD_NUMBER = 1
  final val SOURCE_CHANNEL_FIELD_NUMBER = 2
  final val TOKEN_FIELD_NUMBER = 3
  final val SENDER_FIELD_NUMBER = 4
  final val RECEIVER_FIELD_NUMBER = 5
  final val TIMEOUT_HEIGHT_FIELD_NUMBER = 6
  final val TIMEOUT_TIMESTAMP_FIELD_NUMBER = 7
  final val MEMO_FIELD_NUMBER = 8
  final val ENCODING_FIELD_NUMBER = 9
  def of(
    sourcePort: _root_.scala.Predef.String,
    sourceChannel: _root_.scala.Predef.String,
    token: _root_.scala.Option[cosmos.base.v1beta1.Coin],
    sender: _root_.scala.Predef.String,
    receiver: _root_.scala.Predef.String,
    timeoutHeight: _root_.scala.Option[ibc.core.client.v1.Height],
    timeoutTimestamp: _root_.scala.Long,
    memo: _root_.scala.Predef.String,
    encoding: _root_.scala.Predef.String
  ): _root_.ibc.applications.transfer.v1.MsgTransfer = _root_.ibc.applications.transfer.v1.MsgTransfer(
    sourcePort,
    sourceChannel,
    token,
    sender,
    receiver,
    timeoutHeight,
    timeoutTimestamp,
    memo,
    encoding
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[ibc.applications.transfer.v1.MsgTransfer])
}
