// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package ibc.applications.transfer.v1

/** Allocation defines the spend limit for a particular port and channel
  *
  * @param sourcePort
  *   the port on which the packet will be sent
  * @param sourceChannel
  *   the channel by which the packet will be sent
  * @param spendLimit
  *   spend limitation on the channel
  * @param allowList
  *   allow list of receivers, an empty allow list permits any receiver address
  * @param allowedPacketData
  *   allow list of memo strings, an empty list prohibits all memo strings;
  *   a list only with "*" permits any memo string
  */
@SerialVersionUID(0L)
final case class Allocation(
    sourcePort: _root_.scala.Predef.String = "",
    sourceChannel: _root_.scala.Predef.String = "",
    spendLimit: _root_.scala.Seq[cosmos.base.v1beta1.Coin] = _root_.scala.Seq.empty,
    allowList: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    allowedPacketData: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Allocation] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = sourcePort
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = sourceChannel
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      spendLimit.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      allowList.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
      }
      allowedPacketData.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = sourcePort
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = sourceChannel
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      spendLimit.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      allowList.foreach { __v =>
        val __m = __v
        _output__.writeString(4, __m)
      };
      allowedPacketData.foreach { __v =>
        val __m = __v
        _output__.writeString(5, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def withSourcePort(__v: _root_.scala.Predef.String): Allocation = copy(sourcePort = __v)
    def withSourceChannel(__v: _root_.scala.Predef.String): Allocation = copy(sourceChannel = __v)
    def clearSpendLimit = copy(spendLimit = _root_.scala.Seq.empty)
    def addSpendLimit(__vs: cosmos.base.v1beta1.Coin *): Allocation = addAllSpendLimit(__vs)
    def addAllSpendLimit(__vs: Iterable[cosmos.base.v1beta1.Coin]): Allocation = copy(spendLimit = spendLimit ++ __vs)
    def withSpendLimit(__v: _root_.scala.Seq[cosmos.base.v1beta1.Coin]): Allocation = copy(spendLimit = __v)
    def clearAllowList = copy(allowList = _root_.scala.Seq.empty)
    def addAllowList(__vs: _root_.scala.Predef.String *): Allocation = addAllAllowList(__vs)
    def addAllAllowList(__vs: Iterable[_root_.scala.Predef.String]): Allocation = copy(allowList = allowList ++ __vs)
    def withAllowList(__v: _root_.scala.Seq[_root_.scala.Predef.String]): Allocation = copy(allowList = __v)
    def clearAllowedPacketData = copy(allowedPacketData = _root_.scala.Seq.empty)
    def addAllowedPacketData(__vs: _root_.scala.Predef.String *): Allocation = addAllAllowedPacketData(__vs)
    def addAllAllowedPacketData(__vs: Iterable[_root_.scala.Predef.String]): Allocation = copy(allowedPacketData = allowedPacketData ++ __vs)
    def withAllowedPacketData(__v: _root_.scala.Seq[_root_.scala.Predef.String]): Allocation = copy(allowedPacketData = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = sourcePort
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = sourceChannel
          if (__t != "") __t else null
        }
        case 3 => spendLimit
        case 4 => allowList
        case 5 => allowedPacketData
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(sourcePort)
        case 2 => _root_.scalapb.descriptors.PString(sourceChannel)
        case 3 => _root_.scalapb.descriptors.PRepeated(spendLimit.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(allowList.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 5 => _root_.scalapb.descriptors.PRepeated(allowedPacketData.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: ibc.applications.transfer.v1.Allocation.type = ibc.applications.transfer.v1.Allocation
    // @@protoc_insertion_point(GeneratedMessage[ibc.applications.transfer.v1.Allocation])
}

object Allocation extends scalapb.GeneratedMessageCompanion[ibc.applications.transfer.v1.Allocation] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[ibc.applications.transfer.v1.Allocation] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): ibc.applications.transfer.v1.Allocation = {
    var __sourcePort: _root_.scala.Predef.String = ""
    var __sourceChannel: _root_.scala.Predef.String = ""
    val __spendLimit: _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.Coin] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.Coin]
    val __allowList: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __allowedPacketData: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __sourcePort = _input__.readStringRequireUtf8()
        case 18 =>
          __sourceChannel = _input__.readStringRequireUtf8()
        case 26 =>
          __spendLimit += _root_.scalapb.LiteParser.readMessage[cosmos.base.v1beta1.Coin](_input__)
        case 34 =>
          __allowList += _input__.readStringRequireUtf8()
        case 42 =>
          __allowedPacketData += _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    ibc.applications.transfer.v1.Allocation(
        sourcePort = __sourcePort,
        sourceChannel = __sourceChannel,
        spendLimit = __spendLimit.result(),
        allowList = __allowList.result(),
        allowedPacketData = __allowedPacketData.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[ibc.applications.transfer.v1.Allocation] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      ibc.applications.transfer.v1.Allocation(
        sourcePort = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        sourceChannel = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        spendLimit = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[cosmos.base.v1beta1.Coin]]).getOrElse(_root_.scala.Seq.empty),
        allowList = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        allowedPacketData = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ibc.applications.transfer.v1.AuthzProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ibc.applications.transfer.v1.AuthzProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = cosmos.base.v1beta1.Coin
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = ibc.applications.transfer.v1.Allocation(
    sourcePort = "",
    sourceChannel = "",
    spendLimit = _root_.scala.Seq.empty,
    allowList = _root_.scala.Seq.empty,
    allowedPacketData = _root_.scala.Seq.empty
  )
  implicit class AllocationLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, ibc.applications.transfer.v1.Allocation]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, ibc.applications.transfer.v1.Allocation](_l) {
    def sourcePort: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.sourcePort)((c_, f_) => c_.copy(sourcePort = f_))
    def sourceChannel: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.sourceChannel)((c_, f_) => c_.copy(sourceChannel = f_))
    def spendLimit: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.base.v1beta1.Coin]] = field(_.spendLimit)((c_, f_) => c_.copy(spendLimit = f_))
    def allowList: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.allowList)((c_, f_) => c_.copy(allowList = f_))
    def allowedPacketData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.allowedPacketData)((c_, f_) => c_.copy(allowedPacketData = f_))
  }
  final val SOURCE_PORT_FIELD_NUMBER = 1
  final val SOURCE_CHANNEL_FIELD_NUMBER = 2
  final val SPEND_LIMIT_FIELD_NUMBER = 3
  final val ALLOW_LIST_FIELD_NUMBER = 4
  final val ALLOWED_PACKET_DATA_FIELD_NUMBER = 5
  def of(
    sourcePort: _root_.scala.Predef.String,
    sourceChannel: _root_.scala.Predef.String,
    spendLimit: _root_.scala.Seq[cosmos.base.v1beta1.Coin],
    allowList: _root_.scala.Seq[_root_.scala.Predef.String],
    allowedPacketData: _root_.scala.Seq[_root_.scala.Predef.String]
  ): _root_.ibc.applications.transfer.v1.Allocation = _root_.ibc.applications.transfer.v1.Allocation(
    sourcePort,
    sourceChannel,
    spendLimit,
    allowList,
    allowedPacketData
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[ibc.applications.transfer.v1.Allocation])
}
