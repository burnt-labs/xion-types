// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package ibc.applications.interchain_accounts.genesis.v1

/** ControllerGenesisState defines the interchain accounts controller genesis state
  */
@SerialVersionUID(0L)
final case class ControllerGenesisState(
    activeChannels: _root_.scala.Seq[ibc.applications.interchain_accounts.genesis.v1.ActiveChannel] = _root_.scala.Seq.empty,
    interchainAccounts: _root_.scala.Seq[ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount] = _root_.scala.Seq.empty,
    ports: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    params: _root_.scala.Option[ibc.applications.interchain_accounts.controller.v1.Params] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ControllerGenesisState] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      activeChannels.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      interchainAccounts.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      ports.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      }
      if (params.isDefined) {
        val __value = params.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      activeChannels.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      interchainAccounts.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      ports.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
      params.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def clearActiveChannels = copy(activeChannels = _root_.scala.Seq.empty)
    def addActiveChannels(__vs: ibc.applications.interchain_accounts.genesis.v1.ActiveChannel *): ControllerGenesisState = addAllActiveChannels(__vs)
    def addAllActiveChannels(__vs: Iterable[ibc.applications.interchain_accounts.genesis.v1.ActiveChannel]): ControllerGenesisState = copy(activeChannels = activeChannels ++ __vs)
    def withActiveChannels(__v: _root_.scala.Seq[ibc.applications.interchain_accounts.genesis.v1.ActiveChannel]): ControllerGenesisState = copy(activeChannels = __v)
    def clearInterchainAccounts = copy(interchainAccounts = _root_.scala.Seq.empty)
    def addInterchainAccounts(__vs: ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount *): ControllerGenesisState = addAllInterchainAccounts(__vs)
    def addAllInterchainAccounts(__vs: Iterable[ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount]): ControllerGenesisState = copy(interchainAccounts = interchainAccounts ++ __vs)
    def withInterchainAccounts(__v: _root_.scala.Seq[ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount]): ControllerGenesisState = copy(interchainAccounts = __v)
    def clearPorts = copy(ports = _root_.scala.Seq.empty)
    def addPorts(__vs: _root_.scala.Predef.String *): ControllerGenesisState = addAllPorts(__vs)
    def addAllPorts(__vs: Iterable[_root_.scala.Predef.String]): ControllerGenesisState = copy(ports = ports ++ __vs)
    def withPorts(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ControllerGenesisState = copy(ports = __v)
    def getParams: ibc.applications.interchain_accounts.controller.v1.Params = params.getOrElse(ibc.applications.interchain_accounts.controller.v1.Params.defaultInstance)
    def clearParams: ControllerGenesisState = copy(params = _root_.scala.None)
    def withParams(__v: ibc.applications.interchain_accounts.controller.v1.Params): ControllerGenesisState = copy(params = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => activeChannels
        case 2 => interchainAccounts
        case 3 => ports
        case 4 => params.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(activeChannels.iterator.map(_.toPMessage).toVector)
        case 2 => _root_.scalapb.descriptors.PRepeated(interchainAccounts.iterator.map(_.toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PRepeated(ports.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 4 => params.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.type = ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState
    // @@protoc_insertion_point(GeneratedMessage[ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState])
}

object ControllerGenesisState extends scalapb.GeneratedMessageCompanion[ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState = {
    val __activeChannels: _root_.scala.collection.immutable.VectorBuilder[ibc.applications.interchain_accounts.genesis.v1.ActiveChannel] = new _root_.scala.collection.immutable.VectorBuilder[ibc.applications.interchain_accounts.genesis.v1.ActiveChannel]
    val __interchainAccounts: _root_.scala.collection.immutable.VectorBuilder[ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount] = new _root_.scala.collection.immutable.VectorBuilder[ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount]
    val __ports: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var __params: _root_.scala.Option[ibc.applications.interchain_accounts.controller.v1.Params] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __activeChannels += _root_.scalapb.LiteParser.readMessage[ibc.applications.interchain_accounts.genesis.v1.ActiveChannel](_input__)
        case 18 =>
          __interchainAccounts += _root_.scalapb.LiteParser.readMessage[ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount](_input__)
        case 26 =>
          __ports += _input__.readStringRequireUtf8()
        case 34 =>
          __params = _root_.scala.Option(__params.fold(_root_.scalapb.LiteParser.readMessage[ibc.applications.interchain_accounts.controller.v1.Params](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState(
        activeChannels = __activeChannels.result(),
        interchainAccounts = __interchainAccounts.result(),
        ports = __ports.result(),
        params = __params,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState(
        activeChannels = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[ibc.applications.interchain_accounts.genesis.v1.ActiveChannel]]).getOrElse(_root_.scala.Seq.empty),
        interchainAccounts = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount]]).getOrElse(_root_.scala.Seq.empty),
        ports = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        params = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[ibc.applications.interchain_accounts.controller.v1.Params]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ibc.applications.interchain_accounts.genesis.v1.GenesisProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ibc.applications.interchain_accounts.genesis.v1.GenesisProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = ibc.applications.interchain_accounts.genesis.v1.ActiveChannel
      case 2 => __out = ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount
      case 4 => __out = ibc.applications.interchain_accounts.controller.v1.Params
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState(
    activeChannels = _root_.scala.Seq.empty,
    interchainAccounts = _root_.scala.Seq.empty,
    ports = _root_.scala.Seq.empty,
    params = _root_.scala.None
  )
  implicit class ControllerGenesisStateLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState](_l) {
    def activeChannels: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[ibc.applications.interchain_accounts.genesis.v1.ActiveChannel]] = field(_.activeChannels)((c_, f_) => c_.copy(activeChannels = f_))
    def interchainAccounts: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount]] = field(_.interchainAccounts)((c_, f_) => c_.copy(interchainAccounts = f_))
    def ports: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.ports)((c_, f_) => c_.copy(ports = f_))
    def params: _root_.scalapb.lenses.Lens[UpperPB, ibc.applications.interchain_accounts.controller.v1.Params] = field(_.getParams)((c_, f_) => c_.copy(params = _root_.scala.Option(f_)))
    def optionalParams: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[ibc.applications.interchain_accounts.controller.v1.Params]] = field(_.params)((c_, f_) => c_.copy(params = f_))
  }
  final val ACTIVE_CHANNELS_FIELD_NUMBER = 1
  final val INTERCHAIN_ACCOUNTS_FIELD_NUMBER = 2
  final val PORTS_FIELD_NUMBER = 3
  final val PARAMS_FIELD_NUMBER = 4
  def of(
    activeChannels: _root_.scala.Seq[ibc.applications.interchain_accounts.genesis.v1.ActiveChannel],
    interchainAccounts: _root_.scala.Seq[ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount],
    ports: _root_.scala.Seq[_root_.scala.Predef.String],
    params: _root_.scala.Option[ibc.applications.interchain_accounts.controller.v1.Params]
  ): _root_.ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState = _root_.ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState(
    activeChannels,
    interchainAccounts,
    ports,
    params
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState])
}
