// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package ibc.core.commitment.v2

/** MerklePath is the path used to verify commitment proofs, which can be an
  * arbitrary structured object (defined by a commitment type).
  * ICS-23 verification supports membership proofs for nested merkle trees.
  * The ICS-24 standard provable keys MUST be stored in the lowest level tree with an optional prefix.
  * The IC24 provable tree may then be stored in a higher level tree(s) that hash up to the root hash
  * stored in the consensus state of the client.
  * Each element of the path represents the key of a merkle tree from the root to the leaf.
  * The elements of the path before the final element must be the path to the tree that contains
  * the ICS24 provable store. Thus, it should remain constant for all ICS24 proofs.
  * The final element of the path is the key of the leaf in the ICS24 provable store,
  * Thus IBC core will append the ICS24 path to the final element of the MerklePath
  * stored in the counterparty to create the full path to the leaf for proof verification.
  * Examples:
  * Cosmos SDK:
  * The Cosmos SDK commits to a multi-tree where each store is an IAVL tree and all store hashes
  * are hashed in a simple merkle tree to get the final root hash. Thus, the MerklePath in the counterparty
  * MerklePrefix has the following structure: ["ibc", ""]
  * The core IBC handler will append the ICS24 path to the final element of the MerklePath
  * like so: ["ibc", "{packetCommitmentPath}"] which will then be used for final verification.
  * Ethereum:
  * The Ethereum client commits to a single Patricia merkle trie. The ICS24 provable store is managed
  * by the smart contract state. Each smart contract has a specific prefix reserved within the global trie.
  * Thus the MerklePath in the counterparty is the prefix to the smart contract state in the global trie.
  * Since there is only one tree in the commitment structure of ethereum the MerklePath in the counterparty
  * MerklePrefix has the following structure: ["IBCCoreContractAddressStoragePrefix"]
  * The core IBC handler will append the ICS24 path to the final element of the MerklePath
  * like so: ["IBCCoreContractAddressStoragePrefix{packetCommitmentPath}"] which will then be used for final
  * verification. Thus the MerklePath in the counterparty MerklePrefix is the nested key path from the root hash of the
  * consensus state down to the ICS24 provable store. The IBC handler retrieves the counterparty key path to the ICS24
  * provable store from the MerklePath and appends the ICS24 path to get the final key path to the value being verified
  * by the client against the root hash in the client's consensus state.
  */
@SerialVersionUID(0L)
final case class MerklePath(
    keyPath: _root_.scala.Seq[_root_.com.google.protobuf.ByteString] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[MerklePath] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      keyPath.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(1, __value)
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      keyPath.foreach { __v =>
        val __m = __v
        _output__.writeBytes(1, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def clearKeyPath = copy(keyPath = _root_.scala.Seq.empty)
    def addKeyPath(__vs: _root_.com.google.protobuf.ByteString *): MerklePath = addAllKeyPath(__vs)
    def addAllKeyPath(__vs: Iterable[_root_.com.google.protobuf.ByteString]): MerklePath = copy(keyPath = keyPath ++ __vs)
    def withKeyPath(__v: _root_.scala.Seq[_root_.com.google.protobuf.ByteString]): MerklePath = copy(keyPath = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => keyPath
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(keyPath.iterator.map(_root_.scalapb.descriptors.PByteString(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: ibc.core.commitment.v2.MerklePath.type = ibc.core.commitment.v2.MerklePath
    // @@protoc_insertion_point(GeneratedMessage[ibc.core.commitment.v2.MerklePath])
}

object MerklePath extends scalapb.GeneratedMessageCompanion[ibc.core.commitment.v2.MerklePath] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[ibc.core.commitment.v2.MerklePath] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): ibc.core.commitment.v2.MerklePath = {
    val __keyPath: _root_.scala.collection.immutable.VectorBuilder[_root_.com.google.protobuf.ByteString] = new _root_.scala.collection.immutable.VectorBuilder[_root_.com.google.protobuf.ByteString]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __keyPath += _input__.readBytes()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    ibc.core.commitment.v2.MerklePath(
        keyPath = __keyPath.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[ibc.core.commitment.v2.MerklePath] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      ibc.core.commitment.v2.MerklePath(
        keyPath = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[_root_.com.google.protobuf.ByteString]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ibc.core.commitment.v2.CommitmentProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ibc.core.commitment.v2.CommitmentProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = ibc.core.commitment.v2.MerklePath(
    keyPath = _root_.scala.Seq.empty
  )
  implicit class MerklePathLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, ibc.core.commitment.v2.MerklePath]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, ibc.core.commitment.v2.MerklePath](_l) {
    def keyPath: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.com.google.protobuf.ByteString]] = field(_.keyPath)((c_, f_) => c_.copy(keyPath = f_))
  }
  final val KEY_PATH_FIELD_NUMBER = 1
  def of(
    keyPath: _root_.scala.Seq[_root_.com.google.protobuf.ByteString]
  ): _root_.ibc.core.commitment.v2.MerklePath = _root_.ibc.core.commitment.v2.MerklePath(
    keyPath
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[ibc.core.commitment.v2.MerklePath])
}
