// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package ibc.core.channel.v2

/** Packet defines a type that carries data across different chains through IBC
  *
  * @param sequence
  *   number corresponds to the order of sends and receives, where a Packet
  *   with an earlier sequence number must be sent and received before a Packet
  *   with a later sequence number.
  * @param sourceClient
  *   identifies the sending client on the sending chain.
  * @param destinationClient
  *   identifies the receiving client on the receiving chain.
  * @param timeoutTimestamp
  *   timeout timestamp in seconds after which the packet times out.
  * @param payloads
  *   a list of payloads, each one for a specific application.
  */
@SerialVersionUID(0L)
final case class Packet(
    sequence: _root_.scala.Long = 0L,
    sourceClient: _root_.scala.Predef.String = "",
    destinationClient: _root_.scala.Predef.String = "",
    timeoutTimestamp: _root_.scala.Long = 0L,
    payloads: _root_.scala.Seq[ibc.core.channel.v2.Payload] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Packet] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = sequence
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(1, __value)
        }
      };
      
      {
        val __value = sourceClient
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = destinationClient
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = timeoutTimestamp
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(4, __value)
        }
      };
      payloads.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = sequence
        if (__v != 0L) {
          _output__.writeUInt64(1, __v)
        }
      };
      {
        val __v = sourceClient
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = destinationClient
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = timeoutTimestamp
        if (__v != 0L) {
          _output__.writeUInt64(4, __v)
        }
      };
      payloads.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withSequence(__v: _root_.scala.Long): Packet = copy(sequence = __v)
    def withSourceClient(__v: _root_.scala.Predef.String): Packet = copy(sourceClient = __v)
    def withDestinationClient(__v: _root_.scala.Predef.String): Packet = copy(destinationClient = __v)
    def withTimeoutTimestamp(__v: _root_.scala.Long): Packet = copy(timeoutTimestamp = __v)
    def clearPayloads = copy(payloads = _root_.scala.Seq.empty)
    def addPayloads(__vs: ibc.core.channel.v2.Payload *): Packet = addAllPayloads(__vs)
    def addAllPayloads(__vs: Iterable[ibc.core.channel.v2.Payload]): Packet = copy(payloads = payloads ++ __vs)
    def withPayloads(__v: _root_.scala.Seq[ibc.core.channel.v2.Payload]): Packet = copy(payloads = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = sequence
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = sourceClient
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = destinationClient
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = timeoutTimestamp
          if (__t != 0L) __t else null
        }
        case 5 => payloads
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(sequence)
        case 2 => _root_.scalapb.descriptors.PString(sourceClient)
        case 3 => _root_.scalapb.descriptors.PString(destinationClient)
        case 4 => _root_.scalapb.descriptors.PLong(timeoutTimestamp)
        case 5 => _root_.scalapb.descriptors.PRepeated(payloads.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: ibc.core.channel.v2.Packet.type = ibc.core.channel.v2.Packet
    // @@protoc_insertion_point(GeneratedMessage[ibc.core.channel.v2.Packet])
}

object Packet extends scalapb.GeneratedMessageCompanion[ibc.core.channel.v2.Packet] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[ibc.core.channel.v2.Packet] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): ibc.core.channel.v2.Packet = {
    var __sequence: _root_.scala.Long = 0L
    var __sourceClient: _root_.scala.Predef.String = ""
    var __destinationClient: _root_.scala.Predef.String = ""
    var __timeoutTimestamp: _root_.scala.Long = 0L
    val __payloads: _root_.scala.collection.immutable.VectorBuilder[ibc.core.channel.v2.Payload] = new _root_.scala.collection.immutable.VectorBuilder[ibc.core.channel.v2.Payload]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __sequence = _input__.readUInt64()
        case 18 =>
          __sourceClient = _input__.readStringRequireUtf8()
        case 26 =>
          __destinationClient = _input__.readStringRequireUtf8()
        case 32 =>
          __timeoutTimestamp = _input__.readUInt64()
        case 42 =>
          __payloads += _root_.scalapb.LiteParser.readMessage[ibc.core.channel.v2.Payload](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    ibc.core.channel.v2.Packet(
        sequence = __sequence,
        sourceClient = __sourceClient,
        destinationClient = __destinationClient,
        timeoutTimestamp = __timeoutTimestamp,
        payloads = __payloads.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[ibc.core.channel.v2.Packet] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      ibc.core.channel.v2.Packet(
        sequence = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        sourceClient = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        destinationClient = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        timeoutTimestamp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        payloads = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[ibc.core.channel.v2.Payload]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ibc.core.channel.v2.PacketProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ibc.core.channel.v2.PacketProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 5 => __out = ibc.core.channel.v2.Payload
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = ibc.core.channel.v2.Packet(
    sequence = 0L,
    sourceClient = "",
    destinationClient = "",
    timeoutTimestamp = 0L,
    payloads = _root_.scala.Seq.empty
  )
  implicit class PacketLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, ibc.core.channel.v2.Packet]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, ibc.core.channel.v2.Packet](_l) {
    def sequence: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.sequence)((c_, f_) => c_.copy(sequence = f_))
    def sourceClient: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.sourceClient)((c_, f_) => c_.copy(sourceClient = f_))
    def destinationClient: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.destinationClient)((c_, f_) => c_.copy(destinationClient = f_))
    def timeoutTimestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.timeoutTimestamp)((c_, f_) => c_.copy(timeoutTimestamp = f_))
    def payloads: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[ibc.core.channel.v2.Payload]] = field(_.payloads)((c_, f_) => c_.copy(payloads = f_))
  }
  final val SEQUENCE_FIELD_NUMBER = 1
  final val SOURCE_CLIENT_FIELD_NUMBER = 2
  final val DESTINATION_CLIENT_FIELD_NUMBER = 3
  final val TIMEOUT_TIMESTAMP_FIELD_NUMBER = 4
  final val PAYLOADS_FIELD_NUMBER = 5
  def of(
    sequence: _root_.scala.Long,
    sourceClient: _root_.scala.Predef.String,
    destinationClient: _root_.scala.Predef.String,
    timeoutTimestamp: _root_.scala.Long,
    payloads: _root_.scala.Seq[ibc.core.channel.v2.Payload]
  ): _root_.ibc.core.channel.v2.Packet = _root_.ibc.core.channel.v2.Packet(
    sequence,
    sourceClient,
    destinationClient,
    timeoutTimestamp,
    payloads
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[ibc.core.channel.v2.Packet])
}
