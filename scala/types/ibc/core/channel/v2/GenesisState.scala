// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package ibc.core.channel.v2

/** GenesisState defines the ibc channel/v2 submodule's genesis state.
  */
@SerialVersionUID(0L)
final case class GenesisState(
    acknowledgements: _root_.scala.Seq[ibc.core.channel.v2.PacketState] = _root_.scala.Seq.empty,
    commitments: _root_.scala.Seq[ibc.core.channel.v2.PacketState] = _root_.scala.Seq.empty,
    receipts: _root_.scala.Seq[ibc.core.channel.v2.PacketState] = _root_.scala.Seq.empty,
    asyncPackets: _root_.scala.Seq[ibc.core.channel.v2.PacketState] = _root_.scala.Seq.empty,
    sendSequences: _root_.scala.Seq[ibc.core.channel.v2.PacketSequence] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[GenesisState] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      acknowledgements.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      commitments.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      receipts.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      asyncPackets.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      sendSequences.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      acknowledgements.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      commitments.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      receipts.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      asyncPackets.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sendSequences.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def clearAcknowledgements = copy(acknowledgements = _root_.scala.Seq.empty)
    def addAcknowledgements(__vs: ibc.core.channel.v2.PacketState *): GenesisState = addAllAcknowledgements(__vs)
    def addAllAcknowledgements(__vs: Iterable[ibc.core.channel.v2.PacketState]): GenesisState = copy(acknowledgements = acknowledgements ++ __vs)
    def withAcknowledgements(__v: _root_.scala.Seq[ibc.core.channel.v2.PacketState]): GenesisState = copy(acknowledgements = __v)
    def clearCommitments = copy(commitments = _root_.scala.Seq.empty)
    def addCommitments(__vs: ibc.core.channel.v2.PacketState *): GenesisState = addAllCommitments(__vs)
    def addAllCommitments(__vs: Iterable[ibc.core.channel.v2.PacketState]): GenesisState = copy(commitments = commitments ++ __vs)
    def withCommitments(__v: _root_.scala.Seq[ibc.core.channel.v2.PacketState]): GenesisState = copy(commitments = __v)
    def clearReceipts = copy(receipts = _root_.scala.Seq.empty)
    def addReceipts(__vs: ibc.core.channel.v2.PacketState *): GenesisState = addAllReceipts(__vs)
    def addAllReceipts(__vs: Iterable[ibc.core.channel.v2.PacketState]): GenesisState = copy(receipts = receipts ++ __vs)
    def withReceipts(__v: _root_.scala.Seq[ibc.core.channel.v2.PacketState]): GenesisState = copy(receipts = __v)
    def clearAsyncPackets = copy(asyncPackets = _root_.scala.Seq.empty)
    def addAsyncPackets(__vs: ibc.core.channel.v2.PacketState *): GenesisState = addAllAsyncPackets(__vs)
    def addAllAsyncPackets(__vs: Iterable[ibc.core.channel.v2.PacketState]): GenesisState = copy(asyncPackets = asyncPackets ++ __vs)
    def withAsyncPackets(__v: _root_.scala.Seq[ibc.core.channel.v2.PacketState]): GenesisState = copy(asyncPackets = __v)
    def clearSendSequences = copy(sendSequences = _root_.scala.Seq.empty)
    def addSendSequences(__vs: ibc.core.channel.v2.PacketSequence *): GenesisState = addAllSendSequences(__vs)
    def addAllSendSequences(__vs: Iterable[ibc.core.channel.v2.PacketSequence]): GenesisState = copy(sendSequences = sendSequences ++ __vs)
    def withSendSequences(__v: _root_.scala.Seq[ibc.core.channel.v2.PacketSequence]): GenesisState = copy(sendSequences = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => acknowledgements
        case 3 => commitments
        case 4 => receipts
        case 5 => asyncPackets
        case 6 => sendSequences
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => _root_.scalapb.descriptors.PRepeated(acknowledgements.iterator.map(_.toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PRepeated(commitments.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(receipts.iterator.map(_.toPMessage).toVector)
        case 5 => _root_.scalapb.descriptors.PRepeated(asyncPackets.iterator.map(_.toPMessage).toVector)
        case 6 => _root_.scalapb.descriptors.PRepeated(sendSequences.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: ibc.core.channel.v2.GenesisState.type = ibc.core.channel.v2.GenesisState
    // @@protoc_insertion_point(GeneratedMessage[ibc.core.channel.v2.GenesisState])
}

object GenesisState extends scalapb.GeneratedMessageCompanion[ibc.core.channel.v2.GenesisState] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[ibc.core.channel.v2.GenesisState] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): ibc.core.channel.v2.GenesisState = {
    val __acknowledgements: _root_.scala.collection.immutable.VectorBuilder[ibc.core.channel.v2.PacketState] = new _root_.scala.collection.immutable.VectorBuilder[ibc.core.channel.v2.PacketState]
    val __commitments: _root_.scala.collection.immutable.VectorBuilder[ibc.core.channel.v2.PacketState] = new _root_.scala.collection.immutable.VectorBuilder[ibc.core.channel.v2.PacketState]
    val __receipts: _root_.scala.collection.immutable.VectorBuilder[ibc.core.channel.v2.PacketState] = new _root_.scala.collection.immutable.VectorBuilder[ibc.core.channel.v2.PacketState]
    val __asyncPackets: _root_.scala.collection.immutable.VectorBuilder[ibc.core.channel.v2.PacketState] = new _root_.scala.collection.immutable.VectorBuilder[ibc.core.channel.v2.PacketState]
    val __sendSequences: _root_.scala.collection.immutable.VectorBuilder[ibc.core.channel.v2.PacketSequence] = new _root_.scala.collection.immutable.VectorBuilder[ibc.core.channel.v2.PacketSequence]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 18 =>
          __acknowledgements += _root_.scalapb.LiteParser.readMessage[ibc.core.channel.v2.PacketState](_input__)
        case 26 =>
          __commitments += _root_.scalapb.LiteParser.readMessage[ibc.core.channel.v2.PacketState](_input__)
        case 34 =>
          __receipts += _root_.scalapb.LiteParser.readMessage[ibc.core.channel.v2.PacketState](_input__)
        case 42 =>
          __asyncPackets += _root_.scalapb.LiteParser.readMessage[ibc.core.channel.v2.PacketState](_input__)
        case 50 =>
          __sendSequences += _root_.scalapb.LiteParser.readMessage[ibc.core.channel.v2.PacketSequence](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    ibc.core.channel.v2.GenesisState(
        acknowledgements = __acknowledgements.result(),
        commitments = __commitments.result(),
        receipts = __receipts.result(),
        asyncPackets = __asyncPackets.result(),
        sendSequences = __sendSequences.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[ibc.core.channel.v2.GenesisState] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      ibc.core.channel.v2.GenesisState(
        acknowledgements = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[ibc.core.channel.v2.PacketState]]).getOrElse(_root_.scala.Seq.empty),
        commitments = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[ibc.core.channel.v2.PacketState]]).getOrElse(_root_.scala.Seq.empty),
        receipts = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[ibc.core.channel.v2.PacketState]]).getOrElse(_root_.scala.Seq.empty),
        asyncPackets = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[ibc.core.channel.v2.PacketState]]).getOrElse(_root_.scala.Seq.empty),
        sendSequences = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[ibc.core.channel.v2.PacketSequence]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ibc.core.channel.v2.GenesisProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ibc.core.channel.v2.GenesisProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = ibc.core.channel.v2.PacketState
      case 3 => __out = ibc.core.channel.v2.PacketState
      case 4 => __out = ibc.core.channel.v2.PacketState
      case 5 => __out = ibc.core.channel.v2.PacketState
      case 6 => __out = ibc.core.channel.v2.PacketSequence
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = ibc.core.channel.v2.GenesisState(
    acknowledgements = _root_.scala.Seq.empty,
    commitments = _root_.scala.Seq.empty,
    receipts = _root_.scala.Seq.empty,
    asyncPackets = _root_.scala.Seq.empty,
    sendSequences = _root_.scala.Seq.empty
  )
  implicit class GenesisStateLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, ibc.core.channel.v2.GenesisState]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, ibc.core.channel.v2.GenesisState](_l) {
    def acknowledgements: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[ibc.core.channel.v2.PacketState]] = field(_.acknowledgements)((c_, f_) => c_.copy(acknowledgements = f_))
    def commitments: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[ibc.core.channel.v2.PacketState]] = field(_.commitments)((c_, f_) => c_.copy(commitments = f_))
    def receipts: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[ibc.core.channel.v2.PacketState]] = field(_.receipts)((c_, f_) => c_.copy(receipts = f_))
    def asyncPackets: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[ibc.core.channel.v2.PacketState]] = field(_.asyncPackets)((c_, f_) => c_.copy(asyncPackets = f_))
    def sendSequences: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[ibc.core.channel.v2.PacketSequence]] = field(_.sendSequences)((c_, f_) => c_.copy(sendSequences = f_))
  }
  final val ACKNOWLEDGEMENTS_FIELD_NUMBER = 2
  final val COMMITMENTS_FIELD_NUMBER = 3
  final val RECEIPTS_FIELD_NUMBER = 4
  final val ASYNC_PACKETS_FIELD_NUMBER = 5
  final val SEND_SEQUENCES_FIELD_NUMBER = 6
  def of(
    acknowledgements: _root_.scala.Seq[ibc.core.channel.v2.PacketState],
    commitments: _root_.scala.Seq[ibc.core.channel.v2.PacketState],
    receipts: _root_.scala.Seq[ibc.core.channel.v2.PacketState],
    asyncPackets: _root_.scala.Seq[ibc.core.channel.v2.PacketState],
    sendSequences: _root_.scala.Seq[ibc.core.channel.v2.PacketSequence]
  ): _root_.ibc.core.channel.v2.GenesisState = _root_.ibc.core.channel.v2.GenesisState(
    acknowledgements,
    commitments,
    receipts,
    asyncPackets,
    sendSequences
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[ibc.core.channel.v2.GenesisState])
}
