// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package ibc.core.channel.v1

/** IdentifiedChannel defines a channel with additional port and channel
  * identifier fields.
  *
  * @param state
  *   current state of the channel end
  * @param ordering
  *   whether the channel is ordered or unordered
  * @param counterparty
  *   counterparty channel end
  * @param connectionHops
  *   list of connection identifiers, in order, along which packets sent on
  *   this channel will travel
  * @param version
  *   opaque channel version, which is agreed upon during the handshake
  * @param portId
  *   port identifier
  * @param channelId
  *   channel identifier
  */
@SerialVersionUID(0L)
final case class IdentifiedChannel(
    state: ibc.core.channel.v1.State = ibc.core.channel.v1.State.STATE_UNINITIALIZED_UNSPECIFIED,
    ordering: ibc.core.channel.v1.Order = ibc.core.channel.v1.Order.ORDER_NONE_UNSPECIFIED,
    counterparty: _root_.scala.Option[ibc.core.channel.v1.Counterparty] = _root_.scala.None,
    connectionHops: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    version: _root_.scala.Predef.String = "",
    portId: _root_.scala.Predef.String = "",
    channelId: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[IdentifiedChannel] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = state.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value)
        }
      };
      
      {
        val __value = ordering.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value)
        }
      };
      if (counterparty.isDefined) {
        val __value = counterparty.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      connectionHops.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
      }
      
      {
        val __value = version
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      
      {
        val __value = portId
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
        }
      };
      
      {
        val __value = channelId
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = state.value
        if (__v != 0) {
          _output__.writeEnum(1, __v)
        }
      };
      {
        val __v = ordering.value
        if (__v != 0) {
          _output__.writeEnum(2, __v)
        }
      };
      counterparty.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      connectionHops.foreach { __v =>
        val __m = __v
        _output__.writeString(4, __m)
      };
      {
        val __v = version
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = portId
        if (!__v.isEmpty) {
          _output__.writeString(6, __v)
        }
      };
      {
        val __v = channelId
        if (!__v.isEmpty) {
          _output__.writeString(7, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withState(__v: ibc.core.channel.v1.State): IdentifiedChannel = copy(state = __v)
    def withOrdering(__v: ibc.core.channel.v1.Order): IdentifiedChannel = copy(ordering = __v)
    def getCounterparty: ibc.core.channel.v1.Counterparty = counterparty.getOrElse(ibc.core.channel.v1.Counterparty.defaultInstance)
    def clearCounterparty: IdentifiedChannel = copy(counterparty = _root_.scala.None)
    def withCounterparty(__v: ibc.core.channel.v1.Counterparty): IdentifiedChannel = copy(counterparty = Option(__v))
    def clearConnectionHops = copy(connectionHops = _root_.scala.Seq.empty)
    def addConnectionHops(__vs: _root_.scala.Predef.String *): IdentifiedChannel = addAllConnectionHops(__vs)
    def addAllConnectionHops(__vs: Iterable[_root_.scala.Predef.String]): IdentifiedChannel = copy(connectionHops = connectionHops ++ __vs)
    def withConnectionHops(__v: _root_.scala.Seq[_root_.scala.Predef.String]): IdentifiedChannel = copy(connectionHops = __v)
    def withVersion(__v: _root_.scala.Predef.String): IdentifiedChannel = copy(version = __v)
    def withPortId(__v: _root_.scala.Predef.String): IdentifiedChannel = copy(portId = __v)
    def withChannelId(__v: _root_.scala.Predef.String): IdentifiedChannel = copy(channelId = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = state.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 2 => {
          val __t = ordering.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 3 => counterparty.orNull
        case 4 => connectionHops
        case 5 => {
          val __t = version
          if (__t != "") __t else null
        }
        case 6 => {
          val __t = portId
          if (__t != "") __t else null
        }
        case 7 => {
          val __t = channelId
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(state.scalaValueDescriptor)
        case 2 => _root_.scalapb.descriptors.PEnum(ordering.scalaValueDescriptor)
        case 3 => counterparty.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PRepeated(connectionHops.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 5 => _root_.scalapb.descriptors.PString(version)
        case 6 => _root_.scalapb.descriptors.PString(portId)
        case 7 => _root_.scalapb.descriptors.PString(channelId)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: ibc.core.channel.v1.IdentifiedChannel.type = ibc.core.channel.v1.IdentifiedChannel
    // @@protoc_insertion_point(GeneratedMessage[ibc.core.channel.v1.IdentifiedChannel])
}

object IdentifiedChannel extends scalapb.GeneratedMessageCompanion[ibc.core.channel.v1.IdentifiedChannel] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[ibc.core.channel.v1.IdentifiedChannel] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): ibc.core.channel.v1.IdentifiedChannel = {
    var __state: ibc.core.channel.v1.State = ibc.core.channel.v1.State.STATE_UNINITIALIZED_UNSPECIFIED
    var __ordering: ibc.core.channel.v1.Order = ibc.core.channel.v1.Order.ORDER_NONE_UNSPECIFIED
    var __counterparty: _root_.scala.Option[ibc.core.channel.v1.Counterparty] = _root_.scala.None
    val __connectionHops: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var __version: _root_.scala.Predef.String = ""
    var __portId: _root_.scala.Predef.String = ""
    var __channelId: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __state = ibc.core.channel.v1.State.fromValue(_input__.readEnum())
        case 16 =>
          __ordering = ibc.core.channel.v1.Order.fromValue(_input__.readEnum())
        case 26 =>
          __counterparty = _root_.scala.Option(__counterparty.fold(_root_.scalapb.LiteParser.readMessage[ibc.core.channel.v1.Counterparty](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __connectionHops += _input__.readStringRequireUtf8()
        case 42 =>
          __version = _input__.readStringRequireUtf8()
        case 50 =>
          __portId = _input__.readStringRequireUtf8()
        case 58 =>
          __channelId = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    ibc.core.channel.v1.IdentifiedChannel(
        state = __state,
        ordering = __ordering,
        counterparty = __counterparty,
        connectionHops = __connectionHops.result(),
        version = __version,
        portId = __portId,
        channelId = __channelId,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[ibc.core.channel.v1.IdentifiedChannel] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      ibc.core.channel.v1.IdentifiedChannel(
        state = ibc.core.channel.v1.State.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(ibc.core.channel.v1.State.STATE_UNINITIALIZED_UNSPECIFIED.scalaValueDescriptor).number),
        ordering = ibc.core.channel.v1.Order.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(ibc.core.channel.v1.Order.ORDER_NONE_UNSPECIFIED.scalaValueDescriptor).number),
        counterparty = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[ibc.core.channel.v1.Counterparty]]),
        connectionHops = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        version = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        portId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        channelId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ibc.core.channel.v1.ChannelProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ibc.core.channel.v1.ChannelProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = ibc.core.channel.v1.Counterparty
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => ibc.core.channel.v1.State
      case 2 => ibc.core.channel.v1.Order
    }
  }
  lazy val defaultInstance = ibc.core.channel.v1.IdentifiedChannel(
    state = ibc.core.channel.v1.State.STATE_UNINITIALIZED_UNSPECIFIED,
    ordering = ibc.core.channel.v1.Order.ORDER_NONE_UNSPECIFIED,
    counterparty = _root_.scala.None,
    connectionHops = _root_.scala.Seq.empty,
    version = "",
    portId = "",
    channelId = ""
  )
  implicit class IdentifiedChannelLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, ibc.core.channel.v1.IdentifiedChannel]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, ibc.core.channel.v1.IdentifiedChannel](_l) {
    def state: _root_.scalapb.lenses.Lens[UpperPB, ibc.core.channel.v1.State] = field(_.state)((c_, f_) => c_.copy(state = f_))
    def ordering: _root_.scalapb.lenses.Lens[UpperPB, ibc.core.channel.v1.Order] = field(_.ordering)((c_, f_) => c_.copy(ordering = f_))
    def counterparty: _root_.scalapb.lenses.Lens[UpperPB, ibc.core.channel.v1.Counterparty] = field(_.getCounterparty)((c_, f_) => c_.copy(counterparty = _root_.scala.Option(f_)))
    def optionalCounterparty: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[ibc.core.channel.v1.Counterparty]] = field(_.counterparty)((c_, f_) => c_.copy(counterparty = f_))
    def connectionHops: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.connectionHops)((c_, f_) => c_.copy(connectionHops = f_))
    def version: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.version)((c_, f_) => c_.copy(version = f_))
    def portId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.portId)((c_, f_) => c_.copy(portId = f_))
    def channelId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.channelId)((c_, f_) => c_.copy(channelId = f_))
  }
  final val STATE_FIELD_NUMBER = 1
  final val ORDERING_FIELD_NUMBER = 2
  final val COUNTERPARTY_FIELD_NUMBER = 3
  final val CONNECTION_HOPS_FIELD_NUMBER = 4
  final val VERSION_FIELD_NUMBER = 5
  final val PORT_ID_FIELD_NUMBER = 6
  final val CHANNEL_ID_FIELD_NUMBER = 7
  def of(
    state: ibc.core.channel.v1.State,
    ordering: ibc.core.channel.v1.Order,
    counterparty: _root_.scala.Option[ibc.core.channel.v1.Counterparty],
    connectionHops: _root_.scala.Seq[_root_.scala.Predef.String],
    version: _root_.scala.Predef.String,
    portId: _root_.scala.Predef.String,
    channelId: _root_.scala.Predef.String
  ): _root_.ibc.core.channel.v1.IdentifiedChannel = _root_.ibc.core.channel.v1.IdentifiedChannel(
    state,
    ordering,
    counterparty,
    connectionHops,
    version,
    portId,
    channelId
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[ibc.core.channel.v1.IdentifiedChannel])
}
