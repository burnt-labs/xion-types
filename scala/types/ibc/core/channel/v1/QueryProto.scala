// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package ibc.core.channel.v1

object QueryProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    ibc.core.client.v1.ClientProto,
    cosmos.base.query.v1beta1.PaginationProto,
    ibc.core.channel.v1.ChannelProto,
    com.google.api.AnnotationsProto,
    com.google.protobuf.any.AnyProto,
    com.google.protobuf.GogoProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      ibc.core.channel.v1.QueryChannelRequest,
      ibc.core.channel.v1.QueryChannelResponse,
      ibc.core.channel.v1.QueryChannelsRequest,
      ibc.core.channel.v1.QueryChannelsResponse,
      ibc.core.channel.v1.QueryConnectionChannelsRequest,
      ibc.core.channel.v1.QueryConnectionChannelsResponse,
      ibc.core.channel.v1.QueryChannelClientStateRequest,
      ibc.core.channel.v1.QueryChannelClientStateResponse,
      ibc.core.channel.v1.QueryChannelConsensusStateRequest,
      ibc.core.channel.v1.QueryChannelConsensusStateResponse,
      ibc.core.channel.v1.QueryPacketCommitmentRequest,
      ibc.core.channel.v1.QueryPacketCommitmentResponse,
      ibc.core.channel.v1.QueryPacketCommitmentsRequest,
      ibc.core.channel.v1.QueryPacketCommitmentsResponse,
      ibc.core.channel.v1.QueryPacketReceiptRequest,
      ibc.core.channel.v1.QueryPacketReceiptResponse,
      ibc.core.channel.v1.QueryPacketAcknowledgementRequest,
      ibc.core.channel.v1.QueryPacketAcknowledgementResponse,
      ibc.core.channel.v1.QueryPacketAcknowledgementsRequest,
      ibc.core.channel.v1.QueryPacketAcknowledgementsResponse,
      ibc.core.channel.v1.QueryUnreceivedPacketsRequest,
      ibc.core.channel.v1.QueryUnreceivedPacketsResponse,
      ibc.core.channel.v1.QueryUnreceivedAcksRequest,
      ibc.core.channel.v1.QueryUnreceivedAcksResponse,
      ibc.core.channel.v1.QueryNextSequenceReceiveRequest,
      ibc.core.channel.v1.QueryNextSequenceReceiveResponse,
      ibc.core.channel.v1.QueryNextSequenceSendRequest,
      ibc.core.channel.v1.QueryNextSequenceSendResponse
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """Ch9pYmMvY29yZS9jaGFubmVsL3YxL3F1ZXJ5LnByb3RvEhNpYmMuY29yZS5jaGFubmVsLnYxGh9pYmMvY29yZS9jbGllbnQvd
  jEvY2xpZW50LnByb3RvGipjb3Ntb3MvYmFzZS9xdWVyeS92MWJldGExL3BhZ2luYXRpb24ucHJvdG8aIWliYy9jb3JlL2NoYW5uZ
  WwvdjEvY2hhbm5lbC5wcm90bxocZ29vZ2xlL2FwaS9hbm5vdGF0aW9ucy5wcm90bxoZZ29vZ2xlL3Byb3RvYnVmL2FueS5wcm90b
  xoUZ29nb3Byb3RvL2dvZ28ucHJvdG8iagoTUXVlcnlDaGFubmVsUmVxdWVzdBIkCgdwb3J0X2lkGAEgASgJQgviPwgSBnBvcnRJZ
  FIGcG9ydElkEi0KCmNoYW5uZWxfaWQYAiABKAlCDuI/CxIJY2hhbm5lbElkUgljaGFubmVsSWQi0wEKFFF1ZXJ5Q2hhbm5lbFJlc
  3BvbnNlEkQKB2NoYW5uZWwYASABKAsyHC5pYmMuY29yZS5jaGFubmVsLnYxLkNoYW5uZWxCDOI/CRIHY2hhbm5lbFIHY2hhbm5lb
  BIgCgVwcm9vZhgCIAEoDEIK4j8HEgVwcm9vZlIFcHJvb2YSUwoMcHJvb2ZfaGVpZ2h0GAMgASgLMhouaWJjLmNvcmUuY2xpZW50L
  nYxLkhlaWdodEIU4j8NEgtwcm9vZkhlaWdodMjeHwBSC3Byb29mSGVpZ2h0Im8KFFF1ZXJ5Q2hhbm5lbHNSZXF1ZXN0ElcKCnBhZ
  2luYXRpb24YASABKAsyJi5jb3Ntb3MuYmFzZS5xdWVyeS52MWJldGExLlBhZ2VSZXF1ZXN0Qg/iPwwSCnBhZ2luYXRpb25SCnBhZ
  2luYXRpb24iiQIKFVF1ZXJ5Q2hhbm5lbHNSZXNwb25zZRJRCghjaGFubmVscxgBIAMoCzImLmliYy5jb3JlLmNoYW5uZWwudjEuS
  WRlbnRpZmllZENoYW5uZWxCDeI/ChIIY2hhbm5lbHNSCGNoYW5uZWxzElgKCnBhZ2luYXRpb24YAiABKAsyJy5jb3Ntb3MuYmFzZ
  S5xdWVyeS52MWJldGExLlBhZ2VSZXNwb25zZUIP4j8MEgpwYWdpbmF0aW9uUgpwYWdpbmF0aW9uEkMKBmhlaWdodBgDIAEoCzIaL
  mliYy5jb3JlLmNsaWVudC52MS5IZWlnaHRCD+I/CBIGaGVpZ2h0yN4fAFIGaGVpZ2h0IqoBCh5RdWVyeUNvbm5lY3Rpb25DaGFub
  mVsc1JlcXVlc3QSLwoKY29ubmVjdGlvbhgBIAEoCUIP4j8MEgpjb25uZWN0aW9uUgpjb25uZWN0aW9uElcKCnBhZ2luYXRpb24YA
  iABKAsyJi5jb3Ntb3MuYmFzZS5xdWVyeS52MWJldGExLlBhZ2VSZXF1ZXN0Qg/iPwwSCnBhZ2luYXRpb25SCnBhZ2luYXRpb24ik
  wIKH1F1ZXJ5Q29ubmVjdGlvbkNoYW5uZWxzUmVzcG9uc2USUQoIY2hhbm5lbHMYASADKAsyJi5pYmMuY29yZS5jaGFubmVsLnYxL
  klkZW50aWZpZWRDaGFubmVsQg3iPwoSCGNoYW5uZWxzUghjaGFubmVscxJYCgpwYWdpbmF0aW9uGAIgASgLMicuY29zbW9zLmJhc
  2UucXVlcnkudjFiZXRhMS5QYWdlUmVzcG9uc2VCD+I/DBIKcGFnaW5hdGlvblIKcGFnaW5hdGlvbhJDCgZoZWlnaHQYAyABKAsyG
  i5pYmMuY29yZS5jbGllbnQudjEuSGVpZ2h0Qg/iPwgSBmhlaWdodMjeHwBSBmhlaWdodCJ1Ch5RdWVyeUNoYW5uZWxDbGllbnRTd
  GF0ZVJlcXVlc3QSJAoHcG9ydF9pZBgBIAEoCUIL4j8IEgZwb3J0SWRSBnBvcnRJZBItCgpjaGFubmVsX2lkGAIgASgJQg7iPwsSC
  WNoYW5uZWxJZFIJY2hhbm5lbElkIpcCCh9RdWVyeUNoYW5uZWxDbGllbnRTdGF0ZVJlc3BvbnNlEn0KF2lkZW50aWZpZWRfY2xpZ
  W50X3N0YXRlGAEgASgLMikuaWJjLmNvcmUuY2xpZW50LnYxLklkZW50aWZpZWRDbGllbnRTdGF0ZUIa4j8XEhVpZGVudGlmaWVkQ
  2xpZW50U3RhdGVSFWlkZW50aWZpZWRDbGllbnRTdGF0ZRIgCgVwcm9vZhgCIAEoDEIK4j8HEgVwcm9vZlIFcHJvb2YSUwoMcHJvb
  2ZfaGVpZ2h0GAMgASgLMhouaWJjLmNvcmUuY2xpZW50LnYxLkhlaWdodEIU4j8NEgtwcm9vZkhlaWdodMjeHwBSC3Byb29mSGVpZ
  2h0IvQBCiFRdWVyeUNoYW5uZWxDb25zZW5zdXNTdGF0ZVJlcXVlc3QSJAoHcG9ydF9pZBgBIAEoCUIL4j8IEgZwb3J0SWRSBnBvc
  nRJZBItCgpjaGFubmVsX2lkGAIgASgJQg7iPwsSCWNoYW5uZWxJZFIJY2hhbm5lbElkEjwKD3JldmlzaW9uX251bWJlchgDIAEoB
  EIT4j8QEg5yZXZpc2lvbk51bWJlclIOcmV2aXNpb25OdW1iZXISPAoPcmV2aXNpb25faGVpZ2h0GAQgASgEQhPiPxASDnJldmlza
  W9uSGVpZ2h0Ug5yZXZpc2lvbkhlaWdodCKbAgoiUXVlcnlDaGFubmVsQ29uc2Vuc3VzU3RhdGVSZXNwb25zZRJSCg9jb25zZW5zd
  XNfc3RhdGUYASABKAsyFC5nb29nbGUucHJvdG9idWYuQW55QhPiPxASDmNvbnNlbnN1c1N0YXRlUg5jb25zZW5zdXNTdGF0ZRIqC
  gljbGllbnRfaWQYAiABKAlCDeI/ChIIY2xpZW50SWRSCGNsaWVudElkEiAKBXByb29mGAMgASgMQgriPwcSBXByb29mUgVwcm9vZ
  hJTCgxwcm9vZl9oZWlnaHQYBCABKAsyGi5pYmMuY29yZS5jbGllbnQudjEuSGVpZ2h0QhTiPw0SC3Byb29mSGVpZ2h0yN4fAFILc
  HJvb2ZIZWlnaHQingEKHFF1ZXJ5UGFja2V0Q29tbWl0bWVudFJlcXVlc3QSJAoHcG9ydF9pZBgBIAEoCUIL4j8IEgZwb3J0SWRSB
  nBvcnRJZBItCgpjaGFubmVsX2lkGAIgASgJQg7iPwsSCWNoYW5uZWxJZFIJY2hhbm5lbElkEikKCHNlcXVlbmNlGAMgASgEQg3iP
  woSCHNlcXVlbmNlUghzZXF1ZW5jZSLHAQodUXVlcnlQYWNrZXRDb21taXRtZW50UmVzcG9uc2USLwoKY29tbWl0bWVudBgBIAEoD
  EIP4j8MEgpjb21taXRtZW50Ugpjb21taXRtZW50EiAKBXByb29mGAIgASgMQgriPwcSBXByb29mUgVwcm9vZhJTCgxwcm9vZl9oZ
  WlnaHQYAyABKAsyGi5pYmMuY29yZS5jbGllbnQudjEuSGVpZ2h0QhTiPw0SC3Byb29mSGVpZ2h0yN4fAFILcHJvb2ZIZWlnaHQiz
  QEKHVF1ZXJ5UGFja2V0Q29tbWl0bWVudHNSZXF1ZXN0EiQKB3BvcnRfaWQYASABKAlCC+I/CBIGcG9ydElkUgZwb3J0SWQSLQoKY
  2hhbm5lbF9pZBgCIAEoCUIO4j8LEgljaGFubmVsSWRSCWNoYW5uZWxJZBJXCgpwYWdpbmF0aW9uGAMgASgLMiYuY29zbW9zLmJhc
  2UucXVlcnkudjFiZXRhMS5QYWdlUmVxdWVzdEIP4j8MEgpwYWdpbmF0aW9uUgpwYWdpbmF0aW9uIpUCCh5RdWVyeVBhY2tldENvb
  W1pdG1lbnRzUmVzcG9uc2USVAoLY29tbWl0bWVudHMYASADKAsyIC5pYmMuY29yZS5jaGFubmVsLnYxLlBhY2tldFN0YXRlQhDiP
  w0SC2NvbW1pdG1lbnRzUgtjb21taXRtZW50cxJYCgpwYWdpbmF0aW9uGAIgASgLMicuY29zbW9zLmJhc2UucXVlcnkudjFiZXRhM
  S5QYWdlUmVzcG9uc2VCD+I/DBIKcGFnaW5hdGlvblIKcGFnaW5hdGlvbhJDCgZoZWlnaHQYAyABKAsyGi5pYmMuY29yZS5jbGllb
  nQudjEuSGVpZ2h0Qg/iPwgSBmhlaWdodMjeHwBSBmhlaWdodCKbAQoZUXVlcnlQYWNrZXRSZWNlaXB0UmVxdWVzdBIkCgdwb3J0X
  2lkGAEgASgJQgviPwgSBnBvcnRJZFIGcG9ydElkEi0KCmNoYW5uZWxfaWQYAiABKAlCDuI/CxIJY2hhbm5lbElkUgljaGFubmVsS
  WQSKQoIc2VxdWVuY2UYAyABKARCDeI/ChIIc2VxdWVuY2VSCHNlcXVlbmNlIr4BChpRdWVyeVBhY2tldFJlY2VpcHRSZXNwb25zZ
  RIpCghyZWNlaXZlZBgCIAEoCEIN4j8KEghyZWNlaXZlZFIIcmVjZWl2ZWQSIAoFcHJvb2YYAyABKAxCCuI/BxIFcHJvb2ZSBXByb
  29mElMKDHByb29mX2hlaWdodBgEIAEoCzIaLmliYy5jb3JlLmNsaWVudC52MS5IZWlnaHRCFOI/DRILcHJvb2ZIZWlnaHTI3h8AU
  gtwcm9vZkhlaWdodCKjAQohUXVlcnlQYWNrZXRBY2tub3dsZWRnZW1lbnRSZXF1ZXN0EiQKB3BvcnRfaWQYASABKAlCC+I/CBIGc
  G9ydElkUgZwb3J0SWQSLQoKY2hhbm5lbF9pZBgCIAEoCUIO4j8LEgljaGFubmVsSWRSCWNoYW5uZWxJZBIpCghzZXF1ZW5jZRgDI
  AEoBEIN4j8KEghzZXF1ZW5jZVIIc2VxdWVuY2Ui2wEKIlF1ZXJ5UGFja2V0QWNrbm93bGVkZ2VtZW50UmVzcG9uc2USPgoPYWNrb
  m93bGVkZ2VtZW50GAEgASgMQhTiPxESD2Fja25vd2xlZGdlbWVudFIPYWNrbm93bGVkZ2VtZW50EiAKBXByb29mGAIgASgMQgriP
  wcSBXByb29mUgVwcm9vZhJTCgxwcm9vZl9oZWlnaHQYAyABKAsyGi5pYmMuY29yZS5jbGllbnQudjEuSGVpZ2h0QhTiPw0SC3Byb
  29mSGVpZ2h0yN4fAFILcHJvb2ZIZWlnaHQisgIKIlF1ZXJ5UGFja2V0QWNrbm93bGVkZ2VtZW50c1JlcXVlc3QSJAoHcG9ydF9pZ
  BgBIAEoCUIL4j8IEgZwb3J0SWRSBnBvcnRJZBItCgpjaGFubmVsX2lkGAIgASgJQg7iPwsSCWNoYW5uZWxJZFIJY2hhbm5lbElkE
  lcKCnBhZ2luYXRpb24YAyABKAsyJi5jb3Ntb3MuYmFzZS5xdWVyeS52MWJldGExLlBhZ2VSZXF1ZXN0Qg/iPwwSCnBhZ2luYXRpb
  25SCnBhZ2luYXRpb24SXgobcGFja2V0X2NvbW1pdG1lbnRfc2VxdWVuY2VzGAQgAygEQh7iPxsSGXBhY2tldENvbW1pdG1lbnRTZ
  XF1ZW5jZXNSGXBhY2tldENvbW1pdG1lbnRTZXF1ZW5jZXMiqQIKI1F1ZXJ5UGFja2V0QWNrbm93bGVkZ2VtZW50c1Jlc3BvbnNlE
  mMKEGFja25vd2xlZGdlbWVudHMYASADKAsyIC5pYmMuY29yZS5jaGFubmVsLnYxLlBhY2tldFN0YXRlQhXiPxISEGFja25vd2xlZ
  GdlbWVudHNSEGFja25vd2xlZGdlbWVudHMSWAoKcGFnaW5hdGlvbhgCIAEoCzInLmNvc21vcy5iYXNlLnF1ZXJ5LnYxYmV0YTEuU
  GFnZVJlc3BvbnNlQg/iPwwSCnBhZ2luYXRpb25SCnBhZ2luYXRpb24SQwoGaGVpZ2h0GAMgASgLMhouaWJjLmNvcmUuY2xpZW50L
  nYxLkhlaWdodEIP4j8IEgZoZWlnaHTI3h8AUgZoZWlnaHQi1AEKHVF1ZXJ5VW5yZWNlaXZlZFBhY2tldHNSZXF1ZXN0EiQKB3Bvc
  nRfaWQYASABKAlCC+I/CBIGcG9ydElkUgZwb3J0SWQSLQoKY2hhbm5lbF9pZBgCIAEoCUIO4j8LEgljaGFubmVsSWRSCWNoYW5uZ
  WxJZBJeChtwYWNrZXRfY29tbWl0bWVudF9zZXF1ZW5jZXMYAyADKARCHuI/GxIZcGFja2V0Q29tbWl0bWVudFNlcXVlbmNlc1IZc
  GFja2V0Q29tbWl0bWVudFNlcXVlbmNlcyKTAQoeUXVlcnlVbnJlY2VpdmVkUGFja2V0c1Jlc3BvbnNlEiwKCXNlcXVlbmNlcxgBI
  AMoBEIO4j8LEglzZXF1ZW5jZXNSCXNlcXVlbmNlcxJDCgZoZWlnaHQYAiABKAsyGi5pYmMuY29yZS5jbGllbnQudjEuSGVpZ2h0Q
  g/iPwgSBmhlaWdodMjeHwBSBmhlaWdodCK8AQoaUXVlcnlVbnJlY2VpdmVkQWNrc1JlcXVlc3QSJAoHcG9ydF9pZBgBIAEoCUIL4
  j8IEgZwb3J0SWRSBnBvcnRJZBItCgpjaGFubmVsX2lkGAIgASgJQg7iPwsSCWNoYW5uZWxJZFIJY2hhbm5lbElkEkkKFHBhY2tld
  F9hY2tfc2VxdWVuY2VzGAMgAygEQhfiPxQSEnBhY2tldEFja1NlcXVlbmNlc1IScGFja2V0QWNrU2VxdWVuY2VzIpABChtRdWVye
  VVucmVjZWl2ZWRBY2tzUmVzcG9uc2USLAoJc2VxdWVuY2VzGAEgAygEQg7iPwsSCXNlcXVlbmNlc1IJc2VxdWVuY2VzEkMKBmhla
  WdodBgCIAEoCzIaLmliYy5jb3JlLmNsaWVudC52MS5IZWlnaHRCD+I/CBIGaGVpZ2h0yN4fAFIGaGVpZ2h0InYKH1F1ZXJ5TmV4d
  FNlcXVlbmNlUmVjZWl2ZVJlcXVlc3QSJAoHcG9ydF9pZBgBIAEoCUIL4j8IEgZwb3J0SWRSBnBvcnRJZBItCgpjaGFubmVsX2lkG
  AIgASgJQg7iPwsSCWNoYW5uZWxJZFIJY2hhbm5lbElkIucBCiBRdWVyeU5leHRTZXF1ZW5jZVJlY2VpdmVSZXNwb25zZRJMChVuZ
  Xh0X3NlcXVlbmNlX3JlY2VpdmUYASABKARCGOI/FRITbmV4dFNlcXVlbmNlUmVjZWl2ZVITbmV4dFNlcXVlbmNlUmVjZWl2ZRIgC
  gVwcm9vZhgCIAEoDEIK4j8HEgVwcm9vZlIFcHJvb2YSUwoMcHJvb2ZfaGVpZ2h0GAMgASgLMhouaWJjLmNvcmUuY2xpZW50LnYxL
  khlaWdodEIU4j8NEgtwcm9vZkhlaWdodMjeHwBSC3Byb29mSGVpZ2h0InMKHFF1ZXJ5TmV4dFNlcXVlbmNlU2VuZFJlcXVlc3QSJ
  AoHcG9ydF9pZBgBIAEoCUIL4j8IEgZwb3J0SWRSBnBvcnRJZBItCgpjaGFubmVsX2lkGAIgASgJQg7iPwsSCWNoYW5uZWxJZFIJY
  2hhbm5lbElkItsBCh1RdWVyeU5leHRTZXF1ZW5jZVNlbmRSZXNwb25zZRJDChJuZXh0X3NlcXVlbmNlX3NlbmQYASABKARCFeI/E
  hIQbmV4dFNlcXVlbmNlU2VuZFIQbmV4dFNlcXVlbmNlU2VuZBIgCgVwcm9vZhgCIAEoDEIK4j8HEgVwcm9vZlIFcHJvb2YSUwoMc
  HJvb2ZfaGVpZ2h0GAMgASgLMhouaWJjLmNvcmUuY2xpZW50LnYxLkhlaWdodEIU4j8NEgtwcm9vZkhlaWdodMjeHwBSC3Byb29mS
  GVpZ2h0Mt4XCgVRdWVyeRKiAQoHQ2hhbm5lbBIoLmliYy5jb3JlLmNoYW5uZWwudjEuUXVlcnlDaGFubmVsUmVxdWVzdBopLmliY
  y5jb3JlLmNoYW5uZWwudjEuUXVlcnlDaGFubmVsUmVzcG9uc2UiQoLT5JMCPBI6L2liYy9jb3JlL2NoYW5uZWwvdjEvY2hhbm5lb
  HMve2NoYW5uZWxfaWR9L3BvcnRzL3twb3J0X2lkfRKIAQoIQ2hhbm5lbHMSKS5pYmMuY29yZS5jaGFubmVsLnYxLlF1ZXJ5Q2hhb
  m5lbHNSZXF1ZXN0GiouaWJjLmNvcmUuY2hhbm5lbC52MS5RdWVyeUNoYW5uZWxzUmVzcG9uc2UiJYLT5JMCHxIdL2liYy9jb3JlL
  2NoYW5uZWwvdjEvY2hhbm5lbHMSvwEKEkNvbm5lY3Rpb25DaGFubmVscxIzLmliYy5jb3JlLmNoYW5uZWwudjEuUXVlcnlDb25uZ
  WN0aW9uQ2hhbm5lbHNSZXF1ZXN0GjQuaWJjLmNvcmUuY2hhbm5lbC52MS5RdWVyeUNvbm5lY3Rpb25DaGFubmVsc1Jlc3BvbnNlI
  j6C0+STAjgSNi9pYmMvY29yZS9jaGFubmVsL3YxL2Nvbm5lY3Rpb25zL3tjb25uZWN0aW9ufS9jaGFubmVscxLQAQoSQ2hhbm5lb
  ENsaWVudFN0YXRlEjMuaWJjLmNvcmUuY2hhbm5lbC52MS5RdWVyeUNoYW5uZWxDbGllbnRTdGF0ZVJlcXVlc3QaNC5pYmMuY29yZ
  S5jaGFubmVsLnYxLlF1ZXJ5Q2hhbm5lbENsaWVudFN0YXRlUmVzcG9uc2UiT4LT5JMCSRJHL2liYy9jb3JlL2NoYW5uZWwvdjEvY
  2hhbm5lbHMve2NoYW5uZWxfaWR9L3BvcnRzL3twb3J0X2lkfS9jbGllbnRfc3RhdGUSkgIKFUNoYW5uZWxDb25zZW5zdXNTdGF0Z
  RI2LmliYy5jb3JlLmNoYW5uZWwudjEuUXVlcnlDaGFubmVsQ29uc2Vuc3VzU3RhdGVSZXF1ZXN0GjcuaWJjLmNvcmUuY2hhbm5lb
  C52MS5RdWVyeUNoYW5uZWxDb25zZW5zdXNTdGF0ZVJlc3BvbnNlIocBgtPkkwKAARJ+L2liYy9jb3JlL2NoYW5uZWwvdjEvY2hhb
  m5lbHMve2NoYW5uZWxfaWR9L3BvcnRzL3twb3J0X2lkfS9jb25zZW5zdXNfc3RhdGUvcmV2aXNpb24ve3JldmlzaW9uX251bWJlc
  n0vaGVpZ2h0L3tyZXZpc2lvbl9oZWlnaHR9EtsBChBQYWNrZXRDb21taXRtZW50EjEuaWJjLmNvcmUuY2hhbm5lbC52MS5RdWVye
  VBhY2tldENvbW1pdG1lbnRSZXF1ZXN0GjIuaWJjLmNvcmUuY2hhbm5lbC52MS5RdWVyeVBhY2tldENvbW1pdG1lbnRSZXNwb25zZ
  SJggtPkkwJaElgvaWJjL2NvcmUvY2hhbm5lbC92MS9jaGFubmVscy97Y2hhbm5lbF9pZH0vcG9ydHMve3BvcnRfaWR9L3BhY2tld
  F9jb21taXRtZW50cy97c2VxdWVuY2V9EtMBChFQYWNrZXRDb21taXRtZW50cxIyLmliYy5jb3JlLmNoYW5uZWwudjEuUXVlcnlQY
  WNrZXRDb21taXRtZW50c1JlcXVlc3QaMy5pYmMuY29yZS5jaGFubmVsLnYxLlF1ZXJ5UGFja2V0Q29tbWl0bWVudHNSZXNwb25zZ
  SJVgtPkkwJPEk0vaWJjL2NvcmUvY2hhbm5lbC92MS9jaGFubmVscy97Y2hhbm5lbF9pZH0vcG9ydHMve3BvcnRfaWR9L3BhY2tld
  F9jb21taXRtZW50cxLPAQoNUGFja2V0UmVjZWlwdBIuLmliYy5jb3JlLmNoYW5uZWwudjEuUXVlcnlQYWNrZXRSZWNlaXB0UmVxd
  WVzdBovLmliYy5jb3JlLmNoYW5uZWwudjEuUXVlcnlQYWNrZXRSZWNlaXB0UmVzcG9uc2UiXYLT5JMCVxJVL2liYy9jb3JlL2NoY
  W5uZWwvdjEvY2hhbm5lbHMve2NoYW5uZWxfaWR9L3BvcnRzL3twb3J0X2lkfS9wYWNrZXRfcmVjZWlwdHMve3NlcXVlbmNlfRLjA
  QoVUGFja2V0QWNrbm93bGVkZ2VtZW50EjYuaWJjLmNvcmUuY2hhbm5lbC52MS5RdWVyeVBhY2tldEFja25vd2xlZGdlbWVudFJlc
  XVlc3QaNy5pYmMuY29yZS5jaGFubmVsLnYxLlF1ZXJ5UGFja2V0QWNrbm93bGVkZ2VtZW50UmVzcG9uc2UiWYLT5JMCUxJRL2liY
  y9jb3JlL2NoYW5uZWwvdjEvY2hhbm5lbHMve2NoYW5uZWxfaWR9L3BvcnRzL3twb3J0X2lkfS9wYWNrZXRfYWNrcy97c2VxdWVuY
  2V9EucBChZQYWNrZXRBY2tub3dsZWRnZW1lbnRzEjcuaWJjLmNvcmUuY2hhbm5lbC52MS5RdWVyeVBhY2tldEFja25vd2xlZGdlb
  WVudHNSZXF1ZXN0GjguaWJjLmNvcmUuY2hhbm5lbC52MS5RdWVyeVBhY2tldEFja25vd2xlZGdlbWVudHNSZXNwb25zZSJagtPkk
  wJUElIvaWJjL2NvcmUvY2hhbm5lbC92MS9jaGFubmVscy97Y2hhbm5lbF9pZH0vcG9ydHMve3BvcnRfaWR9L3BhY2tldF9hY2tub
  3dsZWRnZW1lbnRzEoYCChFVbnJlY2VpdmVkUGFja2V0cxIyLmliYy5jb3JlLmNoYW5uZWwudjEuUXVlcnlVbnJlY2VpdmVkUGFja
  2V0c1JlcXVlc3QaMy5pYmMuY29yZS5jaGFubmVsLnYxLlF1ZXJ5VW5yZWNlaXZlZFBhY2tldHNSZXNwb25zZSKHAYLT5JMCgAESf
  i9pYmMvY29yZS9jaGFubmVsL3YxL2NoYW5uZWxzL3tjaGFubmVsX2lkfS9wb3J0cy97cG9ydF9pZH0vcGFja2V0X2NvbW1pdG1lb
  nRzL3twYWNrZXRfY29tbWl0bWVudF9zZXF1ZW5jZXN9L3VucmVjZWl2ZWRfcGFja2V0cxLxAQoOVW5yZWNlaXZlZEFja3MSLy5pY
  mMuY29yZS5jaGFubmVsLnYxLlF1ZXJ5VW5yZWNlaXZlZEFja3NSZXF1ZXN0GjAuaWJjLmNvcmUuY2hhbm5lbC52MS5RdWVyeVVuc
  mVjZWl2ZWRBY2tzUmVzcG9uc2UifILT5JMCdhJ0L2liYy9jb3JlL2NoYW5uZWwvdjEvY2hhbm5lbHMve2NoYW5uZWxfaWR9L3Bvc
  nRzL3twb3J0X2lkfS9wYWNrZXRfY29tbWl0bWVudHMve3BhY2tldF9hY2tfc2VxdWVuY2VzfS91bnJlY2VpdmVkX2Fja3MS1AEKE
  05leHRTZXF1ZW5jZVJlY2VpdmUSNC5pYmMuY29yZS5jaGFubmVsLnYxLlF1ZXJ5TmV4dFNlcXVlbmNlUmVjZWl2ZVJlcXVlc3QaN
  S5pYmMuY29yZS5jaGFubmVsLnYxLlF1ZXJ5TmV4dFNlcXVlbmNlUmVjZWl2ZVJlc3BvbnNlIlCC0+STAkoSSC9pYmMvY29yZS9ja
  GFubmVsL3YxL2NoYW5uZWxzL3tjaGFubmVsX2lkfS9wb3J0cy97cG9ydF9pZH0vbmV4dF9zZXF1ZW5jZRLQAQoQTmV4dFNlcXVlb
  mNlU2VuZBIxLmliYy5jb3JlLmNoYW5uZWwudjEuUXVlcnlOZXh0U2VxdWVuY2VTZW5kUmVxdWVzdBoyLmliYy5jb3JlLmNoYW5uZ
  WwudjEuUXVlcnlOZXh0U2VxdWVuY2VTZW5kUmVzcG9uc2UiVYLT5JMCTxJNL2liYy9jb3JlL2NoYW5uZWwvdjEvY2hhbm5lbHMve
  2NoYW5uZWxfaWR9L3BvcnRzL3twb3J0X2lkfS9uZXh0X3NlcXVlbmNlX3NlbmRCPFo6Z2l0aHViLmNvbS9jb3Ntb3MvaWJjLWdvL
  3YxMC9tb2R1bGVzL2NvcmUvMDQtY2hhbm5lbC90eXBlc2IGcHJvdG8z"""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      ibc.core.client.v1.ClientProto.javaDescriptor,
      cosmos.base.query.v1beta1.PaginationProto.javaDescriptor,
      ibc.core.channel.v1.ChannelProto.javaDescriptor,
      com.google.api.AnnotationsProto.javaDescriptor,
      com.google.protobuf.any.AnyProto.javaDescriptor,
      com.google.protobuf.GogoProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}