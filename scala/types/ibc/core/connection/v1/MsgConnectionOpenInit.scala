// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package ibc.core.connection.v1

/** MsgConnectionOpenInit defines the msg sent by an account on Chain A to
  * initialize a connection with Chain B.
  */
@SerialVersionUID(0L)
final case class MsgConnectionOpenInit(
    clientId: _root_.scala.Predef.String = "",
    counterparty: _root_.scala.Option[ibc.core.connection.v1.Counterparty] = _root_.scala.None,
    version: _root_.scala.Option[ibc.core.connection.v1.Version] = _root_.scala.None,
    delayPeriod: _root_.scala.Long = 0L,
    signer: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[MsgConnectionOpenInit] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = clientId
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      if (counterparty.isDefined) {
        val __value = counterparty.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (version.isDefined) {
        val __value = version.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = delayPeriod
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(4, __value)
        }
      };
      
      {
        val __value = signer
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = clientId
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      counterparty.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      version.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = delayPeriod
        if (__v != 0L) {
          _output__.writeUInt64(4, __v)
        }
      };
      {
        val __v = signer
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withClientId(__v: _root_.scala.Predef.String): MsgConnectionOpenInit = copy(clientId = __v)
    def getCounterparty: ibc.core.connection.v1.Counterparty = counterparty.getOrElse(ibc.core.connection.v1.Counterparty.defaultInstance)
    def clearCounterparty: MsgConnectionOpenInit = copy(counterparty = _root_.scala.None)
    def withCounterparty(__v: ibc.core.connection.v1.Counterparty): MsgConnectionOpenInit = copy(counterparty = Option(__v))
    def getVersion: ibc.core.connection.v1.Version = version.getOrElse(ibc.core.connection.v1.Version.defaultInstance)
    def clearVersion: MsgConnectionOpenInit = copy(version = _root_.scala.None)
    def withVersion(__v: ibc.core.connection.v1.Version): MsgConnectionOpenInit = copy(version = Option(__v))
    def withDelayPeriod(__v: _root_.scala.Long): MsgConnectionOpenInit = copy(delayPeriod = __v)
    def withSigner(__v: _root_.scala.Predef.String): MsgConnectionOpenInit = copy(signer = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = clientId
          if (__t != "") __t else null
        }
        case 2 => counterparty.orNull
        case 3 => version.orNull
        case 4 => {
          val __t = delayPeriod
          if (__t != 0L) __t else null
        }
        case 5 => {
          val __t = signer
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(clientId)
        case 2 => counterparty.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => version.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PLong(delayPeriod)
        case 5 => _root_.scalapb.descriptors.PString(signer)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: ibc.core.connection.v1.MsgConnectionOpenInit.type = ibc.core.connection.v1.MsgConnectionOpenInit
    // @@protoc_insertion_point(GeneratedMessage[ibc.core.connection.v1.MsgConnectionOpenInit])
}

object MsgConnectionOpenInit extends scalapb.GeneratedMessageCompanion[ibc.core.connection.v1.MsgConnectionOpenInit] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[ibc.core.connection.v1.MsgConnectionOpenInit] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): ibc.core.connection.v1.MsgConnectionOpenInit = {
    var __clientId: _root_.scala.Predef.String = ""
    var __counterparty: _root_.scala.Option[ibc.core.connection.v1.Counterparty] = _root_.scala.None
    var __version: _root_.scala.Option[ibc.core.connection.v1.Version] = _root_.scala.None
    var __delayPeriod: _root_.scala.Long = 0L
    var __signer: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __clientId = _input__.readStringRequireUtf8()
        case 18 =>
          __counterparty = _root_.scala.Option(__counterparty.fold(_root_.scalapb.LiteParser.readMessage[ibc.core.connection.v1.Counterparty](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __version = _root_.scala.Option(__version.fold(_root_.scalapb.LiteParser.readMessage[ibc.core.connection.v1.Version](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 32 =>
          __delayPeriod = _input__.readUInt64()
        case 42 =>
          __signer = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    ibc.core.connection.v1.MsgConnectionOpenInit(
        clientId = __clientId,
        counterparty = __counterparty,
        version = __version,
        delayPeriod = __delayPeriod,
        signer = __signer,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[ibc.core.connection.v1.MsgConnectionOpenInit] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      ibc.core.connection.v1.MsgConnectionOpenInit(
        clientId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        counterparty = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[ibc.core.connection.v1.Counterparty]]),
        version = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[ibc.core.connection.v1.Version]]),
        delayPeriod = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        signer = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ibc.core.connection.v1.TxProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ibc.core.connection.v1.TxProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = ibc.core.connection.v1.Counterparty
      case 3 => __out = ibc.core.connection.v1.Version
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = ibc.core.connection.v1.MsgConnectionOpenInit(
    clientId = "",
    counterparty = _root_.scala.None,
    version = _root_.scala.None,
    delayPeriod = 0L,
    signer = ""
  )
  implicit class MsgConnectionOpenInitLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, ibc.core.connection.v1.MsgConnectionOpenInit]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, ibc.core.connection.v1.MsgConnectionOpenInit](_l) {
    def clientId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.clientId)((c_, f_) => c_.copy(clientId = f_))
    def counterparty: _root_.scalapb.lenses.Lens[UpperPB, ibc.core.connection.v1.Counterparty] = field(_.getCounterparty)((c_, f_) => c_.copy(counterparty = _root_.scala.Option(f_)))
    def optionalCounterparty: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[ibc.core.connection.v1.Counterparty]] = field(_.counterparty)((c_, f_) => c_.copy(counterparty = f_))
    def version: _root_.scalapb.lenses.Lens[UpperPB, ibc.core.connection.v1.Version] = field(_.getVersion)((c_, f_) => c_.copy(version = _root_.scala.Option(f_)))
    def optionalVersion: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[ibc.core.connection.v1.Version]] = field(_.version)((c_, f_) => c_.copy(version = f_))
    def delayPeriod: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.delayPeriod)((c_, f_) => c_.copy(delayPeriod = f_))
    def signer: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.signer)((c_, f_) => c_.copy(signer = f_))
  }
  final val CLIENT_ID_FIELD_NUMBER = 1
  final val COUNTERPARTY_FIELD_NUMBER = 2
  final val VERSION_FIELD_NUMBER = 3
  final val DELAY_PERIOD_FIELD_NUMBER = 4
  final val SIGNER_FIELD_NUMBER = 5
  def of(
    clientId: _root_.scala.Predef.String,
    counterparty: _root_.scala.Option[ibc.core.connection.v1.Counterparty],
    version: _root_.scala.Option[ibc.core.connection.v1.Version],
    delayPeriod: _root_.scala.Long,
    signer: _root_.scala.Predef.String
  ): _root_.ibc.core.connection.v1.MsgConnectionOpenInit = _root_.ibc.core.connection.v1.MsgConnectionOpenInit(
    clientId,
    counterparty,
    version,
    delayPeriod,
    signer
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[ibc.core.connection.v1.MsgConnectionOpenInit])
}
