// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package ibc.core.connection.v1

/** ConnectionEnd defines a stateful object on a chain connected to another
  * separate one.
  * NOTE: there must only be 2 defined ConnectionEnds to establish
  * a connection between two chains.
  *
  * @param clientId
  *   client associated with this connection.
  * @param versions
  *   IBC version which can be utilised to determine encodings or protocols for
  *   channels or packets utilising this connection.
  * @param state
  *   current state of the connection end.
  * @param counterparty
  *   counterparty chain associated with this connection.
  * @param delayPeriod
  *   delay period that must pass before a consensus state can be used for
  *   packet-verification NOTE: delay period logic is only implemented by some
  *   clients.
  */
@SerialVersionUID(0L)
final case class ConnectionEnd(
    clientId: _root_.scala.Predef.String = "",
    versions: _root_.scala.Seq[ibc.core.connection.v1.Version] = _root_.scala.Seq.empty,
    state: ibc.core.connection.v1.State = ibc.core.connection.v1.State.STATE_UNINITIALIZED_UNSPECIFIED,
    counterparty: _root_.scala.Option[ibc.core.connection.v1.Counterparty] = _root_.scala.None,
    delayPeriod: _root_.scala.Long = 0L,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ConnectionEnd] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = clientId
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      versions.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = state.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(3, __value)
        }
      };
      if (counterparty.isDefined) {
        val __value = counterparty.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = delayPeriod
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(5, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = clientId
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      versions.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = state.value
        if (__v != 0) {
          _output__.writeEnum(3, __v)
        }
      };
      counterparty.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = delayPeriod
        if (__v != 0L) {
          _output__.writeUInt64(5, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withClientId(__v: _root_.scala.Predef.String): ConnectionEnd = copy(clientId = __v)
    def clearVersions = copy(versions = _root_.scala.Seq.empty)
    def addVersions(__vs: ibc.core.connection.v1.Version *): ConnectionEnd = addAllVersions(__vs)
    def addAllVersions(__vs: Iterable[ibc.core.connection.v1.Version]): ConnectionEnd = copy(versions = versions ++ __vs)
    def withVersions(__v: _root_.scala.Seq[ibc.core.connection.v1.Version]): ConnectionEnd = copy(versions = __v)
    def withState(__v: ibc.core.connection.v1.State): ConnectionEnd = copy(state = __v)
    def getCounterparty: ibc.core.connection.v1.Counterparty = counterparty.getOrElse(ibc.core.connection.v1.Counterparty.defaultInstance)
    def clearCounterparty: ConnectionEnd = copy(counterparty = _root_.scala.None)
    def withCounterparty(__v: ibc.core.connection.v1.Counterparty): ConnectionEnd = copy(counterparty = Option(__v))
    def withDelayPeriod(__v: _root_.scala.Long): ConnectionEnd = copy(delayPeriod = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = clientId
          if (__t != "") __t else null
        }
        case 2 => versions
        case 3 => {
          val __t = state.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 4 => counterparty.orNull
        case 5 => {
          val __t = delayPeriod
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(clientId)
        case 2 => _root_.scalapb.descriptors.PRepeated(versions.iterator.map(_.toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PEnum(state.scalaValueDescriptor)
        case 4 => counterparty.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => _root_.scalapb.descriptors.PLong(delayPeriod)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: ibc.core.connection.v1.ConnectionEnd.type = ibc.core.connection.v1.ConnectionEnd
    // @@protoc_insertion_point(GeneratedMessage[ibc.core.connection.v1.ConnectionEnd])
}

object ConnectionEnd extends scalapb.GeneratedMessageCompanion[ibc.core.connection.v1.ConnectionEnd] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[ibc.core.connection.v1.ConnectionEnd] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): ibc.core.connection.v1.ConnectionEnd = {
    var __clientId: _root_.scala.Predef.String = ""
    val __versions: _root_.scala.collection.immutable.VectorBuilder[ibc.core.connection.v1.Version] = new _root_.scala.collection.immutable.VectorBuilder[ibc.core.connection.v1.Version]
    var __state: ibc.core.connection.v1.State = ibc.core.connection.v1.State.STATE_UNINITIALIZED_UNSPECIFIED
    var __counterparty: _root_.scala.Option[ibc.core.connection.v1.Counterparty] = _root_.scala.None
    var __delayPeriod: _root_.scala.Long = 0L
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __clientId = _input__.readStringRequireUtf8()
        case 18 =>
          __versions += _root_.scalapb.LiteParser.readMessage[ibc.core.connection.v1.Version](_input__)
        case 24 =>
          __state = ibc.core.connection.v1.State.fromValue(_input__.readEnum())
        case 34 =>
          __counterparty = _root_.scala.Option(__counterparty.fold(_root_.scalapb.LiteParser.readMessage[ibc.core.connection.v1.Counterparty](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 40 =>
          __delayPeriod = _input__.readUInt64()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    ibc.core.connection.v1.ConnectionEnd(
        clientId = __clientId,
        versions = __versions.result(),
        state = __state,
        counterparty = __counterparty,
        delayPeriod = __delayPeriod,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[ibc.core.connection.v1.ConnectionEnd] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      ibc.core.connection.v1.ConnectionEnd(
        clientId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        versions = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[ibc.core.connection.v1.Version]]).getOrElse(_root_.scala.Seq.empty),
        state = ibc.core.connection.v1.State.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(ibc.core.connection.v1.State.STATE_UNINITIALIZED_UNSPECIFIED.scalaValueDescriptor).number),
        counterparty = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[ibc.core.connection.v1.Counterparty]]),
        delayPeriod = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ibc.core.connection.v1.ConnectionProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ibc.core.connection.v1.ConnectionProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = ibc.core.connection.v1.Version
      case 4 => __out = ibc.core.connection.v1.Counterparty
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 3 => ibc.core.connection.v1.State
    }
  }
  lazy val defaultInstance = ibc.core.connection.v1.ConnectionEnd(
    clientId = "",
    versions = _root_.scala.Seq.empty,
    state = ibc.core.connection.v1.State.STATE_UNINITIALIZED_UNSPECIFIED,
    counterparty = _root_.scala.None,
    delayPeriod = 0L
  )
  implicit class ConnectionEndLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, ibc.core.connection.v1.ConnectionEnd]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, ibc.core.connection.v1.ConnectionEnd](_l) {
    def clientId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.clientId)((c_, f_) => c_.copy(clientId = f_))
    def versions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[ibc.core.connection.v1.Version]] = field(_.versions)((c_, f_) => c_.copy(versions = f_))
    def state: _root_.scalapb.lenses.Lens[UpperPB, ibc.core.connection.v1.State] = field(_.state)((c_, f_) => c_.copy(state = f_))
    def counterparty: _root_.scalapb.lenses.Lens[UpperPB, ibc.core.connection.v1.Counterparty] = field(_.getCounterparty)((c_, f_) => c_.copy(counterparty = _root_.scala.Option(f_)))
    def optionalCounterparty: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[ibc.core.connection.v1.Counterparty]] = field(_.counterparty)((c_, f_) => c_.copy(counterparty = f_))
    def delayPeriod: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.delayPeriod)((c_, f_) => c_.copy(delayPeriod = f_))
  }
  final val CLIENT_ID_FIELD_NUMBER = 1
  final val VERSIONS_FIELD_NUMBER = 2
  final val STATE_FIELD_NUMBER = 3
  final val COUNTERPARTY_FIELD_NUMBER = 4
  final val DELAY_PERIOD_FIELD_NUMBER = 5
  def of(
    clientId: _root_.scala.Predef.String,
    versions: _root_.scala.Seq[ibc.core.connection.v1.Version],
    state: ibc.core.connection.v1.State,
    counterparty: _root_.scala.Option[ibc.core.connection.v1.Counterparty],
    delayPeriod: _root_.scala.Long
  ): _root_.ibc.core.connection.v1.ConnectionEnd = _root_.ibc.core.connection.v1.ConnectionEnd(
    clientId,
    versions,
    state,
    counterparty,
    delayPeriod
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[ibc.core.connection.v1.ConnectionEnd])
}
