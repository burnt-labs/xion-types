// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmwasm.wasm.v1.tx

/** MsgExecuteContract submits the given message data to a smart contract
  *
  * @param sender
  *   Sender is the that actor that signed the messages
  * @param contract
  *   Contract is the address of the smart contract
  * @param msg
  *   Msg json encoded message to be passed to the contract
  * @param funds
  *   Funds coins that are transferred to the contract on execution
  */
@SerialVersionUID(0L)
final case class MsgExecuteContract(
    sender: _root_.scala.Predef.String = "",
    contract: _root_.scala.Predef.String = "",
    msg: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    funds: _root_.scala.Seq[cosmos.base.v1beta1.coin.Coin] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[MsgExecuteContract] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = sender
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = contract
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = msg
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(3, __value)
        }
      };
      funds.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = sender
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = contract
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = msg
        if (!__v.isEmpty) {
          _output__.writeBytes(3, __v)
        }
      };
      funds.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withSender(__v: _root_.scala.Predef.String): MsgExecuteContract = copy(sender = __v)
    def withContract(__v: _root_.scala.Predef.String): MsgExecuteContract = copy(contract = __v)
    def withMsg(__v: _root_.com.google.protobuf.ByteString): MsgExecuteContract = copy(msg = __v)
    def clearFunds = copy(funds = _root_.scala.Seq.empty)
    def addFunds(__vs: cosmos.base.v1beta1.coin.Coin *): MsgExecuteContract = addAllFunds(__vs)
    def addAllFunds(__vs: Iterable[cosmos.base.v1beta1.coin.Coin]): MsgExecuteContract = copy(funds = funds ++ __vs)
    def withFunds(__v: _root_.scala.Seq[cosmos.base.v1beta1.coin.Coin]): MsgExecuteContract = copy(funds = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = sender
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = contract
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = msg
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 5 => funds
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(sender)
        case 2 => _root_.scalapb.descriptors.PString(contract)
        case 3 => _root_.scalapb.descriptors.PByteString(msg)
        case 5 => _root_.scalapb.descriptors.PRepeated(funds.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmwasm.wasm.v1.tx.MsgExecuteContract.type = cosmwasm.wasm.v1.tx.MsgExecuteContract
    // @@protoc_insertion_point(GeneratedMessage[cosmwasm.wasm.v1.MsgExecuteContract])
}

object MsgExecuteContract extends scalapb.GeneratedMessageCompanion[cosmwasm.wasm.v1.tx.MsgExecuteContract] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmwasm.wasm.v1.tx.MsgExecuteContract] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmwasm.wasm.v1.tx.MsgExecuteContract = {
    var __sender: _root_.scala.Predef.String = ""
    var __contract: _root_.scala.Predef.String = ""
    var __msg: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
    val __funds: _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.coin.Coin] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.coin.Coin]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __sender = _input__.readStringRequireUtf8()
        case 18 =>
          __contract = _input__.readStringRequireUtf8()
        case 26 =>
          __msg = _input__.readBytes()
        case 42 =>
          __funds += _root_.scalapb.LiteParser.readMessage[cosmos.base.v1beta1.coin.Coin](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmwasm.wasm.v1.tx.MsgExecuteContract(
        sender = __sender,
        contract = __contract,
        msg = __msg,
        funds = __funds.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmwasm.wasm.v1.tx.MsgExecuteContract] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmwasm.wasm.v1.tx.MsgExecuteContract(
        sender = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        contract = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        msg = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        funds = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[cosmos.base.v1beta1.coin.Coin]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmwasm.wasm.v1.tx.TxProto.javaDescriptor.getMessageTypes().get(6)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmwasm.wasm.v1.tx.TxProto.scalaDescriptor.messages(6)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 5 => __out = cosmos.base.v1beta1.coin.Coin
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmwasm.wasm.v1.tx.MsgExecuteContract(
    sender = "",
    contract = "",
    msg = _root_.com.google.protobuf.ByteString.EMPTY,
    funds = _root_.scala.Seq.empty
  )
  implicit class MsgExecuteContractLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmwasm.wasm.v1.tx.MsgExecuteContract]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmwasm.wasm.v1.tx.MsgExecuteContract](_l) {
    def sender: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.sender)((c_, f_) => c_.copy(sender = f_))
    def contract: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.contract)((c_, f_) => c_.copy(contract = f_))
    def msg: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.msg)((c_, f_) => c_.copy(msg = f_))
    def funds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.base.v1beta1.coin.Coin]] = field(_.funds)((c_, f_) => c_.copy(funds = f_))
  }
  final val SENDER_FIELD_NUMBER = 1
  final val CONTRACT_FIELD_NUMBER = 2
  final val MSG_FIELD_NUMBER = 3
  final val FUNDS_FIELD_NUMBER = 5
  def of(
    sender: _root_.scala.Predef.String,
    contract: _root_.scala.Predef.String,
    msg: _root_.com.google.protobuf.ByteString,
    funds: _root_.scala.Seq[cosmos.base.v1beta1.coin.Coin]
  ): _root_.cosmwasm.wasm.v1.tx.MsgExecuteContract = _root_.cosmwasm.wasm.v1.tx.MsgExecuteContract(
    sender,
    contract,
    msg,
    funds
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmwasm.wasm.v1.MsgExecuteContract])
}
