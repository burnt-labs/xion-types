// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmwasm.wasm.v1.tx

object TxProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    cosmos.base.v1beta1.coin.CoinProto,
    cosmos.msg.v1.msg.MsgProto,
    com.google.protobuf.gogo.GogoProto,
    cosmwasm.wasm.v1.types.TypesProto,
    cosmos_proto.cosmos.CosmosProto,
    amino.amino.AminoProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      cosmwasm.wasm.v1.tx.MsgStoreCode,
      cosmwasm.wasm.v1.tx.MsgStoreCodeResponse,
      cosmwasm.wasm.v1.tx.MsgInstantiateContract,
      cosmwasm.wasm.v1.tx.MsgInstantiateContractResponse,
      cosmwasm.wasm.v1.tx.MsgInstantiateContract2,
      cosmwasm.wasm.v1.tx.MsgInstantiateContract2Response,
      cosmwasm.wasm.v1.tx.MsgExecuteContract,
      cosmwasm.wasm.v1.tx.MsgExecuteContractResponse,
      cosmwasm.wasm.v1.tx.MsgMigrateContract,
      cosmwasm.wasm.v1.tx.MsgMigrateContractResponse,
      cosmwasm.wasm.v1.tx.MsgUpdateAdmin,
      cosmwasm.wasm.v1.tx.MsgUpdateAdminResponse,
      cosmwasm.wasm.v1.tx.MsgClearAdmin,
      cosmwasm.wasm.v1.tx.MsgClearAdminResponse,
      cosmwasm.wasm.v1.tx.MsgUpdateInstantiateConfig,
      cosmwasm.wasm.v1.tx.MsgUpdateInstantiateConfigResponse,
      cosmwasm.wasm.v1.tx.MsgUpdateParams,
      cosmwasm.wasm.v1.tx.MsgUpdateParamsResponse,
      cosmwasm.wasm.v1.tx.MsgSudoContract,
      cosmwasm.wasm.v1.tx.MsgSudoContractResponse,
      cosmwasm.wasm.v1.tx.MsgPinCodes,
      cosmwasm.wasm.v1.tx.MsgPinCodesResponse,
      cosmwasm.wasm.v1.tx.MsgUnpinCodes,
      cosmwasm.wasm.v1.tx.MsgUnpinCodesResponse,
      cosmwasm.wasm.v1.tx.MsgStoreAndInstantiateContract,
      cosmwasm.wasm.v1.tx.MsgStoreAndInstantiateContractResponse,
      cosmwasm.wasm.v1.tx.MsgAddCodeUploadParamsAddresses,
      cosmwasm.wasm.v1.tx.MsgAddCodeUploadParamsAddressesResponse,
      cosmwasm.wasm.v1.tx.MsgRemoveCodeUploadParamsAddresses,
      cosmwasm.wasm.v1.tx.MsgRemoveCodeUploadParamsAddressesResponse,
      cosmwasm.wasm.v1.tx.MsgStoreAndMigrateContract,
      cosmwasm.wasm.v1.tx.MsgStoreAndMigrateContractResponse,
      cosmwasm.wasm.v1.tx.MsgUpdateContractLabel,
      cosmwasm.wasm.v1.tx.MsgUpdateContractLabelResponse
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """Chljb3Ntd2FzbS93YXNtL3YxL3R4LnByb3RvEhBjb3Ntd2FzbS53YXNtLnYxGh5jb3Ntb3MvYmFzZS92MWJldGExL2NvaW4uc
  HJvdG8aF2Nvc21vcy9tc2cvdjEvbXNnLnByb3RvGhRnb2dvcHJvdG8vZ29nby5wcm90bxocY29zbXdhc20vd2FzbS92MS90eXBlc
  y5wcm90bxoZY29zbW9zX3Byb3RvL2Nvc21vcy5wcm90bxoRYW1pbm8vYW1pbm8ucHJvdG8itgIKDE1zZ1N0b3JlQ29kZRI7CgZzZ
  W5kZXIYASABKAlCI+I/CBIGc2VuZGVy0rQtFGNvc21vcy5BZGRyZXNzU3RyaW5nUgZzZW5kZXISRwoOd2FzbV9ieXRlX2NvZGUYA
  iABKAxCIeI/DhIMd2FzbUJ5dGVDb2Rl4t4fDFdBU01CeXRlQ29kZVIMd2FzbUJ5dGVDb2RlEnEKFmluc3RhbnRpYXRlX3Blcm1pc
  3Npb24YBSABKAsyHi5jb3Ntd2FzbS53YXNtLnYxLkFjY2Vzc0NvbmZpZ0Ia4j8XEhVpbnN0YW50aWF0ZVBlcm1pc3Npb25SFWluc
  3RhbnRpYXRlUGVybWlzc2lvbjohguewKgZzZW5kZXKK57AqEXdhc20vTXNnU3RvcmVDb2RlSgQIAxAESgQIBBAFInEKFE1zZ1N0b
  3JlQ29kZVJlc3BvbnNlEi4KB2NvZGVfaWQYASABKARCFeI/CBIGY29kZUlk4t4fBkNvZGVJRFIGY29kZUlkEikKCGNoZWNrc3VtG
  AIgASgMQg3iPwoSCGNoZWNrc3VtUghjaGVja3N1bSLUAwoWTXNnSW5zdGFudGlhdGVDb250cmFjdBI7CgZzZW5kZXIYASABKAlCI
  +I/CBIGc2VuZGVy0rQtFGNvc21vcy5BZGRyZXNzU3RyaW5nUgZzZW5kZXISOAoFYWRtaW4YAiABKAlCIuI/BxIFYWRtaW7StC0UY
  29zbW9zLkFkZHJlc3NTdHJpbmdSBWFkbWluEi4KB2NvZGVfaWQYAyABKARCFeI/CBIGY29kZUlk4t4fBkNvZGVJRFIGY29kZUlkE
  iAKBWxhYmVsGAQgASgJQgriPwcSBWxhYmVsUgVsYWJlbBJACgNtc2cYBSABKAxCLuI/BRIDbXNn+t4fElJhd0NvbnRyYWN0TWVzc
  2FnZZrnsCoLaW5saW5lX2pzb25SA21zZxKBAQoFZnVuZHMYBiADKAsyGS5jb3Ntb3MuYmFzZS52MWJldGExLkNvaW5CUOI/BxIFZ
  nVuZHPI3h8Aqt8fKGdpdGh1Yi5jb20vY29zbW9zL2Nvc21vcy1zZGsvdHlwZXMuQ29pbnOa57AqDGxlZ2FjeV9jb2luc6jnsCoBU
  gVmdW5kczorguewKgZzZW5kZXKK57AqG3dhc20vTXNnSW5zdGFudGlhdGVDb250cmFjdCJ/Ch5Nc2dJbnN0YW50aWF0ZUNvbnRyY
  WN0UmVzcG9uc2USPgoHYWRkcmVzcxgBIAEoCUIk4j8JEgdhZGRyZXNz0rQtFGNvc21vcy5BZGRyZXNzU3RyaW5nUgdhZGRyZXNzE
  h0KBGRhdGEYAiABKAxCCeI/BhIEZGF0YVIEZGF0YSKbBAoXTXNnSW5zdGFudGlhdGVDb250cmFjdDISOwoGc2VuZGVyGAEgASgJQ
  iPiPwgSBnNlbmRlctK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZ1IGc2VuZGVyEjgKBWFkbWluGAIgASgJQiLiPwcSBWFkbWlu0rQtF
  GNvc21vcy5BZGRyZXNzU3RyaW5nUgVhZG1pbhIuCgdjb2RlX2lkGAMgASgEQhXiPwgSBmNvZGVJZOLeHwZDb2RlSURSBmNvZGVJZ
  BIgCgVsYWJlbBgEIAEoCUIK4j8HEgVsYWJlbFIFbGFiZWwSQAoDbXNnGAUgASgMQi7iPwUSA21zZ/reHxJSYXdDb250cmFjdE1lc
  3NhZ2Wa57AqC2lubGluZV9qc29uUgNtc2cSgQEKBWZ1bmRzGAYgAygLMhkuY29zbW9zLmJhc2UudjFiZXRhMS5Db2luQlDiPwcSB
  WZ1bmRzyN4fAKrfHyhnaXRodWIuY29tL2Nvc21vcy9jb3Ntb3Mtc2RrL3R5cGVzLkNvaW5zmuewKgxsZWdhY3lfY29pbnOo57AqA
  VIFZnVuZHMSHQoEc2FsdBgHIAEoDEIJ4j8GEgRzYWx0UgRzYWx0EiQKB2ZpeF9tc2cYCCABKAhCC+I/CBIGZml4TXNnUgZmaXhNc
  2c6LILnsCoGc2VuZGVyiuewKhx3YXNtL01zZ0luc3RhbnRpYXRlQ29udHJhY3QyIoABCh9Nc2dJbnN0YW50aWF0ZUNvbnRyYWN0M
  lJlc3BvbnNlEj4KB2FkZHJlc3MYASABKAlCJOI/CRIHYWRkcmVzc9K0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZ1IHYWRkcmVzcxIdC
  gRkYXRhGAIgASgMQgniPwYSBGRhdGFSBGRhdGEigwMKEk1zZ0V4ZWN1dGVDb250cmFjdBI7CgZzZW5kZXIYASABKAlCI+I/CBIGc
  2VuZGVy0rQtFGNvc21vcy5BZGRyZXNzU3RyaW5nUgZzZW5kZXISQQoIY29udHJhY3QYAiABKAlCJeI/ChIIY29udHJhY3TStC0UY
  29zbW9zLkFkZHJlc3NTdHJpbmdSCGNvbnRyYWN0EkAKA21zZxgDIAEoDEIu4j8FEgNtc2f63h8SUmF3Q29udHJhY3RNZXNzYWdlm
  uewKgtpbmxpbmVfanNvblIDbXNnEoEBCgVmdW5kcxgFIAMoCzIZLmNvc21vcy5iYXNlLnYxYmV0YTEuQ29pbkJQ4j8HEgVmdW5kc
  8jeHwCq3x8oZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNkay90eXBlcy5Db2luc5rnsCoMbGVnYWN5X2NvaW5zqOewKgFSBWZ1b
  mRzOieC57AqBnNlbmRlcornsCoXd2FzbS9Nc2dFeGVjdXRlQ29udHJhY3QiOwoaTXNnRXhlY3V0ZUNvbnRyYWN0UmVzcG9uc2USH
  QoEZGF0YRgBIAEoDEIJ4j8GEgRkYXRhUgRkYXRhIq8CChJNc2dNaWdyYXRlQ29udHJhY3QSOwoGc2VuZGVyGAEgASgJQiPiPwgSB
  nNlbmRlctK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZ1IGc2VuZGVyEkEKCGNvbnRyYWN0GAIgASgJQiXiPwoSCGNvbnRyYWN00rQtF
  GNvc21vcy5BZGRyZXNzU3RyaW5nUghjb250cmFjdBIuCgdjb2RlX2lkGAMgASgEQhXiPwgSBmNvZGVJZOLeHwZDb2RlSURSBmNvZ
  GVJZBJACgNtc2cYBCABKAxCLuI/BRIDbXNn+t4fElJhd0NvbnRyYWN0TWVzc2FnZZrnsCoLaW5saW5lX2pzb25SA21zZzonguewK
  gZzZW5kZXKK57AqF3dhc20vTXNnTWlncmF0ZUNvbnRyYWN0IjsKGk1zZ01pZ3JhdGVDb250cmFjdFJlc3BvbnNlEh0KBGRhdGEYA
  SABKAxCCeI/BhIEZGF0YVIEZGF0YSL5AQoOTXNnVXBkYXRlQWRtaW4SOwoGc2VuZGVyGAEgASgJQiPiPwgSBnNlbmRlctK0LRRjb
  3Ntb3MuQWRkcmVzc1N0cmluZ1IGc2VuZGVyEkIKCW5ld19hZG1pbhgCIAEoCUIl4j8KEghuZXdBZG1pbtK0LRRjb3Ntb3MuQWRkc
  mVzc1N0cmluZ1IIbmV3QWRtaW4SQQoIY29udHJhY3QYAyABKAlCJeI/ChIIY29udHJhY3TStC0UY29zbW9zLkFkZHJlc3NTdHJpb
  mdSCGNvbnRyYWN0OiOC57AqBnNlbmRlcornsCoTd2FzbS9Nc2dVcGRhdGVBZG1pbiIYChZNc2dVcGRhdGVBZG1pblJlc3BvbnNlI
  rMBCg1Nc2dDbGVhckFkbWluEjsKBnNlbmRlchgBIAEoCUIj4j8IEgZzZW5kZXLStC0UY29zbW9zLkFkZHJlc3NTdHJpbmdSBnNlb
  mRlchJBCghjb250cmFjdBgDIAEoCUIl4j8KEghjb250cmFjdNK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZ1IIY29udHJhY3Q6IoLns
  CoGc2VuZGVyiuewKhJ3YXNtL01zZ0NsZWFyQWRtaW4iFwoVTXNnQ2xlYXJBZG1pblJlc3BvbnNlIrcCChpNc2dVcGRhdGVJbnN0Y
  W50aWF0ZUNvbmZpZxI7CgZzZW5kZXIYASABKAlCI+I/CBIGc2VuZGVy0rQtFGNvc21vcy5BZGRyZXNzU3RyaW5nUgZzZW5kZXISL
  goHY29kZV9pZBgCIAEoBEIV4j8IEgZjb2RlSWTi3h8GQ29kZUlEUgZjb2RlSWQSewoabmV3X2luc3RhbnRpYXRlX3Blcm1pc3Npb
  24YAyABKAsyHi5jb3Ntd2FzbS53YXNtLnYxLkFjY2Vzc0NvbmZpZ0Id4j8aEhhuZXdJbnN0YW50aWF0ZVBlcm1pc3Npb25SGG5ld
  0luc3RhbnRpYXRlUGVybWlzc2lvbjovguewKgZzZW5kZXKK57AqH3dhc20vTXNnVXBkYXRlSW5zdGFudGlhdGVDb25maWciJAoiT
  XNnVXBkYXRlSW5zdGFudGlhdGVDb25maWdSZXNwb25zZSLIAQoPTXNnVXBkYXRlUGFyYW1zEkQKCWF1dGhvcml0eRgBIAEoCUIm4
  j8LEglhdXRob3JpdHnStC0UY29zbW9zLkFkZHJlc3NTdHJpbmdSCWF1dGhvcml0eRJGCgZwYXJhbXMYAiABKAsyGC5jb3Ntd2Fzb
  S53YXNtLnYxLlBhcmFtc0IU4j8IEgZwYXJhbXPI3h8AqOewKgFSBnBhcmFtczonguewKglhdXRob3JpdHmK57AqFHdhc20vTXNnV
  XBkYXRlUGFyYW1zIhkKF01zZ1VwZGF0ZVBhcmFtc1Jlc3BvbnNlIoUCCg9Nc2dTdWRvQ29udHJhY3QSRAoJYXV0aG9yaXR5GAEgA
  SgJQibiPwsSCWF1dGhvcml0edK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZ1IJYXV0aG9yaXR5EkEKCGNvbnRyYWN0GAIgASgJQiXiP
  woSCGNvbnRyYWN00rQtFGNvc21vcy5BZGRyZXNzU3RyaW5nUghjb250cmFjdBJACgNtc2cYAyABKAxCLuI/BRIDbXNn+t4fElJhd
  0NvbnRyYWN0TWVzc2FnZZrnsCoLaW5saW5lX2pzb25SA21zZzonguewKglhdXRob3JpdHmK57AqFHdhc20vTXNnU3Vkb0NvbnRyY
  WN0IjgKF01zZ1N1ZG9Db250cmFjdFJlc3BvbnNlEh0KBGRhdGEYASABKAxCCeI/BhIEZGF0YVIEZGF0YSK/AQoLTXNnUGluQ29kZ
  XMSRAoJYXV0aG9yaXR5GAEgASgJQibiPwsSCWF1dGhvcml0edK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZ1IJYXV0aG9yaXR5EkUKC
  GNvZGVfaWRzGAIgAygEQiriPwkSB2NvZGVJZHPi3h8HQ29kZUlEc/LeHw95YW1sOiJjb2RlX2lkcyJSB2NvZGVJZHM6I4LnsCoJY
  XV0aG9yaXR5iuewKhB3YXNtL01zZ1BpbkNvZGVzIhUKE01zZ1BpbkNvZGVzUmVzcG9uc2UiwwEKDU1zZ1VucGluQ29kZXMSRAoJY
  XV0aG9yaXR5GAEgASgJQibiPwsSCWF1dGhvcml0edK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZ1IJYXV0aG9yaXR5EkUKCGNvZGVfa
  WRzGAIgAygEQiriPwkSB2NvZGVJZHPi3h8HQ29kZUlEc/LeHw95YW1sOiJjb2RlX2lkcyJSB2NvZGVJZHM6JYLnsCoJYXV0aG9ya
  XR5iuewKhJ3YXNtL01zZ1VucGluQ29kZXMiFwoVTXNnVW5waW5Db2Rlc1Jlc3BvbnNlIqQGCh5Nc2dTdG9yZUFuZEluc3RhbnRpY
  XRlQ29udHJhY3QSRAoJYXV0aG9yaXR5GAEgASgJQibiPwsSCWF1dGhvcml0edK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZ1IJYXV0a
  G9yaXR5EkcKDndhc21fYnl0ZV9jb2RlGAMgASgMQiHiPw4SDHdhc21CeXRlQ29kZeLeHwxXQVNNQnl0ZUNvZGVSDHdhc21CeXRlQ
  29kZRJxChZpbnN0YW50aWF0ZV9wZXJtaXNzaW9uGAQgASgLMh4uY29zbXdhc20ud2FzbS52MS5BY2Nlc3NDb25maWdCGuI/FxIVa
  W5zdGFudGlhdGVQZXJtaXNzaW9uUhVpbnN0YW50aWF0ZVBlcm1pc3Npb24SLQoKdW5waW5fY29kZRgFIAEoCEIO4j8LEgl1bnBpb
  kNvZGVSCXVucGluQ29kZRI4CgVhZG1pbhgGIAEoCUIi4j8HEgVhZG1pbtK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZ1IFYWRtaW4SI
  AoFbGFiZWwYByABKAlCCuI/BxIFbGFiZWxSBWxhYmVsEkAKA21zZxgIIAEoDEIu4j8FEgNtc2f63h8SUmF3Q29udHJhY3RNZXNzY
  WdlmuewKgtpbmxpbmVfanNvblIDbXNnEoEBCgVmdW5kcxgJIAMoCzIZLmNvc21vcy5iYXNlLnYxYmV0YTEuQ29pbkJQ4j8HEgVmd
  W5kc8jeHwCq3x8oZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNkay90eXBlcy5Db2luc5rnsCoMbGVnYWN5X2NvaW5zqOewKgFSB
  WZ1bmRzEiMKBnNvdXJjZRgKIAEoCUIL4j8IEgZzb3VyY2VSBnNvdXJjZRImCgdidWlsZGVyGAsgASgJQgziPwkSB2J1aWxkZXJSB
  2J1aWxkZXISKgoJY29kZV9oYXNoGAwgASgMQg3iPwoSCGNvZGVIYXNoUghjb2RlSGFzaDo2guewKglhdXRob3JpdHmK57AqI3dhc
  20vTXNnU3RvcmVBbmRJbnN0YW50aWF0ZUNvbnRyYWN0IocBCiZNc2dTdG9yZUFuZEluc3RhbnRpYXRlQ29udHJhY3RSZXNwb25zZ
  RI+CgdhZGRyZXNzGAEgASgJQiTiPwkSB2FkZHJlc3PStC0UY29zbW9zLkFkZHJlc3NTdHJpbmdSB2FkZHJlc3MSHQoEZGF0YRgCI
  AEoDEIJ4j8GEgRkYXRhUgRkYXRhIuIBCh9Nc2dBZGRDb2RlVXBsb2FkUGFyYW1zQWRkcmVzc2VzEkQKCWF1dGhvcml0eRgBIAEoC
  UIm4j8LEglhdXRob3JpdHnStC0UY29zbW9zLkFkZHJlc3NTdHJpbmdSCWF1dGhvcml0eRJACglhZGRyZXNzZXMYAiADKAlCIuI/C
  xIJYWRkcmVzc2Vz8t4fEHlhbWw6ImFkZHJlc3NlcyJSCWFkZHJlc3Nlczo3guewKglhdXRob3JpdHmK57AqJHdhc20vTXNnQWRkQ
  29kZVVwbG9hZFBhcmFtc0FkZHJlc3NlcyIpCidNc2dBZGRDb2RlVXBsb2FkUGFyYW1zQWRkcmVzc2VzUmVzcG9uc2Ui6AEKIk1zZ
  1JlbW92ZUNvZGVVcGxvYWRQYXJhbXNBZGRyZXNzZXMSRAoJYXV0aG9yaXR5GAEgASgJQibiPwsSCWF1dGhvcml0edK0LRRjb3Ntb
  3MuQWRkcmVzc1N0cmluZ1IJYXV0aG9yaXR5EkAKCWFkZHJlc3NlcxgCIAMoCUIi4j8LEglhZGRyZXNzZXPy3h8QeWFtbDoiYWRkc
  mVzc2VzIlIJYWRkcmVzc2VzOjqC57AqCWF1dGhvcml0eYrnsCond2FzbS9Nc2dSZW1vdmVDb2RlVXBsb2FkUGFyYW1zQWRkcmVzc
  2VzIiwKKk1zZ1JlbW92ZUNvZGVVcGxvYWRQYXJhbXNBZGRyZXNzZXNSZXNwb25zZSK/AwoaTXNnU3RvcmVBbmRNaWdyYXRlQ29ud
  HJhY3QSRAoJYXV0aG9yaXR5GAEgASgJQibiPwsSCWF1dGhvcml0edK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZ1IJYXV0aG9yaXR5E
  kcKDndhc21fYnl0ZV9jb2RlGAIgASgMQiHiPw4SDHdhc21CeXRlQ29kZeLeHwxXQVNNQnl0ZUNvZGVSDHdhc21CeXRlQ29kZRJxC
  hZpbnN0YW50aWF0ZV9wZXJtaXNzaW9uGAMgASgLMh4uY29zbXdhc20ud2FzbS52MS5BY2Nlc3NDb25maWdCGuI/FxIVaW5zdGFud
  GlhdGVQZXJtaXNzaW9uUhVpbnN0YW50aWF0ZVBlcm1pc3Npb24SKQoIY29udHJhY3QYBCABKAlCDeI/ChIIY29udHJhY3RSCGNvb
  nRyYWN0EkAKA21zZxgFIAEoDEIu4j8FEgNtc2f63h8SUmF3Q29udHJhY3RNZXNzYWdlmuewKgtpbmxpbmVfanNvblIDbXNnOjKC5
  7AqCWF1dGhvcml0eYrnsCofd2FzbS9Nc2dTdG9yZUFuZE1pZ3JhdGVDb250cmFjdCKeAQoiTXNnU3RvcmVBbmRNaWdyYXRlQ29ud
  HJhY3RSZXNwb25zZRIuCgdjb2RlX2lkGAEgASgEQhXiPwgSBmNvZGVJZOLeHwZDb2RlSURSBmNvZGVJZBIpCghjaGVja3N1bRgCI
  AEoDEIN4j8KEghjaGVja3N1bVIIY2hlY2tzdW0SHQoEZGF0YRgDIAEoDEIJ4j8GEgRkYXRhUgRkYXRhIvEBChZNc2dVcGRhdGVDb
  250cmFjdExhYmVsEjsKBnNlbmRlchgBIAEoCUIj4j8IEgZzZW5kZXLStC0UY29zbW9zLkFkZHJlc3NTdHJpbmdSBnNlbmRlchIqC
  gluZXdfbGFiZWwYAiABKAlCDeI/ChIIbmV3TGFiZWxSCG5ld0xhYmVsEkEKCGNvbnRyYWN0GAMgASgJQiXiPwoSCGNvbnRyYWN00
  rQtFGNvc21vcy5BZGRyZXNzU3RyaW5nUghjb250cmFjdDorguewKgZzZW5kZXKK57AqG3dhc20vTXNnVXBkYXRlQ29udHJhY3RMY
  WJlbCIgCh5Nc2dVcGRhdGVDb250cmFjdExhYmVsUmVzcG9uc2Uy1Q4KA01zZxJTCglTdG9yZUNvZGUSHi5jb3Ntd2FzbS53YXNtL
  nYxLk1zZ1N0b3JlQ29kZRomLmNvc213YXNtLndhc20udjEuTXNnU3RvcmVDb2RlUmVzcG9uc2UScQoTSW5zdGFudGlhdGVDb250c
  mFjdBIoLmNvc213YXNtLndhc20udjEuTXNnSW5zdGFudGlhdGVDb250cmFjdBowLmNvc213YXNtLndhc20udjEuTXNnSW5zdGFud
  GlhdGVDb250cmFjdFJlc3BvbnNlEnQKFEluc3RhbnRpYXRlQ29udHJhY3QyEikuY29zbXdhc20ud2FzbS52MS5Nc2dJbnN0YW50a
  WF0ZUNvbnRyYWN0MhoxLmNvc213YXNtLndhc20udjEuTXNnSW5zdGFudGlhdGVDb250cmFjdDJSZXNwb25zZRJlCg9FeGVjdXRlQ
  29udHJhY3QSJC5jb3Ntd2FzbS53YXNtLnYxLk1zZ0V4ZWN1dGVDb250cmFjdBosLmNvc213YXNtLndhc20udjEuTXNnRXhlY3V0Z
  UNvbnRyYWN0UmVzcG9uc2USZQoPTWlncmF0ZUNvbnRyYWN0EiQuY29zbXdhc20ud2FzbS52MS5Nc2dNaWdyYXRlQ29udHJhY3QaL
  C5jb3Ntd2FzbS53YXNtLnYxLk1zZ01pZ3JhdGVDb250cmFjdFJlc3BvbnNlElkKC1VwZGF0ZUFkbWluEiAuY29zbXdhc20ud2Fzb
  S52MS5Nc2dVcGRhdGVBZG1pbhooLmNvc213YXNtLndhc20udjEuTXNnVXBkYXRlQWRtaW5SZXNwb25zZRJWCgpDbGVhckFkbWluE
  h8uY29zbXdhc20ud2FzbS52MS5Nc2dDbGVhckFkbWluGicuY29zbXdhc20ud2FzbS52MS5Nc2dDbGVhckFkbWluUmVzcG9uc2USf
  QoXVXBkYXRlSW5zdGFudGlhdGVDb25maWcSLC5jb3Ntd2FzbS53YXNtLnYxLk1zZ1VwZGF0ZUluc3RhbnRpYXRlQ29uZmlnGjQuY
  29zbXdhc20ud2FzbS52MS5Nc2dVcGRhdGVJbnN0YW50aWF0ZUNvbmZpZ1Jlc3BvbnNlElwKDFVwZGF0ZVBhcmFtcxIhLmNvc213Y
  XNtLndhc20udjEuTXNnVXBkYXRlUGFyYW1zGikuY29zbXdhc20ud2FzbS52MS5Nc2dVcGRhdGVQYXJhbXNSZXNwb25zZRJcCgxTd
  WRvQ29udHJhY3QSIS5jb3Ntd2FzbS53YXNtLnYxLk1zZ1N1ZG9Db250cmFjdBopLmNvc213YXNtLndhc20udjEuTXNnU3Vkb0Nvb
  nRyYWN0UmVzcG9uc2USUAoIUGluQ29kZXMSHS5jb3Ntd2FzbS53YXNtLnYxLk1zZ1BpbkNvZGVzGiUuY29zbXdhc20ud2FzbS52M
  S5Nc2dQaW5Db2Rlc1Jlc3BvbnNlElYKClVucGluQ29kZXMSHy5jb3Ntd2FzbS53YXNtLnYxLk1zZ1VucGluQ29kZXMaJy5jb3Ntd
  2FzbS53YXNtLnYxLk1zZ1VucGluQ29kZXNSZXNwb25zZRKJAQobU3RvcmVBbmRJbnN0YW50aWF0ZUNvbnRyYWN0EjAuY29zbXdhc
  20ud2FzbS52MS5Nc2dTdG9yZUFuZEluc3RhbnRpYXRlQ29udHJhY3QaOC5jb3Ntd2FzbS53YXNtLnYxLk1zZ1N0b3JlQW5kSW5zd
  GFudGlhdGVDb250cmFjdFJlc3BvbnNlEpUBCh9SZW1vdmVDb2RlVXBsb2FkUGFyYW1zQWRkcmVzc2VzEjQuY29zbXdhc20ud2Fzb
  S52MS5Nc2dSZW1vdmVDb2RlVXBsb2FkUGFyYW1zQWRkcmVzc2VzGjwuY29zbXdhc20ud2FzbS52MS5Nc2dSZW1vdmVDb2RlVXBsb
  2FkUGFyYW1zQWRkcmVzc2VzUmVzcG9uc2USjAEKHEFkZENvZGVVcGxvYWRQYXJhbXNBZGRyZXNzZXMSMS5jb3Ntd2FzbS53YXNtL
  nYxLk1zZ0FkZENvZGVVcGxvYWRQYXJhbXNBZGRyZXNzZXMaOS5jb3Ntd2FzbS53YXNtLnYxLk1zZ0FkZENvZGVVcGxvYWRQYXJhb
  XNBZGRyZXNzZXNSZXNwb25zZRJ9ChdTdG9yZUFuZE1pZ3JhdGVDb250cmFjdBIsLmNvc213YXNtLndhc20udjEuTXNnU3RvcmVBb
  mRNaWdyYXRlQ29udHJhY3QaNC5jb3Ntd2FzbS53YXNtLnYxLk1zZ1N0b3JlQW5kTWlncmF0ZUNvbnRyYWN0UmVzcG9uc2UScQoTV
  XBkYXRlQ29udHJhY3RMYWJlbBIoLmNvc213YXNtLndhc20udjEuTXNnVXBkYXRlQ29udHJhY3RMYWJlbBowLmNvc213YXNtLndhc
  20udjEuTXNnVXBkYXRlQ29udHJhY3RMYWJlbFJlc3BvbnNlGgWA57AqAUIsWiZnaXRodWIuY29tL0Nvc21XYXNtL3dhc21kL3gvd
  2FzbS90eXBlc8jhHgBiBnByb3RvMw=="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      cosmos.base.v1beta1.coin.CoinProto.javaDescriptor,
      cosmos.msg.v1.msg.MsgProto.javaDescriptor,
      com.google.protobuf.gogo.GogoProto.javaDescriptor,
      cosmwasm.wasm.v1.types.TypesProto.javaDescriptor,
      cosmos_proto.cosmos.CosmosProto.javaDescriptor,
      amino.amino.AminoProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}