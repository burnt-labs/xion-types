// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmwasm.wasm.v1.genesis

/** Contract struct encompasses ContractAddress, ContractInfo, and ContractState
  */
@SerialVersionUID(0L)
final case class Contract(
    contractAddress: _root_.scala.Predef.String = "",
    contractInfo: _root_.scala.Option[cosmwasm.wasm.v1.types.ContractInfo] = _root_.scala.None,
    contractState: _root_.scala.Seq[cosmwasm.wasm.v1.types.Model] = _root_.scala.Seq.empty,
    contractCodeHistory: _root_.scala.Seq[cosmwasm.wasm.v1.types.ContractCodeHistoryEntry] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Contract] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = contractAddress
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      if (contractInfo.isDefined) {
        val __value = contractInfo.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      contractState.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      contractCodeHistory.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = contractAddress
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      contractInfo.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      contractState.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      contractCodeHistory.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withContractAddress(__v: _root_.scala.Predef.String): Contract = copy(contractAddress = __v)
    def getContractInfo: cosmwasm.wasm.v1.types.ContractInfo = contractInfo.getOrElse(cosmwasm.wasm.v1.types.ContractInfo.defaultInstance)
    def clearContractInfo: Contract = copy(contractInfo = _root_.scala.None)
    def withContractInfo(__v: cosmwasm.wasm.v1.types.ContractInfo): Contract = copy(contractInfo = Option(__v))
    def clearContractState = copy(contractState = _root_.scala.Seq.empty)
    def addContractState(__vs: cosmwasm.wasm.v1.types.Model *): Contract = addAllContractState(__vs)
    def addAllContractState(__vs: Iterable[cosmwasm.wasm.v1.types.Model]): Contract = copy(contractState = contractState ++ __vs)
    def withContractState(__v: _root_.scala.Seq[cosmwasm.wasm.v1.types.Model]): Contract = copy(contractState = __v)
    def clearContractCodeHistory = copy(contractCodeHistory = _root_.scala.Seq.empty)
    def addContractCodeHistory(__vs: cosmwasm.wasm.v1.types.ContractCodeHistoryEntry *): Contract = addAllContractCodeHistory(__vs)
    def addAllContractCodeHistory(__vs: Iterable[cosmwasm.wasm.v1.types.ContractCodeHistoryEntry]): Contract = copy(contractCodeHistory = contractCodeHistory ++ __vs)
    def withContractCodeHistory(__v: _root_.scala.Seq[cosmwasm.wasm.v1.types.ContractCodeHistoryEntry]): Contract = copy(contractCodeHistory = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = contractAddress
          if (__t != "") __t else null
        }
        case 2 => contractInfo.orNull
        case 3 => contractState
        case 4 => contractCodeHistory
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(contractAddress)
        case 2 => contractInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(contractState.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(contractCodeHistory.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmwasm.wasm.v1.genesis.Contract.type = cosmwasm.wasm.v1.genesis.Contract
    // @@protoc_insertion_point(GeneratedMessage[cosmwasm.wasm.v1.Contract])
}

object Contract extends scalapb.GeneratedMessageCompanion[cosmwasm.wasm.v1.genesis.Contract] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmwasm.wasm.v1.genesis.Contract] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmwasm.wasm.v1.genesis.Contract = {
    var __contractAddress: _root_.scala.Predef.String = ""
    var __contractInfo: _root_.scala.Option[cosmwasm.wasm.v1.types.ContractInfo] = _root_.scala.None
    val __contractState: _root_.scala.collection.immutable.VectorBuilder[cosmwasm.wasm.v1.types.Model] = new _root_.scala.collection.immutable.VectorBuilder[cosmwasm.wasm.v1.types.Model]
    val __contractCodeHistory: _root_.scala.collection.immutable.VectorBuilder[cosmwasm.wasm.v1.types.ContractCodeHistoryEntry] = new _root_.scala.collection.immutable.VectorBuilder[cosmwasm.wasm.v1.types.ContractCodeHistoryEntry]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __contractAddress = _input__.readStringRequireUtf8()
        case 18 =>
          __contractInfo = _root_.scala.Option(__contractInfo.fold(_root_.scalapb.LiteParser.readMessage[cosmwasm.wasm.v1.types.ContractInfo](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __contractState += _root_.scalapb.LiteParser.readMessage[cosmwasm.wasm.v1.types.Model](_input__)
        case 34 =>
          __contractCodeHistory += _root_.scalapb.LiteParser.readMessage[cosmwasm.wasm.v1.types.ContractCodeHistoryEntry](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmwasm.wasm.v1.genesis.Contract(
        contractAddress = __contractAddress,
        contractInfo = __contractInfo,
        contractState = __contractState.result(),
        contractCodeHistory = __contractCodeHistory.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmwasm.wasm.v1.genesis.Contract] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmwasm.wasm.v1.genesis.Contract(
        contractAddress = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        contractInfo = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[cosmwasm.wasm.v1.types.ContractInfo]]),
        contractState = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[cosmwasm.wasm.v1.types.Model]]).getOrElse(_root_.scala.Seq.empty),
        contractCodeHistory = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[cosmwasm.wasm.v1.types.ContractCodeHistoryEntry]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmwasm.wasm.v1.genesis.GenesisProto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmwasm.wasm.v1.genesis.GenesisProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = cosmwasm.wasm.v1.types.ContractInfo
      case 3 => __out = cosmwasm.wasm.v1.types.Model
      case 4 => __out = cosmwasm.wasm.v1.types.ContractCodeHistoryEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmwasm.wasm.v1.genesis.Contract(
    contractAddress = "",
    contractInfo = _root_.scala.None,
    contractState = _root_.scala.Seq.empty,
    contractCodeHistory = _root_.scala.Seq.empty
  )
  implicit class ContractLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmwasm.wasm.v1.genesis.Contract]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmwasm.wasm.v1.genesis.Contract](_l) {
    def contractAddress: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.contractAddress)((c_, f_) => c_.copy(contractAddress = f_))
    def contractInfo: _root_.scalapb.lenses.Lens[UpperPB, cosmwasm.wasm.v1.types.ContractInfo] = field(_.getContractInfo)((c_, f_) => c_.copy(contractInfo = _root_.scala.Option(f_)))
    def optionalContractInfo: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[cosmwasm.wasm.v1.types.ContractInfo]] = field(_.contractInfo)((c_, f_) => c_.copy(contractInfo = f_))
    def contractState: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmwasm.wasm.v1.types.Model]] = field(_.contractState)((c_, f_) => c_.copy(contractState = f_))
    def contractCodeHistory: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmwasm.wasm.v1.types.ContractCodeHistoryEntry]] = field(_.contractCodeHistory)((c_, f_) => c_.copy(contractCodeHistory = f_))
  }
  final val CONTRACT_ADDRESS_FIELD_NUMBER = 1
  final val CONTRACT_INFO_FIELD_NUMBER = 2
  final val CONTRACT_STATE_FIELD_NUMBER = 3
  final val CONTRACT_CODE_HISTORY_FIELD_NUMBER = 4
  def of(
    contractAddress: _root_.scala.Predef.String,
    contractInfo: _root_.scala.Option[cosmwasm.wasm.v1.types.ContractInfo],
    contractState: _root_.scala.Seq[cosmwasm.wasm.v1.types.Model],
    contractCodeHistory: _root_.scala.Seq[cosmwasm.wasm.v1.types.ContractCodeHistoryEntry]
  ): _root_.cosmwasm.wasm.v1.genesis.Contract = _root_.cosmwasm.wasm.v1.genesis.Contract(
    contractAddress,
    contractInfo,
    contractState,
    contractCodeHistory
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmwasm.wasm.v1.Contract])
}
