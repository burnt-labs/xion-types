// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.base.abci.v1beta1

/** TxResponse defines a structure containing relevant tx data and metadata. The
  * tags are stringified and the log is JSON decoded.
  *
  * @param height
  *   The block height
  * @param txhash
  *   The transaction hash.
  * @param codespace
  *   Namespace for the Code
  * @param code
  *   Response code.
  * @param data
  *   Result bytes, if any.
  * @param rawLog
  *   The output of the application's logger (raw string). May be
  *   non-deterministic.
  * @param logs
  *   The output of the application's logger (typed). May be non-deterministic.
  * @param info
  *   Additional information. May be non-deterministic.
  * @param gasWanted
  *   Amount of gas requested for transaction.
  * @param gasUsed
  *   Amount of gas consumed by transaction.
  * @param tx
  *   The request transaction bytes.
  * @param timestamp
  *   Time of the previous block. For heights &gt; 1, it's the weighted median of
  *   the timestamps of the valid votes in the block.LastCommit. For height == 1,
  *   it's genesis time.
  * @param events
  *   Events defines all the events emitted by processing a transaction. Note,
  *   these events include those emitted by processing all the messages and those
  *   emitted from the ante. Whereas Logs contains the events, with
  *   additional metadata, emitted only by processing the messages.
  */
@SerialVersionUID(0L)
final case class TxResponse(
    height: _root_.scala.Long = 0L,
    txhash: _root_.scala.Predef.String = "",
    codespace: _root_.scala.Predef.String = "",
    code: _root_.scala.Int = 0,
    data: _root_.scala.Predef.String = "",
    rawLog: _root_.scala.Predef.String = "",
    logs: _root_.scala.Seq[cosmos.base.abci.v1beta1.ABCIMessageLog] = _root_.scala.Seq.empty,
    info: _root_.scala.Predef.String = "",
    gasWanted: _root_.scala.Long = 0L,
    gasUsed: _root_.scala.Long = 0L,
    tx: _root_.scala.Option[com.google.protobuf.any.Any] = _root_.scala.None,
    timestamp: _root_.scala.Predef.String = "",
    events: _root_.scala.Seq[tendermint.abci.Event] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TxResponse] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = height
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
        }
      };
      
      {
        val __value = txhash
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = codespace
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = code
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(4, __value)
        }
      };
      
      {
        val __value = data
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      
      {
        val __value = rawLog
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
        }
      };
      logs.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = info
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, __value)
        }
      };
      
      {
        val __value = gasWanted
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(9, __value)
        }
      };
      
      {
        val __value = gasUsed
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(10, __value)
        }
      };
      if (tx.isDefined) {
        val __value = tx.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = timestamp
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(12, __value)
        }
      };
      events.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = height
        if (__v != 0L) {
          _output__.writeInt64(1, __v)
        }
      };
      {
        val __v = txhash
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = codespace
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = code
        if (__v != 0) {
          _output__.writeUInt32(4, __v)
        }
      };
      {
        val __v = data
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = rawLog
        if (!__v.isEmpty) {
          _output__.writeString(6, __v)
        }
      };
      logs.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = info
        if (!__v.isEmpty) {
          _output__.writeString(8, __v)
        }
      };
      {
        val __v = gasWanted
        if (__v != 0L) {
          _output__.writeInt64(9, __v)
        }
      };
      {
        val __v = gasUsed
        if (__v != 0L) {
          _output__.writeInt64(10, __v)
        }
      };
      tx.foreach { __v =>
        val __m = __v
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = timestamp
        if (!__v.isEmpty) {
          _output__.writeString(12, __v)
        }
      };
      events.foreach { __v =>
        val __m = __v
        _output__.writeTag(13, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withHeight(__v: _root_.scala.Long): TxResponse = copy(height = __v)
    def withTxhash(__v: _root_.scala.Predef.String): TxResponse = copy(txhash = __v)
    def withCodespace(__v: _root_.scala.Predef.String): TxResponse = copy(codespace = __v)
    def withCode(__v: _root_.scala.Int): TxResponse = copy(code = __v)
    def withData(__v: _root_.scala.Predef.String): TxResponse = copy(data = __v)
    def withRawLog(__v: _root_.scala.Predef.String): TxResponse = copy(rawLog = __v)
    def clearLogs = copy(logs = _root_.scala.Seq.empty)
    def addLogs(__vs: cosmos.base.abci.v1beta1.ABCIMessageLog *): TxResponse = addAllLogs(__vs)
    def addAllLogs(__vs: Iterable[cosmos.base.abci.v1beta1.ABCIMessageLog]): TxResponse = copy(logs = logs ++ __vs)
    def withLogs(__v: _root_.scala.Seq[cosmos.base.abci.v1beta1.ABCIMessageLog]): TxResponse = copy(logs = __v)
    def withInfo(__v: _root_.scala.Predef.String): TxResponse = copy(info = __v)
    def withGasWanted(__v: _root_.scala.Long): TxResponse = copy(gasWanted = __v)
    def withGasUsed(__v: _root_.scala.Long): TxResponse = copy(gasUsed = __v)
    def getTx: com.google.protobuf.any.Any = tx.getOrElse(com.google.protobuf.any.Any.defaultInstance)
    def clearTx: TxResponse = copy(tx = _root_.scala.None)
    def withTx(__v: com.google.protobuf.any.Any): TxResponse = copy(tx = Option(__v))
    def withTimestamp(__v: _root_.scala.Predef.String): TxResponse = copy(timestamp = __v)
    def clearEvents = copy(events = _root_.scala.Seq.empty)
    def addEvents(__vs: tendermint.abci.Event *): TxResponse = addAllEvents(__vs)
    def addAllEvents(__vs: Iterable[tendermint.abci.Event]): TxResponse = copy(events = events ++ __vs)
    def withEvents(__v: _root_.scala.Seq[tendermint.abci.Event]): TxResponse = copy(events = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = height
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = txhash
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = codespace
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = code
          if (__t != 0) __t else null
        }
        case 5 => {
          val __t = data
          if (__t != "") __t else null
        }
        case 6 => {
          val __t = rawLog
          if (__t != "") __t else null
        }
        case 7 => logs
        case 8 => {
          val __t = info
          if (__t != "") __t else null
        }
        case 9 => {
          val __t = gasWanted
          if (__t != 0L) __t else null
        }
        case 10 => {
          val __t = gasUsed
          if (__t != 0L) __t else null
        }
        case 11 => tx.orNull
        case 12 => {
          val __t = timestamp
          if (__t != "") __t else null
        }
        case 13 => events
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(height)
        case 2 => _root_.scalapb.descriptors.PString(txhash)
        case 3 => _root_.scalapb.descriptors.PString(codespace)
        case 4 => _root_.scalapb.descriptors.PInt(code)
        case 5 => _root_.scalapb.descriptors.PString(data)
        case 6 => _root_.scalapb.descriptors.PString(rawLog)
        case 7 => _root_.scalapb.descriptors.PRepeated(logs.iterator.map(_.toPMessage).toVector)
        case 8 => _root_.scalapb.descriptors.PString(info)
        case 9 => _root_.scalapb.descriptors.PLong(gasWanted)
        case 10 => _root_.scalapb.descriptors.PLong(gasUsed)
        case 11 => tx.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => _root_.scalapb.descriptors.PString(timestamp)
        case 13 => _root_.scalapb.descriptors.PRepeated(events.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.base.abci.v1beta1.TxResponse.type = cosmos.base.abci.v1beta1.TxResponse
    // @@protoc_insertion_point(GeneratedMessage[cosmos.base.abci.v1beta1.TxResponse])
}

object TxResponse extends scalapb.GeneratedMessageCompanion[cosmos.base.abci.v1beta1.TxResponse] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.base.abci.v1beta1.TxResponse] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.base.abci.v1beta1.TxResponse = {
    var __height: _root_.scala.Long = 0L
    var __txhash: _root_.scala.Predef.String = ""
    var __codespace: _root_.scala.Predef.String = ""
    var __code: _root_.scala.Int = 0
    var __data: _root_.scala.Predef.String = ""
    var __rawLog: _root_.scala.Predef.String = ""
    val __logs: _root_.scala.collection.immutable.VectorBuilder[cosmos.base.abci.v1beta1.ABCIMessageLog] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.base.abci.v1beta1.ABCIMessageLog]
    var __info: _root_.scala.Predef.String = ""
    var __gasWanted: _root_.scala.Long = 0L
    var __gasUsed: _root_.scala.Long = 0L
    var __tx: _root_.scala.Option[com.google.protobuf.any.Any] = _root_.scala.None
    var __timestamp: _root_.scala.Predef.String = ""
    val __events: _root_.scala.collection.immutable.VectorBuilder[tendermint.abci.Event] = new _root_.scala.collection.immutable.VectorBuilder[tendermint.abci.Event]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __height = _input__.readInt64()
        case 18 =>
          __txhash = _input__.readStringRequireUtf8()
        case 26 =>
          __codespace = _input__.readStringRequireUtf8()
        case 32 =>
          __code = _input__.readUInt32()
        case 42 =>
          __data = _input__.readStringRequireUtf8()
        case 50 =>
          __rawLog = _input__.readStringRequireUtf8()
        case 58 =>
          __logs += _root_.scalapb.LiteParser.readMessage[cosmos.base.abci.v1beta1.ABCIMessageLog](_input__)
        case 66 =>
          __info = _input__.readStringRequireUtf8()
        case 72 =>
          __gasWanted = _input__.readInt64()
        case 80 =>
          __gasUsed = _input__.readInt64()
        case 90 =>
          __tx = _root_.scala.Option(__tx.fold(_root_.scalapb.LiteParser.readMessage[com.google.protobuf.any.Any](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 98 =>
          __timestamp = _input__.readStringRequireUtf8()
        case 106 =>
          __events += _root_.scalapb.LiteParser.readMessage[tendermint.abci.Event](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.base.abci.v1beta1.TxResponse(
        height = __height,
        txhash = __txhash,
        codespace = __codespace,
        code = __code,
        data = __data,
        rawLog = __rawLog,
        logs = __logs.result(),
        info = __info,
        gasWanted = __gasWanted,
        gasUsed = __gasUsed,
        tx = __tx,
        timestamp = __timestamp,
        events = __events.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.base.abci.v1beta1.TxResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.base.abci.v1beta1.TxResponse(
        height = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        txhash = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        codespace = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        code = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        data = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        rawLog = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        logs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[cosmos.base.abci.v1beta1.ABCIMessageLog]]).getOrElse(_root_.scala.Seq.empty),
        info = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        gasWanted = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        gasUsed = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        tx = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.any.Any]]),
        timestamp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        events = __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.Seq[tendermint.abci.Event]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.base.abci.v1beta1.AbciProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.base.abci.v1beta1.AbciProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 7 => __out = cosmos.base.abci.v1beta1.ABCIMessageLog
      case 11 => __out = com.google.protobuf.any.Any
      case 13 => __out = tendermint.abci.Event
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.base.abci.v1beta1.TxResponse(
    height = 0L,
    txhash = "",
    codespace = "",
    code = 0,
    data = "",
    rawLog = "",
    logs = _root_.scala.Seq.empty,
    info = "",
    gasWanted = 0L,
    gasUsed = 0L,
    tx = _root_.scala.None,
    timestamp = "",
    events = _root_.scala.Seq.empty
  )
  implicit class TxResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.base.abci.v1beta1.TxResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.base.abci.v1beta1.TxResponse](_l) {
    def height: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.height)((c_, f_) => c_.copy(height = f_))
    def txhash: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.txhash)((c_, f_) => c_.copy(txhash = f_))
    def codespace: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.codespace)((c_, f_) => c_.copy(codespace = f_))
    def code: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.code)((c_, f_) => c_.copy(code = f_))
    def data: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.data)((c_, f_) => c_.copy(data = f_))
    def rawLog: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.rawLog)((c_, f_) => c_.copy(rawLog = f_))
    def logs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.base.abci.v1beta1.ABCIMessageLog]] = field(_.logs)((c_, f_) => c_.copy(logs = f_))
    def info: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.info)((c_, f_) => c_.copy(info = f_))
    def gasWanted: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.gasWanted)((c_, f_) => c_.copy(gasWanted = f_))
    def gasUsed: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.gasUsed)((c_, f_) => c_.copy(gasUsed = f_))
    def tx: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.any.Any] = field(_.getTx)((c_, f_) => c_.copy(tx = _root_.scala.Option(f_)))
    def optionalTx: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.any.Any]] = field(_.tx)((c_, f_) => c_.copy(tx = f_))
    def timestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.timestamp)((c_, f_) => c_.copy(timestamp = f_))
    def events: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[tendermint.abci.Event]] = field(_.events)((c_, f_) => c_.copy(events = f_))
  }
  final val HEIGHT_FIELD_NUMBER = 1
  final val TXHASH_FIELD_NUMBER = 2
  final val CODESPACE_FIELD_NUMBER = 3
  final val CODE_FIELD_NUMBER = 4
  final val DATA_FIELD_NUMBER = 5
  final val RAW_LOG_FIELD_NUMBER = 6
  final val LOGS_FIELD_NUMBER = 7
  final val INFO_FIELD_NUMBER = 8
  final val GAS_WANTED_FIELD_NUMBER = 9
  final val GAS_USED_FIELD_NUMBER = 10
  final val TX_FIELD_NUMBER = 11
  final val TIMESTAMP_FIELD_NUMBER = 12
  final val EVENTS_FIELD_NUMBER = 13
  def of(
    height: _root_.scala.Long,
    txhash: _root_.scala.Predef.String,
    codespace: _root_.scala.Predef.String,
    code: _root_.scala.Int,
    data: _root_.scala.Predef.String,
    rawLog: _root_.scala.Predef.String,
    logs: _root_.scala.Seq[cosmos.base.abci.v1beta1.ABCIMessageLog],
    info: _root_.scala.Predef.String,
    gasWanted: _root_.scala.Long,
    gasUsed: _root_.scala.Long,
    tx: _root_.scala.Option[com.google.protobuf.any.Any],
    timestamp: _root_.scala.Predef.String,
    events: _root_.scala.Seq[tendermint.abci.Event]
  ): _root_.cosmos.base.abci.v1beta1.TxResponse = _root_.cosmos.base.abci.v1beta1.TxResponse(
    height,
    txhash,
    codespace,
    code,
    data,
    rawLog,
    logs,
    info,
    gasWanted,
    gasUsed,
    tx,
    timestamp,
    events
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.base.abci.v1beta1.TxResponse])
}
