// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.base.abci.v1beta1

/** SearchTxsResult defines a structure for querying txs pageable
  *
  * @param totalCount
  *   Count of all txs
  * @param count
  *   Count of txs in current page
  * @param pageNumber
  *   Index of current page, start from 1
  * @param pageTotal
  *   Count of total pages
  * @param limit
  *   Max count txs per page
  * @param txs
  *   List of txs in current page
  */
@SerialVersionUID(0L)
final case class SearchTxsResult(
    totalCount: _root_.scala.Long = 0L,
    count: _root_.scala.Long = 0L,
    pageNumber: _root_.scala.Long = 0L,
    pageTotal: _root_.scala.Long = 0L,
    limit: _root_.scala.Long = 0L,
    txs: _root_.scala.Seq[cosmos.base.abci.v1beta1.TxResponse] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SearchTxsResult] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = totalCount
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(1, __value)
        }
      };
      
      {
        val __value = count
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(2, __value)
        }
      };
      
      {
        val __value = pageNumber
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(3, __value)
        }
      };
      
      {
        val __value = pageTotal
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(4, __value)
        }
      };
      
      {
        val __value = limit
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(5, __value)
        }
      };
      txs.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = totalCount
        if (__v != 0L) {
          _output__.writeUInt64(1, __v)
        }
      };
      {
        val __v = count
        if (__v != 0L) {
          _output__.writeUInt64(2, __v)
        }
      };
      {
        val __v = pageNumber
        if (__v != 0L) {
          _output__.writeUInt64(3, __v)
        }
      };
      {
        val __v = pageTotal
        if (__v != 0L) {
          _output__.writeUInt64(4, __v)
        }
      };
      {
        val __v = limit
        if (__v != 0L) {
          _output__.writeUInt64(5, __v)
        }
      };
      txs.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withTotalCount(__v: _root_.scala.Long): SearchTxsResult = copy(totalCount = __v)
    def withCount(__v: _root_.scala.Long): SearchTxsResult = copy(count = __v)
    def withPageNumber(__v: _root_.scala.Long): SearchTxsResult = copy(pageNumber = __v)
    def withPageTotal(__v: _root_.scala.Long): SearchTxsResult = copy(pageTotal = __v)
    def withLimit(__v: _root_.scala.Long): SearchTxsResult = copy(limit = __v)
    def clearTxs = copy(txs = _root_.scala.Seq.empty)
    def addTxs(__vs: cosmos.base.abci.v1beta1.TxResponse *): SearchTxsResult = addAllTxs(__vs)
    def addAllTxs(__vs: Iterable[cosmos.base.abci.v1beta1.TxResponse]): SearchTxsResult = copy(txs = txs ++ __vs)
    def withTxs(__v: _root_.scala.Seq[cosmos.base.abci.v1beta1.TxResponse]): SearchTxsResult = copy(txs = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = totalCount
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = count
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = pageNumber
          if (__t != 0L) __t else null
        }
        case 4 => {
          val __t = pageTotal
          if (__t != 0L) __t else null
        }
        case 5 => {
          val __t = limit
          if (__t != 0L) __t else null
        }
        case 6 => txs
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(totalCount)
        case 2 => _root_.scalapb.descriptors.PLong(count)
        case 3 => _root_.scalapb.descriptors.PLong(pageNumber)
        case 4 => _root_.scalapb.descriptors.PLong(pageTotal)
        case 5 => _root_.scalapb.descriptors.PLong(limit)
        case 6 => _root_.scalapb.descriptors.PRepeated(txs.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.base.abci.v1beta1.SearchTxsResult.type = cosmos.base.abci.v1beta1.SearchTxsResult
    // @@protoc_insertion_point(GeneratedMessage[cosmos.base.abci.v1beta1.SearchTxsResult])
}

object SearchTxsResult extends scalapb.GeneratedMessageCompanion[cosmos.base.abci.v1beta1.SearchTxsResult] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.base.abci.v1beta1.SearchTxsResult] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.base.abci.v1beta1.SearchTxsResult = {
    var __totalCount: _root_.scala.Long = 0L
    var __count: _root_.scala.Long = 0L
    var __pageNumber: _root_.scala.Long = 0L
    var __pageTotal: _root_.scala.Long = 0L
    var __limit: _root_.scala.Long = 0L
    val __txs: _root_.scala.collection.immutable.VectorBuilder[cosmos.base.abci.v1beta1.TxResponse] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.base.abci.v1beta1.TxResponse]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __totalCount = _input__.readUInt64()
        case 16 =>
          __count = _input__.readUInt64()
        case 24 =>
          __pageNumber = _input__.readUInt64()
        case 32 =>
          __pageTotal = _input__.readUInt64()
        case 40 =>
          __limit = _input__.readUInt64()
        case 50 =>
          __txs += _root_.scalapb.LiteParser.readMessage[cosmos.base.abci.v1beta1.TxResponse](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.base.abci.v1beta1.SearchTxsResult(
        totalCount = __totalCount,
        count = __count,
        pageNumber = __pageNumber,
        pageTotal = __pageTotal,
        limit = __limit,
        txs = __txs.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.base.abci.v1beta1.SearchTxsResult] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.base.abci.v1beta1.SearchTxsResult(
        totalCount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        count = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        pageNumber = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        pageTotal = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        limit = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        txs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[cosmos.base.abci.v1beta1.TxResponse]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.base.abci.v1beta1.AbciProto.javaDescriptor.getMessageTypes().get(9)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.base.abci.v1beta1.AbciProto.scalaDescriptor.messages(9)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 6 => __out = cosmos.base.abci.v1beta1.TxResponse
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.base.abci.v1beta1.SearchTxsResult(
    totalCount = 0L,
    count = 0L,
    pageNumber = 0L,
    pageTotal = 0L,
    limit = 0L,
    txs = _root_.scala.Seq.empty
  )
  implicit class SearchTxsResultLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.base.abci.v1beta1.SearchTxsResult]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.base.abci.v1beta1.SearchTxsResult](_l) {
    def totalCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.totalCount)((c_, f_) => c_.copy(totalCount = f_))
    def count: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.count)((c_, f_) => c_.copy(count = f_))
    def pageNumber: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.pageNumber)((c_, f_) => c_.copy(pageNumber = f_))
    def pageTotal: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.pageTotal)((c_, f_) => c_.copy(pageTotal = f_))
    def limit: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.limit)((c_, f_) => c_.copy(limit = f_))
    def txs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.base.abci.v1beta1.TxResponse]] = field(_.txs)((c_, f_) => c_.copy(txs = f_))
  }
  final val TOTAL_COUNT_FIELD_NUMBER = 1
  final val COUNT_FIELD_NUMBER = 2
  final val PAGE_NUMBER_FIELD_NUMBER = 3
  final val PAGE_TOTAL_FIELD_NUMBER = 4
  final val LIMIT_FIELD_NUMBER = 5
  final val TXS_FIELD_NUMBER = 6
  def of(
    totalCount: _root_.scala.Long,
    count: _root_.scala.Long,
    pageNumber: _root_.scala.Long,
    pageTotal: _root_.scala.Long,
    limit: _root_.scala.Long,
    txs: _root_.scala.Seq[cosmos.base.abci.v1beta1.TxResponse]
  ): _root_.cosmos.base.abci.v1beta1.SearchTxsResult = _root_.cosmos.base.abci.v1beta1.SearchTxsResult(
    totalCount,
    count,
    pageNumber,
    pageTotal,
    limit,
    txs
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.base.abci.v1beta1.SearchTxsResult])
}
