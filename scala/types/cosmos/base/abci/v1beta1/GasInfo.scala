// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.base.abci.v1beta1

/** GasInfo defines tx execution gas context.
  *
  * @param gasWanted
  *   GasWanted is the maximum units of work we allow this tx to perform.
  * @param gasUsed
  *   GasUsed is the amount of gas actually consumed.
  */
@SerialVersionUID(0L)
final case class GasInfo(
    gasWanted: _root_.scala.Long = 0L,
    gasUsed: _root_.scala.Long = 0L,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[GasInfo] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = gasWanted
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(1, __value)
        }
      };
      
      {
        val __value = gasUsed
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(2, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = gasWanted
        if (__v != 0L) {
          _output__.writeUInt64(1, __v)
        }
      };
      {
        val __v = gasUsed
        if (__v != 0L) {
          _output__.writeUInt64(2, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withGasWanted(__v: _root_.scala.Long): GasInfo = copy(gasWanted = __v)
    def withGasUsed(__v: _root_.scala.Long): GasInfo = copy(gasUsed = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = gasWanted
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = gasUsed
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(gasWanted)
        case 2 => _root_.scalapb.descriptors.PLong(gasUsed)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.base.abci.v1beta1.GasInfo.type = cosmos.base.abci.v1beta1.GasInfo
    // @@protoc_insertion_point(GeneratedMessage[cosmos.base.abci.v1beta1.GasInfo])
}

object GasInfo extends scalapb.GeneratedMessageCompanion[cosmos.base.abci.v1beta1.GasInfo] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.base.abci.v1beta1.GasInfo] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.base.abci.v1beta1.GasInfo = {
    var __gasWanted: _root_.scala.Long = 0L
    var __gasUsed: _root_.scala.Long = 0L
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __gasWanted = _input__.readUInt64()
        case 16 =>
          __gasUsed = _input__.readUInt64()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.base.abci.v1beta1.GasInfo(
        gasWanted = __gasWanted,
        gasUsed = __gasUsed,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.base.abci.v1beta1.GasInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.base.abci.v1beta1.GasInfo(
        gasWanted = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        gasUsed = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.base.abci.v1beta1.AbciProto.javaDescriptor.getMessageTypes().get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.base.abci.v1beta1.AbciProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.base.abci.v1beta1.GasInfo(
    gasWanted = 0L,
    gasUsed = 0L
  )
  implicit class GasInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.base.abci.v1beta1.GasInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.base.abci.v1beta1.GasInfo](_l) {
    def gasWanted: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.gasWanted)((c_, f_) => c_.copy(gasWanted = f_))
    def gasUsed: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.gasUsed)((c_, f_) => c_.copy(gasUsed = f_))
  }
  final val GAS_WANTED_FIELD_NUMBER = 1
  final val GAS_USED_FIELD_NUMBER = 2
  def of(
    gasWanted: _root_.scala.Long,
    gasUsed: _root_.scala.Long
  ): _root_.cosmos.base.abci.v1beta1.GasInfo = _root_.cosmos.base.abci.v1beta1.GasInfo(
    gasWanted,
    gasUsed
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.base.abci.v1beta1.GasInfo])
}
