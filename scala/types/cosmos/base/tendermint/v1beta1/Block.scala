// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.base.tendermint.v1beta1

/** Block is tendermint type Block, with the Header proposer address
  * field converted to bech32 string.
  */
@SerialVersionUID(0L)
final case class Block(
    header: _root_.scala.Option[cosmos.base.tendermint.v1beta1.Header] = _root_.scala.None,
    data: _root_.scala.Option[tendermint.types.Data] = _root_.scala.None,
    evidence: _root_.scala.Option[tendermint.types.EvidenceList] = _root_.scala.None,
    lastCommit: _root_.scala.Option[tendermint.types.Commit] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Block] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (header.isDefined) {
        val __value = header.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (data.isDefined) {
        val __value = data.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (evidence.isDefined) {
        val __value = evidence.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (lastCommit.isDefined) {
        val __value = lastCommit.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      header.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      data.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      evidence.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      lastCommit.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getHeader: cosmos.base.tendermint.v1beta1.Header = header.getOrElse(cosmos.base.tendermint.v1beta1.Header.defaultInstance)
    def clearHeader: Block = copy(header = _root_.scala.None)
    def withHeader(__v: cosmos.base.tendermint.v1beta1.Header): Block = copy(header = Option(__v))
    def getData: tendermint.types.Data = data.getOrElse(tendermint.types.Data.defaultInstance)
    def clearData: Block = copy(data = _root_.scala.None)
    def withData(__v: tendermint.types.Data): Block = copy(data = Option(__v))
    def getEvidence: tendermint.types.EvidenceList = evidence.getOrElse(tendermint.types.EvidenceList.defaultInstance)
    def clearEvidence: Block = copy(evidence = _root_.scala.None)
    def withEvidence(__v: tendermint.types.EvidenceList): Block = copy(evidence = Option(__v))
    def getLastCommit: tendermint.types.Commit = lastCommit.getOrElse(tendermint.types.Commit.defaultInstance)
    def clearLastCommit: Block = copy(lastCommit = _root_.scala.None)
    def withLastCommit(__v: tendermint.types.Commit): Block = copy(lastCommit = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => header.orNull
        case 2 => data.orNull
        case 3 => evidence.orNull
        case 4 => lastCommit.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => header.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => data.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => evidence.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => lastCommit.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.base.tendermint.v1beta1.Block.type = cosmos.base.tendermint.v1beta1.Block
    // @@protoc_insertion_point(GeneratedMessage[cosmos.base.tendermint.v1beta1.Block])
}

object Block extends scalapb.GeneratedMessageCompanion[cosmos.base.tendermint.v1beta1.Block] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.base.tendermint.v1beta1.Block] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.base.tendermint.v1beta1.Block = {
    var __header: _root_.scala.Option[cosmos.base.tendermint.v1beta1.Header] = _root_.scala.None
    var __data: _root_.scala.Option[tendermint.types.Data] = _root_.scala.None
    var __evidence: _root_.scala.Option[tendermint.types.EvidenceList] = _root_.scala.None
    var __lastCommit: _root_.scala.Option[tendermint.types.Commit] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __header = _root_.scala.Option(__header.fold(_root_.scalapb.LiteParser.readMessage[cosmos.base.tendermint.v1beta1.Header](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __data = _root_.scala.Option(__data.fold(_root_.scalapb.LiteParser.readMessage[tendermint.types.Data](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __evidence = _root_.scala.Option(__evidence.fold(_root_.scalapb.LiteParser.readMessage[tendermint.types.EvidenceList](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __lastCommit = _root_.scala.Option(__lastCommit.fold(_root_.scalapb.LiteParser.readMessage[tendermint.types.Commit](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.base.tendermint.v1beta1.Block(
        header = __header,
        data = __data,
        evidence = __evidence,
        lastCommit = __lastCommit,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.base.tendermint.v1beta1.Block] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.base.tendermint.v1beta1.Block(
        header = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[cosmos.base.tendermint.v1beta1.Header]]),
        data = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[tendermint.types.Data]]),
        evidence = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[tendermint.types.EvidenceList]]),
        lastCommit = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[tendermint.types.Commit]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.base.tendermint.v1beta1.TypesProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.base.tendermint.v1beta1.TypesProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = cosmos.base.tendermint.v1beta1.Header
      case 2 => __out = tendermint.types.Data
      case 3 => __out = tendermint.types.EvidenceList
      case 4 => __out = tendermint.types.Commit
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.base.tendermint.v1beta1.Block(
    header = _root_.scala.None,
    data = _root_.scala.None,
    evidence = _root_.scala.None,
    lastCommit = _root_.scala.None
  )
  implicit class BlockLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.base.tendermint.v1beta1.Block]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.base.tendermint.v1beta1.Block](_l) {
    def header: _root_.scalapb.lenses.Lens[UpperPB, cosmos.base.tendermint.v1beta1.Header] = field(_.getHeader)((c_, f_) => c_.copy(header = _root_.scala.Option(f_)))
    def optionalHeader: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[cosmos.base.tendermint.v1beta1.Header]] = field(_.header)((c_, f_) => c_.copy(header = f_))
    def data: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.Data] = field(_.getData)((c_, f_) => c_.copy(data = _root_.scala.Option(f_)))
    def optionalData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tendermint.types.Data]] = field(_.data)((c_, f_) => c_.copy(data = f_))
    def evidence: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.EvidenceList] = field(_.getEvidence)((c_, f_) => c_.copy(evidence = _root_.scala.Option(f_)))
    def optionalEvidence: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tendermint.types.EvidenceList]] = field(_.evidence)((c_, f_) => c_.copy(evidence = f_))
    def lastCommit: _root_.scalapb.lenses.Lens[UpperPB, tendermint.types.Commit] = field(_.getLastCommit)((c_, f_) => c_.copy(lastCommit = _root_.scala.Option(f_)))
    def optionalLastCommit: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[tendermint.types.Commit]] = field(_.lastCommit)((c_, f_) => c_.copy(lastCommit = f_))
  }
  final val HEADER_FIELD_NUMBER = 1
  final val DATA_FIELD_NUMBER = 2
  final val EVIDENCE_FIELD_NUMBER = 3
  final val LAST_COMMIT_FIELD_NUMBER = 4
  def of(
    header: _root_.scala.Option[cosmos.base.tendermint.v1beta1.Header],
    data: _root_.scala.Option[tendermint.types.Data],
    evidence: _root_.scala.Option[tendermint.types.EvidenceList],
    lastCommit: _root_.scala.Option[tendermint.types.Commit]
  ): _root_.cosmos.base.tendermint.v1beta1.Block = _root_.cosmos.base.tendermint.v1beta1.Block(
    header,
    data,
    evidence,
    lastCommit
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.base.tendermint.v1beta1.Block])
}
