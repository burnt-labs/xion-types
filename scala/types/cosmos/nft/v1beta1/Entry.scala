// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.nft.v1beta1

/** Entry Defines all nft owned by a person
  *
  * @param owner
  *   owner is the owner address of the following nft
  * @param nfts
  *   nfts is a group of nfts of the same owner
  */
@SerialVersionUID(0L)
final case class Entry(
    owner: _root_.scala.Predef.String = "",
    nfts: _root_.scala.Seq[cosmos.nft.v1beta1.NFT] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Entry] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = owner
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      nfts.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = owner
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      nfts.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withOwner(__v: _root_.scala.Predef.String): Entry = copy(owner = __v)
    def clearNfts = copy(nfts = _root_.scala.Seq.empty)
    def addNfts(__vs: cosmos.nft.v1beta1.NFT *): Entry = addAllNfts(__vs)
    def addAllNfts(__vs: Iterable[cosmos.nft.v1beta1.NFT]): Entry = copy(nfts = nfts ++ __vs)
    def withNfts(__v: _root_.scala.Seq[cosmos.nft.v1beta1.NFT]): Entry = copy(nfts = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = owner
          if (__t != "") __t else null
        }
        case 2 => nfts
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(owner)
        case 2 => _root_.scalapb.descriptors.PRepeated(nfts.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.nft.v1beta1.Entry.type = cosmos.nft.v1beta1.Entry
    // @@protoc_insertion_point(GeneratedMessage[cosmos.nft.v1beta1.Entry])
}

object Entry extends scalapb.GeneratedMessageCompanion[cosmos.nft.v1beta1.Entry] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.nft.v1beta1.Entry] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.nft.v1beta1.Entry = {
    var __owner: _root_.scala.Predef.String = ""
    val __nfts: _root_.scala.collection.immutable.VectorBuilder[cosmos.nft.v1beta1.NFT] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.nft.v1beta1.NFT]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __owner = _input__.readStringRequireUtf8()
        case 18 =>
          __nfts += _root_.scalapb.LiteParser.readMessage[cosmos.nft.v1beta1.NFT](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.nft.v1beta1.Entry(
        owner = __owner,
        nfts = __nfts.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.nft.v1beta1.Entry] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.nft.v1beta1.Entry(
        owner = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        nfts = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[cosmos.nft.v1beta1.NFT]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.nft.v1beta1.GenesisProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.nft.v1beta1.GenesisProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = cosmos.nft.v1beta1.NFT
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.nft.v1beta1.Entry(
    owner = "",
    nfts = _root_.scala.Seq.empty
  )
  implicit class EntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.nft.v1beta1.Entry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.nft.v1beta1.Entry](_l) {
    def owner: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.owner)((c_, f_) => c_.copy(owner = f_))
    def nfts: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.nft.v1beta1.NFT]] = field(_.nfts)((c_, f_) => c_.copy(nfts = f_))
  }
  final val OWNER_FIELD_NUMBER = 1
  final val NFTS_FIELD_NUMBER = 2
  def of(
    owner: _root_.scala.Predef.String,
    nfts: _root_.scala.Seq[cosmos.nft.v1beta1.NFT]
  ): _root_.cosmos.nft.v1beta1.Entry = _root_.cosmos.nft.v1beta1.Entry(
    owner,
    nfts
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.nft.v1beta1.Entry])
}
