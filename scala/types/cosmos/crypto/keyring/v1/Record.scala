// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.crypto.keyring.v1

/** Record is used for representing a key in the keyring.
  *
  * @param name
  *   name represents a name of Record
  * @param pubKey
  *   pub_key represents a public key in any format
  */
@SerialVersionUID(0L)
final case class Record(
    name: _root_.scala.Predef.String = "",
    pubKey: _root_.scala.Option[com.google.protobuf.any.Any] = _root_.scala.None,
    item: cosmos.crypto.keyring.v1.Record.Item = cosmos.crypto.keyring.v1.Record.Item.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Record] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = name
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      if (pubKey.isDefined) {
        val __value = pubKey.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (item.local.isDefined) {
        val __value = item.local.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (item.ledger.isDefined) {
        val __value = item.ledger.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (item.multi.isDefined) {
        val __value = item.multi.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (item.offline.isDefined) {
        val __value = item.offline.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = name
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      pubKey.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      item.local.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      item.ledger.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      item.multi.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      item.offline.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withName(__v: _root_.scala.Predef.String): Record = copy(name = __v)
    def getPubKey: com.google.protobuf.any.Any = pubKey.getOrElse(com.google.protobuf.any.Any.defaultInstance)
    def clearPubKey: Record = copy(pubKey = _root_.scala.None)
    def withPubKey(__v: com.google.protobuf.any.Any): Record = copy(pubKey = Option(__v))
    def getLocal: cosmos.crypto.keyring.v1.Record.Local = item.local.getOrElse(cosmos.crypto.keyring.v1.Record.Local.defaultInstance)
    def withLocal(__v: cosmos.crypto.keyring.v1.Record.Local): Record = copy(item = cosmos.crypto.keyring.v1.Record.Item.Local(__v))
    def getLedger: cosmos.crypto.keyring.v1.Record.Ledger = item.ledger.getOrElse(cosmos.crypto.keyring.v1.Record.Ledger.defaultInstance)
    def withLedger(__v: cosmos.crypto.keyring.v1.Record.Ledger): Record = copy(item = cosmos.crypto.keyring.v1.Record.Item.Ledger(__v))
    def getMulti: cosmos.crypto.keyring.v1.Record.Multi = item.multi.getOrElse(cosmos.crypto.keyring.v1.Record.Multi.defaultInstance)
    def withMulti(__v: cosmos.crypto.keyring.v1.Record.Multi): Record = copy(item = cosmos.crypto.keyring.v1.Record.Item.Multi(__v))
    def getOffline: cosmos.crypto.keyring.v1.Record.Offline = item.offline.getOrElse(cosmos.crypto.keyring.v1.Record.Offline.defaultInstance)
    def withOffline(__v: cosmos.crypto.keyring.v1.Record.Offline): Record = copy(item = cosmos.crypto.keyring.v1.Record.Item.Offline(__v))
    def clearItem: Record = copy(item = cosmos.crypto.keyring.v1.Record.Item.Empty)
    def withItem(__v: cosmos.crypto.keyring.v1.Record.Item): Record = copy(item = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 2 => pubKey.orNull
        case 3 => item.local.orNull
        case 4 => item.ledger.orNull
        case 5 => item.multi.orNull
        case 6 => item.offline.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(name)
        case 2 => pubKey.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => item.local.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => item.ledger.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => item.multi.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => item.offline.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.crypto.keyring.v1.Record.type = cosmos.crypto.keyring.v1.Record
    // @@protoc_insertion_point(GeneratedMessage[cosmos.crypto.keyring.v1.Record])
}

object Record extends scalapb.GeneratedMessageCompanion[cosmos.crypto.keyring.v1.Record] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.crypto.keyring.v1.Record] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.crypto.keyring.v1.Record = {
    var __name: _root_.scala.Predef.String = ""
    var __pubKey: _root_.scala.Option[com.google.protobuf.any.Any] = _root_.scala.None
    var __item: cosmos.crypto.keyring.v1.Record.Item = cosmos.crypto.keyring.v1.Record.Item.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __name = _input__.readStringRequireUtf8()
        case 18 =>
          __pubKey = _root_.scala.Option(__pubKey.fold(_root_.scalapb.LiteParser.readMessage[com.google.protobuf.any.Any](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __item = cosmos.crypto.keyring.v1.Record.Item.Local(__item.local.fold(_root_.scalapb.LiteParser.readMessage[cosmos.crypto.keyring.v1.Record.Local](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __item = cosmos.crypto.keyring.v1.Record.Item.Ledger(__item.ledger.fold(_root_.scalapb.LiteParser.readMessage[cosmos.crypto.keyring.v1.Record.Ledger](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 42 =>
          __item = cosmos.crypto.keyring.v1.Record.Item.Multi(__item.multi.fold(_root_.scalapb.LiteParser.readMessage[cosmos.crypto.keyring.v1.Record.Multi](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 50 =>
          __item = cosmos.crypto.keyring.v1.Record.Item.Offline(__item.offline.fold(_root_.scalapb.LiteParser.readMessage[cosmos.crypto.keyring.v1.Record.Offline](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.crypto.keyring.v1.Record(
        name = __name,
        pubKey = __pubKey,
        item = __item,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.crypto.keyring.v1.Record] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.crypto.keyring.v1.Record(
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        pubKey = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.any.Any]]),
        item = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[cosmos.crypto.keyring.v1.Record.Local]]).map(cosmos.crypto.keyring.v1.Record.Item.Local(_))
            .orElse[cosmos.crypto.keyring.v1.Record.Item](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[cosmos.crypto.keyring.v1.Record.Ledger]]).map(cosmos.crypto.keyring.v1.Record.Item.Ledger(_)))
            .orElse[cosmos.crypto.keyring.v1.Record.Item](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[cosmos.crypto.keyring.v1.Record.Multi]]).map(cosmos.crypto.keyring.v1.Record.Item.Multi(_)))
            .orElse[cosmos.crypto.keyring.v1.Record.Item](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[cosmos.crypto.keyring.v1.Record.Offline]]).map(cosmos.crypto.keyring.v1.Record.Item.Offline(_)))
            .getOrElse(cosmos.crypto.keyring.v1.Record.Item.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.crypto.keyring.v1.RecordProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.crypto.keyring.v1.RecordProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = com.google.protobuf.any.Any
      case 3 => __out = cosmos.crypto.keyring.v1.Record.Local
      case 4 => __out = cosmos.crypto.keyring.v1.Record.Ledger
      case 5 => __out = cosmos.crypto.keyring.v1.Record.Multi
      case 6 => __out = cosmos.crypto.keyring.v1.Record.Offline
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.cosmos.crypto.keyring.v1.Record.Local,
      _root_.cosmos.crypto.keyring.v1.Record.Ledger,
      _root_.cosmos.crypto.keyring.v1.Record.Multi,
      _root_.cosmos.crypto.keyring.v1.Record.Offline
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.crypto.keyring.v1.Record(
    name = "",
    pubKey = _root_.scala.None,
    item = cosmos.crypto.keyring.v1.Record.Item.Empty
  )
  sealed trait Item extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isLocal: _root_.scala.Boolean = false
    def isLedger: _root_.scala.Boolean = false
    def isMulti: _root_.scala.Boolean = false
    def isOffline: _root_.scala.Boolean = false
    def local: _root_.scala.Option[cosmos.crypto.keyring.v1.Record.Local] = _root_.scala.None
    def ledger: _root_.scala.Option[cosmos.crypto.keyring.v1.Record.Ledger] = _root_.scala.None
    def multi: _root_.scala.Option[cosmos.crypto.keyring.v1.Record.Multi] = _root_.scala.None
    def offline: _root_.scala.Option[cosmos.crypto.keyring.v1.Record.Offline] = _root_.scala.None
  }
  object Item {
    @SerialVersionUID(0L)
    case object Empty extends cosmos.crypto.keyring.v1.Record.Item {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Local(value: cosmos.crypto.keyring.v1.Record.Local) extends cosmos.crypto.keyring.v1.Record.Item {
      type ValueType = cosmos.crypto.keyring.v1.Record.Local
      override def isLocal: _root_.scala.Boolean = true
      override def local: _root_.scala.Option[cosmos.crypto.keyring.v1.Record.Local] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class Ledger(value: cosmos.crypto.keyring.v1.Record.Ledger) extends cosmos.crypto.keyring.v1.Record.Item {
      type ValueType = cosmos.crypto.keyring.v1.Record.Ledger
      override def isLedger: _root_.scala.Boolean = true
      override def ledger: _root_.scala.Option[cosmos.crypto.keyring.v1.Record.Ledger] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class Multi(value: cosmos.crypto.keyring.v1.Record.Multi) extends cosmos.crypto.keyring.v1.Record.Item {
      type ValueType = cosmos.crypto.keyring.v1.Record.Multi
      override def isMulti: _root_.scala.Boolean = true
      override def multi: _root_.scala.Option[cosmos.crypto.keyring.v1.Record.Multi] = Some(value)
      override def number: _root_.scala.Int = 5
    }
    @SerialVersionUID(0L)
    final case class Offline(value: cosmos.crypto.keyring.v1.Record.Offline) extends cosmos.crypto.keyring.v1.Record.Item {
      type ValueType = cosmos.crypto.keyring.v1.Record.Offline
      override def isOffline: _root_.scala.Boolean = true
      override def offline: _root_.scala.Option[cosmos.crypto.keyring.v1.Record.Offline] = Some(value)
      override def number: _root_.scala.Int = 6
    }
  }
  /** Item is a keyring item stored in a keyring backend.
    * Local item
    */
  @SerialVersionUID(0L)
  final case class Local(
      privKey: _root_.scala.Option[com.google.protobuf.any.Any] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Local] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        if (privKey.isDefined) {
          val __value = privKey.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        privKey.foreach { __v =>
          val __m = __v
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def getPrivKey: com.google.protobuf.any.Any = privKey.getOrElse(com.google.protobuf.any.Any.defaultInstance)
      def clearPrivKey: Local = copy(privKey = _root_.scala.None)
      def withPrivKey(__v: com.google.protobuf.any.Any): Local = copy(privKey = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => privKey.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => privKey.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: cosmos.crypto.keyring.v1.Record.Local.type = cosmos.crypto.keyring.v1.Record.Local
      // @@protoc_insertion_point(GeneratedMessage[cosmos.crypto.keyring.v1.Record.Local])
  }
  
  object Local extends scalapb.GeneratedMessageCompanion[cosmos.crypto.keyring.v1.Record.Local] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.crypto.keyring.v1.Record.Local] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.crypto.keyring.v1.Record.Local = {
      var __privKey: _root_.scala.Option[com.google.protobuf.any.Any] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __privKey = _root_.scala.Option(__privKey.fold(_root_.scalapb.LiteParser.readMessage[com.google.protobuf.any.Any](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      cosmos.crypto.keyring.v1.Record.Local(
          privKey = __privKey,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.crypto.keyring.v1.Record.Local] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        cosmos.crypto.keyring.v1.Record.Local(
          privKey = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.any.Any]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.crypto.keyring.v1.Record.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.crypto.keyring.v1.Record.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 1 => __out = com.google.protobuf.any.Any
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = cosmos.crypto.keyring.v1.Record.Local(
      privKey = _root_.scala.None
    )
    implicit class LocalLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.crypto.keyring.v1.Record.Local]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.crypto.keyring.v1.Record.Local](_l) {
      def privKey: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.any.Any] = field(_.getPrivKey)((c_, f_) => c_.copy(privKey = _root_.scala.Option(f_)))
      def optionalPrivKey: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.any.Any]] = field(_.privKey)((c_, f_) => c_.copy(privKey = f_))
    }
    final val PRIV_KEY_FIELD_NUMBER = 1
    def of(
      privKey: _root_.scala.Option[com.google.protobuf.any.Any]
    ): _root_.cosmos.crypto.keyring.v1.Record.Local = _root_.cosmos.crypto.keyring.v1.Record.Local(
      privKey
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.crypto.keyring.v1.Record.Local])
  }
  
  /** Ledger item
    */
  @SerialVersionUID(0L)
  final case class Ledger(
      path: _root_.scala.Option[cosmos.crypto.hd.v1.BIP44Params] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Ledger] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        if (path.isDefined) {
          val __value = path.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        path.foreach { __v =>
          val __m = __v
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def getPath: cosmos.crypto.hd.v1.BIP44Params = path.getOrElse(cosmos.crypto.hd.v1.BIP44Params.defaultInstance)
      def clearPath: Ledger = copy(path = _root_.scala.None)
      def withPath(__v: cosmos.crypto.hd.v1.BIP44Params): Ledger = copy(path = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => path.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => path.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: cosmos.crypto.keyring.v1.Record.Ledger.type = cosmos.crypto.keyring.v1.Record.Ledger
      // @@protoc_insertion_point(GeneratedMessage[cosmos.crypto.keyring.v1.Record.Ledger])
  }
  
  object Ledger extends scalapb.GeneratedMessageCompanion[cosmos.crypto.keyring.v1.Record.Ledger] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.crypto.keyring.v1.Record.Ledger] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.crypto.keyring.v1.Record.Ledger = {
      var __path: _root_.scala.Option[cosmos.crypto.hd.v1.BIP44Params] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __path = _root_.scala.Option(__path.fold(_root_.scalapb.LiteParser.readMessage[cosmos.crypto.hd.v1.BIP44Params](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      cosmos.crypto.keyring.v1.Record.Ledger(
          path = __path,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.crypto.keyring.v1.Record.Ledger] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        cosmos.crypto.keyring.v1.Record.Ledger(
          path = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[cosmos.crypto.hd.v1.BIP44Params]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.crypto.keyring.v1.Record.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.crypto.keyring.v1.Record.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 1 => __out = cosmos.crypto.hd.v1.BIP44Params
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = cosmos.crypto.keyring.v1.Record.Ledger(
      path = _root_.scala.None
    )
    implicit class LedgerLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.crypto.keyring.v1.Record.Ledger]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.crypto.keyring.v1.Record.Ledger](_l) {
      def path: _root_.scalapb.lenses.Lens[UpperPB, cosmos.crypto.hd.v1.BIP44Params] = field(_.getPath)((c_, f_) => c_.copy(path = _root_.scala.Option(f_)))
      def optionalPath: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[cosmos.crypto.hd.v1.BIP44Params]] = field(_.path)((c_, f_) => c_.copy(path = f_))
    }
    final val PATH_FIELD_NUMBER = 1
    def of(
      path: _root_.scala.Option[cosmos.crypto.hd.v1.BIP44Params]
    ): _root_.cosmos.crypto.keyring.v1.Record.Ledger = _root_.cosmos.crypto.keyring.v1.Record.Ledger(
      path
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.crypto.keyring.v1.Record.Ledger])
  }
  
  /** Multi item
    */
  @SerialVersionUID(0L)
  final case class Multi(
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Multi] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        unknownFields.writeTo(_output__)
      }
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: cosmos.crypto.keyring.v1.Record.Multi.type = cosmos.crypto.keyring.v1.Record.Multi
      // @@protoc_insertion_point(GeneratedMessage[cosmos.crypto.keyring.v1.Record.Multi])
  }
  
  object Multi extends scalapb.GeneratedMessageCompanion[cosmos.crypto.keyring.v1.Record.Multi] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.crypto.keyring.v1.Record.Multi] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.crypto.keyring.v1.Record.Multi = {
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      cosmos.crypto.keyring.v1.Record.Multi(
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.crypto.keyring.v1.Record.Multi] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        cosmos.crypto.keyring.v1.Record.Multi(
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.crypto.keyring.v1.Record.javaDescriptor.getNestedTypes().get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.crypto.keyring.v1.Record.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = cosmos.crypto.keyring.v1.Record.Multi(
    )
    implicit class MultiLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.crypto.keyring.v1.Record.Multi]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.crypto.keyring.v1.Record.Multi](_l) {
    }
    def of(
    ): _root_.cosmos.crypto.keyring.v1.Record.Multi = _root_.cosmos.crypto.keyring.v1.Record.Multi(
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.crypto.keyring.v1.Record.Multi])
  }
  
  /** Offline item
    */
  @SerialVersionUID(0L)
  final case class Offline(
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Offline] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        unknownFields.writeTo(_output__)
      }
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: cosmos.crypto.keyring.v1.Record.Offline.type = cosmos.crypto.keyring.v1.Record.Offline
      // @@protoc_insertion_point(GeneratedMessage[cosmos.crypto.keyring.v1.Record.Offline])
  }
  
  object Offline extends scalapb.GeneratedMessageCompanion[cosmos.crypto.keyring.v1.Record.Offline] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.crypto.keyring.v1.Record.Offline] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.crypto.keyring.v1.Record.Offline = {
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      cosmos.crypto.keyring.v1.Record.Offline(
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.crypto.keyring.v1.Record.Offline] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        cosmos.crypto.keyring.v1.Record.Offline(
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.crypto.keyring.v1.Record.javaDescriptor.getNestedTypes().get(3)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.crypto.keyring.v1.Record.scalaDescriptor.nestedMessages(3)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = cosmos.crypto.keyring.v1.Record.Offline(
    )
    implicit class OfflineLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.crypto.keyring.v1.Record.Offline]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.crypto.keyring.v1.Record.Offline](_l) {
    }
    def of(
    ): _root_.cosmos.crypto.keyring.v1.Record.Offline = _root_.cosmos.crypto.keyring.v1.Record.Offline(
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.crypto.keyring.v1.Record.Offline])
  }
  
  implicit class RecordLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.crypto.keyring.v1.Record]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.crypto.keyring.v1.Record](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def pubKey: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.any.Any] = field(_.getPubKey)((c_, f_) => c_.copy(pubKey = _root_.scala.Option(f_)))
    def optionalPubKey: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.any.Any]] = field(_.pubKey)((c_, f_) => c_.copy(pubKey = f_))
    def local: _root_.scalapb.lenses.Lens[UpperPB, cosmos.crypto.keyring.v1.Record.Local] = field(_.getLocal)((c_, f_) => c_.copy(item = cosmos.crypto.keyring.v1.Record.Item.Local(f_)))
    def ledger: _root_.scalapb.lenses.Lens[UpperPB, cosmos.crypto.keyring.v1.Record.Ledger] = field(_.getLedger)((c_, f_) => c_.copy(item = cosmos.crypto.keyring.v1.Record.Item.Ledger(f_)))
    def multi: _root_.scalapb.lenses.Lens[UpperPB, cosmos.crypto.keyring.v1.Record.Multi] = field(_.getMulti)((c_, f_) => c_.copy(item = cosmos.crypto.keyring.v1.Record.Item.Multi(f_)))
    def offline: _root_.scalapb.lenses.Lens[UpperPB, cosmos.crypto.keyring.v1.Record.Offline] = field(_.getOffline)((c_, f_) => c_.copy(item = cosmos.crypto.keyring.v1.Record.Item.Offline(f_)))
    def item: _root_.scalapb.lenses.Lens[UpperPB, cosmos.crypto.keyring.v1.Record.Item] = field(_.item)((c_, f_) => c_.copy(item = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val PUB_KEY_FIELD_NUMBER = 2
  final val LOCAL_FIELD_NUMBER = 3
  final val LEDGER_FIELD_NUMBER = 4
  final val MULTI_FIELD_NUMBER = 5
  final val OFFLINE_FIELD_NUMBER = 6
  def of(
    name: _root_.scala.Predef.String,
    pubKey: _root_.scala.Option[com.google.protobuf.any.Any],
    item: cosmos.crypto.keyring.v1.Record.Item
  ): _root_.cosmos.crypto.keyring.v1.Record = _root_.cosmos.crypto.keyring.v1.Record(
    name,
    pubKey,
    item
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.crypto.keyring.v1.Record])
}
