// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.auth.v1beta1

/** ModuleAccount defines an account for modules that holds coins on a pool.
  */
@SerialVersionUID(0L)
final case class ModuleAccount(
    baseAccount: _root_.scala.Option[cosmos.auth.v1beta1.BaseAccount] = _root_.scala.None,
    name: _root_.scala.Predef.String = "",
    permissions: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ModuleAccount] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (baseAccount.isDefined) {
        val __value = baseAccount.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = name
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      permissions.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      baseAccount.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = name
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      permissions.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getBaseAccount: cosmos.auth.v1beta1.BaseAccount = baseAccount.getOrElse(cosmos.auth.v1beta1.BaseAccount.defaultInstance)
    def clearBaseAccount: ModuleAccount = copy(baseAccount = _root_.scala.None)
    def withBaseAccount(__v: cosmos.auth.v1beta1.BaseAccount): ModuleAccount = copy(baseAccount = Option(__v))
    def withName(__v: _root_.scala.Predef.String): ModuleAccount = copy(name = __v)
    def clearPermissions = copy(permissions = _root_.scala.Seq.empty)
    def addPermissions(__vs: _root_.scala.Predef.String *): ModuleAccount = addAllPermissions(__vs)
    def addAllPermissions(__vs: Iterable[_root_.scala.Predef.String]): ModuleAccount = copy(permissions = permissions ++ __vs)
    def withPermissions(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ModuleAccount = copy(permissions = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => baseAccount.orNull
        case 2 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 3 => permissions
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => baseAccount.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PString(name)
        case 3 => _root_.scalapb.descriptors.PRepeated(permissions.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.auth.v1beta1.ModuleAccount.type = cosmos.auth.v1beta1.ModuleAccount
    // @@protoc_insertion_point(GeneratedMessage[cosmos.auth.v1beta1.ModuleAccount])
}

object ModuleAccount extends scalapb.GeneratedMessageCompanion[cosmos.auth.v1beta1.ModuleAccount] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.auth.v1beta1.ModuleAccount] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.auth.v1beta1.ModuleAccount = {
    var __baseAccount: _root_.scala.Option[cosmos.auth.v1beta1.BaseAccount] = _root_.scala.None
    var __name: _root_.scala.Predef.String = ""
    val __permissions: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __baseAccount = _root_.scala.Option(__baseAccount.fold(_root_.scalapb.LiteParser.readMessage[cosmos.auth.v1beta1.BaseAccount](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __name = _input__.readStringRequireUtf8()
        case 26 =>
          __permissions += _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.auth.v1beta1.ModuleAccount(
        baseAccount = __baseAccount,
        name = __name,
        permissions = __permissions.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.auth.v1beta1.ModuleAccount] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.auth.v1beta1.ModuleAccount(
        baseAccount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[cosmos.auth.v1beta1.BaseAccount]]),
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        permissions = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.auth.v1beta1.AuthProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.auth.v1beta1.AuthProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = cosmos.auth.v1beta1.BaseAccount
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.auth.v1beta1.ModuleAccount(
    baseAccount = _root_.scala.None,
    name = "",
    permissions = _root_.scala.Seq.empty
  )
  implicit class ModuleAccountLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.auth.v1beta1.ModuleAccount]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.auth.v1beta1.ModuleAccount](_l) {
    def baseAccount: _root_.scalapb.lenses.Lens[UpperPB, cosmos.auth.v1beta1.BaseAccount] = field(_.getBaseAccount)((c_, f_) => c_.copy(baseAccount = _root_.scala.Option(f_)))
    def optionalBaseAccount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[cosmos.auth.v1beta1.BaseAccount]] = field(_.baseAccount)((c_, f_) => c_.copy(baseAccount = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def permissions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.permissions)((c_, f_) => c_.copy(permissions = f_))
  }
  final val BASE_ACCOUNT_FIELD_NUMBER = 1
  final val NAME_FIELD_NUMBER = 2
  final val PERMISSIONS_FIELD_NUMBER = 3
  def of(
    baseAccount: _root_.scala.Option[cosmos.auth.v1beta1.BaseAccount],
    name: _root_.scala.Predef.String,
    permissions: _root_.scala.Seq[_root_.scala.Predef.String]
  ): _root_.cosmos.auth.v1beta1.ModuleAccount = _root_.cosmos.auth.v1beta1.ModuleAccount(
    baseAccount,
    name,
    permissions
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.auth.v1beta1.ModuleAccount])
}
