// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.group.v1

/** MsgCreateGroupWithPolicy is the Msg/CreateGroupWithPolicy request type.
  *
  * @param admin
  *   admin is the account address of the group and group policy admin.
  * @param members
  *   members defines the group members.
  * @param groupMetadata
  *   group_metadata is any arbitrary metadata attached to the group.
  * @param groupPolicyMetadata
  *   group_policy_metadata is any arbitrary metadata attached to the group policy.
  * @param groupPolicyAsAdmin
  *   group_policy_as_admin is a boolean field, if set to true, the group policy account address will be used as group
  *   and group policy admin.
  * @param decisionPolicy
  *   decision_policy specifies the group policy's decision policy.
  */
@SerialVersionUID(0L)
final case class MsgCreateGroupWithPolicy(
    admin: _root_.scala.Predef.String = "",
    members: _root_.scala.Seq[cosmos.group.v1.MemberRequest] = _root_.scala.Seq.empty,
    groupMetadata: _root_.scala.Predef.String = "",
    groupPolicyMetadata: _root_.scala.Predef.String = "",
    groupPolicyAsAdmin: _root_.scala.Boolean = false,
    decisionPolicy: _root_.scala.Option[com.google.protobuf.any.Any] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[MsgCreateGroupWithPolicy] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = admin
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      members.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = groupMetadata
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = groupPolicyMetadata
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = groupPolicyAsAdmin
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, __value)
        }
      };
      if (decisionPolicy.isDefined) {
        val __value = decisionPolicy.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = admin
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      members.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = groupMetadata
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = groupPolicyMetadata
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = groupPolicyAsAdmin
        if (__v != false) {
          _output__.writeBool(5, __v)
        }
      };
      decisionPolicy.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withAdmin(__v: _root_.scala.Predef.String): MsgCreateGroupWithPolicy = copy(admin = __v)
    def clearMembers = copy(members = _root_.scala.Seq.empty)
    def addMembers(__vs: cosmos.group.v1.MemberRequest *): MsgCreateGroupWithPolicy = addAllMembers(__vs)
    def addAllMembers(__vs: Iterable[cosmos.group.v1.MemberRequest]): MsgCreateGroupWithPolicy = copy(members = members ++ __vs)
    def withMembers(__v: _root_.scala.Seq[cosmos.group.v1.MemberRequest]): MsgCreateGroupWithPolicy = copy(members = __v)
    def withGroupMetadata(__v: _root_.scala.Predef.String): MsgCreateGroupWithPolicy = copy(groupMetadata = __v)
    def withGroupPolicyMetadata(__v: _root_.scala.Predef.String): MsgCreateGroupWithPolicy = copy(groupPolicyMetadata = __v)
    def withGroupPolicyAsAdmin(__v: _root_.scala.Boolean): MsgCreateGroupWithPolicy = copy(groupPolicyAsAdmin = __v)
    def getDecisionPolicy: com.google.protobuf.any.Any = decisionPolicy.getOrElse(com.google.protobuf.any.Any.defaultInstance)
    def clearDecisionPolicy: MsgCreateGroupWithPolicy = copy(decisionPolicy = _root_.scala.None)
    def withDecisionPolicy(__v: com.google.protobuf.any.Any): MsgCreateGroupWithPolicy = copy(decisionPolicy = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = admin
          if (__t != "") __t else null
        }
        case 2 => members
        case 3 => {
          val __t = groupMetadata
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = groupPolicyMetadata
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = groupPolicyAsAdmin
          if (__t != false) __t else null
        }
        case 6 => decisionPolicy.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(admin)
        case 2 => _root_.scalapb.descriptors.PRepeated(members.iterator.map(_.toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PString(groupMetadata)
        case 4 => _root_.scalapb.descriptors.PString(groupPolicyMetadata)
        case 5 => _root_.scalapb.descriptors.PBoolean(groupPolicyAsAdmin)
        case 6 => decisionPolicy.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.group.v1.MsgCreateGroupWithPolicy.type = cosmos.group.v1.MsgCreateGroupWithPolicy
    // @@protoc_insertion_point(GeneratedMessage[cosmos.group.v1.MsgCreateGroupWithPolicy])
}

object MsgCreateGroupWithPolicy extends scalapb.GeneratedMessageCompanion[cosmos.group.v1.MsgCreateGroupWithPolicy] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.group.v1.MsgCreateGroupWithPolicy] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.group.v1.MsgCreateGroupWithPolicy = {
    var __admin: _root_.scala.Predef.String = ""
    val __members: _root_.scala.collection.immutable.VectorBuilder[cosmos.group.v1.MemberRequest] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.group.v1.MemberRequest]
    var __groupMetadata: _root_.scala.Predef.String = ""
    var __groupPolicyMetadata: _root_.scala.Predef.String = ""
    var __groupPolicyAsAdmin: _root_.scala.Boolean = false
    var __decisionPolicy: _root_.scala.Option[com.google.protobuf.any.Any] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __admin = _input__.readStringRequireUtf8()
        case 18 =>
          __members += _root_.scalapb.LiteParser.readMessage[cosmos.group.v1.MemberRequest](_input__)
        case 26 =>
          __groupMetadata = _input__.readStringRequireUtf8()
        case 34 =>
          __groupPolicyMetadata = _input__.readStringRequireUtf8()
        case 40 =>
          __groupPolicyAsAdmin = _input__.readBool()
        case 50 =>
          __decisionPolicy = _root_.scala.Option(__decisionPolicy.fold(_root_.scalapb.LiteParser.readMessage[com.google.protobuf.any.Any](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.group.v1.MsgCreateGroupWithPolicy(
        admin = __admin,
        members = __members.result(),
        groupMetadata = __groupMetadata,
        groupPolicyMetadata = __groupPolicyMetadata,
        groupPolicyAsAdmin = __groupPolicyAsAdmin,
        decisionPolicy = __decisionPolicy,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.group.v1.MsgCreateGroupWithPolicy] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.group.v1.MsgCreateGroupWithPolicy(
        admin = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        members = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[cosmos.group.v1.MemberRequest]]).getOrElse(_root_.scala.Seq.empty),
        groupMetadata = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        groupPolicyMetadata = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        groupPolicyAsAdmin = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        decisionPolicy = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.any.Any]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.group.v1.TxProto.javaDescriptor.getMessageTypes().get(12)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.group.v1.TxProto.scalaDescriptor.messages(12)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = cosmos.group.v1.MemberRequest
      case 6 => __out = com.google.protobuf.any.Any
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.group.v1.MsgCreateGroupWithPolicy(
    admin = "",
    members = _root_.scala.Seq.empty,
    groupMetadata = "",
    groupPolicyMetadata = "",
    groupPolicyAsAdmin = false,
    decisionPolicy = _root_.scala.None
  )
  implicit class MsgCreateGroupWithPolicyLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.group.v1.MsgCreateGroupWithPolicy]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.group.v1.MsgCreateGroupWithPolicy](_l) {
    def admin: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.admin)((c_, f_) => c_.copy(admin = f_))
    def members: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.group.v1.MemberRequest]] = field(_.members)((c_, f_) => c_.copy(members = f_))
    def groupMetadata: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.groupMetadata)((c_, f_) => c_.copy(groupMetadata = f_))
    def groupPolicyMetadata: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.groupPolicyMetadata)((c_, f_) => c_.copy(groupPolicyMetadata = f_))
    def groupPolicyAsAdmin: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.groupPolicyAsAdmin)((c_, f_) => c_.copy(groupPolicyAsAdmin = f_))
    def decisionPolicy: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.any.Any] = field(_.getDecisionPolicy)((c_, f_) => c_.copy(decisionPolicy = _root_.scala.Option(f_)))
    def optionalDecisionPolicy: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.any.Any]] = field(_.decisionPolicy)((c_, f_) => c_.copy(decisionPolicy = f_))
  }
  final val ADMIN_FIELD_NUMBER = 1
  final val MEMBERS_FIELD_NUMBER = 2
  final val GROUP_METADATA_FIELD_NUMBER = 3
  final val GROUP_POLICY_METADATA_FIELD_NUMBER = 4
  final val GROUP_POLICY_AS_ADMIN_FIELD_NUMBER = 5
  final val DECISION_POLICY_FIELD_NUMBER = 6
  def of(
    admin: _root_.scala.Predef.String,
    members: _root_.scala.Seq[cosmos.group.v1.MemberRequest],
    groupMetadata: _root_.scala.Predef.String,
    groupPolicyMetadata: _root_.scala.Predef.String,
    groupPolicyAsAdmin: _root_.scala.Boolean,
    decisionPolicy: _root_.scala.Option[com.google.protobuf.any.Any]
  ): _root_.cosmos.group.v1.MsgCreateGroupWithPolicy = _root_.cosmos.group.v1.MsgCreateGroupWithPolicy(
    admin,
    members,
    groupMetadata,
    groupPolicyMetadata,
    groupPolicyAsAdmin,
    decisionPolicy
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.group.v1.MsgCreateGroupWithPolicy])
}
