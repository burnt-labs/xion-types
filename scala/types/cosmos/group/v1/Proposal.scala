// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.group.v1

/** Proposal defines a group proposal. Any member of a group can submit a proposal
  * for a group policy to decide upon.
  * A proposal consists of a set of `sdk.Msg`s that will be executed if the proposal
  * passes as well as some optional metadata associated with the proposal.
  *
  * @param id
  *   id is the unique id of the proposal.
  * @param groupPolicyAddress
  *   group_policy_address is the account address of group policy.
  * @param metadata
  *   metadata is any arbitrary metadata attached to the proposal.
  *   the recommended format of the metadata is to be found here:
  *   https://docs.cosmos.network/v0.47/modules/group#proposal-4
  * @param proposers
  *   proposers are the account addresses of the proposers.
  * @param submitTime
  *   submit_time is a timestamp specifying when a proposal was submitted.
  * @param groupVersion
  *   group_version tracks the version of the group at proposal submission.
  *   This field is here for informational purposes only.
  * @param groupPolicyVersion
  *   group_policy_version tracks the version of the group policy at proposal submission.
  *   When a decision policy is changed, existing proposals from previous policy
  *   versions will become invalid with the `ABORTED` status.
  *   This field is here for informational purposes only.
  * @param status
  *   status represents the high level position in the life cycle of the proposal. Initial value is Submitted.
  * @param finalTallyResult
  *   final_tally_result contains the sums of all weighted votes for this
  *   proposal for each vote option. It is empty at submission, and only
  *   populated after tallying, at voting period end or at proposal execution,
  *   whichever happens first.
  * @param votingPeriodEnd
  *   voting_period_end is the timestamp before which voting must be done.
  *   Unless a successful MsgExec is called before (to execute a proposal whose
  *   tally is successful before the voting period ends), tallying will be done
  *   at this point, and the `final_tally_result`and `status` fields will be
  *   accordingly updated.
  * @param executorResult
  *   executor_result is the final result of the proposal execution. Initial value is NotRun.
  * @param messages
  *   messages is a list of `sdk.Msg`s that will be executed if the proposal passes.
  * @param title
  *   title is the title of the proposal
  * @param summary
  *   summary is a short summary of the proposal
  */
@SerialVersionUID(0L)
final case class Proposal(
    id: _root_.scala.Long = 0L,
    groupPolicyAddress: _root_.scala.Predef.String = "",
    metadata: _root_.scala.Predef.String = "",
    proposers: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    submitTime: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None,
    groupVersion: _root_.scala.Long = 0L,
    groupPolicyVersion: _root_.scala.Long = 0L,
    status: cosmos.group.v1.ProposalStatus = cosmos.group.v1.ProposalStatus.PROPOSAL_STATUS_UNSPECIFIED,
    finalTallyResult: _root_.scala.Option[cosmos.group.v1.TallyResult] = _root_.scala.None,
    votingPeriodEnd: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None,
    executorResult: cosmos.group.v1.ProposalExecutorResult = cosmos.group.v1.ProposalExecutorResult.PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED,
    messages: _root_.scala.Seq[com.google.protobuf.any.Any] = _root_.scala.Seq.empty,
    title: _root_.scala.Predef.String = "",
    summary: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Proposal] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = id
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(1, __value)
        }
      };
      
      {
        val __value = groupPolicyAddress
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = metadata
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      proposers.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
      }
      if (submitTime.isDefined) {
        val __value = submitTime.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = groupVersion
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(6, __value)
        }
      };
      
      {
        val __value = groupPolicyVersion
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(7, __value)
        }
      };
      
      {
        val __value = status.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(8, __value)
        }
      };
      if (finalTallyResult.isDefined) {
        val __value = finalTallyResult.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (votingPeriodEnd.isDefined) {
        val __value = votingPeriodEnd.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = executorResult.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(11, __value)
        }
      };
      messages.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = title
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(13, __value)
        }
      };
      
      {
        val __value = summary
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(14, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = id
        if (__v != 0L) {
          _output__.writeUInt64(1, __v)
        }
      };
      {
        val __v = groupPolicyAddress
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = metadata
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      proposers.foreach { __v =>
        val __m = __v
        _output__.writeString(4, __m)
      };
      submitTime.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = groupVersion
        if (__v != 0L) {
          _output__.writeUInt64(6, __v)
        }
      };
      {
        val __v = groupPolicyVersion
        if (__v != 0L) {
          _output__.writeUInt64(7, __v)
        }
      };
      {
        val __v = status.value
        if (__v != 0) {
          _output__.writeEnum(8, __v)
        }
      };
      finalTallyResult.foreach { __v =>
        val __m = __v
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      votingPeriodEnd.foreach { __v =>
        val __m = __v
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = executorResult.value
        if (__v != 0) {
          _output__.writeEnum(11, __v)
        }
      };
      messages.foreach { __v =>
        val __m = __v
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = title
        if (!__v.isEmpty) {
          _output__.writeString(13, __v)
        }
      };
      {
        val __v = summary
        if (!__v.isEmpty) {
          _output__.writeString(14, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withId(__v: _root_.scala.Long): Proposal = copy(id = __v)
    def withGroupPolicyAddress(__v: _root_.scala.Predef.String): Proposal = copy(groupPolicyAddress = __v)
    def withMetadata(__v: _root_.scala.Predef.String): Proposal = copy(metadata = __v)
    def clearProposers = copy(proposers = _root_.scala.Seq.empty)
    def addProposers(__vs: _root_.scala.Predef.String *): Proposal = addAllProposers(__vs)
    def addAllProposers(__vs: Iterable[_root_.scala.Predef.String]): Proposal = copy(proposers = proposers ++ __vs)
    def withProposers(__v: _root_.scala.Seq[_root_.scala.Predef.String]): Proposal = copy(proposers = __v)
    def getSubmitTime: com.google.protobuf.timestamp.Timestamp = submitTime.getOrElse(com.google.protobuf.timestamp.Timestamp.defaultInstance)
    def clearSubmitTime: Proposal = copy(submitTime = _root_.scala.None)
    def withSubmitTime(__v: com.google.protobuf.timestamp.Timestamp): Proposal = copy(submitTime = Option(__v))
    def withGroupVersion(__v: _root_.scala.Long): Proposal = copy(groupVersion = __v)
    def withGroupPolicyVersion(__v: _root_.scala.Long): Proposal = copy(groupPolicyVersion = __v)
    def withStatus(__v: cosmos.group.v1.ProposalStatus): Proposal = copy(status = __v)
    def getFinalTallyResult: cosmos.group.v1.TallyResult = finalTallyResult.getOrElse(cosmos.group.v1.TallyResult.defaultInstance)
    def clearFinalTallyResult: Proposal = copy(finalTallyResult = _root_.scala.None)
    def withFinalTallyResult(__v: cosmos.group.v1.TallyResult): Proposal = copy(finalTallyResult = Option(__v))
    def getVotingPeriodEnd: com.google.protobuf.timestamp.Timestamp = votingPeriodEnd.getOrElse(com.google.protobuf.timestamp.Timestamp.defaultInstance)
    def clearVotingPeriodEnd: Proposal = copy(votingPeriodEnd = _root_.scala.None)
    def withVotingPeriodEnd(__v: com.google.protobuf.timestamp.Timestamp): Proposal = copy(votingPeriodEnd = Option(__v))
    def withExecutorResult(__v: cosmos.group.v1.ProposalExecutorResult): Proposal = copy(executorResult = __v)
    def clearMessages = copy(messages = _root_.scala.Seq.empty)
    def addMessages(__vs: com.google.protobuf.any.Any *): Proposal = addAllMessages(__vs)
    def addAllMessages(__vs: Iterable[com.google.protobuf.any.Any]): Proposal = copy(messages = messages ++ __vs)
    def withMessages(__v: _root_.scala.Seq[com.google.protobuf.any.Any]): Proposal = copy(messages = __v)
    def withTitle(__v: _root_.scala.Predef.String): Proposal = copy(title = __v)
    def withSummary(__v: _root_.scala.Predef.String): Proposal = copy(summary = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = id
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = groupPolicyAddress
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = metadata
          if (__t != "") __t else null
        }
        case 4 => proposers
        case 5 => submitTime.orNull
        case 6 => {
          val __t = groupVersion
          if (__t != 0L) __t else null
        }
        case 7 => {
          val __t = groupPolicyVersion
          if (__t != 0L) __t else null
        }
        case 8 => {
          val __t = status.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 9 => finalTallyResult.orNull
        case 10 => votingPeriodEnd.orNull
        case 11 => {
          val __t = executorResult.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 12 => messages
        case 13 => {
          val __t = title
          if (__t != "") __t else null
        }
        case 14 => {
          val __t = summary
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(id)
        case 2 => _root_.scalapb.descriptors.PString(groupPolicyAddress)
        case 3 => _root_.scalapb.descriptors.PString(metadata)
        case 4 => _root_.scalapb.descriptors.PRepeated(proposers.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 5 => submitTime.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => _root_.scalapb.descriptors.PLong(groupVersion)
        case 7 => _root_.scalapb.descriptors.PLong(groupPolicyVersion)
        case 8 => _root_.scalapb.descriptors.PEnum(status.scalaValueDescriptor)
        case 9 => finalTallyResult.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => votingPeriodEnd.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => _root_.scalapb.descriptors.PEnum(executorResult.scalaValueDescriptor)
        case 12 => _root_.scalapb.descriptors.PRepeated(messages.iterator.map(_.toPMessage).toVector)
        case 13 => _root_.scalapb.descriptors.PString(title)
        case 14 => _root_.scalapb.descriptors.PString(summary)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.group.v1.Proposal.type = cosmos.group.v1.Proposal
    // @@protoc_insertion_point(GeneratedMessage[cosmos.group.v1.Proposal])
}

object Proposal extends scalapb.GeneratedMessageCompanion[cosmos.group.v1.Proposal] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.group.v1.Proposal] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.group.v1.Proposal = {
    var __id: _root_.scala.Long = 0L
    var __groupPolicyAddress: _root_.scala.Predef.String = ""
    var __metadata: _root_.scala.Predef.String = ""
    val __proposers: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var __submitTime: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None
    var __groupVersion: _root_.scala.Long = 0L
    var __groupPolicyVersion: _root_.scala.Long = 0L
    var __status: cosmos.group.v1.ProposalStatus = cosmos.group.v1.ProposalStatus.PROPOSAL_STATUS_UNSPECIFIED
    var __finalTallyResult: _root_.scala.Option[cosmos.group.v1.TallyResult] = _root_.scala.None
    var __votingPeriodEnd: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None
    var __executorResult: cosmos.group.v1.ProposalExecutorResult = cosmos.group.v1.ProposalExecutorResult.PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED
    val __messages: _root_.scala.collection.immutable.VectorBuilder[com.google.protobuf.any.Any] = new _root_.scala.collection.immutable.VectorBuilder[com.google.protobuf.any.Any]
    var __title: _root_.scala.Predef.String = ""
    var __summary: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __id = _input__.readUInt64()
        case 18 =>
          __groupPolicyAddress = _input__.readStringRequireUtf8()
        case 26 =>
          __metadata = _input__.readStringRequireUtf8()
        case 34 =>
          __proposers += _input__.readStringRequireUtf8()
        case 42 =>
          __submitTime = _root_.scala.Option(__submitTime.fold(_root_.scalapb.LiteParser.readMessage[com.google.protobuf.timestamp.Timestamp](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 48 =>
          __groupVersion = _input__.readUInt64()
        case 56 =>
          __groupPolicyVersion = _input__.readUInt64()
        case 64 =>
          __status = cosmos.group.v1.ProposalStatus.fromValue(_input__.readEnum())
        case 74 =>
          __finalTallyResult = _root_.scala.Option(__finalTallyResult.fold(_root_.scalapb.LiteParser.readMessage[cosmos.group.v1.TallyResult](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 82 =>
          __votingPeriodEnd = _root_.scala.Option(__votingPeriodEnd.fold(_root_.scalapb.LiteParser.readMessage[com.google.protobuf.timestamp.Timestamp](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 88 =>
          __executorResult = cosmos.group.v1.ProposalExecutorResult.fromValue(_input__.readEnum())
        case 98 =>
          __messages += _root_.scalapb.LiteParser.readMessage[com.google.protobuf.any.Any](_input__)
        case 106 =>
          __title = _input__.readStringRequireUtf8()
        case 114 =>
          __summary = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.group.v1.Proposal(
        id = __id,
        groupPolicyAddress = __groupPolicyAddress,
        metadata = __metadata,
        proposers = __proposers.result(),
        submitTime = __submitTime,
        groupVersion = __groupVersion,
        groupPolicyVersion = __groupPolicyVersion,
        status = __status,
        finalTallyResult = __finalTallyResult,
        votingPeriodEnd = __votingPeriodEnd,
        executorResult = __executorResult,
        messages = __messages.result(),
        title = __title,
        summary = __summary,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.group.v1.Proposal] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.group.v1.Proposal(
        id = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        groupPolicyAddress = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        metadata = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        proposers = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        submitTime = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.timestamp.Timestamp]]),
        groupVersion = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        groupPolicyVersion = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        status = cosmos.group.v1.ProposalStatus.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(cosmos.group.v1.ProposalStatus.PROPOSAL_STATUS_UNSPECIFIED.scalaValueDescriptor).number),
        finalTallyResult = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[_root_.scala.Option[cosmos.group.v1.TallyResult]]),
        votingPeriodEnd = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.timestamp.Timestamp]]),
        executorResult = cosmos.group.v1.ProposalExecutorResult.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(cosmos.group.v1.ProposalExecutorResult.PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED.scalaValueDescriptor).number),
        messages = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.Seq[com.google.protobuf.any.Any]]).getOrElse(_root_.scala.Seq.empty),
        title = __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        summary = __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.group.v1.TypesProto.javaDescriptor.getMessageTypes().get(8)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.group.v1.TypesProto.scalaDescriptor.messages(8)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 5 => __out = com.google.protobuf.timestamp.Timestamp
      case 9 => __out = cosmos.group.v1.TallyResult
      case 10 => __out = com.google.protobuf.timestamp.Timestamp
      case 12 => __out = com.google.protobuf.any.Any
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 8 => cosmos.group.v1.ProposalStatus
      case 11 => cosmos.group.v1.ProposalExecutorResult
    }
  }
  lazy val defaultInstance = cosmos.group.v1.Proposal(
    id = 0L,
    groupPolicyAddress = "",
    metadata = "",
    proposers = _root_.scala.Seq.empty,
    submitTime = _root_.scala.None,
    groupVersion = 0L,
    groupPolicyVersion = 0L,
    status = cosmos.group.v1.ProposalStatus.PROPOSAL_STATUS_UNSPECIFIED,
    finalTallyResult = _root_.scala.None,
    votingPeriodEnd = _root_.scala.None,
    executorResult = cosmos.group.v1.ProposalExecutorResult.PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED,
    messages = _root_.scala.Seq.empty,
    title = "",
    summary = ""
  )
  implicit class ProposalLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.group.v1.Proposal]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.group.v1.Proposal](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def groupPolicyAddress: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.groupPolicyAddress)((c_, f_) => c_.copy(groupPolicyAddress = f_))
    def metadata: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.metadata)((c_, f_) => c_.copy(metadata = f_))
    def proposers: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.proposers)((c_, f_) => c_.copy(proposers = f_))
    def submitTime: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.timestamp.Timestamp] = field(_.getSubmitTime)((c_, f_) => c_.copy(submitTime = _root_.scala.Option(f_)))
    def optionalSubmitTime: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.timestamp.Timestamp]] = field(_.submitTime)((c_, f_) => c_.copy(submitTime = f_))
    def groupVersion: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.groupVersion)((c_, f_) => c_.copy(groupVersion = f_))
    def groupPolicyVersion: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.groupPolicyVersion)((c_, f_) => c_.copy(groupPolicyVersion = f_))
    def status: _root_.scalapb.lenses.Lens[UpperPB, cosmos.group.v1.ProposalStatus] = field(_.status)((c_, f_) => c_.copy(status = f_))
    def finalTallyResult: _root_.scalapb.lenses.Lens[UpperPB, cosmos.group.v1.TallyResult] = field(_.getFinalTallyResult)((c_, f_) => c_.copy(finalTallyResult = _root_.scala.Option(f_)))
    def optionalFinalTallyResult: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[cosmos.group.v1.TallyResult]] = field(_.finalTallyResult)((c_, f_) => c_.copy(finalTallyResult = f_))
    def votingPeriodEnd: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.timestamp.Timestamp] = field(_.getVotingPeriodEnd)((c_, f_) => c_.copy(votingPeriodEnd = _root_.scala.Option(f_)))
    def optionalVotingPeriodEnd: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.timestamp.Timestamp]] = field(_.votingPeriodEnd)((c_, f_) => c_.copy(votingPeriodEnd = f_))
    def executorResult: _root_.scalapb.lenses.Lens[UpperPB, cosmos.group.v1.ProposalExecutorResult] = field(_.executorResult)((c_, f_) => c_.copy(executorResult = f_))
    def messages: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.google.protobuf.any.Any]] = field(_.messages)((c_, f_) => c_.copy(messages = f_))
    def title: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.title)((c_, f_) => c_.copy(title = f_))
    def summary: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.summary)((c_, f_) => c_.copy(summary = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val GROUP_POLICY_ADDRESS_FIELD_NUMBER = 2
  final val METADATA_FIELD_NUMBER = 3
  final val PROPOSERS_FIELD_NUMBER = 4
  final val SUBMIT_TIME_FIELD_NUMBER = 5
  final val GROUP_VERSION_FIELD_NUMBER = 6
  final val GROUP_POLICY_VERSION_FIELD_NUMBER = 7
  final val STATUS_FIELD_NUMBER = 8
  final val FINAL_TALLY_RESULT_FIELD_NUMBER = 9
  final val VOTING_PERIOD_END_FIELD_NUMBER = 10
  final val EXECUTOR_RESULT_FIELD_NUMBER = 11
  final val MESSAGES_FIELD_NUMBER = 12
  final val TITLE_FIELD_NUMBER = 13
  final val SUMMARY_FIELD_NUMBER = 14
  def of(
    id: _root_.scala.Long,
    groupPolicyAddress: _root_.scala.Predef.String,
    metadata: _root_.scala.Predef.String,
    proposers: _root_.scala.Seq[_root_.scala.Predef.String],
    submitTime: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp],
    groupVersion: _root_.scala.Long,
    groupPolicyVersion: _root_.scala.Long,
    status: cosmos.group.v1.ProposalStatus,
    finalTallyResult: _root_.scala.Option[cosmos.group.v1.TallyResult],
    votingPeriodEnd: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp],
    executorResult: cosmos.group.v1.ProposalExecutorResult,
    messages: _root_.scala.Seq[com.google.protobuf.any.Any],
    title: _root_.scala.Predef.String,
    summary: _root_.scala.Predef.String
  ): _root_.cosmos.group.v1.Proposal = _root_.cosmos.group.v1.Proposal(
    id,
    groupPolicyAddress,
    metadata,
    proposers,
    submitTime,
    groupVersion,
    groupPolicyVersion,
    status,
    finalTallyResult,
    votingPeriodEnd,
    executorResult,
    messages,
    title,
    summary
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.group.v1.Proposal])
}
