// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.group.v1

/** TallyResult represents the sum of weighted votes for each vote option.
  *
  * @param yesCount
  *   yes_count is the weighted sum of yes votes.
  * @param abstainCount
  *   abstain_count is the weighted sum of abstainers.
  * @param noCount
  *   no_count is the weighted sum of no votes.
  * @param noWithVetoCount
  *   no_with_veto_count is the weighted sum of veto.
  */
@SerialVersionUID(0L)
final case class TallyResult(
    yesCount: _root_.scala.Predef.String = "",
    abstainCount: _root_.scala.Predef.String = "",
    noCount: _root_.scala.Predef.String = "",
    noWithVetoCount: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TallyResult] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = yesCount
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = abstainCount
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = noCount
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = noWithVetoCount
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = yesCount
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = abstainCount
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = noCount
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = noWithVetoCount
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withYesCount(__v: _root_.scala.Predef.String): TallyResult = copy(yesCount = __v)
    def withAbstainCount(__v: _root_.scala.Predef.String): TallyResult = copy(abstainCount = __v)
    def withNoCount(__v: _root_.scala.Predef.String): TallyResult = copy(noCount = __v)
    def withNoWithVetoCount(__v: _root_.scala.Predef.String): TallyResult = copy(noWithVetoCount = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = yesCount
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = abstainCount
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = noCount
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = noWithVetoCount
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(yesCount)
        case 2 => _root_.scalapb.descriptors.PString(abstainCount)
        case 3 => _root_.scalapb.descriptors.PString(noCount)
        case 4 => _root_.scalapb.descriptors.PString(noWithVetoCount)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.group.v1.TallyResult.type = cosmos.group.v1.TallyResult
    // @@protoc_insertion_point(GeneratedMessage[cosmos.group.v1.TallyResult])
}

object TallyResult extends scalapb.GeneratedMessageCompanion[cosmos.group.v1.TallyResult] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.group.v1.TallyResult] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.group.v1.TallyResult = {
    var __yesCount: _root_.scala.Predef.String = ""
    var __abstainCount: _root_.scala.Predef.String = ""
    var __noCount: _root_.scala.Predef.String = ""
    var __noWithVetoCount: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __yesCount = _input__.readStringRequireUtf8()
        case 18 =>
          __abstainCount = _input__.readStringRequireUtf8()
        case 26 =>
          __noCount = _input__.readStringRequireUtf8()
        case 34 =>
          __noWithVetoCount = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.group.v1.TallyResult(
        yesCount = __yesCount,
        abstainCount = __abstainCount,
        noCount = __noCount,
        noWithVetoCount = __noWithVetoCount,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.group.v1.TallyResult] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.group.v1.TallyResult(
        yesCount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        abstainCount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        noCount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        noWithVetoCount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.group.v1.TypesProto.javaDescriptor.getMessageTypes().get(9)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.group.v1.TypesProto.scalaDescriptor.messages(9)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.group.v1.TallyResult(
    yesCount = "",
    abstainCount = "",
    noCount = "",
    noWithVetoCount = ""
  )
  implicit class TallyResultLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.group.v1.TallyResult]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.group.v1.TallyResult](_l) {
    def yesCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.yesCount)((c_, f_) => c_.copy(yesCount = f_))
    def abstainCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.abstainCount)((c_, f_) => c_.copy(abstainCount = f_))
    def noCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.noCount)((c_, f_) => c_.copy(noCount = f_))
    def noWithVetoCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.noWithVetoCount)((c_, f_) => c_.copy(noWithVetoCount = f_))
  }
  final val YES_COUNT_FIELD_NUMBER = 1
  final val ABSTAIN_COUNT_FIELD_NUMBER = 2
  final val NO_COUNT_FIELD_NUMBER = 3
  final val NO_WITH_VETO_COUNT_FIELD_NUMBER = 4
  def of(
    yesCount: _root_.scala.Predef.String,
    abstainCount: _root_.scala.Predef.String,
    noCount: _root_.scala.Predef.String,
    noWithVetoCount: _root_.scala.Predef.String
  ): _root_.cosmos.group.v1.TallyResult = _root_.cosmos.group.v1.TallyResult(
    yesCount,
    abstainCount,
    noCount,
    noWithVetoCount
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.group.v1.TallyResult])
}
