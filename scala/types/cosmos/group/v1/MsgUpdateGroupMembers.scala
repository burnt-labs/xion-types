// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.group.v1

/** MsgUpdateGroupMembers is the Msg/UpdateGroupMembers request type.
  *
  * @param admin
  *   admin is the account address of the group admin.
  * @param groupId
  *   group_id is the unique ID of the group.
  * @param memberUpdates
  *   member_updates is the list of members to update,
  *   set weight to 0 to remove a member.
  */
@SerialVersionUID(0L)
final case class MsgUpdateGroupMembers(
    admin: _root_.scala.Predef.String = "",
    groupId: _root_.scala.Long = 0L,
    memberUpdates: _root_.scala.Seq[cosmos.group.v1.MemberRequest] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[MsgUpdateGroupMembers] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = admin
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = groupId
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(2, __value)
        }
      };
      memberUpdates.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = admin
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = groupId
        if (__v != 0L) {
          _output__.writeUInt64(2, __v)
        }
      };
      memberUpdates.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withAdmin(__v: _root_.scala.Predef.String): MsgUpdateGroupMembers = copy(admin = __v)
    def withGroupId(__v: _root_.scala.Long): MsgUpdateGroupMembers = copy(groupId = __v)
    def clearMemberUpdates = copy(memberUpdates = _root_.scala.Seq.empty)
    def addMemberUpdates(__vs: cosmos.group.v1.MemberRequest *): MsgUpdateGroupMembers = addAllMemberUpdates(__vs)
    def addAllMemberUpdates(__vs: Iterable[cosmos.group.v1.MemberRequest]): MsgUpdateGroupMembers = copy(memberUpdates = memberUpdates ++ __vs)
    def withMemberUpdates(__v: _root_.scala.Seq[cosmos.group.v1.MemberRequest]): MsgUpdateGroupMembers = copy(memberUpdates = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = admin
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = groupId
          if (__t != 0L) __t else null
        }
        case 3 => memberUpdates
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(admin)
        case 2 => _root_.scalapb.descriptors.PLong(groupId)
        case 3 => _root_.scalapb.descriptors.PRepeated(memberUpdates.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.group.v1.MsgUpdateGroupMembers.type = cosmos.group.v1.MsgUpdateGroupMembers
    // @@protoc_insertion_point(GeneratedMessage[cosmos.group.v1.MsgUpdateGroupMembers])
}

object MsgUpdateGroupMembers extends scalapb.GeneratedMessageCompanion[cosmos.group.v1.MsgUpdateGroupMembers] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.group.v1.MsgUpdateGroupMembers] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.group.v1.MsgUpdateGroupMembers = {
    var __admin: _root_.scala.Predef.String = ""
    var __groupId: _root_.scala.Long = 0L
    val __memberUpdates: _root_.scala.collection.immutable.VectorBuilder[cosmos.group.v1.MemberRequest] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.group.v1.MemberRequest]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __admin = _input__.readStringRequireUtf8()
        case 16 =>
          __groupId = _input__.readUInt64()
        case 26 =>
          __memberUpdates += _root_.scalapb.LiteParser.readMessage[cosmos.group.v1.MemberRequest](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.group.v1.MsgUpdateGroupMembers(
        admin = __admin,
        groupId = __groupId,
        memberUpdates = __memberUpdates.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.group.v1.MsgUpdateGroupMembers] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.group.v1.MsgUpdateGroupMembers(
        admin = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        groupId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        memberUpdates = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[cosmos.group.v1.MemberRequest]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.group.v1.TxProto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.group.v1.TxProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = cosmos.group.v1.MemberRequest
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.group.v1.MsgUpdateGroupMembers(
    admin = "",
    groupId = 0L,
    memberUpdates = _root_.scala.Seq.empty
  )
  implicit class MsgUpdateGroupMembersLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.group.v1.MsgUpdateGroupMembers]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.group.v1.MsgUpdateGroupMembers](_l) {
    def admin: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.admin)((c_, f_) => c_.copy(admin = f_))
    def groupId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.groupId)((c_, f_) => c_.copy(groupId = f_))
    def memberUpdates: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.group.v1.MemberRequest]] = field(_.memberUpdates)((c_, f_) => c_.copy(memberUpdates = f_))
  }
  final val ADMIN_FIELD_NUMBER = 1
  final val GROUP_ID_FIELD_NUMBER = 2
  final val MEMBER_UPDATES_FIELD_NUMBER = 3
  def of(
    admin: _root_.scala.Predef.String,
    groupId: _root_.scala.Long,
    memberUpdates: _root_.scala.Seq[cosmos.group.v1.MemberRequest]
  ): _root_.cosmos.group.v1.MsgUpdateGroupMembers = _root_.cosmos.group.v1.MsgUpdateGroupMembers(
    admin,
    groupId,
    memberUpdates
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.group.v1.MsgUpdateGroupMembers])
}
