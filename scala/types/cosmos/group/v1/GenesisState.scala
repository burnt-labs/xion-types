// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.group.v1

/** GenesisState defines the group module's genesis state.
  *
  * @param groupSeq
  *   group_seq is the group table orm.Sequence,
  *   it is used to get the next group ID.
  * @param groups
  *   groups is the list of groups info.
  * @param groupMembers
  *   group_members is the list of groups members.
  * @param groupPolicySeq
  *   group_policy_seq is the group policy table orm.Sequence,
  *   it is used to generate the next group policy account address.
  * @param groupPolicies
  *   group_policies is the list of group policies info.
  * @param proposalSeq
  *   proposal_seq is the proposal table orm.Sequence,
  *   it is used to get the next proposal ID.
  * @param proposals
  *   proposals is the list of proposals.
  * @param votes
  *   votes is the list of votes.
  */
@SerialVersionUID(0L)
final case class GenesisState(
    groupSeq: _root_.scala.Long = 0L,
    groups: _root_.scala.Seq[cosmos.group.v1.GroupInfo] = _root_.scala.Seq.empty,
    groupMembers: _root_.scala.Seq[cosmos.group.v1.GroupMember] = _root_.scala.Seq.empty,
    groupPolicySeq: _root_.scala.Long = 0L,
    groupPolicies: _root_.scala.Seq[cosmos.group.v1.GroupPolicyInfo] = _root_.scala.Seq.empty,
    proposalSeq: _root_.scala.Long = 0L,
    proposals: _root_.scala.Seq[cosmos.group.v1.Proposal] = _root_.scala.Seq.empty,
    votes: _root_.scala.Seq[cosmos.group.v1.Vote] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[GenesisState] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = groupSeq
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(1, __value)
        }
      };
      groups.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      groupMembers.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = groupPolicySeq
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(4, __value)
        }
      };
      groupPolicies.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = proposalSeq
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(6, __value)
        }
      };
      proposals.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      votes.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = groupSeq
        if (__v != 0L) {
          _output__.writeUInt64(1, __v)
        }
      };
      groups.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      groupMembers.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = groupPolicySeq
        if (__v != 0L) {
          _output__.writeUInt64(4, __v)
        }
      };
      groupPolicies.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = proposalSeq
        if (__v != 0L) {
          _output__.writeUInt64(6, __v)
        }
      };
      proposals.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      votes.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withGroupSeq(__v: _root_.scala.Long): GenesisState = copy(groupSeq = __v)
    def clearGroups = copy(groups = _root_.scala.Seq.empty)
    def addGroups(__vs: cosmos.group.v1.GroupInfo *): GenesisState = addAllGroups(__vs)
    def addAllGroups(__vs: Iterable[cosmos.group.v1.GroupInfo]): GenesisState = copy(groups = groups ++ __vs)
    def withGroups(__v: _root_.scala.Seq[cosmos.group.v1.GroupInfo]): GenesisState = copy(groups = __v)
    def clearGroupMembers = copy(groupMembers = _root_.scala.Seq.empty)
    def addGroupMembers(__vs: cosmos.group.v1.GroupMember *): GenesisState = addAllGroupMembers(__vs)
    def addAllGroupMembers(__vs: Iterable[cosmos.group.v1.GroupMember]): GenesisState = copy(groupMembers = groupMembers ++ __vs)
    def withGroupMembers(__v: _root_.scala.Seq[cosmos.group.v1.GroupMember]): GenesisState = copy(groupMembers = __v)
    def withGroupPolicySeq(__v: _root_.scala.Long): GenesisState = copy(groupPolicySeq = __v)
    def clearGroupPolicies = copy(groupPolicies = _root_.scala.Seq.empty)
    def addGroupPolicies(__vs: cosmos.group.v1.GroupPolicyInfo *): GenesisState = addAllGroupPolicies(__vs)
    def addAllGroupPolicies(__vs: Iterable[cosmos.group.v1.GroupPolicyInfo]): GenesisState = copy(groupPolicies = groupPolicies ++ __vs)
    def withGroupPolicies(__v: _root_.scala.Seq[cosmos.group.v1.GroupPolicyInfo]): GenesisState = copy(groupPolicies = __v)
    def withProposalSeq(__v: _root_.scala.Long): GenesisState = copy(proposalSeq = __v)
    def clearProposals = copy(proposals = _root_.scala.Seq.empty)
    def addProposals(__vs: cosmos.group.v1.Proposal *): GenesisState = addAllProposals(__vs)
    def addAllProposals(__vs: Iterable[cosmos.group.v1.Proposal]): GenesisState = copy(proposals = proposals ++ __vs)
    def withProposals(__v: _root_.scala.Seq[cosmos.group.v1.Proposal]): GenesisState = copy(proposals = __v)
    def clearVotes = copy(votes = _root_.scala.Seq.empty)
    def addVotes(__vs: cosmos.group.v1.Vote *): GenesisState = addAllVotes(__vs)
    def addAllVotes(__vs: Iterable[cosmos.group.v1.Vote]): GenesisState = copy(votes = votes ++ __vs)
    def withVotes(__v: _root_.scala.Seq[cosmos.group.v1.Vote]): GenesisState = copy(votes = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = groupSeq
          if (__t != 0L) __t else null
        }
        case 2 => groups
        case 3 => groupMembers
        case 4 => {
          val __t = groupPolicySeq
          if (__t != 0L) __t else null
        }
        case 5 => groupPolicies
        case 6 => {
          val __t = proposalSeq
          if (__t != 0L) __t else null
        }
        case 7 => proposals
        case 8 => votes
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(groupSeq)
        case 2 => _root_.scalapb.descriptors.PRepeated(groups.iterator.map(_.toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PRepeated(groupMembers.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PLong(groupPolicySeq)
        case 5 => _root_.scalapb.descriptors.PRepeated(groupPolicies.iterator.map(_.toPMessage).toVector)
        case 6 => _root_.scalapb.descriptors.PLong(proposalSeq)
        case 7 => _root_.scalapb.descriptors.PRepeated(proposals.iterator.map(_.toPMessage).toVector)
        case 8 => _root_.scalapb.descriptors.PRepeated(votes.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.group.v1.GenesisState.type = cosmos.group.v1.GenesisState
    // @@protoc_insertion_point(GeneratedMessage[cosmos.group.v1.GenesisState])
}

object GenesisState extends scalapb.GeneratedMessageCompanion[cosmos.group.v1.GenesisState] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.group.v1.GenesisState] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.group.v1.GenesisState = {
    var __groupSeq: _root_.scala.Long = 0L
    val __groups: _root_.scala.collection.immutable.VectorBuilder[cosmos.group.v1.GroupInfo] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.group.v1.GroupInfo]
    val __groupMembers: _root_.scala.collection.immutable.VectorBuilder[cosmos.group.v1.GroupMember] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.group.v1.GroupMember]
    var __groupPolicySeq: _root_.scala.Long = 0L
    val __groupPolicies: _root_.scala.collection.immutable.VectorBuilder[cosmos.group.v1.GroupPolicyInfo] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.group.v1.GroupPolicyInfo]
    var __proposalSeq: _root_.scala.Long = 0L
    val __proposals: _root_.scala.collection.immutable.VectorBuilder[cosmos.group.v1.Proposal] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.group.v1.Proposal]
    val __votes: _root_.scala.collection.immutable.VectorBuilder[cosmos.group.v1.Vote] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.group.v1.Vote]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __groupSeq = _input__.readUInt64()
        case 18 =>
          __groups += _root_.scalapb.LiteParser.readMessage[cosmos.group.v1.GroupInfo](_input__)
        case 26 =>
          __groupMembers += _root_.scalapb.LiteParser.readMessage[cosmos.group.v1.GroupMember](_input__)
        case 32 =>
          __groupPolicySeq = _input__.readUInt64()
        case 42 =>
          __groupPolicies += _root_.scalapb.LiteParser.readMessage[cosmos.group.v1.GroupPolicyInfo](_input__)
        case 48 =>
          __proposalSeq = _input__.readUInt64()
        case 58 =>
          __proposals += _root_.scalapb.LiteParser.readMessage[cosmos.group.v1.Proposal](_input__)
        case 66 =>
          __votes += _root_.scalapb.LiteParser.readMessage[cosmos.group.v1.Vote](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.group.v1.GenesisState(
        groupSeq = __groupSeq,
        groups = __groups.result(),
        groupMembers = __groupMembers.result(),
        groupPolicySeq = __groupPolicySeq,
        groupPolicies = __groupPolicies.result(),
        proposalSeq = __proposalSeq,
        proposals = __proposals.result(),
        votes = __votes.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.group.v1.GenesisState] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.group.v1.GenesisState(
        groupSeq = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        groups = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[cosmos.group.v1.GroupInfo]]).getOrElse(_root_.scala.Seq.empty),
        groupMembers = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[cosmos.group.v1.GroupMember]]).getOrElse(_root_.scala.Seq.empty),
        groupPolicySeq = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        groupPolicies = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[cosmos.group.v1.GroupPolicyInfo]]).getOrElse(_root_.scala.Seq.empty),
        proposalSeq = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        proposals = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[cosmos.group.v1.Proposal]]).getOrElse(_root_.scala.Seq.empty),
        votes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Seq[cosmos.group.v1.Vote]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.group.v1.GenesisProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.group.v1.GenesisProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = cosmos.group.v1.GroupInfo
      case 3 => __out = cosmos.group.v1.GroupMember
      case 5 => __out = cosmos.group.v1.GroupPolicyInfo
      case 7 => __out = cosmos.group.v1.Proposal
      case 8 => __out = cosmos.group.v1.Vote
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.group.v1.GenesisState(
    groupSeq = 0L,
    groups = _root_.scala.Seq.empty,
    groupMembers = _root_.scala.Seq.empty,
    groupPolicySeq = 0L,
    groupPolicies = _root_.scala.Seq.empty,
    proposalSeq = 0L,
    proposals = _root_.scala.Seq.empty,
    votes = _root_.scala.Seq.empty
  )
  implicit class GenesisStateLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.group.v1.GenesisState]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.group.v1.GenesisState](_l) {
    def groupSeq: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.groupSeq)((c_, f_) => c_.copy(groupSeq = f_))
    def groups: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.group.v1.GroupInfo]] = field(_.groups)((c_, f_) => c_.copy(groups = f_))
    def groupMembers: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.group.v1.GroupMember]] = field(_.groupMembers)((c_, f_) => c_.copy(groupMembers = f_))
    def groupPolicySeq: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.groupPolicySeq)((c_, f_) => c_.copy(groupPolicySeq = f_))
    def groupPolicies: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.group.v1.GroupPolicyInfo]] = field(_.groupPolicies)((c_, f_) => c_.copy(groupPolicies = f_))
    def proposalSeq: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.proposalSeq)((c_, f_) => c_.copy(proposalSeq = f_))
    def proposals: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.group.v1.Proposal]] = field(_.proposals)((c_, f_) => c_.copy(proposals = f_))
    def votes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.group.v1.Vote]] = field(_.votes)((c_, f_) => c_.copy(votes = f_))
  }
  final val GROUP_SEQ_FIELD_NUMBER = 1
  final val GROUPS_FIELD_NUMBER = 2
  final val GROUP_MEMBERS_FIELD_NUMBER = 3
  final val GROUP_POLICY_SEQ_FIELD_NUMBER = 4
  final val GROUP_POLICIES_FIELD_NUMBER = 5
  final val PROPOSAL_SEQ_FIELD_NUMBER = 6
  final val PROPOSALS_FIELD_NUMBER = 7
  final val VOTES_FIELD_NUMBER = 8
  def of(
    groupSeq: _root_.scala.Long,
    groups: _root_.scala.Seq[cosmos.group.v1.GroupInfo],
    groupMembers: _root_.scala.Seq[cosmos.group.v1.GroupMember],
    groupPolicySeq: _root_.scala.Long,
    groupPolicies: _root_.scala.Seq[cosmos.group.v1.GroupPolicyInfo],
    proposalSeq: _root_.scala.Long,
    proposals: _root_.scala.Seq[cosmos.group.v1.Proposal],
    votes: _root_.scala.Seq[cosmos.group.v1.Vote]
  ): _root_.cosmos.group.v1.GenesisState = _root_.cosmos.group.v1.GenesisState(
    groupSeq,
    groups,
    groupMembers,
    groupPolicySeq,
    groupPolicies,
    proposalSeq,
    proposals,
    votes
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.group.v1.GenesisState])
}
