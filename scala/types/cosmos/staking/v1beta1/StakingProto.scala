// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.staking.v1beta1

object StakingProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    com.google.protobuf.GogoProto,
    com.google.protobuf.any.AnyProto,
    com.google.protobuf.duration.DurationProto,
    com.google.protobuf.timestamp.TimestampProto,
    cosmos_proto.CosmosProto,
    cosmos.base.v1beta1.CoinProto,
    amino.AminoProto,
    tendermint.types.TypesProto,
    tendermint.abci.TypesProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      cosmos.staking.v1beta1.HistoricalInfo,
      cosmos.staking.v1beta1.CommissionRates,
      cosmos.staking.v1beta1.Commission,
      cosmos.staking.v1beta1.Description,
      cosmos.staking.v1beta1.Validator,
      cosmos.staking.v1beta1.ValAddresses,
      cosmos.staking.v1beta1.DVPair,
      cosmos.staking.v1beta1.DVPairs,
      cosmos.staking.v1beta1.DVVTriplet,
      cosmos.staking.v1beta1.DVVTriplets,
      cosmos.staking.v1beta1.Delegation,
      cosmos.staking.v1beta1.UnbondingDelegation,
      cosmos.staking.v1beta1.UnbondingDelegationEntry,
      cosmos.staking.v1beta1.RedelegationEntry,
      cosmos.staking.v1beta1.Redelegation,
      cosmos.staking.v1beta1.Params,
      cosmos.staking.v1beta1.DelegationResponse,
      cosmos.staking.v1beta1.RedelegationEntryResponse,
      cosmos.staking.v1beta1.RedelegationResponse,
      cosmos.staking.v1beta1.Pool,
      cosmos.staking.v1beta1.ValidatorUpdates
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """CiRjb3Ntb3Mvc3Rha2luZy92MWJldGExL3N0YWtpbmcucHJvdG8SFmNvc21vcy5zdGFraW5nLnYxYmV0YTEaFGdvZ29wcm90b
  y9nb2dvLnByb3RvGhlnb29nbGUvcHJvdG9idWYvYW55LnByb3RvGh5nb29nbGUvcHJvdG9idWYvZHVyYXRpb24ucHJvdG8aH2dvb
  2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8aGWNvc21vc19wcm90by9jb3Ntb3MucHJvdG8aHmNvc21vcy9iYXNlL3YxYmV0Y
  TEvY29pbi5wcm90bxoRYW1pbm8vYW1pbm8ucHJvdG8aHHRlbmRlcm1pbnQvdHlwZXMvdHlwZXMucHJvdG8aG3RlbmRlcm1pbnQvY
  WJjaS90eXBlcy5wcm90byKpAQoOSGlzdG9yaWNhbEluZm8SRgoGaGVhZGVyGAEgASgLMhgudGVuZGVybWludC50eXBlcy5IZWFkZ
  XJCFOI/CBIGaGVhZGVyyN4fAKjnsCoBUgZoZWFkZXISTwoGdmFsc2V0GAIgAygLMiEuY29zbW9zLnN0YWtpbmcudjFiZXRhMS5WY
  WxpZGF0b3JCFOI/CBIGdmFsc2V0yN4fAKjnsCoBUgZ2YWxzZXQivQIKD0NvbW1pc3Npb25SYXRlcxJTCgRyYXRlGAEgASgJQj/iP
  wYSBHJhdGXI3h8A2t4fG2Nvc21vc3Nkay5pby9tYXRoLkxlZ2FjeURlY9K0LQpjb3Ntb3MuRGVjqOewKgFSBHJhdGUSXQoIbWF4X
  3JhdGUYAiABKAlCQuI/CRIHbWF4UmF0ZcjeHwDa3h8bY29zbW9zc2RrLmlvL21hdGguTGVnYWN5RGVj0rQtCmNvc21vcy5EZWOo5
  7AqAVIHbWF4UmF0ZRJwCg9tYXhfY2hhbmdlX3JhdGUYAyABKAlCSOI/DxINbWF4Q2hhbmdlUmF0ZcjeHwDa3h8bY29zbW9zc2RrL
  mlvL21hdGguTGVnYWN5RGVj0rQtCmNvc21vcy5EZWOo57AqAVINbWF4Q2hhbmdlUmF0ZToE6KAfASLkAQoKQ29tbWlzc2lvbhJ1C
  hBjb21taXNzaW9uX3JhdGVzGAEgASgLMicuY29zbW9zLnN0YWtpbmcudjFiZXRhMS5Db21taXNzaW9uUmF0ZXNCIeI/ERIPY29tb
  Wlzc2lvblJhdGVzyN4fANDeHwGo57AqAVIPY29tbWlzc2lvblJhdGVzElkKC3VwZGF0ZV90aW1lGAIgASgLMhouZ29vZ2xlLnByb
  3RvYnVmLlRpbWVzdGFtcEIc4j8MEgp1cGRhdGVUaW1lyN4fAJDfHwGo57AqAVIKdXBkYXRlVGltZToE6KAfASL3AQoLRGVzY3Jpc
  HRpb24SJgoHbW9uaWtlchgBIAEoCUIM4j8JEgdtb25pa2VyUgdtb25pa2VyEikKCGlkZW50aXR5GAIgASgJQg3iPwoSCGlkZW50a
  XR5UghpZGVudGl0eRImCgd3ZWJzaXRlGAMgASgJQgziPwkSB3dlYnNpdGVSB3dlYnNpdGUSPwoQc2VjdXJpdHlfY29udGFjdBgEI
  AEoCUIU4j8REg9zZWN1cml0eUNvbnRhY3RSD3NlY3VyaXR5Q29udGFjdBImCgdkZXRhaWxzGAUgASgJQgziPwkSB2RldGFpbHNSB
  2RldGFpbHM6BOigHwEijQkKCVZhbGlkYXRvchJXChBvcGVyYXRvcl9hZGRyZXNzGAEgASgJQiziPxESD29wZXJhdG9yQWRkcmVzc
  9K0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZ1IPb3BlcmF0b3JBZGRyZXNzEm0KEGNvbnNlbnN1c19wdWJrZXkYAiABKAsyFC5nb29nb
  GUucHJvdG9idWYuQW55QiziPxESD2NvbnNlbnN1c1B1Ymtlecq0LRRjb3Ntb3MuY3J5cHRvLlB1YktleVIPY29uc2Vuc3VzUHVia
  2V5EiMKBmphaWxlZBgDIAEoCEIL4j8IEgZqYWlsZWRSBmphaWxlZBJHCgZzdGF0dXMYBCABKA4yIi5jb3Ntb3Muc3Rha2luZy52M
  WJldGExLkJvbmRTdGF0dXNCC+I/CBIGc3RhdHVzUgZzdGF0dXMSTgoGdG9rZW5zGAUgASgJQjbiPwgSBnRva2Vuc8jeHwDa3h8VY
  29zbW9zc2RrLmlvL21hdGguSW500rQtCmNvc21vcy5JbnRSBnRva2VucxJwChBkZWxlZ2F0b3Jfc2hhcmVzGAYgASgJQkXiPxESD
  2RlbGVnYXRvclNoYXJlc8jeHwDa3h8bY29zbW9zc2RrLmlvL21hdGguTGVnYWN5RGVj0rQtCmNvc21vcy5EZWNSD2RlbGVnYXRvc
  lNoYXJlcxJgCgtkZXNjcmlwdGlvbhgHIAEoCzIjLmNvc21vcy5zdGFraW5nLnYxYmV0YTEuRGVzY3JpcHRpb25CGeI/DRILZGVzY
  3JpcHRpb27I3h8AqOewKgFSC2Rlc2NyaXB0aW9uEj8KEHVuYm9uZGluZ19oZWlnaHQYCCABKANCFOI/ERIPdW5ib25kaW5nSGVpZ
  2h0Ug91bmJvbmRpbmdIZWlnaHQSYgoOdW5ib25kaW5nX3RpbWUYCSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQh/iP
  w8SDXVuYm9uZGluZ1RpbWXI3h8AkN8fAajnsCoBUg11bmJvbmRpbmdUaW1lElwKCmNvbW1pc3Npb24YCiABKAsyIi5jb3Ntb3Muc
  3Rha2luZy52MWJldGExLkNvbW1pc3Npb25CGOI/DBIKY29tbWlzc2lvbsjeHwCo57AqAVIKY29tbWlzc2lvbhKEAQoTbWluX3Nlb
  GZfZGVsZWdhdGlvbhgLIAEoCUJU4j8TEhFtaW5TZWxmRGVsZWdhdGlvbsjeHwDa3h8VY29zbW9zc2RrLmlvL21hdGguSW500rQtC
  mNvc21vcy5JbnTatC0PY29zbW9zLXNkayAwLjQ2UhFtaW5TZWxmRGVsZWdhdGlvbhJaCht1bmJvbmRpbmdfb25faG9sZF9yZWZfY
  291bnQYDCABKANCHOI/GRIXdW5ib25kaW5nT25Ib2xkUmVmQ291bnRSF3VuYm9uZGluZ09uSG9sZFJlZkNvdW50EjYKDXVuYm9uZ
  GluZ19pZHMYDSADKARCEeI/DhIMdW5ib25kaW5nSWRzUgx1bmJvbmRpbmdJZHM6CIigHwDooB8AIlQKDFZhbEFkZHJlc3NlcxJEC
  glhZGRyZXNzZXMYASADKAlCJuI/CxIJYWRkcmVzc2Vz0rQtFGNvc21vcy5BZGRyZXNzU3RyaW5nUglhZGRyZXNzZXMi0wEKBkRWU
  GFpchJaChFkZWxlZ2F0b3JfYWRkcmVzcxgBIAEoCUIt4j8SEhBkZWxlZ2F0b3JBZGRyZXNz0rQtFGNvc21vcy5BZGRyZXNzU3Rya
  W5nUhBkZWxlZ2F0b3JBZGRyZXNzEmMKEXZhbGlkYXRvcl9hZGRyZXNzGAIgASgJQjbiPxISEHZhbGlkYXRvckFkZHJlc3PStC0dY
  29zbW9zLlZhbGlkYXRvckFkZHJlc3NTdHJpbmdSEHZhbGlkYXRvckFkZHJlc3M6CIigHwDooB8AIlQKB0RWUGFpcnMSSQoFcGFpc
  nMYASADKAsyHi5jb3Ntb3Muc3Rha2luZy52MWJldGExLkRWUGFpckIT4j8HEgVwYWlyc8jeHwCo57AqAVIFcGFpcnMi0AIKCkRWV
  lRyaXBsZXQSWgoRZGVsZWdhdG9yX2FkZHJlc3MYASABKAlCLeI/EhIQZGVsZWdhdG9yQWRkcmVzc9K0LRRjb3Ntb3MuQWRkcmVzc
  1N0cmluZ1IQZGVsZWdhdG9yQWRkcmVzcxJtChV2YWxpZGF0b3Jfc3JjX2FkZHJlc3MYAiABKAlCOeI/FRITdmFsaWRhdG9yU3JjQ
  WRkcmVzc9K0LR1jb3Ntb3MuVmFsaWRhdG9yQWRkcmVzc1N0cmluZ1ITdmFsaWRhdG9yU3JjQWRkcmVzcxJtChV2YWxpZGF0b3JfZ
  HN0X2FkZHJlc3MYAyABKAlCOeI/FRITdmFsaWRhdG9yRHN0QWRkcmVzc9K0LR1jb3Ntb3MuVmFsaWRhdG9yQWRkcmVzc1N0cmluZ
  1ITdmFsaWRhdG9yRHN0QWRkcmVzczoIiKAfAOigHwAiZQoLRFZWVHJpcGxldHMSVgoIdHJpcGxldHMYASADKAsyIi5jb3Ntb3Muc
  3Rha2luZy52MWJldGExLkRWVlRyaXBsZXRCFuI/ChIIdHJpcGxldHPI3h8AqOewKgFSCHRyaXBsZXRzIq0CCgpEZWxlZ2F0aW9uE
  loKEWRlbGVnYXRvcl9hZGRyZXNzGAEgASgJQi3iPxISEGRlbGVnYXRvckFkZHJlc3PStC0UY29zbW9zLkFkZHJlc3NTdHJpbmdSE
  GRlbGVnYXRvckFkZHJlc3MSYwoRdmFsaWRhdG9yX2FkZHJlc3MYAiABKAlCNuI/EhIQdmFsaWRhdG9yQWRkcmVzc9K0LR1jb3Ntb
  3MuVmFsaWRhdG9yQWRkcmVzc1N0cmluZ1IQdmFsaWRhdG9yQWRkcmVzcxJUCgZzaGFyZXMYAyABKAlCPOI/CBIGc2hhcmVzyN4fA
  NreHxtjb3Ntb3NzZGsuaW8vbWF0aC5MZWdhY3lEZWPStC0KY29zbW9zLkRlY1IGc2hhcmVzOgiIoB8A6KAfACLDAgoTVW5ib25ka
  W5nRGVsZWdhdGlvbhJaChFkZWxlZ2F0b3JfYWRkcmVzcxgBIAEoCUIt4j8SEhBkZWxlZ2F0b3JBZGRyZXNz0rQtFGNvc21vcy5BZ
  GRyZXNzU3RyaW5nUhBkZWxlZ2F0b3JBZGRyZXNzEmMKEXZhbGlkYXRvcl9hZGRyZXNzGAIgASgJQjbiPxISEHZhbGlkYXRvckFkZ
  HJlc3PStC0dY29zbW9zLlZhbGlkYXRvckFkZHJlc3NTdHJpbmdSEHZhbGlkYXRvckFkZHJlc3MSYQoHZW50cmllcxgDIAMoCzIwL
  mNvc21vcy5zdGFraW5nLnYxYmV0YTEuVW5ib25kaW5nRGVsZWdhdGlvbkVudHJ5QhXiPwkSB2VudHJpZXPI3h8AqOewKgFSB2Vud
  HJpZXM6CIigHwDooB8AIpIEChhVbmJvbmRpbmdEZWxlZ2F0aW9uRW50cnkSPAoPY3JlYXRpb25faGVpZ2h0GAEgASgDQhPiPxASD
  mNyZWF0aW9uSGVpZ2h0Ug5jcmVhdGlvbkhlaWdodBJlCg9jb21wbGV0aW9uX3RpbWUYAiABKAsyGi5nb29nbGUucHJvdG9idWYuV
  GltZXN0YW1wQiDiPxASDmNvbXBsZXRpb25UaW1lyN4fAJDfHwGo57AqAVIOY29tcGxldGlvblRpbWUSZwoPaW5pdGlhbF9iYWxhb
  mNlGAMgASgJQj7iPxASDmluaXRpYWxCYWxhbmNlyN4fANreHxVjb3Ntb3NzZGsuaW8vbWF0aC5JbnTStC0KY29zbW9zLkludFIOa
  W5pdGlhbEJhbGFuY2USUQoHYmFsYW5jZRgEIAEoCUI34j8JEgdiYWxhbmNlyN4fANreHxVjb3Ntb3NzZGsuaW8vbWF0aC5JbnTSt
  C0KY29zbW9zLkludFIHYmFsYW5jZRIzCgx1bmJvbmRpbmdfaWQYBSABKARCEOI/DRILdW5ib25kaW5nSWRSC3VuYm9uZGluZ0lkE
  loKG3VuYm9uZGluZ19vbl9ob2xkX3JlZl9jb3VudBgGIAEoA0Ic4j8ZEhd1bmJvbmRpbmdPbkhvbGRSZWZDb3VudFIXdW5ib25ka
  W5nT25Ib2xkUmVmQ291bnQ6BOigHwEimAQKEVJlZGVsZWdhdGlvbkVudHJ5EjwKD2NyZWF0aW9uX2hlaWdodBgBIAEoA0IT4j8QE
  g5jcmVhdGlvbkhlaWdodFIOY3JlYXRpb25IZWlnaHQSZQoPY29tcGxldGlvbl90aW1lGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmL
  lRpbWVzdGFtcEIg4j8QEg5jb21wbGV0aW9uVGltZcjeHwCQ3x8BqOewKgFSDmNvbXBsZXRpb25UaW1lEmcKD2luaXRpYWxfYmFsY
  W5jZRgDIAEoCUI+4j8QEg5pbml0aWFsQmFsYW5jZcjeHwDa3h8VY29zbW9zc2RrLmlvL21hdGguSW500rQtCmNvc21vcy5JbnRSD
  mluaXRpYWxCYWxhbmNlEl4KCnNoYXJlc19kc3QYBCABKAlCP+I/CxIJc2hhcmVzRHN0yN4fANreHxtjb3Ntb3NzZGsuaW8vbWF0a
  C5MZWdhY3lEZWPStC0KY29zbW9zLkRlY1IJc2hhcmVzRHN0EjMKDHVuYm9uZGluZ19pZBgFIAEoBEIQ4j8NEgt1bmJvbmRpbmdJZ
  FILdW5ib25kaW5nSWQSWgobdW5ib25kaW5nX29uX2hvbGRfcmVmX2NvdW50GAYgASgDQhziPxkSF3VuYm9uZGluZ09uSG9sZFJlZ
  kNvdW50Uhd1bmJvbmRpbmdPbkhvbGRSZWZDb3VudDoE6KAfASKuAwoMUmVkZWxlZ2F0aW9uEloKEWRlbGVnYXRvcl9hZGRyZXNzG
  AEgASgJQi3iPxISEGRlbGVnYXRvckFkZHJlc3PStC0UY29zbW9zLkFkZHJlc3NTdHJpbmdSEGRlbGVnYXRvckFkZHJlc3MSbQoVd
  mFsaWRhdG9yX3NyY19hZGRyZXNzGAIgASgJQjniPxUSE3ZhbGlkYXRvclNyY0FkZHJlc3PStC0dY29zbW9zLlZhbGlkYXRvckFkZ
  HJlc3NTdHJpbmdSE3ZhbGlkYXRvclNyY0FkZHJlc3MSbQoVdmFsaWRhdG9yX2RzdF9hZGRyZXNzGAMgASgJQjniPxUSE3ZhbGlkY
  XRvckRzdEFkZHJlc3PStC0dY29zbW9zLlZhbGlkYXRvckFkZHJlc3NTdHJpbmdSE3ZhbGlkYXRvckRzdEFkZHJlc3MSWgoHZW50c
  mllcxgEIAMoCzIpLmNvc21vcy5zdGFraW5nLnYxYmV0YTEuUmVkZWxlZ2F0aW9uRW50cnlCFeI/CRIHZW50cmllc8jeHwCo57AqA
  VIHZW50cmllczoIiKAfAOigHwAikQQKBlBhcmFtcxJhCg51bmJvbmRpbmdfdGltZRgBIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5Ed
  XJhdGlvbkIf4j8PEg11bmJvbmRpbmdUaW1lyN4fAJjfHwGo57AqAVINdW5ib25kaW5nVGltZRI5Cg5tYXhfdmFsaWRhdG9ycxgCI
  AEoDUIS4j8PEg1tYXhWYWxpZGF0b3JzUg1tYXhWYWxpZGF0b3JzEjAKC21heF9lbnRyaWVzGAMgASgNQg/iPwwSCm1heEVudHJpZ
  XNSCm1heEVudHJpZXMSRQoSaGlzdG9yaWNhbF9lbnRyaWVzGAQgASgNQhbiPxMSEWhpc3RvcmljYWxFbnRyaWVzUhFoaXN0b3JpY
  2FsRW50cmllcxItCgpib25kX2Rlbm9tGAUgASgJQg7iPwsSCWJvbmREZW5vbVIJYm9uZERlbm9tEpoBChNtaW5fY29tbWlzc2lvb
  l9yYXRlGAYgASgJQmriPxMSEW1pbkNvbW1pc3Npb25SYXRlyN4fANreHxtjb3Ntb3NzZGsuaW8vbWF0aC5MZWdhY3lEZWPy3h8ae
  WFtbDoibWluX2NvbW1pc3Npb25fcmF0ZSLStC0KY29zbW9zLkRlY6jnsCoBUhFtaW5Db21taXNzaW9uUmF0ZTok6KAfAYrnsCobY
  29zbW9zLXNkay94L3N0YWtpbmcvUGFyYW1zIsQBChJEZWxlZ2F0aW9uUmVzcG9uc2USXAoKZGVsZWdhdGlvbhgBIAEoCzIiLmNvc
  21vcy5zdGFraW5nLnYxYmV0YTEuRGVsZWdhdGlvbkIY4j8MEgpkZWxlZ2F0aW9uyN4fAKjnsCoBUgpkZWxlZ2F0aW9uEkoKB2Jhb
  GFuY2UYAiABKAsyGS5jb3Ntb3MuYmFzZS52MWJldGExLkNvaW5CFeI/CRIHYmFsYW5jZcjeHwCo57AqAVIHYmFsYW5jZToE6KAfA
  CLvAQoZUmVkZWxlZ2F0aW9uRW50cnlSZXNwb25zZRJ5ChJyZWRlbGVnYXRpb25fZW50cnkYASABKAsyKS5jb3Ntb3Muc3Rha2luZ
  y52MWJldGExLlJlZGVsZWdhdGlvbkVudHJ5Qh/iPxMSEXJlZGVsZWdhdGlvbkVudHJ5yN4fAKjnsCoBUhFyZWRlbGVnYXRpb25Fb
  nRyeRJRCgdiYWxhbmNlGAQgASgJQjfiPwkSB2JhbGFuY2XI3h8A2t4fFWNvc21vc3Nkay5pby9tYXRoLkludNK0LQpjb3Ntb3MuS
  W50UgdiYWxhbmNlOgTooB8BIuYBChRSZWRlbGVnYXRpb25SZXNwb25zZRJkCgxyZWRlbGVnYXRpb24YASABKAsyJC5jb3Ntb3Muc
  3Rha2luZy52MWJldGExLlJlZGVsZWdhdGlvbkIa4j8OEgxyZWRlbGVnYXRpb27I3h8AqOewKgFSDHJlZGVsZWdhdGlvbhJiCgdlb
  nRyaWVzGAIgAygLMjEuY29zbW9zLnN0YWtpbmcudjFiZXRhMS5SZWRlbGVnYXRpb25FbnRyeVJlc3BvbnNlQhXiPwkSB2VudHJpZ
  XPI3h8AqOewKgFSB2VudHJpZXM6BOigHwAikQIKBFBvb2wShQEKEW5vdF9ib25kZWRfdG9rZW5zGAEgASgJQlniPxESD25vdEJvb
  mRlZFRva2Vuc8jeHwDa3h8VY29zbW9zc2RrLmlvL21hdGguSW506t4fEW5vdF9ib25kZWRfdG9rZW5z0rQtCmNvc21vcy5JbnSo5
  7AqAVIPbm90Qm9uZGVkVG9rZW5zEncKDWJvbmRlZF90b2tlbnMYAiABKAlCUuI/DhIMYm9uZGVkVG9rZW5zyN4fANreHxVjb3Ntb
  3NzZGsuaW8vbWF0aC5JbnTq3h8NYm9uZGVkX3Rva2Vuc9K0LQpjb3Ntb3MuSW50qOewKgFSDGJvbmRlZFRva2VuczoI6KAfAfCgH
  wEiZQoQVmFsaWRhdG9yVXBkYXRlcxJRCgd1cGRhdGVzGAEgAygLMiAudGVuZGVybWludC5hYmNpLlZhbGlkYXRvclVwZGF0ZUIV4
  j8JEgd1cGRhdGVzyN4fAKjnsCoBUgd1cGRhdGVzKpwCCgpCb25kU3RhdHVzEkgKF0JPTkRfU1RBVFVTX1VOU1BFQ0lGSUVEEAAaK
  +I/GRIXQk9ORF9TVEFUVVNfVU5TUEVDSUZJRUSKnSALVW5zcGVjaWZpZWQSPwoUQk9ORF9TVEFUVVNfVU5CT05ERUQQARol4j8WE
  hRCT05EX1NUQVRVU19VTkJPTkRFRIqdIAhVbmJvbmRlZBJCChVCT05EX1NUQVRVU19VTkJPTkRJTkcQAhon4j8XEhVCT05EX1NUQ
  VRVU19VTkJPTkRJTkeKnSAJVW5ib25kaW5nEjkKEkJPTkRfU1RBVFVTX0JPTkRFRBADGiHiPxQSEkJPTkRfU1RBVFVTX0JPTkRFR
  IqdIAZCb25kZWQaBIijHgAqsQEKCkluZnJhY3Rpb24SNwoWSU5GUkFDVElPTl9VTlNQRUNJRklFRBAAGhviPxgSFklORlJBQ1RJT
  05fVU5TUEVDSUZJRUQSNwoWSU5GUkFDVElPTl9ET1VCTEVfU0lHThABGhviPxgSFklORlJBQ1RJT05fRE9VQkxFX1NJR04SMQoTS
  U5GUkFDVElPTl9ET1dOVElNRRACGhjiPxUSE0lORlJBQ1RJT05fRE9XTlRJTUVCLlosZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zL
  XNkay94L3N0YWtpbmcvdHlwZXNiBnByb3RvMw=="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      com.google.protobuf.GogoProto.javaDescriptor,
      com.google.protobuf.any.AnyProto.javaDescriptor,
      com.google.protobuf.duration.DurationProto.javaDescriptor,
      com.google.protobuf.timestamp.TimestampProto.javaDescriptor,
      cosmos_proto.CosmosProto.javaDescriptor,
      cosmos.base.v1beta1.CoinProto.javaDescriptor,
      amino.AminoProto.javaDescriptor,
      tendermint.types.TypesProto.javaDescriptor,
      tendermint.abci.TypesProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}