// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.staking.v1beta1

/** StakeAuthorization defines authorization for delegate/undelegate/redelegate.
  *
  * @param maxTokens
  *   max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
  *   empty, there is no spend limit and any amount of coins can be delegated.
  * @param authorizationType
  *   authorization_type defines one of AuthorizationType.
  */
@SerialVersionUID(0L)
final case class StakeAuthorization(
    maxTokens: _root_.scala.Option[cosmos.base.v1beta1.Coin] = _root_.scala.None,
    validators: cosmos.staking.v1beta1.StakeAuthorization.ValidatorsOneof = cosmos.staking.v1beta1.StakeAuthorization.ValidatorsOneof.Empty,
    authorizationType: cosmos.staking.v1beta1.AuthorizationType = cosmos.staking.v1beta1.AuthorizationType.AUTHORIZATION_TYPE_UNSPECIFIED,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[StakeAuthorization] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (maxTokens.isDefined) {
        val __value = maxTokens.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (validators.allowList.isDefined) {
        val __value = validators.allowList.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (validators.denyList.isDefined) {
        val __value = validators.denyList.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = authorizationType.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(4, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      maxTokens.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      validators.allowList.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      validators.denyList.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = authorizationType.value
        if (__v != 0) {
          _output__.writeEnum(4, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getMaxTokens: cosmos.base.v1beta1.Coin = maxTokens.getOrElse(cosmos.base.v1beta1.Coin.defaultInstance)
    def clearMaxTokens: StakeAuthorization = copy(maxTokens = _root_.scala.None)
    def withMaxTokens(__v: cosmos.base.v1beta1.Coin): StakeAuthorization = copy(maxTokens = Option(__v))
    def getAllowList: cosmos.staking.v1beta1.StakeAuthorization.Validators = validators.allowList.getOrElse(cosmos.staking.v1beta1.StakeAuthorization.Validators.defaultInstance)
    def withAllowList(__v: cosmos.staking.v1beta1.StakeAuthorization.Validators): StakeAuthorization = copy(validators = cosmos.staking.v1beta1.StakeAuthorization.ValidatorsOneof.AllowList(__v))
    def getDenyList: cosmos.staking.v1beta1.StakeAuthorization.Validators = validators.denyList.getOrElse(cosmos.staking.v1beta1.StakeAuthorization.Validators.defaultInstance)
    def withDenyList(__v: cosmos.staking.v1beta1.StakeAuthorization.Validators): StakeAuthorization = copy(validators = cosmos.staking.v1beta1.StakeAuthorization.ValidatorsOneof.DenyList(__v))
    def withAuthorizationType(__v: cosmos.staking.v1beta1.AuthorizationType): StakeAuthorization = copy(authorizationType = __v)
    def clearValidatorsOneof: StakeAuthorization = copy(validators = cosmos.staking.v1beta1.StakeAuthorization.ValidatorsOneof.Empty)
    def withValidatorsOneof(__v: cosmos.staking.v1beta1.StakeAuthorization.ValidatorsOneof): StakeAuthorization = copy(validators = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => maxTokens.orNull
        case 2 => validators.allowList.orNull
        case 3 => validators.denyList.orNull
        case 4 => {
          val __t = authorizationType.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => maxTokens.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => validators.allowList.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => validators.denyList.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PEnum(authorizationType.scalaValueDescriptor)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.staking.v1beta1.StakeAuthorization.type = cosmos.staking.v1beta1.StakeAuthorization
    // @@protoc_insertion_point(GeneratedMessage[cosmos.staking.v1beta1.StakeAuthorization])
}

object StakeAuthorization extends scalapb.GeneratedMessageCompanion[cosmos.staking.v1beta1.StakeAuthorization] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.staking.v1beta1.StakeAuthorization] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.staking.v1beta1.StakeAuthorization = {
    var __maxTokens: _root_.scala.Option[cosmos.base.v1beta1.Coin] = _root_.scala.None
    var __authorizationType: cosmos.staking.v1beta1.AuthorizationType = cosmos.staking.v1beta1.AuthorizationType.AUTHORIZATION_TYPE_UNSPECIFIED
    var __validators: cosmos.staking.v1beta1.StakeAuthorization.ValidatorsOneof = cosmos.staking.v1beta1.StakeAuthorization.ValidatorsOneof.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __maxTokens = _root_.scala.Option(__maxTokens.fold(_root_.scalapb.LiteParser.readMessage[cosmos.base.v1beta1.Coin](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __validators = cosmos.staking.v1beta1.StakeAuthorization.ValidatorsOneof.AllowList(__validators.allowList.fold(_root_.scalapb.LiteParser.readMessage[cosmos.staking.v1beta1.StakeAuthorization.Validators](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __validators = cosmos.staking.v1beta1.StakeAuthorization.ValidatorsOneof.DenyList(__validators.denyList.fold(_root_.scalapb.LiteParser.readMessage[cosmos.staking.v1beta1.StakeAuthorization.Validators](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 32 =>
          __authorizationType = cosmos.staking.v1beta1.AuthorizationType.fromValue(_input__.readEnum())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.staking.v1beta1.StakeAuthorization(
        maxTokens = __maxTokens,
        authorizationType = __authorizationType,
        validators = __validators,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.staking.v1beta1.StakeAuthorization] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.staking.v1beta1.StakeAuthorization(
        maxTokens = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[cosmos.base.v1beta1.Coin]]),
        authorizationType = cosmos.staking.v1beta1.AuthorizationType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(cosmos.staking.v1beta1.AuthorizationType.AUTHORIZATION_TYPE_UNSPECIFIED.scalaValueDescriptor).number),
        validators = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[cosmos.staking.v1beta1.StakeAuthorization.Validators]]).map(cosmos.staking.v1beta1.StakeAuthorization.ValidatorsOneof.AllowList(_))
            .orElse[cosmos.staking.v1beta1.StakeAuthorization.ValidatorsOneof](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[cosmos.staking.v1beta1.StakeAuthorization.Validators]]).map(cosmos.staking.v1beta1.StakeAuthorization.ValidatorsOneof.DenyList(_)))
            .getOrElse(cosmos.staking.v1beta1.StakeAuthorization.ValidatorsOneof.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.staking.v1beta1.AuthzProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.staking.v1beta1.AuthzProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = cosmos.base.v1beta1.Coin
      case 2 => __out = cosmos.staking.v1beta1.StakeAuthorization.Validators
      case 3 => __out = cosmos.staking.v1beta1.StakeAuthorization.Validators
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.cosmos.staking.v1beta1.StakeAuthorization.Validators
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 4 => cosmos.staking.v1beta1.AuthorizationType
    }
  }
  lazy val defaultInstance = cosmos.staking.v1beta1.StakeAuthorization(
    maxTokens = _root_.scala.None,
    authorizationType = cosmos.staking.v1beta1.AuthorizationType.AUTHORIZATION_TYPE_UNSPECIFIED,
    validators = cosmos.staking.v1beta1.StakeAuthorization.ValidatorsOneof.Empty
  )
  sealed trait ValidatorsOneof extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isAllowList: _root_.scala.Boolean = false
    def isDenyList: _root_.scala.Boolean = false
    def allowList: _root_.scala.Option[cosmos.staking.v1beta1.StakeAuthorization.Validators] = _root_.scala.None
    def denyList: _root_.scala.Option[cosmos.staking.v1beta1.StakeAuthorization.Validators] = _root_.scala.None
  }
  object ValidatorsOneof {
    @SerialVersionUID(0L)
    case object Empty extends cosmos.staking.v1beta1.StakeAuthorization.ValidatorsOneof {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class AllowList(value: cosmos.staking.v1beta1.StakeAuthorization.Validators) extends cosmos.staking.v1beta1.StakeAuthorization.ValidatorsOneof {
      type ValueType = cosmos.staking.v1beta1.StakeAuthorization.Validators
      override def isAllowList: _root_.scala.Boolean = true
      override def allowList: _root_.scala.Option[cosmos.staking.v1beta1.StakeAuthorization.Validators] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class DenyList(value: cosmos.staking.v1beta1.StakeAuthorization.Validators) extends cosmos.staking.v1beta1.StakeAuthorization.ValidatorsOneof {
      type ValueType = cosmos.staking.v1beta1.StakeAuthorization.Validators
      override def isDenyList: _root_.scala.Boolean = true
      override def denyList: _root_.scala.Option[cosmos.staking.v1beta1.StakeAuthorization.Validators] = Some(value)
      override def number: _root_.scala.Int = 3
    }
  }
  /** Validators defines list of validator addresses.
    */
  @SerialVersionUID(0L)
  final case class Validators(
      address: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Validators] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        address.foreach { __item =>
          val __value = __item
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        address.foreach { __v =>
          val __m = __v
          _output__.writeString(1, __m)
        };
        unknownFields.writeTo(_output__)
      }
      def clearAddress = copy(address = _root_.scala.Seq.empty)
      def addAddress(__vs: _root_.scala.Predef.String *): Validators = addAllAddress(__vs)
      def addAllAddress(__vs: Iterable[_root_.scala.Predef.String]): Validators = copy(address = address ++ __vs)
      def withAddress(__v: _root_.scala.Seq[_root_.scala.Predef.String]): Validators = copy(address = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => address
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(address.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: cosmos.staking.v1beta1.StakeAuthorization.Validators.type = cosmos.staking.v1beta1.StakeAuthorization.Validators
      // @@protoc_insertion_point(GeneratedMessage[cosmos.staking.v1beta1.StakeAuthorization.Validators])
  }
  
  object Validators extends scalapb.GeneratedMessageCompanion[cosmos.staking.v1beta1.StakeAuthorization.Validators] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.staking.v1beta1.StakeAuthorization.Validators] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.staking.v1beta1.StakeAuthorization.Validators = {
      val __address: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __address += _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      cosmos.staking.v1beta1.StakeAuthorization.Validators(
          address = __address.result(),
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.staking.v1beta1.StakeAuthorization.Validators] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        cosmos.staking.v1beta1.StakeAuthorization.Validators(
          address = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.staking.v1beta1.StakeAuthorization.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.staking.v1beta1.StakeAuthorization.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = cosmos.staking.v1beta1.StakeAuthorization.Validators(
      address = _root_.scala.Seq.empty
    )
    implicit class ValidatorsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.staking.v1beta1.StakeAuthorization.Validators]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.staking.v1beta1.StakeAuthorization.Validators](_l) {
      def address: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.address)((c_, f_) => c_.copy(address = f_))
    }
    final val ADDRESS_FIELD_NUMBER = 1
    def of(
      address: _root_.scala.Seq[_root_.scala.Predef.String]
    ): _root_.cosmos.staking.v1beta1.StakeAuthorization.Validators = _root_.cosmos.staking.v1beta1.StakeAuthorization.Validators(
      address
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.staking.v1beta1.StakeAuthorization.Validators])
  }
  
  implicit class StakeAuthorizationLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.staking.v1beta1.StakeAuthorization]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.staking.v1beta1.StakeAuthorization](_l) {
    def maxTokens: _root_.scalapb.lenses.Lens[UpperPB, cosmos.base.v1beta1.Coin] = field(_.getMaxTokens)((c_, f_) => c_.copy(maxTokens = _root_.scala.Option(f_)))
    def optionalMaxTokens: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[cosmos.base.v1beta1.Coin]] = field(_.maxTokens)((c_, f_) => c_.copy(maxTokens = f_))
    def allowList: _root_.scalapb.lenses.Lens[UpperPB, cosmos.staking.v1beta1.StakeAuthorization.Validators] = field(_.getAllowList)((c_, f_) => c_.copy(validators = cosmos.staking.v1beta1.StakeAuthorization.ValidatorsOneof.AllowList(f_)))
    def denyList: _root_.scalapb.lenses.Lens[UpperPB, cosmos.staking.v1beta1.StakeAuthorization.Validators] = field(_.getDenyList)((c_, f_) => c_.copy(validators = cosmos.staking.v1beta1.StakeAuthorization.ValidatorsOneof.DenyList(f_)))
    def authorizationType: _root_.scalapb.lenses.Lens[UpperPB, cosmos.staking.v1beta1.AuthorizationType] = field(_.authorizationType)((c_, f_) => c_.copy(authorizationType = f_))
    def validators: _root_.scalapb.lenses.Lens[UpperPB, cosmos.staking.v1beta1.StakeAuthorization.ValidatorsOneof] = field(_.validators)((c_, f_) => c_.copy(validators = f_))
  }
  final val MAX_TOKENS_FIELD_NUMBER = 1
  final val ALLOW_LIST_FIELD_NUMBER = 2
  final val DENY_LIST_FIELD_NUMBER = 3
  final val AUTHORIZATION_TYPE_FIELD_NUMBER = 4
  def of(
    maxTokens: _root_.scala.Option[cosmos.base.v1beta1.Coin],
    validators: cosmos.staking.v1beta1.StakeAuthorization.ValidatorsOneof,
    authorizationType: cosmos.staking.v1beta1.AuthorizationType
  ): _root_.cosmos.staking.v1beta1.StakeAuthorization = _root_.cosmos.staking.v1beta1.StakeAuthorization(
    maxTokens,
    validators,
    authorizationType
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.staking.v1beta1.StakeAuthorization])
}
