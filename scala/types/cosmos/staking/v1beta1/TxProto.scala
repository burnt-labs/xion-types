// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.staking.v1beta1

object TxProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    com.google.protobuf.any.AnyProto,
    com.google.protobuf.timestamp.TimestampProto,
    com.google.protobuf.GogoProto,
    cosmos_proto.CosmosProto,
    cosmos.base.v1beta1.CoinProto,
    cosmos.staking.v1beta1.StakingProto,
    cosmos.msg.v1.MsgProto,
    amino.AminoProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      cosmos.staking.v1beta1.MsgCreateValidator,
      cosmos.staking.v1beta1.MsgCreateValidatorResponse,
      cosmos.staking.v1beta1.MsgEditValidator,
      cosmos.staking.v1beta1.MsgEditValidatorResponse,
      cosmos.staking.v1beta1.MsgDelegate,
      cosmos.staking.v1beta1.MsgDelegateResponse,
      cosmos.staking.v1beta1.MsgBeginRedelegate,
      cosmos.staking.v1beta1.MsgBeginRedelegateResponse,
      cosmos.staking.v1beta1.MsgUndelegate,
      cosmos.staking.v1beta1.MsgUndelegateResponse,
      cosmos.staking.v1beta1.MsgCancelUnbondingDelegation,
      cosmos.staking.v1beta1.MsgCancelUnbondingDelegationResponse,
      cosmos.staking.v1beta1.MsgUpdateParams,
      cosmos.staking.v1beta1.MsgUpdateParamsResponse
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """Ch9jb3Ntb3Mvc3Rha2luZy92MWJldGExL3R4LnByb3RvEhZjb3Ntb3Muc3Rha2luZy52MWJldGExGhlnb29nbGUvcHJvdG9id
  WYvYW55LnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvGhRnb2dvcHJvdG8vZ29nby5wcm90bxoZY29zbW9zX
  3Byb3RvL2Nvc21vcy5wcm90bxoeY29zbW9zL2Jhc2UvdjFiZXRhMS9jb2luLnByb3RvGiRjb3Ntb3Mvc3Rha2luZy92MWJldGExL
  3N0YWtpbmcucHJvdG8aF2Nvc21vcy9tc2cvdjEvbXNnLnByb3RvGhFhbWluby9hbWluby5wcm90byLvBQoSTXNnQ3JlYXRlVmFsa
  WRhdG9yEmAKC2Rlc2NyaXB0aW9uGAEgASgLMiMuY29zbW9zLnN0YWtpbmcudjFiZXRhMS5EZXNjcmlwdGlvbkIZ4j8NEgtkZXNjc
  mlwdGlvbsjeHwCo57AqAVILZGVzY3JpcHRpb24SYQoKY29tbWlzc2lvbhgCIAEoCzInLmNvc21vcy5zdGFraW5nLnYxYmV0YTEuQ
  29tbWlzc2lvblJhdGVzQhjiPwwSCmNvbW1pc3Npb27I3h8AqOewKgFSCmNvbW1pc3Npb24SdgoTbWluX3NlbGZfZGVsZWdhdGlvb
  hgDIAEoCUJG4j8TEhFtaW5TZWxmRGVsZWdhdGlvbsjeHwDa3h8VY29zbW9zc2RrLmlvL21hdGguSW500rQtCmNvc21vcy5JbnSo5
  7AqAVIRbWluU2VsZkRlbGVnYXRpb24SXAoRZGVsZWdhdG9yX2FkZHJlc3MYBCABKAlCLxgB4j8SEhBkZWxlZ2F0b3JBZGRyZXNz0
  rQtFGNvc21vcy5BZGRyZXNzU3RyaW5nUhBkZWxlZ2F0b3JBZGRyZXNzEmMKEXZhbGlkYXRvcl9hZGRyZXNzGAUgASgJQjbiPxISE
  HZhbGlkYXRvckFkZHJlc3PStC0dY29zbW9zLlZhbGlkYXRvckFkZHJlc3NTdHJpbmdSEHZhbGlkYXRvckFkZHJlc3MSUQoGcHVia
  2V5GAYgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueUIj4j8IEgZwdWJrZXnKtC0UY29zbW9zLmNyeXB0by5QdWJLZXlSBnB1Ymtle
  RJECgV2YWx1ZRgHIAEoCzIZLmNvc21vcy5iYXNlLnYxYmV0YTEuQ29pbkIT4j8HEgV2YWx1ZcjeHwCo57AqAVIFdmFsdWU6QIigH
  wDooB8AguewKhF2YWxpZGF0b3JfYWRkcmVzc4rnsCodY29zbW9zLXNkay9Nc2dDcmVhdGVWYWxpZGF0b3IiHAoaTXNnQ3JlYXRlV
  mFsaWRhdG9yUmVzcG9uc2Ui8wMKEE1zZ0VkaXRWYWxpZGF0b3ISYAoLZGVzY3JpcHRpb24YASABKAsyIy5jb3Ntb3Muc3Rha2luZ
  y52MWJldGExLkRlc2NyaXB0aW9uQhniPw0SC2Rlc2NyaXB0aW9uyN4fAKjnsCoBUgtkZXNjcmlwdGlvbhJjChF2YWxpZGF0b3JfY
  WRkcmVzcxgCIAEoCUI24j8SEhB2YWxpZGF0b3JBZGRyZXNz0rQtHWNvc21vcy5WYWxpZGF0b3JBZGRyZXNzU3RyaW5nUhB2YWxpZ
  GF0b3JBZGRyZXNzEmkKD2NvbW1pc3Npb25fcmF0ZRgDIAEoCUJA4j8QEg5jb21taXNzaW9uUmF0ZdreHxtjb3Ntb3NzZGsuaW8vb
  WF0aC5MZWdhY3lEZWPStC0KY29zbW9zLkRlY1IOY29tbWlzc2lvblJhdGUSbQoTbWluX3NlbGZfZGVsZWdhdGlvbhgEIAEoCUI94
  j8TEhFtaW5TZWxmRGVsZWdhdGlvbtreHxVjb3Ntb3NzZGsuaW8vbWF0aC5JbnTStC0KY29zbW9zLkludFIRbWluU2VsZkRlbGVnY
  XRpb246PoigHwDooB8AguewKhF2YWxpZGF0b3JfYWRkcmVzc4rnsCobY29zbW9zLXNkay9Nc2dFZGl0VmFsaWRhdG9yIhoKGE1zZ
  0VkaXRWYWxpZGF0b3JSZXNwb25zZSLSAgoLTXNnRGVsZWdhdGUSWgoRZGVsZWdhdG9yX2FkZHJlc3MYASABKAlCLeI/EhIQZGVsZ
  WdhdG9yQWRkcmVzc9K0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZ1IQZGVsZWdhdG9yQWRkcmVzcxJjChF2YWxpZGF0b3JfYWRkcmVzc
  xgCIAEoCUI24j8SEhB2YWxpZGF0b3JBZGRyZXNz0rQtHWNvc21vcy5WYWxpZGF0b3JBZGRyZXNzU3RyaW5nUhB2YWxpZGF0b3JBZ
  GRyZXNzEkcKBmFtb3VudBgDIAEoCzIZLmNvc21vcy5iYXNlLnYxYmV0YTEuQ29pbkIU4j8IEgZhbW91bnTI3h8AqOewKgFSBmFtb
  3VudDo5iKAfAOigHwCC57AqEWRlbGVnYXRvcl9hZGRyZXNziuewKhZjb3Ntb3Mtc2RrL01zZ0RlbGVnYXRlIhUKE01zZ0RlbGVnY
  XRlUmVzcG9uc2Ui2QMKEk1zZ0JlZ2luUmVkZWxlZ2F0ZRJaChFkZWxlZ2F0b3JfYWRkcmVzcxgBIAEoCUIt4j8SEhBkZWxlZ2F0b
  3JBZGRyZXNz0rQtFGNvc21vcy5BZGRyZXNzU3RyaW5nUhBkZWxlZ2F0b3JBZGRyZXNzEm0KFXZhbGlkYXRvcl9zcmNfYWRkcmVzc
  xgCIAEoCUI54j8VEhN2YWxpZGF0b3JTcmNBZGRyZXNz0rQtHWNvc21vcy5WYWxpZGF0b3JBZGRyZXNzU3RyaW5nUhN2YWxpZGF0b
  3JTcmNBZGRyZXNzEm0KFXZhbGlkYXRvcl9kc3RfYWRkcmVzcxgDIAEoCUI54j8VEhN2YWxpZGF0b3JEc3RBZGRyZXNz0rQtHWNvc
  21vcy5WYWxpZGF0b3JBZGRyZXNzU3RyaW5nUhN2YWxpZGF0b3JEc3RBZGRyZXNzEkcKBmFtb3VudBgEIAEoCzIZLmNvc21vcy5iY
  XNlLnYxYmV0YTEuQ29pbkIU4j8IEgZhbW91bnTI3h8AqOewKgFSBmFtb3VudDpAiKAfAOigHwCC57AqEWRlbGVnYXRvcl9hZGRyZ
  XNziuewKh1jb3Ntb3Mtc2RrL01zZ0JlZ2luUmVkZWxlZ2F0ZSKDAQoaTXNnQmVnaW5SZWRlbGVnYXRlUmVzcG9uc2USZQoPY29tc
  GxldGlvbl90aW1lGAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEIg4j8QEg5jb21wbGV0aW9uVGltZcjeHwCQ3x8Bq
  OewKgFSDmNvbXBsZXRpb25UaW1lItYCCg1Nc2dVbmRlbGVnYXRlEloKEWRlbGVnYXRvcl9hZGRyZXNzGAEgASgJQi3iPxISEGRlb
  GVnYXRvckFkZHJlc3PStC0UY29zbW9zLkFkZHJlc3NTdHJpbmdSEGRlbGVnYXRvckFkZHJlc3MSYwoRdmFsaWRhdG9yX2FkZHJlc
  3MYAiABKAlCNuI/EhIQdmFsaWRhdG9yQWRkcmVzc9K0LR1jb3Ntb3MuVmFsaWRhdG9yQWRkcmVzc1N0cmluZ1IQdmFsaWRhdG9yQ
  WRkcmVzcxJHCgZhbW91bnQYAyABKAsyGS5jb3Ntb3MuYmFzZS52MWJldGExLkNvaW5CFOI/CBIGYW1vdW50yN4fAKjnsCoBUgZhb
  W91bnQ6O4igHwDooB8AguewKhFkZWxlZ2F0b3JfYWRkcmVzc4rnsCoYY29zbW9zLXNkay9Nc2dVbmRlbGVnYXRlItoBChVNc2dVb
  mRlbGVnYXRlUmVzcG9uc2USZQoPY29tcGxldGlvbl90aW1lGAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEIg4j8QE
  g5jb21wbGV0aW9uVGltZcjeHwCQ3x8BqOewKgFSDmNvbXBsZXRpb25UaW1lEloKBmFtb3VudBgCIAEoCzIZLmNvc21vcy5iYXNlL
  nYxYmV0YTEuQ29pbkIn4j8IEgZhbW91bnTI3h8A2rQtD2Nvc21vcy1zZGsgMC41MKjnsCoBUgZhbW91bnQixQMKHE1zZ0NhbmNlb
  FVuYm9uZGluZ0RlbGVnYXRpb24SWgoRZGVsZWdhdG9yX2FkZHJlc3MYASABKAlCLeI/EhIQZGVsZWdhdG9yQWRkcmVzc9K0LRRjb
  3Ntb3MuQWRkcmVzc1N0cmluZ1IQZGVsZWdhdG9yQWRkcmVzcxJjChF2YWxpZGF0b3JfYWRkcmVzcxgCIAEoCUI24j8SEhB2YWxpZ
  GF0b3JBZGRyZXNz0rQtHWNvc21vcy5WYWxpZGF0b3JBZGRyZXNzU3RyaW5nUhB2YWxpZGF0b3JBZGRyZXNzEkcKBmFtb3VudBgDI
  AEoCzIZLmNvc21vcy5iYXNlLnYxYmV0YTEuQ29pbkIU4j8IEgZhbW91bnTI3h8AqOewKgFSBmFtb3VudBI8Cg9jcmVhdGlvbl9oZ
  WlnaHQYBCABKANCE+I/EBIOY3JlYXRpb25IZWlnaHRSDmNyZWF0aW9uSGVpZ2h0Ol2IoB8A6KAfANK0LQ9jb3Ntb3Mtc2RrIDAuN
  DaC57AqEWRlbGVnYXRvcl9hZGRyZXNziuewKidjb3Ntb3Mtc2RrL01zZ0NhbmNlbFVuYm9uZGluZ0RlbGVnYXRpb24iOwokTXNnQ
  2FuY2VsVW5ib25kaW5nRGVsZWdhdGlvblJlc3BvbnNlOhPStC0PY29zbW9zLXNkayAwLjQ2IvEBCg9Nc2dVcGRhdGVQYXJhbXMSR
  AoJYXV0aG9yaXR5GAEgASgJQibiPwsSCWF1dGhvcml0edK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZ1IJYXV0aG9yaXR5EkwKBnBhc
  mFtcxgCIAEoCzIeLmNvc21vcy5zdGFraW5nLnYxYmV0YTEuUGFyYW1zQhTiPwgSBnBhcmFtc8jeHwCo57AqAVIGcGFyYW1zOkrSt
  C0PY29zbW9zLXNkayAwLjQ3guewKglhdXRob3JpdHmK57AqJGNvc21vcy1zZGsveC9zdGFraW5nL01zZ1VwZGF0ZVBhcmFtcyIuC
  hdNc2dVcGRhdGVQYXJhbXNSZXNwb25zZToT0rQtD2Nvc21vcy1zZGsgMC40NzLHBgoDTXNnEnEKD0NyZWF0ZVZhbGlkYXRvchIqL
  mNvc21vcy5zdGFraW5nLnYxYmV0YTEuTXNnQ3JlYXRlVmFsaWRhdG9yGjIuY29zbW9zLnN0YWtpbmcudjFiZXRhMS5Nc2dDcmVhd
  GVWYWxpZGF0b3JSZXNwb25zZRJrCg1FZGl0VmFsaWRhdG9yEiguY29zbW9zLnN0YWtpbmcudjFiZXRhMS5Nc2dFZGl0VmFsaWRhd
  G9yGjAuY29zbW9zLnN0YWtpbmcudjFiZXRhMS5Nc2dFZGl0VmFsaWRhdG9yUmVzcG9uc2USXAoIRGVsZWdhdGUSIy5jb3Ntb3Muc
  3Rha2luZy52MWJldGExLk1zZ0RlbGVnYXRlGisuY29zbW9zLnN0YWtpbmcudjFiZXRhMS5Nc2dEZWxlZ2F0ZVJlc3BvbnNlEnEKD
  0JlZ2luUmVkZWxlZ2F0ZRIqLmNvc21vcy5zdGFraW5nLnYxYmV0YTEuTXNnQmVnaW5SZWRlbGVnYXRlGjIuY29zbW9zLnN0YWtpb
  mcudjFiZXRhMS5Nc2dCZWdpblJlZGVsZWdhdGVSZXNwb25zZRJiCgpVbmRlbGVnYXRlEiUuY29zbW9zLnN0YWtpbmcudjFiZXRhM
  S5Nc2dVbmRlbGVnYXRlGi0uY29zbW9zLnN0YWtpbmcudjFiZXRhMS5Nc2dVbmRlbGVnYXRlUmVzcG9uc2USpAEKGUNhbmNlbFVuY
  m9uZGluZ0RlbGVnYXRpb24SNC5jb3Ntb3Muc3Rha2luZy52MWJldGExLk1zZ0NhbmNlbFVuYm9uZGluZ0RlbGVnYXRpb24aPC5jb
  3Ntb3Muc3Rha2luZy52MWJldGExLk1zZ0NhbmNlbFVuYm9uZGluZ0RlbGVnYXRpb25SZXNwb25zZSITyrQtD2Nvc21vcy1zZGsgM
  C40NhJ9CgxVcGRhdGVQYXJhbXMSJy5jb3Ntb3Muc3Rha2luZy52MWJldGExLk1zZ1VwZGF0ZVBhcmFtcxovLmNvc21vcy5zdGFra
  W5nLnYxYmV0YTEuTXNnVXBkYXRlUGFyYW1zUmVzcG9uc2UiE8q0LQ9jb3Ntb3Mtc2RrIDAuNDcaBYDnsCoBQi5aLGdpdGh1Yi5jb
  20vY29zbW9zL2Nvc21vcy1zZGsveC9zdGFraW5nL3R5cGVzYgZwcm90bzM="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      com.google.protobuf.any.AnyProto.javaDescriptor,
      com.google.protobuf.timestamp.TimestampProto.javaDescriptor,
      com.google.protobuf.GogoProto.javaDescriptor,
      cosmos_proto.CosmosProto.javaDescriptor,
      cosmos.base.v1beta1.CoinProto.javaDescriptor,
      cosmos.staking.v1beta1.StakingProto.javaDescriptor,
      cosmos.msg.v1.MsgProto.javaDescriptor,
      amino.AminoProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}