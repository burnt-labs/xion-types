// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.benchmark.module.v1

/** GenesisParams defines the genesis parameters for the benchmark module.
  *
  * @param seed
  *   seed is the seed for the random number generator.
  * @param bucketCount
  *   bucket_count is the number of store keys to uniformly distribute genesis_count keys across.
  * @param keyMean
  *   key_mean is the mean size (in normal distribution) of keys in each bucket.
  * @param keyStdDev
  *   key_std_dev is the standard deviation of key sizes in each bucket.
  * @param valueMean
  *   value_mean is the mean size (in normal distribution) of values in each bucket.
  * @param valueStdDev
  *   value_std_dev is the standard deviation of value sizes in each bucket.
  * @param genesisCount
  *   genesis_count is the number of keys to insert in the store, distributed across all buckets.
  * @param insertWeight
  *   insert_weight is the weight of insert operations.
  * @param updateWeight
  *   update_weight is the weight of update operations.
  * @param getWeight
  *   get_weight is the weight of get operations.
  * @param deleteWeight
  *   delete_weight is the weight of delete operations.
  */
@SerialVersionUID(0L)
final case class GeneratorParams(
    seed: _root_.scala.Long = 0L,
    bucketCount: _root_.scala.Long = 0L,
    keyMean: _root_.scala.Long = 0L,
    keyStdDev: _root_.scala.Long = 0L,
    valueMean: _root_.scala.Long = 0L,
    valueStdDev: _root_.scala.Long = 0L,
    genesisCount: _root_.scala.Long = 0L,
    insertWeight: _root_.scala.Float = 0.0f,
    updateWeight: _root_.scala.Float = 0.0f,
    getWeight: _root_.scala.Float = 0.0f,
    deleteWeight: _root_.scala.Float = 0.0f,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[GeneratorParams] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = seed
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(1, __value)
        }
      };
      
      {
        val __value = bucketCount
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(2, __value)
        }
      };
      
      {
        val __value = keyMean
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(3, __value)
        }
      };
      
      {
        val __value = keyStdDev
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(4, __value)
        }
      };
      
      {
        val __value = valueMean
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(6, __value)
        }
      };
      
      {
        val __value = valueStdDev
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(7, __value)
        }
      };
      
      {
        val __value = genesisCount
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(8, __value)
        }
      };
      
      {
        val __value = insertWeight
        if (__value != 0.0f) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(9, __value)
        }
      };
      
      {
        val __value = updateWeight
        if (__value != 0.0f) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(10, __value)
        }
      };
      
      {
        val __value = getWeight
        if (__value != 0.0f) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(12, __value)
        }
      };
      
      {
        val __value = deleteWeight
        if (__value != 0.0f) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(11, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = seed
        if (__v != 0L) {
          _output__.writeUInt64(1, __v)
        }
      };
      {
        val __v = bucketCount
        if (__v != 0L) {
          _output__.writeUInt64(2, __v)
        }
      };
      {
        val __v = keyMean
        if (__v != 0L) {
          _output__.writeUInt64(3, __v)
        }
      };
      {
        val __v = keyStdDev
        if (__v != 0L) {
          _output__.writeUInt64(4, __v)
        }
      };
      {
        val __v = valueMean
        if (__v != 0L) {
          _output__.writeUInt64(6, __v)
        }
      };
      {
        val __v = valueStdDev
        if (__v != 0L) {
          _output__.writeUInt64(7, __v)
        }
      };
      {
        val __v = genesisCount
        if (__v != 0L) {
          _output__.writeUInt64(8, __v)
        }
      };
      {
        val __v = insertWeight
        if (__v != 0.0f) {
          _output__.writeFloat(9, __v)
        }
      };
      {
        val __v = updateWeight
        if (__v != 0.0f) {
          _output__.writeFloat(10, __v)
        }
      };
      {
        val __v = deleteWeight
        if (__v != 0.0f) {
          _output__.writeFloat(11, __v)
        }
      };
      {
        val __v = getWeight
        if (__v != 0.0f) {
          _output__.writeFloat(12, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withSeed(__v: _root_.scala.Long): GeneratorParams = copy(seed = __v)
    def withBucketCount(__v: _root_.scala.Long): GeneratorParams = copy(bucketCount = __v)
    def withKeyMean(__v: _root_.scala.Long): GeneratorParams = copy(keyMean = __v)
    def withKeyStdDev(__v: _root_.scala.Long): GeneratorParams = copy(keyStdDev = __v)
    def withValueMean(__v: _root_.scala.Long): GeneratorParams = copy(valueMean = __v)
    def withValueStdDev(__v: _root_.scala.Long): GeneratorParams = copy(valueStdDev = __v)
    def withGenesisCount(__v: _root_.scala.Long): GeneratorParams = copy(genesisCount = __v)
    def withInsertWeight(__v: _root_.scala.Float): GeneratorParams = copy(insertWeight = __v)
    def withUpdateWeight(__v: _root_.scala.Float): GeneratorParams = copy(updateWeight = __v)
    def withGetWeight(__v: _root_.scala.Float): GeneratorParams = copy(getWeight = __v)
    def withDeleteWeight(__v: _root_.scala.Float): GeneratorParams = copy(deleteWeight = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = seed
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = bucketCount
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = keyMean
          if (__t != 0L) __t else null
        }
        case 4 => {
          val __t = keyStdDev
          if (__t != 0L) __t else null
        }
        case 6 => {
          val __t = valueMean
          if (__t != 0L) __t else null
        }
        case 7 => {
          val __t = valueStdDev
          if (__t != 0L) __t else null
        }
        case 8 => {
          val __t = genesisCount
          if (__t != 0L) __t else null
        }
        case 9 => {
          val __t = insertWeight
          if (__t != 0.0f) __t else null
        }
        case 10 => {
          val __t = updateWeight
          if (__t != 0.0f) __t else null
        }
        case 12 => {
          val __t = getWeight
          if (__t != 0.0f) __t else null
        }
        case 11 => {
          val __t = deleteWeight
          if (__t != 0.0f) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(seed)
        case 2 => _root_.scalapb.descriptors.PLong(bucketCount)
        case 3 => _root_.scalapb.descriptors.PLong(keyMean)
        case 4 => _root_.scalapb.descriptors.PLong(keyStdDev)
        case 6 => _root_.scalapb.descriptors.PLong(valueMean)
        case 7 => _root_.scalapb.descriptors.PLong(valueStdDev)
        case 8 => _root_.scalapb.descriptors.PLong(genesisCount)
        case 9 => _root_.scalapb.descriptors.PFloat(insertWeight)
        case 10 => _root_.scalapb.descriptors.PFloat(updateWeight)
        case 12 => _root_.scalapb.descriptors.PFloat(getWeight)
        case 11 => _root_.scalapb.descriptors.PFloat(deleteWeight)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.benchmark.module.v1.GeneratorParams.type = cosmos.benchmark.module.v1.GeneratorParams
    // @@protoc_insertion_point(GeneratedMessage[cosmos.benchmark.module.v1.GeneratorParams])
}

object GeneratorParams extends scalapb.GeneratedMessageCompanion[cosmos.benchmark.module.v1.GeneratorParams] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.benchmark.module.v1.GeneratorParams] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.benchmark.module.v1.GeneratorParams = {
    var __seed: _root_.scala.Long = 0L
    var __bucketCount: _root_.scala.Long = 0L
    var __keyMean: _root_.scala.Long = 0L
    var __keyStdDev: _root_.scala.Long = 0L
    var __valueMean: _root_.scala.Long = 0L
    var __valueStdDev: _root_.scala.Long = 0L
    var __genesisCount: _root_.scala.Long = 0L
    var __insertWeight: _root_.scala.Float = 0.0f
    var __updateWeight: _root_.scala.Float = 0.0f
    var __getWeight: _root_.scala.Float = 0.0f
    var __deleteWeight: _root_.scala.Float = 0.0f
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __seed = _input__.readUInt64()
        case 16 =>
          __bucketCount = _input__.readUInt64()
        case 24 =>
          __keyMean = _input__.readUInt64()
        case 32 =>
          __keyStdDev = _input__.readUInt64()
        case 48 =>
          __valueMean = _input__.readUInt64()
        case 56 =>
          __valueStdDev = _input__.readUInt64()
        case 64 =>
          __genesisCount = _input__.readUInt64()
        case 77 =>
          __insertWeight = _input__.readFloat()
        case 85 =>
          __updateWeight = _input__.readFloat()
        case 101 =>
          __getWeight = _input__.readFloat()
        case 93 =>
          __deleteWeight = _input__.readFloat()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.benchmark.module.v1.GeneratorParams(
        seed = __seed,
        bucketCount = __bucketCount,
        keyMean = __keyMean,
        keyStdDev = __keyStdDev,
        valueMean = __valueMean,
        valueStdDev = __valueStdDev,
        genesisCount = __genesisCount,
        insertWeight = __insertWeight,
        updateWeight = __updateWeight,
        getWeight = __getWeight,
        deleteWeight = __deleteWeight,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.benchmark.module.v1.GeneratorParams] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.benchmark.module.v1.GeneratorParams(
        seed = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        bucketCount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        keyMean = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        keyStdDev = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        valueMean = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        valueStdDev = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        genesisCount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        insertWeight = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Float]).getOrElse(0.0f),
        updateWeight = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Float]).getOrElse(0.0f),
        getWeight = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.Float]).getOrElse(0.0f),
        deleteWeight = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Float]).getOrElse(0.0f)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.benchmark.module.v1.ModuleProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.benchmark.module.v1.ModuleProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.benchmark.module.v1.GeneratorParams(
    seed = 0L,
    bucketCount = 0L,
    keyMean = 0L,
    keyStdDev = 0L,
    valueMean = 0L,
    valueStdDev = 0L,
    genesisCount = 0L,
    insertWeight = 0.0f,
    updateWeight = 0.0f,
    getWeight = 0.0f,
    deleteWeight = 0.0f
  )
  implicit class GeneratorParamsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.benchmark.module.v1.GeneratorParams]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.benchmark.module.v1.GeneratorParams](_l) {
    def seed: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.seed)((c_, f_) => c_.copy(seed = f_))
    def bucketCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.bucketCount)((c_, f_) => c_.copy(bucketCount = f_))
    def keyMean: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.keyMean)((c_, f_) => c_.copy(keyMean = f_))
    def keyStdDev: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.keyStdDev)((c_, f_) => c_.copy(keyStdDev = f_))
    def valueMean: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.valueMean)((c_, f_) => c_.copy(valueMean = f_))
    def valueStdDev: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.valueStdDev)((c_, f_) => c_.copy(valueStdDev = f_))
    def genesisCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.genesisCount)((c_, f_) => c_.copy(genesisCount = f_))
    def insertWeight: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.insertWeight)((c_, f_) => c_.copy(insertWeight = f_))
    def updateWeight: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.updateWeight)((c_, f_) => c_.copy(updateWeight = f_))
    def getWeight: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getWeight)((c_, f_) => c_.copy(getWeight = f_))
    def deleteWeight: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.deleteWeight)((c_, f_) => c_.copy(deleteWeight = f_))
  }
  final val SEED_FIELD_NUMBER = 1
  final val BUCKET_COUNT_FIELD_NUMBER = 2
  final val KEY_MEAN_FIELD_NUMBER = 3
  final val KEY_STD_DEV_FIELD_NUMBER = 4
  final val VALUE_MEAN_FIELD_NUMBER = 6
  final val VALUE_STD_DEV_FIELD_NUMBER = 7
  final val GENESIS_COUNT_FIELD_NUMBER = 8
  final val INSERT_WEIGHT_FIELD_NUMBER = 9
  final val UPDATE_WEIGHT_FIELD_NUMBER = 10
  final val GET_WEIGHT_FIELD_NUMBER = 12
  final val DELETE_WEIGHT_FIELD_NUMBER = 11
  def of(
    seed: _root_.scala.Long,
    bucketCount: _root_.scala.Long,
    keyMean: _root_.scala.Long,
    keyStdDev: _root_.scala.Long,
    valueMean: _root_.scala.Long,
    valueStdDev: _root_.scala.Long,
    genesisCount: _root_.scala.Long,
    insertWeight: _root_.scala.Float,
    updateWeight: _root_.scala.Float,
    getWeight: _root_.scala.Float,
    deleteWeight: _root_.scala.Float
  ): _root_.cosmos.benchmark.module.v1.GeneratorParams = _root_.cosmos.benchmark.module.v1.GeneratorParams(
    seed,
    bucketCount,
    keyMean,
    keyStdDev,
    valueMean,
    valueStdDev,
    genesisCount,
    insertWeight,
    updateWeight,
    getWeight,
    deleteWeight
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.benchmark.module.v1.GeneratorParams])
}
