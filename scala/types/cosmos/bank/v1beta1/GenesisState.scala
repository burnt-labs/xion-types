// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.bank.v1beta1

/** GenesisState defines the bank module's genesis state.
  *
  * @param params
  *   params defines all the parameters of the module.
  * @param balances
  *   balances is an array containing the balances of all the accounts.
  * @param supply
  *   supply represents the total supply. If it is left empty, then supply will be calculated based on the provided
  *   balances. Otherwise, it will be used to validate that the sum of the balances equals this amount.
  * @param denomMetadata
  *   denom_metadata defines the metadata of the different coins.
  * @param sendEnabled
  *   send_enabled defines the denoms where send is enabled or disabled.
  */
@SerialVersionUID(0L)
final case class GenesisState(
    params: _root_.scala.Option[cosmos.bank.v1beta1.Params] = _root_.scala.None,
    balances: _root_.scala.Seq[cosmos.bank.v1beta1.Balance] = _root_.scala.Seq.empty,
    supply: _root_.scala.Seq[cosmos.base.v1beta1.Coin] = _root_.scala.Seq.empty,
    denomMetadata: _root_.scala.Seq[cosmos.bank.v1beta1.Metadata] = _root_.scala.Seq.empty,
    sendEnabled: _root_.scala.Seq[cosmos.bank.v1beta1.SendEnabled] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[GenesisState] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (params.isDefined) {
        val __value = params.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      balances.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      supply.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      denomMetadata.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      sendEnabled.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      params.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      balances.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      supply.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      denomMetadata.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sendEnabled.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getParams: cosmos.bank.v1beta1.Params = params.getOrElse(cosmos.bank.v1beta1.Params.defaultInstance)
    def clearParams: GenesisState = copy(params = _root_.scala.None)
    def withParams(__v: cosmos.bank.v1beta1.Params): GenesisState = copy(params = Option(__v))
    def clearBalances = copy(balances = _root_.scala.Seq.empty)
    def addBalances(__vs: cosmos.bank.v1beta1.Balance *): GenesisState = addAllBalances(__vs)
    def addAllBalances(__vs: Iterable[cosmos.bank.v1beta1.Balance]): GenesisState = copy(balances = balances ++ __vs)
    def withBalances(__v: _root_.scala.Seq[cosmos.bank.v1beta1.Balance]): GenesisState = copy(balances = __v)
    def clearSupply = copy(supply = _root_.scala.Seq.empty)
    def addSupply(__vs: cosmos.base.v1beta1.Coin *): GenesisState = addAllSupply(__vs)
    def addAllSupply(__vs: Iterable[cosmos.base.v1beta1.Coin]): GenesisState = copy(supply = supply ++ __vs)
    def withSupply(__v: _root_.scala.Seq[cosmos.base.v1beta1.Coin]): GenesisState = copy(supply = __v)
    def clearDenomMetadata = copy(denomMetadata = _root_.scala.Seq.empty)
    def addDenomMetadata(__vs: cosmos.bank.v1beta1.Metadata *): GenesisState = addAllDenomMetadata(__vs)
    def addAllDenomMetadata(__vs: Iterable[cosmos.bank.v1beta1.Metadata]): GenesisState = copy(denomMetadata = denomMetadata ++ __vs)
    def withDenomMetadata(__v: _root_.scala.Seq[cosmos.bank.v1beta1.Metadata]): GenesisState = copy(denomMetadata = __v)
    def clearSendEnabled = copy(sendEnabled = _root_.scala.Seq.empty)
    def addSendEnabled(__vs: cosmos.bank.v1beta1.SendEnabled *): GenesisState = addAllSendEnabled(__vs)
    def addAllSendEnabled(__vs: Iterable[cosmos.bank.v1beta1.SendEnabled]): GenesisState = copy(sendEnabled = sendEnabled ++ __vs)
    def withSendEnabled(__v: _root_.scala.Seq[cosmos.bank.v1beta1.SendEnabled]): GenesisState = copy(sendEnabled = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => params.orNull
        case 2 => balances
        case 3 => supply
        case 4 => denomMetadata
        case 5 => sendEnabled
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => params.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PRepeated(balances.iterator.map(_.toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PRepeated(supply.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(denomMetadata.iterator.map(_.toPMessage).toVector)
        case 5 => _root_.scalapb.descriptors.PRepeated(sendEnabled.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.bank.v1beta1.GenesisState.type = cosmos.bank.v1beta1.GenesisState
    // @@protoc_insertion_point(GeneratedMessage[cosmos.bank.v1beta1.GenesisState])
}

object GenesisState extends scalapb.GeneratedMessageCompanion[cosmos.bank.v1beta1.GenesisState] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.bank.v1beta1.GenesisState] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.bank.v1beta1.GenesisState = {
    var __params: _root_.scala.Option[cosmos.bank.v1beta1.Params] = _root_.scala.None
    val __balances: _root_.scala.collection.immutable.VectorBuilder[cosmos.bank.v1beta1.Balance] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.bank.v1beta1.Balance]
    val __supply: _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.Coin] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.Coin]
    val __denomMetadata: _root_.scala.collection.immutable.VectorBuilder[cosmos.bank.v1beta1.Metadata] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.bank.v1beta1.Metadata]
    val __sendEnabled: _root_.scala.collection.immutable.VectorBuilder[cosmos.bank.v1beta1.SendEnabled] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.bank.v1beta1.SendEnabled]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __params = _root_.scala.Option(__params.fold(_root_.scalapb.LiteParser.readMessage[cosmos.bank.v1beta1.Params](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __balances += _root_.scalapb.LiteParser.readMessage[cosmos.bank.v1beta1.Balance](_input__)
        case 26 =>
          __supply += _root_.scalapb.LiteParser.readMessage[cosmos.base.v1beta1.Coin](_input__)
        case 34 =>
          __denomMetadata += _root_.scalapb.LiteParser.readMessage[cosmos.bank.v1beta1.Metadata](_input__)
        case 42 =>
          __sendEnabled += _root_.scalapb.LiteParser.readMessage[cosmos.bank.v1beta1.SendEnabled](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.bank.v1beta1.GenesisState(
        params = __params,
        balances = __balances.result(),
        supply = __supply.result(),
        denomMetadata = __denomMetadata.result(),
        sendEnabled = __sendEnabled.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.bank.v1beta1.GenesisState] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.bank.v1beta1.GenesisState(
        params = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[cosmos.bank.v1beta1.Params]]),
        balances = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[cosmos.bank.v1beta1.Balance]]).getOrElse(_root_.scala.Seq.empty),
        supply = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[cosmos.base.v1beta1.Coin]]).getOrElse(_root_.scala.Seq.empty),
        denomMetadata = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[cosmos.bank.v1beta1.Metadata]]).getOrElse(_root_.scala.Seq.empty),
        sendEnabled = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[cosmos.bank.v1beta1.SendEnabled]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.bank.v1beta1.GenesisProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.bank.v1beta1.GenesisProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = cosmos.bank.v1beta1.Params
      case 2 => __out = cosmos.bank.v1beta1.Balance
      case 3 => __out = cosmos.base.v1beta1.Coin
      case 4 => __out = cosmos.bank.v1beta1.Metadata
      case 5 => __out = cosmos.bank.v1beta1.SendEnabled
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.bank.v1beta1.GenesisState(
    params = _root_.scala.None,
    balances = _root_.scala.Seq.empty,
    supply = _root_.scala.Seq.empty,
    denomMetadata = _root_.scala.Seq.empty,
    sendEnabled = _root_.scala.Seq.empty
  )
  implicit class GenesisStateLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.bank.v1beta1.GenesisState]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.bank.v1beta1.GenesisState](_l) {
    def params: _root_.scalapb.lenses.Lens[UpperPB, cosmos.bank.v1beta1.Params] = field(_.getParams)((c_, f_) => c_.copy(params = _root_.scala.Option(f_)))
    def optionalParams: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[cosmos.bank.v1beta1.Params]] = field(_.params)((c_, f_) => c_.copy(params = f_))
    def balances: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.bank.v1beta1.Balance]] = field(_.balances)((c_, f_) => c_.copy(balances = f_))
    def supply: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.base.v1beta1.Coin]] = field(_.supply)((c_, f_) => c_.copy(supply = f_))
    def denomMetadata: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.bank.v1beta1.Metadata]] = field(_.denomMetadata)((c_, f_) => c_.copy(denomMetadata = f_))
    def sendEnabled: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.bank.v1beta1.SendEnabled]] = field(_.sendEnabled)((c_, f_) => c_.copy(sendEnabled = f_))
  }
  final val PARAMS_FIELD_NUMBER = 1
  final val BALANCES_FIELD_NUMBER = 2
  final val SUPPLY_FIELD_NUMBER = 3
  final val DENOM_METADATA_FIELD_NUMBER = 4
  final val SEND_ENABLED_FIELD_NUMBER = 5
  def of(
    params: _root_.scala.Option[cosmos.bank.v1beta1.Params],
    balances: _root_.scala.Seq[cosmos.bank.v1beta1.Balance],
    supply: _root_.scala.Seq[cosmos.base.v1beta1.Coin],
    denomMetadata: _root_.scala.Seq[cosmos.bank.v1beta1.Metadata],
    sendEnabled: _root_.scala.Seq[cosmos.bank.v1beta1.SendEnabled]
  ): _root_.cosmos.bank.v1beta1.GenesisState = _root_.cosmos.bank.v1beta1.GenesisState(
    params,
    balances,
    supply,
    denomMetadata,
    sendEnabled
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.bank.v1beta1.GenesisState])
}
