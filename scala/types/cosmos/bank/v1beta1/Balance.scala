// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.bank.v1beta1

/** Balance defines an account address and balance pair used in the bank module's
  * genesis state.
  *
  * @param address
  *   address is the address of the balance holder.
  * @param coins
  *   coins defines the different coins this balance holds.
  */
@SerialVersionUID(0L)
final case class Balance(
    address: _root_.scala.Predef.String = "",
    coins: _root_.scala.Seq[cosmos.base.v1beta1.Coin] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Balance] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = address
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      coins.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = address
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      coins.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withAddress(__v: _root_.scala.Predef.String): Balance = copy(address = __v)
    def clearCoins = copy(coins = _root_.scala.Seq.empty)
    def addCoins(__vs: cosmos.base.v1beta1.Coin *): Balance = addAllCoins(__vs)
    def addAllCoins(__vs: Iterable[cosmos.base.v1beta1.Coin]): Balance = copy(coins = coins ++ __vs)
    def withCoins(__v: _root_.scala.Seq[cosmos.base.v1beta1.Coin]): Balance = copy(coins = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = address
          if (__t != "") __t else null
        }
        case 2 => coins
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(address)
        case 2 => _root_.scalapb.descriptors.PRepeated(coins.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.bank.v1beta1.Balance.type = cosmos.bank.v1beta1.Balance
    // @@protoc_insertion_point(GeneratedMessage[cosmos.bank.v1beta1.Balance])
}

object Balance extends scalapb.GeneratedMessageCompanion[cosmos.bank.v1beta1.Balance] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.bank.v1beta1.Balance] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.bank.v1beta1.Balance = {
    var __address: _root_.scala.Predef.String = ""
    val __coins: _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.Coin] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.Coin]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __address = _input__.readStringRequireUtf8()
        case 18 =>
          __coins += _root_.scalapb.LiteParser.readMessage[cosmos.base.v1beta1.Coin](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.bank.v1beta1.Balance(
        address = __address,
        coins = __coins.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.bank.v1beta1.Balance] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.bank.v1beta1.Balance(
        address = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        coins = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[cosmos.base.v1beta1.Coin]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.bank.v1beta1.GenesisProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.bank.v1beta1.GenesisProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = cosmos.base.v1beta1.Coin
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.bank.v1beta1.Balance(
    address = "",
    coins = _root_.scala.Seq.empty
  )
  implicit class BalanceLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.bank.v1beta1.Balance]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.bank.v1beta1.Balance](_l) {
    def address: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.address)((c_, f_) => c_.copy(address = f_))
    def coins: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.base.v1beta1.Coin]] = field(_.coins)((c_, f_) => c_.copy(coins = f_))
  }
  final val ADDRESS_FIELD_NUMBER = 1
  final val COINS_FIELD_NUMBER = 2
  def of(
    address: _root_.scala.Predef.String,
    coins: _root_.scala.Seq[cosmos.base.v1beta1.Coin]
  ): _root_.cosmos.bank.v1beta1.Balance = _root_.cosmos.bank.v1beta1.Balance(
    address,
    coins
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.bank.v1beta1.Balance])
}
