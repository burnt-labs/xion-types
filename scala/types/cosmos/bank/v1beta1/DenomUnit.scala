// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.bank.v1beta1

/** DenomUnit represents a struct that describes a given
  * denomination unit of the basic token.
  *
  * @param denom
  *   denom represents the string name of the given denom unit (e.g uatom).
  * @param exponent
  *   exponent represents power of 10 exponent that one must
  *   raise the base_denom to in order to equal the given DenomUnit's denom
  *   1 denom = 10^exponent base_denom
  *   (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with
  *   exponent = 6, thus: 1 atom = 10^6 uatom).
  * @param aliases
  *   aliases is a list of string aliases for the given denom
  */
@SerialVersionUID(0L)
final case class DenomUnit(
    denom: _root_.scala.Predef.String = "",
    exponent: _root_.scala.Int = 0,
    aliases: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[DenomUnit] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = denom
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = exponent
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, __value)
        }
      };
      aliases.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = denom
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = exponent
        if (__v != 0) {
          _output__.writeUInt32(2, __v)
        }
      };
      aliases.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def withDenom(__v: _root_.scala.Predef.String): DenomUnit = copy(denom = __v)
    def withExponent(__v: _root_.scala.Int): DenomUnit = copy(exponent = __v)
    def clearAliases = copy(aliases = _root_.scala.Seq.empty)
    def addAliases(__vs: _root_.scala.Predef.String *): DenomUnit = addAllAliases(__vs)
    def addAllAliases(__vs: Iterable[_root_.scala.Predef.String]): DenomUnit = copy(aliases = aliases ++ __vs)
    def withAliases(__v: _root_.scala.Seq[_root_.scala.Predef.String]): DenomUnit = copy(aliases = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = denom
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = exponent
          if (__t != 0) __t else null
        }
        case 3 => aliases
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(denom)
        case 2 => _root_.scalapb.descriptors.PInt(exponent)
        case 3 => _root_.scalapb.descriptors.PRepeated(aliases.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.bank.v1beta1.DenomUnit.type = cosmos.bank.v1beta1.DenomUnit
    // @@protoc_insertion_point(GeneratedMessage[cosmos.bank.v1beta1.DenomUnit])
}

object DenomUnit extends scalapb.GeneratedMessageCompanion[cosmos.bank.v1beta1.DenomUnit] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.bank.v1beta1.DenomUnit] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.bank.v1beta1.DenomUnit = {
    var __denom: _root_.scala.Predef.String = ""
    var __exponent: _root_.scala.Int = 0
    val __aliases: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __denom = _input__.readStringRequireUtf8()
        case 16 =>
          __exponent = _input__.readUInt32()
        case 26 =>
          __aliases += _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.bank.v1beta1.DenomUnit(
        denom = __denom,
        exponent = __exponent,
        aliases = __aliases.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.bank.v1beta1.DenomUnit] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.bank.v1beta1.DenomUnit(
        denom = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        exponent = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        aliases = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.bank.v1beta1.BankProto.javaDescriptor.getMessageTypes().get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.bank.v1beta1.BankProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.bank.v1beta1.DenomUnit(
    denom = "",
    exponent = 0,
    aliases = _root_.scala.Seq.empty
  )
  implicit class DenomUnitLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.bank.v1beta1.DenomUnit]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.bank.v1beta1.DenomUnit](_l) {
    def denom: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.denom)((c_, f_) => c_.copy(denom = f_))
    def exponent: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.exponent)((c_, f_) => c_.copy(exponent = f_))
    def aliases: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.aliases)((c_, f_) => c_.copy(aliases = f_))
  }
  final val DENOM_FIELD_NUMBER = 1
  final val EXPONENT_FIELD_NUMBER = 2
  final val ALIASES_FIELD_NUMBER = 3
  def of(
    denom: _root_.scala.Predef.String,
    exponent: _root_.scala.Int,
    aliases: _root_.scala.Seq[_root_.scala.Predef.String]
  ): _root_.cosmos.bank.v1beta1.DenomUnit = _root_.cosmos.bank.v1beta1.DenomUnit(
    denom,
    exponent,
    aliases
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.bank.v1beta1.DenomUnit])
}
