// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.feegrant.v1beta1

/** BasicAllowance implements Allowance with a one-time grant of coins
  * that optionally expires. The grantee can use up to SpendLimit to cover fees.
  *
  * @param spendLimit
  *   spend_limit specifies the maximum amount of coins that can be spent
  *   by this allowance and will be updated as coins are spent. If it is
  *   empty, there is no spend limit and any amount of coins can be spent.
  * @param expiration
  *   expiration specifies an optional time when this allowance expires
  */
@SerialVersionUID(0L)
final case class BasicAllowance(
    spendLimit: _root_.scala.Seq[cosmos.base.v1beta1.Coin] = _root_.scala.Seq.empty,
    expiration: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[BasicAllowance] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      spendLimit.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (expiration.isDefined) {
        val __value = expiration.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      spendLimit.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      expiration.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def clearSpendLimit = copy(spendLimit = _root_.scala.Seq.empty)
    def addSpendLimit(__vs: cosmos.base.v1beta1.Coin *): BasicAllowance = addAllSpendLimit(__vs)
    def addAllSpendLimit(__vs: Iterable[cosmos.base.v1beta1.Coin]): BasicAllowance = copy(spendLimit = spendLimit ++ __vs)
    def withSpendLimit(__v: _root_.scala.Seq[cosmos.base.v1beta1.Coin]): BasicAllowance = copy(spendLimit = __v)
    def getExpiration: com.google.protobuf.timestamp.Timestamp = expiration.getOrElse(com.google.protobuf.timestamp.Timestamp.defaultInstance)
    def clearExpiration: BasicAllowance = copy(expiration = _root_.scala.None)
    def withExpiration(__v: com.google.protobuf.timestamp.Timestamp): BasicAllowance = copy(expiration = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => spendLimit
        case 2 => expiration.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(spendLimit.iterator.map(_.toPMessage).toVector)
        case 2 => expiration.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.feegrant.v1beta1.BasicAllowance.type = cosmos.feegrant.v1beta1.BasicAllowance
    // @@protoc_insertion_point(GeneratedMessage[cosmos.feegrant.v1beta1.BasicAllowance])
}

object BasicAllowance extends scalapb.GeneratedMessageCompanion[cosmos.feegrant.v1beta1.BasicAllowance] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.feegrant.v1beta1.BasicAllowance] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.feegrant.v1beta1.BasicAllowance = {
    val __spendLimit: _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.Coin] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.Coin]
    var __expiration: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __spendLimit += _root_.scalapb.LiteParser.readMessage[cosmos.base.v1beta1.Coin](_input__)
        case 18 =>
          __expiration = _root_.scala.Option(__expiration.fold(_root_.scalapb.LiteParser.readMessage[com.google.protobuf.timestamp.Timestamp](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.feegrant.v1beta1.BasicAllowance(
        spendLimit = __spendLimit.result(),
        expiration = __expiration,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.feegrant.v1beta1.BasicAllowance] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.feegrant.v1beta1.BasicAllowance(
        spendLimit = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[cosmos.base.v1beta1.Coin]]).getOrElse(_root_.scala.Seq.empty),
        expiration = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.timestamp.Timestamp]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.feegrant.v1beta1.FeegrantProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.feegrant.v1beta1.FeegrantProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = cosmos.base.v1beta1.Coin
      case 2 => __out = com.google.protobuf.timestamp.Timestamp
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.feegrant.v1beta1.BasicAllowance(
    spendLimit = _root_.scala.Seq.empty,
    expiration = _root_.scala.None
  )
  implicit class BasicAllowanceLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.feegrant.v1beta1.BasicAllowance]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.feegrant.v1beta1.BasicAllowance](_l) {
    def spendLimit: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.base.v1beta1.Coin]] = field(_.spendLimit)((c_, f_) => c_.copy(spendLimit = f_))
    def expiration: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.timestamp.Timestamp] = field(_.getExpiration)((c_, f_) => c_.copy(expiration = _root_.scala.Option(f_)))
    def optionalExpiration: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.timestamp.Timestamp]] = field(_.expiration)((c_, f_) => c_.copy(expiration = f_))
  }
  final val SPEND_LIMIT_FIELD_NUMBER = 1
  final val EXPIRATION_FIELD_NUMBER = 2
  def of(
    spendLimit: _root_.scala.Seq[cosmos.base.v1beta1.Coin],
    expiration: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp]
  ): _root_.cosmos.feegrant.v1beta1.BasicAllowance = _root_.cosmos.feegrant.v1beta1.BasicAllowance(
    spendLimit,
    expiration
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.feegrant.v1beta1.BasicAllowance])
}
