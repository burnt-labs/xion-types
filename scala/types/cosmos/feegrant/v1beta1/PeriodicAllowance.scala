// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.feegrant.v1beta1

/** PeriodicAllowance extends Allowance to allow for both a maximum cap,
  * as well as a limit per time period.
  *
  * @param basic
  *   basic specifies a struct of `BasicAllowance`
  * @param period
  *   period specifies the time duration in which period_spend_limit coins can
  *   be spent before that allowance is reset
  * @param periodSpendLimit
  *   period_spend_limit specifies the maximum number of coins that can be spent
  *   in the period
  * @param periodCanSpend
  *   period_can_spend is the number of coins left to be spent before the period_reset time
  * @param periodReset
  *   period_reset is the time at which this period resets and a new one begins,
  *   it is calculated from the start time of the first transaction after the
  *   last period ended
  */
@SerialVersionUID(0L)
final case class PeriodicAllowance(
    basic: _root_.scala.Option[cosmos.feegrant.v1beta1.BasicAllowance] = _root_.scala.None,
    period: _root_.scala.Option[com.google.protobuf.duration.Duration] = _root_.scala.None,
    periodSpendLimit: _root_.scala.Seq[cosmos.base.v1beta1.Coin] = _root_.scala.Seq.empty,
    periodCanSpend: _root_.scala.Seq[cosmos.base.v1beta1.Coin] = _root_.scala.Seq.empty,
    periodReset: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[PeriodicAllowance] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (basic.isDefined) {
        val __value = basic.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (period.isDefined) {
        val __value = period.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      periodSpendLimit.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      periodCanSpend.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (periodReset.isDefined) {
        val __value = periodReset.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      basic.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      period.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      periodSpendLimit.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      periodCanSpend.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      periodReset.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getBasic: cosmos.feegrant.v1beta1.BasicAllowance = basic.getOrElse(cosmos.feegrant.v1beta1.BasicAllowance.defaultInstance)
    def clearBasic: PeriodicAllowance = copy(basic = _root_.scala.None)
    def withBasic(__v: cosmos.feegrant.v1beta1.BasicAllowance): PeriodicAllowance = copy(basic = Option(__v))
    def getPeriod: com.google.protobuf.duration.Duration = period.getOrElse(com.google.protobuf.duration.Duration.defaultInstance)
    def clearPeriod: PeriodicAllowance = copy(period = _root_.scala.None)
    def withPeriod(__v: com.google.protobuf.duration.Duration): PeriodicAllowance = copy(period = Option(__v))
    def clearPeriodSpendLimit = copy(periodSpendLimit = _root_.scala.Seq.empty)
    def addPeriodSpendLimit(__vs: cosmos.base.v1beta1.Coin *): PeriodicAllowance = addAllPeriodSpendLimit(__vs)
    def addAllPeriodSpendLimit(__vs: Iterable[cosmos.base.v1beta1.Coin]): PeriodicAllowance = copy(periodSpendLimit = periodSpendLimit ++ __vs)
    def withPeriodSpendLimit(__v: _root_.scala.Seq[cosmos.base.v1beta1.Coin]): PeriodicAllowance = copy(periodSpendLimit = __v)
    def clearPeriodCanSpend = copy(periodCanSpend = _root_.scala.Seq.empty)
    def addPeriodCanSpend(__vs: cosmos.base.v1beta1.Coin *): PeriodicAllowance = addAllPeriodCanSpend(__vs)
    def addAllPeriodCanSpend(__vs: Iterable[cosmos.base.v1beta1.Coin]): PeriodicAllowance = copy(periodCanSpend = periodCanSpend ++ __vs)
    def withPeriodCanSpend(__v: _root_.scala.Seq[cosmos.base.v1beta1.Coin]): PeriodicAllowance = copy(periodCanSpend = __v)
    def getPeriodReset: com.google.protobuf.timestamp.Timestamp = periodReset.getOrElse(com.google.protobuf.timestamp.Timestamp.defaultInstance)
    def clearPeriodReset: PeriodicAllowance = copy(periodReset = _root_.scala.None)
    def withPeriodReset(__v: com.google.protobuf.timestamp.Timestamp): PeriodicAllowance = copy(periodReset = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => basic.orNull
        case 2 => period.orNull
        case 3 => periodSpendLimit
        case 4 => periodCanSpend
        case 5 => periodReset.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => basic.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => period.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(periodSpendLimit.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(periodCanSpend.iterator.map(_.toPMessage).toVector)
        case 5 => periodReset.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.feegrant.v1beta1.PeriodicAllowance.type = cosmos.feegrant.v1beta1.PeriodicAllowance
    // @@protoc_insertion_point(GeneratedMessage[cosmos.feegrant.v1beta1.PeriodicAllowance])
}

object PeriodicAllowance extends scalapb.GeneratedMessageCompanion[cosmos.feegrant.v1beta1.PeriodicAllowance] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.feegrant.v1beta1.PeriodicAllowance] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.feegrant.v1beta1.PeriodicAllowance = {
    var __basic: _root_.scala.Option[cosmos.feegrant.v1beta1.BasicAllowance] = _root_.scala.None
    var __period: _root_.scala.Option[com.google.protobuf.duration.Duration] = _root_.scala.None
    val __periodSpendLimit: _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.Coin] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.Coin]
    val __periodCanSpend: _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.Coin] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.Coin]
    var __periodReset: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __basic = _root_.scala.Option(__basic.fold(_root_.scalapb.LiteParser.readMessage[cosmos.feegrant.v1beta1.BasicAllowance](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __period = _root_.scala.Option(__period.fold(_root_.scalapb.LiteParser.readMessage[com.google.protobuf.duration.Duration](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __periodSpendLimit += _root_.scalapb.LiteParser.readMessage[cosmos.base.v1beta1.Coin](_input__)
        case 34 =>
          __periodCanSpend += _root_.scalapb.LiteParser.readMessage[cosmos.base.v1beta1.Coin](_input__)
        case 42 =>
          __periodReset = _root_.scala.Option(__periodReset.fold(_root_.scalapb.LiteParser.readMessage[com.google.protobuf.timestamp.Timestamp](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.feegrant.v1beta1.PeriodicAllowance(
        basic = __basic,
        period = __period,
        periodSpendLimit = __periodSpendLimit.result(),
        periodCanSpend = __periodCanSpend.result(),
        periodReset = __periodReset,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.feegrant.v1beta1.PeriodicAllowance] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.feegrant.v1beta1.PeriodicAllowance(
        basic = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[cosmos.feegrant.v1beta1.BasicAllowance]]),
        period = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.duration.Duration]]),
        periodSpendLimit = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[cosmos.base.v1beta1.Coin]]).getOrElse(_root_.scala.Seq.empty),
        periodCanSpend = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[cosmos.base.v1beta1.Coin]]).getOrElse(_root_.scala.Seq.empty),
        periodReset = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.timestamp.Timestamp]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.feegrant.v1beta1.FeegrantProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.feegrant.v1beta1.FeegrantProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = cosmos.feegrant.v1beta1.BasicAllowance
      case 2 => __out = com.google.protobuf.duration.Duration
      case 3 => __out = cosmos.base.v1beta1.Coin
      case 4 => __out = cosmos.base.v1beta1.Coin
      case 5 => __out = com.google.protobuf.timestamp.Timestamp
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.feegrant.v1beta1.PeriodicAllowance(
    basic = _root_.scala.None,
    period = _root_.scala.None,
    periodSpendLimit = _root_.scala.Seq.empty,
    periodCanSpend = _root_.scala.Seq.empty,
    periodReset = _root_.scala.None
  )
  implicit class PeriodicAllowanceLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.feegrant.v1beta1.PeriodicAllowance]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.feegrant.v1beta1.PeriodicAllowance](_l) {
    def basic: _root_.scalapb.lenses.Lens[UpperPB, cosmos.feegrant.v1beta1.BasicAllowance] = field(_.getBasic)((c_, f_) => c_.copy(basic = _root_.scala.Option(f_)))
    def optionalBasic: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[cosmos.feegrant.v1beta1.BasicAllowance]] = field(_.basic)((c_, f_) => c_.copy(basic = f_))
    def period: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.duration.Duration] = field(_.getPeriod)((c_, f_) => c_.copy(period = _root_.scala.Option(f_)))
    def optionalPeriod: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.duration.Duration]] = field(_.period)((c_, f_) => c_.copy(period = f_))
    def periodSpendLimit: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.base.v1beta1.Coin]] = field(_.periodSpendLimit)((c_, f_) => c_.copy(periodSpendLimit = f_))
    def periodCanSpend: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.base.v1beta1.Coin]] = field(_.periodCanSpend)((c_, f_) => c_.copy(periodCanSpend = f_))
    def periodReset: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.timestamp.Timestamp] = field(_.getPeriodReset)((c_, f_) => c_.copy(periodReset = _root_.scala.Option(f_)))
    def optionalPeriodReset: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.timestamp.Timestamp]] = field(_.periodReset)((c_, f_) => c_.copy(periodReset = f_))
  }
  final val BASIC_FIELD_NUMBER = 1
  final val PERIOD_FIELD_NUMBER = 2
  final val PERIOD_SPEND_LIMIT_FIELD_NUMBER = 3
  final val PERIOD_CAN_SPEND_FIELD_NUMBER = 4
  final val PERIOD_RESET_FIELD_NUMBER = 5
  def of(
    basic: _root_.scala.Option[cosmos.feegrant.v1beta1.BasicAllowance],
    period: _root_.scala.Option[com.google.protobuf.duration.Duration],
    periodSpendLimit: _root_.scala.Seq[cosmos.base.v1beta1.Coin],
    periodCanSpend: _root_.scala.Seq[cosmos.base.v1beta1.Coin],
    periodReset: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp]
  ): _root_.cosmos.feegrant.v1beta1.PeriodicAllowance = _root_.cosmos.feegrant.v1beta1.PeriodicAllowance(
    basic,
    period,
    periodSpendLimit,
    periodCanSpend,
    periodReset
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.feegrant.v1beta1.PeriodicAllowance])
}
