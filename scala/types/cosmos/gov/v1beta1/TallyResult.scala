// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.gov.v1beta1

/** TallyResult defines a standard tally for a governance proposal.
  *
  * @param yes
  *   yes is the number of yes votes on a proposal.
  * @param abstain
  *   abstain is the number of abstain votes on a proposal.
  * @param no
  *   no is the number of no votes on a proposal.
  * @param noWithVeto
  *   no_with_veto is the number of no with veto votes on a proposal.
  */
@SerialVersionUID(0L)
final case class TallyResult(
    yes: _root_.scala.Predef.String = "",
    abstain: _root_.scala.Predef.String = "",
    no: _root_.scala.Predef.String = "",
    noWithVeto: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TallyResult] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = yes
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = abstain
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = no
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = noWithVeto
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = yes
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = abstain
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = no
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = noWithVeto
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withYes(__v: _root_.scala.Predef.String): TallyResult = copy(yes = __v)
    def withAbstain(__v: _root_.scala.Predef.String): TallyResult = copy(abstain = __v)
    def withNo(__v: _root_.scala.Predef.String): TallyResult = copy(no = __v)
    def withNoWithVeto(__v: _root_.scala.Predef.String): TallyResult = copy(noWithVeto = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = yes
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = abstain
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = no
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = noWithVeto
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(yes)
        case 2 => _root_.scalapb.descriptors.PString(abstain)
        case 3 => _root_.scalapb.descriptors.PString(no)
        case 4 => _root_.scalapb.descriptors.PString(noWithVeto)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.gov.v1beta1.TallyResult.type = cosmos.gov.v1beta1.TallyResult
    // @@protoc_insertion_point(GeneratedMessage[cosmos.gov.v1beta1.TallyResult])
}

object TallyResult extends scalapb.GeneratedMessageCompanion[cosmos.gov.v1beta1.TallyResult] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.gov.v1beta1.TallyResult] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.gov.v1beta1.TallyResult = {
    var __yes: _root_.scala.Predef.String = ""
    var __abstain: _root_.scala.Predef.String = ""
    var __no: _root_.scala.Predef.String = ""
    var __noWithVeto: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __yes = _input__.readStringRequireUtf8()
        case 18 =>
          __abstain = _input__.readStringRequireUtf8()
        case 26 =>
          __no = _input__.readStringRequireUtf8()
        case 34 =>
          __noWithVeto = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.gov.v1beta1.TallyResult(
        yes = __yes,
        abstain = __abstain,
        no = __no,
        noWithVeto = __noWithVeto,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.gov.v1beta1.TallyResult] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.gov.v1beta1.TallyResult(
        yes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        abstain = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        no = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        noWithVeto = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.gov.v1beta1.GovProto.javaDescriptor.getMessageTypes().get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.gov.v1beta1.GovProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.gov.v1beta1.TallyResult(
    yes = "",
    abstain = "",
    no = "",
    noWithVeto = ""
  )
  implicit class TallyResultLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.gov.v1beta1.TallyResult]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.gov.v1beta1.TallyResult](_l) {
    def yes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.yes)((c_, f_) => c_.copy(yes = f_))
    def abstain: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.abstain)((c_, f_) => c_.copy(abstain = f_))
    def no: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.no)((c_, f_) => c_.copy(no = f_))
    def noWithVeto: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.noWithVeto)((c_, f_) => c_.copy(noWithVeto = f_))
  }
  final val YES_FIELD_NUMBER = 1
  final val ABSTAIN_FIELD_NUMBER = 2
  final val NO_FIELD_NUMBER = 3
  final val NO_WITH_VETO_FIELD_NUMBER = 4
  def of(
    yes: _root_.scala.Predef.String,
    abstain: _root_.scala.Predef.String,
    no: _root_.scala.Predef.String,
    noWithVeto: _root_.scala.Predef.String
  ): _root_.cosmos.gov.v1beta1.TallyResult = _root_.cosmos.gov.v1beta1.TallyResult(
    yes,
    abstain,
    no,
    noWithVeto
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.gov.v1beta1.TallyResult])
}
