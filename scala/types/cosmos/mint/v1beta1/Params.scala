// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.mint.v1beta1

/** Params defines the parameters for the x/mint module.
  *
  * @param mintDenom
  *   type of coin to mint
  * @param inflationRateChange
  *   maximum annual change in inflation rate
  * @param inflationMax
  *   maximum inflation rate
  * @param inflationMin
  *   minimum inflation rate
  * @param goalBonded
  *   goal of percent bonded atoms
  * @param blocksPerYear
  *   expected blocks per year
  */
@SerialVersionUID(0L)
final case class Params(
    mintDenom: _root_.scala.Predef.String = "",
    inflationRateChange: _root_.scala.Predef.String = "",
    inflationMax: _root_.scala.Predef.String = "",
    inflationMin: _root_.scala.Predef.String = "",
    goalBonded: _root_.scala.Predef.String = "",
    blocksPerYear: _root_.scala.Long = 0L,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Params] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = mintDenom
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = inflationRateChange
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = inflationMax
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = inflationMin
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = goalBonded
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      
      {
        val __value = blocksPerYear
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(6, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = mintDenom
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = inflationRateChange
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = inflationMax
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = inflationMin
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = goalBonded
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = blocksPerYear
        if (__v != 0L) {
          _output__.writeUInt64(6, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withMintDenom(__v: _root_.scala.Predef.String): Params = copy(mintDenom = __v)
    def withInflationRateChange(__v: _root_.scala.Predef.String): Params = copy(inflationRateChange = __v)
    def withInflationMax(__v: _root_.scala.Predef.String): Params = copy(inflationMax = __v)
    def withInflationMin(__v: _root_.scala.Predef.String): Params = copy(inflationMin = __v)
    def withGoalBonded(__v: _root_.scala.Predef.String): Params = copy(goalBonded = __v)
    def withBlocksPerYear(__v: _root_.scala.Long): Params = copy(blocksPerYear = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = mintDenom
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = inflationRateChange
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = inflationMax
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = inflationMin
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = goalBonded
          if (__t != "") __t else null
        }
        case 6 => {
          val __t = blocksPerYear
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(mintDenom)
        case 2 => _root_.scalapb.descriptors.PString(inflationRateChange)
        case 3 => _root_.scalapb.descriptors.PString(inflationMax)
        case 4 => _root_.scalapb.descriptors.PString(inflationMin)
        case 5 => _root_.scalapb.descriptors.PString(goalBonded)
        case 6 => _root_.scalapb.descriptors.PLong(blocksPerYear)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.mint.v1beta1.Params.type = cosmos.mint.v1beta1.Params
    // @@protoc_insertion_point(GeneratedMessage[cosmos.mint.v1beta1.Params])
}

object Params extends scalapb.GeneratedMessageCompanion[cosmos.mint.v1beta1.Params] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.mint.v1beta1.Params] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.mint.v1beta1.Params = {
    var __mintDenom: _root_.scala.Predef.String = ""
    var __inflationRateChange: _root_.scala.Predef.String = ""
    var __inflationMax: _root_.scala.Predef.String = ""
    var __inflationMin: _root_.scala.Predef.String = ""
    var __goalBonded: _root_.scala.Predef.String = ""
    var __blocksPerYear: _root_.scala.Long = 0L
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __mintDenom = _input__.readStringRequireUtf8()
        case 18 =>
          __inflationRateChange = _input__.readStringRequireUtf8()
        case 26 =>
          __inflationMax = _input__.readStringRequireUtf8()
        case 34 =>
          __inflationMin = _input__.readStringRequireUtf8()
        case 42 =>
          __goalBonded = _input__.readStringRequireUtf8()
        case 48 =>
          __blocksPerYear = _input__.readUInt64()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.mint.v1beta1.Params(
        mintDenom = __mintDenom,
        inflationRateChange = __inflationRateChange,
        inflationMax = __inflationMax,
        inflationMin = __inflationMin,
        goalBonded = __goalBonded,
        blocksPerYear = __blocksPerYear,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.mint.v1beta1.Params] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.mint.v1beta1.Params(
        mintDenom = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        inflationRateChange = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        inflationMax = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        inflationMin = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        goalBonded = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        blocksPerYear = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.mint.v1beta1.MintProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.mint.v1beta1.MintProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.mint.v1beta1.Params(
    mintDenom = "",
    inflationRateChange = "",
    inflationMax = "",
    inflationMin = "",
    goalBonded = "",
    blocksPerYear = 0L
  )
  implicit class ParamsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.mint.v1beta1.Params]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.mint.v1beta1.Params](_l) {
    def mintDenom: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.mintDenom)((c_, f_) => c_.copy(mintDenom = f_))
    def inflationRateChange: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.inflationRateChange)((c_, f_) => c_.copy(inflationRateChange = f_))
    def inflationMax: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.inflationMax)((c_, f_) => c_.copy(inflationMax = f_))
    def inflationMin: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.inflationMin)((c_, f_) => c_.copy(inflationMin = f_))
    def goalBonded: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.goalBonded)((c_, f_) => c_.copy(goalBonded = f_))
    def blocksPerYear: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.blocksPerYear)((c_, f_) => c_.copy(blocksPerYear = f_))
  }
  final val MINT_DENOM_FIELD_NUMBER = 1
  final val INFLATION_RATE_CHANGE_FIELD_NUMBER = 2
  final val INFLATION_MAX_FIELD_NUMBER = 3
  final val INFLATION_MIN_FIELD_NUMBER = 4
  final val GOAL_BONDED_FIELD_NUMBER = 5
  final val BLOCKS_PER_YEAR_FIELD_NUMBER = 6
  def of(
    mintDenom: _root_.scala.Predef.String,
    inflationRateChange: _root_.scala.Predef.String,
    inflationMax: _root_.scala.Predef.String,
    inflationMin: _root_.scala.Predef.String,
    goalBonded: _root_.scala.Predef.String,
    blocksPerYear: _root_.scala.Long
  ): _root_.cosmos.mint.v1beta1.Params = _root_.cosmos.mint.v1beta1.Params(
    mintDenom,
    inflationRateChange,
    inflationMax,
    inflationMin,
    goalBonded,
    blocksPerYear
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.mint.v1beta1.Params])
}
