// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.protocolpool.v1

/** Params defines the parameters for the protocolpool module.
  *
  * @param enabledDistributionDenoms
  *   EnabledDistributionDenoms lists the denoms that are allowed to be distributed.
  *   This is to avoid spending time distributing undesired tokens to continuous funds and budgets.
  * @param distributionFrequency
  *   DistributionFrequency is the frequency (in terms of blocks) that funds are distributed out from the
  *   x/protocolpool module.
  */
@SerialVersionUID(0L)
final case class Params(
    enabledDistributionDenoms: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    distributionFrequency: _root_.scala.Long = 0L,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Params] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      enabledDistributionDenoms.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      }
      
      {
        val __value = distributionFrequency
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(2, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      enabledDistributionDenoms.foreach { __v =>
        val __m = __v
        _output__.writeString(1, __m)
      };
      {
        val __v = distributionFrequency
        if (__v != 0L) {
          _output__.writeUInt64(2, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def clearEnabledDistributionDenoms = copy(enabledDistributionDenoms = _root_.scala.Seq.empty)
    def addEnabledDistributionDenoms(__vs: _root_.scala.Predef.String *): Params = addAllEnabledDistributionDenoms(__vs)
    def addAllEnabledDistributionDenoms(__vs: Iterable[_root_.scala.Predef.String]): Params = copy(enabledDistributionDenoms = enabledDistributionDenoms ++ __vs)
    def withEnabledDistributionDenoms(__v: _root_.scala.Seq[_root_.scala.Predef.String]): Params = copy(enabledDistributionDenoms = __v)
    def withDistributionFrequency(__v: _root_.scala.Long): Params = copy(distributionFrequency = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => enabledDistributionDenoms
        case 2 => {
          val __t = distributionFrequency
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(enabledDistributionDenoms.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 2 => _root_.scalapb.descriptors.PLong(distributionFrequency)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.protocolpool.v1.Params.type = cosmos.protocolpool.v1.Params
    // @@protoc_insertion_point(GeneratedMessage[cosmos.protocolpool.v1.Params])
}

object Params extends scalapb.GeneratedMessageCompanion[cosmos.protocolpool.v1.Params] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.protocolpool.v1.Params] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.protocolpool.v1.Params = {
    val __enabledDistributionDenoms: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var __distributionFrequency: _root_.scala.Long = 0L
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __enabledDistributionDenoms += _input__.readStringRequireUtf8()
        case 16 =>
          __distributionFrequency = _input__.readUInt64()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.protocolpool.v1.Params(
        enabledDistributionDenoms = __enabledDistributionDenoms.result(),
        distributionFrequency = __distributionFrequency,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.protocolpool.v1.Params] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.protocolpool.v1.Params(
        enabledDistributionDenoms = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        distributionFrequency = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.protocolpool.v1.TypesProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.protocolpool.v1.TypesProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.protocolpool.v1.Params(
    enabledDistributionDenoms = _root_.scala.Seq.empty,
    distributionFrequency = 0L
  )
  implicit class ParamsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.protocolpool.v1.Params]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.protocolpool.v1.Params](_l) {
    def enabledDistributionDenoms: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.enabledDistributionDenoms)((c_, f_) => c_.copy(enabledDistributionDenoms = f_))
    def distributionFrequency: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.distributionFrequency)((c_, f_) => c_.copy(distributionFrequency = f_))
  }
  final val ENABLED_DISTRIBUTION_DENOMS_FIELD_NUMBER = 1
  final val DISTRIBUTION_FREQUENCY_FIELD_NUMBER = 2
  def of(
    enabledDistributionDenoms: _root_.scala.Seq[_root_.scala.Predef.String],
    distributionFrequency: _root_.scala.Long
  ): _root_.cosmos.protocolpool.v1.Params = _root_.cosmos.protocolpool.v1.Params(
    enabledDistributionDenoms,
    distributionFrequency
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.protocolpool.v1.Params])
}
