// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.ics23.v1

/**
  * CommitmentProof is either an ExistenceProof or a NonExistenceProof, or a Batch of such messages
  */
@SerialVersionUID(0L)
final case class CommitmentProof(
    proof: cosmos.ics23.v1.CommitmentProof.Proof = cosmos.ics23.v1.CommitmentProof.Proof.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CommitmentProof] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (proof.exist.isDefined) {
        val __value = proof.exist.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (proof.nonexist.isDefined) {
        val __value = proof.nonexist.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (proof.batch.isDefined) {
        val __value = proof.batch.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (proof.compressed.isDefined) {
        val __value = proof.compressed.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      proof.exist.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      proof.nonexist.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      proof.batch.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      proof.compressed.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getExist: cosmos.ics23.v1.ExistenceProof = proof.exist.getOrElse(cosmos.ics23.v1.ExistenceProof.defaultInstance)
    def withExist(__v: cosmos.ics23.v1.ExistenceProof): CommitmentProof = copy(proof = cosmos.ics23.v1.CommitmentProof.Proof.Exist(__v))
    def getNonexist: cosmos.ics23.v1.NonExistenceProof = proof.nonexist.getOrElse(cosmos.ics23.v1.NonExistenceProof.defaultInstance)
    def withNonexist(__v: cosmos.ics23.v1.NonExistenceProof): CommitmentProof = copy(proof = cosmos.ics23.v1.CommitmentProof.Proof.Nonexist(__v))
    def getBatch: cosmos.ics23.v1.BatchProof = proof.batch.getOrElse(cosmos.ics23.v1.BatchProof.defaultInstance)
    def withBatch(__v: cosmos.ics23.v1.BatchProof): CommitmentProof = copy(proof = cosmos.ics23.v1.CommitmentProof.Proof.Batch(__v))
    def getCompressed: cosmos.ics23.v1.CompressedBatchProof = proof.compressed.getOrElse(cosmos.ics23.v1.CompressedBatchProof.defaultInstance)
    def withCompressed(__v: cosmos.ics23.v1.CompressedBatchProof): CommitmentProof = copy(proof = cosmos.ics23.v1.CommitmentProof.Proof.Compressed(__v))
    def clearProof: CommitmentProof = copy(proof = cosmos.ics23.v1.CommitmentProof.Proof.Empty)
    def withProof(__v: cosmos.ics23.v1.CommitmentProof.Proof): CommitmentProof = copy(proof = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => proof.exist.orNull
        case 2 => proof.nonexist.orNull
        case 3 => proof.batch.orNull
        case 4 => proof.compressed.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => proof.exist.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => proof.nonexist.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => proof.batch.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => proof.compressed.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.ics23.v1.CommitmentProof.type = cosmos.ics23.v1.CommitmentProof
    // @@protoc_insertion_point(GeneratedMessage[cosmos.ics23.v1.CommitmentProof])
}

object CommitmentProof extends scalapb.GeneratedMessageCompanion[cosmos.ics23.v1.CommitmentProof] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.ics23.v1.CommitmentProof] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.ics23.v1.CommitmentProof = {
    var __proof: cosmos.ics23.v1.CommitmentProof.Proof = cosmos.ics23.v1.CommitmentProof.Proof.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __proof = cosmos.ics23.v1.CommitmentProof.Proof.Exist(__proof.exist.fold(_root_.scalapb.LiteParser.readMessage[cosmos.ics23.v1.ExistenceProof](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __proof = cosmos.ics23.v1.CommitmentProof.Proof.Nonexist(__proof.nonexist.fold(_root_.scalapb.LiteParser.readMessage[cosmos.ics23.v1.NonExistenceProof](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __proof = cosmos.ics23.v1.CommitmentProof.Proof.Batch(__proof.batch.fold(_root_.scalapb.LiteParser.readMessage[cosmos.ics23.v1.BatchProof](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __proof = cosmos.ics23.v1.CommitmentProof.Proof.Compressed(__proof.compressed.fold(_root_.scalapb.LiteParser.readMessage[cosmos.ics23.v1.CompressedBatchProof](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.ics23.v1.CommitmentProof(
        proof = __proof,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.ics23.v1.CommitmentProof] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.ics23.v1.CommitmentProof(
        proof = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[cosmos.ics23.v1.ExistenceProof]]).map(cosmos.ics23.v1.CommitmentProof.Proof.Exist(_))
            .orElse[cosmos.ics23.v1.CommitmentProof.Proof](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[cosmos.ics23.v1.NonExistenceProof]]).map(cosmos.ics23.v1.CommitmentProof.Proof.Nonexist(_)))
            .orElse[cosmos.ics23.v1.CommitmentProof.Proof](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[cosmos.ics23.v1.BatchProof]]).map(cosmos.ics23.v1.CommitmentProof.Proof.Batch(_)))
            .orElse[cosmos.ics23.v1.CommitmentProof.Proof](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[cosmos.ics23.v1.CompressedBatchProof]]).map(cosmos.ics23.v1.CommitmentProof.Proof.Compressed(_)))
            .getOrElse(cosmos.ics23.v1.CommitmentProof.Proof.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.ics23.v1.ProofsProto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.ics23.v1.ProofsProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = cosmos.ics23.v1.ExistenceProof
      case 2 => __out = cosmos.ics23.v1.NonExistenceProof
      case 3 => __out = cosmos.ics23.v1.BatchProof
      case 4 => __out = cosmos.ics23.v1.CompressedBatchProof
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.ics23.v1.CommitmentProof(
    proof = cosmos.ics23.v1.CommitmentProof.Proof.Empty
  )
  sealed trait Proof extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isExist: _root_.scala.Boolean = false
    def isNonexist: _root_.scala.Boolean = false
    def isBatch: _root_.scala.Boolean = false
    def isCompressed: _root_.scala.Boolean = false
    def exist: _root_.scala.Option[cosmos.ics23.v1.ExistenceProof] = _root_.scala.None
    def nonexist: _root_.scala.Option[cosmos.ics23.v1.NonExistenceProof] = _root_.scala.None
    def batch: _root_.scala.Option[cosmos.ics23.v1.BatchProof] = _root_.scala.None
    def compressed: _root_.scala.Option[cosmos.ics23.v1.CompressedBatchProof] = _root_.scala.None
  }
  object Proof {
    @SerialVersionUID(0L)
    case object Empty extends cosmos.ics23.v1.CommitmentProof.Proof {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Exist(value: cosmos.ics23.v1.ExistenceProof) extends cosmos.ics23.v1.CommitmentProof.Proof {
      type ValueType = cosmos.ics23.v1.ExistenceProof
      override def isExist: _root_.scala.Boolean = true
      override def exist: _root_.scala.Option[cosmos.ics23.v1.ExistenceProof] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class Nonexist(value: cosmos.ics23.v1.NonExistenceProof) extends cosmos.ics23.v1.CommitmentProof.Proof {
      type ValueType = cosmos.ics23.v1.NonExistenceProof
      override def isNonexist: _root_.scala.Boolean = true
      override def nonexist: _root_.scala.Option[cosmos.ics23.v1.NonExistenceProof] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class Batch(value: cosmos.ics23.v1.BatchProof) extends cosmos.ics23.v1.CommitmentProof.Proof {
      type ValueType = cosmos.ics23.v1.BatchProof
      override def isBatch: _root_.scala.Boolean = true
      override def batch: _root_.scala.Option[cosmos.ics23.v1.BatchProof] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class Compressed(value: cosmos.ics23.v1.CompressedBatchProof) extends cosmos.ics23.v1.CommitmentProof.Proof {
      type ValueType = cosmos.ics23.v1.CompressedBatchProof
      override def isCompressed: _root_.scala.Boolean = true
      override def compressed: _root_.scala.Option[cosmos.ics23.v1.CompressedBatchProof] = Some(value)
      override def number: _root_.scala.Int = 4
    }
  }
  implicit class CommitmentProofLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.ics23.v1.CommitmentProof]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.ics23.v1.CommitmentProof](_l) {
    def exist: _root_.scalapb.lenses.Lens[UpperPB, cosmos.ics23.v1.ExistenceProof] = field(_.getExist)((c_, f_) => c_.copy(proof = cosmos.ics23.v1.CommitmentProof.Proof.Exist(f_)))
    def nonexist: _root_.scalapb.lenses.Lens[UpperPB, cosmos.ics23.v1.NonExistenceProof] = field(_.getNonexist)((c_, f_) => c_.copy(proof = cosmos.ics23.v1.CommitmentProof.Proof.Nonexist(f_)))
    def batch: _root_.scalapb.lenses.Lens[UpperPB, cosmos.ics23.v1.BatchProof] = field(_.getBatch)((c_, f_) => c_.copy(proof = cosmos.ics23.v1.CommitmentProof.Proof.Batch(f_)))
    def compressed: _root_.scalapb.lenses.Lens[UpperPB, cosmos.ics23.v1.CompressedBatchProof] = field(_.getCompressed)((c_, f_) => c_.copy(proof = cosmos.ics23.v1.CommitmentProof.Proof.Compressed(f_)))
    def proof: _root_.scalapb.lenses.Lens[UpperPB, cosmos.ics23.v1.CommitmentProof.Proof] = field(_.proof)((c_, f_) => c_.copy(proof = f_))
  }
  final val EXIST_FIELD_NUMBER = 1
  final val NONEXIST_FIELD_NUMBER = 2
  final val BATCH_FIELD_NUMBER = 3
  final val COMPRESSED_FIELD_NUMBER = 4
  def of(
    proof: cosmos.ics23.v1.CommitmentProof.Proof
  ): _root_.cosmos.ics23.v1.CommitmentProof = _root_.cosmos.ics23.v1.CommitmentProof(
    proof
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.ics23.v1.CommitmentProof])
}
