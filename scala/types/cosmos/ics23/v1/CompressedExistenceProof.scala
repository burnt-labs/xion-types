// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.ics23.v1

/** @param path
  *   these are indexes into the lookup_inners table in CompressedBatchProof
  */
@SerialVersionUID(0L)
final case class CompressedExistenceProof(
    key: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    value: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    leaf: _root_.scala.Option[cosmos.ics23.v1.LeafOp] = _root_.scala.None,
    path: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CompressedExistenceProof] {
    private[this] def pathSerializedSize = {
      if (__pathSerializedSizeField == 0) __pathSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        path.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(__i))
        __s
      }
      __pathSerializedSizeField
    }
    @transient private[this] var __pathSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = key
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(1, __value)
        }
      };
      
      {
        val __value = value
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(2, __value)
        }
      };
      if (leaf.isDefined) {
        val __value = leaf.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (path.nonEmpty) {
        val __localsize = pathSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = key
        if (!__v.isEmpty) {
          _output__.writeBytes(1, __v)
        }
      };
      {
        val __v = value
        if (!__v.isEmpty) {
          _output__.writeBytes(2, __v)
        }
      };
      leaf.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      if (path.nonEmpty) {
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(pathSerializedSize)
        path.foreach(_output__.writeInt32NoTag)
      };
      unknownFields.writeTo(_output__)
    }
    def withKey(__v: _root_.com.google.protobuf.ByteString): CompressedExistenceProof = copy(key = __v)
    def withValue(__v: _root_.com.google.protobuf.ByteString): CompressedExistenceProof = copy(value = __v)
    def getLeaf: cosmos.ics23.v1.LeafOp = leaf.getOrElse(cosmos.ics23.v1.LeafOp.defaultInstance)
    def clearLeaf: CompressedExistenceProof = copy(leaf = _root_.scala.None)
    def withLeaf(__v: cosmos.ics23.v1.LeafOp): CompressedExistenceProof = copy(leaf = Option(__v))
    def clearPath = copy(path = _root_.scala.Seq.empty)
    def addPath(__vs: _root_.scala.Int *): CompressedExistenceProof = addAllPath(__vs)
    def addAllPath(__vs: Iterable[_root_.scala.Int]): CompressedExistenceProof = copy(path = path ++ __vs)
    def withPath(__v: _root_.scala.Seq[_root_.scala.Int]): CompressedExistenceProof = copy(path = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = key
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 2 => {
          val __t = value
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 3 => leaf.orNull
        case 4 => path
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PByteString(key)
        case 2 => _root_.scalapb.descriptors.PByteString(value)
        case 3 => leaf.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PRepeated(path.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.ics23.v1.CompressedExistenceProof.type = cosmos.ics23.v1.CompressedExistenceProof
    // @@protoc_insertion_point(GeneratedMessage[cosmos.ics23.v1.CompressedExistenceProof])
}

object CompressedExistenceProof extends scalapb.GeneratedMessageCompanion[cosmos.ics23.v1.CompressedExistenceProof] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.ics23.v1.CompressedExistenceProof] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.ics23.v1.CompressedExistenceProof = {
    var __key: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
    var __value: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
    var __leaf: _root_.scala.Option[cosmos.ics23.v1.LeafOp] = _root_.scala.None
    val __path: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __key = _input__.readBytes()
        case 18 =>
          __value = _input__.readBytes()
        case 26 =>
          __leaf = _root_.scala.Option(__leaf.fold(_root_.scalapb.LiteParser.readMessage[cosmos.ics23.v1.LeafOp](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 32 =>
          __path += _input__.readInt32()
        case 34 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __path += _input__.readInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.ics23.v1.CompressedExistenceProof(
        key = __key,
        value = __value,
        leaf = __leaf,
        path = __path.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.ics23.v1.CompressedExistenceProof] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.ics23.v1.CompressedExistenceProof(
        key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        leaf = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[cosmos.ics23.v1.LeafOp]]),
        path = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.ics23.v1.ProofsProto.javaDescriptor.getMessageTypes().get(11)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.ics23.v1.ProofsProto.scalaDescriptor.messages(11)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = cosmos.ics23.v1.LeafOp
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.ics23.v1.CompressedExistenceProof(
    key = _root_.com.google.protobuf.ByteString.EMPTY,
    value = _root_.com.google.protobuf.ByteString.EMPTY,
    leaf = _root_.scala.None,
    path = _root_.scala.Seq.empty
  )
  implicit class CompressedExistenceProofLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.ics23.v1.CompressedExistenceProof]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.ics23.v1.CompressedExistenceProof](_l) {
    def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.key)((c_, f_) => c_.copy(key = f_))
    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.value)((c_, f_) => c_.copy(value = f_))
    def leaf: _root_.scalapb.lenses.Lens[UpperPB, cosmos.ics23.v1.LeafOp] = field(_.getLeaf)((c_, f_) => c_.copy(leaf = _root_.scala.Option(f_)))
    def optionalLeaf: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[cosmos.ics23.v1.LeafOp]] = field(_.leaf)((c_, f_) => c_.copy(leaf = f_))
    def path: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.path)((c_, f_) => c_.copy(path = f_))
  }
  final val KEY_FIELD_NUMBER = 1
  final val VALUE_FIELD_NUMBER = 2
  final val LEAF_FIELD_NUMBER = 3
  final val PATH_FIELD_NUMBER = 4
  def of(
    key: _root_.com.google.protobuf.ByteString,
    value: _root_.com.google.protobuf.ByteString,
    leaf: _root_.scala.Option[cosmos.ics23.v1.LeafOp],
    path: _root_.scala.Seq[_root_.scala.Int]
  ): _root_.cosmos.ics23.v1.CompressedExistenceProof = _root_.cosmos.ics23.v1.CompressedExistenceProof(
    key,
    value,
    leaf,
    path
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.ics23.v1.CompressedExistenceProof])
}
