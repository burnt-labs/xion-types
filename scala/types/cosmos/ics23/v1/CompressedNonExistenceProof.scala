// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.ics23.v1

/** @param key
  *   TODO: remove this as unnecessary??? we prove a range
  */
@SerialVersionUID(0L)
final case class CompressedNonExistenceProof(
    key: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    left: _root_.scala.Option[cosmos.ics23.v1.CompressedExistenceProof] = _root_.scala.None,
    right: _root_.scala.Option[cosmos.ics23.v1.CompressedExistenceProof] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CompressedNonExistenceProof] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = key
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(1, __value)
        }
      };
      if (left.isDefined) {
        val __value = left.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (right.isDefined) {
        val __value = right.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = key
        if (!__v.isEmpty) {
          _output__.writeBytes(1, __v)
        }
      };
      left.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      right.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withKey(__v: _root_.com.google.protobuf.ByteString): CompressedNonExistenceProof = copy(key = __v)
    def getLeft: cosmos.ics23.v1.CompressedExistenceProof = left.getOrElse(cosmos.ics23.v1.CompressedExistenceProof.defaultInstance)
    def clearLeft: CompressedNonExistenceProof = copy(left = _root_.scala.None)
    def withLeft(__v: cosmos.ics23.v1.CompressedExistenceProof): CompressedNonExistenceProof = copy(left = Option(__v))
    def getRight: cosmos.ics23.v1.CompressedExistenceProof = right.getOrElse(cosmos.ics23.v1.CompressedExistenceProof.defaultInstance)
    def clearRight: CompressedNonExistenceProof = copy(right = _root_.scala.None)
    def withRight(__v: cosmos.ics23.v1.CompressedExistenceProof): CompressedNonExistenceProof = copy(right = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = key
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 2 => left.orNull
        case 3 => right.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PByteString(key)
        case 2 => left.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => right.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.ics23.v1.CompressedNonExistenceProof.type = cosmos.ics23.v1.CompressedNonExistenceProof
    // @@protoc_insertion_point(GeneratedMessage[cosmos.ics23.v1.CompressedNonExistenceProof])
}

object CompressedNonExistenceProof extends scalapb.GeneratedMessageCompanion[cosmos.ics23.v1.CompressedNonExistenceProof] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.ics23.v1.CompressedNonExistenceProof] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.ics23.v1.CompressedNonExistenceProof = {
    var __key: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
    var __left: _root_.scala.Option[cosmos.ics23.v1.CompressedExistenceProof] = _root_.scala.None
    var __right: _root_.scala.Option[cosmos.ics23.v1.CompressedExistenceProof] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __key = _input__.readBytes()
        case 18 =>
          __left = _root_.scala.Option(__left.fold(_root_.scalapb.LiteParser.readMessage[cosmos.ics23.v1.CompressedExistenceProof](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __right = _root_.scala.Option(__right.fold(_root_.scalapb.LiteParser.readMessage[cosmos.ics23.v1.CompressedExistenceProof](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.ics23.v1.CompressedNonExistenceProof(
        key = __key,
        left = __left,
        right = __right,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.ics23.v1.CompressedNonExistenceProof] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.ics23.v1.CompressedNonExistenceProof(
        key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        left = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[cosmos.ics23.v1.CompressedExistenceProof]]),
        right = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[cosmos.ics23.v1.CompressedExistenceProof]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.ics23.v1.ProofsProto.javaDescriptor.getMessageTypes().get(12)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.ics23.v1.ProofsProto.scalaDescriptor.messages(12)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = cosmos.ics23.v1.CompressedExistenceProof
      case 3 => __out = cosmos.ics23.v1.CompressedExistenceProof
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.ics23.v1.CompressedNonExistenceProof(
    key = _root_.com.google.protobuf.ByteString.EMPTY,
    left = _root_.scala.None,
    right = _root_.scala.None
  )
  implicit class CompressedNonExistenceProofLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.ics23.v1.CompressedNonExistenceProof]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.ics23.v1.CompressedNonExistenceProof](_l) {
    def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.key)((c_, f_) => c_.copy(key = f_))
    def left: _root_.scalapb.lenses.Lens[UpperPB, cosmos.ics23.v1.CompressedExistenceProof] = field(_.getLeft)((c_, f_) => c_.copy(left = _root_.scala.Option(f_)))
    def optionalLeft: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[cosmos.ics23.v1.CompressedExistenceProof]] = field(_.left)((c_, f_) => c_.copy(left = f_))
    def right: _root_.scalapb.lenses.Lens[UpperPB, cosmos.ics23.v1.CompressedExistenceProof] = field(_.getRight)((c_, f_) => c_.copy(right = _root_.scala.Option(f_)))
    def optionalRight: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[cosmos.ics23.v1.CompressedExistenceProof]] = field(_.right)((c_, f_) => c_.copy(right = f_))
  }
  final val KEY_FIELD_NUMBER = 1
  final val LEFT_FIELD_NUMBER = 2
  final val RIGHT_FIELD_NUMBER = 3
  def of(
    key: _root_.com.google.protobuf.ByteString,
    left: _root_.scala.Option[cosmos.ics23.v1.CompressedExistenceProof],
    right: _root_.scala.Option[cosmos.ics23.v1.CompressedExistenceProof]
  ): _root_.cosmos.ics23.v1.CompressedNonExistenceProof = _root_.cosmos.ics23.v1.CompressedNonExistenceProof(
    key,
    left,
    right
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.ics23.v1.CompressedNonExistenceProof])
}
