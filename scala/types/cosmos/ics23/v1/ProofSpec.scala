// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.ics23.v1

/** *
  * ProofSpec defines what the expected parameters are for a given proof type.
  * This can be stored in the client and used to validate any incoming proofs.
  *
  * verify(ProofSpec, Proof) -&gt; Proof | Error
  *
  * As demonstrated in tests, if we don't fix the algorithm used to calculate the
  * LeafHash for a given tree, there are many possible key-value pairs that can
  * generate a given hash (by interpretting the preimage differently).
  * We need this for proper security, requires client knows a priori what
  * tree format server uses. But not in code, rather a configuration object.
  *
  * @param leafSpec
  *   any field in the ExistenceProof must be the same as in this spec.
  *   except Prefix, which is just the first bytes of prefix (spec can be longer)
  * @param maxDepth
  *   max_depth (if &gt; 0) is the maximum number of InnerOps allowed (mainly for fixed-depth tries)
  * @param minDepth
  *   min_depth (if &gt; 0) is the minimum number of InnerOps allowed (mainly for fixed-depth tries)
  */
@SerialVersionUID(0L)
final case class ProofSpec(
    leafSpec: _root_.scala.Option[cosmos.ics23.v1.LeafOp] = _root_.scala.None,
    innerSpec: _root_.scala.Option[cosmos.ics23.v1.InnerSpec] = _root_.scala.None,
    maxDepth: _root_.scala.Int = 0,
    minDepth: _root_.scala.Int = 0,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ProofSpec] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (leafSpec.isDefined) {
        val __value = leafSpec.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (innerSpec.isDefined) {
        val __value = innerSpec.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = maxDepth
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
        }
      };
      
      {
        val __value = minDepth
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      leafSpec.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      innerSpec.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = maxDepth
        if (__v != 0) {
          _output__.writeInt32(3, __v)
        }
      };
      {
        val __v = minDepth
        if (__v != 0) {
          _output__.writeInt32(4, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getLeafSpec: cosmos.ics23.v1.LeafOp = leafSpec.getOrElse(cosmos.ics23.v1.LeafOp.defaultInstance)
    def clearLeafSpec: ProofSpec = copy(leafSpec = _root_.scala.None)
    def withLeafSpec(__v: cosmos.ics23.v1.LeafOp): ProofSpec = copy(leafSpec = Option(__v))
    def getInnerSpec: cosmos.ics23.v1.InnerSpec = innerSpec.getOrElse(cosmos.ics23.v1.InnerSpec.defaultInstance)
    def clearInnerSpec: ProofSpec = copy(innerSpec = _root_.scala.None)
    def withInnerSpec(__v: cosmos.ics23.v1.InnerSpec): ProofSpec = copy(innerSpec = Option(__v))
    def withMaxDepth(__v: _root_.scala.Int): ProofSpec = copy(maxDepth = __v)
    def withMinDepth(__v: _root_.scala.Int): ProofSpec = copy(minDepth = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => leafSpec.orNull
        case 2 => innerSpec.orNull
        case 3 => {
          val __t = maxDepth
          if (__t != 0) __t else null
        }
        case 4 => {
          val __t = minDepth
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => leafSpec.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => innerSpec.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PInt(maxDepth)
        case 4 => _root_.scalapb.descriptors.PInt(minDepth)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.ics23.v1.ProofSpec.type = cosmos.ics23.v1.ProofSpec
    // @@protoc_insertion_point(GeneratedMessage[cosmos.ics23.v1.ProofSpec])
}

object ProofSpec extends scalapb.GeneratedMessageCompanion[cosmos.ics23.v1.ProofSpec] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.ics23.v1.ProofSpec] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.ics23.v1.ProofSpec = {
    var __leafSpec: _root_.scala.Option[cosmos.ics23.v1.LeafOp] = _root_.scala.None
    var __innerSpec: _root_.scala.Option[cosmos.ics23.v1.InnerSpec] = _root_.scala.None
    var __maxDepth: _root_.scala.Int = 0
    var __minDepth: _root_.scala.Int = 0
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __leafSpec = _root_.scala.Option(__leafSpec.fold(_root_.scalapb.LiteParser.readMessage[cosmos.ics23.v1.LeafOp](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __innerSpec = _root_.scala.Option(__innerSpec.fold(_root_.scalapb.LiteParser.readMessage[cosmos.ics23.v1.InnerSpec](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 24 =>
          __maxDepth = _input__.readInt32()
        case 32 =>
          __minDepth = _input__.readInt32()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.ics23.v1.ProofSpec(
        leafSpec = __leafSpec,
        innerSpec = __innerSpec,
        maxDepth = __maxDepth,
        minDepth = __minDepth,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.ics23.v1.ProofSpec] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.ics23.v1.ProofSpec(
        leafSpec = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[cosmos.ics23.v1.LeafOp]]),
        innerSpec = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[cosmos.ics23.v1.InnerSpec]]),
        maxDepth = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        minDepth = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.ics23.v1.ProofsProto.javaDescriptor.getMessageTypes().get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.ics23.v1.ProofsProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = cosmos.ics23.v1.LeafOp
      case 2 => __out = cosmos.ics23.v1.InnerSpec
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.ics23.v1.ProofSpec(
    leafSpec = _root_.scala.None,
    innerSpec = _root_.scala.None,
    maxDepth = 0,
    minDepth = 0
  )
  implicit class ProofSpecLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.ics23.v1.ProofSpec]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.ics23.v1.ProofSpec](_l) {
    def leafSpec: _root_.scalapb.lenses.Lens[UpperPB, cosmos.ics23.v1.LeafOp] = field(_.getLeafSpec)((c_, f_) => c_.copy(leafSpec = _root_.scala.Option(f_)))
    def optionalLeafSpec: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[cosmos.ics23.v1.LeafOp]] = field(_.leafSpec)((c_, f_) => c_.copy(leafSpec = f_))
    def innerSpec: _root_.scalapb.lenses.Lens[UpperPB, cosmos.ics23.v1.InnerSpec] = field(_.getInnerSpec)((c_, f_) => c_.copy(innerSpec = _root_.scala.Option(f_)))
    def optionalInnerSpec: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[cosmos.ics23.v1.InnerSpec]] = field(_.innerSpec)((c_, f_) => c_.copy(innerSpec = f_))
    def maxDepth: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.maxDepth)((c_, f_) => c_.copy(maxDepth = f_))
    def minDepth: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.minDepth)((c_, f_) => c_.copy(minDepth = f_))
  }
  final val LEAF_SPEC_FIELD_NUMBER = 1
  final val INNER_SPEC_FIELD_NUMBER = 2
  final val MAX_DEPTH_FIELD_NUMBER = 3
  final val MIN_DEPTH_FIELD_NUMBER = 4
  def of(
    leafSpec: _root_.scala.Option[cosmos.ics23.v1.LeafOp],
    innerSpec: _root_.scala.Option[cosmos.ics23.v1.InnerSpec],
    maxDepth: _root_.scala.Int,
    minDepth: _root_.scala.Int
  ): _root_.cosmos.ics23.v1.ProofSpec = _root_.cosmos.ics23.v1.ProofSpec(
    leafSpec,
    innerSpec,
    maxDepth,
    minDepth
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.ics23.v1.ProofSpec])
}
