// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.app.v1alpha1

/** PackageReference is a reference to a protobuf package used by a module.
  *
  * @param name
  *   name is the fully-qualified name of the package.
  * @param revision
  *   revision is the optional revision of the package that is being used.
  *   Protobuf packages used in Cosmos should generally have a major version
  *   as the last part of the package name, ex. foo.bar.baz.v1.
  *   The revision of a package can be thought of as the minor version of a
  *   package which has additional backwards compatible definitions that weren't
  *   present in a previous version.
  *  
  *   A package should indicate its revision with a source code comment
  *   above the package declaration in one of its files containing the
  *   text "Revision N" where N is an integer revision. All packages start
  *   at revision 0 the first time they are released in a module.
  *  
  *   When a new version of a module is released and items are added to existing
  *   .proto files, these definitions should contain comments of the form
  *   "Since: Revision N" where N is an integer revision.
  *  
  *   When the module runtime starts up, it will check the pinned proto
  *   image and panic if there are runtime protobuf definitions that are not
  *   in the pinned descriptor which do not have
  *   a "Since Revision N" comment or have a "Since Revision N" comment where
  *   N is &lt;= to the revision specified here. This indicates that the protobuf
  *   files have been updated, but the pinned file descriptor hasn't.
  *  
  *   If there are items in the pinned file descriptor with a revision
  *   greater than the value indicated here, this will also cause a panic
  *   as it may mean that the pinned descriptor for a legacy module has been
  *   improperly updated or that there is some other versioning discrepancy.
  *   Runtime protobuf definitions will also be checked for compatibility
  *   with pinned file descriptors to make sure there are no incompatible changes.
  *  
  *   This behavior ensures that:
  *   * pinned proto images are up-to-date
  *   * protobuf files are carefully annotated with revision comments which
  *     are important good client UX
  *   * protobuf files are changed in backwards and forwards compatible ways
  */
@SerialVersionUID(0L)
final case class PackageReference(
    name: _root_.scala.Predef.String = "",
    revision: _root_.scala.Int = 0,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[PackageReference] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = name
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = revision
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = name
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = revision
        if (__v != 0) {
          _output__.writeUInt32(2, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withName(__v: _root_.scala.Predef.String): PackageReference = copy(name = __v)
    def withRevision(__v: _root_.scala.Int): PackageReference = copy(revision = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = revision
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(name)
        case 2 => _root_.scalapb.descriptors.PInt(revision)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.app.v1alpha1.PackageReference.type = cosmos.app.v1alpha1.PackageReference
    // @@protoc_insertion_point(GeneratedMessage[cosmos.app.v1alpha1.PackageReference])
}

object PackageReference extends scalapb.GeneratedMessageCompanion[cosmos.app.v1alpha1.PackageReference] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.app.v1alpha1.PackageReference] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.app.v1alpha1.PackageReference = {
    var __name: _root_.scala.Predef.String = ""
    var __revision: _root_.scala.Int = 0
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __name = _input__.readStringRequireUtf8()
        case 16 =>
          __revision = _input__.readUInt32()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.app.v1alpha1.PackageReference(
        name = __name,
        revision = __revision,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.app.v1alpha1.PackageReference] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.app.v1alpha1.PackageReference(
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        revision = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.app.v1alpha1.ModuleProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.app.v1alpha1.ModuleProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.app.v1alpha1.PackageReference(
    name = "",
    revision = 0
  )
  implicit class PackageReferenceLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.app.v1alpha1.PackageReference]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.app.v1alpha1.PackageReference](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def revision: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.revision)((c_, f_) => c_.copy(revision = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val REVISION_FIELD_NUMBER = 2
  def of(
    name: _root_.scala.Predef.String,
    revision: _root_.scala.Int
  ): _root_.cosmos.app.v1alpha1.PackageReference = _root_.cosmos.app.v1alpha1.PackageReference(
    name,
    revision
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.app.v1alpha1.PackageReference])
}
