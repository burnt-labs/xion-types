// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.app.v1alpha1

/** ModuleDescriptor describes an app module.
  *
  * @param goImport
  *   go_import names the package that should be imported by an app to load the
  *   module in the runtime module registry. It is required to make debugging
  *   of configuration errors easier for users.
  * @param usePackage
  *   use_package refers to a protobuf package that this module
  *   uses and exposes to the world. In an app, only one module should "use"
  *   or own a single protobuf package. It is assumed that the module uses
  *   all of the .proto files in a single package.
  * @param canMigrateFrom
  *   can_migrate_from defines which module versions this module can migrate
  *   state from. The framework will check that one module version is able to
  *   migrate from a previous module version before attempting to update its
  *   config. It is assumed that modules can transitively migrate from earlier
  *   versions. For instance if v3 declares it can migrate from v2, and v2
  *   declares it can migrate from v1, the framework knows how to migrate
  *   from v1 to v3, assuming all 3 module versions are registered at runtime.
  */
@SerialVersionUID(0L)
final case class ModuleDescriptor(
    goImport: _root_.scala.Predef.String = "",
    usePackage: _root_.scala.Seq[cosmos.app.v1alpha1.PackageReference] = _root_.scala.Seq.empty,
    canMigrateFrom: _root_.scala.Seq[cosmos.app.v1alpha1.MigrateFromInfo] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ModuleDescriptor] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = goImport
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      usePackage.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      canMigrateFrom.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = goImport
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      usePackage.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      canMigrateFrom.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withGoImport(__v: _root_.scala.Predef.String): ModuleDescriptor = copy(goImport = __v)
    def clearUsePackage = copy(usePackage = _root_.scala.Seq.empty)
    def addUsePackage(__vs: cosmos.app.v1alpha1.PackageReference *): ModuleDescriptor = addAllUsePackage(__vs)
    def addAllUsePackage(__vs: Iterable[cosmos.app.v1alpha1.PackageReference]): ModuleDescriptor = copy(usePackage = usePackage ++ __vs)
    def withUsePackage(__v: _root_.scala.Seq[cosmos.app.v1alpha1.PackageReference]): ModuleDescriptor = copy(usePackage = __v)
    def clearCanMigrateFrom = copy(canMigrateFrom = _root_.scala.Seq.empty)
    def addCanMigrateFrom(__vs: cosmos.app.v1alpha1.MigrateFromInfo *): ModuleDescriptor = addAllCanMigrateFrom(__vs)
    def addAllCanMigrateFrom(__vs: Iterable[cosmos.app.v1alpha1.MigrateFromInfo]): ModuleDescriptor = copy(canMigrateFrom = canMigrateFrom ++ __vs)
    def withCanMigrateFrom(__v: _root_.scala.Seq[cosmos.app.v1alpha1.MigrateFromInfo]): ModuleDescriptor = copy(canMigrateFrom = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = goImport
          if (__t != "") __t else null
        }
        case 2 => usePackage
        case 3 => canMigrateFrom
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(goImport)
        case 2 => _root_.scalapb.descriptors.PRepeated(usePackage.iterator.map(_.toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PRepeated(canMigrateFrom.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.app.v1alpha1.ModuleDescriptor.type = cosmos.app.v1alpha1.ModuleDescriptor
    // @@protoc_insertion_point(GeneratedMessage[cosmos.app.v1alpha1.ModuleDescriptor])
}

object ModuleDescriptor extends scalapb.GeneratedMessageCompanion[cosmos.app.v1alpha1.ModuleDescriptor] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.app.v1alpha1.ModuleDescriptor] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.app.v1alpha1.ModuleDescriptor = {
    var __goImport: _root_.scala.Predef.String = ""
    val __usePackage: _root_.scala.collection.immutable.VectorBuilder[cosmos.app.v1alpha1.PackageReference] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.app.v1alpha1.PackageReference]
    val __canMigrateFrom: _root_.scala.collection.immutable.VectorBuilder[cosmos.app.v1alpha1.MigrateFromInfo] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.app.v1alpha1.MigrateFromInfo]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __goImport = _input__.readStringRequireUtf8()
        case 18 =>
          __usePackage += _root_.scalapb.LiteParser.readMessage[cosmos.app.v1alpha1.PackageReference](_input__)
        case 26 =>
          __canMigrateFrom += _root_.scalapb.LiteParser.readMessage[cosmos.app.v1alpha1.MigrateFromInfo](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.app.v1alpha1.ModuleDescriptor(
        goImport = __goImport,
        usePackage = __usePackage.result(),
        canMigrateFrom = __canMigrateFrom.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.app.v1alpha1.ModuleDescriptor] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.app.v1alpha1.ModuleDescriptor(
        goImport = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        usePackage = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[cosmos.app.v1alpha1.PackageReference]]).getOrElse(_root_.scala.Seq.empty),
        canMigrateFrom = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[cosmos.app.v1alpha1.MigrateFromInfo]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.app.v1alpha1.ModuleProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.app.v1alpha1.ModuleProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = cosmos.app.v1alpha1.PackageReference
      case 3 => __out = cosmos.app.v1alpha1.MigrateFromInfo
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.app.v1alpha1.ModuleDescriptor(
    goImport = "",
    usePackage = _root_.scala.Seq.empty,
    canMigrateFrom = _root_.scala.Seq.empty
  )
  implicit class ModuleDescriptorLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.app.v1alpha1.ModuleDescriptor]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.app.v1alpha1.ModuleDescriptor](_l) {
    def goImport: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.goImport)((c_, f_) => c_.copy(goImport = f_))
    def usePackage: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.app.v1alpha1.PackageReference]] = field(_.usePackage)((c_, f_) => c_.copy(usePackage = f_))
    def canMigrateFrom: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.app.v1alpha1.MigrateFromInfo]] = field(_.canMigrateFrom)((c_, f_) => c_.copy(canMigrateFrom = f_))
  }
  final val GO_IMPORT_FIELD_NUMBER = 1
  final val USE_PACKAGE_FIELD_NUMBER = 2
  final val CAN_MIGRATE_FROM_FIELD_NUMBER = 3
  def of(
    goImport: _root_.scala.Predef.String,
    usePackage: _root_.scala.Seq[cosmos.app.v1alpha1.PackageReference],
    canMigrateFrom: _root_.scala.Seq[cosmos.app.v1alpha1.MigrateFromInfo]
  ): _root_.cosmos.app.v1alpha1.ModuleDescriptor = _root_.cosmos.app.v1alpha1.ModuleDescriptor(
    goImport,
    usePackage,
    canMigrateFrom
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.app.v1alpha1.ModuleDescriptor])
}
