// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.vesting.v1beta1

/** MsgCreateVestingAccount defines a message that enables creating a vesting
  * account.
  *
  * @param endTime
  *   end of vesting as unix time (in seconds).
  */
@SerialVersionUID(0L)
final case class MsgCreateVestingAccount(
    fromAddress: _root_.scala.Predef.String = "",
    toAddress: _root_.scala.Predef.String = "",
    amount: _root_.scala.Seq[cosmos.base.v1beta1.Coin] = _root_.scala.Seq.empty,
    endTime: _root_.scala.Long = 0L,
    delayed: _root_.scala.Boolean = false,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[MsgCreateVestingAccount] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = fromAddress
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = toAddress
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      amount.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = endTime
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, __value)
        }
      };
      
      {
        val __value = delayed
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = fromAddress
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = toAddress
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      amount.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = endTime
        if (__v != 0L) {
          _output__.writeInt64(4, __v)
        }
      };
      {
        val __v = delayed
        if (__v != false) {
          _output__.writeBool(5, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withFromAddress(__v: _root_.scala.Predef.String): MsgCreateVestingAccount = copy(fromAddress = __v)
    def withToAddress(__v: _root_.scala.Predef.String): MsgCreateVestingAccount = copy(toAddress = __v)
    def clearAmount = copy(amount = _root_.scala.Seq.empty)
    def addAmount(__vs: cosmos.base.v1beta1.Coin *): MsgCreateVestingAccount = addAllAmount(__vs)
    def addAllAmount(__vs: Iterable[cosmos.base.v1beta1.Coin]): MsgCreateVestingAccount = copy(amount = amount ++ __vs)
    def withAmount(__v: _root_.scala.Seq[cosmos.base.v1beta1.Coin]): MsgCreateVestingAccount = copy(amount = __v)
    def withEndTime(__v: _root_.scala.Long): MsgCreateVestingAccount = copy(endTime = __v)
    def withDelayed(__v: _root_.scala.Boolean): MsgCreateVestingAccount = copy(delayed = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = fromAddress
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = toAddress
          if (__t != "") __t else null
        }
        case 3 => amount
        case 4 => {
          val __t = endTime
          if (__t != 0L) __t else null
        }
        case 5 => {
          val __t = delayed
          if (__t != false) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(fromAddress)
        case 2 => _root_.scalapb.descriptors.PString(toAddress)
        case 3 => _root_.scalapb.descriptors.PRepeated(amount.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PLong(endTime)
        case 5 => _root_.scalapb.descriptors.PBoolean(delayed)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.vesting.v1beta1.MsgCreateVestingAccount.type = cosmos.vesting.v1beta1.MsgCreateVestingAccount
    // @@protoc_insertion_point(GeneratedMessage[cosmos.vesting.v1beta1.MsgCreateVestingAccount])
}

object MsgCreateVestingAccount extends scalapb.GeneratedMessageCompanion[cosmos.vesting.v1beta1.MsgCreateVestingAccount] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.vesting.v1beta1.MsgCreateVestingAccount] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.vesting.v1beta1.MsgCreateVestingAccount = {
    var __fromAddress: _root_.scala.Predef.String = ""
    var __toAddress: _root_.scala.Predef.String = ""
    val __amount: _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.Coin] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.Coin]
    var __endTime: _root_.scala.Long = 0L
    var __delayed: _root_.scala.Boolean = false
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __fromAddress = _input__.readStringRequireUtf8()
        case 18 =>
          __toAddress = _input__.readStringRequireUtf8()
        case 26 =>
          __amount += _root_.scalapb.LiteParser.readMessage[cosmos.base.v1beta1.Coin](_input__)
        case 32 =>
          __endTime = _input__.readInt64()
        case 40 =>
          __delayed = _input__.readBool()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.vesting.v1beta1.MsgCreateVestingAccount(
        fromAddress = __fromAddress,
        toAddress = __toAddress,
        amount = __amount.result(),
        endTime = __endTime,
        delayed = __delayed,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.vesting.v1beta1.MsgCreateVestingAccount] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.vesting.v1beta1.MsgCreateVestingAccount(
        fromAddress = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        toAddress = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        amount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[cosmos.base.v1beta1.Coin]]).getOrElse(_root_.scala.Seq.empty),
        endTime = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        delayed = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.vesting.v1beta1.TxProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.vesting.v1beta1.TxProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = cosmos.base.v1beta1.Coin
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.vesting.v1beta1.MsgCreateVestingAccount(
    fromAddress = "",
    toAddress = "",
    amount = _root_.scala.Seq.empty,
    endTime = 0L,
    delayed = false
  )
  implicit class MsgCreateVestingAccountLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.vesting.v1beta1.MsgCreateVestingAccount]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.vesting.v1beta1.MsgCreateVestingAccount](_l) {
    def fromAddress: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.fromAddress)((c_, f_) => c_.copy(fromAddress = f_))
    def toAddress: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.toAddress)((c_, f_) => c_.copy(toAddress = f_))
    def amount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.base.v1beta1.Coin]] = field(_.amount)((c_, f_) => c_.copy(amount = f_))
    def endTime: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.endTime)((c_, f_) => c_.copy(endTime = f_))
    def delayed: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.delayed)((c_, f_) => c_.copy(delayed = f_))
  }
  final val FROM_ADDRESS_FIELD_NUMBER = 1
  final val TO_ADDRESS_FIELD_NUMBER = 2
  final val AMOUNT_FIELD_NUMBER = 3
  final val END_TIME_FIELD_NUMBER = 4
  final val DELAYED_FIELD_NUMBER = 5
  def of(
    fromAddress: _root_.scala.Predef.String,
    toAddress: _root_.scala.Predef.String,
    amount: _root_.scala.Seq[cosmos.base.v1beta1.Coin],
    endTime: _root_.scala.Long,
    delayed: _root_.scala.Boolean
  ): _root_.cosmos.vesting.v1beta1.MsgCreateVestingAccount = _root_.cosmos.vesting.v1beta1.MsgCreateVestingAccount(
    fromAddress,
    toAddress,
    amount,
    endTime,
    delayed
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.vesting.v1beta1.MsgCreateVestingAccount])
}
