// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.vesting.v1beta1

/** PeriodicVestingAccount implements the VestingAccount interface. It
  * periodically vests by unlocking coins during each specified period.
  */
@SerialVersionUID(0L)
final case class PeriodicVestingAccount(
    baseVestingAccount: _root_.scala.Option[cosmos.vesting.v1beta1.BaseVestingAccount] = _root_.scala.None,
    startTime: _root_.scala.Long = 0L,
    vestingPeriods: _root_.scala.Seq[cosmos.vesting.v1beta1.Period] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[PeriodicVestingAccount] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (baseVestingAccount.isDefined) {
        val __value = baseVestingAccount.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = startTime
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      vestingPeriods.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      baseVestingAccount.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = startTime
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      vestingPeriods.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getBaseVestingAccount: cosmos.vesting.v1beta1.BaseVestingAccount = baseVestingAccount.getOrElse(cosmos.vesting.v1beta1.BaseVestingAccount.defaultInstance)
    def clearBaseVestingAccount: PeriodicVestingAccount = copy(baseVestingAccount = _root_.scala.None)
    def withBaseVestingAccount(__v: cosmos.vesting.v1beta1.BaseVestingAccount): PeriodicVestingAccount = copy(baseVestingAccount = Option(__v))
    def withStartTime(__v: _root_.scala.Long): PeriodicVestingAccount = copy(startTime = __v)
    def clearVestingPeriods = copy(vestingPeriods = _root_.scala.Seq.empty)
    def addVestingPeriods(__vs: cosmos.vesting.v1beta1.Period *): PeriodicVestingAccount = addAllVestingPeriods(__vs)
    def addAllVestingPeriods(__vs: Iterable[cosmos.vesting.v1beta1.Period]): PeriodicVestingAccount = copy(vestingPeriods = vestingPeriods ++ __vs)
    def withVestingPeriods(__v: _root_.scala.Seq[cosmos.vesting.v1beta1.Period]): PeriodicVestingAccount = copy(vestingPeriods = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => baseVestingAccount.orNull
        case 2 => {
          val __t = startTime
          if (__t != 0L) __t else null
        }
        case 3 => vestingPeriods
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => baseVestingAccount.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PLong(startTime)
        case 3 => _root_.scalapb.descriptors.PRepeated(vestingPeriods.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.vesting.v1beta1.PeriodicVestingAccount.type = cosmos.vesting.v1beta1.PeriodicVestingAccount
    // @@protoc_insertion_point(GeneratedMessage[cosmos.vesting.v1beta1.PeriodicVestingAccount])
}

object PeriodicVestingAccount extends scalapb.GeneratedMessageCompanion[cosmos.vesting.v1beta1.PeriodicVestingAccount] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.vesting.v1beta1.PeriodicVestingAccount] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.vesting.v1beta1.PeriodicVestingAccount = {
    var __baseVestingAccount: _root_.scala.Option[cosmos.vesting.v1beta1.BaseVestingAccount] = _root_.scala.None
    var __startTime: _root_.scala.Long = 0L
    val __vestingPeriods: _root_.scala.collection.immutable.VectorBuilder[cosmos.vesting.v1beta1.Period] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.vesting.v1beta1.Period]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __baseVestingAccount = _root_.scala.Option(__baseVestingAccount.fold(_root_.scalapb.LiteParser.readMessage[cosmos.vesting.v1beta1.BaseVestingAccount](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 16 =>
          __startTime = _input__.readInt64()
        case 26 =>
          __vestingPeriods += _root_.scalapb.LiteParser.readMessage[cosmos.vesting.v1beta1.Period](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.vesting.v1beta1.PeriodicVestingAccount(
        baseVestingAccount = __baseVestingAccount,
        startTime = __startTime,
        vestingPeriods = __vestingPeriods.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.vesting.v1beta1.PeriodicVestingAccount] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.vesting.v1beta1.PeriodicVestingAccount(
        baseVestingAccount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[cosmos.vesting.v1beta1.BaseVestingAccount]]),
        startTime = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        vestingPeriods = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[cosmos.vesting.v1beta1.Period]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.vesting.v1beta1.VestingProto.javaDescriptor.getMessageTypes().get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.vesting.v1beta1.VestingProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = cosmos.vesting.v1beta1.BaseVestingAccount
      case 3 => __out = cosmos.vesting.v1beta1.Period
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.vesting.v1beta1.PeriodicVestingAccount(
    baseVestingAccount = _root_.scala.None,
    startTime = 0L,
    vestingPeriods = _root_.scala.Seq.empty
  )
  implicit class PeriodicVestingAccountLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.vesting.v1beta1.PeriodicVestingAccount]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.vesting.v1beta1.PeriodicVestingAccount](_l) {
    def baseVestingAccount: _root_.scalapb.lenses.Lens[UpperPB, cosmos.vesting.v1beta1.BaseVestingAccount] = field(_.getBaseVestingAccount)((c_, f_) => c_.copy(baseVestingAccount = _root_.scala.Option(f_)))
    def optionalBaseVestingAccount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[cosmos.vesting.v1beta1.BaseVestingAccount]] = field(_.baseVestingAccount)((c_, f_) => c_.copy(baseVestingAccount = f_))
    def startTime: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.startTime)((c_, f_) => c_.copy(startTime = f_))
    def vestingPeriods: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.vesting.v1beta1.Period]] = field(_.vestingPeriods)((c_, f_) => c_.copy(vestingPeriods = f_))
  }
  final val BASE_VESTING_ACCOUNT_FIELD_NUMBER = 1
  final val START_TIME_FIELD_NUMBER = 2
  final val VESTING_PERIODS_FIELD_NUMBER = 3
  def of(
    baseVestingAccount: _root_.scala.Option[cosmos.vesting.v1beta1.BaseVestingAccount],
    startTime: _root_.scala.Long,
    vestingPeriods: _root_.scala.Seq[cosmos.vesting.v1beta1.Period]
  ): _root_.cosmos.vesting.v1beta1.PeriodicVestingAccount = _root_.cosmos.vesting.v1beta1.PeriodicVestingAccount(
    baseVestingAccount,
    startTime,
    vestingPeriods
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.vesting.v1beta1.PeriodicVestingAccount])
}
