// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.vesting.v1beta1

/** BaseVestingAccount implements the VestingAccount interface. It contains all
  * the necessary fields needed for any vesting account implementation.
  *
  * @param endTime
  *   Vesting end time, as unix timestamp (in seconds).
  */
@SerialVersionUID(0L)
final case class BaseVestingAccount(
    baseAccount: _root_.scala.Option[cosmos.auth.v1beta1.BaseAccount] = _root_.scala.None,
    originalVesting: _root_.scala.Seq[cosmos.base.v1beta1.Coin] = _root_.scala.Seq.empty,
    delegatedFree: _root_.scala.Seq[cosmos.base.v1beta1.Coin] = _root_.scala.Seq.empty,
    delegatedVesting: _root_.scala.Seq[cosmos.base.v1beta1.Coin] = _root_.scala.Seq.empty,
    endTime: _root_.scala.Long = 0L,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[BaseVestingAccount] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (baseAccount.isDefined) {
        val __value = baseAccount.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      originalVesting.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      delegatedFree.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      delegatedVesting.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = endTime
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      baseAccount.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      originalVesting.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      delegatedFree.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      delegatedVesting.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = endTime
        if (__v != 0L) {
          _output__.writeInt64(5, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getBaseAccount: cosmos.auth.v1beta1.BaseAccount = baseAccount.getOrElse(cosmos.auth.v1beta1.BaseAccount.defaultInstance)
    def clearBaseAccount: BaseVestingAccount = copy(baseAccount = _root_.scala.None)
    def withBaseAccount(__v: cosmos.auth.v1beta1.BaseAccount): BaseVestingAccount = copy(baseAccount = Option(__v))
    def clearOriginalVesting = copy(originalVesting = _root_.scala.Seq.empty)
    def addOriginalVesting(__vs: cosmos.base.v1beta1.Coin *): BaseVestingAccount = addAllOriginalVesting(__vs)
    def addAllOriginalVesting(__vs: Iterable[cosmos.base.v1beta1.Coin]): BaseVestingAccount = copy(originalVesting = originalVesting ++ __vs)
    def withOriginalVesting(__v: _root_.scala.Seq[cosmos.base.v1beta1.Coin]): BaseVestingAccount = copy(originalVesting = __v)
    def clearDelegatedFree = copy(delegatedFree = _root_.scala.Seq.empty)
    def addDelegatedFree(__vs: cosmos.base.v1beta1.Coin *): BaseVestingAccount = addAllDelegatedFree(__vs)
    def addAllDelegatedFree(__vs: Iterable[cosmos.base.v1beta1.Coin]): BaseVestingAccount = copy(delegatedFree = delegatedFree ++ __vs)
    def withDelegatedFree(__v: _root_.scala.Seq[cosmos.base.v1beta1.Coin]): BaseVestingAccount = copy(delegatedFree = __v)
    def clearDelegatedVesting = copy(delegatedVesting = _root_.scala.Seq.empty)
    def addDelegatedVesting(__vs: cosmos.base.v1beta1.Coin *): BaseVestingAccount = addAllDelegatedVesting(__vs)
    def addAllDelegatedVesting(__vs: Iterable[cosmos.base.v1beta1.Coin]): BaseVestingAccount = copy(delegatedVesting = delegatedVesting ++ __vs)
    def withDelegatedVesting(__v: _root_.scala.Seq[cosmos.base.v1beta1.Coin]): BaseVestingAccount = copy(delegatedVesting = __v)
    def withEndTime(__v: _root_.scala.Long): BaseVestingAccount = copy(endTime = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => baseAccount.orNull
        case 2 => originalVesting
        case 3 => delegatedFree
        case 4 => delegatedVesting
        case 5 => {
          val __t = endTime
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => baseAccount.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PRepeated(originalVesting.iterator.map(_.toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PRepeated(delegatedFree.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(delegatedVesting.iterator.map(_.toPMessage).toVector)
        case 5 => _root_.scalapb.descriptors.PLong(endTime)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.vesting.v1beta1.BaseVestingAccount.type = cosmos.vesting.v1beta1.BaseVestingAccount
    // @@protoc_insertion_point(GeneratedMessage[cosmos.vesting.v1beta1.BaseVestingAccount])
}

object BaseVestingAccount extends scalapb.GeneratedMessageCompanion[cosmos.vesting.v1beta1.BaseVestingAccount] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.vesting.v1beta1.BaseVestingAccount] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.vesting.v1beta1.BaseVestingAccount = {
    var __baseAccount: _root_.scala.Option[cosmos.auth.v1beta1.BaseAccount] = _root_.scala.None
    val __originalVesting: _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.Coin] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.Coin]
    val __delegatedFree: _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.Coin] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.Coin]
    val __delegatedVesting: _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.Coin] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.Coin]
    var __endTime: _root_.scala.Long = 0L
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __baseAccount = _root_.scala.Option(__baseAccount.fold(_root_.scalapb.LiteParser.readMessage[cosmos.auth.v1beta1.BaseAccount](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __originalVesting += _root_.scalapb.LiteParser.readMessage[cosmos.base.v1beta1.Coin](_input__)
        case 26 =>
          __delegatedFree += _root_.scalapb.LiteParser.readMessage[cosmos.base.v1beta1.Coin](_input__)
        case 34 =>
          __delegatedVesting += _root_.scalapb.LiteParser.readMessage[cosmos.base.v1beta1.Coin](_input__)
        case 40 =>
          __endTime = _input__.readInt64()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.vesting.v1beta1.BaseVestingAccount(
        baseAccount = __baseAccount,
        originalVesting = __originalVesting.result(),
        delegatedFree = __delegatedFree.result(),
        delegatedVesting = __delegatedVesting.result(),
        endTime = __endTime,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.vesting.v1beta1.BaseVestingAccount] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.vesting.v1beta1.BaseVestingAccount(
        baseAccount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[cosmos.auth.v1beta1.BaseAccount]]),
        originalVesting = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[cosmos.base.v1beta1.Coin]]).getOrElse(_root_.scala.Seq.empty),
        delegatedFree = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[cosmos.base.v1beta1.Coin]]).getOrElse(_root_.scala.Seq.empty),
        delegatedVesting = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[cosmos.base.v1beta1.Coin]]).getOrElse(_root_.scala.Seq.empty),
        endTime = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.vesting.v1beta1.VestingProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.vesting.v1beta1.VestingProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = cosmos.auth.v1beta1.BaseAccount
      case 2 => __out = cosmos.base.v1beta1.Coin
      case 3 => __out = cosmos.base.v1beta1.Coin
      case 4 => __out = cosmos.base.v1beta1.Coin
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.vesting.v1beta1.BaseVestingAccount(
    baseAccount = _root_.scala.None,
    originalVesting = _root_.scala.Seq.empty,
    delegatedFree = _root_.scala.Seq.empty,
    delegatedVesting = _root_.scala.Seq.empty,
    endTime = 0L
  )
  implicit class BaseVestingAccountLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.vesting.v1beta1.BaseVestingAccount]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.vesting.v1beta1.BaseVestingAccount](_l) {
    def baseAccount: _root_.scalapb.lenses.Lens[UpperPB, cosmos.auth.v1beta1.BaseAccount] = field(_.getBaseAccount)((c_, f_) => c_.copy(baseAccount = _root_.scala.Option(f_)))
    def optionalBaseAccount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[cosmos.auth.v1beta1.BaseAccount]] = field(_.baseAccount)((c_, f_) => c_.copy(baseAccount = f_))
    def originalVesting: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.base.v1beta1.Coin]] = field(_.originalVesting)((c_, f_) => c_.copy(originalVesting = f_))
    def delegatedFree: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.base.v1beta1.Coin]] = field(_.delegatedFree)((c_, f_) => c_.copy(delegatedFree = f_))
    def delegatedVesting: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.base.v1beta1.Coin]] = field(_.delegatedVesting)((c_, f_) => c_.copy(delegatedVesting = f_))
    def endTime: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.endTime)((c_, f_) => c_.copy(endTime = f_))
  }
  final val BASE_ACCOUNT_FIELD_NUMBER = 1
  final val ORIGINAL_VESTING_FIELD_NUMBER = 2
  final val DELEGATED_FREE_FIELD_NUMBER = 3
  final val DELEGATED_VESTING_FIELD_NUMBER = 4
  final val END_TIME_FIELD_NUMBER = 5
  def of(
    baseAccount: _root_.scala.Option[cosmos.auth.v1beta1.BaseAccount],
    originalVesting: _root_.scala.Seq[cosmos.base.v1beta1.Coin],
    delegatedFree: _root_.scala.Seq[cosmos.base.v1beta1.Coin],
    delegatedVesting: _root_.scala.Seq[cosmos.base.v1beta1.Coin],
    endTime: _root_.scala.Long
  ): _root_.cosmos.vesting.v1beta1.BaseVestingAccount = _root_.cosmos.vesting.v1beta1.BaseVestingAccount(
    baseAccount,
    originalVesting,
    delegatedFree,
    delegatedVesting,
    endTime
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.vesting.v1beta1.BaseVestingAccount])
}
