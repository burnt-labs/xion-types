// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.distribution.v1beta1

/** QueryDelegationTotalRewardsResponse is the response type for the
  * Query/DelegationTotalRewards RPC method.
  *
  * @param rewards
  *   rewards defines all the rewards accrued by a delegator.
  * @param total
  *   total defines the sum of all the rewards.
  */
@SerialVersionUID(0L)
final case class QueryDelegationTotalRewardsResponse(
    rewards: _root_.scala.Seq[cosmos.distribution.v1beta1.DelegationDelegatorReward] = _root_.scala.Seq.empty,
    total: _root_.scala.Seq[cosmos.base.v1beta1.DecCoin] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[QueryDelegationTotalRewardsResponse] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      rewards.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      total.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      rewards.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      total.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def clearRewards = copy(rewards = _root_.scala.Seq.empty)
    def addRewards(__vs: cosmos.distribution.v1beta1.DelegationDelegatorReward *): QueryDelegationTotalRewardsResponse = addAllRewards(__vs)
    def addAllRewards(__vs: Iterable[cosmos.distribution.v1beta1.DelegationDelegatorReward]): QueryDelegationTotalRewardsResponse = copy(rewards = rewards ++ __vs)
    def withRewards(__v: _root_.scala.Seq[cosmos.distribution.v1beta1.DelegationDelegatorReward]): QueryDelegationTotalRewardsResponse = copy(rewards = __v)
    def clearTotal = copy(total = _root_.scala.Seq.empty)
    def addTotal(__vs: cosmos.base.v1beta1.DecCoin *): QueryDelegationTotalRewardsResponse = addAllTotal(__vs)
    def addAllTotal(__vs: Iterable[cosmos.base.v1beta1.DecCoin]): QueryDelegationTotalRewardsResponse = copy(total = total ++ __vs)
    def withTotal(__v: _root_.scala.Seq[cosmos.base.v1beta1.DecCoin]): QueryDelegationTotalRewardsResponse = copy(total = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => rewards
        case 2 => total
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(rewards.iterator.map(_.toPMessage).toVector)
        case 2 => _root_.scalapb.descriptors.PRepeated(total.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse.type = cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse
    // @@protoc_insertion_point(GeneratedMessage[cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse])
}

object QueryDelegationTotalRewardsResponse extends scalapb.GeneratedMessageCompanion[cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse = {
    val __rewards: _root_.scala.collection.immutable.VectorBuilder[cosmos.distribution.v1beta1.DelegationDelegatorReward] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.distribution.v1beta1.DelegationDelegatorReward]
    val __total: _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.DecCoin] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.DecCoin]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __rewards += _root_.scalapb.LiteParser.readMessage[cosmos.distribution.v1beta1.DelegationDelegatorReward](_input__)
        case 18 =>
          __total += _root_.scalapb.LiteParser.readMessage[cosmos.base.v1beta1.DecCoin](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse(
        rewards = __rewards.result(),
        total = __total.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse(
        rewards = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[cosmos.distribution.v1beta1.DelegationDelegatorReward]]).getOrElse(_root_.scala.Seq.empty),
        total = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[cosmos.base.v1beta1.DecCoin]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.distribution.v1beta1.QueryProto.javaDescriptor.getMessageTypes().get(13)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.distribution.v1beta1.QueryProto.scalaDescriptor.messages(13)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = cosmos.distribution.v1beta1.DelegationDelegatorReward
      case 2 => __out = cosmos.base.v1beta1.DecCoin
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse(
    rewards = _root_.scala.Seq.empty,
    total = _root_.scala.Seq.empty
  )
  implicit class QueryDelegationTotalRewardsResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse](_l) {
    def rewards: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.distribution.v1beta1.DelegationDelegatorReward]] = field(_.rewards)((c_, f_) => c_.copy(rewards = f_))
    def total: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.base.v1beta1.DecCoin]] = field(_.total)((c_, f_) => c_.copy(total = f_))
  }
  final val REWARDS_FIELD_NUMBER = 1
  final val TOTAL_FIELD_NUMBER = 2
  def of(
    rewards: _root_.scala.Seq[cosmos.distribution.v1beta1.DelegationDelegatorReward],
    total: _root_.scala.Seq[cosmos.base.v1beta1.DecCoin]
  ): _root_.cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse = _root_.cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse(
    rewards,
    total
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse])
}
