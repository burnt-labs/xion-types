// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.distribution.v1beta1

/** QueryValidatorDistributionInfoResponse is the response type for the Query/ValidatorDistributionInfo RPC method.
  *
  * @param operatorAddress
  *   operator_address defines the validator operator address.
  * @param selfBondRewards
  *   self_bond_rewards defines the self delegations rewards.
  * @param commission
  *   commission defines the commission the validator received.
  */
@SerialVersionUID(0L)
final case class QueryValidatorDistributionInfoResponse(
    operatorAddress: _root_.scala.Predef.String = "",
    selfBondRewards: _root_.scala.Seq[cosmos.base.v1beta1.DecCoin] = _root_.scala.Seq.empty,
    commission: _root_.scala.Seq[cosmos.base.v1beta1.DecCoin] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[QueryValidatorDistributionInfoResponse] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = operatorAddress
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      selfBondRewards.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      commission.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = operatorAddress
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      selfBondRewards.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      commission.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withOperatorAddress(__v: _root_.scala.Predef.String): QueryValidatorDistributionInfoResponse = copy(operatorAddress = __v)
    def clearSelfBondRewards = copy(selfBondRewards = _root_.scala.Seq.empty)
    def addSelfBondRewards(__vs: cosmos.base.v1beta1.DecCoin *): QueryValidatorDistributionInfoResponse = addAllSelfBondRewards(__vs)
    def addAllSelfBondRewards(__vs: Iterable[cosmos.base.v1beta1.DecCoin]): QueryValidatorDistributionInfoResponse = copy(selfBondRewards = selfBondRewards ++ __vs)
    def withSelfBondRewards(__v: _root_.scala.Seq[cosmos.base.v1beta1.DecCoin]): QueryValidatorDistributionInfoResponse = copy(selfBondRewards = __v)
    def clearCommission = copy(commission = _root_.scala.Seq.empty)
    def addCommission(__vs: cosmos.base.v1beta1.DecCoin *): QueryValidatorDistributionInfoResponse = addAllCommission(__vs)
    def addAllCommission(__vs: Iterable[cosmos.base.v1beta1.DecCoin]): QueryValidatorDistributionInfoResponse = copy(commission = commission ++ __vs)
    def withCommission(__v: _root_.scala.Seq[cosmos.base.v1beta1.DecCoin]): QueryValidatorDistributionInfoResponse = copy(commission = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = operatorAddress
          if (__t != "") __t else null
        }
        case 2 => selfBondRewards
        case 3 => commission
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(operatorAddress)
        case 2 => _root_.scalapb.descriptors.PRepeated(selfBondRewards.iterator.map(_.toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PRepeated(commission.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.distribution.v1beta1.QueryValidatorDistributionInfoResponse.type = cosmos.distribution.v1beta1.QueryValidatorDistributionInfoResponse
    // @@protoc_insertion_point(GeneratedMessage[cosmos.distribution.v1beta1.QueryValidatorDistributionInfoResponse])
}

object QueryValidatorDistributionInfoResponse extends scalapb.GeneratedMessageCompanion[cosmos.distribution.v1beta1.QueryValidatorDistributionInfoResponse] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.distribution.v1beta1.QueryValidatorDistributionInfoResponse] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.distribution.v1beta1.QueryValidatorDistributionInfoResponse = {
    var __operatorAddress: _root_.scala.Predef.String = ""
    val __selfBondRewards: _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.DecCoin] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.DecCoin]
    val __commission: _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.DecCoin] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.DecCoin]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __operatorAddress = _input__.readStringRequireUtf8()
        case 18 =>
          __selfBondRewards += _root_.scalapb.LiteParser.readMessage[cosmos.base.v1beta1.DecCoin](_input__)
        case 26 =>
          __commission += _root_.scalapb.LiteParser.readMessage[cosmos.base.v1beta1.DecCoin](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.distribution.v1beta1.QueryValidatorDistributionInfoResponse(
        operatorAddress = __operatorAddress,
        selfBondRewards = __selfBondRewards.result(),
        commission = __commission.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.distribution.v1beta1.QueryValidatorDistributionInfoResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.distribution.v1beta1.QueryValidatorDistributionInfoResponse(
        operatorAddress = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        selfBondRewards = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[cosmos.base.v1beta1.DecCoin]]).getOrElse(_root_.scala.Seq.empty),
        commission = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[cosmos.base.v1beta1.DecCoin]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.distribution.v1beta1.QueryProto.javaDescriptor.getMessageTypes().get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.distribution.v1beta1.QueryProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = cosmos.base.v1beta1.DecCoin
      case 3 => __out = cosmos.base.v1beta1.DecCoin
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.distribution.v1beta1.QueryValidatorDistributionInfoResponse(
    operatorAddress = "",
    selfBondRewards = _root_.scala.Seq.empty,
    commission = _root_.scala.Seq.empty
  )
  implicit class QueryValidatorDistributionInfoResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.distribution.v1beta1.QueryValidatorDistributionInfoResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.distribution.v1beta1.QueryValidatorDistributionInfoResponse](_l) {
    def operatorAddress: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.operatorAddress)((c_, f_) => c_.copy(operatorAddress = f_))
    def selfBondRewards: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.base.v1beta1.DecCoin]] = field(_.selfBondRewards)((c_, f_) => c_.copy(selfBondRewards = f_))
    def commission: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.base.v1beta1.DecCoin]] = field(_.commission)((c_, f_) => c_.copy(commission = f_))
  }
  final val OPERATOR_ADDRESS_FIELD_NUMBER = 1
  final val SELF_BOND_REWARDS_FIELD_NUMBER = 2
  final val COMMISSION_FIELD_NUMBER = 3
  def of(
    operatorAddress: _root_.scala.Predef.String,
    selfBondRewards: _root_.scala.Seq[cosmos.base.v1beta1.DecCoin],
    commission: _root_.scala.Seq[cosmos.base.v1beta1.DecCoin]
  ): _root_.cosmos.distribution.v1beta1.QueryValidatorDistributionInfoResponse = _root_.cosmos.distribution.v1beta1.QueryValidatorDistributionInfoResponse(
    operatorAddress,
    selfBondRewards,
    commission
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.distribution.v1beta1.QueryValidatorDistributionInfoResponse])
}
