// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.distribution.v1beta1

/** GenesisState defines the distribution module's genesis state.
  *
  * @param params
  *   params defines all the parameters of the module.
  * @param feePool
  *   fee_pool defines the fee pool at genesis.
  * @param delegatorWithdrawInfos
  *   fee_pool defines the delegator withdraw infos at genesis.
  * @param previousProposer
  *   fee_pool defines the previous proposer at genesis.
  * @param outstandingRewards
  *   fee_pool defines the outstanding rewards of all validators at genesis.
  * @param validatorAccumulatedCommissions
  *   fee_pool defines the accumulated commissions of all validators at genesis.
  * @param validatorHistoricalRewards
  *   fee_pool defines the historical rewards of all validators at genesis.
  * @param validatorCurrentRewards
  *   fee_pool defines the current rewards of all validators at genesis.
  * @param delegatorStartingInfos
  *   fee_pool defines the delegator starting infos at genesis.
  * @param validatorSlashEvents
  *   fee_pool defines the validator slash events at genesis.
  */
@SerialVersionUID(0L)
final case class GenesisState(
    params: _root_.scala.Option[cosmos.distribution.v1beta1.Params] = _root_.scala.None,
    feePool: _root_.scala.Option[cosmos.distribution.v1beta1.FeePool] = _root_.scala.None,
    delegatorWithdrawInfos: _root_.scala.Seq[cosmos.distribution.v1beta1.DelegatorWithdrawInfo] = _root_.scala.Seq.empty,
    previousProposer: _root_.scala.Predef.String = "",
    outstandingRewards: _root_.scala.Seq[cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord] = _root_.scala.Seq.empty,
    validatorAccumulatedCommissions: _root_.scala.Seq[cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord] = _root_.scala.Seq.empty,
    validatorHistoricalRewards: _root_.scala.Seq[cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord] = _root_.scala.Seq.empty,
    validatorCurrentRewards: _root_.scala.Seq[cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord] = _root_.scala.Seq.empty,
    delegatorStartingInfos: _root_.scala.Seq[cosmos.distribution.v1beta1.DelegatorStartingInfoRecord] = _root_.scala.Seq.empty,
    validatorSlashEvents: _root_.scala.Seq[cosmos.distribution.v1beta1.ValidatorSlashEventRecord] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[GenesisState] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (params.isDefined) {
        val __value = params.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (feePool.isDefined) {
        val __value = feePool.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      delegatorWithdrawInfos.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = previousProposer
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      outstandingRewards.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      validatorAccumulatedCommissions.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      validatorHistoricalRewards.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      validatorCurrentRewards.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      delegatorStartingInfos.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      validatorSlashEvents.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      params.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      feePool.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      delegatorWithdrawInfos.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = previousProposer
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      outstandingRewards.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      validatorAccumulatedCommissions.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      validatorHistoricalRewards.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      validatorCurrentRewards.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      delegatorStartingInfos.foreach { __v =>
        val __m = __v
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      validatorSlashEvents.foreach { __v =>
        val __m = __v
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getParams: cosmos.distribution.v1beta1.Params = params.getOrElse(cosmos.distribution.v1beta1.Params.defaultInstance)
    def clearParams: GenesisState = copy(params = _root_.scala.None)
    def withParams(__v: cosmos.distribution.v1beta1.Params): GenesisState = copy(params = Option(__v))
    def getFeePool: cosmos.distribution.v1beta1.FeePool = feePool.getOrElse(cosmos.distribution.v1beta1.FeePool.defaultInstance)
    def clearFeePool: GenesisState = copy(feePool = _root_.scala.None)
    def withFeePool(__v: cosmos.distribution.v1beta1.FeePool): GenesisState = copy(feePool = Option(__v))
    def clearDelegatorWithdrawInfos = copy(delegatorWithdrawInfos = _root_.scala.Seq.empty)
    def addDelegatorWithdrawInfos(__vs: cosmos.distribution.v1beta1.DelegatorWithdrawInfo *): GenesisState = addAllDelegatorWithdrawInfos(__vs)
    def addAllDelegatorWithdrawInfos(__vs: Iterable[cosmos.distribution.v1beta1.DelegatorWithdrawInfo]): GenesisState = copy(delegatorWithdrawInfos = delegatorWithdrawInfos ++ __vs)
    def withDelegatorWithdrawInfos(__v: _root_.scala.Seq[cosmos.distribution.v1beta1.DelegatorWithdrawInfo]): GenesisState = copy(delegatorWithdrawInfos = __v)
    def withPreviousProposer(__v: _root_.scala.Predef.String): GenesisState = copy(previousProposer = __v)
    def clearOutstandingRewards = copy(outstandingRewards = _root_.scala.Seq.empty)
    def addOutstandingRewards(__vs: cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord *): GenesisState = addAllOutstandingRewards(__vs)
    def addAllOutstandingRewards(__vs: Iterable[cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord]): GenesisState = copy(outstandingRewards = outstandingRewards ++ __vs)
    def withOutstandingRewards(__v: _root_.scala.Seq[cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord]): GenesisState = copy(outstandingRewards = __v)
    def clearValidatorAccumulatedCommissions = copy(validatorAccumulatedCommissions = _root_.scala.Seq.empty)
    def addValidatorAccumulatedCommissions(__vs: cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord *): GenesisState = addAllValidatorAccumulatedCommissions(__vs)
    def addAllValidatorAccumulatedCommissions(__vs: Iterable[cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord]): GenesisState = copy(validatorAccumulatedCommissions = validatorAccumulatedCommissions ++ __vs)
    def withValidatorAccumulatedCommissions(__v: _root_.scala.Seq[cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord]): GenesisState = copy(validatorAccumulatedCommissions = __v)
    def clearValidatorHistoricalRewards = copy(validatorHistoricalRewards = _root_.scala.Seq.empty)
    def addValidatorHistoricalRewards(__vs: cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord *): GenesisState = addAllValidatorHistoricalRewards(__vs)
    def addAllValidatorHistoricalRewards(__vs: Iterable[cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord]): GenesisState = copy(validatorHistoricalRewards = validatorHistoricalRewards ++ __vs)
    def withValidatorHistoricalRewards(__v: _root_.scala.Seq[cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord]): GenesisState = copy(validatorHistoricalRewards = __v)
    def clearValidatorCurrentRewards = copy(validatorCurrentRewards = _root_.scala.Seq.empty)
    def addValidatorCurrentRewards(__vs: cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord *): GenesisState = addAllValidatorCurrentRewards(__vs)
    def addAllValidatorCurrentRewards(__vs: Iterable[cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord]): GenesisState = copy(validatorCurrentRewards = validatorCurrentRewards ++ __vs)
    def withValidatorCurrentRewards(__v: _root_.scala.Seq[cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord]): GenesisState = copy(validatorCurrentRewards = __v)
    def clearDelegatorStartingInfos = copy(delegatorStartingInfos = _root_.scala.Seq.empty)
    def addDelegatorStartingInfos(__vs: cosmos.distribution.v1beta1.DelegatorStartingInfoRecord *): GenesisState = addAllDelegatorStartingInfos(__vs)
    def addAllDelegatorStartingInfos(__vs: Iterable[cosmos.distribution.v1beta1.DelegatorStartingInfoRecord]): GenesisState = copy(delegatorStartingInfos = delegatorStartingInfos ++ __vs)
    def withDelegatorStartingInfos(__v: _root_.scala.Seq[cosmos.distribution.v1beta1.DelegatorStartingInfoRecord]): GenesisState = copy(delegatorStartingInfos = __v)
    def clearValidatorSlashEvents = copy(validatorSlashEvents = _root_.scala.Seq.empty)
    def addValidatorSlashEvents(__vs: cosmos.distribution.v1beta1.ValidatorSlashEventRecord *): GenesisState = addAllValidatorSlashEvents(__vs)
    def addAllValidatorSlashEvents(__vs: Iterable[cosmos.distribution.v1beta1.ValidatorSlashEventRecord]): GenesisState = copy(validatorSlashEvents = validatorSlashEvents ++ __vs)
    def withValidatorSlashEvents(__v: _root_.scala.Seq[cosmos.distribution.v1beta1.ValidatorSlashEventRecord]): GenesisState = copy(validatorSlashEvents = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => params.orNull
        case 2 => feePool.orNull
        case 3 => delegatorWithdrawInfos
        case 4 => {
          val __t = previousProposer
          if (__t != "") __t else null
        }
        case 5 => outstandingRewards
        case 6 => validatorAccumulatedCommissions
        case 7 => validatorHistoricalRewards
        case 8 => validatorCurrentRewards
        case 9 => delegatorStartingInfos
        case 10 => validatorSlashEvents
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => params.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => feePool.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(delegatorWithdrawInfos.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PString(previousProposer)
        case 5 => _root_.scalapb.descriptors.PRepeated(outstandingRewards.iterator.map(_.toPMessage).toVector)
        case 6 => _root_.scalapb.descriptors.PRepeated(validatorAccumulatedCommissions.iterator.map(_.toPMessage).toVector)
        case 7 => _root_.scalapb.descriptors.PRepeated(validatorHistoricalRewards.iterator.map(_.toPMessage).toVector)
        case 8 => _root_.scalapb.descriptors.PRepeated(validatorCurrentRewards.iterator.map(_.toPMessage).toVector)
        case 9 => _root_.scalapb.descriptors.PRepeated(delegatorStartingInfos.iterator.map(_.toPMessage).toVector)
        case 10 => _root_.scalapb.descriptors.PRepeated(validatorSlashEvents.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.distribution.v1beta1.GenesisState.type = cosmos.distribution.v1beta1.GenesisState
    // @@protoc_insertion_point(GeneratedMessage[cosmos.distribution.v1beta1.GenesisState])
}

object GenesisState extends scalapb.GeneratedMessageCompanion[cosmos.distribution.v1beta1.GenesisState] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.distribution.v1beta1.GenesisState] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.distribution.v1beta1.GenesisState = {
    var __params: _root_.scala.Option[cosmos.distribution.v1beta1.Params] = _root_.scala.None
    var __feePool: _root_.scala.Option[cosmos.distribution.v1beta1.FeePool] = _root_.scala.None
    val __delegatorWithdrawInfos: _root_.scala.collection.immutable.VectorBuilder[cosmos.distribution.v1beta1.DelegatorWithdrawInfo] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.distribution.v1beta1.DelegatorWithdrawInfo]
    var __previousProposer: _root_.scala.Predef.String = ""
    val __outstandingRewards: _root_.scala.collection.immutable.VectorBuilder[cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord]
    val __validatorAccumulatedCommissions: _root_.scala.collection.immutable.VectorBuilder[cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord]
    val __validatorHistoricalRewards: _root_.scala.collection.immutable.VectorBuilder[cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord]
    val __validatorCurrentRewards: _root_.scala.collection.immutable.VectorBuilder[cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord]
    val __delegatorStartingInfos: _root_.scala.collection.immutable.VectorBuilder[cosmos.distribution.v1beta1.DelegatorStartingInfoRecord] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.distribution.v1beta1.DelegatorStartingInfoRecord]
    val __validatorSlashEvents: _root_.scala.collection.immutable.VectorBuilder[cosmos.distribution.v1beta1.ValidatorSlashEventRecord] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.distribution.v1beta1.ValidatorSlashEventRecord]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __params = _root_.scala.Option(__params.fold(_root_.scalapb.LiteParser.readMessage[cosmos.distribution.v1beta1.Params](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __feePool = _root_.scala.Option(__feePool.fold(_root_.scalapb.LiteParser.readMessage[cosmos.distribution.v1beta1.FeePool](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __delegatorWithdrawInfos += _root_.scalapb.LiteParser.readMessage[cosmos.distribution.v1beta1.DelegatorWithdrawInfo](_input__)
        case 34 =>
          __previousProposer = _input__.readStringRequireUtf8()
        case 42 =>
          __outstandingRewards += _root_.scalapb.LiteParser.readMessage[cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord](_input__)
        case 50 =>
          __validatorAccumulatedCommissions += _root_.scalapb.LiteParser.readMessage[cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord](_input__)
        case 58 =>
          __validatorHistoricalRewards += _root_.scalapb.LiteParser.readMessage[cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord](_input__)
        case 66 =>
          __validatorCurrentRewards += _root_.scalapb.LiteParser.readMessage[cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord](_input__)
        case 74 =>
          __delegatorStartingInfos += _root_.scalapb.LiteParser.readMessage[cosmos.distribution.v1beta1.DelegatorStartingInfoRecord](_input__)
        case 82 =>
          __validatorSlashEvents += _root_.scalapb.LiteParser.readMessage[cosmos.distribution.v1beta1.ValidatorSlashEventRecord](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.distribution.v1beta1.GenesisState(
        params = __params,
        feePool = __feePool,
        delegatorWithdrawInfos = __delegatorWithdrawInfos.result(),
        previousProposer = __previousProposer,
        outstandingRewards = __outstandingRewards.result(),
        validatorAccumulatedCommissions = __validatorAccumulatedCommissions.result(),
        validatorHistoricalRewards = __validatorHistoricalRewards.result(),
        validatorCurrentRewards = __validatorCurrentRewards.result(),
        delegatorStartingInfos = __delegatorStartingInfos.result(),
        validatorSlashEvents = __validatorSlashEvents.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.distribution.v1beta1.GenesisState] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.distribution.v1beta1.GenesisState(
        params = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[cosmos.distribution.v1beta1.Params]]),
        feePool = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[cosmos.distribution.v1beta1.FeePool]]),
        delegatorWithdrawInfos = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[cosmos.distribution.v1beta1.DelegatorWithdrawInfo]]).getOrElse(_root_.scala.Seq.empty),
        previousProposer = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        outstandingRewards = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord]]).getOrElse(_root_.scala.Seq.empty),
        validatorAccumulatedCommissions = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord]]).getOrElse(_root_.scala.Seq.empty),
        validatorHistoricalRewards = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord]]).getOrElse(_root_.scala.Seq.empty),
        validatorCurrentRewards = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Seq[cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord]]).getOrElse(_root_.scala.Seq.empty),
        delegatorStartingInfos = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Seq[cosmos.distribution.v1beta1.DelegatorStartingInfoRecord]]).getOrElse(_root_.scala.Seq.empty),
        validatorSlashEvents = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Seq[cosmos.distribution.v1beta1.ValidatorSlashEventRecord]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.distribution.v1beta1.GenesisProto.javaDescriptor.getMessageTypes().get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.distribution.v1beta1.GenesisProto.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = cosmos.distribution.v1beta1.Params
      case 2 => __out = cosmos.distribution.v1beta1.FeePool
      case 3 => __out = cosmos.distribution.v1beta1.DelegatorWithdrawInfo
      case 5 => __out = cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord
      case 6 => __out = cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord
      case 7 => __out = cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord
      case 8 => __out = cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord
      case 9 => __out = cosmos.distribution.v1beta1.DelegatorStartingInfoRecord
      case 10 => __out = cosmos.distribution.v1beta1.ValidatorSlashEventRecord
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.distribution.v1beta1.GenesisState(
    params = _root_.scala.None,
    feePool = _root_.scala.None,
    delegatorWithdrawInfos = _root_.scala.Seq.empty,
    previousProposer = "",
    outstandingRewards = _root_.scala.Seq.empty,
    validatorAccumulatedCommissions = _root_.scala.Seq.empty,
    validatorHistoricalRewards = _root_.scala.Seq.empty,
    validatorCurrentRewards = _root_.scala.Seq.empty,
    delegatorStartingInfos = _root_.scala.Seq.empty,
    validatorSlashEvents = _root_.scala.Seq.empty
  )
  implicit class GenesisStateLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.distribution.v1beta1.GenesisState]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.distribution.v1beta1.GenesisState](_l) {
    def params: _root_.scalapb.lenses.Lens[UpperPB, cosmos.distribution.v1beta1.Params] = field(_.getParams)((c_, f_) => c_.copy(params = _root_.scala.Option(f_)))
    def optionalParams: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[cosmos.distribution.v1beta1.Params]] = field(_.params)((c_, f_) => c_.copy(params = f_))
    def feePool: _root_.scalapb.lenses.Lens[UpperPB, cosmos.distribution.v1beta1.FeePool] = field(_.getFeePool)((c_, f_) => c_.copy(feePool = _root_.scala.Option(f_)))
    def optionalFeePool: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[cosmos.distribution.v1beta1.FeePool]] = field(_.feePool)((c_, f_) => c_.copy(feePool = f_))
    def delegatorWithdrawInfos: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.distribution.v1beta1.DelegatorWithdrawInfo]] = field(_.delegatorWithdrawInfos)((c_, f_) => c_.copy(delegatorWithdrawInfos = f_))
    def previousProposer: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.previousProposer)((c_, f_) => c_.copy(previousProposer = f_))
    def outstandingRewards: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord]] = field(_.outstandingRewards)((c_, f_) => c_.copy(outstandingRewards = f_))
    def validatorAccumulatedCommissions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord]] = field(_.validatorAccumulatedCommissions)((c_, f_) => c_.copy(validatorAccumulatedCommissions = f_))
    def validatorHistoricalRewards: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord]] = field(_.validatorHistoricalRewards)((c_, f_) => c_.copy(validatorHistoricalRewards = f_))
    def validatorCurrentRewards: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord]] = field(_.validatorCurrentRewards)((c_, f_) => c_.copy(validatorCurrentRewards = f_))
    def delegatorStartingInfos: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.distribution.v1beta1.DelegatorStartingInfoRecord]] = field(_.delegatorStartingInfos)((c_, f_) => c_.copy(delegatorStartingInfos = f_))
    def validatorSlashEvents: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.distribution.v1beta1.ValidatorSlashEventRecord]] = field(_.validatorSlashEvents)((c_, f_) => c_.copy(validatorSlashEvents = f_))
  }
  final val PARAMS_FIELD_NUMBER = 1
  final val FEE_POOL_FIELD_NUMBER = 2
  final val DELEGATOR_WITHDRAW_INFOS_FIELD_NUMBER = 3
  final val PREVIOUS_PROPOSER_FIELD_NUMBER = 4
  final val OUTSTANDING_REWARDS_FIELD_NUMBER = 5
  final val VALIDATOR_ACCUMULATED_COMMISSIONS_FIELD_NUMBER = 6
  final val VALIDATOR_HISTORICAL_REWARDS_FIELD_NUMBER = 7
  final val VALIDATOR_CURRENT_REWARDS_FIELD_NUMBER = 8
  final val DELEGATOR_STARTING_INFOS_FIELD_NUMBER = 9
  final val VALIDATOR_SLASH_EVENTS_FIELD_NUMBER = 10
  def of(
    params: _root_.scala.Option[cosmos.distribution.v1beta1.Params],
    feePool: _root_.scala.Option[cosmos.distribution.v1beta1.FeePool],
    delegatorWithdrawInfos: _root_.scala.Seq[cosmos.distribution.v1beta1.DelegatorWithdrawInfo],
    previousProposer: _root_.scala.Predef.String,
    outstandingRewards: _root_.scala.Seq[cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord],
    validatorAccumulatedCommissions: _root_.scala.Seq[cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord],
    validatorHistoricalRewards: _root_.scala.Seq[cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord],
    validatorCurrentRewards: _root_.scala.Seq[cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord],
    delegatorStartingInfos: _root_.scala.Seq[cosmos.distribution.v1beta1.DelegatorStartingInfoRecord],
    validatorSlashEvents: _root_.scala.Seq[cosmos.distribution.v1beta1.ValidatorSlashEventRecord]
  ): _root_.cosmos.distribution.v1beta1.GenesisState = _root_.cosmos.distribution.v1beta1.GenesisState(
    params,
    feePool,
    delegatorWithdrawInfos,
    previousProposer,
    outstandingRewards,
    validatorAccumulatedCommissions,
    validatorHistoricalRewards,
    validatorCurrentRewards,
    delegatorStartingInfos,
    validatorSlashEvents
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.distribution.v1beta1.GenesisState])
}
