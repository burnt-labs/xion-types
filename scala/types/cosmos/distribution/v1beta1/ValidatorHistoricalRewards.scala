// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.distribution.v1beta1

/** ValidatorHistoricalRewards represents historical rewards for a validator.
  * Height is implicit within the store key.
  * Cumulative reward ratio is the sum from the zeroeth period
  * until this period of rewards / tokens, per the spec.
  * The reference count indicates the number of objects
  * which might need to reference this historical entry at any point.
  * ReferenceCount =
  *    number of outstanding delegations which ended the associated period (and
  *    might need to read that record)
  *  + number of slashes which ended the associated period (and might need to
  *  read that record)
  *  + one per validator for the zeroeth period, set on initialization
  */
@SerialVersionUID(0L)
final case class ValidatorHistoricalRewards(
    cumulativeRewardRatio: _root_.scala.Seq[cosmos.base.v1beta1.DecCoin] = _root_.scala.Seq.empty,
    referenceCount: _root_.scala.Int = 0,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ValidatorHistoricalRewards] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      cumulativeRewardRatio.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = referenceCount
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      cumulativeRewardRatio.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = referenceCount
        if (__v != 0) {
          _output__.writeUInt32(2, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def clearCumulativeRewardRatio = copy(cumulativeRewardRatio = _root_.scala.Seq.empty)
    def addCumulativeRewardRatio(__vs: cosmos.base.v1beta1.DecCoin *): ValidatorHistoricalRewards = addAllCumulativeRewardRatio(__vs)
    def addAllCumulativeRewardRatio(__vs: Iterable[cosmos.base.v1beta1.DecCoin]): ValidatorHistoricalRewards = copy(cumulativeRewardRatio = cumulativeRewardRatio ++ __vs)
    def withCumulativeRewardRatio(__v: _root_.scala.Seq[cosmos.base.v1beta1.DecCoin]): ValidatorHistoricalRewards = copy(cumulativeRewardRatio = __v)
    def withReferenceCount(__v: _root_.scala.Int): ValidatorHistoricalRewards = copy(referenceCount = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => cumulativeRewardRatio
        case 2 => {
          val __t = referenceCount
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(cumulativeRewardRatio.iterator.map(_.toPMessage).toVector)
        case 2 => _root_.scalapb.descriptors.PInt(referenceCount)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.distribution.v1beta1.ValidatorHistoricalRewards.type = cosmos.distribution.v1beta1.ValidatorHistoricalRewards
    // @@protoc_insertion_point(GeneratedMessage[cosmos.distribution.v1beta1.ValidatorHistoricalRewards])
}

object ValidatorHistoricalRewards extends scalapb.GeneratedMessageCompanion[cosmos.distribution.v1beta1.ValidatorHistoricalRewards] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.distribution.v1beta1.ValidatorHistoricalRewards] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.distribution.v1beta1.ValidatorHistoricalRewards = {
    val __cumulativeRewardRatio: _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.DecCoin] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.DecCoin]
    var __referenceCount: _root_.scala.Int = 0
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __cumulativeRewardRatio += _root_.scalapb.LiteParser.readMessage[cosmos.base.v1beta1.DecCoin](_input__)
        case 16 =>
          __referenceCount = _input__.readUInt32()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.distribution.v1beta1.ValidatorHistoricalRewards(
        cumulativeRewardRatio = __cumulativeRewardRatio.result(),
        referenceCount = __referenceCount,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.distribution.v1beta1.ValidatorHistoricalRewards] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.distribution.v1beta1.ValidatorHistoricalRewards(
        cumulativeRewardRatio = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[cosmos.base.v1beta1.DecCoin]]).getOrElse(_root_.scala.Seq.empty),
        referenceCount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.distribution.v1beta1.DistributionProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.distribution.v1beta1.DistributionProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = cosmos.base.v1beta1.DecCoin
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.distribution.v1beta1.ValidatorHistoricalRewards(
    cumulativeRewardRatio = _root_.scala.Seq.empty,
    referenceCount = 0
  )
  implicit class ValidatorHistoricalRewardsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.distribution.v1beta1.ValidatorHistoricalRewards]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.distribution.v1beta1.ValidatorHistoricalRewards](_l) {
    def cumulativeRewardRatio: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.base.v1beta1.DecCoin]] = field(_.cumulativeRewardRatio)((c_, f_) => c_.copy(cumulativeRewardRatio = f_))
    def referenceCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.referenceCount)((c_, f_) => c_.copy(referenceCount = f_))
  }
  final val CUMULATIVE_REWARD_RATIO_FIELD_NUMBER = 1
  final val REFERENCE_COUNT_FIELD_NUMBER = 2
  def of(
    cumulativeRewardRatio: _root_.scala.Seq[cosmos.base.v1beta1.DecCoin],
    referenceCount: _root_.scala.Int
  ): _root_.cosmos.distribution.v1beta1.ValidatorHistoricalRewards = _root_.cosmos.distribution.v1beta1.ValidatorHistoricalRewards(
    cumulativeRewardRatio,
    referenceCount
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.distribution.v1beta1.ValidatorHistoricalRewards])
}
