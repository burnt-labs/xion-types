// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.autocli.v1

/** FlagOptions are options for flags generated from rpc request fields.
  * By default, all request fields are configured as flags based on the
  * kebab-case name of the field. Fields can be turned into positional arguments
  * instead by using RpcCommandOptions.positional_args.
  *
  * @param name
  *   name is an alternate name to use for the field flag.
  * @param shorthand
  *   shorthand is a one-letter abbreviated flag.
  * @param usage
  *   usage is the help message.
  * @param defaultValue
  *   default_value is the default value as text.
  * @param deprecated
  *   deprecated is the usage text to show if this flag is deprecated.
  * @param shorthandDeprecated
  *   shorthand_deprecated is the usage text to show if the shorthand of this flag is deprecated.
  * @param hidden
  *   hidden hides the flag from help/usage text
  */
@SerialVersionUID(0L)
final case class FlagOptions(
    name: _root_.scala.Predef.String = "",
    shorthand: _root_.scala.Predef.String = "",
    usage: _root_.scala.Predef.String = "",
    defaultValue: _root_.scala.Predef.String = "",
    deprecated: _root_.scala.Predef.String = "",
    shorthandDeprecated: _root_.scala.Predef.String = "",
    hidden: _root_.scala.Boolean = false,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[FlagOptions] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = name
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = shorthand
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = usage
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = defaultValue
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = deprecated
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
        }
      };
      
      {
        val __value = shorthandDeprecated
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
        }
      };
      
      {
        val __value = hidden
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(8, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = name
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = shorthand
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = usage
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = defaultValue
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = deprecated
        if (!__v.isEmpty) {
          _output__.writeString(6, __v)
        }
      };
      {
        val __v = shorthandDeprecated
        if (!__v.isEmpty) {
          _output__.writeString(7, __v)
        }
      };
      {
        val __v = hidden
        if (__v != false) {
          _output__.writeBool(8, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withName(__v: _root_.scala.Predef.String): FlagOptions = copy(name = __v)
    def withShorthand(__v: _root_.scala.Predef.String): FlagOptions = copy(shorthand = __v)
    def withUsage(__v: _root_.scala.Predef.String): FlagOptions = copy(usage = __v)
    def withDefaultValue(__v: _root_.scala.Predef.String): FlagOptions = copy(defaultValue = __v)
    def withDeprecated(__v: _root_.scala.Predef.String): FlagOptions = copy(deprecated = __v)
    def withShorthandDeprecated(__v: _root_.scala.Predef.String): FlagOptions = copy(shorthandDeprecated = __v)
    def withHidden(__v: _root_.scala.Boolean): FlagOptions = copy(hidden = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = shorthand
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = usage
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = defaultValue
          if (__t != "") __t else null
        }
        case 6 => {
          val __t = deprecated
          if (__t != "") __t else null
        }
        case 7 => {
          val __t = shorthandDeprecated
          if (__t != "") __t else null
        }
        case 8 => {
          val __t = hidden
          if (__t != false) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(name)
        case 2 => _root_.scalapb.descriptors.PString(shorthand)
        case 3 => _root_.scalapb.descriptors.PString(usage)
        case 4 => _root_.scalapb.descriptors.PString(defaultValue)
        case 6 => _root_.scalapb.descriptors.PString(deprecated)
        case 7 => _root_.scalapb.descriptors.PString(shorthandDeprecated)
        case 8 => _root_.scalapb.descriptors.PBoolean(hidden)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.autocli.v1.FlagOptions.type = cosmos.autocli.v1.FlagOptions
    // @@protoc_insertion_point(GeneratedMessage[cosmos.autocli.v1.FlagOptions])
}

object FlagOptions extends scalapb.GeneratedMessageCompanion[cosmos.autocli.v1.FlagOptions] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.autocli.v1.FlagOptions] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.autocli.v1.FlagOptions = {
    var __name: _root_.scala.Predef.String = ""
    var __shorthand: _root_.scala.Predef.String = ""
    var __usage: _root_.scala.Predef.String = ""
    var __defaultValue: _root_.scala.Predef.String = ""
    var __deprecated: _root_.scala.Predef.String = ""
    var __shorthandDeprecated: _root_.scala.Predef.String = ""
    var __hidden: _root_.scala.Boolean = false
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __name = _input__.readStringRequireUtf8()
        case 18 =>
          __shorthand = _input__.readStringRequireUtf8()
        case 26 =>
          __usage = _input__.readStringRequireUtf8()
        case 34 =>
          __defaultValue = _input__.readStringRequireUtf8()
        case 50 =>
          __deprecated = _input__.readStringRequireUtf8()
        case 58 =>
          __shorthandDeprecated = _input__.readStringRequireUtf8()
        case 64 =>
          __hidden = _input__.readBool()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.autocli.v1.FlagOptions(
        name = __name,
        shorthand = __shorthand,
        usage = __usage,
        defaultValue = __defaultValue,
        deprecated = __deprecated,
        shorthandDeprecated = __shorthandDeprecated,
        hidden = __hidden,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.autocli.v1.FlagOptions] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.autocli.v1.FlagOptions(
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        shorthand = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        usage = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        defaultValue = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        deprecated = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        shorthandDeprecated = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        hidden = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.autocli.v1.OptionsProto.javaDescriptor.getMessageTypes().get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.autocli.v1.OptionsProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.autocli.v1.FlagOptions(
    name = "",
    shorthand = "",
    usage = "",
    defaultValue = "",
    deprecated = "",
    shorthandDeprecated = "",
    hidden = false
  )
  implicit class FlagOptionsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.autocli.v1.FlagOptions]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.autocli.v1.FlagOptions](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def shorthand: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.shorthand)((c_, f_) => c_.copy(shorthand = f_))
    def usage: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.usage)((c_, f_) => c_.copy(usage = f_))
    def defaultValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.defaultValue)((c_, f_) => c_.copy(defaultValue = f_))
    def deprecated: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.deprecated)((c_, f_) => c_.copy(deprecated = f_))
    def shorthandDeprecated: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.shorthandDeprecated)((c_, f_) => c_.copy(shorthandDeprecated = f_))
    def hidden: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.hidden)((c_, f_) => c_.copy(hidden = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val SHORTHAND_FIELD_NUMBER = 2
  final val USAGE_FIELD_NUMBER = 3
  final val DEFAULT_VALUE_FIELD_NUMBER = 4
  final val DEPRECATED_FIELD_NUMBER = 6
  final val SHORTHAND_DEPRECATED_FIELD_NUMBER = 7
  final val HIDDEN_FIELD_NUMBER = 8
  def of(
    name: _root_.scala.Predef.String,
    shorthand: _root_.scala.Predef.String,
    usage: _root_.scala.Predef.String,
    defaultValue: _root_.scala.Predef.String,
    deprecated: _root_.scala.Predef.String,
    shorthandDeprecated: _root_.scala.Predef.String,
    hidden: _root_.scala.Boolean
  ): _root_.cosmos.autocli.v1.FlagOptions = _root_.cosmos.autocli.v1.FlagOptions(
    name,
    shorthand,
    usage,
    defaultValue,
    deprecated,
    shorthandDeprecated,
    hidden
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.autocli.v1.FlagOptions])
}
