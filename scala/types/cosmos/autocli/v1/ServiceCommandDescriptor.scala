// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.autocli.v1

/** ServiceCommandDescriptor describes a CLI command based on a protobuf service.
  *
  * @param service
  *   service is the fully qualified name of the protobuf service to build
  *   the command from. It can be left empty if sub_commands are used instead
  *   which may be the case if a module provides multiple tx and/or query services.
  * @param rpcCommandOptions
  *   rpc_command_options are options for commands generated from rpc methods.
  *   If no options are specified for a given rpc method on the service, a
  *   command will be generated for that method with the default options.
  * @param subCommands
  *   sub_commands is a map of optional sub-commands for this command based on
  *   different protobuf services. The map key is used as the name of the
  *   sub-command.
  * @param enhanceCustomCommand
  *   enhance_custom_commands specifies whether to skip the service when generating commands, if a custom command already
  *   exists, or enhance the existing command. If set to true, the custom command will be enhanced with the services from
  *   gRPC. otherwise when a custom command exists, no commands will be generated for the service.
  * @param short
  *   short is an optional parameter used to override the short description of the auto generated command.
  */
@SerialVersionUID(0L)
final case class ServiceCommandDescriptor(
    service: _root_.scala.Predef.String = "",
    rpcCommandOptions: _root_.scala.Seq[cosmos.autocli.v1.RpcCommandOptions] = _root_.scala.Seq.empty,
    subCommands: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, cosmos.autocli.v1.ServiceCommandDescriptor] = _root_.scala.collection.immutable.Map.empty,
    enhanceCustomCommand: _root_.scala.Boolean = false,
    short: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ServiceCommandDescriptor] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = service
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      rpcCommandOptions.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      subCommands.foreach { __item =>
        val __value = cosmos.autocli.v1.ServiceCommandDescriptor._typemapper_subCommands.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = enhanceCustomCommand
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(4, __value)
        }
      };
      
      {
        val __value = short
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = service
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      rpcCommandOptions.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      subCommands.foreach { __v =>
        val __m = cosmos.autocli.v1.ServiceCommandDescriptor._typemapper_subCommands.toBase(__v)
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = enhanceCustomCommand
        if (__v != false) {
          _output__.writeBool(4, __v)
        }
      };
      {
        val __v = short
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withService(__v: _root_.scala.Predef.String): ServiceCommandDescriptor = copy(service = __v)
    def clearRpcCommandOptions = copy(rpcCommandOptions = _root_.scala.Seq.empty)
    def addRpcCommandOptions(__vs: cosmos.autocli.v1.RpcCommandOptions *): ServiceCommandDescriptor = addAllRpcCommandOptions(__vs)
    def addAllRpcCommandOptions(__vs: Iterable[cosmos.autocli.v1.RpcCommandOptions]): ServiceCommandDescriptor = copy(rpcCommandOptions = rpcCommandOptions ++ __vs)
    def withRpcCommandOptions(__v: _root_.scala.Seq[cosmos.autocli.v1.RpcCommandOptions]): ServiceCommandDescriptor = copy(rpcCommandOptions = __v)
    def clearSubCommands = copy(subCommands = _root_.scala.collection.immutable.Map.empty)
    def addSubCommands(__vs: (_root_.scala.Predef.String, cosmos.autocli.v1.ServiceCommandDescriptor) *): ServiceCommandDescriptor = addAllSubCommands(__vs)
    def addAllSubCommands(__vs: Iterable[(_root_.scala.Predef.String, cosmos.autocli.v1.ServiceCommandDescriptor)]): ServiceCommandDescriptor = copy(subCommands = subCommands ++ __vs)
    def withSubCommands(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, cosmos.autocli.v1.ServiceCommandDescriptor]): ServiceCommandDescriptor = copy(subCommands = __v)
    def withEnhanceCustomCommand(__v: _root_.scala.Boolean): ServiceCommandDescriptor = copy(enhanceCustomCommand = __v)
    def withShort(__v: _root_.scala.Predef.String): ServiceCommandDescriptor = copy(short = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = service
          if (__t != "") __t else null
        }
        case 2 => rpcCommandOptions
        case 3 => subCommands.iterator.map(cosmos.autocli.v1.ServiceCommandDescriptor._typemapper_subCommands.toBase(_)).toSeq
        case 4 => {
          val __t = enhanceCustomCommand
          if (__t != false) __t else null
        }
        case 5 => {
          val __t = short
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(service)
        case 2 => _root_.scalapb.descriptors.PRepeated(rpcCommandOptions.iterator.map(_.toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PRepeated(subCommands.iterator.map(cosmos.autocli.v1.ServiceCommandDescriptor._typemapper_subCommands.toBase(_).toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PBoolean(enhanceCustomCommand)
        case 5 => _root_.scalapb.descriptors.PString(short)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.autocli.v1.ServiceCommandDescriptor.type = cosmos.autocli.v1.ServiceCommandDescriptor
    // @@protoc_insertion_point(GeneratedMessage[cosmos.autocli.v1.ServiceCommandDescriptor])
}

object ServiceCommandDescriptor extends scalapb.GeneratedMessageCompanion[cosmos.autocli.v1.ServiceCommandDescriptor] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.autocli.v1.ServiceCommandDescriptor] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.autocli.v1.ServiceCommandDescriptor = {
    var __service: _root_.scala.Predef.String = ""
    val __rpcCommandOptions: _root_.scala.collection.immutable.VectorBuilder[cosmos.autocli.v1.RpcCommandOptions] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.autocli.v1.RpcCommandOptions]
    val __subCommands: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, cosmos.autocli.v1.ServiceCommandDescriptor), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, cosmos.autocli.v1.ServiceCommandDescriptor]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, cosmos.autocli.v1.ServiceCommandDescriptor]
    var __enhanceCustomCommand: _root_.scala.Boolean = false
    var __short: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __service = _input__.readStringRequireUtf8()
        case 18 =>
          __rpcCommandOptions += _root_.scalapb.LiteParser.readMessage[cosmos.autocli.v1.RpcCommandOptions](_input__)
        case 26 =>
          __subCommands += cosmos.autocli.v1.ServiceCommandDescriptor._typemapper_subCommands.toCustom(_root_.scalapb.LiteParser.readMessage[cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry](_input__))
        case 32 =>
          __enhanceCustomCommand = _input__.readBool()
        case 42 =>
          __short = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.autocli.v1.ServiceCommandDescriptor(
        service = __service,
        rpcCommandOptions = __rpcCommandOptions.result(),
        subCommands = __subCommands.result(),
        enhanceCustomCommand = __enhanceCustomCommand,
        short = __short,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.autocli.v1.ServiceCommandDescriptor] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.autocli.v1.ServiceCommandDescriptor(
        service = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        rpcCommandOptions = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[cosmos.autocli.v1.RpcCommandOptions]]).getOrElse(_root_.scala.Seq.empty),
        subCommands = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(cosmos.autocli.v1.ServiceCommandDescriptor._typemapper_subCommands.toCustom(_)).toMap,
        enhanceCustomCommand = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        short = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.autocli.v1.OptionsProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.autocli.v1.OptionsProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = cosmos.autocli.v1.RpcCommandOptions
      case 3 => __out = cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.autocli.v1.ServiceCommandDescriptor(
    service = "",
    rpcCommandOptions = _root_.scala.Seq.empty,
    subCommands = _root_.scala.collection.immutable.Map.empty,
    enhanceCustomCommand = false,
    short = ""
  )
  @SerialVersionUID(0L)
  final case class SubCommandsEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Option[cosmos.autocli.v1.ServiceCommandDescriptor] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SubCommandsEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): SubCommandsEntry = copy(key = __v)
      def getValue: cosmos.autocli.v1.ServiceCommandDescriptor = value.getOrElse(cosmos.autocli.v1.ServiceCommandDescriptor.defaultInstance)
      def clearValue: SubCommandsEntry = copy(value = _root_.scala.None)
      def withValue(__v: cosmos.autocli.v1.ServiceCommandDescriptor): SubCommandsEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry.type = cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry
      // @@protoc_insertion_point(GeneratedMessage[cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry])
  }
  
  object SubCommandsEntry extends scalapb.GeneratedMessageCompanion[cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Option[cosmos.autocli.v1.ServiceCommandDescriptor] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = _root_.scala.Option(__value.fold(_root_.scalapb.LiteParser.readMessage[cosmos.autocli.v1.ServiceCommandDescriptor](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[cosmos.autocli.v1.ServiceCommandDescriptor]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.autocli.v1.ServiceCommandDescriptor.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.autocli.v1.ServiceCommandDescriptor.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = cosmos.autocli.v1.ServiceCommandDescriptor
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry(
      key = "",
      value = _root_.scala.None
    )
    implicit class SubCommandsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, cosmos.autocli.v1.ServiceCommandDescriptor] = field(_.getValue)((c_, f_) => c_.copy(value = _root_.scala.Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[cosmos.autocli.v1.ServiceCommandDescriptor]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry, (_root_.scala.Predef.String, cosmos.autocli.v1.ServiceCommandDescriptor)] =
      _root_.scalapb.TypeMapper[cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry, (_root_.scala.Predef.String, cosmos.autocli.v1.ServiceCommandDescriptor)](__m => (__m.key, __m.getValue))(__p => cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Option[cosmos.autocli.v1.ServiceCommandDescriptor]
    ): _root_.cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry = _root_.cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry])
  }
  
  implicit class ServiceCommandDescriptorLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.autocli.v1.ServiceCommandDescriptor]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.autocli.v1.ServiceCommandDescriptor](_l) {
    def service: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.service)((c_, f_) => c_.copy(service = f_))
    def rpcCommandOptions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.autocli.v1.RpcCommandOptions]] = field(_.rpcCommandOptions)((c_, f_) => c_.copy(rpcCommandOptions = f_))
    def subCommands: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, cosmos.autocli.v1.ServiceCommandDescriptor]] = field(_.subCommands)((c_, f_) => c_.copy(subCommands = f_))
    def enhanceCustomCommand: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.enhanceCustomCommand)((c_, f_) => c_.copy(enhanceCustomCommand = f_))
    def short: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.short)((c_, f_) => c_.copy(short = f_))
  }
  final val SERVICE_FIELD_NUMBER = 1
  final val RPC_COMMAND_OPTIONS_FIELD_NUMBER = 2
  final val SUB_COMMANDS_FIELD_NUMBER = 3
  final val ENHANCE_CUSTOM_COMMAND_FIELD_NUMBER = 4
  final val SHORT_FIELD_NUMBER = 5
  @transient
  private[v1] val _typemapper_subCommands: _root_.scalapb.TypeMapper[cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry, (_root_.scala.Predef.String, cosmos.autocli.v1.ServiceCommandDescriptor)] = implicitly[_root_.scalapb.TypeMapper[cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry, (_root_.scala.Predef.String, cosmos.autocli.v1.ServiceCommandDescriptor)]]
  def of(
    service: _root_.scala.Predef.String,
    rpcCommandOptions: _root_.scala.Seq[cosmos.autocli.v1.RpcCommandOptions],
    subCommands: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, cosmos.autocli.v1.ServiceCommandDescriptor],
    enhanceCustomCommand: _root_.scala.Boolean,
    short: _root_.scala.Predef.String
  ): _root_.cosmos.autocli.v1.ServiceCommandDescriptor = _root_.cosmos.autocli.v1.ServiceCommandDescriptor(
    service,
    rpcCommandOptions,
    subCommands,
    enhanceCustomCommand,
    short
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.autocli.v1.ServiceCommandDescriptor])
}
