// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.autocli.v1

/** RpcCommandOptions specifies options for commands generated from protobuf
  * rpc methods.
  *
  * @param rpcMethod
  *   rpc_method is short name of the protobuf rpc method that this command is
  *   generated from.
  * @param use
  *   use is the one-line usage method. It also allows specifying an alternate
  *   name for the command as the first word of the usage text.
  *  
  *   By default the name of an rpc command is the kebab-case short name of the
  *   rpc method.
  * @param long
  *   long is the long message shown in the 'help &lt;this-command&gt;' output.
  * @param short
  *   short is the short description shown in the 'help' output.
  * @param example
  *   example is examples of how to use the command.
  * @param alias
  *   alias is an array of aliases that can be used instead of the first word in Use.
  * @param suggestFor
  *   suggest_for is an array of command names for which this command will be suggested -
  *   similar to aliases but only suggests.
  * @param deprecated
  *   deprecated defines, if this command is deprecated and should print this string when used.
  * @param version
  *   version defines the version for this command. If this value is non-empty and the command does not
  *   define a "version" flag, a "version" boolean flag will be added to the command and, if specified,
  *   will print content of the "Version" variable. A shorthand "v" flag will also be added if the
  *   command does not define one.
  * @param flagOptions
  *   flag_options are options for flags generated from rpc request fields.
  *   By default all request fields are configured as flags. They can
  *   also be configured as positional args instead using positional_args.
  * @param positionalArgs
  *   positional_args specifies positional arguments for the command.
  * @param skip
  *   skip specifies whether to skip this rpc method when generating commands.
  * @param govProposal
  *   gov_proposal specifies whether autocli should generate a gov proposal transaction for this rpc method.
  *   Normally autocli generates a transaction containing the message and broadcast it.
  *   However, when true, autocli generates a proposal transaction containing the message and broadcast it.
  *   This option is ineffective for query commands.
  */
@SerialVersionUID(0L)
final case class RpcCommandOptions(
    rpcMethod: _root_.scala.Predef.String = "",
    use: _root_.scala.Predef.String = "",
    long: _root_.scala.Predef.String = "",
    short: _root_.scala.Predef.String = "",
    example: _root_.scala.Predef.String = "",
    alias: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    suggestFor: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    deprecated: _root_.scala.Predef.String = "",
    version: _root_.scala.Predef.String = "",
    flagOptions: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, cosmos.autocli.v1.FlagOptions] = _root_.scala.collection.immutable.Map.empty,
    positionalArgs: _root_.scala.Seq[cosmos.autocli.v1.PositionalArgDescriptor] = _root_.scala.Seq.empty,
    skip: _root_.scala.Boolean = false,
    govProposal: _root_.scala.Boolean = false,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[RpcCommandOptions] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = rpcMethod
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = use
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = long
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = short
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = example
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      alias.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
      }
      suggestFor.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
      }
      
      {
        val __value = deprecated
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, __value)
        }
      };
      
      {
        val __value = version
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, __value)
        }
      };
      flagOptions.foreach { __item =>
        val __value = cosmos.autocli.v1.RpcCommandOptions._typemapper_flagOptions.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      positionalArgs.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = skip
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(12, __value)
        }
      };
      
      {
        val __value = govProposal
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(13, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = rpcMethod
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = use
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = long
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = short
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = example
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      alias.foreach { __v =>
        val __m = __v
        _output__.writeString(6, __m)
      };
      suggestFor.foreach { __v =>
        val __m = __v
        _output__.writeString(7, __m)
      };
      {
        val __v = deprecated
        if (!__v.isEmpty) {
          _output__.writeString(8, __v)
        }
      };
      {
        val __v = version
        if (!__v.isEmpty) {
          _output__.writeString(9, __v)
        }
      };
      flagOptions.foreach { __v =>
        val __m = cosmos.autocli.v1.RpcCommandOptions._typemapper_flagOptions.toBase(__v)
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      positionalArgs.foreach { __v =>
        val __m = __v
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = skip
        if (__v != false) {
          _output__.writeBool(12, __v)
        }
      };
      {
        val __v = govProposal
        if (__v != false) {
          _output__.writeBool(13, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withRpcMethod(__v: _root_.scala.Predef.String): RpcCommandOptions = copy(rpcMethod = __v)
    def withUse(__v: _root_.scala.Predef.String): RpcCommandOptions = copy(use = __v)
    def withLong(__v: _root_.scala.Predef.String): RpcCommandOptions = copy(long = __v)
    def withShort(__v: _root_.scala.Predef.String): RpcCommandOptions = copy(short = __v)
    def withExample(__v: _root_.scala.Predef.String): RpcCommandOptions = copy(example = __v)
    def clearAlias = copy(alias = _root_.scala.Seq.empty)
    def addAlias(__vs: _root_.scala.Predef.String *): RpcCommandOptions = addAllAlias(__vs)
    def addAllAlias(__vs: Iterable[_root_.scala.Predef.String]): RpcCommandOptions = copy(alias = alias ++ __vs)
    def withAlias(__v: _root_.scala.Seq[_root_.scala.Predef.String]): RpcCommandOptions = copy(alias = __v)
    def clearSuggestFor = copy(suggestFor = _root_.scala.Seq.empty)
    def addSuggestFor(__vs: _root_.scala.Predef.String *): RpcCommandOptions = addAllSuggestFor(__vs)
    def addAllSuggestFor(__vs: Iterable[_root_.scala.Predef.String]): RpcCommandOptions = copy(suggestFor = suggestFor ++ __vs)
    def withSuggestFor(__v: _root_.scala.Seq[_root_.scala.Predef.String]): RpcCommandOptions = copy(suggestFor = __v)
    def withDeprecated(__v: _root_.scala.Predef.String): RpcCommandOptions = copy(deprecated = __v)
    def withVersion(__v: _root_.scala.Predef.String): RpcCommandOptions = copy(version = __v)
    def clearFlagOptions = copy(flagOptions = _root_.scala.collection.immutable.Map.empty)
    def addFlagOptions(__vs: (_root_.scala.Predef.String, cosmos.autocli.v1.FlagOptions) *): RpcCommandOptions = addAllFlagOptions(__vs)
    def addAllFlagOptions(__vs: Iterable[(_root_.scala.Predef.String, cosmos.autocli.v1.FlagOptions)]): RpcCommandOptions = copy(flagOptions = flagOptions ++ __vs)
    def withFlagOptions(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, cosmos.autocli.v1.FlagOptions]): RpcCommandOptions = copy(flagOptions = __v)
    def clearPositionalArgs = copy(positionalArgs = _root_.scala.Seq.empty)
    def addPositionalArgs(__vs: cosmos.autocli.v1.PositionalArgDescriptor *): RpcCommandOptions = addAllPositionalArgs(__vs)
    def addAllPositionalArgs(__vs: Iterable[cosmos.autocli.v1.PositionalArgDescriptor]): RpcCommandOptions = copy(positionalArgs = positionalArgs ++ __vs)
    def withPositionalArgs(__v: _root_.scala.Seq[cosmos.autocli.v1.PositionalArgDescriptor]): RpcCommandOptions = copy(positionalArgs = __v)
    def withSkip(__v: _root_.scala.Boolean): RpcCommandOptions = copy(skip = __v)
    def withGovProposal(__v: _root_.scala.Boolean): RpcCommandOptions = copy(govProposal = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = rpcMethod
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = use
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = long
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = short
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = example
          if (__t != "") __t else null
        }
        case 6 => alias
        case 7 => suggestFor
        case 8 => {
          val __t = deprecated
          if (__t != "") __t else null
        }
        case 9 => {
          val __t = version
          if (__t != "") __t else null
        }
        case 10 => flagOptions.iterator.map(cosmos.autocli.v1.RpcCommandOptions._typemapper_flagOptions.toBase(_)).toSeq
        case 11 => positionalArgs
        case 12 => {
          val __t = skip
          if (__t != false) __t else null
        }
        case 13 => {
          val __t = govProposal
          if (__t != false) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(rpcMethod)
        case 2 => _root_.scalapb.descriptors.PString(use)
        case 3 => _root_.scalapb.descriptors.PString(long)
        case 4 => _root_.scalapb.descriptors.PString(short)
        case 5 => _root_.scalapb.descriptors.PString(example)
        case 6 => _root_.scalapb.descriptors.PRepeated(alias.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 7 => _root_.scalapb.descriptors.PRepeated(suggestFor.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 8 => _root_.scalapb.descriptors.PString(deprecated)
        case 9 => _root_.scalapb.descriptors.PString(version)
        case 10 => _root_.scalapb.descriptors.PRepeated(flagOptions.iterator.map(cosmos.autocli.v1.RpcCommandOptions._typemapper_flagOptions.toBase(_).toPMessage).toVector)
        case 11 => _root_.scalapb.descriptors.PRepeated(positionalArgs.iterator.map(_.toPMessage).toVector)
        case 12 => _root_.scalapb.descriptors.PBoolean(skip)
        case 13 => _root_.scalapb.descriptors.PBoolean(govProposal)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.autocli.v1.RpcCommandOptions.type = cosmos.autocli.v1.RpcCommandOptions
    // @@protoc_insertion_point(GeneratedMessage[cosmos.autocli.v1.RpcCommandOptions])
}

object RpcCommandOptions extends scalapb.GeneratedMessageCompanion[cosmos.autocli.v1.RpcCommandOptions] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.autocli.v1.RpcCommandOptions] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.autocli.v1.RpcCommandOptions = {
    var __rpcMethod: _root_.scala.Predef.String = ""
    var __use: _root_.scala.Predef.String = ""
    var __long: _root_.scala.Predef.String = ""
    var __short: _root_.scala.Predef.String = ""
    var __example: _root_.scala.Predef.String = ""
    val __alias: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __suggestFor: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var __deprecated: _root_.scala.Predef.String = ""
    var __version: _root_.scala.Predef.String = ""
    val __flagOptions: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, cosmos.autocli.v1.FlagOptions), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, cosmos.autocli.v1.FlagOptions]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, cosmos.autocli.v1.FlagOptions]
    val __positionalArgs: _root_.scala.collection.immutable.VectorBuilder[cosmos.autocli.v1.PositionalArgDescriptor] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.autocli.v1.PositionalArgDescriptor]
    var __skip: _root_.scala.Boolean = false
    var __govProposal: _root_.scala.Boolean = false
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __rpcMethod = _input__.readStringRequireUtf8()
        case 18 =>
          __use = _input__.readStringRequireUtf8()
        case 26 =>
          __long = _input__.readStringRequireUtf8()
        case 34 =>
          __short = _input__.readStringRequireUtf8()
        case 42 =>
          __example = _input__.readStringRequireUtf8()
        case 50 =>
          __alias += _input__.readStringRequireUtf8()
        case 58 =>
          __suggestFor += _input__.readStringRequireUtf8()
        case 66 =>
          __deprecated = _input__.readStringRequireUtf8()
        case 74 =>
          __version = _input__.readStringRequireUtf8()
        case 82 =>
          __flagOptions += cosmos.autocli.v1.RpcCommandOptions._typemapper_flagOptions.toCustom(_root_.scalapb.LiteParser.readMessage[cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry](_input__))
        case 90 =>
          __positionalArgs += _root_.scalapb.LiteParser.readMessage[cosmos.autocli.v1.PositionalArgDescriptor](_input__)
        case 96 =>
          __skip = _input__.readBool()
        case 104 =>
          __govProposal = _input__.readBool()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.autocli.v1.RpcCommandOptions(
        rpcMethod = __rpcMethod,
        use = __use,
        long = __long,
        short = __short,
        example = __example,
        alias = __alias.result(),
        suggestFor = __suggestFor.result(),
        deprecated = __deprecated,
        version = __version,
        flagOptions = __flagOptions.result(),
        positionalArgs = __positionalArgs.result(),
        skip = __skip,
        govProposal = __govProposal,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.autocli.v1.RpcCommandOptions] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.autocli.v1.RpcCommandOptions(
        rpcMethod = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        use = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        long = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        short = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        example = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        alias = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        suggestFor = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        deprecated = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        version = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        flagOptions = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Seq[cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(cosmos.autocli.v1.RpcCommandOptions._typemapper_flagOptions.toCustom(_)).toMap,
        positionalArgs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Seq[cosmos.autocli.v1.PositionalArgDescriptor]]).getOrElse(_root_.scala.Seq.empty),
        skip = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        govProposal = __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.autocli.v1.OptionsProto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.autocli.v1.OptionsProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 10 => __out = cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry
      case 11 => __out = cosmos.autocli.v1.PositionalArgDescriptor
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.autocli.v1.RpcCommandOptions(
    rpcMethod = "",
    use = "",
    long = "",
    short = "",
    example = "",
    alias = _root_.scala.Seq.empty,
    suggestFor = _root_.scala.Seq.empty,
    deprecated = "",
    version = "",
    flagOptions = _root_.scala.collection.immutable.Map.empty,
    positionalArgs = _root_.scala.Seq.empty,
    skip = false,
    govProposal = false
  )
  @SerialVersionUID(0L)
  final case class FlagOptionsEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Option[cosmos.autocli.v1.FlagOptions] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[FlagOptionsEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): FlagOptionsEntry = copy(key = __v)
      def getValue: cosmos.autocli.v1.FlagOptions = value.getOrElse(cosmos.autocli.v1.FlagOptions.defaultInstance)
      def clearValue: FlagOptionsEntry = copy(value = _root_.scala.None)
      def withValue(__v: cosmos.autocli.v1.FlagOptions): FlagOptionsEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry.type = cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry
      // @@protoc_insertion_point(GeneratedMessage[cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry])
  }
  
  object FlagOptionsEntry extends scalapb.GeneratedMessageCompanion[cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Option[cosmos.autocli.v1.FlagOptions] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = _root_.scala.Option(__value.fold(_root_.scalapb.LiteParser.readMessage[cosmos.autocli.v1.FlagOptions](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[cosmos.autocli.v1.FlagOptions]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.autocli.v1.RpcCommandOptions.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.autocli.v1.RpcCommandOptions.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = cosmos.autocli.v1.FlagOptions
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry(
      key = "",
      value = _root_.scala.None
    )
    implicit class FlagOptionsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, cosmos.autocli.v1.FlagOptions] = field(_.getValue)((c_, f_) => c_.copy(value = _root_.scala.Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[cosmos.autocli.v1.FlagOptions]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry, (_root_.scala.Predef.String, cosmos.autocli.v1.FlagOptions)] =
      _root_.scalapb.TypeMapper[cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry, (_root_.scala.Predef.String, cosmos.autocli.v1.FlagOptions)](__m => (__m.key, __m.getValue))(__p => cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Option[cosmos.autocli.v1.FlagOptions]
    ): _root_.cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry = _root_.cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry])
  }
  
  implicit class RpcCommandOptionsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.autocli.v1.RpcCommandOptions]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.autocli.v1.RpcCommandOptions](_l) {
    def rpcMethod: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.rpcMethod)((c_, f_) => c_.copy(rpcMethod = f_))
    def use: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.use)((c_, f_) => c_.copy(use = f_))
    def long: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.long)((c_, f_) => c_.copy(long = f_))
    def short: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.short)((c_, f_) => c_.copy(short = f_))
    def example: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.example)((c_, f_) => c_.copy(example = f_))
    def alias: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.alias)((c_, f_) => c_.copy(alias = f_))
    def suggestFor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.suggestFor)((c_, f_) => c_.copy(suggestFor = f_))
    def deprecated: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.deprecated)((c_, f_) => c_.copy(deprecated = f_))
    def version: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.version)((c_, f_) => c_.copy(version = f_))
    def flagOptions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, cosmos.autocli.v1.FlagOptions]] = field(_.flagOptions)((c_, f_) => c_.copy(flagOptions = f_))
    def positionalArgs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.autocli.v1.PositionalArgDescriptor]] = field(_.positionalArgs)((c_, f_) => c_.copy(positionalArgs = f_))
    def skip: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.skip)((c_, f_) => c_.copy(skip = f_))
    def govProposal: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.govProposal)((c_, f_) => c_.copy(govProposal = f_))
  }
  final val RPC_METHOD_FIELD_NUMBER = 1
  final val USE_FIELD_NUMBER = 2
  final val LONG_FIELD_NUMBER = 3
  final val SHORT_FIELD_NUMBER = 4
  final val EXAMPLE_FIELD_NUMBER = 5
  final val ALIAS_FIELD_NUMBER = 6
  final val SUGGEST_FOR_FIELD_NUMBER = 7
  final val DEPRECATED_FIELD_NUMBER = 8
  final val VERSION_FIELD_NUMBER = 9
  final val FLAG_OPTIONS_FIELD_NUMBER = 10
  final val POSITIONAL_ARGS_FIELD_NUMBER = 11
  final val SKIP_FIELD_NUMBER = 12
  final val GOV_PROPOSAL_FIELD_NUMBER = 13
  @transient
  private[v1] val _typemapper_flagOptions: _root_.scalapb.TypeMapper[cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry, (_root_.scala.Predef.String, cosmos.autocli.v1.FlagOptions)] = implicitly[_root_.scalapb.TypeMapper[cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry, (_root_.scala.Predef.String, cosmos.autocli.v1.FlagOptions)]]
  def of(
    rpcMethod: _root_.scala.Predef.String,
    use: _root_.scala.Predef.String,
    long: _root_.scala.Predef.String,
    short: _root_.scala.Predef.String,
    example: _root_.scala.Predef.String,
    alias: _root_.scala.Seq[_root_.scala.Predef.String],
    suggestFor: _root_.scala.Seq[_root_.scala.Predef.String],
    deprecated: _root_.scala.Predef.String,
    version: _root_.scala.Predef.String,
    flagOptions: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, cosmos.autocli.v1.FlagOptions],
    positionalArgs: _root_.scala.Seq[cosmos.autocli.v1.PositionalArgDescriptor],
    skip: _root_.scala.Boolean,
    govProposal: _root_.scala.Boolean
  ): _root_.cosmos.autocli.v1.RpcCommandOptions = _root_.cosmos.autocli.v1.RpcCommandOptions(
    rpcMethod,
    use,
    long,
    short,
    example,
    alias,
    suggestFor,
    deprecated,
    version,
    flagOptions,
    positionalArgs,
    skip,
    govProposal
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.autocli.v1.RpcCommandOptions])
}
