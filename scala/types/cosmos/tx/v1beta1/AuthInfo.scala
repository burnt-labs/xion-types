// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.tx.v1beta1

/** AuthInfo describes the fee and signer modes that are used to sign a
  * transaction.
  *
  * @param signerInfos
  *   signer_infos defines the signing modes for the required signers. The number
  *   and order of elements must match the required signers from TxBody's
  *   messages. The first element is the primary signer and the one which pays
  *   the fee.
  * @param fee
  *   Fee is the fee and gas limit for the transaction. The first signer is the
  *   primary signer and the one which pays the fee. The fee can be calculated
  *   based on the cost of evaluating the body and doing signature verification
  *   of the signers. This can be estimated via simulation.
  * @param tip
  *   Tip is the optional tip used for transactions fees paid in another denom.
  *  
  *   This field is ignored if the chain didn't enable tips, i.e. didn't add the
  *   `TipDecorator` in its posthandler.
  */
@SerialVersionUID(0L)
final case class AuthInfo(
    signerInfos: _root_.scala.Seq[cosmos.tx.v1beta1.SignerInfo] = _root_.scala.Seq.empty,
    fee: _root_.scala.Option[cosmos.tx.v1beta1.Fee] = _root_.scala.None,
    @scala.deprecated(message="Marked as deprecated in proto file", "") tip: _root_.scala.Option[cosmos.tx.v1beta1.Tip] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AuthInfo] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      signerInfos.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (fee.isDefined) {
        val __value = fee.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (tip.isDefined) {
        val __value = tip.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      signerInfos.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      fee.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      tip.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def clearSignerInfos = copy(signerInfos = _root_.scala.Seq.empty)
    def addSignerInfos(__vs: cosmos.tx.v1beta1.SignerInfo *): AuthInfo = addAllSignerInfos(__vs)
    def addAllSignerInfos(__vs: Iterable[cosmos.tx.v1beta1.SignerInfo]): AuthInfo = copy(signerInfos = signerInfos ++ __vs)
    def withSignerInfos(__v: _root_.scala.Seq[cosmos.tx.v1beta1.SignerInfo]): AuthInfo = copy(signerInfos = __v)
    def getFee: cosmos.tx.v1beta1.Fee = fee.getOrElse(cosmos.tx.v1beta1.Fee.defaultInstance)
    def clearFee: AuthInfo = copy(fee = _root_.scala.None)
    def withFee(__v: cosmos.tx.v1beta1.Fee): AuthInfo = copy(fee = Option(__v))
    def getTip: cosmos.tx.v1beta1.Tip = tip.getOrElse(cosmos.tx.v1beta1.Tip.defaultInstance)
    def clearTip: AuthInfo = copy(tip = _root_.scala.None)
    def withTip(__v: cosmos.tx.v1beta1.Tip): AuthInfo = copy(tip = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => signerInfos
        case 2 => fee.orNull
        case 3 => tip.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(signerInfos.iterator.map(_.toPMessage).toVector)
        case 2 => fee.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => tip.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.tx.v1beta1.AuthInfo.type = cosmos.tx.v1beta1.AuthInfo
    // @@protoc_insertion_point(GeneratedMessage[cosmos.tx.v1beta1.AuthInfo])
}

object AuthInfo extends scalapb.GeneratedMessageCompanion[cosmos.tx.v1beta1.AuthInfo] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.tx.v1beta1.AuthInfo] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.tx.v1beta1.AuthInfo = {
    val __signerInfos: _root_.scala.collection.immutable.VectorBuilder[cosmos.tx.v1beta1.SignerInfo] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.tx.v1beta1.SignerInfo]
    var __fee: _root_.scala.Option[cosmos.tx.v1beta1.Fee] = _root_.scala.None
    var __tip: _root_.scala.Option[cosmos.tx.v1beta1.Tip] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __signerInfos += _root_.scalapb.LiteParser.readMessage[cosmos.tx.v1beta1.SignerInfo](_input__)
        case 18 =>
          __fee = _root_.scala.Option(__fee.fold(_root_.scalapb.LiteParser.readMessage[cosmos.tx.v1beta1.Fee](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __tip = _root_.scala.Option(__tip.fold(_root_.scalapb.LiteParser.readMessage[cosmos.tx.v1beta1.Tip](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.tx.v1beta1.AuthInfo(
        signerInfos = __signerInfos.result(),
        fee = __fee,
        tip = __tip,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.tx.v1beta1.AuthInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.tx.v1beta1.AuthInfo(
        signerInfos = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[cosmos.tx.v1beta1.SignerInfo]]).getOrElse(_root_.scala.Seq.empty),
        fee = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[cosmos.tx.v1beta1.Fee]]),
        tip = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[cosmos.tx.v1beta1.Tip]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.tx.v1beta1.TxProto.javaDescriptor.getMessageTypes().get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.tx.v1beta1.TxProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = cosmos.tx.v1beta1.SignerInfo
      case 2 => __out = cosmos.tx.v1beta1.Fee
      case 3 => __out = cosmos.tx.v1beta1.Tip
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.tx.v1beta1.AuthInfo(
    signerInfos = _root_.scala.Seq.empty,
    fee = _root_.scala.None,
    tip = _root_.scala.None
  )
  implicit class AuthInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.tx.v1beta1.AuthInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.tx.v1beta1.AuthInfo](_l) {
    def signerInfos: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.tx.v1beta1.SignerInfo]] = field(_.signerInfos)((c_, f_) => c_.copy(signerInfos = f_))
    def fee: _root_.scalapb.lenses.Lens[UpperPB, cosmos.tx.v1beta1.Fee] = field(_.getFee)((c_, f_) => c_.copy(fee = _root_.scala.Option(f_)))
    def optionalFee: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[cosmos.tx.v1beta1.Fee]] = field(_.fee)((c_, f_) => c_.copy(fee = f_))
    def tip: _root_.scalapb.lenses.Lens[UpperPB, cosmos.tx.v1beta1.Tip] = field(_.getTip)((c_, f_) => c_.copy(tip = _root_.scala.Option(f_)))
    def optionalTip: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[cosmos.tx.v1beta1.Tip]] = field(_.tip)((c_, f_) => c_.copy(tip = f_))
  }
  final val SIGNER_INFOS_FIELD_NUMBER = 1
  final val FEE_FIELD_NUMBER = 2
  final val TIP_FIELD_NUMBER = 3
  def of(
    signerInfos: _root_.scala.Seq[cosmos.tx.v1beta1.SignerInfo],
    fee: _root_.scala.Option[cosmos.tx.v1beta1.Fee],
    tip: _root_.scala.Option[cosmos.tx.v1beta1.Tip]
  ): _root_.cosmos.tx.v1beta1.AuthInfo = _root_.cosmos.tx.v1beta1.AuthInfo(
    signerInfos,
    fee,
    tip
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.tx.v1beta1.AuthInfo])
}
