// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.tx.v1beta1

/** ModeInfo describes the signing mode of a single or nested multisig signer.
  */
@SerialVersionUID(0L)
final case class ModeInfo(
    sum: cosmos.tx.v1beta1.ModeInfo.Sum = cosmos.tx.v1beta1.ModeInfo.Sum.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ModeInfo] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (sum.single.isDefined) {
        val __value = sum.single.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sum.multi.isDefined) {
        val __value = sum.multi.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      sum.single.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sum.multi.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getSingle: cosmos.tx.v1beta1.ModeInfo.Single = sum.single.getOrElse(cosmos.tx.v1beta1.ModeInfo.Single.defaultInstance)
    def withSingle(__v: cosmos.tx.v1beta1.ModeInfo.Single): ModeInfo = copy(sum = cosmos.tx.v1beta1.ModeInfo.Sum.Single(__v))
    def getMulti: cosmos.tx.v1beta1.ModeInfo.Multi = sum.multi.getOrElse(cosmos.tx.v1beta1.ModeInfo.Multi.defaultInstance)
    def withMulti(__v: cosmos.tx.v1beta1.ModeInfo.Multi): ModeInfo = copy(sum = cosmos.tx.v1beta1.ModeInfo.Sum.Multi(__v))
    def clearSum: ModeInfo = copy(sum = cosmos.tx.v1beta1.ModeInfo.Sum.Empty)
    def withSum(__v: cosmos.tx.v1beta1.ModeInfo.Sum): ModeInfo = copy(sum = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => sum.single.orNull
        case 2 => sum.multi.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => sum.single.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => sum.multi.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.tx.v1beta1.ModeInfo.type = cosmos.tx.v1beta1.ModeInfo
    // @@protoc_insertion_point(GeneratedMessage[cosmos.tx.v1beta1.ModeInfo])
}

object ModeInfo extends scalapb.GeneratedMessageCompanion[cosmos.tx.v1beta1.ModeInfo] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.tx.v1beta1.ModeInfo] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.tx.v1beta1.ModeInfo = {
    var __sum: cosmos.tx.v1beta1.ModeInfo.Sum = cosmos.tx.v1beta1.ModeInfo.Sum.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __sum = cosmos.tx.v1beta1.ModeInfo.Sum.Single(__sum.single.fold(_root_.scalapb.LiteParser.readMessage[cosmos.tx.v1beta1.ModeInfo.Single](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __sum = cosmos.tx.v1beta1.ModeInfo.Sum.Multi(__sum.multi.fold(_root_.scalapb.LiteParser.readMessage[cosmos.tx.v1beta1.ModeInfo.Multi](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.tx.v1beta1.ModeInfo(
        sum = __sum,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.tx.v1beta1.ModeInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.tx.v1beta1.ModeInfo(
        sum = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[cosmos.tx.v1beta1.ModeInfo.Single]]).map(cosmos.tx.v1beta1.ModeInfo.Sum.Single(_))
            .orElse[cosmos.tx.v1beta1.ModeInfo.Sum](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[cosmos.tx.v1beta1.ModeInfo.Multi]]).map(cosmos.tx.v1beta1.ModeInfo.Sum.Multi(_)))
            .getOrElse(cosmos.tx.v1beta1.ModeInfo.Sum.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.tx.v1beta1.TxProto.javaDescriptor.getMessageTypes().get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.tx.v1beta1.TxProto.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = cosmos.tx.v1beta1.ModeInfo.Single
      case 2 => __out = cosmos.tx.v1beta1.ModeInfo.Multi
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.cosmos.tx.v1beta1.ModeInfo.Single,
      _root_.cosmos.tx.v1beta1.ModeInfo.Multi
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.tx.v1beta1.ModeInfo(
    sum = cosmos.tx.v1beta1.ModeInfo.Sum.Empty
  )
  sealed trait Sum extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isSingle: _root_.scala.Boolean = false
    def isMulti: _root_.scala.Boolean = false
    def single: _root_.scala.Option[cosmos.tx.v1beta1.ModeInfo.Single] = _root_.scala.None
    def multi: _root_.scala.Option[cosmos.tx.v1beta1.ModeInfo.Multi] = _root_.scala.None
  }
  object Sum {
    @SerialVersionUID(0L)
    case object Empty extends cosmos.tx.v1beta1.ModeInfo.Sum {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Single(value: cosmos.tx.v1beta1.ModeInfo.Single) extends cosmos.tx.v1beta1.ModeInfo.Sum {
      type ValueType = cosmos.tx.v1beta1.ModeInfo.Single
      override def isSingle: _root_.scala.Boolean = true
      override def single: _root_.scala.Option[cosmos.tx.v1beta1.ModeInfo.Single] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class Multi(value: cosmos.tx.v1beta1.ModeInfo.Multi) extends cosmos.tx.v1beta1.ModeInfo.Sum {
      type ValueType = cosmos.tx.v1beta1.ModeInfo.Multi
      override def isMulti: _root_.scala.Boolean = true
      override def multi: _root_.scala.Option[cosmos.tx.v1beta1.ModeInfo.Multi] = Some(value)
      override def number: _root_.scala.Int = 2
    }
  }
  /** Single is the mode info for a single signer. It is structured as a message
    * to allow for additional fields such as locale for SIGN_MODE_TEXTUAL in the
    * future
    *
    * @param mode
    *   mode is the signing mode of the single signer
    */
  @SerialVersionUID(0L)
  final case class Single(
      mode: cosmos.tx.signing.v1beta1.SignMode = cosmos.tx.signing.v1beta1.SignMode.SIGN_MODE_UNSPECIFIED,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Single] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = mode.value
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = mode.value
          if (__v != 0) {
            _output__.writeEnum(1, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withMode(__v: cosmos.tx.signing.v1beta1.SignMode): Single = copy(mode = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = mode.javaValueDescriptor
            if (__t.getNumber() != 0) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PEnum(mode.scalaValueDescriptor)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: cosmos.tx.v1beta1.ModeInfo.Single.type = cosmos.tx.v1beta1.ModeInfo.Single
      // @@protoc_insertion_point(GeneratedMessage[cosmos.tx.v1beta1.ModeInfo.Single])
  }
  
  object Single extends scalapb.GeneratedMessageCompanion[cosmos.tx.v1beta1.ModeInfo.Single] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.tx.v1beta1.ModeInfo.Single] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.tx.v1beta1.ModeInfo.Single = {
      var __mode: cosmos.tx.signing.v1beta1.SignMode = cosmos.tx.signing.v1beta1.SignMode.SIGN_MODE_UNSPECIFIED
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __mode = cosmos.tx.signing.v1beta1.SignMode.fromValue(_input__.readEnum())
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      cosmos.tx.v1beta1.ModeInfo.Single(
          mode = __mode,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.tx.v1beta1.ModeInfo.Single] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        cosmos.tx.v1beta1.ModeInfo.Single(
          mode = cosmos.tx.signing.v1beta1.SignMode.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(cosmos.tx.signing.v1beta1.SignMode.SIGN_MODE_UNSPECIFIED.scalaValueDescriptor).number)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.tx.v1beta1.ModeInfo.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.tx.v1beta1.ModeInfo.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => cosmos.tx.signing.v1beta1.SignMode
      }
    }
    lazy val defaultInstance = cosmos.tx.v1beta1.ModeInfo.Single(
      mode = cosmos.tx.signing.v1beta1.SignMode.SIGN_MODE_UNSPECIFIED
    )
    implicit class SingleLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.tx.v1beta1.ModeInfo.Single]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.tx.v1beta1.ModeInfo.Single](_l) {
      def mode: _root_.scalapb.lenses.Lens[UpperPB, cosmos.tx.signing.v1beta1.SignMode] = field(_.mode)((c_, f_) => c_.copy(mode = f_))
    }
    final val MODE_FIELD_NUMBER = 1
    def of(
      mode: cosmos.tx.signing.v1beta1.SignMode
    ): _root_.cosmos.tx.v1beta1.ModeInfo.Single = _root_.cosmos.tx.v1beta1.ModeInfo.Single(
      mode
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.tx.v1beta1.ModeInfo.Single])
  }
  
  /** Multi is the mode info for a multisig public key
    *
    * @param bitarray
    *   bitarray specifies which keys within the multisig are signing
    * @param modeInfos
    *   mode_infos is the corresponding modes of the signers of the multisig
    *   which could include nested multisig public keys
    */
  @SerialVersionUID(0L)
  final case class Multi(
      bitarray: _root_.scala.Option[cosmos.crypto.multisig.v1beta1.CompactBitArray] = _root_.scala.None,
      modeInfos: _root_.scala.Seq[cosmos.tx.v1beta1.ModeInfo] = _root_.scala.Seq.empty,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Multi] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        if (bitarray.isDefined) {
          val __value = bitarray.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        modeInfos.foreach { __item =>
          val __value = __item
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        bitarray.foreach { __v =>
          val __m = __v
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        modeInfos.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def getBitarray: cosmos.crypto.multisig.v1beta1.CompactBitArray = bitarray.getOrElse(cosmos.crypto.multisig.v1beta1.CompactBitArray.defaultInstance)
      def clearBitarray: Multi = copy(bitarray = _root_.scala.None)
      def withBitarray(__v: cosmos.crypto.multisig.v1beta1.CompactBitArray): Multi = copy(bitarray = Option(__v))
      def clearModeInfos = copy(modeInfos = _root_.scala.Seq.empty)
      def addModeInfos(__vs: cosmos.tx.v1beta1.ModeInfo *): Multi = addAllModeInfos(__vs)
      def addAllModeInfos(__vs: Iterable[cosmos.tx.v1beta1.ModeInfo]): Multi = copy(modeInfos = modeInfos ++ __vs)
      def withModeInfos(__v: _root_.scala.Seq[cosmos.tx.v1beta1.ModeInfo]): Multi = copy(modeInfos = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => bitarray.orNull
          case 2 => modeInfos
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => bitarray.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => _root_.scalapb.descriptors.PRepeated(modeInfos.iterator.map(_.toPMessage).toVector)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: cosmos.tx.v1beta1.ModeInfo.Multi.type = cosmos.tx.v1beta1.ModeInfo.Multi
      // @@protoc_insertion_point(GeneratedMessage[cosmos.tx.v1beta1.ModeInfo.Multi])
  }
  
  object Multi extends scalapb.GeneratedMessageCompanion[cosmos.tx.v1beta1.ModeInfo.Multi] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.tx.v1beta1.ModeInfo.Multi] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.tx.v1beta1.ModeInfo.Multi = {
      var __bitarray: _root_.scala.Option[cosmos.crypto.multisig.v1beta1.CompactBitArray] = _root_.scala.None
      val __modeInfos: _root_.scala.collection.immutable.VectorBuilder[cosmos.tx.v1beta1.ModeInfo] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.tx.v1beta1.ModeInfo]
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __bitarray = _root_.scala.Option(__bitarray.fold(_root_.scalapb.LiteParser.readMessage[cosmos.crypto.multisig.v1beta1.CompactBitArray](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 18 =>
            __modeInfos += _root_.scalapb.LiteParser.readMessage[cosmos.tx.v1beta1.ModeInfo](_input__)
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      cosmos.tx.v1beta1.ModeInfo.Multi(
          bitarray = __bitarray,
          modeInfos = __modeInfos.result(),
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.tx.v1beta1.ModeInfo.Multi] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        cosmos.tx.v1beta1.ModeInfo.Multi(
          bitarray = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[cosmos.crypto.multisig.v1beta1.CompactBitArray]]),
          modeInfos = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[cosmos.tx.v1beta1.ModeInfo]]).getOrElse(_root_.scala.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.tx.v1beta1.ModeInfo.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.tx.v1beta1.ModeInfo.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 1 => __out = cosmos.crypto.multisig.v1beta1.CompactBitArray
        case 2 => __out = cosmos.tx.v1beta1.ModeInfo
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = cosmos.tx.v1beta1.ModeInfo.Multi(
      bitarray = _root_.scala.None,
      modeInfos = _root_.scala.Seq.empty
    )
    implicit class MultiLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.tx.v1beta1.ModeInfo.Multi]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.tx.v1beta1.ModeInfo.Multi](_l) {
      def bitarray: _root_.scalapb.lenses.Lens[UpperPB, cosmos.crypto.multisig.v1beta1.CompactBitArray] = field(_.getBitarray)((c_, f_) => c_.copy(bitarray = _root_.scala.Option(f_)))
      def optionalBitarray: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[cosmos.crypto.multisig.v1beta1.CompactBitArray]] = field(_.bitarray)((c_, f_) => c_.copy(bitarray = f_))
      def modeInfos: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.tx.v1beta1.ModeInfo]] = field(_.modeInfos)((c_, f_) => c_.copy(modeInfos = f_))
    }
    final val BITARRAY_FIELD_NUMBER = 1
    final val MODE_INFOS_FIELD_NUMBER = 2
    def of(
      bitarray: _root_.scala.Option[cosmos.crypto.multisig.v1beta1.CompactBitArray],
      modeInfos: _root_.scala.Seq[cosmos.tx.v1beta1.ModeInfo]
    ): _root_.cosmos.tx.v1beta1.ModeInfo.Multi = _root_.cosmos.tx.v1beta1.ModeInfo.Multi(
      bitarray,
      modeInfos
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.tx.v1beta1.ModeInfo.Multi])
  }
  
  implicit class ModeInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.tx.v1beta1.ModeInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.tx.v1beta1.ModeInfo](_l) {
    def single: _root_.scalapb.lenses.Lens[UpperPB, cosmos.tx.v1beta1.ModeInfo.Single] = field(_.getSingle)((c_, f_) => c_.copy(sum = cosmos.tx.v1beta1.ModeInfo.Sum.Single(f_)))
    def multi: _root_.scalapb.lenses.Lens[UpperPB, cosmos.tx.v1beta1.ModeInfo.Multi] = field(_.getMulti)((c_, f_) => c_.copy(sum = cosmos.tx.v1beta1.ModeInfo.Sum.Multi(f_)))
    def sum: _root_.scalapb.lenses.Lens[UpperPB, cosmos.tx.v1beta1.ModeInfo.Sum] = field(_.sum)((c_, f_) => c_.copy(sum = f_))
  }
  final val SINGLE_FIELD_NUMBER = 1
  final val MULTI_FIELD_NUMBER = 2
  def of(
    sum: cosmos.tx.v1beta1.ModeInfo.Sum
  ): _root_.cosmos.tx.v1beta1.ModeInfo = _root_.cosmos.tx.v1beta1.ModeInfo(
    sum
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.tx.v1beta1.ModeInfo])
}
