// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.tx.v1beta1

/** Fee includes the amount of coins paid in fees and the maximum
  * gas to be used by the transaction. The ratio yields an effective "gasprice",
  * which must be above some miminum to be accepted into the mempool.
  *
  * @param amount
  *   amount is the amount of coins to be paid as a fee
  * @param gasLimit
  *   gas_limit is the maximum gas that can be used in transaction processing
  *   before an out of gas error occurs
  * @param payer
  *   if unset, the first signer is responsible for paying the fees. If set, the
  *   specified account must pay the fees. the payer must be a tx signer (and
  *   thus have signed this field in AuthInfo). setting this field does *not*
  *   change the ordering of required signers for the transaction.
  * @param granter
  *   if set, the fee payer (either the first signer or the value of the payer
  *   field) requests that a fee grant be used to pay fees instead of the fee
  *   payer's own balance. If an appropriate fee grant does not exist or the
  *   chain does not support fee grants, this will fail
  */
@SerialVersionUID(0L)
final case class Fee(
    amount: _root_.scala.Seq[cosmos.base.v1beta1.Coin] = _root_.scala.Seq.empty,
    gasLimit: _root_.scala.Long = 0L,
    payer: _root_.scala.Predef.String = "",
    granter: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Fee] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      amount.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = gasLimit
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(2, __value)
        }
      };
      
      {
        val __value = payer
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = granter
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      amount.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = gasLimit
        if (__v != 0L) {
          _output__.writeUInt64(2, __v)
        }
      };
      {
        val __v = payer
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = granter
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def clearAmount = copy(amount = _root_.scala.Seq.empty)
    def addAmount(__vs: cosmos.base.v1beta1.Coin *): Fee = addAllAmount(__vs)
    def addAllAmount(__vs: Iterable[cosmos.base.v1beta1.Coin]): Fee = copy(amount = amount ++ __vs)
    def withAmount(__v: _root_.scala.Seq[cosmos.base.v1beta1.Coin]): Fee = copy(amount = __v)
    def withGasLimit(__v: _root_.scala.Long): Fee = copy(gasLimit = __v)
    def withPayer(__v: _root_.scala.Predef.String): Fee = copy(payer = __v)
    def withGranter(__v: _root_.scala.Predef.String): Fee = copy(granter = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => amount
        case 2 => {
          val __t = gasLimit
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = payer
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = granter
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(amount.iterator.map(_.toPMessage).toVector)
        case 2 => _root_.scalapb.descriptors.PLong(gasLimit)
        case 3 => _root_.scalapb.descriptors.PString(payer)
        case 4 => _root_.scalapb.descriptors.PString(granter)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.tx.v1beta1.Fee.type = cosmos.tx.v1beta1.Fee
    // @@protoc_insertion_point(GeneratedMessage[cosmos.tx.v1beta1.Fee])
}

object Fee extends scalapb.GeneratedMessageCompanion[cosmos.tx.v1beta1.Fee] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.tx.v1beta1.Fee] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.tx.v1beta1.Fee = {
    val __amount: _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.Coin] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.base.v1beta1.Coin]
    var __gasLimit: _root_.scala.Long = 0L
    var __payer: _root_.scala.Predef.String = ""
    var __granter: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __amount += _root_.scalapb.LiteParser.readMessage[cosmos.base.v1beta1.Coin](_input__)
        case 16 =>
          __gasLimit = _input__.readUInt64()
        case 26 =>
          __payer = _input__.readStringRequireUtf8()
        case 34 =>
          __granter = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.tx.v1beta1.Fee(
        amount = __amount.result(),
        gasLimit = __gasLimit,
        payer = __payer,
        granter = __granter,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.tx.v1beta1.Fee] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.tx.v1beta1.Fee(
        amount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[cosmos.base.v1beta1.Coin]]).getOrElse(_root_.scala.Seq.empty),
        gasLimit = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        payer = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        granter = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.tx.v1beta1.TxProto.javaDescriptor.getMessageTypes().get(8)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.tx.v1beta1.TxProto.scalaDescriptor.messages(8)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = cosmos.base.v1beta1.Coin
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.tx.v1beta1.Fee(
    amount = _root_.scala.Seq.empty,
    gasLimit = 0L,
    payer = "",
    granter = ""
  )
  implicit class FeeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.tx.v1beta1.Fee]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.tx.v1beta1.Fee](_l) {
    def amount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.base.v1beta1.Coin]] = field(_.amount)((c_, f_) => c_.copy(amount = f_))
    def gasLimit: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.gasLimit)((c_, f_) => c_.copy(gasLimit = f_))
    def payer: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.payer)((c_, f_) => c_.copy(payer = f_))
    def granter: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.granter)((c_, f_) => c_.copy(granter = f_))
  }
  final val AMOUNT_FIELD_NUMBER = 1
  final val GAS_LIMIT_FIELD_NUMBER = 2
  final val PAYER_FIELD_NUMBER = 3
  final val GRANTER_FIELD_NUMBER = 4
  def of(
    amount: _root_.scala.Seq[cosmos.base.v1beta1.Coin],
    gasLimit: _root_.scala.Long,
    payer: _root_.scala.Predef.String,
    granter: _root_.scala.Predef.String
  ): _root_.cosmos.tx.v1beta1.Fee = _root_.cosmos.tx.v1beta1.Fee(
    amount,
    gasLimit,
    payer,
    granter
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.tx.v1beta1.Fee])
}
