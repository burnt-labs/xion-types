// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.tx.v1beta1

/** AuxSignerData is the intermediary format that an auxiliary signer (e.g. a
  * tipper) builds and sends to the fee payer (who will build and broadcast the
  * actual tx). AuxSignerData is not a valid tx in itself, and will be rejected
  * by the node if sent directly as-is.
  *
  * @param address
  *   address is the bech32-encoded address of the auxiliary signer. If using
  *   AuxSignerData across different chains, the bech32 prefix of the target
  *   chain (where the final transaction is broadcasted) should be used.
  * @param signDoc
  *   sign_doc is the SIGN_MODE_DIRECT_AUX sign doc that the auxiliary signer
  *   signs. Note: we use the same sign doc even if we're signing with
  *   LEGACY_AMINO_JSON.
  * @param mode
  *   mode is the signing mode of the single signer.
  * @param sig
  *   sig is the signature of the sign doc.
  */
@SerialVersionUID(0L)
final case class AuxSignerData(
    address: _root_.scala.Predef.String = "",
    signDoc: _root_.scala.Option[cosmos.tx.v1beta1.SignDocDirectAux] = _root_.scala.None,
    mode: cosmos.tx.signing.v1beta1.SignMode = cosmos.tx.signing.v1beta1.SignMode.SIGN_MODE_UNSPECIFIED,
    sig: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AuxSignerData] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = address
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      if (signDoc.isDefined) {
        val __value = signDoc.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = mode.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(3, __value)
        }
      };
      
      {
        val __value = sig
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(4, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = address
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      signDoc.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = mode.value
        if (__v != 0) {
          _output__.writeEnum(3, __v)
        }
      };
      {
        val __v = sig
        if (!__v.isEmpty) {
          _output__.writeBytes(4, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withAddress(__v: _root_.scala.Predef.String): AuxSignerData = copy(address = __v)
    def getSignDoc: cosmos.tx.v1beta1.SignDocDirectAux = signDoc.getOrElse(cosmos.tx.v1beta1.SignDocDirectAux.defaultInstance)
    def clearSignDoc: AuxSignerData = copy(signDoc = _root_.scala.None)
    def withSignDoc(__v: cosmos.tx.v1beta1.SignDocDirectAux): AuxSignerData = copy(signDoc = Option(__v))
    def withMode(__v: cosmos.tx.signing.v1beta1.SignMode): AuxSignerData = copy(mode = __v)
    def withSig(__v: _root_.com.google.protobuf.ByteString): AuxSignerData = copy(sig = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = address
          if (__t != "") __t else null
        }
        case 2 => signDoc.orNull
        case 3 => {
          val __t = mode.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 4 => {
          val __t = sig
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(address)
        case 2 => signDoc.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PEnum(mode.scalaValueDescriptor)
        case 4 => _root_.scalapb.descriptors.PByteString(sig)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.tx.v1beta1.AuxSignerData.type = cosmos.tx.v1beta1.AuxSignerData
    // @@protoc_insertion_point(GeneratedMessage[cosmos.tx.v1beta1.AuxSignerData])
}

object AuxSignerData extends scalapb.GeneratedMessageCompanion[cosmos.tx.v1beta1.AuxSignerData] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.tx.v1beta1.AuxSignerData] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.tx.v1beta1.AuxSignerData = {
    var __address: _root_.scala.Predef.String = ""
    var __signDoc: _root_.scala.Option[cosmos.tx.v1beta1.SignDocDirectAux] = _root_.scala.None
    var __mode: cosmos.tx.signing.v1beta1.SignMode = cosmos.tx.signing.v1beta1.SignMode.SIGN_MODE_UNSPECIFIED
    var __sig: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __address = _input__.readStringRequireUtf8()
        case 18 =>
          __signDoc = _root_.scala.Option(__signDoc.fold(_root_.scalapb.LiteParser.readMessage[cosmos.tx.v1beta1.SignDocDirectAux](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 24 =>
          __mode = cosmos.tx.signing.v1beta1.SignMode.fromValue(_input__.readEnum())
        case 34 =>
          __sig = _input__.readBytes()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.tx.v1beta1.AuxSignerData(
        address = __address,
        signDoc = __signDoc,
        mode = __mode,
        sig = __sig,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.tx.v1beta1.AuxSignerData] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.tx.v1beta1.AuxSignerData(
        address = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        signDoc = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[cosmos.tx.v1beta1.SignDocDirectAux]]),
        mode = cosmos.tx.signing.v1beta1.SignMode.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(cosmos.tx.signing.v1beta1.SignMode.SIGN_MODE_UNSPECIFIED.scalaValueDescriptor).number),
        sig = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.tx.v1beta1.TxProto.javaDescriptor.getMessageTypes().get(10)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.tx.v1beta1.TxProto.scalaDescriptor.messages(10)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = cosmos.tx.v1beta1.SignDocDirectAux
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 3 => cosmos.tx.signing.v1beta1.SignMode
    }
  }
  lazy val defaultInstance = cosmos.tx.v1beta1.AuxSignerData(
    address = "",
    signDoc = _root_.scala.None,
    mode = cosmos.tx.signing.v1beta1.SignMode.SIGN_MODE_UNSPECIFIED,
    sig = _root_.com.google.protobuf.ByteString.EMPTY
  )
  implicit class AuxSignerDataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.tx.v1beta1.AuxSignerData]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.tx.v1beta1.AuxSignerData](_l) {
    def address: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.address)((c_, f_) => c_.copy(address = f_))
    def signDoc: _root_.scalapb.lenses.Lens[UpperPB, cosmos.tx.v1beta1.SignDocDirectAux] = field(_.getSignDoc)((c_, f_) => c_.copy(signDoc = _root_.scala.Option(f_)))
    def optionalSignDoc: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[cosmos.tx.v1beta1.SignDocDirectAux]] = field(_.signDoc)((c_, f_) => c_.copy(signDoc = f_))
    def mode: _root_.scalapb.lenses.Lens[UpperPB, cosmos.tx.signing.v1beta1.SignMode] = field(_.mode)((c_, f_) => c_.copy(mode = f_))
    def sig: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.sig)((c_, f_) => c_.copy(sig = f_))
  }
  final val ADDRESS_FIELD_NUMBER = 1
  final val SIGN_DOC_FIELD_NUMBER = 2
  final val MODE_FIELD_NUMBER = 3
  final val SIG_FIELD_NUMBER = 4
  def of(
    address: _root_.scala.Predef.String,
    signDoc: _root_.scala.Option[cosmos.tx.v1beta1.SignDocDirectAux],
    mode: cosmos.tx.signing.v1beta1.SignMode,
    sig: _root_.com.google.protobuf.ByteString
  ): _root_.cosmos.tx.v1beta1.AuxSignerData = _root_.cosmos.tx.v1beta1.AuxSignerData(
    address,
    signDoc,
    mode,
    sig
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.tx.v1beta1.AuxSignerData])
}
