// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.tx.v1beta1

/** SignerInfo describes the public key and signing mode of a single top-level
  * signer.
  *
  * @param publicKey
  *   public_key is the public key of the signer. It is optional for accounts
  *   that already exist in state. If unset, the verifier can use the required &92;
  *   signer address for this position and lookup the public key.
  * @param modeInfo
  *   mode_info describes the signing mode of the signer and is a nested
  *   structure to support nested multisig pubkey's
  * @param sequence
  *   sequence is the sequence of the account, which describes the
  *   number of committed transactions signed by a given address. It is used to
  *   prevent replay attacks.
  */
@SerialVersionUID(0L)
final case class SignerInfo(
    publicKey: _root_.scala.Option[com.google.protobuf.any.Any] = _root_.scala.None,
    modeInfo: _root_.scala.Option[cosmos.tx.v1beta1.ModeInfo] = _root_.scala.None,
    sequence: _root_.scala.Long = 0L,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SignerInfo] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (publicKey.isDefined) {
        val __value = publicKey.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (modeInfo.isDefined) {
        val __value = modeInfo.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = sequence
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(3, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      publicKey.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      modeInfo.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = sequence
        if (__v != 0L) {
          _output__.writeUInt64(3, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getPublicKey: com.google.protobuf.any.Any = publicKey.getOrElse(com.google.protobuf.any.Any.defaultInstance)
    def clearPublicKey: SignerInfo = copy(publicKey = _root_.scala.None)
    def withPublicKey(__v: com.google.protobuf.any.Any): SignerInfo = copy(publicKey = Option(__v))
    def getModeInfo: cosmos.tx.v1beta1.ModeInfo = modeInfo.getOrElse(cosmos.tx.v1beta1.ModeInfo.defaultInstance)
    def clearModeInfo: SignerInfo = copy(modeInfo = _root_.scala.None)
    def withModeInfo(__v: cosmos.tx.v1beta1.ModeInfo): SignerInfo = copy(modeInfo = Option(__v))
    def withSequence(__v: _root_.scala.Long): SignerInfo = copy(sequence = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => publicKey.orNull
        case 2 => modeInfo.orNull
        case 3 => {
          val __t = sequence
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => publicKey.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => modeInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PLong(sequence)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.tx.v1beta1.SignerInfo.type = cosmos.tx.v1beta1.SignerInfo
    // @@protoc_insertion_point(GeneratedMessage[cosmos.tx.v1beta1.SignerInfo])
}

object SignerInfo extends scalapb.GeneratedMessageCompanion[cosmos.tx.v1beta1.SignerInfo] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.tx.v1beta1.SignerInfo] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.tx.v1beta1.SignerInfo = {
    var __publicKey: _root_.scala.Option[com.google.protobuf.any.Any] = _root_.scala.None
    var __modeInfo: _root_.scala.Option[cosmos.tx.v1beta1.ModeInfo] = _root_.scala.None
    var __sequence: _root_.scala.Long = 0L
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __publicKey = _root_.scala.Option(__publicKey.fold(_root_.scalapb.LiteParser.readMessage[com.google.protobuf.any.Any](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __modeInfo = _root_.scala.Option(__modeInfo.fold(_root_.scalapb.LiteParser.readMessage[cosmos.tx.v1beta1.ModeInfo](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 24 =>
          __sequence = _input__.readUInt64()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.tx.v1beta1.SignerInfo(
        publicKey = __publicKey,
        modeInfo = __modeInfo,
        sequence = __sequence,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.tx.v1beta1.SignerInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.tx.v1beta1.SignerInfo(
        publicKey = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.any.Any]]),
        modeInfo = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[cosmos.tx.v1beta1.ModeInfo]]),
        sequence = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.tx.v1beta1.TxProto.javaDescriptor.getMessageTypes().get(6)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.tx.v1beta1.TxProto.scalaDescriptor.messages(6)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.google.protobuf.any.Any
      case 2 => __out = cosmos.tx.v1beta1.ModeInfo
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.tx.v1beta1.SignerInfo(
    publicKey = _root_.scala.None,
    modeInfo = _root_.scala.None,
    sequence = 0L
  )
  implicit class SignerInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.tx.v1beta1.SignerInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.tx.v1beta1.SignerInfo](_l) {
    def publicKey: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.any.Any] = field(_.getPublicKey)((c_, f_) => c_.copy(publicKey = _root_.scala.Option(f_)))
    def optionalPublicKey: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.any.Any]] = field(_.publicKey)((c_, f_) => c_.copy(publicKey = f_))
    def modeInfo: _root_.scalapb.lenses.Lens[UpperPB, cosmos.tx.v1beta1.ModeInfo] = field(_.getModeInfo)((c_, f_) => c_.copy(modeInfo = _root_.scala.Option(f_)))
    def optionalModeInfo: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[cosmos.tx.v1beta1.ModeInfo]] = field(_.modeInfo)((c_, f_) => c_.copy(modeInfo = f_))
    def sequence: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.sequence)((c_, f_) => c_.copy(sequence = f_))
  }
  final val PUBLIC_KEY_FIELD_NUMBER = 1
  final val MODE_INFO_FIELD_NUMBER = 2
  final val SEQUENCE_FIELD_NUMBER = 3
  def of(
    publicKey: _root_.scala.Option[com.google.protobuf.any.Any],
    modeInfo: _root_.scala.Option[cosmos.tx.v1beta1.ModeInfo],
    sequence: _root_.scala.Long
  ): _root_.cosmos.tx.v1beta1.SignerInfo = _root_.cosmos.tx.v1beta1.SignerInfo(
    publicKey,
    modeInfo,
    sequence
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.tx.v1beta1.SignerInfo])
}
