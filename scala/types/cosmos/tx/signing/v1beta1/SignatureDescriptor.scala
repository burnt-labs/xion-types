// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.tx.signing.v1beta1

/** SignatureDescriptor is a convenience type which represents the full data for
  * a signature including the public key of the signer, signing modes and the
  * signature itself. It is primarily used for coordinating signatures between
  * clients.
  *
  * @param publicKey
  *   public_key is the public key of the signer
  * @param sequence
  *   sequence is the sequence of the account, which describes the
  *   number of committed transactions signed by a given address. It is used to prevent
  *   replay attacks.
  */
@SerialVersionUID(0L)
final case class SignatureDescriptor(
    publicKey: _root_.scala.Option[com.google.protobuf.any.Any] = _root_.scala.None,
    data: _root_.scala.Option[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data] = _root_.scala.None,
    sequence: _root_.scala.Long = 0L,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SignatureDescriptor] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (publicKey.isDefined) {
        val __value = publicKey.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (data.isDefined) {
        val __value = data.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = sequence
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(3, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      publicKey.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      data.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = sequence
        if (__v != 0L) {
          _output__.writeUInt64(3, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getPublicKey: com.google.protobuf.any.Any = publicKey.getOrElse(com.google.protobuf.any.Any.defaultInstance)
    def clearPublicKey: SignatureDescriptor = copy(publicKey = _root_.scala.None)
    def withPublicKey(__v: com.google.protobuf.any.Any): SignatureDescriptor = copy(publicKey = Option(__v))
    def getData: cosmos.tx.signing.v1beta1.SignatureDescriptor.Data = data.getOrElse(cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.defaultInstance)
    def clearData: SignatureDescriptor = copy(data = _root_.scala.None)
    def withData(__v: cosmos.tx.signing.v1beta1.SignatureDescriptor.Data): SignatureDescriptor = copy(data = Option(__v))
    def withSequence(__v: _root_.scala.Long): SignatureDescriptor = copy(sequence = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => publicKey.orNull
        case 2 => data.orNull
        case 3 => {
          val __t = sequence
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => publicKey.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => data.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PLong(sequence)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.tx.signing.v1beta1.SignatureDescriptor.type = cosmos.tx.signing.v1beta1.SignatureDescriptor
    // @@protoc_insertion_point(GeneratedMessage[cosmos.tx.signing.v1beta1.SignatureDescriptor])
}

object SignatureDescriptor extends scalapb.GeneratedMessageCompanion[cosmos.tx.signing.v1beta1.SignatureDescriptor] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.tx.signing.v1beta1.SignatureDescriptor] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.tx.signing.v1beta1.SignatureDescriptor = {
    var __publicKey: _root_.scala.Option[com.google.protobuf.any.Any] = _root_.scala.None
    var __data: _root_.scala.Option[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data] = _root_.scala.None
    var __sequence: _root_.scala.Long = 0L
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __publicKey = _root_.scala.Option(__publicKey.fold(_root_.scalapb.LiteParser.readMessage[com.google.protobuf.any.Any](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __data = _root_.scala.Option(__data.fold(_root_.scalapb.LiteParser.readMessage[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 24 =>
          __sequence = _input__.readUInt64()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.tx.signing.v1beta1.SignatureDescriptor(
        publicKey = __publicKey,
        data = __data,
        sequence = __sequence,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.tx.signing.v1beta1.SignatureDescriptor] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.tx.signing.v1beta1.SignatureDescriptor(
        publicKey = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.any.Any]]),
        data = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data]]),
        sequence = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.tx.signing.v1beta1.SigningProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.tx.signing.v1beta1.SigningProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.google.protobuf.any.Any
      case 2 => __out = cosmos.tx.signing.v1beta1.SignatureDescriptor.Data
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.tx.signing.v1beta1.SignatureDescriptor(
    publicKey = _root_.scala.None,
    data = _root_.scala.None,
    sequence = 0L
  )
  /** Data represents signature data
    */
  @SerialVersionUID(0L)
  final case class Data(
      sum: cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Sum = cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Sum.Empty,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Data] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        if (sum.single.isDefined) {
          val __value = sum.single.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (sum.multi.isDefined) {
          val __value = sum.multi.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        sum.single.foreach { __v =>
          val __m = __v
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        sum.multi.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def getSingle: cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single = sum.single.getOrElse(cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single.defaultInstance)
      def withSingle(__v: cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single): Data = copy(sum = cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Sum.Single(__v))
      def getMulti: cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi = sum.multi.getOrElse(cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi.defaultInstance)
      def withMulti(__v: cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi): Data = copy(sum = cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Sum.Multi(__v))
      def clearSum: Data = copy(sum = cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Sum.Empty)
      def withSum(__v: cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Sum): Data = copy(sum = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => sum.single.orNull
          case 2 => sum.multi.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => sum.single.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => sum.multi.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.type = cosmos.tx.signing.v1beta1.SignatureDescriptor.Data
      // @@protoc_insertion_point(GeneratedMessage[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data])
  }
  
  object Data extends scalapb.GeneratedMessageCompanion[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.tx.signing.v1beta1.SignatureDescriptor.Data = {
      var __sum: cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Sum = cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Sum.Empty
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __sum = cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Sum.Single(__sum.single.fold(_root_.scalapb.LiteParser.readMessage[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 18 =>
            __sum = cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Sum.Multi(__sum.multi.fold(_root_.scalapb.LiteParser.readMessage[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      cosmos.tx.signing.v1beta1.SignatureDescriptor.Data(
          sum = __sum,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        cosmos.tx.signing.v1beta1.SignatureDescriptor.Data(
          sum = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single]]).map(cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Sum.Single(_))
              .orElse[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Sum](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi]]).map(cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Sum.Multi(_)))
              .getOrElse(cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Sum.Empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.tx.signing.v1beta1.SignatureDescriptor.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.tx.signing.v1beta1.SignatureDescriptor.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 1 => __out = cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single
        case 2 => __out = cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
      Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
        _root_.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single,
        _root_.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi
      )
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = cosmos.tx.signing.v1beta1.SignatureDescriptor.Data(
      sum = cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Sum.Empty
    )
    sealed trait Sum extends _root_.scalapb.GeneratedOneof {
      def isEmpty: _root_.scala.Boolean = false
      def isDefined: _root_.scala.Boolean = true
      def isSingle: _root_.scala.Boolean = false
      def isMulti: _root_.scala.Boolean = false
      def single: _root_.scala.Option[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single] = _root_.scala.None
      def multi: _root_.scala.Option[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi] = _root_.scala.None
    }
    object Sum {
      @SerialVersionUID(0L)
      case object Empty extends cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Sum {
        type ValueType = _root_.scala.Nothing
        override def isEmpty: _root_.scala.Boolean = true
        override def isDefined: _root_.scala.Boolean = false
        override def number: _root_.scala.Int = 0
        override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
      }
    
      @SerialVersionUID(0L)
      final case class Single(value: cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single) extends cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Sum {
        type ValueType = cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single
        override def isSingle: _root_.scala.Boolean = true
        override def single: _root_.scala.Option[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single] = Some(value)
        override def number: _root_.scala.Int = 1
      }
      @SerialVersionUID(0L)
      final case class Multi(value: cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi) extends cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Sum {
        type ValueType = cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi
        override def isMulti: _root_.scala.Boolean = true
        override def multi: _root_.scala.Option[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi] = Some(value)
        override def number: _root_.scala.Int = 2
      }
    }
    /** Single is the signature data for a single signer
      *
      * @param mode
      *   mode is the signing mode of the single signer
      * @param signature
      *   signature is the raw signature bytes
      */
    @SerialVersionUID(0L)
    final case class Single(
        mode: cosmos.tx.signing.v1beta1.SignMode = cosmos.tx.signing.v1beta1.SignMode.SIGN_MODE_UNSPECIFIED,
        signature: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
        unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
        ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Single] {
        @transient
        private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
        private[this] def __computeSerializedSize(): _root_.scala.Int = {
          var __size = 0
          
          {
            val __value = mode.value
            if (__value != 0) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value)
            }
          };
          
          {
            val __value = signature
            if (!__value.isEmpty) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(2, __value)
            }
          };
          __size += unknownFields.serializedSize
          __size
        }
        override def serializedSize: _root_.scala.Int = {
          var __size = __serializedSizeMemoized
          if (__size == 0) {
            __size = __computeSerializedSize() + 1
            __serializedSizeMemoized = __size
          }
          __size - 1
          
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          {
            val __v = mode.value
            if (__v != 0) {
              _output__.writeEnum(1, __v)
            }
          };
          {
            val __v = signature
            if (!__v.isEmpty) {
              _output__.writeBytes(2, __v)
            }
          };
          unknownFields.writeTo(_output__)
        }
        def withMode(__v: cosmos.tx.signing.v1beta1.SignMode): Single = copy(mode = __v)
        def withSignature(__v: _root_.com.google.protobuf.ByteString): Single = copy(signature = __v)
        def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
        def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => {
              val __t = mode.javaValueDescriptor
              if (__t.getNumber() != 0) __t else null
            }
            case 2 => {
              val __t = signature
              if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
            }
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PEnum(mode.scalaValueDescriptor)
            case 2 => _root_.scalapb.descriptors.PByteString(signature)
          }
        }
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion: cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single.type = cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single
        // @@protoc_insertion_point(GeneratedMessage[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single])
    }
    
    object Single extends scalapb.GeneratedMessageCompanion[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single] = this
      def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single = {
        var __mode: cosmos.tx.signing.v1beta1.SignMode = cosmos.tx.signing.v1beta1.SignMode.SIGN_MODE_UNSPECIFIED
        var __signature: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
        var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __mode = cosmos.tx.signing.v1beta1.SignMode.fromValue(_input__.readEnum())
            case 18 =>
              __signature = _input__.readBytes()
            case tag =>
              if (_unknownFields__ == null) {
                _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
              }
              _unknownFields__.parseField(tag, _input__)
          }
        }
        cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single(
            mode = __mode,
            signature = __signature,
            unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
          cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single(
            mode = cosmos.tx.signing.v1beta1.SignMode.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(cosmos.tx.signing.v1beta1.SignMode.SIGN_MODE_UNSPECIFIED.scalaValueDescriptor).number),
            signature = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.javaDescriptor.getNestedTypes().get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.scalaDescriptor.nestedMessages(0)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => cosmos.tx.signing.v1beta1.SignMode
        }
      }
      lazy val defaultInstance = cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single(
        mode = cosmos.tx.signing.v1beta1.SignMode.SIGN_MODE_UNSPECIFIED,
        signature = _root_.com.google.protobuf.ByteString.EMPTY
      )
      implicit class SingleLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single](_l) {
        def mode: _root_.scalapb.lenses.Lens[UpperPB, cosmos.tx.signing.v1beta1.SignMode] = field(_.mode)((c_, f_) => c_.copy(mode = f_))
        def signature: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.signature)((c_, f_) => c_.copy(signature = f_))
      }
      final val MODE_FIELD_NUMBER = 1
      final val SIGNATURE_FIELD_NUMBER = 2
      def of(
        mode: cosmos.tx.signing.v1beta1.SignMode,
        signature: _root_.com.google.protobuf.ByteString
      ): _root_.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single = _root_.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single(
        mode,
        signature
      )
      // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single])
    }
    
    /** Multi is the signature data for a multisig public key
      *
      * @param bitarray
      *   bitarray specifies which keys within the multisig are signing
      * @param signatures
      *   signatures is the signatures of the multi-signature
      */
    @SerialVersionUID(0L)
    final case class Multi(
        bitarray: _root_.scala.Option[cosmos.crypto.multisig.v1beta1.CompactBitArray] = _root_.scala.None,
        signatures: _root_.scala.Seq[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data] = _root_.scala.Seq.empty,
        unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
        ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Multi] {
        @transient
        private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
        private[this] def __computeSerializedSize(): _root_.scala.Int = {
          var __size = 0
          if (bitarray.isDefined) {
            val __value = bitarray.get
            __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
          };
          signatures.foreach { __item =>
            val __value = __item
            __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
          }
          __size += unknownFields.serializedSize
          __size
        }
        override def serializedSize: _root_.scala.Int = {
          var __size = __serializedSizeMemoized
          if (__size == 0) {
            __size = __computeSerializedSize() + 1
            __serializedSizeMemoized = __size
          }
          __size - 1
          
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          bitarray.foreach { __v =>
            val __m = __v
            _output__.writeTag(1, 2)
            _output__.writeUInt32NoTag(__m.serializedSize)
            __m.writeTo(_output__)
          };
          signatures.foreach { __v =>
            val __m = __v
            _output__.writeTag(2, 2)
            _output__.writeUInt32NoTag(__m.serializedSize)
            __m.writeTo(_output__)
          };
          unknownFields.writeTo(_output__)
        }
        def getBitarray: cosmos.crypto.multisig.v1beta1.CompactBitArray = bitarray.getOrElse(cosmos.crypto.multisig.v1beta1.CompactBitArray.defaultInstance)
        def clearBitarray: Multi = copy(bitarray = _root_.scala.None)
        def withBitarray(__v: cosmos.crypto.multisig.v1beta1.CompactBitArray): Multi = copy(bitarray = Option(__v))
        def clearSignatures = copy(signatures = _root_.scala.Seq.empty)
        def addSignatures(__vs: cosmos.tx.signing.v1beta1.SignatureDescriptor.Data *): Multi = addAllSignatures(__vs)
        def addAllSignatures(__vs: Iterable[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data]): Multi = copy(signatures = signatures ++ __vs)
        def withSignatures(__v: _root_.scala.Seq[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data]): Multi = copy(signatures = __v)
        def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
        def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => bitarray.orNull
            case 2 => signatures
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => bitarray.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 2 => _root_.scalapb.descriptors.PRepeated(signatures.iterator.map(_.toPMessage).toVector)
          }
        }
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion: cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi.type = cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi
        // @@protoc_insertion_point(GeneratedMessage[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi])
    }
    
    object Multi extends scalapb.GeneratedMessageCompanion[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi] = this
      def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi = {
        var __bitarray: _root_.scala.Option[cosmos.crypto.multisig.v1beta1.CompactBitArray] = _root_.scala.None
        val __signatures: _root_.scala.collection.immutable.VectorBuilder[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data]
        var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __bitarray = _root_.scala.Option(__bitarray.fold(_root_.scalapb.LiteParser.readMessage[cosmos.crypto.multisig.v1beta1.CompactBitArray](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
            case 18 =>
              __signatures += _root_.scalapb.LiteParser.readMessage[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data](_input__)
            case tag =>
              if (_unknownFields__ == null) {
                _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
              }
              _unknownFields__.parseField(tag, _input__)
          }
        }
        cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi(
            bitarray = __bitarray,
            signatures = __signatures.result(),
            unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
          cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi(
            bitarray = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[cosmos.crypto.multisig.v1beta1.CompactBitArray]]),
            signatures = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data]]).getOrElse(_root_.scala.Seq.empty)
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.javaDescriptor.getNestedTypes().get(1)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.scalaDescriptor.nestedMessages(1)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
        var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
        (__number: @_root_.scala.unchecked) match {
          case 1 => __out = cosmos.crypto.multisig.v1beta1.CompactBitArray
          case 2 => __out = cosmos.tx.signing.v1beta1.SignatureDescriptor.Data
        }
        __out
      }
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi(
        bitarray = _root_.scala.None,
        signatures = _root_.scala.Seq.empty
      )
      implicit class MultiLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi](_l) {
        def bitarray: _root_.scalapb.lenses.Lens[UpperPB, cosmos.crypto.multisig.v1beta1.CompactBitArray] = field(_.getBitarray)((c_, f_) => c_.copy(bitarray = _root_.scala.Option(f_)))
        def optionalBitarray: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[cosmos.crypto.multisig.v1beta1.CompactBitArray]] = field(_.bitarray)((c_, f_) => c_.copy(bitarray = f_))
        def signatures: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data]] = field(_.signatures)((c_, f_) => c_.copy(signatures = f_))
      }
      final val BITARRAY_FIELD_NUMBER = 1
      final val SIGNATURES_FIELD_NUMBER = 2
      def of(
        bitarray: _root_.scala.Option[cosmos.crypto.multisig.v1beta1.CompactBitArray],
        signatures: _root_.scala.Seq[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data]
      ): _root_.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi = _root_.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi(
        bitarray,
        signatures
      )
      // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi])
    }
    
    implicit class DataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.tx.signing.v1beta1.SignatureDescriptor.Data]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.tx.signing.v1beta1.SignatureDescriptor.Data](_l) {
      def single: _root_.scalapb.lenses.Lens[UpperPB, cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single] = field(_.getSingle)((c_, f_) => c_.copy(sum = cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Sum.Single(f_)))
      def multi: _root_.scalapb.lenses.Lens[UpperPB, cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi] = field(_.getMulti)((c_, f_) => c_.copy(sum = cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Sum.Multi(f_)))
      def sum: _root_.scalapb.lenses.Lens[UpperPB, cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Sum] = field(_.sum)((c_, f_) => c_.copy(sum = f_))
    }
    final val SINGLE_FIELD_NUMBER = 1
    final val MULTI_FIELD_NUMBER = 2
    def of(
      sum: cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Sum
    ): _root_.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data = _root_.cosmos.tx.signing.v1beta1.SignatureDescriptor.Data(
      sum
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data])
  }
  
  implicit class SignatureDescriptorLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.tx.signing.v1beta1.SignatureDescriptor]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.tx.signing.v1beta1.SignatureDescriptor](_l) {
    def publicKey: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.any.Any] = field(_.getPublicKey)((c_, f_) => c_.copy(publicKey = _root_.scala.Option(f_)))
    def optionalPublicKey: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.any.Any]] = field(_.publicKey)((c_, f_) => c_.copy(publicKey = f_))
    def data: _root_.scalapb.lenses.Lens[UpperPB, cosmos.tx.signing.v1beta1.SignatureDescriptor.Data] = field(_.getData)((c_, f_) => c_.copy(data = _root_.scala.Option(f_)))
    def optionalData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data]] = field(_.data)((c_, f_) => c_.copy(data = f_))
    def sequence: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.sequence)((c_, f_) => c_.copy(sequence = f_))
  }
  final val PUBLIC_KEY_FIELD_NUMBER = 1
  final val DATA_FIELD_NUMBER = 2
  final val SEQUENCE_FIELD_NUMBER = 3
  def of(
    publicKey: _root_.scala.Option[com.google.protobuf.any.Any],
    data: _root_.scala.Option[cosmos.tx.signing.v1beta1.SignatureDescriptor.Data],
    sequence: _root_.scala.Long
  ): _root_.cosmos.tx.signing.v1beta1.SignatureDescriptor = _root_.cosmos.tx.signing.v1beta1.SignatureDescriptor(
    publicKey,
    data,
    sequence
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.tx.signing.v1beta1.SignatureDescriptor])
}
