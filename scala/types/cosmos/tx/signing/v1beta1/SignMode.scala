// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.tx.signing.v1beta1

/** SignMode represents a signing mode with its own security guarantees.
  *
  * This enum should be considered a registry of all known sign modes
  * in the Cosmos ecosystem. Apps are not expected to support all known
  * sign modes. Apps that would like to support custom  sign modes are
  * encouraged to open a small PR against this file to add a new case
  * to this SignMode enum describing their sign mode so that different
  * apps have a consistent version of this enum.
  */
sealed abstract class SignMode(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
  type EnumType = cosmos.tx.signing.v1beta1.SignMode
  type RecognizedType = cosmos.tx.signing.v1beta1.SignMode.Recognized
  def isSignModeUnspecified: _root_.scala.Boolean = false
  def isSignModeDirect: _root_.scala.Boolean = false
  def isSignModeTextual: _root_.scala.Boolean = false
  def isSignModeDirectAux: _root_.scala.Boolean = false
  def isSignModeLegacyAminoJson: _root_.scala.Boolean = false
  def isSignModeEip191: _root_.scala.Boolean = false
  def companion: _root_.scalapb.GeneratedEnumCompanion[SignMode] = cosmos.tx.signing.v1beta1.SignMode
  final def asRecognized: _root_.scala.Option[cosmos.tx.signing.v1beta1.SignMode.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[cosmos.tx.signing.v1beta1.SignMode.Recognized])
}

object SignMode extends _root_.scalapb.GeneratedEnumCompanion[SignMode] {
  sealed trait Recognized extends SignMode
  implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[SignMode] = this
  
  /** SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
    * rejected.
    */
  @SerialVersionUID(0L)
  case object SIGN_MODE_UNSPECIFIED extends SignMode(0) with SignMode.Recognized {
    val index = 0
    val name = "SIGN_MODE_UNSPECIFIED"
    override def isSignModeUnspecified: _root_.scala.Boolean = true
  }
  
  /** SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
    * verified with raw bytes from Tx.
    */
  @SerialVersionUID(0L)
  case object SIGN_MODE_DIRECT extends SignMode(1) with SignMode.Recognized {
    val index = 1
    val name = "SIGN_MODE_DIRECT"
    override def isSignModeDirect: _root_.scala.Boolean = true
  }
  
  /** SIGN_MODE_TEXTUAL is a future signing mode that will verify some
    * human-readable textual representation on top of the binary representation
    * from SIGN_MODE_DIRECT.
    *
    * Since: cosmos-sdk 0.50
    */
  @SerialVersionUID(0L)
  case object SIGN_MODE_TEXTUAL extends SignMode(2) with SignMode.Recognized {
    val index = 2
    val name = "SIGN_MODE_TEXTUAL"
    override def isSignModeTextual: _root_.scala.Boolean = true
  }
  
  /** SIGN_MODE_DIRECT_AUX specifies a signing mode which uses
    * SignDocDirectAux. As opposed to SIGN_MODE_DIRECT, this sign mode does not
    * require signers signing over other signers' `signer_info`.
    *
    * Since: cosmos-sdk 0.46
    */
  @SerialVersionUID(0L)
  case object SIGN_MODE_DIRECT_AUX extends SignMode(3) with SignMode.Recognized {
    val index = 3
    val name = "SIGN_MODE_DIRECT_AUX"
    override def isSignModeDirectAux: _root_.scala.Boolean = true
  }
  
  /** SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
    * Amino JSON and will be removed in the future.
    */
  @SerialVersionUID(0L)
  case object SIGN_MODE_LEGACY_AMINO_JSON extends SignMode(127) with SignMode.Recognized {
    val index = 4
    val name = "SIGN_MODE_LEGACY_AMINO_JSON"
    override def isSignModeLegacyAminoJson: _root_.scala.Boolean = true
  }
  
  /** SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos
    * SDK. Ref: https://eips.ethereum.org/EIPS/eip-191
    *
    * Currently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant,
    * but is not implemented on the SDK by default. To enable EIP-191, you need
    * to pass a custom `TxConfig` that has an implementation of
    * `SignModeHandler` for EIP-191. The SDK may decide to fully support
    * EIP-191 in the future.
    *
    * Since: cosmos-sdk 0.45.2
    */
  @SerialVersionUID(0L)
  case object SIGN_MODE_EIP_191 extends SignMode(191) with SignMode.Recognized {
    val index = 5
    val name = "SIGN_MODE_EIP_191"
    override def isSignModeEip191: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends SignMode(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
  lazy val values: scala.collection.immutable.Seq[ValueType] = scala.collection.immutable.Seq(SIGN_MODE_UNSPECIFIED, SIGN_MODE_DIRECT, SIGN_MODE_TEXTUAL, SIGN_MODE_DIRECT_AUX, SIGN_MODE_LEGACY_AMINO_JSON, SIGN_MODE_EIP_191)
  def fromValue(__value: _root_.scala.Int): SignMode = __value match {
    case 0 => SIGN_MODE_UNSPECIFIED
    case 1 => SIGN_MODE_DIRECT
    case 2 => SIGN_MODE_TEXTUAL
    case 3 => SIGN_MODE_DIRECT_AUX
    case 127 => SIGN_MODE_LEGACY_AMINO_JSON
    case 191 => SIGN_MODE_EIP_191
    case __other => Unrecognized(__other)
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = cosmos.tx.signing.v1beta1.SigningProto.javaDescriptor.getEnumTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = cosmos.tx.signing.v1beta1.SigningProto.scalaDescriptor.enums(0)
}