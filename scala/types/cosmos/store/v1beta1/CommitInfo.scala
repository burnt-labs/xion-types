// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cosmos.store.v1beta1

/** CommitInfo defines commit information used by the multi-store when committing
  * a version/height.
  */
@SerialVersionUID(0L)
final case class CommitInfo(
    version: _root_.scala.Long = 0L,
    storeInfos: _root_.scala.Seq[cosmos.store.v1beta1.StoreInfo] = _root_.scala.Seq.empty,
    timestamp: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CommitInfo] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = version
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
        }
      };
      storeInfos.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (timestamp.isDefined) {
        val __value = timestamp.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = version
        if (__v != 0L) {
          _output__.writeInt64(1, __v)
        }
      };
      storeInfos.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      timestamp.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withVersion(__v: _root_.scala.Long): CommitInfo = copy(version = __v)
    def clearStoreInfos = copy(storeInfos = _root_.scala.Seq.empty)
    def addStoreInfos(__vs: cosmos.store.v1beta1.StoreInfo *): CommitInfo = addAllStoreInfos(__vs)
    def addAllStoreInfos(__vs: Iterable[cosmos.store.v1beta1.StoreInfo]): CommitInfo = copy(storeInfos = storeInfos ++ __vs)
    def withStoreInfos(__v: _root_.scala.Seq[cosmos.store.v1beta1.StoreInfo]): CommitInfo = copy(storeInfos = __v)
    def getTimestamp: com.google.protobuf.timestamp.Timestamp = timestamp.getOrElse(com.google.protobuf.timestamp.Timestamp.defaultInstance)
    def clearTimestamp: CommitInfo = copy(timestamp = _root_.scala.None)
    def withTimestamp(__v: com.google.protobuf.timestamp.Timestamp): CommitInfo = copy(timestamp = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = version
          if (__t != 0L) __t else null
        }
        case 2 => storeInfos
        case 3 => timestamp.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(version)
        case 2 => _root_.scalapb.descriptors.PRepeated(storeInfos.iterator.map(_.toPMessage).toVector)
        case 3 => timestamp.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cosmos.store.v1beta1.CommitInfo.type = cosmos.store.v1beta1.CommitInfo
    // @@protoc_insertion_point(GeneratedMessage[cosmos.store.v1beta1.CommitInfo])
}

object CommitInfo extends scalapb.GeneratedMessageCompanion[cosmos.store.v1beta1.CommitInfo] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cosmos.store.v1beta1.CommitInfo] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cosmos.store.v1beta1.CommitInfo = {
    var __version: _root_.scala.Long = 0L
    val __storeInfos: _root_.scala.collection.immutable.VectorBuilder[cosmos.store.v1beta1.StoreInfo] = new _root_.scala.collection.immutable.VectorBuilder[cosmos.store.v1beta1.StoreInfo]
    var __timestamp: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __version = _input__.readInt64()
        case 18 =>
          __storeInfos += _root_.scalapb.LiteParser.readMessage[cosmos.store.v1beta1.StoreInfo](_input__)
        case 26 =>
          __timestamp = _root_.scala.Option(__timestamp.fold(_root_.scalapb.LiteParser.readMessage[com.google.protobuf.timestamp.Timestamp](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cosmos.store.v1beta1.CommitInfo(
        version = __version,
        storeInfos = __storeInfos.result(),
        timestamp = __timestamp,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cosmos.store.v1beta1.CommitInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cosmos.store.v1beta1.CommitInfo(
        version = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        storeInfos = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[cosmos.store.v1beta1.StoreInfo]]).getOrElse(_root_.scala.Seq.empty),
        timestamp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.timestamp.Timestamp]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = cosmos.store.v1beta1.CommitInfoProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = cosmos.store.v1beta1.CommitInfoProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = cosmos.store.v1beta1.StoreInfo
      case 3 => __out = com.google.protobuf.timestamp.Timestamp
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cosmos.store.v1beta1.CommitInfo(
    version = 0L,
    storeInfos = _root_.scala.Seq.empty,
    timestamp = _root_.scala.None
  )
  implicit class CommitInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cosmos.store.v1beta1.CommitInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cosmos.store.v1beta1.CommitInfo](_l) {
    def version: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.version)((c_, f_) => c_.copy(version = f_))
    def storeInfos: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[cosmos.store.v1beta1.StoreInfo]] = field(_.storeInfos)((c_, f_) => c_.copy(storeInfos = f_))
    def timestamp: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.timestamp.Timestamp] = field(_.getTimestamp)((c_, f_) => c_.copy(timestamp = _root_.scala.Option(f_)))
    def optionalTimestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.timestamp.Timestamp]] = field(_.timestamp)((c_, f_) => c_.copy(timestamp = f_))
  }
  final val VERSION_FIELD_NUMBER = 1
  final val STORE_INFOS_FIELD_NUMBER = 2
  final val TIMESTAMP_FIELD_NUMBER = 3
  def of(
    version: _root_.scala.Long,
    storeInfos: _root_.scala.Seq[cosmos.store.v1beta1.StoreInfo],
    timestamp: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp]
  ): _root_.cosmos.store.v1beta1.CommitInfo = _root_.cosmos.store.v1beta1.CommitInfo(
    version,
    storeInfos,
    timestamp
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[cosmos.store.v1beta1.CommitInfo])
}
