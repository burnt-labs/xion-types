// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/upgrade/v1beta1/upgrade.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/upgrade/v1beta1/Upgrade.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(CancelSoftwareUpgradeProposal);
GPBObjCClassDeclaration(GPBAny);
GPBObjCClassDeclaration(GPBTimestamp);
GPBObjCClassDeclaration(ModuleVersion);
GPBObjCClassDeclaration(Plan);
GPBObjCClassDeclaration(SoftwareUpgradeProposal);

#pragma mark - UpgradeRoot

@implementation UpgradeRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription UpgradeRoot_FileDescription = {
  .package = "cosmos.upgrade.v1beta1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Plan

@implementation Plan

@dynamic name;
@dynamic hasTime, time;
@dynamic height;
@dynamic info;
@dynamic hasUpgradedClientState, upgradedClientState;

typedef struct Plan__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  GPBTimestamp *time;
  NSString *info;
  GPBAny *upgradedClientState;
  int64_t height;
} Plan__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = Plan_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Plan__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = Plan_FieldNumber_Time,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Plan__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "height",
        .dataTypeSpecific.clazz = Nil,
        .number = Plan_FieldNumber_Height,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Plan__storage_, height),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "info",
        .dataTypeSpecific.clazz = Nil,
        .number = Plan_FieldNumber_Info,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Plan__storage_, info),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "upgradedClientState",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = Plan_FieldNumber_UpgradedClientState,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Plan__storage_, upgradedClientState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Plan)
                                   messageName:@"Plan"
                               fileDescription:&UpgradeRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Plan__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SoftwareUpgradeProposal

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-implementations"

@implementation SoftwareUpgradeProposal

@dynamic title;
@dynamic description_p;
@dynamic hasPlan, plan;

typedef struct SoftwareUpgradeProposal__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  NSString *description_p;
  Plan *plan;
} SoftwareUpgradeProposal__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = SoftwareUpgradeProposal_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SoftwareUpgradeProposal__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SoftwareUpgradeProposal_FieldNumber_Description_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SoftwareUpgradeProposal__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "plan",
        .dataTypeSpecific.clazz = GPBObjCClass(Plan),
        .number = SoftwareUpgradeProposal_FieldNumber_Plan,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SoftwareUpgradeProposal__storage_, plan),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(SoftwareUpgradeProposal)
                                   messageName:@"SoftwareUpgradeProposal"
                               fileDescription:&UpgradeRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SoftwareUpgradeProposal__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma clang diagnostic pop

#pragma mark - CancelSoftwareUpgradeProposal

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-implementations"

@implementation CancelSoftwareUpgradeProposal

@dynamic title;
@dynamic description_p;

typedef struct CancelSoftwareUpgradeProposal__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  NSString *description_p;
} CancelSoftwareUpgradeProposal__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = CancelSoftwareUpgradeProposal_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CancelSoftwareUpgradeProposal__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = CancelSoftwareUpgradeProposal_FieldNumber_Description_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CancelSoftwareUpgradeProposal__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(CancelSoftwareUpgradeProposal)
                                   messageName:@"CancelSoftwareUpgradeProposal"
                               fileDescription:&UpgradeRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CancelSoftwareUpgradeProposal__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma clang diagnostic pop

#pragma mark - ModuleVersion

@implementation ModuleVersion

@dynamic name;
@dynamic version;

typedef struct ModuleVersion__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  uint64_t version;
} ModuleVersion__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = ModuleVersion_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ModuleVersion__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.clazz = Nil,
        .number = ModuleVersion_FieldNumber_Version,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ModuleVersion__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ModuleVersion)
                                   messageName:@"ModuleVersion"
                               fileDescription:&UpgradeRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ModuleVersion__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
