// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/slashing/v1beta1/genesis.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/slashing/v1beta1/Genesis.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(GenesisState);
GPBObjCClassDeclaration(MissedBlock);
GPBObjCClassDeclaration(Params);
GPBObjCClassDeclaration(SigningInfo);
GPBObjCClassDeclaration(ValidatorMissedBlocks);
GPBObjCClassDeclaration(ValidatorSigningInfo);

#pragma mark - GenesisRoot

@implementation GenesisRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription GenesisRoot_FileDescription = {
  .package = "cosmos.slashing.v1beta1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - GenesisState

@implementation GenesisState

@dynamic hasParams, params;
@dynamic signingInfosArray, signingInfosArray_Count;
@dynamic missedBlocksArray, missedBlocksArray_Count;

typedef struct GenesisState__storage_ {
  uint32_t _has_storage_[1];
  Params *params;
  NSMutableArray *signingInfosArray;
  NSMutableArray *missedBlocksArray;
} GenesisState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "params",
        .dataTypeSpecific.clazz = GPBObjCClass(Params),
        .number = GenesisState_FieldNumber_Params,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GenesisState__storage_, params),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signingInfosArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SigningInfo),
        .number = GenesisState_FieldNumber_SigningInfosArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GenesisState__storage_, signingInfosArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "missedBlocksArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ValidatorMissedBlocks),
        .number = GenesisState_FieldNumber_MissedBlocksArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GenesisState__storage_, missedBlocksArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(GenesisState)
                                   messageName:@"GenesisState"
                               fileDescription:&GenesisRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GenesisState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SigningInfo

@implementation SigningInfo

@dynamic address;
@dynamic hasValidatorSigningInfo, validatorSigningInfo;

typedef struct SigningInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
  ValidatorSigningInfo *validatorSigningInfo;
} SigningInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = SigningInfo_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SigningInfo__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "validatorSigningInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(ValidatorSigningInfo),
        .number = SigningInfo_FieldNumber_ValidatorSigningInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SigningInfo__storage_, validatorSigningInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(SigningInfo)
                                   messageName:@"SigningInfo"
                               fileDescription:&GenesisRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SigningInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ValidatorMissedBlocks

@implementation ValidatorMissedBlocks

@dynamic address;
@dynamic missedBlocksArray, missedBlocksArray_Count;

typedef struct ValidatorMissedBlocks__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
  NSMutableArray *missedBlocksArray;
} ValidatorMissedBlocks__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = ValidatorMissedBlocks_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ValidatorMissedBlocks__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "missedBlocksArray",
        .dataTypeSpecific.clazz = GPBObjCClass(MissedBlock),
        .number = ValidatorMissedBlocks_FieldNumber_MissedBlocksArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ValidatorMissedBlocks__storage_, missedBlocksArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ValidatorMissedBlocks)
                                   messageName:@"ValidatorMissedBlocks"
                               fileDescription:&GenesisRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ValidatorMissedBlocks__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MissedBlock

@implementation MissedBlock

@dynamic index;
@dynamic missed;

typedef struct MissedBlock__storage_ {
  uint32_t _has_storage_[1];
  int64_t index;
} MissedBlock__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "index",
        .dataTypeSpecific.clazz = Nil,
        .number = MissedBlock_FieldNumber_Index,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MissedBlock__storage_, index),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "missed",
        .dataTypeSpecific.clazz = Nil,
        .number = MissedBlock_FieldNumber_Missed,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MissedBlock)
                                   messageName:@"MissedBlock"
                               fileDescription:&GenesisRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MissedBlock__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
