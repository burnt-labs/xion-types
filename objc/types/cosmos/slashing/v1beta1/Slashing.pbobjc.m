// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/slashing/v1beta1/slashing.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/slashing/v1beta1/Slashing.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(GPBDuration);
GPBObjCClassDeclaration(GPBTimestamp);
GPBObjCClassDeclaration(Params);
GPBObjCClassDeclaration(ValidatorSigningInfo);

#pragma mark - SlashingRoot

@implementation SlashingRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription SlashingRoot_FileDescription = {
  .package = "cosmos.slashing.v1beta1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - ValidatorSigningInfo

@implementation ValidatorSigningInfo

@dynamic address;
@dynamic startHeight;
@dynamic indexOffset;
@dynamic hasJailedUntil, jailedUntil;
@dynamic tombstoned;
@dynamic missedBlocksCounter;

typedef struct ValidatorSigningInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
  GPBTimestamp *jailedUntil;
  int64_t startHeight;
  int64_t indexOffset;
  int64_t missedBlocksCounter;
} ValidatorSigningInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = ValidatorSigningInfo_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ValidatorSigningInfo__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startHeight",
        .dataTypeSpecific.clazz = Nil,
        .number = ValidatorSigningInfo_FieldNumber_StartHeight,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ValidatorSigningInfo__storage_, startHeight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "indexOffset",
        .dataTypeSpecific.clazz = Nil,
        .number = ValidatorSigningInfo_FieldNumber_IndexOffset,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ValidatorSigningInfo__storage_, indexOffset),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "jailedUntil",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = ValidatorSigningInfo_FieldNumber_JailedUntil,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ValidatorSigningInfo__storage_, jailedUntil),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tombstoned",
        .dataTypeSpecific.clazz = Nil,
        .number = ValidatorSigningInfo_FieldNumber_Tombstoned,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "missedBlocksCounter",
        .dataTypeSpecific.clazz = Nil,
        .number = ValidatorSigningInfo_FieldNumber_MissedBlocksCounter,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ValidatorSigningInfo__storage_, missedBlocksCounter),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ValidatorSigningInfo)
                                   messageName:@"ValidatorSigningInfo"
                               fileDescription:&SlashingRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ValidatorSigningInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Params

@implementation Params

@dynamic signedBlocksWindow;
@dynamic minSignedPerWindow;
@dynamic hasDowntimeJailDuration, downtimeJailDuration;
@dynamic slashFractionDoubleSign;
@dynamic slashFractionDowntime;

typedef struct Params__storage_ {
  uint32_t _has_storage_[1];
  NSData *minSignedPerWindow;
  GPBDuration *downtimeJailDuration;
  NSData *slashFractionDoubleSign;
  NSData *slashFractionDowntime;
  int64_t signedBlocksWindow;
} Params__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "signedBlocksWindow",
        .dataTypeSpecific.clazz = Nil,
        .number = Params_FieldNumber_SignedBlocksWindow,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Params__storage_, signedBlocksWindow),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "minSignedPerWindow",
        .dataTypeSpecific.clazz = Nil,
        .number = Params_FieldNumber_MinSignedPerWindow,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Params__storage_, minSignedPerWindow),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "downtimeJailDuration",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBDuration),
        .number = Params_FieldNumber_DowntimeJailDuration,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Params__storage_, downtimeJailDuration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "slashFractionDoubleSign",
        .dataTypeSpecific.clazz = Nil,
        .number = Params_FieldNumber_SlashFractionDoubleSign,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Params__storage_, slashFractionDoubleSign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "slashFractionDowntime",
        .dataTypeSpecific.clazz = Nil,
        .number = Params_FieldNumber_SlashFractionDowntime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Params__storage_, slashFractionDowntime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Params)
                                   messageName:@"Params"
                               fileDescription:&SlashingRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Params__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
