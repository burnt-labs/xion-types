// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/slashing/v1beta1/query.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/slashing/v1beta1/Query.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(PageRequest);
GPBObjCClassDeclaration(PageResponse);
GPBObjCClassDeclaration(Params);
GPBObjCClassDeclaration(QueryParamsRequest);
GPBObjCClassDeclaration(QueryParamsResponse);
GPBObjCClassDeclaration(QuerySigningInfoRequest);
GPBObjCClassDeclaration(QuerySigningInfoResponse);
GPBObjCClassDeclaration(QuerySigningInfosRequest);
GPBObjCClassDeclaration(QuerySigningInfosResponse);
GPBObjCClassDeclaration(ValidatorSigningInfo);

#pragma mark - QueryRoot

@implementation QueryRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription QueryRoot_FileDescription = {
  .package = "cosmos.slashing.v1beta1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - QueryParamsRequest

@implementation QueryParamsRequest


typedef struct QueryParamsRequest__storage_ {
  uint32_t _has_storage_[1];
} QueryParamsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryParamsRequest)
                                   messageName:@"QueryParamsRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(QueryParamsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryParamsResponse

@implementation QueryParamsResponse

@dynamic hasParams, params;

typedef struct QueryParamsResponse__storage_ {
  uint32_t _has_storage_[1];
  Params *params;
} QueryParamsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "params",
        .dataTypeSpecific.clazz = GPBObjCClass(Params),
        .number = QueryParamsResponse_FieldNumber_Params,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryParamsResponse__storage_, params),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryParamsResponse)
                                   messageName:@"QueryParamsResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryParamsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QuerySigningInfoRequest

@implementation QuerySigningInfoRequest

@dynamic consAddress;

typedef struct QuerySigningInfoRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *consAddress;
} QuerySigningInfoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "consAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = QuerySigningInfoRequest_FieldNumber_ConsAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QuerySigningInfoRequest__storage_, consAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QuerySigningInfoRequest)
                                   messageName:@"QuerySigningInfoRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QuerySigningInfoRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QuerySigningInfoResponse

@implementation QuerySigningInfoResponse

@dynamic hasValSigningInfo, valSigningInfo;

typedef struct QuerySigningInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  ValidatorSigningInfo *valSigningInfo;
} QuerySigningInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "valSigningInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(ValidatorSigningInfo),
        .number = QuerySigningInfoResponse_FieldNumber_ValSigningInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QuerySigningInfoResponse__storage_, valSigningInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QuerySigningInfoResponse)
                                   messageName:@"QuerySigningInfoResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QuerySigningInfoResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QuerySigningInfosRequest

@implementation QuerySigningInfosRequest

@dynamic hasPagination, pagination;

typedef struct QuerySigningInfosRequest__storage_ {
  uint32_t _has_storage_[1];
  PageRequest *pagination;
} QuerySigningInfosRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageRequest),
        .number = QuerySigningInfosRequest_FieldNumber_Pagination,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QuerySigningInfosRequest__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QuerySigningInfosRequest)
                                   messageName:@"QuerySigningInfosRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QuerySigningInfosRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QuerySigningInfosResponse

@implementation QuerySigningInfosResponse

@dynamic infoArray, infoArray_Count;
@dynamic hasPagination, pagination;

typedef struct QuerySigningInfosResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *infoArray;
  PageResponse *pagination;
} QuerySigningInfosResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "infoArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ValidatorSigningInfo),
        .number = QuerySigningInfosResponse_FieldNumber_InfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QuerySigningInfosResponse__storage_, infoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageResponse),
        .number = QuerySigningInfosResponse_FieldNumber_Pagination,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QuerySigningInfosResponse__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QuerySigningInfosResponse)
                                   messageName:@"QuerySigningInfosResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QuerySigningInfosResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
