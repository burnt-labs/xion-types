// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/vesting/v1beta1/vesting.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/vesting/v1beta1/Vesting.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(BaseAccount);
GPBObjCClassDeclaration(BaseVestingAccount);
GPBObjCClassDeclaration(Coin);
GPBObjCClassDeclaration(ContinuousVestingAccount);
GPBObjCClassDeclaration(DelayedVestingAccount);
GPBObjCClassDeclaration(Period);
GPBObjCClassDeclaration(PeriodicVestingAccount);
GPBObjCClassDeclaration(PermanentLockedAccount);

#pragma mark - VestingRoot

@implementation VestingRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription VestingRoot_FileDescription = {
  .package = "cosmos.vesting.v1beta1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - BaseVestingAccount

@implementation BaseVestingAccount

@dynamic hasBaseAccount, baseAccount;
@dynamic originalVestingArray, originalVestingArray_Count;
@dynamic delegatedFreeArray, delegatedFreeArray_Count;
@dynamic delegatedVestingArray, delegatedVestingArray_Count;
@dynamic endTime;

typedef struct BaseVestingAccount__storage_ {
  uint32_t _has_storage_[1];
  BaseAccount *baseAccount;
  NSMutableArray *originalVestingArray;
  NSMutableArray *delegatedFreeArray;
  NSMutableArray *delegatedVestingArray;
  int64_t endTime;
} BaseVestingAccount__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseAccount",
        .dataTypeSpecific.clazz = GPBObjCClass(BaseAccount),
        .number = BaseVestingAccount_FieldNumber_BaseAccount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BaseVestingAccount__storage_, baseAccount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "originalVestingArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = BaseVestingAccount_FieldNumber_OriginalVestingArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BaseVestingAccount__storage_, originalVestingArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "delegatedFreeArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = BaseVestingAccount_FieldNumber_DelegatedFreeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BaseVestingAccount__storage_, delegatedFreeArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "delegatedVestingArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = BaseVestingAccount_FieldNumber_DelegatedVestingArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BaseVestingAccount__storage_, delegatedVestingArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.clazz = Nil,
        .number = BaseVestingAccount_FieldNumber_EndTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BaseVestingAccount__storage_, endTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(BaseVestingAccount)
                                   messageName:@"BaseVestingAccount"
                               fileDescription:&VestingRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BaseVestingAccount__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ContinuousVestingAccount

@implementation ContinuousVestingAccount

@dynamic hasBaseVestingAccount, baseVestingAccount;
@dynamic startTime;

typedef struct ContinuousVestingAccount__storage_ {
  uint32_t _has_storage_[1];
  BaseVestingAccount *baseVestingAccount;
  int64_t startTime;
} ContinuousVestingAccount__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseVestingAccount",
        .dataTypeSpecific.clazz = GPBObjCClass(BaseVestingAccount),
        .number = ContinuousVestingAccount_FieldNumber_BaseVestingAccount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ContinuousVestingAccount__storage_, baseVestingAccount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.clazz = Nil,
        .number = ContinuousVestingAccount_FieldNumber_StartTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ContinuousVestingAccount__storage_, startTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ContinuousVestingAccount)
                                   messageName:@"ContinuousVestingAccount"
                               fileDescription:&VestingRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ContinuousVestingAccount__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DelayedVestingAccount

@implementation DelayedVestingAccount

@dynamic hasBaseVestingAccount, baseVestingAccount;

typedef struct DelayedVestingAccount__storage_ {
  uint32_t _has_storage_[1];
  BaseVestingAccount *baseVestingAccount;
} DelayedVestingAccount__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseVestingAccount",
        .dataTypeSpecific.clazz = GPBObjCClass(BaseVestingAccount),
        .number = DelayedVestingAccount_FieldNumber_BaseVestingAccount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DelayedVestingAccount__storage_, baseVestingAccount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(DelayedVestingAccount)
                                   messageName:@"DelayedVestingAccount"
                               fileDescription:&VestingRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DelayedVestingAccount__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Period

@implementation Period

@dynamic length;
@dynamic amountArray, amountArray_Count;

typedef struct Period__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *amountArray;
  int64_t length;
} Period__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "length",
        .dataTypeSpecific.clazz = Nil,
        .number = Period_FieldNumber_Length,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Period__storage_, length),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "amountArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = Period_FieldNumber_AmountArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Period__storage_, amountArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Period)
                                   messageName:@"Period"
                               fileDescription:&VestingRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Period__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PeriodicVestingAccount

@implementation PeriodicVestingAccount

@dynamic hasBaseVestingAccount, baseVestingAccount;
@dynamic startTime;
@dynamic vestingPeriodsArray, vestingPeriodsArray_Count;

typedef struct PeriodicVestingAccount__storage_ {
  uint32_t _has_storage_[1];
  BaseVestingAccount *baseVestingAccount;
  NSMutableArray *vestingPeriodsArray;
  int64_t startTime;
} PeriodicVestingAccount__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseVestingAccount",
        .dataTypeSpecific.clazz = GPBObjCClass(BaseVestingAccount),
        .number = PeriodicVestingAccount_FieldNumber_BaseVestingAccount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PeriodicVestingAccount__storage_, baseVestingAccount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.clazz = Nil,
        .number = PeriodicVestingAccount_FieldNumber_StartTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PeriodicVestingAccount__storage_, startTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "vestingPeriodsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Period),
        .number = PeriodicVestingAccount_FieldNumber_VestingPeriodsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PeriodicVestingAccount__storage_, vestingPeriodsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(PeriodicVestingAccount)
                                   messageName:@"PeriodicVestingAccount"
                               fileDescription:&VestingRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PeriodicVestingAccount__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PermanentLockedAccount

@implementation PermanentLockedAccount

@dynamic hasBaseVestingAccount, baseVestingAccount;

typedef struct PermanentLockedAccount__storage_ {
  uint32_t _has_storage_[1];
  BaseVestingAccount *baseVestingAccount;
} PermanentLockedAccount__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseVestingAccount",
        .dataTypeSpecific.clazz = GPBObjCClass(BaseVestingAccount),
        .number = PermanentLockedAccount_FieldNumber_BaseVestingAccount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PermanentLockedAccount__storage_, baseVestingAccount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(PermanentLockedAccount)
                                   messageName:@"PermanentLockedAccount"
                               fileDescription:&VestingRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PermanentLockedAccount__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
