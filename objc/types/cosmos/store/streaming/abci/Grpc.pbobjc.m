// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/store/streaming/abci/grpc.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/store/streaming/abci/Grpc.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ListenCommitRequest);
GPBObjCClassDeclaration(ListenCommitResponse);
GPBObjCClassDeclaration(ListenFinalizeBlockRequest);
GPBObjCClassDeclaration(ListenFinalizeBlockResponse);
GPBObjCClassDeclaration(RequestFinalizeBlock);
GPBObjCClassDeclaration(ResponseCommit);
GPBObjCClassDeclaration(ResponseFinalizeBlock);
GPBObjCClassDeclaration(StoreKVPair);

#pragma mark - GrpcRoot

@implementation GrpcRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription GrpcRoot_FileDescription = {
  .package = "cosmos.store.streaming.abci",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - ListenFinalizeBlockRequest

@implementation ListenFinalizeBlockRequest

@dynamic hasReq, req;
@dynamic hasRes, res;

typedef struct ListenFinalizeBlockRequest__storage_ {
  uint32_t _has_storage_[1];
  RequestFinalizeBlock *req;
  ResponseFinalizeBlock *res;
} ListenFinalizeBlockRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "req",
        .dataTypeSpecific.clazz = GPBObjCClass(RequestFinalizeBlock),
        .number = ListenFinalizeBlockRequest_FieldNumber_Req,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ListenFinalizeBlockRequest__storage_, req),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "res",
        .dataTypeSpecific.clazz = GPBObjCClass(ResponseFinalizeBlock),
        .number = ListenFinalizeBlockRequest_FieldNumber_Res,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ListenFinalizeBlockRequest__storage_, res),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ListenFinalizeBlockRequest)
                                   messageName:@"ListenFinalizeBlockRequest"
                               fileDescription:&GrpcRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListenFinalizeBlockRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListenFinalizeBlockResponse

@implementation ListenFinalizeBlockResponse


typedef struct ListenFinalizeBlockResponse__storage_ {
  uint32_t _has_storage_[1];
} ListenFinalizeBlockResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ListenFinalizeBlockResponse)
                                   messageName:@"ListenFinalizeBlockResponse"
                               fileDescription:&GrpcRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(ListenFinalizeBlockResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListenCommitRequest

@implementation ListenCommitRequest

@dynamic blockHeight;
@dynamic hasRes, res;
@dynamic changeSetArray, changeSetArray_Count;

typedef struct ListenCommitRequest__storage_ {
  uint32_t _has_storage_[1];
  ResponseCommit *res;
  NSMutableArray *changeSetArray;
  int64_t blockHeight;
} ListenCommitRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "blockHeight",
        .dataTypeSpecific.clazz = Nil,
        .number = ListenCommitRequest_FieldNumber_BlockHeight,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ListenCommitRequest__storage_, blockHeight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "res",
        .dataTypeSpecific.clazz = GPBObjCClass(ResponseCommit),
        .number = ListenCommitRequest_FieldNumber_Res,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ListenCommitRequest__storage_, res),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "changeSetArray",
        .dataTypeSpecific.clazz = GPBObjCClass(StoreKVPair),
        .number = ListenCommitRequest_FieldNumber_ChangeSetArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ListenCommitRequest__storage_, changeSetArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ListenCommitRequest)
                                   messageName:@"ListenCommitRequest"
                               fileDescription:&GrpcRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListenCommitRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListenCommitResponse

@implementation ListenCommitResponse


typedef struct ListenCommitResponse__storage_ {
  uint32_t _has_storage_[1];
} ListenCommitResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ListenCommitResponse)
                                   messageName:@"ListenCommitResponse"
                               fileDescription:&GrpcRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(ListenCommitResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
