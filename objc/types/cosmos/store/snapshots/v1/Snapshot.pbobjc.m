// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/store/snapshots/v1/snapshot.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/store/snapshots/v1/Snapshot.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Metadata);
GPBObjCClassDeclaration(Snapshot);
GPBObjCClassDeclaration(SnapshotExtensionMeta);
GPBObjCClassDeclaration(SnapshotExtensionPayload);
GPBObjCClassDeclaration(SnapshotIAVLItem);
GPBObjCClassDeclaration(SnapshotItem);
GPBObjCClassDeclaration(SnapshotStoreItem);

#pragma mark - SnapshotRoot

@implementation SnapshotRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription SnapshotRoot_FileDescription = {
  .package = "cosmos.store.snapshots.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Snapshot

@implementation Snapshot

@dynamic height;
@dynamic format;
@dynamic chunks;
@dynamic hash_p;
@dynamic hasMetadata, metadata;

typedef struct Snapshot__storage_ {
  uint32_t _has_storage_[1];
  uint32_t format;
  uint32_t chunks;
  NSData *hash_p;
  Metadata *metadata;
  uint64_t height;
} Snapshot__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "height",
        .dataTypeSpecific.clazz = Nil,
        .number = Snapshot_FieldNumber_Height,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Snapshot__storage_, height),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "format",
        .dataTypeSpecific.clazz = Nil,
        .number = Snapshot_FieldNumber_Format,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Snapshot__storage_, format),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "chunks",
        .dataTypeSpecific.clazz = Nil,
        .number = Snapshot_FieldNumber_Chunks,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Snapshot__storage_, chunks),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "hash_p",
        .dataTypeSpecific.clazz = Nil,
        .number = Snapshot_FieldNumber_Hash_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Snapshot__storage_, hash_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.clazz = GPBObjCClass(Metadata),
        .number = Snapshot_FieldNumber_Metadata,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Snapshot__storage_, metadata),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Snapshot)
                                   messageName:@"Snapshot"
                               fileDescription:&SnapshotRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Snapshot__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Metadata

@implementation Metadata

@dynamic chunkHashesArray, chunkHashesArray_Count;

typedef struct Metadata__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *chunkHashesArray;
} Metadata__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chunkHashesArray",
        .dataTypeSpecific.clazz = Nil,
        .number = Metadata_FieldNumber_ChunkHashesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Metadata__storage_, chunkHashesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Metadata)
                                   messageName:@"Metadata"
                               fileDescription:&SnapshotRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Metadata__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnapshotItem

@implementation SnapshotItem

@dynamic itemOneOfCase;
@dynamic store;
@dynamic iavl;
@dynamic extension;
@dynamic extensionPayload;

typedef struct SnapshotItem__storage_ {
  uint32_t _has_storage_[2];
  SnapshotStoreItem *store;
  SnapshotIAVLItem *iavl;
  SnapshotExtensionMeta *extension;
  SnapshotExtensionPayload *extensionPayload;
} SnapshotItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "store",
        .dataTypeSpecific.clazz = GPBObjCClass(SnapshotStoreItem),
        .number = SnapshotItem_FieldNumber_Store,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SnapshotItem__storage_, store),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "iavl",
        .dataTypeSpecific.clazz = GPBObjCClass(SnapshotIAVLItem),
        .number = SnapshotItem_FieldNumber_Iavl,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SnapshotItem__storage_, iavl),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "extension",
        .dataTypeSpecific.clazz = GPBObjCClass(SnapshotExtensionMeta),
        .number = SnapshotItem_FieldNumber_Extension,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SnapshotItem__storage_, extension),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "extensionPayload",
        .dataTypeSpecific.clazz = GPBObjCClass(SnapshotExtensionPayload),
        .number = SnapshotItem_FieldNumber_ExtensionPayload,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SnapshotItem__storage_, extensionPayload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(SnapshotItem)
                                   messageName:@"SnapshotItem"
                               fileDescription:&SnapshotRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnapshotItem__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    static const char *oneofs[] = {
      "item",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SnapshotItem_ClearItemOneOfCase(SnapshotItem *message) {
  GPBDescriptor *descriptor = [SnapshotItem descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SnapshotStoreItem

@implementation SnapshotStoreItem

@dynamic name;

typedef struct SnapshotStoreItem__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
} SnapshotStoreItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = SnapshotStoreItem_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnapshotStoreItem__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(SnapshotStoreItem)
                                   messageName:@"SnapshotStoreItem"
                               fileDescription:&SnapshotRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnapshotStoreItem__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnapshotIAVLItem

@implementation SnapshotIAVLItem

@dynamic key;
@dynamic value;
@dynamic version;
@dynamic height;

typedef struct SnapshotIAVLItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t height;
  NSData *key;
  NSData *value;
  int64_t version;
} SnapshotIAVLItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.clazz = Nil,
        .number = SnapshotIAVLItem_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnapshotIAVLItem__storage_, key),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "value",
        .dataTypeSpecific.clazz = Nil,
        .number = SnapshotIAVLItem_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnapshotIAVLItem__storage_, value),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "version",
        .dataTypeSpecific.clazz = Nil,
        .number = SnapshotIAVLItem_FieldNumber_Version,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnapshotIAVLItem__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "height",
        .dataTypeSpecific.clazz = Nil,
        .number = SnapshotIAVLItem_FieldNumber_Height,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SnapshotIAVLItem__storage_, height),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(SnapshotIAVLItem)
                                   messageName:@"SnapshotIAVLItem"
                               fileDescription:&SnapshotRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnapshotIAVLItem__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnapshotExtensionMeta

@implementation SnapshotExtensionMeta

@dynamic name;
@dynamic format;

typedef struct SnapshotExtensionMeta__storage_ {
  uint32_t _has_storage_[1];
  uint32_t format;
  NSString *name;
} SnapshotExtensionMeta__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = SnapshotExtensionMeta_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnapshotExtensionMeta__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "format",
        .dataTypeSpecific.clazz = Nil,
        .number = SnapshotExtensionMeta_FieldNumber_Format,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnapshotExtensionMeta__storage_, format),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(SnapshotExtensionMeta)
                                   messageName:@"SnapshotExtensionMeta"
                               fileDescription:&SnapshotRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnapshotExtensionMeta__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnapshotExtensionPayload

@implementation SnapshotExtensionPayload

@dynamic payload;

typedef struct SnapshotExtensionPayload__storage_ {
  uint32_t _has_storage_[1];
  NSData *payload;
} SnapshotExtensionPayload__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payload",
        .dataTypeSpecific.clazz = Nil,
        .number = SnapshotExtensionPayload_FieldNumber_Payload,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnapshotExtensionPayload__storage_, payload),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(SnapshotExtensionPayload)
                                   messageName:@"SnapshotExtensionPayload"
                               fileDescription:&SnapshotRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnapshotExtensionPayload__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
