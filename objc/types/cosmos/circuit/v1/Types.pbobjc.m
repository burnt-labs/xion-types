// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/circuit/v1/types.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import <stdatomic.h>

#import "cosmos/circuit/v1/Types.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(GenesisAccountPermissions);
GPBObjCClassDeclaration(GenesisState);
GPBObjCClassDeclaration(Permissions);

#pragma mark - TypesRoot

@implementation TypesRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription TypesRoot_FileDescription = {
  .package = "cosmos.circuit.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Enum Permissions_Level

GPBEnumDescriptor *Permissions_Level_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "LevelNoneUnspecified\000LevelSomeMsgs\000Level"
        "AllMsgs\000LevelSuperAdmin\000";
    static const int32_t values[] = {
        Permissions_Level_LevelNoneUnspecified,
        Permissions_Level_LevelSomeMsgs,
        Permissions_Level_LevelAllMsgs,
        Permissions_Level_LevelSuperAdmin,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Permissions_Level)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Permissions_Level_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Permissions_Level_IsValidValue(int32_t value__) {
  switch (value__) {
    case Permissions_Level_LevelNoneUnspecified:
    case Permissions_Level_LevelSomeMsgs:
    case Permissions_Level_LevelAllMsgs:
    case Permissions_Level_LevelSuperAdmin:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Permissions

@implementation Permissions

@dynamic level;
@dynamic limitTypeUrlsArray, limitTypeUrlsArray_Count;

typedef struct Permissions__storage_ {
  uint32_t _has_storage_[1];
  Permissions_Level level;
  NSMutableArray *limitTypeUrlsArray;
} Permissions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "level",
        .dataTypeSpecific.enumDescFunc = Permissions_Level_EnumDescriptor,
        .number = Permissions_FieldNumber_Level,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Permissions__storage_, level),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "limitTypeUrlsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = Permissions_FieldNumber_LimitTypeUrlsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Permissions__storage_, limitTypeUrlsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Permissions)
                                   messageName:@"Permissions"
                               fileDescription:&TypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Permissions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Permissions_Level_RawValue(Permissions *message) {
  GPBDescriptor *descriptor = [Permissions descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Permissions_FieldNumber_Level];
  return GPBGetMessageRawEnumField(message, field);
}

void SetPermissions_Level_RawValue(Permissions *message, int32_t value) {
  GPBDescriptor *descriptor = [Permissions descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Permissions_FieldNumber_Level];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - GenesisAccountPermissions

@implementation GenesisAccountPermissions

@dynamic address;
@dynamic hasPermissions, permissions;

typedef struct GenesisAccountPermissions__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
  Permissions *permissions;
} GenesisAccountPermissions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = GenesisAccountPermissions_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GenesisAccountPermissions__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "permissions",
        .dataTypeSpecific.clazz = GPBObjCClass(Permissions),
        .number = GenesisAccountPermissions_FieldNumber_Permissions,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GenesisAccountPermissions__storage_, permissions),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(GenesisAccountPermissions)
                                   messageName:@"GenesisAccountPermissions"
                               fileDescription:&TypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GenesisAccountPermissions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GenesisState

@implementation GenesisState

@dynamic accountPermissionsArray, accountPermissionsArray_Count;
@dynamic disabledTypeUrlsArray, disabledTypeUrlsArray_Count;

typedef struct GenesisState__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *accountPermissionsArray;
  NSMutableArray *disabledTypeUrlsArray;
} GenesisState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountPermissionsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(GenesisAccountPermissions),
        .number = GenesisState_FieldNumber_AccountPermissionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GenesisState__storage_, accountPermissionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "disabledTypeUrlsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = GenesisState_FieldNumber_DisabledTypeUrlsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GenesisState__storage_, disabledTypeUrlsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(GenesisState)
                                   messageName:@"GenesisState"
                               fileDescription:&TypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GenesisState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
