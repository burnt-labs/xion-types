// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/feegrant/v1beta1/feegrant.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/base/v1beta1/Coin.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class BasicAllowance;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - FeegrantRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface FeegrantRoot : GPBRootObject
@end

#pragma mark - BasicAllowance

typedef GPB_ENUM(BasicAllowance_FieldNumber) {
  BasicAllowance_FieldNumber_SpendLimitArray = 1,
  BasicAllowance_FieldNumber_Expiration = 2,
};

/**
 * BasicAllowance implements Allowance with a one-time grant of coins
 * that optionally expires. The grantee can use up to SpendLimit to cover fees.
 **/
GPB_FINAL @interface BasicAllowance : GPBMessage

/**
 * spend_limit specifies the maximum amount of coins that can be spent
 * by this allowance and will be updated as coins are spent. If it is
 * empty, there is no spend limit and any amount of coins can be spent.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Coin*> *spendLimitArray;
/** The number of items in @c spendLimitArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger spendLimitArray_Count;

/** expiration specifies an optional time when this allowance expires */
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *expiration;
/** Test to see if @c expiration has been set. */
@property(nonatomic, readwrite) BOOL hasExpiration;

@end

#pragma mark - PeriodicAllowance

typedef GPB_ENUM(PeriodicAllowance_FieldNumber) {
  PeriodicAllowance_FieldNumber_Basic = 1,
  PeriodicAllowance_FieldNumber_Period = 2,
  PeriodicAllowance_FieldNumber_PeriodSpendLimitArray = 3,
  PeriodicAllowance_FieldNumber_PeriodCanSpendArray = 4,
  PeriodicAllowance_FieldNumber_PeriodReset = 5,
};

/**
 * PeriodicAllowance extends Allowance to allow for both a maximum cap,
 * as well as a limit per time period.
 **/
GPB_FINAL @interface PeriodicAllowance : GPBMessage

/** basic specifies a struct of `BasicAllowance` */
@property(nonatomic, readwrite, strong, null_resettable) BasicAllowance *basic;
/** Test to see if @c basic has been set. */
@property(nonatomic, readwrite) BOOL hasBasic;

/**
 * period specifies the time duration in which period_spend_limit coins can
 * be spent before that allowance is reset
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBDuration *period;
/** Test to see if @c period has been set. */
@property(nonatomic, readwrite) BOOL hasPeriod;

/**
 * period_spend_limit specifies the maximum number of coins that can be spent
 * in the period
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Coin*> *periodSpendLimitArray;
/** The number of items in @c periodSpendLimitArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger periodSpendLimitArray_Count;

/** period_can_spend is the number of coins left to be spent before the period_reset time */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Coin*> *periodCanSpendArray;
/** The number of items in @c periodCanSpendArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger periodCanSpendArray_Count;

/**
 * period_reset is the time at which this period resets and a new one begins,
 * it is calculated from the start time of the first transaction after the
 * last period ended
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *periodReset;
/** Test to see if @c periodReset has been set. */
@property(nonatomic, readwrite) BOOL hasPeriodReset;

@end

#pragma mark - AllowedMsgAllowance

typedef GPB_ENUM(AllowedMsgAllowance_FieldNumber) {
  AllowedMsgAllowance_FieldNumber_Allowance = 1,
  AllowedMsgAllowance_FieldNumber_AllowedMessagesArray = 2,
};

/**
 * AllowedMsgAllowance creates allowance only for specified message types.
 **/
GPB_FINAL @interface AllowedMsgAllowance : GPBMessage

/** allowance can be any of basic and periodic fee allowance. */
@property(nonatomic, readwrite, strong, null_resettable) GPBAny *allowance;
/** Test to see if @c allowance has been set. */
@property(nonatomic, readwrite) BOOL hasAllowance;

/** allowed_messages are the messages for which the grantee has the access. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *allowedMessagesArray;
/** The number of items in @c allowedMessagesArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger allowedMessagesArray_Count;

@end

#pragma mark - Grant

typedef GPB_ENUM(Grant_FieldNumber) {
  Grant_FieldNumber_Granter = 1,
  Grant_FieldNumber_Grantee = 2,
  Grant_FieldNumber_Allowance = 3,
};

/**
 * Grant is stored in the KVStore to record a grant with full context
 **/
GPB_FINAL @interface Grant : GPBMessage

/** granter is the address of the user granting an allowance of their funds. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *granter;

/** grantee is the address of the user being granted an allowance of another user's funds. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *grantee;

/** allowance can be any of basic, periodic, allowed fee allowance. */
@property(nonatomic, readwrite, strong, null_resettable) GPBAny *allowance;
/** Test to see if @c allowance has been set. */
@property(nonatomic, readwrite) BOOL hasAllowance;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
