// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/nft/v1beta1/nft.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/nft/v1beta1/Nft.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Class);
GPBObjCClassDeclaration(GPBAny);
GPBObjCClassDeclaration(NFT);

#pragma mark - NftRoot

@implementation NftRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription NftRoot_FileDescription = {
  .package = "cosmos.nft.v1beta1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Class

@implementation Class

@dynamic id_p;
@dynamic name;
@dynamic symbol;
@dynamic description_p;
@dynamic uri;
@dynamic uriHash;
@dynamic hasData_p, data_p;

typedef struct Class__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  NSString *symbol;
  NSString *description_p;
  NSString *uri;
  NSString *uriHash;
  GPBAny *data_p;
} Class__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = Class_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Class__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = Class_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Class__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "symbol",
        .dataTypeSpecific.clazz = Nil,
        .number = Class_FieldNumber_Symbol,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Class__storage_, symbol),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = Class_FieldNumber_Description_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Class__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "uri",
        .dataTypeSpecific.clazz = Nil,
        .number = Class_FieldNumber_Uri,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Class__storage_, uri),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "uriHash",
        .dataTypeSpecific.clazz = Nil,
        .number = Class_FieldNumber_UriHash,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Class__storage_, uriHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = Class_FieldNumber_Data_p,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Class__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Class)
                                   messageName:@"Class"
                               fileDescription:&NftRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Class__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NFT

@implementation NFT

@dynamic classId;
@dynamic id_p;
@dynamic uri;
@dynamic uriHash;
@dynamic hasData_p, data_p;

typedef struct NFT__storage_ {
  uint32_t _has_storage_[1];
  NSString *classId;
  NSString *id_p;
  NSString *uri;
  NSString *uriHash;
  GPBAny *data_p;
} NFT__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "classId",
        .dataTypeSpecific.clazz = Nil,
        .number = NFT_FieldNumber_ClassId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NFT__storage_, classId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = NFT_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NFT__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "uri",
        .dataTypeSpecific.clazz = Nil,
        .number = NFT_FieldNumber_Uri,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NFT__storage_, uri),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "uriHash",
        .dataTypeSpecific.clazz = Nil,
        .number = NFT_FieldNumber_UriHash,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(NFT__storage_, uriHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = NFT_FieldNumber_Data_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(NFT__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(NFT)
                                   messageName:@"NFT"
                               fileDescription:&NftRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NFT__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
