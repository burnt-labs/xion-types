// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/nft/v1beta1/nft.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

NS_ASSUME_NONNULL_BEGIN

#pragma mark - NftRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface NftRoot : GPBRootObject
@end

#pragma mark - Class

typedef GPB_ENUM(Class_FieldNumber) {
  Class_FieldNumber_Id_p = 1,
  Class_FieldNumber_Name = 2,
  Class_FieldNumber_Symbol = 3,
  Class_FieldNumber_Description_p = 4,
  Class_FieldNumber_Uri = 5,
  Class_FieldNumber_UriHash = 6,
  Class_FieldNumber_Data_p = 7,
};

/**
 * Class defines the class of the nft type.
 **/
GPB_FINAL @interface Class : GPBMessage

/** id defines the unique identifier of the NFT classification, similar to the contract address of ERC721 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

/** name defines the human-readable name of the NFT classification. Optional */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** symbol is an abbreviated name for nft classification. Optional */
@property(nonatomic, readwrite, copy, null_resettable) NSString *symbol;

/** description is a brief description of nft classification. Optional */
@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;

/** uri for the class metadata stored off chain. It can define schema for Class and NFT `Data` attributes. Optional */
@property(nonatomic, readwrite, copy, null_resettable) NSString *uri;

/** uri_hash is a hash of the document pointed by uri. Optional */
@property(nonatomic, readwrite, copy, null_resettable) NSString *uriHash;

/** data is the app specific metadata of the NFT class. Optional */
@property(nonatomic, readwrite, strong, null_resettable) GPBAny *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

@end

#pragma mark - NFT

typedef GPB_ENUM(NFT_FieldNumber) {
  NFT_FieldNumber_ClassId = 1,
  NFT_FieldNumber_Id_p = 2,
  NFT_FieldNumber_Uri = 3,
  NFT_FieldNumber_UriHash = 4,
  NFT_FieldNumber_Data_p = 10,
};

/**
 * NFT defines the NFT.
 **/
GPB_FINAL @interface NFT : GPBMessage

/** class_id associated with the NFT, similar to the contract address of ERC721 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *classId;

/** id is a unique identifier of the NFT */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

/** uri for the NFT metadata stored off chain */
@property(nonatomic, readwrite, copy, null_resettable) NSString *uri;

/** uri_hash is a hash of the document pointed by uri */
@property(nonatomic, readwrite, copy, null_resettable) NSString *uriHash;

/** data is an app specific data of the NFT. Optional */
@property(nonatomic, readwrite, strong, null_resettable) GPBAny *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
