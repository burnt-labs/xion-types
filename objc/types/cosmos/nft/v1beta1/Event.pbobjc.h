// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/nft/v1beta1/event.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

NS_ASSUME_NONNULL_BEGIN

#pragma mark - EventRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface EventRoot : GPBRootObject
@end

#pragma mark - EventSend

typedef GPB_ENUM(EventSend_FieldNumber) {
  EventSend_FieldNumber_ClassId = 1,
  EventSend_FieldNumber_Id_p = 2,
  EventSend_FieldNumber_Sender = 3,
  EventSend_FieldNumber_Receiver = 4,
};

/**
 * EventSend is emitted on Msg/Send
 **/
GPB_FINAL @interface EventSend : GPBMessage

/** class_id associated with the nft */
@property(nonatomic, readwrite, copy, null_resettable) NSString *classId;

/** id is a unique identifier of the nft */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

/** sender is the address of the owner of nft */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sender;

/** receiver is the receiver address of nft */
@property(nonatomic, readwrite, copy, null_resettable) NSString *receiver;

@end

#pragma mark - EventMint

typedef GPB_ENUM(EventMint_FieldNumber) {
  EventMint_FieldNumber_ClassId = 1,
  EventMint_FieldNumber_Id_p = 2,
  EventMint_FieldNumber_Owner = 3,
};

/**
 * EventMint is emitted on Mint
 **/
GPB_FINAL @interface EventMint : GPBMessage

/** class_id associated with the nft */
@property(nonatomic, readwrite, copy, null_resettable) NSString *classId;

/** id is a unique identifier of the nft */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

/** owner is the owner address of the nft */
@property(nonatomic, readwrite, copy, null_resettable) NSString *owner;

@end

#pragma mark - EventBurn

typedef GPB_ENUM(EventBurn_FieldNumber) {
  EventBurn_FieldNumber_ClassId = 1,
  EventBurn_FieldNumber_Id_p = 2,
  EventBurn_FieldNumber_Owner = 3,
};

/**
 * EventBurn is emitted on Burn
 **/
GPB_FINAL @interface EventBurn : GPBMessage

/** class_id associated with the nft */
@property(nonatomic, readwrite, copy, null_resettable) NSString *classId;

/** id is a unique identifier of the nft */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

/** owner is the owner address of the nft */
@property(nonatomic, readwrite, copy, null_resettable) NSString *owner;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
