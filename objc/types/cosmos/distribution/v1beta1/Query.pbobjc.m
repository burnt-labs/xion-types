// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/distribution/v1beta1/query.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/distribution/v1beta1/Query.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(DecCoin);
GPBObjCClassDeclaration(DelegationDelegatorReward);
GPBObjCClassDeclaration(PageRequest);
GPBObjCClassDeclaration(PageResponse);
GPBObjCClassDeclaration(Params);
GPBObjCClassDeclaration(QueryCommunityPoolRequest);
GPBObjCClassDeclaration(QueryCommunityPoolResponse);
GPBObjCClassDeclaration(QueryDelegationRewardsRequest);
GPBObjCClassDeclaration(QueryDelegationRewardsResponse);
GPBObjCClassDeclaration(QueryDelegationTotalRewardsRequest);
GPBObjCClassDeclaration(QueryDelegationTotalRewardsResponse);
GPBObjCClassDeclaration(QueryDelegatorValidatorsRequest);
GPBObjCClassDeclaration(QueryDelegatorValidatorsResponse);
GPBObjCClassDeclaration(QueryDelegatorWithdrawAddressRequest);
GPBObjCClassDeclaration(QueryDelegatorWithdrawAddressResponse);
GPBObjCClassDeclaration(QueryParamsRequest);
GPBObjCClassDeclaration(QueryParamsResponse);
GPBObjCClassDeclaration(QueryValidatorCommissionRequest);
GPBObjCClassDeclaration(QueryValidatorCommissionResponse);
GPBObjCClassDeclaration(QueryValidatorDistributionInfoRequest);
GPBObjCClassDeclaration(QueryValidatorDistributionInfoResponse);
GPBObjCClassDeclaration(QueryValidatorOutstandingRewardsRequest);
GPBObjCClassDeclaration(QueryValidatorOutstandingRewardsResponse);
GPBObjCClassDeclaration(QueryValidatorSlashesRequest);
GPBObjCClassDeclaration(QueryValidatorSlashesResponse);
GPBObjCClassDeclaration(ValidatorAccumulatedCommission);
GPBObjCClassDeclaration(ValidatorOutstandingRewards);
GPBObjCClassDeclaration(ValidatorSlashEvent);

#pragma mark - QueryRoot

@implementation QueryRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription QueryRoot_FileDescription = {
  .package = "cosmos.distribution.v1beta1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - QueryParamsRequest

@implementation QueryParamsRequest


typedef struct QueryParamsRequest__storage_ {
  uint32_t _has_storage_[1];
} QueryParamsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryParamsRequest)
                                   messageName:@"QueryParamsRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(QueryParamsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryParamsResponse

@implementation QueryParamsResponse

@dynamic hasParams, params;

typedef struct QueryParamsResponse__storage_ {
  uint32_t _has_storage_[1];
  Params *params;
} QueryParamsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "params",
        .dataTypeSpecific.clazz = GPBObjCClass(Params),
        .number = QueryParamsResponse_FieldNumber_Params,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryParamsResponse__storage_, params),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryParamsResponse)
                                   messageName:@"QueryParamsResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryParamsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryValidatorDistributionInfoRequest

@implementation QueryValidatorDistributionInfoRequest

@dynamic validatorAddress;

typedef struct QueryValidatorDistributionInfoRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *validatorAddress;
} QueryValidatorDistributionInfoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "validatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryValidatorDistributionInfoRequest_FieldNumber_ValidatorAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryValidatorDistributionInfoRequest__storage_, validatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryValidatorDistributionInfoRequest)
                                   messageName:@"QueryValidatorDistributionInfoRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryValidatorDistributionInfoRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryValidatorDistributionInfoResponse

@implementation QueryValidatorDistributionInfoResponse

@dynamic operatorAddress;
@dynamic selfBondRewardsArray, selfBondRewardsArray_Count;
@dynamic commissionArray, commissionArray_Count;

typedef struct QueryValidatorDistributionInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *operatorAddress;
  NSMutableArray *selfBondRewardsArray;
  NSMutableArray *commissionArray;
} QueryValidatorDistributionInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "operatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryValidatorDistributionInfoResponse_FieldNumber_OperatorAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryValidatorDistributionInfoResponse__storage_, operatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "selfBondRewardsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(DecCoin),
        .number = QueryValidatorDistributionInfoResponse_FieldNumber_SelfBondRewardsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryValidatorDistributionInfoResponse__storage_, selfBondRewardsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "commissionArray",
        .dataTypeSpecific.clazz = GPBObjCClass(DecCoin),
        .number = QueryValidatorDistributionInfoResponse_FieldNumber_CommissionArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryValidatorDistributionInfoResponse__storage_, commissionArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryValidatorDistributionInfoResponse)
                                   messageName:@"QueryValidatorDistributionInfoResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryValidatorDistributionInfoResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryValidatorOutstandingRewardsRequest

@implementation QueryValidatorOutstandingRewardsRequest

@dynamic validatorAddress;

typedef struct QueryValidatorOutstandingRewardsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *validatorAddress;
} QueryValidatorOutstandingRewardsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "validatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryValidatorOutstandingRewardsRequest_FieldNumber_ValidatorAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryValidatorOutstandingRewardsRequest__storage_, validatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryValidatorOutstandingRewardsRequest)
                                   messageName:@"QueryValidatorOutstandingRewardsRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryValidatorOutstandingRewardsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryValidatorOutstandingRewardsResponse

@implementation QueryValidatorOutstandingRewardsResponse

@dynamic hasRewards, rewards;

typedef struct QueryValidatorOutstandingRewardsResponse__storage_ {
  uint32_t _has_storage_[1];
  ValidatorOutstandingRewards *rewards;
} QueryValidatorOutstandingRewardsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rewards",
        .dataTypeSpecific.clazz = GPBObjCClass(ValidatorOutstandingRewards),
        .number = QueryValidatorOutstandingRewardsResponse_FieldNumber_Rewards,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryValidatorOutstandingRewardsResponse__storage_, rewards),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryValidatorOutstandingRewardsResponse)
                                   messageName:@"QueryValidatorOutstandingRewardsResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryValidatorOutstandingRewardsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryValidatorCommissionRequest

@implementation QueryValidatorCommissionRequest

@dynamic validatorAddress;

typedef struct QueryValidatorCommissionRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *validatorAddress;
} QueryValidatorCommissionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "validatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryValidatorCommissionRequest_FieldNumber_ValidatorAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryValidatorCommissionRequest__storage_, validatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryValidatorCommissionRequest)
                                   messageName:@"QueryValidatorCommissionRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryValidatorCommissionRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryValidatorCommissionResponse

@implementation QueryValidatorCommissionResponse

@dynamic hasCommission, commission;

typedef struct QueryValidatorCommissionResponse__storage_ {
  uint32_t _has_storage_[1];
  ValidatorAccumulatedCommission *commission;
} QueryValidatorCommissionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "commission",
        .dataTypeSpecific.clazz = GPBObjCClass(ValidatorAccumulatedCommission),
        .number = QueryValidatorCommissionResponse_FieldNumber_Commission,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryValidatorCommissionResponse__storage_, commission),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryValidatorCommissionResponse)
                                   messageName:@"QueryValidatorCommissionResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryValidatorCommissionResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryValidatorSlashesRequest

@implementation QueryValidatorSlashesRequest

@dynamic validatorAddress;
@dynamic startingHeight;
@dynamic endingHeight;
@dynamic hasPagination, pagination;

typedef struct QueryValidatorSlashesRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *validatorAddress;
  PageRequest *pagination;
  uint64_t startingHeight;
  uint64_t endingHeight;
} QueryValidatorSlashesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "validatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryValidatorSlashesRequest_FieldNumber_ValidatorAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryValidatorSlashesRequest__storage_, validatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startingHeight",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryValidatorSlashesRequest_FieldNumber_StartingHeight,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryValidatorSlashesRequest__storage_, startingHeight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "endingHeight",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryValidatorSlashesRequest_FieldNumber_EndingHeight,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(QueryValidatorSlashesRequest__storage_, endingHeight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageRequest),
        .number = QueryValidatorSlashesRequest_FieldNumber_Pagination,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(QueryValidatorSlashesRequest__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryValidatorSlashesRequest)
                                   messageName:@"QueryValidatorSlashesRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryValidatorSlashesRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryValidatorSlashesResponse

@implementation QueryValidatorSlashesResponse

@dynamic slashesArray, slashesArray_Count;
@dynamic hasPagination, pagination;

typedef struct QueryValidatorSlashesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *slashesArray;
  PageResponse *pagination;
} QueryValidatorSlashesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "slashesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ValidatorSlashEvent),
        .number = QueryValidatorSlashesResponse_FieldNumber_SlashesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryValidatorSlashesResponse__storage_, slashesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageResponse),
        .number = QueryValidatorSlashesResponse_FieldNumber_Pagination,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryValidatorSlashesResponse__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryValidatorSlashesResponse)
                                   messageName:@"QueryValidatorSlashesResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryValidatorSlashesResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryDelegationRewardsRequest

@implementation QueryDelegationRewardsRequest

@dynamic delegatorAddress;
@dynamic validatorAddress;

typedef struct QueryDelegationRewardsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *delegatorAddress;
  NSString *validatorAddress;
} QueryDelegationRewardsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "delegatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryDelegationRewardsRequest_FieldNumber_DelegatorAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryDelegationRewardsRequest__storage_, delegatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "validatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryDelegationRewardsRequest_FieldNumber_ValidatorAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryDelegationRewardsRequest__storage_, validatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryDelegationRewardsRequest)
                                   messageName:@"QueryDelegationRewardsRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryDelegationRewardsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryDelegationRewardsResponse

@implementation QueryDelegationRewardsResponse

@dynamic rewardsArray, rewardsArray_Count;

typedef struct QueryDelegationRewardsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *rewardsArray;
} QueryDelegationRewardsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rewardsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(DecCoin),
        .number = QueryDelegationRewardsResponse_FieldNumber_RewardsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryDelegationRewardsResponse__storage_, rewardsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryDelegationRewardsResponse)
                                   messageName:@"QueryDelegationRewardsResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryDelegationRewardsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryDelegationTotalRewardsRequest

@implementation QueryDelegationTotalRewardsRequest

@dynamic delegatorAddress;

typedef struct QueryDelegationTotalRewardsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *delegatorAddress;
} QueryDelegationTotalRewardsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "delegatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryDelegationTotalRewardsRequest_FieldNumber_DelegatorAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryDelegationTotalRewardsRequest__storage_, delegatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryDelegationTotalRewardsRequest)
                                   messageName:@"QueryDelegationTotalRewardsRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryDelegationTotalRewardsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryDelegationTotalRewardsResponse

@implementation QueryDelegationTotalRewardsResponse

@dynamic rewardsArray, rewardsArray_Count;
@dynamic totalArray, totalArray_Count;

typedef struct QueryDelegationTotalRewardsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *rewardsArray;
  NSMutableArray *totalArray;
} QueryDelegationTotalRewardsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rewardsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(DelegationDelegatorReward),
        .number = QueryDelegationTotalRewardsResponse_FieldNumber_RewardsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryDelegationTotalRewardsResponse__storage_, rewardsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "totalArray",
        .dataTypeSpecific.clazz = GPBObjCClass(DecCoin),
        .number = QueryDelegationTotalRewardsResponse_FieldNumber_TotalArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryDelegationTotalRewardsResponse__storage_, totalArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryDelegationTotalRewardsResponse)
                                   messageName:@"QueryDelegationTotalRewardsResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryDelegationTotalRewardsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryDelegatorValidatorsRequest

@implementation QueryDelegatorValidatorsRequest

@dynamic delegatorAddress;

typedef struct QueryDelegatorValidatorsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *delegatorAddress;
} QueryDelegatorValidatorsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "delegatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryDelegatorValidatorsRequest_FieldNumber_DelegatorAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryDelegatorValidatorsRequest__storage_, delegatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryDelegatorValidatorsRequest)
                                   messageName:@"QueryDelegatorValidatorsRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryDelegatorValidatorsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryDelegatorValidatorsResponse

@implementation QueryDelegatorValidatorsResponse

@dynamic validatorsArray, validatorsArray_Count;

typedef struct QueryDelegatorValidatorsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *validatorsArray;
} QueryDelegatorValidatorsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "validatorsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryDelegatorValidatorsResponse_FieldNumber_ValidatorsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryDelegatorValidatorsResponse__storage_, validatorsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryDelegatorValidatorsResponse)
                                   messageName:@"QueryDelegatorValidatorsResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryDelegatorValidatorsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryDelegatorWithdrawAddressRequest

@implementation QueryDelegatorWithdrawAddressRequest

@dynamic delegatorAddress;

typedef struct QueryDelegatorWithdrawAddressRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *delegatorAddress;
} QueryDelegatorWithdrawAddressRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "delegatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryDelegatorWithdrawAddressRequest_FieldNumber_DelegatorAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryDelegatorWithdrawAddressRequest__storage_, delegatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryDelegatorWithdrawAddressRequest)
                                   messageName:@"QueryDelegatorWithdrawAddressRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryDelegatorWithdrawAddressRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryDelegatorWithdrawAddressResponse

@implementation QueryDelegatorWithdrawAddressResponse

@dynamic withdrawAddress;

typedef struct QueryDelegatorWithdrawAddressResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *withdrawAddress;
} QueryDelegatorWithdrawAddressResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "withdrawAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryDelegatorWithdrawAddressResponse_FieldNumber_WithdrawAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryDelegatorWithdrawAddressResponse__storage_, withdrawAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryDelegatorWithdrawAddressResponse)
                                   messageName:@"QueryDelegatorWithdrawAddressResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryDelegatorWithdrawAddressResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryCommunityPoolRequest

@implementation QueryCommunityPoolRequest


typedef struct QueryCommunityPoolRequest__storage_ {
  uint32_t _has_storage_[1];
} QueryCommunityPoolRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryCommunityPoolRequest)
                                   messageName:@"QueryCommunityPoolRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(QueryCommunityPoolRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryCommunityPoolResponse

@implementation QueryCommunityPoolResponse

@dynamic poolArray, poolArray_Count;

typedef struct QueryCommunityPoolResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *poolArray;
} QueryCommunityPoolResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "poolArray",
        .dataTypeSpecific.clazz = GPBObjCClass(DecCoin),
        .number = QueryCommunityPoolResponse_FieldNumber_PoolArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryCommunityPoolResponse__storage_, poolArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryCommunityPoolResponse)
                                   messageName:@"QueryCommunityPoolResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryCommunityPoolResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
