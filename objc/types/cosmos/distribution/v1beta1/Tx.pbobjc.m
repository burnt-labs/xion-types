// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/distribution/v1beta1/tx.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/distribution/v1beta1/Tx.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Coin);
GPBObjCClassDeclaration(MsgCommunityPoolSpend);
GPBObjCClassDeclaration(MsgCommunityPoolSpendResponse);
GPBObjCClassDeclaration(MsgDepositValidatorRewardsPool);
GPBObjCClassDeclaration(MsgDepositValidatorRewardsPoolResponse);
GPBObjCClassDeclaration(MsgFundCommunityPool);
GPBObjCClassDeclaration(MsgFundCommunityPoolResponse);
GPBObjCClassDeclaration(MsgSetWithdrawAddress);
GPBObjCClassDeclaration(MsgSetWithdrawAddressResponse);
GPBObjCClassDeclaration(MsgUpdateParams);
GPBObjCClassDeclaration(MsgUpdateParamsResponse);
GPBObjCClassDeclaration(MsgWithdrawDelegatorReward);
GPBObjCClassDeclaration(MsgWithdrawDelegatorRewardResponse);
GPBObjCClassDeclaration(MsgWithdrawValidatorCommission);
GPBObjCClassDeclaration(MsgWithdrawValidatorCommissionResponse);
GPBObjCClassDeclaration(Params);

#pragma mark - TxRoot

@implementation TxRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription TxRoot_FileDescription = {
  .package = "cosmos.distribution.v1beta1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - MsgSetWithdrawAddress

@implementation MsgSetWithdrawAddress

@dynamic delegatorAddress;
@dynamic withdrawAddress;

typedef struct MsgSetWithdrawAddress__storage_ {
  uint32_t _has_storage_[1];
  NSString *delegatorAddress;
  NSString *withdrawAddress;
} MsgSetWithdrawAddress__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "delegatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSetWithdrawAddress_FieldNumber_DelegatorAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgSetWithdrawAddress__storage_, delegatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "withdrawAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSetWithdrawAddress_FieldNumber_WithdrawAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgSetWithdrawAddress__storage_, withdrawAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgSetWithdrawAddress)
                                   messageName:@"MsgSetWithdrawAddress"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgSetWithdrawAddress__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgSetWithdrawAddressResponse

@implementation MsgSetWithdrawAddressResponse


typedef struct MsgSetWithdrawAddressResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgSetWithdrawAddressResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgSetWithdrawAddressResponse)
                                   messageName:@"MsgSetWithdrawAddressResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgSetWithdrawAddressResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgWithdrawDelegatorReward

@implementation MsgWithdrawDelegatorReward

@dynamic delegatorAddress;
@dynamic validatorAddress;

typedef struct MsgWithdrawDelegatorReward__storage_ {
  uint32_t _has_storage_[1];
  NSString *delegatorAddress;
  NSString *validatorAddress;
} MsgWithdrawDelegatorReward__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "delegatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgWithdrawDelegatorReward_FieldNumber_DelegatorAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgWithdrawDelegatorReward__storage_, delegatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "validatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgWithdrawDelegatorReward_FieldNumber_ValidatorAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgWithdrawDelegatorReward__storage_, validatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgWithdrawDelegatorReward)
                                   messageName:@"MsgWithdrawDelegatorReward"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgWithdrawDelegatorReward__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgWithdrawDelegatorRewardResponse

@implementation MsgWithdrawDelegatorRewardResponse

@dynamic amountArray, amountArray_Count;

typedef struct MsgWithdrawDelegatorRewardResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *amountArray;
} MsgWithdrawDelegatorRewardResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "amountArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = MsgWithdrawDelegatorRewardResponse_FieldNumber_AmountArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MsgWithdrawDelegatorRewardResponse__storage_, amountArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgWithdrawDelegatorRewardResponse)
                                   messageName:@"MsgWithdrawDelegatorRewardResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgWithdrawDelegatorRewardResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgWithdrawValidatorCommission

@implementation MsgWithdrawValidatorCommission

@dynamic validatorAddress;

typedef struct MsgWithdrawValidatorCommission__storage_ {
  uint32_t _has_storage_[1];
  NSString *validatorAddress;
} MsgWithdrawValidatorCommission__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "validatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgWithdrawValidatorCommission_FieldNumber_ValidatorAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgWithdrawValidatorCommission__storage_, validatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgWithdrawValidatorCommission)
                                   messageName:@"MsgWithdrawValidatorCommission"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgWithdrawValidatorCommission__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgWithdrawValidatorCommissionResponse

@implementation MsgWithdrawValidatorCommissionResponse

@dynamic amountArray, amountArray_Count;

typedef struct MsgWithdrawValidatorCommissionResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *amountArray;
} MsgWithdrawValidatorCommissionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "amountArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = MsgWithdrawValidatorCommissionResponse_FieldNumber_AmountArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MsgWithdrawValidatorCommissionResponse__storage_, amountArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgWithdrawValidatorCommissionResponse)
                                   messageName:@"MsgWithdrawValidatorCommissionResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgWithdrawValidatorCommissionResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgFundCommunityPool

@implementation MsgFundCommunityPool

@dynamic amountArray, amountArray_Count;
@dynamic depositor;

typedef struct MsgFundCommunityPool__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *amountArray;
  NSString *depositor;
} MsgFundCommunityPool__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "amountArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = MsgFundCommunityPool_FieldNumber_AmountArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MsgFundCommunityPool__storage_, amountArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "depositor",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgFundCommunityPool_FieldNumber_Depositor,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgFundCommunityPool__storage_, depositor),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgFundCommunityPool)
                                   messageName:@"MsgFundCommunityPool"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgFundCommunityPool__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgFundCommunityPoolResponse

@implementation MsgFundCommunityPoolResponse


typedef struct MsgFundCommunityPoolResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgFundCommunityPoolResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgFundCommunityPoolResponse)
                                   messageName:@"MsgFundCommunityPoolResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgFundCommunityPoolResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateParams

@implementation MsgUpdateParams

@dynamic authority;
@dynamic hasParams, params;

typedef struct MsgUpdateParams__storage_ {
  uint32_t _has_storage_[1];
  NSString *authority;
  Params *params;
} MsgUpdateParams__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authority",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateParams_FieldNumber_Authority,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgUpdateParams__storage_, authority),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "params",
        .dataTypeSpecific.clazz = GPBObjCClass(Params),
        .number = MsgUpdateParams_FieldNumber_Params,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgUpdateParams__storage_, params),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateParams)
                                   messageName:@"MsgUpdateParams"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgUpdateParams__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateParamsResponse

@implementation MsgUpdateParamsResponse


typedef struct MsgUpdateParamsResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgUpdateParamsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateParamsResponse)
                                   messageName:@"MsgUpdateParamsResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgUpdateParamsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgCommunityPoolSpend

@implementation MsgCommunityPoolSpend

@dynamic authority;
@dynamic recipient;
@dynamic amountArray, amountArray_Count;

typedef struct MsgCommunityPoolSpend__storage_ {
  uint32_t _has_storage_[1];
  NSString *authority;
  NSString *recipient;
  NSMutableArray *amountArray;
} MsgCommunityPoolSpend__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authority",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgCommunityPoolSpend_FieldNumber_Authority,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgCommunityPoolSpend__storage_, authority),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "recipient",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgCommunityPoolSpend_FieldNumber_Recipient,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgCommunityPoolSpend__storage_, recipient),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amountArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = MsgCommunityPoolSpend_FieldNumber_AmountArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MsgCommunityPoolSpend__storage_, amountArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgCommunityPoolSpend)
                                   messageName:@"MsgCommunityPoolSpend"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgCommunityPoolSpend__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgCommunityPoolSpendResponse

@implementation MsgCommunityPoolSpendResponse


typedef struct MsgCommunityPoolSpendResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgCommunityPoolSpendResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgCommunityPoolSpendResponse)
                                   messageName:@"MsgCommunityPoolSpendResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgCommunityPoolSpendResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgDepositValidatorRewardsPool

@implementation MsgDepositValidatorRewardsPool

@dynamic depositor;
@dynamic validatorAddress;
@dynamic amountArray, amountArray_Count;

typedef struct MsgDepositValidatorRewardsPool__storage_ {
  uint32_t _has_storage_[1];
  NSString *depositor;
  NSString *validatorAddress;
  NSMutableArray *amountArray;
} MsgDepositValidatorRewardsPool__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "depositor",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgDepositValidatorRewardsPool_FieldNumber_Depositor,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgDepositValidatorRewardsPool__storage_, depositor),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "validatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgDepositValidatorRewardsPool_FieldNumber_ValidatorAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgDepositValidatorRewardsPool__storage_, validatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amountArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = MsgDepositValidatorRewardsPool_FieldNumber_AmountArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MsgDepositValidatorRewardsPool__storage_, amountArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgDepositValidatorRewardsPool)
                                   messageName:@"MsgDepositValidatorRewardsPool"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgDepositValidatorRewardsPool__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgDepositValidatorRewardsPoolResponse

@implementation MsgDepositValidatorRewardsPoolResponse


typedef struct MsgDepositValidatorRewardsPoolResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgDepositValidatorRewardsPoolResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgDepositValidatorRewardsPoolResponse)
                                   messageName:@"MsgDepositValidatorRewardsPoolResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgDepositValidatorRewardsPoolResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
