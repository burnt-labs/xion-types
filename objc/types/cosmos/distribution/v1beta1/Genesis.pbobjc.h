// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/distribution/v1beta1/genesis.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/base/v1beta1/Coin.pbobjc.h"
#import "cosmos/distribution/v1beta1/Distribution.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class DelegatorStartingInfoRecord;
@class DelegatorWithdrawInfo;
@class ValidatorAccumulatedCommissionRecord;
@class ValidatorCurrentRewardsRecord;
@class ValidatorHistoricalRewardsRecord;
@class ValidatorOutstandingRewardsRecord;
@class ValidatorSlashEventRecord;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - GenesisRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface GenesisRoot : GPBRootObject
@end

#pragma mark - DelegatorWithdrawInfo

typedef GPB_ENUM(DelegatorWithdrawInfo_FieldNumber) {
  DelegatorWithdrawInfo_FieldNumber_DelegatorAddress = 1,
  DelegatorWithdrawInfo_FieldNumber_WithdrawAddress = 2,
};

/**
 * DelegatorWithdrawInfo is the address for where distributions rewards are
 * withdrawn to by default this struct is only used at genesis to feed in
 * default withdraw addresses.
 **/
GPB_FINAL @interface DelegatorWithdrawInfo : GPBMessage

/** delegator_address is the address of the delegator. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *delegatorAddress;

/** withdraw_address is the address to withdraw the delegation rewards to. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *withdrawAddress;

@end

#pragma mark - ValidatorOutstandingRewardsRecord

typedef GPB_ENUM(ValidatorOutstandingRewardsRecord_FieldNumber) {
  ValidatorOutstandingRewardsRecord_FieldNumber_ValidatorAddress = 1,
  ValidatorOutstandingRewardsRecord_FieldNumber_OutstandingRewardsArray = 2,
};

/**
 * ValidatorOutstandingRewardsRecord is used for import/export via genesis json.
 **/
GPB_FINAL @interface ValidatorOutstandingRewardsRecord : GPBMessage

/** validator_address is the address of the validator. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *validatorAddress;

/** outstanding_rewards represents the outstanding rewards of a validator. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<DecCoin*> *outstandingRewardsArray;
/** The number of items in @c outstandingRewardsArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger outstandingRewardsArray_Count;

@end

#pragma mark - ValidatorAccumulatedCommissionRecord

typedef GPB_ENUM(ValidatorAccumulatedCommissionRecord_FieldNumber) {
  ValidatorAccumulatedCommissionRecord_FieldNumber_ValidatorAddress = 1,
  ValidatorAccumulatedCommissionRecord_FieldNumber_Accumulated = 2,
};

/**
 * ValidatorAccumulatedCommissionRecord is used for import / export via genesis
 * json.
 **/
GPB_FINAL @interface ValidatorAccumulatedCommissionRecord : GPBMessage

/** validator_address is the address of the validator. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *validatorAddress;

/** accumulated is the accumulated commission of a validator. */
@property(nonatomic, readwrite, strong, null_resettable) ValidatorAccumulatedCommission *accumulated;
/** Test to see if @c accumulated has been set. */
@property(nonatomic, readwrite) BOOL hasAccumulated;

@end

#pragma mark - ValidatorHistoricalRewardsRecord

typedef GPB_ENUM(ValidatorHistoricalRewardsRecord_FieldNumber) {
  ValidatorHistoricalRewardsRecord_FieldNumber_ValidatorAddress = 1,
  ValidatorHistoricalRewardsRecord_FieldNumber_Period = 2,
  ValidatorHistoricalRewardsRecord_FieldNumber_Rewards = 3,
};

/**
 * ValidatorHistoricalRewardsRecord is used for import / export via genesis
 * json.
 **/
GPB_FINAL @interface ValidatorHistoricalRewardsRecord : GPBMessage

/** validator_address is the address of the validator. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *validatorAddress;

/** period defines the period the historical rewards apply to. */
@property(nonatomic, readwrite) uint64_t period;

/** rewards defines the historical rewards of a validator. */
@property(nonatomic, readwrite, strong, null_resettable) ValidatorHistoricalRewards *rewards;
/** Test to see if @c rewards has been set. */
@property(nonatomic, readwrite) BOOL hasRewards;

@end

#pragma mark - ValidatorCurrentRewardsRecord

typedef GPB_ENUM(ValidatorCurrentRewardsRecord_FieldNumber) {
  ValidatorCurrentRewardsRecord_FieldNumber_ValidatorAddress = 1,
  ValidatorCurrentRewardsRecord_FieldNumber_Rewards = 2,
};

/**
 * ValidatorCurrentRewardsRecord is used for import / export via genesis json.
 **/
GPB_FINAL @interface ValidatorCurrentRewardsRecord : GPBMessage

/** validator_address is the address of the validator. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *validatorAddress;

/** rewards defines the current rewards of a validator. */
@property(nonatomic, readwrite, strong, null_resettable) ValidatorCurrentRewards *rewards;
/** Test to see if @c rewards has been set. */
@property(nonatomic, readwrite) BOOL hasRewards;

@end

#pragma mark - DelegatorStartingInfoRecord

typedef GPB_ENUM(DelegatorStartingInfoRecord_FieldNumber) {
  DelegatorStartingInfoRecord_FieldNumber_DelegatorAddress = 1,
  DelegatorStartingInfoRecord_FieldNumber_ValidatorAddress = 2,
  DelegatorStartingInfoRecord_FieldNumber_StartingInfo = 3,
};

/**
 * DelegatorStartingInfoRecord used for import / export via genesis json.
 **/
GPB_FINAL @interface DelegatorStartingInfoRecord : GPBMessage

/** delegator_address is the address of the delegator. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *delegatorAddress;

/** validator_address is the address of the validator. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *validatorAddress;

/** starting_info defines the starting info of a delegator. */
@property(nonatomic, readwrite, strong, null_resettable) DelegatorStartingInfo *startingInfo;
/** Test to see if @c startingInfo has been set. */
@property(nonatomic, readwrite) BOOL hasStartingInfo;

@end

#pragma mark - ValidatorSlashEventRecord

typedef GPB_ENUM(ValidatorSlashEventRecord_FieldNumber) {
  ValidatorSlashEventRecord_FieldNumber_ValidatorAddress = 1,
  ValidatorSlashEventRecord_FieldNumber_Height = 2,
  ValidatorSlashEventRecord_FieldNumber_Period = 3,
  ValidatorSlashEventRecord_FieldNumber_ValidatorSlashEvent = 4,
};

/**
 * ValidatorSlashEventRecord is used for import / export via genesis json.
 **/
GPB_FINAL @interface ValidatorSlashEventRecord : GPBMessage

/** validator_address is the address of the validator. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *validatorAddress;

/** height defines the block height at which the slash event occurred. */
@property(nonatomic, readwrite) uint64_t height;

/** period is the period of the slash event. */
@property(nonatomic, readwrite) uint64_t period;

/** validator_slash_event describes the slash event. */
@property(nonatomic, readwrite, strong, null_resettable) ValidatorSlashEvent *validatorSlashEvent;
/** Test to see if @c validatorSlashEvent has been set. */
@property(nonatomic, readwrite) BOOL hasValidatorSlashEvent;

@end

#pragma mark - GenesisState

typedef GPB_ENUM(GenesisState_FieldNumber) {
  GenesisState_FieldNumber_Params = 1,
  GenesisState_FieldNumber_FeePool = 2,
  GenesisState_FieldNumber_DelegatorWithdrawInfosArray = 3,
  GenesisState_FieldNumber_PreviousProposer = 4,
  GenesisState_FieldNumber_OutstandingRewardsArray = 5,
  GenesisState_FieldNumber_ValidatorAccumulatedCommissionsArray = 6,
  GenesisState_FieldNumber_ValidatorHistoricalRewardsArray = 7,
  GenesisState_FieldNumber_ValidatorCurrentRewardsArray = 8,
  GenesisState_FieldNumber_DelegatorStartingInfosArray = 9,
  GenesisState_FieldNumber_ValidatorSlashEventsArray = 10,
};

/**
 * GenesisState defines the distribution module's genesis state.
 **/
GPB_FINAL @interface GenesisState : GPBMessage

/** params defines all the parameters of the module. */
@property(nonatomic, readwrite, strong, null_resettable) Params *params;
/** Test to see if @c params has been set. */
@property(nonatomic, readwrite) BOOL hasParams;

/** fee_pool defines the fee pool at genesis. */
@property(nonatomic, readwrite, strong, null_resettable) FeePool *feePool;
/** Test to see if @c feePool has been set. */
@property(nonatomic, readwrite) BOOL hasFeePool;

/** fee_pool defines the delegator withdraw infos at genesis. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<DelegatorWithdrawInfo*> *delegatorWithdrawInfosArray;
/** The number of items in @c delegatorWithdrawInfosArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger delegatorWithdrawInfosArray_Count;

/** fee_pool defines the previous proposer at genesis. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *previousProposer;

/** fee_pool defines the outstanding rewards of all validators at genesis. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ValidatorOutstandingRewardsRecord*> *outstandingRewardsArray;
/** The number of items in @c outstandingRewardsArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger outstandingRewardsArray_Count;

/** fee_pool defines the accumulated commissions of all validators at genesis. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ValidatorAccumulatedCommissionRecord*> *validatorAccumulatedCommissionsArray;
/** The number of items in @c validatorAccumulatedCommissionsArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger validatorAccumulatedCommissionsArray_Count;

/** fee_pool defines the historical rewards of all validators at genesis. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ValidatorHistoricalRewardsRecord*> *validatorHistoricalRewardsArray;
/** The number of items in @c validatorHistoricalRewardsArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger validatorHistoricalRewardsArray_Count;

/** fee_pool defines the current rewards of all validators at genesis. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ValidatorCurrentRewardsRecord*> *validatorCurrentRewardsArray;
/** The number of items in @c validatorCurrentRewardsArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger validatorCurrentRewardsArray_Count;

/** fee_pool defines the delegator starting infos at genesis. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<DelegatorStartingInfoRecord*> *delegatorStartingInfosArray;
/** The number of items in @c delegatorStartingInfosArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger delegatorStartingInfosArray_Count;

/** fee_pool defines the validator slash events at genesis. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ValidatorSlashEventRecord*> *validatorSlashEventsArray;
/** The number of items in @c validatorSlashEventsArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger validatorSlashEventsArray_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
