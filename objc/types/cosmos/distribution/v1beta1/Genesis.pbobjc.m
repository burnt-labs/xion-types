// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/distribution/v1beta1/genesis.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/distribution/v1beta1/Genesis.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(DecCoin);
GPBObjCClassDeclaration(DelegatorStartingInfo);
GPBObjCClassDeclaration(DelegatorStartingInfoRecord);
GPBObjCClassDeclaration(DelegatorWithdrawInfo);
GPBObjCClassDeclaration(FeePool);
GPBObjCClassDeclaration(GenesisState);
GPBObjCClassDeclaration(Params);
GPBObjCClassDeclaration(ValidatorAccumulatedCommission);
GPBObjCClassDeclaration(ValidatorAccumulatedCommissionRecord);
GPBObjCClassDeclaration(ValidatorCurrentRewards);
GPBObjCClassDeclaration(ValidatorCurrentRewardsRecord);
GPBObjCClassDeclaration(ValidatorHistoricalRewards);
GPBObjCClassDeclaration(ValidatorHistoricalRewardsRecord);
GPBObjCClassDeclaration(ValidatorOutstandingRewardsRecord);
GPBObjCClassDeclaration(ValidatorSlashEvent);
GPBObjCClassDeclaration(ValidatorSlashEventRecord);

#pragma mark - GenesisRoot

@implementation GenesisRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription GenesisRoot_FileDescription = {
  .package = "cosmos.distribution.v1beta1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - DelegatorWithdrawInfo

@implementation DelegatorWithdrawInfo

@dynamic delegatorAddress;
@dynamic withdrawAddress;

typedef struct DelegatorWithdrawInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *delegatorAddress;
  NSString *withdrawAddress;
} DelegatorWithdrawInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "delegatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = DelegatorWithdrawInfo_FieldNumber_DelegatorAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DelegatorWithdrawInfo__storage_, delegatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "withdrawAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = DelegatorWithdrawInfo_FieldNumber_WithdrawAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DelegatorWithdrawInfo__storage_, withdrawAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(DelegatorWithdrawInfo)
                                   messageName:@"DelegatorWithdrawInfo"
                               fileDescription:&GenesisRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DelegatorWithdrawInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ValidatorOutstandingRewardsRecord

@implementation ValidatorOutstandingRewardsRecord

@dynamic validatorAddress;
@dynamic outstandingRewardsArray, outstandingRewardsArray_Count;

typedef struct ValidatorOutstandingRewardsRecord__storage_ {
  uint32_t _has_storage_[1];
  NSString *validatorAddress;
  NSMutableArray *outstandingRewardsArray;
} ValidatorOutstandingRewardsRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "validatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = ValidatorOutstandingRewardsRecord_FieldNumber_ValidatorAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ValidatorOutstandingRewardsRecord__storage_, validatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "outstandingRewardsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(DecCoin),
        .number = ValidatorOutstandingRewardsRecord_FieldNumber_OutstandingRewardsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ValidatorOutstandingRewardsRecord__storage_, outstandingRewardsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ValidatorOutstandingRewardsRecord)
                                   messageName:@"ValidatorOutstandingRewardsRecord"
                               fileDescription:&GenesisRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ValidatorOutstandingRewardsRecord__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ValidatorAccumulatedCommissionRecord

@implementation ValidatorAccumulatedCommissionRecord

@dynamic validatorAddress;
@dynamic hasAccumulated, accumulated;

typedef struct ValidatorAccumulatedCommissionRecord__storage_ {
  uint32_t _has_storage_[1];
  NSString *validatorAddress;
  ValidatorAccumulatedCommission *accumulated;
} ValidatorAccumulatedCommissionRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "validatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = ValidatorAccumulatedCommissionRecord_FieldNumber_ValidatorAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ValidatorAccumulatedCommissionRecord__storage_, validatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accumulated",
        .dataTypeSpecific.clazz = GPBObjCClass(ValidatorAccumulatedCommission),
        .number = ValidatorAccumulatedCommissionRecord_FieldNumber_Accumulated,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ValidatorAccumulatedCommissionRecord__storage_, accumulated),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ValidatorAccumulatedCommissionRecord)
                                   messageName:@"ValidatorAccumulatedCommissionRecord"
                               fileDescription:&GenesisRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ValidatorAccumulatedCommissionRecord__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ValidatorHistoricalRewardsRecord

@implementation ValidatorHistoricalRewardsRecord

@dynamic validatorAddress;
@dynamic period;
@dynamic hasRewards, rewards;

typedef struct ValidatorHistoricalRewardsRecord__storage_ {
  uint32_t _has_storage_[1];
  NSString *validatorAddress;
  ValidatorHistoricalRewards *rewards;
  uint64_t period;
} ValidatorHistoricalRewardsRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "validatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = ValidatorHistoricalRewardsRecord_FieldNumber_ValidatorAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ValidatorHistoricalRewardsRecord__storage_, validatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "period",
        .dataTypeSpecific.clazz = Nil,
        .number = ValidatorHistoricalRewardsRecord_FieldNumber_Period,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ValidatorHistoricalRewardsRecord__storage_, period),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "rewards",
        .dataTypeSpecific.clazz = GPBObjCClass(ValidatorHistoricalRewards),
        .number = ValidatorHistoricalRewardsRecord_FieldNumber_Rewards,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ValidatorHistoricalRewardsRecord__storage_, rewards),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ValidatorHistoricalRewardsRecord)
                                   messageName:@"ValidatorHistoricalRewardsRecord"
                               fileDescription:&GenesisRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ValidatorHistoricalRewardsRecord__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ValidatorCurrentRewardsRecord

@implementation ValidatorCurrentRewardsRecord

@dynamic validatorAddress;
@dynamic hasRewards, rewards;

typedef struct ValidatorCurrentRewardsRecord__storage_ {
  uint32_t _has_storage_[1];
  NSString *validatorAddress;
  ValidatorCurrentRewards *rewards;
} ValidatorCurrentRewardsRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "validatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = ValidatorCurrentRewardsRecord_FieldNumber_ValidatorAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ValidatorCurrentRewardsRecord__storage_, validatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rewards",
        .dataTypeSpecific.clazz = GPBObjCClass(ValidatorCurrentRewards),
        .number = ValidatorCurrentRewardsRecord_FieldNumber_Rewards,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ValidatorCurrentRewardsRecord__storage_, rewards),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ValidatorCurrentRewardsRecord)
                                   messageName:@"ValidatorCurrentRewardsRecord"
                               fileDescription:&GenesisRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ValidatorCurrentRewardsRecord__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DelegatorStartingInfoRecord

@implementation DelegatorStartingInfoRecord

@dynamic delegatorAddress;
@dynamic validatorAddress;
@dynamic hasStartingInfo, startingInfo;

typedef struct DelegatorStartingInfoRecord__storage_ {
  uint32_t _has_storage_[1];
  NSString *delegatorAddress;
  NSString *validatorAddress;
  DelegatorStartingInfo *startingInfo;
} DelegatorStartingInfoRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "delegatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = DelegatorStartingInfoRecord_FieldNumber_DelegatorAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DelegatorStartingInfoRecord__storage_, delegatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "validatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = DelegatorStartingInfoRecord_FieldNumber_ValidatorAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DelegatorStartingInfoRecord__storage_, validatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startingInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(DelegatorStartingInfo),
        .number = DelegatorStartingInfoRecord_FieldNumber_StartingInfo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DelegatorStartingInfoRecord__storage_, startingInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(DelegatorStartingInfoRecord)
                                   messageName:@"DelegatorStartingInfoRecord"
                               fileDescription:&GenesisRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DelegatorStartingInfoRecord__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ValidatorSlashEventRecord

@implementation ValidatorSlashEventRecord

@dynamic validatorAddress;
@dynamic height;
@dynamic period;
@dynamic hasValidatorSlashEvent, validatorSlashEvent;

typedef struct ValidatorSlashEventRecord__storage_ {
  uint32_t _has_storage_[1];
  NSString *validatorAddress;
  ValidatorSlashEvent *validatorSlashEvent;
  uint64_t height;
  uint64_t period;
} ValidatorSlashEventRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "validatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = ValidatorSlashEventRecord_FieldNumber_ValidatorAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ValidatorSlashEventRecord__storage_, validatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "height",
        .dataTypeSpecific.clazz = Nil,
        .number = ValidatorSlashEventRecord_FieldNumber_Height,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ValidatorSlashEventRecord__storage_, height),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "period",
        .dataTypeSpecific.clazz = Nil,
        .number = ValidatorSlashEventRecord_FieldNumber_Period,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ValidatorSlashEventRecord__storage_, period),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "validatorSlashEvent",
        .dataTypeSpecific.clazz = GPBObjCClass(ValidatorSlashEvent),
        .number = ValidatorSlashEventRecord_FieldNumber_ValidatorSlashEvent,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ValidatorSlashEventRecord__storage_, validatorSlashEvent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ValidatorSlashEventRecord)
                                   messageName:@"ValidatorSlashEventRecord"
                               fileDescription:&GenesisRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ValidatorSlashEventRecord__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GenesisState

@implementation GenesisState

@dynamic hasParams, params;
@dynamic hasFeePool, feePool;
@dynamic delegatorWithdrawInfosArray, delegatorWithdrawInfosArray_Count;
@dynamic previousProposer;
@dynamic outstandingRewardsArray, outstandingRewardsArray_Count;
@dynamic validatorAccumulatedCommissionsArray, validatorAccumulatedCommissionsArray_Count;
@dynamic validatorHistoricalRewardsArray, validatorHistoricalRewardsArray_Count;
@dynamic validatorCurrentRewardsArray, validatorCurrentRewardsArray_Count;
@dynamic delegatorStartingInfosArray, delegatorStartingInfosArray_Count;
@dynamic validatorSlashEventsArray, validatorSlashEventsArray_Count;

typedef struct GenesisState__storage_ {
  uint32_t _has_storage_[1];
  Params *params;
  FeePool *feePool;
  NSMutableArray *delegatorWithdrawInfosArray;
  NSString *previousProposer;
  NSMutableArray *outstandingRewardsArray;
  NSMutableArray *validatorAccumulatedCommissionsArray;
  NSMutableArray *validatorHistoricalRewardsArray;
  NSMutableArray *validatorCurrentRewardsArray;
  NSMutableArray *delegatorStartingInfosArray;
  NSMutableArray *validatorSlashEventsArray;
} GenesisState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "params",
        .dataTypeSpecific.clazz = GPBObjCClass(Params),
        .number = GenesisState_FieldNumber_Params,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GenesisState__storage_, params),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "feePool",
        .dataTypeSpecific.clazz = GPBObjCClass(FeePool),
        .number = GenesisState_FieldNumber_FeePool,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GenesisState__storage_, feePool),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "delegatorWithdrawInfosArray",
        .dataTypeSpecific.clazz = GPBObjCClass(DelegatorWithdrawInfo),
        .number = GenesisState_FieldNumber_DelegatorWithdrawInfosArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GenesisState__storage_, delegatorWithdrawInfosArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "previousProposer",
        .dataTypeSpecific.clazz = Nil,
        .number = GenesisState_FieldNumber_PreviousProposer,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GenesisState__storage_, previousProposer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "outstandingRewardsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ValidatorOutstandingRewardsRecord),
        .number = GenesisState_FieldNumber_OutstandingRewardsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GenesisState__storage_, outstandingRewardsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "validatorAccumulatedCommissionsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ValidatorAccumulatedCommissionRecord),
        .number = GenesisState_FieldNumber_ValidatorAccumulatedCommissionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GenesisState__storage_, validatorAccumulatedCommissionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "validatorHistoricalRewardsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ValidatorHistoricalRewardsRecord),
        .number = GenesisState_FieldNumber_ValidatorHistoricalRewardsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GenesisState__storage_, validatorHistoricalRewardsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "validatorCurrentRewardsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ValidatorCurrentRewardsRecord),
        .number = GenesisState_FieldNumber_ValidatorCurrentRewardsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GenesisState__storage_, validatorCurrentRewardsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "delegatorStartingInfosArray",
        .dataTypeSpecific.clazz = GPBObjCClass(DelegatorStartingInfoRecord),
        .number = GenesisState_FieldNumber_DelegatorStartingInfosArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GenesisState__storage_, delegatorStartingInfosArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "validatorSlashEventsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ValidatorSlashEventRecord),
        .number = GenesisState_FieldNumber_ValidatorSlashEventsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GenesisState__storage_, validatorSlashEventsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(GenesisState)
                                   messageName:@"GenesisState"
                               fileDescription:&GenesisRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GenesisState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
