// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/base/tendermint/v1beta1/query.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/base/tendermint/v1beta1/Query.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ABCIQueryRequest);
GPBObjCClassDeclaration(ABCIQueryResponse);
GPBObjCClassDeclaration(Block);
GPBObjCClassDeclaration(BlockID);
GPBObjCClassDeclaration(DefaultNodeInfo);
GPBObjCClassDeclaration(GPBAny);
GPBObjCClassDeclaration(GetBlockByHeightRequest);
GPBObjCClassDeclaration(GetBlockByHeightResponse);
GPBObjCClassDeclaration(GetLatestBlockRequest);
GPBObjCClassDeclaration(GetLatestBlockResponse);
GPBObjCClassDeclaration(GetLatestValidatorSetRequest);
GPBObjCClassDeclaration(GetLatestValidatorSetResponse);
GPBObjCClassDeclaration(GetNodeInfoRequest);
GPBObjCClassDeclaration(GetNodeInfoResponse);
GPBObjCClassDeclaration(GetSyncingRequest);
GPBObjCClassDeclaration(GetSyncingResponse);
GPBObjCClassDeclaration(GetValidatorSetByHeightRequest);
GPBObjCClassDeclaration(GetValidatorSetByHeightResponse);
GPBObjCClassDeclaration(Module);
GPBObjCClassDeclaration(PageRequest);
GPBObjCClassDeclaration(PageResponse);
GPBObjCClassDeclaration(ProofOp);
GPBObjCClassDeclaration(ProofOps);
GPBObjCClassDeclaration(Validator);
GPBObjCClassDeclaration(VersionInfo);

#pragma mark - QueryRoot

@implementation QueryRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription QueryRoot_FileDescription = {
  .package = "cosmos.base.tendermint.v1beta1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - GetValidatorSetByHeightRequest

@implementation GetValidatorSetByHeightRequest

@dynamic height;
@dynamic hasPagination, pagination;

typedef struct GetValidatorSetByHeightRequest__storage_ {
  uint32_t _has_storage_[1];
  PageRequest *pagination;
  int64_t height;
} GetValidatorSetByHeightRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "height",
        .dataTypeSpecific.clazz = Nil,
        .number = GetValidatorSetByHeightRequest_FieldNumber_Height,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetValidatorSetByHeightRequest__storage_, height),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageRequest),
        .number = GetValidatorSetByHeightRequest_FieldNumber_Pagination,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetValidatorSetByHeightRequest__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(GetValidatorSetByHeightRequest)
                                   messageName:@"GetValidatorSetByHeightRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetValidatorSetByHeightRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetValidatorSetByHeightResponse

@implementation GetValidatorSetByHeightResponse

@dynamic blockHeight;
@dynamic validatorsArray, validatorsArray_Count;
@dynamic hasPagination, pagination;

typedef struct GetValidatorSetByHeightResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *validatorsArray;
  PageResponse *pagination;
  int64_t blockHeight;
} GetValidatorSetByHeightResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "blockHeight",
        .dataTypeSpecific.clazz = Nil,
        .number = GetValidatorSetByHeightResponse_FieldNumber_BlockHeight,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetValidatorSetByHeightResponse__storage_, blockHeight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "validatorsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Validator),
        .number = GetValidatorSetByHeightResponse_FieldNumber_ValidatorsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetValidatorSetByHeightResponse__storage_, validatorsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageResponse),
        .number = GetValidatorSetByHeightResponse_FieldNumber_Pagination,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetValidatorSetByHeightResponse__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(GetValidatorSetByHeightResponse)
                                   messageName:@"GetValidatorSetByHeightResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetValidatorSetByHeightResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetLatestValidatorSetRequest

@implementation GetLatestValidatorSetRequest

@dynamic hasPagination, pagination;

typedef struct GetLatestValidatorSetRequest__storage_ {
  uint32_t _has_storage_[1];
  PageRequest *pagination;
} GetLatestValidatorSetRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageRequest),
        .number = GetLatestValidatorSetRequest_FieldNumber_Pagination,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetLatestValidatorSetRequest__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(GetLatestValidatorSetRequest)
                                   messageName:@"GetLatestValidatorSetRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetLatestValidatorSetRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetLatestValidatorSetResponse

@implementation GetLatestValidatorSetResponse

@dynamic blockHeight;
@dynamic validatorsArray, validatorsArray_Count;
@dynamic hasPagination, pagination;

typedef struct GetLatestValidatorSetResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *validatorsArray;
  PageResponse *pagination;
  int64_t blockHeight;
} GetLatestValidatorSetResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "blockHeight",
        .dataTypeSpecific.clazz = Nil,
        .number = GetLatestValidatorSetResponse_FieldNumber_BlockHeight,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetLatestValidatorSetResponse__storage_, blockHeight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "validatorsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Validator),
        .number = GetLatestValidatorSetResponse_FieldNumber_ValidatorsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetLatestValidatorSetResponse__storage_, validatorsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageResponse),
        .number = GetLatestValidatorSetResponse_FieldNumber_Pagination,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetLatestValidatorSetResponse__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(GetLatestValidatorSetResponse)
                                   messageName:@"GetLatestValidatorSetResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetLatestValidatorSetResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Validator

@implementation Validator

@dynamic address;
@dynamic hasPubKey, pubKey;
@dynamic votingPower;
@dynamic proposerPriority;

typedef struct Validator__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
  GPBAny *pubKey;
  int64_t votingPower;
  int64_t proposerPriority;
} Validator__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = Validator_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Validator__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pubKey",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = Validator_FieldNumber_PubKey,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Validator__storage_, pubKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "votingPower",
        .dataTypeSpecific.clazz = Nil,
        .number = Validator_FieldNumber_VotingPower,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Validator__storage_, votingPower),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "proposerPriority",
        .dataTypeSpecific.clazz = Nil,
        .number = Validator_FieldNumber_ProposerPriority,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Validator__storage_, proposerPriority),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Validator)
                                   messageName:@"Validator"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Validator__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBlockByHeightRequest

@implementation GetBlockByHeightRequest

@dynamic height;

typedef struct GetBlockByHeightRequest__storage_ {
  uint32_t _has_storage_[1];
  int64_t height;
} GetBlockByHeightRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "height",
        .dataTypeSpecific.clazz = Nil,
        .number = GetBlockByHeightRequest_FieldNumber_Height,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBlockByHeightRequest__storage_, height),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(GetBlockByHeightRequest)
                                   messageName:@"GetBlockByHeightRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBlockByHeightRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBlockByHeightResponse

@implementation GetBlockByHeightResponse

@dynamic hasBlockId, blockId;
@dynamic hasBlock, block;
@dynamic hasSdkBlock, sdkBlock;

typedef struct GetBlockByHeightResponse__storage_ {
  uint32_t _has_storage_[1];
  BlockID *blockId;
  Block *block;
  Block *sdkBlock;
} GetBlockByHeightResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "blockId",
        .dataTypeSpecific.clazz = GPBObjCClass(BlockID),
        .number = GetBlockByHeightResponse_FieldNumber_BlockId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBlockByHeightResponse__storage_, blockId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "block",
        .dataTypeSpecific.clazz = GPBObjCClass(Block),
        .number = GetBlockByHeightResponse_FieldNumber_Block,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetBlockByHeightResponse__storage_, block),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sdkBlock",
        .dataTypeSpecific.clazz = GPBObjCClass(Block),
        .number = GetBlockByHeightResponse_FieldNumber_SdkBlock,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetBlockByHeightResponse__storage_, sdkBlock),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(GetBlockByHeightResponse)
                                   messageName:@"GetBlockByHeightResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBlockByHeightResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetLatestBlockRequest

@implementation GetLatestBlockRequest


typedef struct GetLatestBlockRequest__storage_ {
  uint32_t _has_storage_[1];
} GetLatestBlockRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(GetLatestBlockRequest)
                                   messageName:@"GetLatestBlockRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetLatestBlockRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetLatestBlockResponse

@implementation GetLatestBlockResponse

@dynamic hasBlockId, blockId;
@dynamic hasBlock, block;
@dynamic hasSdkBlock, sdkBlock;

typedef struct GetLatestBlockResponse__storage_ {
  uint32_t _has_storage_[1];
  BlockID *blockId;
  Block *block;
  Block *sdkBlock;
} GetLatestBlockResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "blockId",
        .dataTypeSpecific.clazz = GPBObjCClass(BlockID),
        .number = GetLatestBlockResponse_FieldNumber_BlockId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetLatestBlockResponse__storage_, blockId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "block",
        .dataTypeSpecific.clazz = GPBObjCClass(Block),
        .number = GetLatestBlockResponse_FieldNumber_Block,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetLatestBlockResponse__storage_, block),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sdkBlock",
        .dataTypeSpecific.clazz = GPBObjCClass(Block),
        .number = GetLatestBlockResponse_FieldNumber_SdkBlock,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetLatestBlockResponse__storage_, sdkBlock),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(GetLatestBlockResponse)
                                   messageName:@"GetLatestBlockResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetLatestBlockResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetSyncingRequest

@implementation GetSyncingRequest


typedef struct GetSyncingRequest__storage_ {
  uint32_t _has_storage_[1];
} GetSyncingRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(GetSyncingRequest)
                                   messageName:@"GetSyncingRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetSyncingRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetSyncingResponse

@implementation GetSyncingResponse

@dynamic syncing;

typedef struct GetSyncingResponse__storage_ {
  uint32_t _has_storage_[1];
} GetSyncingResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "syncing",
        .dataTypeSpecific.clazz = Nil,
        .number = GetSyncingResponse_FieldNumber_Syncing,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(GetSyncingResponse)
                                   messageName:@"GetSyncingResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetSyncingResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetNodeInfoRequest

@implementation GetNodeInfoRequest


typedef struct GetNodeInfoRequest__storage_ {
  uint32_t _has_storage_[1];
} GetNodeInfoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(GetNodeInfoRequest)
                                   messageName:@"GetNodeInfoRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetNodeInfoRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetNodeInfoResponse

@implementation GetNodeInfoResponse

@dynamic hasDefaultNodeInfo, defaultNodeInfo;
@dynamic hasApplicationVersion, applicationVersion;

typedef struct GetNodeInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  DefaultNodeInfo *defaultNodeInfo;
  VersionInfo *applicationVersion;
} GetNodeInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "defaultNodeInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(DefaultNodeInfo),
        .number = GetNodeInfoResponse_FieldNumber_DefaultNodeInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetNodeInfoResponse__storage_, defaultNodeInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "applicationVersion",
        .dataTypeSpecific.clazz = GPBObjCClass(VersionInfo),
        .number = GetNodeInfoResponse_FieldNumber_ApplicationVersion,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetNodeInfoResponse__storage_, applicationVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(GetNodeInfoResponse)
                                   messageName:@"GetNodeInfoResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetNodeInfoResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VersionInfo

@implementation VersionInfo

@dynamic name;
@dynamic appName;
@dynamic version;
@dynamic gitCommit;
@dynamic buildTags;
@dynamic goVersion;
@dynamic buildDepsArray, buildDepsArray_Count;
@dynamic cosmosSdkVersion;

typedef struct VersionInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *appName;
  NSString *version;
  NSString *gitCommit;
  NSString *buildTags;
  NSString *goVersion;
  NSMutableArray *buildDepsArray;
  NSString *cosmosSdkVersion;
} VersionInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = VersionInfo_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VersionInfo__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appName",
        .dataTypeSpecific.clazz = Nil,
        .number = VersionInfo_FieldNumber_AppName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VersionInfo__storage_, appName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.clazz = Nil,
        .number = VersionInfo_FieldNumber_Version,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VersionInfo__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gitCommit",
        .dataTypeSpecific.clazz = Nil,
        .number = VersionInfo_FieldNumber_GitCommit,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VersionInfo__storage_, gitCommit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buildTags",
        .dataTypeSpecific.clazz = Nil,
        .number = VersionInfo_FieldNumber_BuildTags,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VersionInfo__storage_, buildTags),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "goVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = VersionInfo_FieldNumber_GoVersion,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VersionInfo__storage_, goVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buildDepsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Module),
        .number = VersionInfo_FieldNumber_BuildDepsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VersionInfo__storage_, buildDepsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cosmosSdkVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = VersionInfo_FieldNumber_CosmosSdkVersion,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(VersionInfo__storage_, cosmosSdkVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(VersionInfo)
                                   messageName:@"VersionInfo"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VersionInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Module

@implementation Module

@dynamic path;
@dynamic version;
@dynamic sum;

typedef struct Module__storage_ {
  uint32_t _has_storage_[1];
  NSString *path;
  NSString *version;
  NSString *sum;
} Module__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "path",
        .dataTypeSpecific.clazz = Nil,
        .number = Module_FieldNumber_Path,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Module__storage_, path),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.clazz = Nil,
        .number = Module_FieldNumber_Version,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Module__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sum",
        .dataTypeSpecific.clazz = Nil,
        .number = Module_FieldNumber_Sum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Module__storage_, sum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Module)
                                   messageName:@"Module"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Module__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ABCIQueryRequest

@implementation ABCIQueryRequest

@dynamic data_p;
@dynamic path;
@dynamic height;
@dynamic prove;

typedef struct ABCIQueryRequest__storage_ {
  uint32_t _has_storage_[1];
  NSData *data_p;
  NSString *path;
  int64_t height;
} ABCIQueryRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = ABCIQueryRequest_FieldNumber_Data_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ABCIQueryRequest__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "path",
        .dataTypeSpecific.clazz = Nil,
        .number = ABCIQueryRequest_FieldNumber_Path,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ABCIQueryRequest__storage_, path),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "height",
        .dataTypeSpecific.clazz = Nil,
        .number = ABCIQueryRequest_FieldNumber_Height,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ABCIQueryRequest__storage_, height),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "prove",
        .dataTypeSpecific.clazz = Nil,
        .number = ABCIQueryRequest_FieldNumber_Prove,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ABCIQueryRequest)
                                   messageName:@"ABCIQueryRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ABCIQueryRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ABCIQueryResponse

@implementation ABCIQueryResponse

@dynamic code;
@dynamic log;
@dynamic info;
@dynamic index;
@dynamic key;
@dynamic value;
@dynamic hasProofOps, proofOps;
@dynamic height;
@dynamic codespace;

typedef struct ABCIQueryResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t code;
  NSString *log;
  NSString *info;
  NSData *key;
  NSData *value;
  ProofOps *proofOps;
  NSString *codespace;
  int64_t index;
  int64_t height;
} ABCIQueryResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = ABCIQueryResponse_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ABCIQueryResponse__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "log",
        .dataTypeSpecific.clazz = Nil,
        .number = ABCIQueryResponse_FieldNumber_Log,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ABCIQueryResponse__storage_, log),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "info",
        .dataTypeSpecific.clazz = Nil,
        .number = ABCIQueryResponse_FieldNumber_Info,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ABCIQueryResponse__storage_, info),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "index",
        .dataTypeSpecific.clazz = Nil,
        .number = ABCIQueryResponse_FieldNumber_Index,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ABCIQueryResponse__storage_, index),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "key",
        .dataTypeSpecific.clazz = Nil,
        .number = ABCIQueryResponse_FieldNumber_Key,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ABCIQueryResponse__storage_, key),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "value",
        .dataTypeSpecific.clazz = Nil,
        .number = ABCIQueryResponse_FieldNumber_Value,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ABCIQueryResponse__storage_, value),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofOps",
        .dataTypeSpecific.clazz = GPBObjCClass(ProofOps),
        .number = ABCIQueryResponse_FieldNumber_ProofOps,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ABCIQueryResponse__storage_, proofOps),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "height",
        .dataTypeSpecific.clazz = Nil,
        .number = ABCIQueryResponse_FieldNumber_Height,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ABCIQueryResponse__storage_, height),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "codespace",
        .dataTypeSpecific.clazz = Nil,
        .number = ABCIQueryResponse_FieldNumber_Codespace,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ABCIQueryResponse__storage_, codespace),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ABCIQueryResponse)
                                   messageName:@"ABCIQueryResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ABCIQueryResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ProofOp

@implementation ProofOp

@dynamic type;
@dynamic key;
@dynamic data_p;

typedef struct ProofOp__storage_ {
  uint32_t _has_storage_[1];
  NSString *type;
  NSData *key;
  NSData *data_p;
} ProofOp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.clazz = Nil,
        .number = ProofOp_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ProofOp__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "key",
        .dataTypeSpecific.clazz = Nil,
        .number = ProofOp_FieldNumber_Key,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ProofOp__storage_, key),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = ProofOp_FieldNumber_Data_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ProofOp__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ProofOp)
                                   messageName:@"ProofOp"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProofOp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ProofOps

@implementation ProofOps

@dynamic opsArray, opsArray_Count;

typedef struct ProofOps__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *opsArray;
} ProofOps__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "opsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ProofOp),
        .number = ProofOps_FieldNumber_OpsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ProofOps__storage_, opsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ProofOps)
                                   messageName:@"ProofOps"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProofOps__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
