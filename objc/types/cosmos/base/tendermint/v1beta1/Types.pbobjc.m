// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/base/tendermint/v1beta1/types.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/base/tendermint/v1beta1/Types.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Block);
GPBObjCClassDeclaration(BlockID);
GPBObjCClassDeclaration(Commit);
GPBObjCClassDeclaration(Consensus);
GPBObjCClassDeclaration(Data);
GPBObjCClassDeclaration(EvidenceList);
GPBObjCClassDeclaration(GPBTimestamp);
GPBObjCClassDeclaration(Header);

#pragma mark - TypesRoot

@implementation TypesRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription TypesRoot_FileDescription = {
  .package = "cosmos.base.tendermint.v1beta1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Block

@implementation Block

@dynamic hasHeader, header;
@dynamic hasData_p, data_p;
@dynamic hasEvidence, evidence;
@dynamic hasLastCommit, lastCommit;

typedef struct Block__storage_ {
  uint32_t _has_storage_[1];
  Header *header;
  Data *data_p;
  EvidenceList *evidence;
  Commit *lastCommit;
} Block__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "header",
        .dataTypeSpecific.clazz = GPBObjCClass(Header),
        .number = Block_FieldNumber_Header,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Block__storage_, header),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = GPBObjCClass(Data),
        .number = Block_FieldNumber_Data_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Block__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "evidence",
        .dataTypeSpecific.clazz = GPBObjCClass(EvidenceList),
        .number = Block_FieldNumber_Evidence,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Block__storage_, evidence),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lastCommit",
        .dataTypeSpecific.clazz = GPBObjCClass(Commit),
        .number = Block_FieldNumber_LastCommit,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Block__storage_, lastCommit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Block)
                                   messageName:@"Block"
                               fileDescription:&TypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Block__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Header

@implementation Header

@dynamic hasVersion, version;
@dynamic chainId;
@dynamic height;
@dynamic hasTime, time;
@dynamic hasLastBlockId, lastBlockId;
@dynamic lastCommitHash;
@dynamic dataHash;
@dynamic validatorsHash;
@dynamic nextValidatorsHash;
@dynamic consensusHash;
@dynamic appHash;
@dynamic lastResultsHash;
@dynamic evidenceHash;
@dynamic proposerAddress;

typedef struct Header__storage_ {
  uint32_t _has_storage_[1];
  Consensus *version;
  NSString *chainId;
  GPBTimestamp *time;
  BlockID *lastBlockId;
  NSData *lastCommitHash;
  NSData *dataHash;
  NSData *validatorsHash;
  NSData *nextValidatorsHash;
  NSData *consensusHash;
  NSData *appHash;
  NSData *lastResultsHash;
  NSData *evidenceHash;
  NSString *proposerAddress;
  int64_t height;
} Header__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "version",
        .dataTypeSpecific.clazz = GPBObjCClass(Consensus),
        .number = Header_FieldNumber_Version,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Header__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chainId",
        .dataTypeSpecific.clazz = Nil,
        .number = Header_FieldNumber_ChainId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Header__storage_, chainId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "height",
        .dataTypeSpecific.clazz = Nil,
        .number = Header_FieldNumber_Height,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Header__storage_, height),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "time",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = Header_FieldNumber_Time,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Header__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lastBlockId",
        .dataTypeSpecific.clazz = GPBObjCClass(BlockID),
        .number = Header_FieldNumber_LastBlockId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Header__storage_, lastBlockId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lastCommitHash",
        .dataTypeSpecific.clazz = Nil,
        .number = Header_FieldNumber_LastCommitHash,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Header__storage_, lastCommitHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "dataHash",
        .dataTypeSpecific.clazz = Nil,
        .number = Header_FieldNumber_DataHash,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Header__storage_, dataHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "validatorsHash",
        .dataTypeSpecific.clazz = Nil,
        .number = Header_FieldNumber_ValidatorsHash,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Header__storage_, validatorsHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "nextValidatorsHash",
        .dataTypeSpecific.clazz = Nil,
        .number = Header_FieldNumber_NextValidatorsHash,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Header__storage_, nextValidatorsHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "consensusHash",
        .dataTypeSpecific.clazz = Nil,
        .number = Header_FieldNumber_ConsensusHash,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(Header__storage_, consensusHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "appHash",
        .dataTypeSpecific.clazz = Nil,
        .number = Header_FieldNumber_AppHash,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(Header__storage_, appHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "lastResultsHash",
        .dataTypeSpecific.clazz = Nil,
        .number = Header_FieldNumber_LastResultsHash,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(Header__storage_, lastResultsHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "evidenceHash",
        .dataTypeSpecific.clazz = Nil,
        .number = Header_FieldNumber_EvidenceHash,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(Header__storage_, evidenceHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proposerAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = Header_FieldNumber_ProposerAddress,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(Header__storage_, proposerAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Header)
                                   messageName:@"Header"
                               fileDescription:&TypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Header__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
