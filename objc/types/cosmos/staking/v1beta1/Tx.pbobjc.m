// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/staking/v1beta1/tx.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/staking/v1beta1/Tx.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Coin);
GPBObjCClassDeclaration(CommissionRates);
GPBObjCClassDeclaration(Description);
GPBObjCClassDeclaration(GPBAny);
GPBObjCClassDeclaration(GPBTimestamp);
GPBObjCClassDeclaration(MsgBeginRedelegate);
GPBObjCClassDeclaration(MsgBeginRedelegateResponse);
GPBObjCClassDeclaration(MsgCancelUnbondingDelegation);
GPBObjCClassDeclaration(MsgCancelUnbondingDelegationResponse);
GPBObjCClassDeclaration(MsgCreateValidator);
GPBObjCClassDeclaration(MsgCreateValidatorResponse);
GPBObjCClassDeclaration(MsgDelegate);
GPBObjCClassDeclaration(MsgDelegateResponse);
GPBObjCClassDeclaration(MsgEditValidator);
GPBObjCClassDeclaration(MsgEditValidatorResponse);
GPBObjCClassDeclaration(MsgUndelegate);
GPBObjCClassDeclaration(MsgUndelegateResponse);
GPBObjCClassDeclaration(MsgUpdateParams);
GPBObjCClassDeclaration(MsgUpdateParamsResponse);
GPBObjCClassDeclaration(Params);

#pragma mark - TxRoot

@implementation TxRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription TxRoot_FileDescription = {
  .package = "cosmos.staking.v1beta1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - MsgCreateValidator

@implementation MsgCreateValidator

@dynamic hasDescription_p, description_p;
@dynamic hasCommission, commission;
@dynamic minSelfDelegation;
@dynamic delegatorAddress;
@dynamic validatorAddress;
@dynamic hasPubkey, pubkey;
@dynamic hasValue, value;

typedef struct MsgCreateValidator__storage_ {
  uint32_t _has_storage_[1];
  Description *description_p;
  CommissionRates *commission;
  NSString *minSelfDelegation;
  NSString *delegatorAddress;
  NSString *validatorAddress;
  GPBAny *pubkey;
  Coin *value;
} MsgCreateValidator__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = GPBObjCClass(Description),
        .number = MsgCreateValidator_FieldNumber_Description_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgCreateValidator__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "commission",
        .dataTypeSpecific.clazz = GPBObjCClass(CommissionRates),
        .number = MsgCreateValidator_FieldNumber_Commission,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgCreateValidator__storage_, commission),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "minSelfDelegation",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgCreateValidator_FieldNumber_MinSelfDelegation,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgCreateValidator__storage_, minSelfDelegation),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "delegatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgCreateValidator_FieldNumber_DelegatorAddress,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgCreateValidator__storage_, delegatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "validatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgCreateValidator_FieldNumber_ValidatorAddress,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MsgCreateValidator__storage_, validatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pubkey",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = MsgCreateValidator_FieldNumber_Pubkey,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MsgCreateValidator__storage_, pubkey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "value",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = MsgCreateValidator_FieldNumber_Value,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(MsgCreateValidator__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgCreateValidator)
                                   messageName:@"MsgCreateValidator"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgCreateValidator__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgCreateValidatorResponse

@implementation MsgCreateValidatorResponse


typedef struct MsgCreateValidatorResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgCreateValidatorResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgCreateValidatorResponse)
                                   messageName:@"MsgCreateValidatorResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgCreateValidatorResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgEditValidator

@implementation MsgEditValidator

@dynamic hasDescription_p, description_p;
@dynamic validatorAddress;
@dynamic commissionRate;
@dynamic minSelfDelegation;

typedef struct MsgEditValidator__storage_ {
  uint32_t _has_storage_[1];
  Description *description_p;
  NSString *validatorAddress;
  NSString *commissionRate;
  NSString *minSelfDelegation;
} MsgEditValidator__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = GPBObjCClass(Description),
        .number = MsgEditValidator_FieldNumber_Description_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgEditValidator__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "validatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgEditValidator_FieldNumber_ValidatorAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgEditValidator__storage_, validatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "commissionRate",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgEditValidator_FieldNumber_CommissionRate,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgEditValidator__storage_, commissionRate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "minSelfDelegation",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgEditValidator_FieldNumber_MinSelfDelegation,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgEditValidator__storage_, minSelfDelegation),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgEditValidator)
                                   messageName:@"MsgEditValidator"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgEditValidator__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgEditValidatorResponse

@implementation MsgEditValidatorResponse


typedef struct MsgEditValidatorResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgEditValidatorResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgEditValidatorResponse)
                                   messageName:@"MsgEditValidatorResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgEditValidatorResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgDelegate

@implementation MsgDelegate

@dynamic delegatorAddress;
@dynamic validatorAddress;
@dynamic hasAmount, amount;

typedef struct MsgDelegate__storage_ {
  uint32_t _has_storage_[1];
  NSString *delegatorAddress;
  NSString *validatorAddress;
  Coin *amount;
} MsgDelegate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "delegatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgDelegate_FieldNumber_DelegatorAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgDelegate__storage_, delegatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "validatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgDelegate_FieldNumber_ValidatorAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgDelegate__storage_, validatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amount",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = MsgDelegate_FieldNumber_Amount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgDelegate__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgDelegate)
                                   messageName:@"MsgDelegate"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgDelegate__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgDelegateResponse

@implementation MsgDelegateResponse


typedef struct MsgDelegateResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgDelegateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgDelegateResponse)
                                   messageName:@"MsgDelegateResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgDelegateResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgBeginRedelegate

@implementation MsgBeginRedelegate

@dynamic delegatorAddress;
@dynamic validatorSrcAddress;
@dynamic validatorDstAddress;
@dynamic hasAmount, amount;

typedef struct MsgBeginRedelegate__storage_ {
  uint32_t _has_storage_[1];
  NSString *delegatorAddress;
  NSString *validatorSrcAddress;
  NSString *validatorDstAddress;
  Coin *amount;
} MsgBeginRedelegate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "delegatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgBeginRedelegate_FieldNumber_DelegatorAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgBeginRedelegate__storage_, delegatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "validatorSrcAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgBeginRedelegate_FieldNumber_ValidatorSrcAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgBeginRedelegate__storage_, validatorSrcAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "validatorDstAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgBeginRedelegate_FieldNumber_ValidatorDstAddress,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgBeginRedelegate__storage_, validatorDstAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amount",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = MsgBeginRedelegate_FieldNumber_Amount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgBeginRedelegate__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgBeginRedelegate)
                                   messageName:@"MsgBeginRedelegate"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgBeginRedelegate__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgBeginRedelegateResponse

@implementation MsgBeginRedelegateResponse

@dynamic hasCompletionTime, completionTime;

typedef struct MsgBeginRedelegateResponse__storage_ {
  uint32_t _has_storage_[1];
  GPBTimestamp *completionTime;
} MsgBeginRedelegateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "completionTime",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = MsgBeginRedelegateResponse_FieldNumber_CompletionTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgBeginRedelegateResponse__storage_, completionTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgBeginRedelegateResponse)
                                   messageName:@"MsgBeginRedelegateResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgBeginRedelegateResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUndelegate

@implementation MsgUndelegate

@dynamic delegatorAddress;
@dynamic validatorAddress;
@dynamic hasAmount, amount;

typedef struct MsgUndelegate__storage_ {
  uint32_t _has_storage_[1];
  NSString *delegatorAddress;
  NSString *validatorAddress;
  Coin *amount;
} MsgUndelegate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "delegatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUndelegate_FieldNumber_DelegatorAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgUndelegate__storage_, delegatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "validatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUndelegate_FieldNumber_ValidatorAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgUndelegate__storage_, validatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amount",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = MsgUndelegate_FieldNumber_Amount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgUndelegate__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUndelegate)
                                   messageName:@"MsgUndelegate"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgUndelegate__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUndelegateResponse

@implementation MsgUndelegateResponse

@dynamic hasCompletionTime, completionTime;
@dynamic hasAmount, amount;

typedef struct MsgUndelegateResponse__storage_ {
  uint32_t _has_storage_[1];
  GPBTimestamp *completionTime;
  Coin *amount;
} MsgUndelegateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "completionTime",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = MsgUndelegateResponse_FieldNumber_CompletionTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgUndelegateResponse__storage_, completionTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "amount",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = MsgUndelegateResponse_FieldNumber_Amount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgUndelegateResponse__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUndelegateResponse)
                                   messageName:@"MsgUndelegateResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgUndelegateResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgCancelUnbondingDelegation

@implementation MsgCancelUnbondingDelegation

@dynamic delegatorAddress;
@dynamic validatorAddress;
@dynamic hasAmount, amount;
@dynamic creationHeight;

typedef struct MsgCancelUnbondingDelegation__storage_ {
  uint32_t _has_storage_[1];
  NSString *delegatorAddress;
  NSString *validatorAddress;
  Coin *amount;
  int64_t creationHeight;
} MsgCancelUnbondingDelegation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "delegatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgCancelUnbondingDelegation_FieldNumber_DelegatorAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgCancelUnbondingDelegation__storage_, delegatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "validatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgCancelUnbondingDelegation_FieldNumber_ValidatorAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgCancelUnbondingDelegation__storage_, validatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amount",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = MsgCancelUnbondingDelegation_FieldNumber_Amount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgCancelUnbondingDelegation__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "creationHeight",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgCancelUnbondingDelegation_FieldNumber_CreationHeight,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgCancelUnbondingDelegation__storage_, creationHeight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgCancelUnbondingDelegation)
                                   messageName:@"MsgCancelUnbondingDelegation"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgCancelUnbondingDelegation__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgCancelUnbondingDelegationResponse

@implementation MsgCancelUnbondingDelegationResponse


typedef struct MsgCancelUnbondingDelegationResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgCancelUnbondingDelegationResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgCancelUnbondingDelegationResponse)
                                   messageName:@"MsgCancelUnbondingDelegationResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgCancelUnbondingDelegationResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateParams

@implementation MsgUpdateParams

@dynamic authority;
@dynamic hasParams, params;

typedef struct MsgUpdateParams__storage_ {
  uint32_t _has_storage_[1];
  NSString *authority;
  Params *params;
} MsgUpdateParams__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authority",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateParams_FieldNumber_Authority,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgUpdateParams__storage_, authority),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "params",
        .dataTypeSpecific.clazz = GPBObjCClass(Params),
        .number = MsgUpdateParams_FieldNumber_Params,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgUpdateParams__storage_, params),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateParams)
                                   messageName:@"MsgUpdateParams"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgUpdateParams__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateParamsResponse

@implementation MsgUpdateParamsResponse


typedef struct MsgUpdateParamsResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgUpdateParamsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateParamsResponse)
                                   messageName:@"MsgUpdateParamsResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgUpdateParamsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
