// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/staking/v1beta1/authz.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import <stdatomic.h>

#import "cosmos/staking/v1beta1/Authz.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Coin);
GPBObjCClassDeclaration(StakeAuthorization);
GPBObjCClassDeclaration(StakeAuthorization_Validators);

#pragma mark - AuthzRoot

@implementation AuthzRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription AuthzRoot_FileDescription = {
  .package = "cosmos.staking.v1beta1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Enum AuthorizationType

GPBEnumDescriptor *AuthorizationType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "AuthorizationTypeUnspecified\000Authorizati"
        "onTypeDelegate\000AuthorizationTypeUndelega"
        "te\000AuthorizationTypeRedelegate\000Authoriza"
        "tionTypeCancelUnbondingDelegation\000";
    static const int32_t values[] = {
        AuthorizationType_AuthorizationTypeUnspecified,
        AuthorizationType_AuthorizationTypeDelegate,
        AuthorizationType_AuthorizationTypeUndelegate,
        AuthorizationType_AuthorizationTypeRedelegate,
        AuthorizationType_AuthorizationTypeCancelUnbondingDelegation,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(AuthorizationType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:AuthorizationType_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL AuthorizationType_IsValidValue(int32_t value__) {
  switch (value__) {
    case AuthorizationType_AuthorizationTypeUnspecified:
    case AuthorizationType_AuthorizationTypeDelegate:
    case AuthorizationType_AuthorizationTypeUndelegate:
    case AuthorizationType_AuthorizationTypeRedelegate:
    case AuthorizationType_AuthorizationTypeCancelUnbondingDelegation:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - StakeAuthorization

@implementation StakeAuthorization

@dynamic validatorsOneOfCase;
@dynamic hasMaxTokens, maxTokens;
@dynamic allowList;
@dynamic denyList;
@dynamic authorizationType;

typedef struct StakeAuthorization__storage_ {
  uint32_t _has_storage_[2];
  AuthorizationType authorizationType;
  Coin *maxTokens;
  StakeAuthorization_Validators *allowList;
  StakeAuthorization_Validators *denyList;
} StakeAuthorization__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "maxTokens",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = StakeAuthorization_FieldNumber_MaxTokens,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StakeAuthorization__storage_, maxTokens),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "allowList",
        .dataTypeSpecific.clazz = GPBObjCClass(StakeAuthorization_Validators),
        .number = StakeAuthorization_FieldNumber_AllowList,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(StakeAuthorization__storage_, allowList),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "denyList",
        .dataTypeSpecific.clazz = GPBObjCClass(StakeAuthorization_Validators),
        .number = StakeAuthorization_FieldNumber_DenyList,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(StakeAuthorization__storage_, denyList),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "authorizationType",
        .dataTypeSpecific.enumDescFunc = AuthorizationType_EnumDescriptor,
        .number = StakeAuthorization_FieldNumber_AuthorizationType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(StakeAuthorization__storage_, authorizationType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(StakeAuthorization)
                                   messageName:@"StakeAuthorization"
                               fileDescription:&AuthzRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StakeAuthorization__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    static const char *oneofs[] = {
      "validators",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t StakeAuthorization_AuthorizationType_RawValue(StakeAuthorization *message) {
  GPBDescriptor *descriptor = [StakeAuthorization descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:StakeAuthorization_FieldNumber_AuthorizationType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetStakeAuthorization_AuthorizationType_RawValue(StakeAuthorization *message, int32_t value) {
  GPBDescriptor *descriptor = [StakeAuthorization descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:StakeAuthorization_FieldNumber_AuthorizationType];
  GPBSetMessageRawEnumField(message, field, value);
}

void StakeAuthorization_ClearValidatorsOneOfCase(StakeAuthorization *message) {
  GPBDescriptor *descriptor = [StakeAuthorization descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - StakeAuthorization_Validators

@implementation StakeAuthorization_Validators

@dynamic addressArray, addressArray_Count;

typedef struct StakeAuthorization_Validators__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *addressArray;
} StakeAuthorization_Validators__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "addressArray",
        .dataTypeSpecific.clazz = Nil,
        .number = StakeAuthorization_Validators_FieldNumber_AddressArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(StakeAuthorization_Validators__storage_, addressArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(StakeAuthorization_Validators)
                                   messageName:@"Validators"
                               fileDescription:&AuthzRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StakeAuthorization_Validators__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(StakeAuthorization)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
