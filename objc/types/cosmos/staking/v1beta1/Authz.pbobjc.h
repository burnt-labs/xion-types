// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/staking/v1beta1/authz.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/base/v1beta1/Coin.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class StakeAuthorization_Validators;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum AuthorizationType

/** AuthorizationType defines the type of staking module authorization type */
typedef GPB_ENUM(AuthorizationType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  AuthorizationType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** AUTHORIZATION_TYPE_UNSPECIFIED specifies an unknown authorization type */
  AuthorizationType_AuthorizationTypeUnspecified = 0,

  /** AUTHORIZATION_TYPE_DELEGATE defines an authorization type for Msg/Delegate */
  AuthorizationType_AuthorizationTypeDelegate = 1,

  /** AUTHORIZATION_TYPE_UNDELEGATE defines an authorization type for Msg/Undelegate */
  AuthorizationType_AuthorizationTypeUndelegate = 2,

  /** AUTHORIZATION_TYPE_REDELEGATE defines an authorization type for Msg/BeginRedelegate */
  AuthorizationType_AuthorizationTypeRedelegate = 3,

  /** AUTHORIZATION_TYPE_CANCEL_UNBONDING_DELEGATION defines an authorization type for Msg/MsgCancelUnbondingDelegation */
  AuthorizationType_AuthorizationTypeCancelUnbondingDelegation = 4,
};

GPBEnumDescriptor *AuthorizationType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL AuthorizationType_IsValidValue(int32_t value);

#pragma mark - AuthzRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface AuthzRoot : GPBRootObject
@end

#pragma mark - StakeAuthorization

typedef GPB_ENUM(StakeAuthorization_FieldNumber) {
  StakeAuthorization_FieldNumber_MaxTokens = 1,
  StakeAuthorization_FieldNumber_AllowList = 2,
  StakeAuthorization_FieldNumber_DenyList = 3,
  StakeAuthorization_FieldNumber_AuthorizationType = 4,
};

typedef GPB_ENUM(StakeAuthorization_Validators_OneOfCase) {
  StakeAuthorization_Validators_OneOfCase_GPBUnsetOneOfCase = 0,
  StakeAuthorization_Validators_OneOfCase_AllowList = 2,
  StakeAuthorization_Validators_OneOfCase_DenyList = 3,
};

/**
 * StakeAuthorization defines authorization for delegate/undelegate/redelegate.
 **/
GPB_FINAL @interface StakeAuthorization : GPBMessage

/**
 * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
 * empty, there is no spend limit and any amount of coins can be delegated.
 **/
@property(nonatomic, readwrite, strong, null_resettable) Coin *maxTokens;
/** Test to see if @c maxTokens has been set. */
@property(nonatomic, readwrite) BOOL hasMaxTokens;

/** validators is the oneof that represents either allow_list or deny_list */
@property(nonatomic, readonly) StakeAuthorization_Validators_OneOfCase validatorsOneOfCase;

/**
 * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
 * account.
 **/
@property(nonatomic, readwrite, strong, null_resettable) StakeAuthorization_Validators *allowList;

/** deny_list specifies list of validator addresses to whom grantee can not delegate tokens. */
@property(nonatomic, readwrite, strong, null_resettable) StakeAuthorization_Validators *denyList;

/** authorization_type defines one of AuthorizationType. */
@property(nonatomic, readwrite) AuthorizationType authorizationType;

@end

/**
 * Fetches the raw value of a @c StakeAuthorization's @c authorizationType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t StakeAuthorization_AuthorizationType_RawValue(StakeAuthorization *message);
/**
 * Sets the raw value of an @c StakeAuthorization's @c authorizationType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetStakeAuthorization_AuthorizationType_RawValue(StakeAuthorization *message, int32_t value);

/**
 * Clears whatever value was set for the oneof 'validators'.
 **/
void StakeAuthorization_ClearValidatorsOneOfCase(StakeAuthorization *message);

#pragma mark - StakeAuthorization_Validators

typedef GPB_ENUM(StakeAuthorization_Validators_FieldNumber) {
  StakeAuthorization_Validators_FieldNumber_AddressArray = 1,
};

/**
 * Validators defines list of validator addresses.
 **/
GPB_FINAL @interface StakeAuthorization_Validators : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *addressArray;
/** The number of items in @c addressArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger addressArray_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
