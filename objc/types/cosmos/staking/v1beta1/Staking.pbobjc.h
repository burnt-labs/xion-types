// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/staking/v1beta1/staking.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/base/v1beta1/Coin.pbobjc.h"
#import "tendermint/types/Types.pbobjc.h"
#import "tendermint/abci/Types.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Commission;
@class CommissionRates;
@class DVPair;
@class DVVTriplet;
@class Delegation;
@class Description;
@class Redelegation;
@class RedelegationEntry;
@class RedelegationEntryResponse;
@class UnbondingDelegationEntry;
@class Validator;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum BondStatus

/** BondStatus is the status of a validator. */
typedef GPB_ENUM(BondStatus) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  BondStatus_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** UNSPECIFIED defines an invalid validator status. */
  BondStatus_BondStatusUnspecified = 0,

  /** UNBONDED defines a validator that is not bonded. */
  BondStatus_BondStatusUnbonded = 1,

  /** UNBONDING defines a validator that is unbonding. */
  BondStatus_BondStatusUnbonding = 2,

  /** BONDED defines a validator that is bonded. */
  BondStatus_BondStatusBonded = 3,
};

GPBEnumDescriptor *BondStatus_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL BondStatus_IsValidValue(int32_t value);

#pragma mark - Enum Infraction

/** Infraction indicates the infraction a validator commited. */
typedef GPB_ENUM(Infraction) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Infraction_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** UNSPECIFIED defines an empty infraction. */
  Infraction_InfractionUnspecified = 0,

  /** DOUBLE_SIGN defines a validator that double-signs a block. */
  Infraction_InfractionDoubleSign = 1,

  /** DOWNTIME defines a validator that missed signing too many blocks. */
  Infraction_InfractionDowntime = 2,
};

GPBEnumDescriptor *Infraction_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Infraction_IsValidValue(int32_t value);

#pragma mark - StakingRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface StakingRoot : GPBRootObject
@end

#pragma mark - HistoricalInfo

typedef GPB_ENUM(HistoricalInfo_FieldNumber) {
  HistoricalInfo_FieldNumber_Header = 1,
  HistoricalInfo_FieldNumber_ValsetArray = 2,
};

/**
 * HistoricalInfo contains header and validator information for a given block.
 * It is stored as part of staking module's state, which persists the `n` most
 * recent HistoricalInfo
 * (`n` is set by the staking module's `historical_entries` parameter).
 **/
GPB_FINAL @interface HistoricalInfo : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) Header *header;
/** Test to see if @c header has been set. */
@property(nonatomic, readwrite) BOOL hasHeader;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Validator*> *valsetArray;
/** The number of items in @c valsetArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger valsetArray_Count;

@end

#pragma mark - CommissionRates

typedef GPB_ENUM(CommissionRates_FieldNumber) {
  CommissionRates_FieldNumber_Rate = 1,
  CommissionRates_FieldNumber_MaxRate = 2,
  CommissionRates_FieldNumber_MaxChangeRate = 3,
};

/**
 * CommissionRates defines the initial commission rates to be used for creating
 * a validator.
 **/
GPB_FINAL @interface CommissionRates : GPBMessage

/** rate is the commission rate charged to delegators, as a fraction. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *rate;

/** max_rate defines the maximum commission rate which validator can ever charge, as a fraction. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *maxRate;

/** max_change_rate defines the maximum daily increase of the validator commission, as a fraction. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *maxChangeRate;

@end

#pragma mark - Commission

typedef GPB_ENUM(Commission_FieldNumber) {
  Commission_FieldNumber_CommissionRates = 1,
  Commission_FieldNumber_UpdateTime = 2,
};

/**
 * Commission defines commission parameters for a given validator.
 **/
GPB_FINAL @interface Commission : GPBMessage

/** commission_rates defines the initial commission rates to be used for creating a validator. */
@property(nonatomic, readwrite, strong, null_resettable) CommissionRates *commissionRates;
/** Test to see if @c commissionRates has been set. */
@property(nonatomic, readwrite) BOOL hasCommissionRates;

/** update_time is the last time the commission rate was changed. */
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *updateTime;
/** Test to see if @c updateTime has been set. */
@property(nonatomic, readwrite) BOOL hasUpdateTime;

@end

#pragma mark - Description

typedef GPB_ENUM(Description_FieldNumber) {
  Description_FieldNumber_Moniker = 1,
  Description_FieldNumber_Identity = 2,
  Description_FieldNumber_Website = 3,
  Description_FieldNumber_SecurityContact = 4,
  Description_FieldNumber_Details = 5,
};

/**
 * Description defines a validator description.
 **/
GPB_FINAL @interface Description : GPBMessage

/** moniker defines a human-readable name for the validator. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *moniker;

/** identity defines an optional identity signature (ex. UPort or Keybase). */
@property(nonatomic, readwrite, copy, null_resettable) NSString *identity;

/** website defines an optional website link. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *website;

/** security_contact defines an optional email for security contact. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *securityContact;

/** details define other optional details. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *details;

@end

#pragma mark - Validator

typedef GPB_ENUM(Validator_FieldNumber) {
  Validator_FieldNumber_OperatorAddress = 1,
  Validator_FieldNumber_ConsensusPubkey = 2,
  Validator_FieldNumber_Jailed = 3,
  Validator_FieldNumber_Status = 4,
  Validator_FieldNumber_Tokens = 5,
  Validator_FieldNumber_DelegatorShares = 6,
  Validator_FieldNumber_Description_p = 7,
  Validator_FieldNumber_UnbondingHeight = 8,
  Validator_FieldNumber_UnbondingTime = 9,
  Validator_FieldNumber_Commission = 10,
  Validator_FieldNumber_MinSelfDelegation = 11,
  Validator_FieldNumber_UnbondingOnHoldRefCount = 12,
  Validator_FieldNumber_UnbondingIdsArray = 13,
};

/**
 * Validator defines a validator, together with the total amount of the
 * Validator's bond shares and their exchange rate to coins. Slashing results in
 * a decrease in the exchange rate, allowing correct calculation of future
 * undelegations without iterating over delegators. When coins are delegated to
 * this validator, the validator is credited with a delegation whose number of
 * bond shares is based on the amount of coins delegated divided by the current
 * exchange rate. Voting power can be calculated as total bonded shares
 * multiplied by exchange rate.
 **/
GPB_FINAL @interface Validator : GPBMessage

/** operator_address defines the address of the validator's operator; bech encoded in JSON. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *operatorAddress;

/** consensus_pubkey is the consensus public key of the validator, as a Protobuf Any. */
@property(nonatomic, readwrite, strong, null_resettable) GPBAny *consensusPubkey;
/** Test to see if @c consensusPubkey has been set. */
@property(nonatomic, readwrite) BOOL hasConsensusPubkey;

/** jailed defined whether the validator has been jailed from bonded status or not. */
@property(nonatomic, readwrite) BOOL jailed;

/** status is the validator status (bonded/unbonding/unbonded). */
@property(nonatomic, readwrite) BondStatus status;

/** tokens define the delegated tokens (incl. self-delegation). */
@property(nonatomic, readwrite, copy, null_resettable) NSString *tokens;

/** delegator_shares defines total shares issued to a validator's delegators. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *delegatorShares;

/** description defines the description terms for the validator. */
@property(nonatomic, readwrite, strong, null_resettable) Description *description_p;
/** Test to see if @c description_p has been set. */
@property(nonatomic, readwrite) BOOL hasDescription_p;

/** unbonding_height defines, if unbonding, the height at which this validator has begun unbonding. */
@property(nonatomic, readwrite) int64_t unbondingHeight;

/** unbonding_time defines, if unbonding, the min time for the validator to complete unbonding. */
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *unbondingTime;
/** Test to see if @c unbondingTime has been set. */
@property(nonatomic, readwrite) BOOL hasUnbondingTime;

/** commission defines the commission parameters. */
@property(nonatomic, readwrite, strong, null_resettable) Commission *commission;
/** Test to see if @c commission has been set. */
@property(nonatomic, readwrite) BOOL hasCommission;

/** min_self_delegation is the validator's self declared minimum self delegation. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *minSelfDelegation;

/** strictly positive if this validator's unbonding has been stopped by external modules */
@property(nonatomic, readwrite) int64_t unbondingOnHoldRefCount;

/** list of unbonding ids, each uniquely identifing an unbonding of this validator */
@property(nonatomic, readwrite, strong, null_resettable) GPBUInt64Array *unbondingIdsArray;
/** The number of items in @c unbondingIdsArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger unbondingIdsArray_Count;

@end

/**
 * Fetches the raw value of a @c Validator's @c status property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Validator_Status_RawValue(Validator *message);
/**
 * Sets the raw value of an @c Validator's @c status property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetValidator_Status_RawValue(Validator *message, int32_t value);

#pragma mark - ValAddresses

typedef GPB_ENUM(ValAddresses_FieldNumber) {
  ValAddresses_FieldNumber_AddressesArray = 1,
};

/**
 * ValAddresses defines a repeated set of validator addresses.
 **/
GPB_FINAL @interface ValAddresses : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *addressesArray;
/** The number of items in @c addressesArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger addressesArray_Count;

@end

#pragma mark - DVPair

typedef GPB_ENUM(DVPair_FieldNumber) {
  DVPair_FieldNumber_DelegatorAddress = 1,
  DVPair_FieldNumber_ValidatorAddress = 2,
};

/**
 * DVPair is struct that just has a delegator-validator pair with no other data.
 * It is intended to be used as a marshalable pointer. For example, a DVPair can
 * be used to construct the key to getting an UnbondingDelegation from state.
 **/
GPB_FINAL @interface DVPair : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *delegatorAddress;

@property(nonatomic, readwrite, copy, null_resettable) NSString *validatorAddress;

@end

#pragma mark - DVPairs

typedef GPB_ENUM(DVPairs_FieldNumber) {
  DVPairs_FieldNumber_PairsArray = 1,
};

/**
 * DVPairs defines an array of DVPair objects.
 **/
GPB_FINAL @interface DVPairs : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<DVPair*> *pairsArray;
/** The number of items in @c pairsArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger pairsArray_Count;

@end

#pragma mark - DVVTriplet

typedef GPB_ENUM(DVVTriplet_FieldNumber) {
  DVVTriplet_FieldNumber_DelegatorAddress = 1,
  DVVTriplet_FieldNumber_ValidatorSrcAddress = 2,
  DVVTriplet_FieldNumber_ValidatorDstAddress = 3,
};

/**
 * DVVTriplet is struct that just has a delegator-validator-validator triplet
 * with no other data. It is intended to be used as a marshalable pointer. For
 * example, a DVVTriplet can be used to construct the key to getting a
 * Redelegation from state.
 **/
GPB_FINAL @interface DVVTriplet : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *delegatorAddress;

@property(nonatomic, readwrite, copy, null_resettable) NSString *validatorSrcAddress;

@property(nonatomic, readwrite, copy, null_resettable) NSString *validatorDstAddress;

@end

#pragma mark - DVVTriplets

typedef GPB_ENUM(DVVTriplets_FieldNumber) {
  DVVTriplets_FieldNumber_TripletsArray = 1,
};

/**
 * DVVTriplets defines an array of DVVTriplet objects.
 **/
GPB_FINAL @interface DVVTriplets : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<DVVTriplet*> *tripletsArray;
/** The number of items in @c tripletsArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger tripletsArray_Count;

@end

#pragma mark - Delegation

typedef GPB_ENUM(Delegation_FieldNumber) {
  Delegation_FieldNumber_DelegatorAddress = 1,
  Delegation_FieldNumber_ValidatorAddress = 2,
  Delegation_FieldNumber_Shares = 3,
};

/**
 * Delegation represents the bond with tokens held by an account. It is
 * owned by one delegator, and is associated with the voting power of one
 * validator.
 **/
GPB_FINAL @interface Delegation : GPBMessage

/** delegator_address is the encoded address of the delegator. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *delegatorAddress;

/** validator_address is the encoded address of the validator. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *validatorAddress;

/** shares define the delegation shares received. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *shares;

@end

#pragma mark - UnbondingDelegation

typedef GPB_ENUM(UnbondingDelegation_FieldNumber) {
  UnbondingDelegation_FieldNumber_DelegatorAddress = 1,
  UnbondingDelegation_FieldNumber_ValidatorAddress = 2,
  UnbondingDelegation_FieldNumber_EntriesArray = 3,
};

/**
 * UnbondingDelegation stores all of a single delegator's unbonding bonds
 * for a single validator in an time-ordered list.
 **/
GPB_FINAL @interface UnbondingDelegation : GPBMessage

/** delegator_address is the encoded address of the delegator. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *delegatorAddress;

/** validator_address is the encoded address of the validator. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *validatorAddress;

/** entries are the unbonding delegation entries. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<UnbondingDelegationEntry*> *entriesArray;
/** The number of items in @c entriesArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger entriesArray_Count;

@end

#pragma mark - UnbondingDelegationEntry

typedef GPB_ENUM(UnbondingDelegationEntry_FieldNumber) {
  UnbondingDelegationEntry_FieldNumber_CreationHeight = 1,
  UnbondingDelegationEntry_FieldNumber_CompletionTime = 2,
  UnbondingDelegationEntry_FieldNumber_InitialBalance = 3,
  UnbondingDelegationEntry_FieldNumber_Balance = 4,
  UnbondingDelegationEntry_FieldNumber_UnbondingId = 5,
  UnbondingDelegationEntry_FieldNumber_UnbondingOnHoldRefCount = 6,
};

/**
 * UnbondingDelegationEntry defines an unbonding object with relevant metadata.
 **/
GPB_FINAL @interface UnbondingDelegationEntry : GPBMessage

/** creation_height is the height which the unbonding took place. */
@property(nonatomic, readwrite) int64_t creationHeight;

/** completion_time is the unix time for unbonding completion. */
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *completionTime;
/** Test to see if @c completionTime has been set. */
@property(nonatomic, readwrite) BOOL hasCompletionTime;

/** initial_balance defines the tokens initially scheduled to receive at completion. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *initialBalance;

/** balance defines the tokens to receive at completion. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *balance;

/** Incrementing id that uniquely identifies this entry */
@property(nonatomic, readwrite) uint64_t unbondingId;

/** Strictly positive if this entry's unbonding has been stopped by external modules */
@property(nonatomic, readwrite) int64_t unbondingOnHoldRefCount;

@end

#pragma mark - RedelegationEntry

typedef GPB_ENUM(RedelegationEntry_FieldNumber) {
  RedelegationEntry_FieldNumber_CreationHeight = 1,
  RedelegationEntry_FieldNumber_CompletionTime = 2,
  RedelegationEntry_FieldNumber_InitialBalance = 3,
  RedelegationEntry_FieldNumber_SharesDst = 4,
  RedelegationEntry_FieldNumber_UnbondingId = 5,
  RedelegationEntry_FieldNumber_UnbondingOnHoldRefCount = 6,
};

/**
 * RedelegationEntry defines a redelegation object with relevant metadata.
 **/
GPB_FINAL @interface RedelegationEntry : GPBMessage

/** creation_height  defines the height which the redelegation took place. */
@property(nonatomic, readwrite) int64_t creationHeight;

/** completion_time defines the unix time for redelegation completion. */
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *completionTime;
/** Test to see if @c completionTime has been set. */
@property(nonatomic, readwrite) BOOL hasCompletionTime;

/** initial_balance defines the initial balance when redelegation started. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *initialBalance;

/** shares_dst is the amount of destination-validator shares created by redelegation. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sharesDst;

/** Incrementing id that uniquely identifies this entry */
@property(nonatomic, readwrite) uint64_t unbondingId;

/** Strictly positive if this entry's unbonding has been stopped by external modules */
@property(nonatomic, readwrite) int64_t unbondingOnHoldRefCount;

@end

#pragma mark - Redelegation

typedef GPB_ENUM(Redelegation_FieldNumber) {
  Redelegation_FieldNumber_DelegatorAddress = 1,
  Redelegation_FieldNumber_ValidatorSrcAddress = 2,
  Redelegation_FieldNumber_ValidatorDstAddress = 3,
  Redelegation_FieldNumber_EntriesArray = 4,
};

/**
 * Redelegation contains the list of a particular delegator's redelegating bonds
 * from a particular source validator to a particular destination validator.
 **/
GPB_FINAL @interface Redelegation : GPBMessage

/** delegator_address is the bech32-encoded address of the delegator. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *delegatorAddress;

/** validator_src_address is the validator redelegation source operator address. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *validatorSrcAddress;

/** validator_dst_address is the validator redelegation destination operator address. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *validatorDstAddress;

/** entries are the redelegation entries. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<RedelegationEntry*> *entriesArray;
/** The number of items in @c entriesArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger entriesArray_Count;

@end

#pragma mark - Params

typedef GPB_ENUM(Params_FieldNumber) {
  Params_FieldNumber_UnbondingTime = 1,
  Params_FieldNumber_MaxValidators = 2,
  Params_FieldNumber_MaxEntries = 3,
  Params_FieldNumber_HistoricalEntries = 4,
  Params_FieldNumber_BondDenom = 5,
  Params_FieldNumber_MinCommissionRate = 6,
};

/**
 * Params defines the parameters for the x/staking module.
 **/
GPB_FINAL @interface Params : GPBMessage

/** unbonding_time is the time duration of unbonding. */
@property(nonatomic, readwrite, strong, null_resettable) GPBDuration *unbondingTime;
/** Test to see if @c unbondingTime has been set. */
@property(nonatomic, readwrite) BOOL hasUnbondingTime;

/** max_validators is the maximum number of validators. */
@property(nonatomic, readwrite) uint32_t maxValidators;

/** max_entries is the max entries for either unbonding delegation or redelegation (per pair/trio). */
@property(nonatomic, readwrite) uint32_t maxEntries;

/** historical_entries is the number of historical entries to persist. */
@property(nonatomic, readwrite) uint32_t historicalEntries;

/** bond_denom defines the bondable coin denomination. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *bondDenom;

/** min_commission_rate is the chain-wide minimum commission rate that a validator can charge their delegators */
@property(nonatomic, readwrite, copy, null_resettable) NSString *minCommissionRate;

@end

#pragma mark - DelegationResponse

typedef GPB_ENUM(DelegationResponse_FieldNumber) {
  DelegationResponse_FieldNumber_Delegation = 1,
  DelegationResponse_FieldNumber_Balance = 2,
};

/**
 * DelegationResponse is equivalent to Delegation except that it contains a
 * balance in addition to shares which is more suitable for client responses.
 **/
GPB_FINAL @interface DelegationResponse : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) Delegation *delegation;
/** Test to see if @c delegation has been set. */
@property(nonatomic, readwrite) BOOL hasDelegation;

@property(nonatomic, readwrite, strong, null_resettable) Coin *balance;
/** Test to see if @c balance has been set. */
@property(nonatomic, readwrite) BOOL hasBalance;

@end

#pragma mark - RedelegationEntryResponse

typedef GPB_ENUM(RedelegationEntryResponse_FieldNumber) {
  RedelegationEntryResponse_FieldNumber_RedelegationEntry = 1,
  RedelegationEntryResponse_FieldNumber_Balance = 4,
};

/**
 * RedelegationEntryResponse is equivalent to a RedelegationEntry except that it
 * contains a balance in addition to shares which is more suitable for client
 * responses.
 **/
GPB_FINAL @interface RedelegationEntryResponse : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) RedelegationEntry *redelegationEntry;
/** Test to see if @c redelegationEntry has been set. */
@property(nonatomic, readwrite) BOOL hasRedelegationEntry;

@property(nonatomic, readwrite, copy, null_resettable) NSString *balance;

@end

#pragma mark - RedelegationResponse

typedef GPB_ENUM(RedelegationResponse_FieldNumber) {
  RedelegationResponse_FieldNumber_Redelegation = 1,
  RedelegationResponse_FieldNumber_EntriesArray = 2,
};

/**
 * RedelegationResponse is equivalent to a Redelegation except that its entries
 * contain a balance in addition to shares which is more suitable for client
 * responses.
 **/
GPB_FINAL @interface RedelegationResponse : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) Redelegation *redelegation;
/** Test to see if @c redelegation has been set. */
@property(nonatomic, readwrite) BOOL hasRedelegation;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<RedelegationEntryResponse*> *entriesArray;
/** The number of items in @c entriesArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger entriesArray_Count;

@end

#pragma mark - Pool

typedef GPB_ENUM(Pool_FieldNumber) {
  Pool_FieldNumber_NotBondedTokens = 1,
  Pool_FieldNumber_BondedTokens = 2,
};

/**
 * Pool is used for tracking bonded and not-bonded token supply of the bond
 * denomination.
 **/
GPB_FINAL @interface Pool : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *notBondedTokens;

@property(nonatomic, readwrite, copy, null_resettable) NSString *bondedTokens;

@end

#pragma mark - ValidatorUpdates

typedef GPB_ENUM(ValidatorUpdates_FieldNumber) {
  ValidatorUpdates_FieldNumber_UpdatesArray = 1,
};

/**
 * ValidatorUpdates defines an array of abci.ValidatorUpdate objects.
 * TODO: explore moving this to proto/cosmos/base to separate modules from tendermint dependence
 **/
GPB_FINAL @interface ValidatorUpdates : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ValidatorUpdate*> *updatesArray;
/** The number of items in @c updatesArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger updatesArray_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
