// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/epochs/v1beta1/genesis.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class EpochInfo;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - GenesisRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface GenesisRoot : GPBRootObject
@end

#pragma mark - EpochInfo

typedef GPB_ENUM(EpochInfo_FieldNumber) {
  EpochInfo_FieldNumber_Identifier = 1,
  EpochInfo_FieldNumber_StartTime = 2,
  EpochInfo_FieldNumber_Duration = 3,
  EpochInfo_FieldNumber_CurrentEpoch = 4,
  EpochInfo_FieldNumber_CurrentEpochStartTime = 5,
  EpochInfo_FieldNumber_EpochCountingStarted = 6,
  EpochInfo_FieldNumber_CurrentEpochStartHeight = 8,
};

/**
 * EpochInfo is a struct that describes the data going into
 * a timer defined by the x/epochs module.
 **/
GPB_FINAL @interface EpochInfo : GPBMessage

/** identifier is a unique reference to this particular timer. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *identifier;

/**
 * start_time is the time at which the timer first ever ticks.
 * If start_time is in the future, the epoch will not begin until the start
 * time.
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *startTime;
/** Test to see if @c startTime has been set. */
@property(nonatomic, readwrite) BOOL hasStartTime;

/**
 * duration is the time in between epoch ticks.
 * In order for intended behavior to be met, duration should
 * be greater than the chains expected block time.
 * Duration must be non-zero.
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBDuration *duration;
/** Test to see if @c duration has been set. */
@property(nonatomic, readwrite) BOOL hasDuration;

/**
 * current_epoch is the current epoch number, or in other words,
 * how many times has the timer 'ticked'.
 * The first tick (current_epoch=1) is defined as
 * the first block whose blocktime is greater than the EpochInfo start_time.
 **/
@property(nonatomic, readwrite) int64_t currentEpoch;

/**
 * current_epoch_start_time describes the start time of the current timer
 * interval. The interval is (current_epoch_start_time,
 * current_epoch_start_time + duration] When the timer ticks, this is set to
 * current_epoch_start_time = last_epoch_start_time + duration only one timer
 * tick for a given identifier can occur per block.
 *
 * NOTE! The current_epoch_start_time may diverge significantly from the
 * wall-clock time the epoch began at. Wall-clock time of epoch start may be
 * >> current_epoch_start_time. Suppose current_epoch_start_time = 10,
 * duration = 5. Suppose the chain goes offline at t=14, and comes back online
 * at t=30, and produces blocks at every successive time. (t=31, 32, etc.)
 * * The t=30 block will start the epoch for (10, 15]
 * * The t=31 block will start the epoch for (15, 20]
 * * The t=32 block will start the epoch for (20, 25]
 * * The t=33 block will start the epoch for (25, 30]
 * * The t=34 block will start the epoch for (30, 35]
 * * The **t=36** block will start the epoch for (35, 40]
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *currentEpochStartTime;
/** Test to see if @c currentEpochStartTime has been set. */
@property(nonatomic, readwrite) BOOL hasCurrentEpochStartTime;

/**
 * epoch_counting_started is a boolean, that indicates whether this
 * epoch timer has began yet.
 **/
@property(nonatomic, readwrite) BOOL epochCountingStarted;

/**
 * current_epoch_start_height is the block height at which the current epoch
 * started. (The block height at which the timer last ticked)
 **/
@property(nonatomic, readwrite) int64_t currentEpochStartHeight;

@end

#pragma mark - GenesisState

typedef GPB_ENUM(GenesisState_FieldNumber) {
  GenesisState_FieldNumber_EpochsArray = 1,
};

/**
 * GenesisState defines the epochs module's genesis state.
 **/
GPB_FINAL @interface GenesisState : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<EpochInfo*> *epochsArray;
/** The number of items in @c epochsArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger epochsArray_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
