// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/autocli/v1/options.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/autocli/v1/Options.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(FlagOptions);
GPBObjCClassDeclaration(ModuleOptions);
GPBObjCClassDeclaration(PositionalArgDescriptor);
GPBObjCClassDeclaration(RpcCommandOptions);
GPBObjCClassDeclaration(ServiceCommandDescriptor);

#pragma mark - OptionsRoot

@implementation OptionsRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription OptionsRoot_FileDescription = {
  .package = "cosmos.autocli.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - ModuleOptions

@implementation ModuleOptions

@dynamic hasTx, tx;
@dynamic hasQuery, query;

typedef struct ModuleOptions__storage_ {
  uint32_t _has_storage_[1];
  ServiceCommandDescriptor *tx;
  ServiceCommandDescriptor *query;
} ModuleOptions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tx",
        .dataTypeSpecific.clazz = GPBObjCClass(ServiceCommandDescriptor),
        .number = ModuleOptions_FieldNumber_Tx,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ModuleOptions__storage_, tx),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "query",
        .dataTypeSpecific.clazz = GPBObjCClass(ServiceCommandDescriptor),
        .number = ModuleOptions_FieldNumber_Query,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ModuleOptions__storage_, query),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ModuleOptions)
                                   messageName:@"ModuleOptions"
                               fileDescription:&OptionsRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ModuleOptions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ServiceCommandDescriptor

@implementation ServiceCommandDescriptor

@dynamic service;
@dynamic rpcCommandOptionsArray, rpcCommandOptionsArray_Count;
@dynamic subCommands, subCommands_Count;
@dynamic enhanceCustomCommand;
@dynamic short_p;

typedef struct ServiceCommandDescriptor__storage_ {
  uint32_t _has_storage_[1];
  NSString *service;
  NSMutableArray *rpcCommandOptionsArray;
  NSMutableDictionary *subCommands;
  NSString *short_p;
} ServiceCommandDescriptor__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "service",
        .dataTypeSpecific.clazz = Nil,
        .number = ServiceCommandDescriptor_FieldNumber_Service,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ServiceCommandDescriptor__storage_, service),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rpcCommandOptionsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(RpcCommandOptions),
        .number = ServiceCommandDescriptor_FieldNumber_RpcCommandOptionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ServiceCommandDescriptor__storage_, rpcCommandOptionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "subCommands",
        .dataTypeSpecific.clazz = GPBObjCClass(ServiceCommandDescriptor),
        .number = ServiceCommandDescriptor_FieldNumber_SubCommands,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ServiceCommandDescriptor__storage_, subCommands),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "enhanceCustomCommand",
        .dataTypeSpecific.clazz = Nil,
        .number = ServiceCommandDescriptor_FieldNumber_EnhanceCustomCommand,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "short_p",
        .dataTypeSpecific.clazz = Nil,
        .number = ServiceCommandDescriptor_FieldNumber_Short_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ServiceCommandDescriptor__storage_, short_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ServiceCommandDescriptor)
                                   messageName:@"ServiceCommandDescriptor"
                               fileDescription:&OptionsRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ServiceCommandDescriptor__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RpcCommandOptions

@implementation RpcCommandOptions

@dynamic rpcMethod;
@dynamic use;
@dynamic long_p;
@dynamic short_p;
@dynamic example;
@dynamic aliasArray, aliasArray_Count;
@dynamic suggestForArray, suggestForArray_Count;
@dynamic deprecated;
@dynamic version;
@dynamic flagOptions, flagOptions_Count;
@dynamic positionalArgsArray, positionalArgsArray_Count;
@dynamic skip;
@dynamic govProposal;

typedef struct RpcCommandOptions__storage_ {
  uint32_t _has_storage_[1];
  NSString *rpcMethod;
  NSString *use;
  NSString *long_p;
  NSString *short_p;
  NSString *example;
  NSMutableArray *aliasArray;
  NSMutableArray *suggestForArray;
  NSString *deprecated;
  NSString *version;
  NSMutableDictionary *flagOptions;
  NSMutableArray *positionalArgsArray;
} RpcCommandOptions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rpcMethod",
        .dataTypeSpecific.clazz = Nil,
        .number = RpcCommandOptions_FieldNumber_RpcMethod,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RpcCommandOptions__storage_, rpcMethod),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "use",
        .dataTypeSpecific.clazz = Nil,
        .number = RpcCommandOptions_FieldNumber_Use,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RpcCommandOptions__storage_, use),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "long_p",
        .dataTypeSpecific.clazz = Nil,
        .number = RpcCommandOptions_FieldNumber_Long_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RpcCommandOptions__storage_, long_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "short_p",
        .dataTypeSpecific.clazz = Nil,
        .number = RpcCommandOptions_FieldNumber_Short_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RpcCommandOptions__storage_, short_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "example",
        .dataTypeSpecific.clazz = Nil,
        .number = RpcCommandOptions_FieldNumber_Example,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RpcCommandOptions__storage_, example),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "aliasArray",
        .dataTypeSpecific.clazz = Nil,
        .number = RpcCommandOptions_FieldNumber_AliasArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RpcCommandOptions__storage_, aliasArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "suggestForArray",
        .dataTypeSpecific.clazz = Nil,
        .number = RpcCommandOptions_FieldNumber_SuggestForArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RpcCommandOptions__storage_, suggestForArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deprecated",
        .dataTypeSpecific.clazz = Nil,
        .number = RpcCommandOptions_FieldNumber_Deprecated,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RpcCommandOptions__storage_, deprecated),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.clazz = Nil,
        .number = RpcCommandOptions_FieldNumber_Version,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RpcCommandOptions__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "flagOptions",
        .dataTypeSpecific.clazz = GPBObjCClass(FlagOptions),
        .number = RpcCommandOptions_FieldNumber_FlagOptions,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RpcCommandOptions__storage_, flagOptions),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "positionalArgsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(PositionalArgDescriptor),
        .number = RpcCommandOptions_FieldNumber_PositionalArgsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RpcCommandOptions__storage_, positionalArgsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "skip",
        .dataTypeSpecific.clazz = Nil,
        .number = RpcCommandOptions_FieldNumber_Skip,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "govProposal",
        .dataTypeSpecific.clazz = Nil,
        .number = RpcCommandOptions_FieldNumber_GovProposal,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(RpcCommandOptions)
                                   messageName:@"RpcCommandOptions"
                               fileDescription:&OptionsRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RpcCommandOptions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FlagOptions

@implementation FlagOptions

@dynamic name;
@dynamic shorthand;
@dynamic usage;
@dynamic defaultValue;
@dynamic deprecated;
@dynamic shorthandDeprecated;
@dynamic hidden;

typedef struct FlagOptions__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *shorthand;
  NSString *usage;
  NSString *defaultValue;
  NSString *deprecated;
  NSString *shorthandDeprecated;
} FlagOptions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = FlagOptions_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FlagOptions__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shorthand",
        .dataTypeSpecific.clazz = Nil,
        .number = FlagOptions_FieldNumber_Shorthand,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FlagOptions__storage_, shorthand),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "usage",
        .dataTypeSpecific.clazz = Nil,
        .number = FlagOptions_FieldNumber_Usage,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FlagOptions__storage_, usage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "defaultValue",
        .dataTypeSpecific.clazz = Nil,
        .number = FlagOptions_FieldNumber_DefaultValue,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FlagOptions__storage_, defaultValue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deprecated",
        .dataTypeSpecific.clazz = Nil,
        .number = FlagOptions_FieldNumber_Deprecated,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(FlagOptions__storage_, deprecated),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shorthandDeprecated",
        .dataTypeSpecific.clazz = Nil,
        .number = FlagOptions_FieldNumber_ShorthandDeprecated,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(FlagOptions__storage_, shorthandDeprecated),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hidden",
        .dataTypeSpecific.clazz = Nil,
        .number = FlagOptions_FieldNumber_Hidden,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(FlagOptions)
                                   messageName:@"FlagOptions"
                               fileDescription:&OptionsRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FlagOptions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PositionalArgDescriptor

@implementation PositionalArgDescriptor

@dynamic protoField;
@dynamic varargs;
@dynamic optional;

typedef struct PositionalArgDescriptor__storage_ {
  uint32_t _has_storage_[1];
  NSString *protoField;
} PositionalArgDescriptor__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "protoField",
        .dataTypeSpecific.clazz = Nil,
        .number = PositionalArgDescriptor_FieldNumber_ProtoField,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PositionalArgDescriptor__storage_, protoField),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "varargs",
        .dataTypeSpecific.clazz = Nil,
        .number = PositionalArgDescriptor_FieldNumber_Varargs,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "optional",
        .dataTypeSpecific.clazz = Nil,
        .number = PositionalArgDescriptor_FieldNumber_Optional,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(PositionalArgDescriptor)
                                   messageName:@"PositionalArgDescriptor"
                               fileDescription:&OptionsRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PositionalArgDescriptor__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
