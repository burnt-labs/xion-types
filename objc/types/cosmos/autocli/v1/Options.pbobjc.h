// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/autocli/v1/options.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class FlagOptions;
@class PositionalArgDescriptor;
@class RpcCommandOptions;
@class ServiceCommandDescriptor;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - OptionsRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface OptionsRoot : GPBRootObject
@end

#pragma mark - ModuleOptions

typedef GPB_ENUM(ModuleOptions_FieldNumber) {
  ModuleOptions_FieldNumber_Tx = 1,
  ModuleOptions_FieldNumber_Query = 2,
};

/**
 * ModuleOptions describes the CLI options for a Cosmos SDK module.
 **/
GPB_FINAL @interface ModuleOptions : GPBMessage

/** tx describes the tx commands for the module. */
@property(nonatomic, readwrite, strong, null_resettable) ServiceCommandDescriptor *tx;
/** Test to see if @c tx has been set. */
@property(nonatomic, readwrite) BOOL hasTx;

/** query describes the queries commands for the module. */
@property(nonatomic, readwrite, strong, null_resettable) ServiceCommandDescriptor *query;
/** Test to see if @c query has been set. */
@property(nonatomic, readwrite) BOOL hasQuery;

@end

#pragma mark - ServiceCommandDescriptor

typedef GPB_ENUM(ServiceCommandDescriptor_FieldNumber) {
  ServiceCommandDescriptor_FieldNumber_Service = 1,
  ServiceCommandDescriptor_FieldNumber_RpcCommandOptionsArray = 2,
  ServiceCommandDescriptor_FieldNumber_SubCommands = 3,
  ServiceCommandDescriptor_FieldNumber_EnhanceCustomCommand = 4,
  ServiceCommandDescriptor_FieldNumber_Short_p = 5,
};

/**
 * ServiceCommandDescriptor describes a CLI command based on a protobuf service.
 **/
GPB_FINAL @interface ServiceCommandDescriptor : GPBMessage

/**
 * service is the fully qualified name of the protobuf service to build
 * the command from. It can be left empty if sub_commands are used instead
 * which may be the case if a module provides multiple tx and/or query services.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *service;

/**
 * rpc_command_options are options for commands generated from rpc methods.
 * If no options are specified for a given rpc method on the service, a
 * command will be generated for that method with the default options.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<RpcCommandOptions*> *rpcCommandOptionsArray;
/** The number of items in @c rpcCommandOptionsArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger rpcCommandOptionsArray_Count;

/**
 * sub_commands is a map of optional sub-commands for this command based on
 * different protobuf services. The map key is used as the name of the
 * sub-command.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, ServiceCommandDescriptor*> *subCommands;
/** The number of items in @c subCommands without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger subCommands_Count;

/**
 * enhance_custom_commands specifies whether to skip the service when generating commands, if a custom command already
 * exists, or enhance the existing command. If set to true, the custom command will be enhanced with the services from
 * gRPC. otherwise when a custom command exists, no commands will be generated for the service.
 **/
@property(nonatomic, readwrite) BOOL enhanceCustomCommand;

/** short is an optional parameter used to override the short description of the auto generated command. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *short_p;

@end

#pragma mark - RpcCommandOptions

typedef GPB_ENUM(RpcCommandOptions_FieldNumber) {
  RpcCommandOptions_FieldNumber_RpcMethod = 1,
  RpcCommandOptions_FieldNumber_Use = 2,
  RpcCommandOptions_FieldNumber_Long_p = 3,
  RpcCommandOptions_FieldNumber_Short_p = 4,
  RpcCommandOptions_FieldNumber_Example = 5,
  RpcCommandOptions_FieldNumber_AliasArray = 6,
  RpcCommandOptions_FieldNumber_SuggestForArray = 7,
  RpcCommandOptions_FieldNumber_Deprecated = 8,
  RpcCommandOptions_FieldNumber_Version = 9,
  RpcCommandOptions_FieldNumber_FlagOptions = 10,
  RpcCommandOptions_FieldNumber_PositionalArgsArray = 11,
  RpcCommandOptions_FieldNumber_Skip = 12,
  RpcCommandOptions_FieldNumber_GovProposal = 13,
};

/**
 * RpcCommandOptions specifies options for commands generated from protobuf
 * rpc methods.
 **/
GPB_FINAL @interface RpcCommandOptions : GPBMessage

/**
 * rpc_method is short name of the protobuf rpc method that this command is
 * generated from.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *rpcMethod;

/**
 * use is the one-line usage method. It also allows specifying an alternate
 * name for the command as the first word of the usage text.
 *
 * By default the name of an rpc command is the kebab-case short name of the
 * rpc method.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *use;

/** long is the long message shown in the 'help <this-command>' output. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *long_p;

/** short is the short description shown in the 'help' output. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *short_p;

/** example is examples of how to use the command. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *example;

/** alias is an array of aliases that can be used instead of the first word in Use. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *aliasArray;
/** The number of items in @c aliasArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger aliasArray_Count;

/**
 * suggest_for is an array of command names for which this command will be suggested -
 * similar to aliases but only suggests.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *suggestForArray;
/** The number of items in @c suggestForArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger suggestForArray_Count;

/** deprecated defines, if this command is deprecated and should print this string when used. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *deprecated;

/**
 * version defines the version for this command. If this value is non-empty and the command does not
 * define a "version" flag, a "version" boolean flag will be added to the command and, if specified,
 * will print content of the "Version" variable. A shorthand "v" flag will also be added if the
 * command does not define one.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *version;

/**
 * flag_options are options for flags generated from rpc request fields.
 * By default all request fields are configured as flags. They can
 * also be configured as positional args instead using positional_args.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, FlagOptions*> *flagOptions;
/** The number of items in @c flagOptions without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger flagOptions_Count;

/** positional_args specifies positional arguments for the command. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PositionalArgDescriptor*> *positionalArgsArray;
/** The number of items in @c positionalArgsArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger positionalArgsArray_Count;

/** skip specifies whether to skip this rpc method when generating commands. */
@property(nonatomic, readwrite) BOOL skip;

/**
 * gov_proposal specifies whether autocli should generate a gov proposal transaction for this rpc method.
 * Normally autocli generates a transaction containing the message and broadcast it.
 * However, when true, autocli generates a proposal transaction containing the message and broadcast it.
 * This option is ineffective for query commands.
 **/
@property(nonatomic, readwrite) BOOL govProposal;

@end

#pragma mark - FlagOptions

typedef GPB_ENUM(FlagOptions_FieldNumber) {
  FlagOptions_FieldNumber_Name = 1,
  FlagOptions_FieldNumber_Shorthand = 2,
  FlagOptions_FieldNumber_Usage = 3,
  FlagOptions_FieldNumber_DefaultValue = 4,
  FlagOptions_FieldNumber_Deprecated = 6,
  FlagOptions_FieldNumber_ShorthandDeprecated = 7,
  FlagOptions_FieldNumber_Hidden = 8,
};

/**
 * FlagOptions are options for flags generated from rpc request fields.
 * By default, all request fields are configured as flags based on the
 * kebab-case name of the field. Fields can be turned into positional arguments
 * instead by using RpcCommandOptions.positional_args.
 **/
GPB_FINAL @interface FlagOptions : GPBMessage

/** name is an alternate name to use for the field flag. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** shorthand is a one-letter abbreviated flag. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *shorthand;

/** usage is the help message. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *usage;

/** default_value is the default value as text. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *defaultValue;

/** deprecated is the usage text to show if this flag is deprecated. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *deprecated;

/** shorthand_deprecated is the usage text to show if the shorthand of this flag is deprecated. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *shorthandDeprecated;

/** hidden hides the flag from help/usage text */
@property(nonatomic, readwrite) BOOL hidden;

@end

#pragma mark - PositionalArgDescriptor

typedef GPB_ENUM(PositionalArgDescriptor_FieldNumber) {
  PositionalArgDescriptor_FieldNumber_ProtoField = 1,
  PositionalArgDescriptor_FieldNumber_Varargs = 2,
  PositionalArgDescriptor_FieldNumber_Optional = 3,
};

/**
 * PositionalArgDescriptor describes a positional argument.
 **/
GPB_FINAL @interface PositionalArgDescriptor : GPBMessage

/**
 * proto_field specifies the proto field to use as the positional arg. Any
 * fields used as positional args will not have a flag generated.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *protoField;

/**
 * varargs makes a positional parameter a varargs parameter. This can only be
 * applied to last positional parameter and the proto_field must a repeated
 * field. Note: It is mutually exclusive with optional.
 **/
@property(nonatomic, readwrite) BOOL varargs;

/**
 * optional makes the last positional parameter optional.
 * Note: It is mutually exclusive with varargs.
 **/
@property(nonatomic, readwrite) BOOL optional;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
