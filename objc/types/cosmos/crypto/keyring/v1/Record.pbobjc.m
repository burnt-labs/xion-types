// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/crypto/keyring/v1/record.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/crypto/keyring/v1/Record.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(BIP44Params);
GPBObjCClassDeclaration(GPBAny);
GPBObjCClassDeclaration(Record);
GPBObjCClassDeclaration(Record_Ledger);
GPBObjCClassDeclaration(Record_Local);
GPBObjCClassDeclaration(Record_Multi);
GPBObjCClassDeclaration(Record_Offline);

#pragma mark - RecordRoot

@implementation RecordRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription RecordRoot_FileDescription = {
  .package = "cosmos.crypto.keyring.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Record

@implementation Record

@dynamic itemOneOfCase;
@dynamic name;
@dynamic hasPubKey, pubKey;
@dynamic local;
@dynamic ledger;
@dynamic multi;
@dynamic offline;

typedef struct Record__storage_ {
  uint32_t _has_storage_[2];
  NSString *name;
  GPBAny *pubKey;
  Record_Local *local;
  Record_Ledger *ledger;
  Record_Multi *multi;
  Record_Offline *offline;
} Record__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = Record_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Record__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pubKey",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = Record_FieldNumber_PubKey,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Record__storage_, pubKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "local",
        .dataTypeSpecific.clazz = GPBObjCClass(Record_Local),
        .number = Record_FieldNumber_Local,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Record__storage_, local),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ledger",
        .dataTypeSpecific.clazz = GPBObjCClass(Record_Ledger),
        .number = Record_FieldNumber_Ledger,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Record__storage_, ledger),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "multi",
        .dataTypeSpecific.clazz = GPBObjCClass(Record_Multi),
        .number = Record_FieldNumber_Multi,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Record__storage_, multi),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "offline",
        .dataTypeSpecific.clazz = GPBObjCClass(Record_Offline),
        .number = Record_FieldNumber_Offline,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Record__storage_, offline),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Record)
                                   messageName:@"Record"
                               fileDescription:&RecordRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Record__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    static const char *oneofs[] = {
      "item",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Record_ClearItemOneOfCase(Record *message) {
  GPBDescriptor *descriptor = [Record descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - Record_Local

@implementation Record_Local

@dynamic hasPrivKey, privKey;

typedef struct Record_Local__storage_ {
  uint32_t _has_storage_[1];
  GPBAny *privKey;
} Record_Local__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "privKey",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = Record_Local_FieldNumber_PrivKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Record_Local__storage_, privKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Record_Local)
                                   messageName:@"Local"
                               fileDescription:&RecordRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Record_Local__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Record)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Record_Ledger

@implementation Record_Ledger

@dynamic hasPath, path;

typedef struct Record_Ledger__storage_ {
  uint32_t _has_storage_[1];
  BIP44Params *path;
} Record_Ledger__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "path",
        .dataTypeSpecific.clazz = GPBObjCClass(BIP44Params),
        .number = Record_Ledger_FieldNumber_Path,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Record_Ledger__storage_, path),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Record_Ledger)
                                   messageName:@"Ledger"
                               fileDescription:&RecordRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Record_Ledger__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Record)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Record_Multi

@implementation Record_Multi


typedef struct Record_Multi__storage_ {
  uint32_t _has_storage_[1];
} Record_Multi__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Record_Multi)
                                   messageName:@"Multi"
                               fileDescription:&RecordRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(Record_Multi__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Record)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Record_Offline

@implementation Record_Offline


typedef struct Record_Offline__storage_ {
  uint32_t _has_storage_[1];
} Record_Offline__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Record_Offline)
                                   messageName:@"Offline"
                               fileDescription:&RecordRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(Record_Offline__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Record)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
