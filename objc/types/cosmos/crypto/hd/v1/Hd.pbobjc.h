// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/crypto/hd/v1/hd.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

NS_ASSUME_NONNULL_BEGIN

#pragma mark - HdRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface HdRoot : GPBRootObject
@end

#pragma mark - BIP44Params

typedef GPB_ENUM(BIP44Params_FieldNumber) {
  BIP44Params_FieldNumber_Purpose = 1,
  BIP44Params_FieldNumber_CoinType = 2,
  BIP44Params_FieldNumber_Account = 3,
  BIP44Params_FieldNumber_Change = 4,
  BIP44Params_FieldNumber_AddressIndex = 5,
};

/**
 * BIP44Params is used as path field in ledger item in Record.
 **/
GPB_FINAL @interface BIP44Params : GPBMessage

/** purpose is a constant set to 44' (or 0x8000002C) following the BIP43 recommendation */
@property(nonatomic, readwrite) uint32_t purpose;

/** coin_type is a constant that improves privacy */
@property(nonatomic, readwrite) uint32_t coinType;

/** account splits the key space into independent user identities */
@property(nonatomic, readwrite) uint32_t account;

/**
 * change is a constant used for public derivation. Constant 0 is used for external chain and constant 1 for internal
 * chain.
 **/
@property(nonatomic, readwrite) BOOL change;

/** address_index is used as child index in BIP32 derivation */
@property(nonatomic, readwrite) uint32_t addressIndex;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
