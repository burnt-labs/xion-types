// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/bank/v1beta1/bank.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/bank/v1beta1/Bank.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Coin);
GPBObjCClassDeclaration(DenomUnit);
GPBObjCClassDeclaration(Input);
GPBObjCClassDeclaration(Metadata);
GPBObjCClassDeclaration(Output);
GPBObjCClassDeclaration(Params);
GPBObjCClassDeclaration(SendEnabled);
GPBObjCClassDeclaration(Supply);

#pragma mark - BankRoot

@implementation BankRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription BankRoot_FileDescription = {
  .package = "cosmos.bank.v1beta1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Params

@implementation Params

@dynamic sendEnabledArray, sendEnabledArray_Count;
@dynamic defaultSendEnabled;

typedef struct Params__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *sendEnabledArray;
} Params__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sendEnabledArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SendEnabled),
        .number = Params_FieldNumber_SendEnabledArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Params__storage_, sendEnabledArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "defaultSendEnabled",
        .dataTypeSpecific.clazz = Nil,
        .number = Params_FieldNumber_DefaultSendEnabled,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Params)
                                   messageName:@"Params"
                               fileDescription:&BankRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Params__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendEnabled

@implementation SendEnabled

@dynamic denom;
@dynamic enabled;

typedef struct SendEnabled__storage_ {
  uint32_t _has_storage_[1];
  NSString *denom;
} SendEnabled__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "denom",
        .dataTypeSpecific.clazz = Nil,
        .number = SendEnabled_FieldNumber_Denom,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendEnabled__storage_, denom),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "enabled",
        .dataTypeSpecific.clazz = Nil,
        .number = SendEnabled_FieldNumber_Enabled,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(SendEnabled)
                                   messageName:@"SendEnabled"
                               fileDescription:&BankRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendEnabled__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Input

@implementation Input

@dynamic address;
@dynamic coinsArray, coinsArray_Count;

typedef struct Input__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
  NSMutableArray *coinsArray;
} Input__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = Input_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Input__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "coinsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = Input_FieldNumber_CoinsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Input__storage_, coinsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Input)
                                   messageName:@"Input"
                               fileDescription:&BankRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Input__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Output

@implementation Output

@dynamic address;
@dynamic coinsArray, coinsArray_Count;

typedef struct Output__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
  NSMutableArray *coinsArray;
} Output__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = Output_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Output__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "coinsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = Output_FieldNumber_CoinsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Output__storage_, coinsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Output)
                                   messageName:@"Output"
                               fileDescription:&BankRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Output__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Supply

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-implementations"

@implementation Supply

@dynamic totalArray, totalArray_Count;

typedef struct Supply__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *totalArray;
} Supply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "totalArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = Supply_FieldNumber_TotalArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Supply__storage_, totalArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Supply)
                                   messageName:@"Supply"
                               fileDescription:&BankRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Supply__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma clang diagnostic pop

#pragma mark - DenomUnit

@implementation DenomUnit

@dynamic denom;
@dynamic exponent;
@dynamic aliasesArray, aliasesArray_Count;

typedef struct DenomUnit__storage_ {
  uint32_t _has_storage_[1];
  uint32_t exponent;
  NSString *denom;
  NSMutableArray *aliasesArray;
} DenomUnit__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "denom",
        .dataTypeSpecific.clazz = Nil,
        .number = DenomUnit_FieldNumber_Denom,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DenomUnit__storage_, denom),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "exponent",
        .dataTypeSpecific.clazz = Nil,
        .number = DenomUnit_FieldNumber_Exponent,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DenomUnit__storage_, exponent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "aliasesArray",
        .dataTypeSpecific.clazz = Nil,
        .number = DenomUnit_FieldNumber_AliasesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DenomUnit__storage_, aliasesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(DenomUnit)
                                   messageName:@"DenomUnit"
                               fileDescription:&BankRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DenomUnit__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Metadata

@implementation Metadata

@dynamic description_p;
@dynamic denomUnitsArray, denomUnitsArray_Count;
@dynamic base;
@dynamic display;
@dynamic name;
@dynamic symbol;
@dynamic uri;
@dynamic uriHash;

typedef struct Metadata__storage_ {
  uint32_t _has_storage_[1];
  NSString *description_p;
  NSMutableArray *denomUnitsArray;
  NSString *base;
  NSString *display;
  NSString *name;
  NSString *symbol;
  NSString *uri;
  NSString *uriHash;
} Metadata__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = Metadata_FieldNumber_Description_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Metadata__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "denomUnitsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(DenomUnit),
        .number = Metadata_FieldNumber_DenomUnitsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Metadata__storage_, denomUnitsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "base",
        .dataTypeSpecific.clazz = Nil,
        .number = Metadata_FieldNumber_Base,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Metadata__storage_, base),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "display",
        .dataTypeSpecific.clazz = Nil,
        .number = Metadata_FieldNumber_Display,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Metadata__storage_, display),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = Metadata_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Metadata__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "symbol",
        .dataTypeSpecific.clazz = Nil,
        .number = Metadata_FieldNumber_Symbol,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Metadata__storage_, symbol),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "uri",
        .dataTypeSpecific.clazz = Nil,
        .number = Metadata_FieldNumber_Uri,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Metadata__storage_, uri),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "uriHash",
        .dataTypeSpecific.clazz = Nil,
        .number = Metadata_FieldNumber_UriHash,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Metadata__storage_, uriHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Metadata)
                                   messageName:@"Metadata"
                               fileDescription:&BankRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Metadata__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
