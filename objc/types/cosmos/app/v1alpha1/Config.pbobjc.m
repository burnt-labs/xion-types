// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/app/v1alpha1/config.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/app/v1alpha1/Config.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Config);
GPBObjCClassDeclaration(GPBAny);
GPBObjCClassDeclaration(GolangBinding);
GPBObjCClassDeclaration(ModuleConfig);

#pragma mark - ConfigRoot

@implementation ConfigRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription ConfigRoot_FileDescription = {
  .package = "cosmos.app.v1alpha1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Config

@implementation Config

@dynamic modulesArray, modulesArray_Count;
@dynamic golangBindingsArray, golangBindingsArray_Count;

typedef struct Config__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *modulesArray;
  NSMutableArray *golangBindingsArray;
} Config__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "modulesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ModuleConfig),
        .number = Config_FieldNumber_ModulesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Config__storage_, modulesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "golangBindingsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(GolangBinding),
        .number = Config_FieldNumber_GolangBindingsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Config__storage_, golangBindingsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Config)
                                   messageName:@"Config"
                               fileDescription:&ConfigRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Config__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ModuleConfig

@implementation ModuleConfig

@dynamic name;
@dynamic hasConfig, config;
@dynamic golangBindingsArray, golangBindingsArray_Count;

typedef struct ModuleConfig__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  GPBAny *config;
  NSMutableArray *golangBindingsArray;
} ModuleConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = ModuleConfig_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ModuleConfig__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "config",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = ModuleConfig_FieldNumber_Config,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ModuleConfig__storage_, config),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "golangBindingsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(GolangBinding),
        .number = ModuleConfig_FieldNumber_GolangBindingsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ModuleConfig__storage_, golangBindingsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ModuleConfig)
                                   messageName:@"ModuleConfig"
                               fileDescription:&ConfigRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ModuleConfig__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GolangBinding

@implementation GolangBinding

@dynamic interfaceType;
@dynamic implementation;

typedef struct GolangBinding__storage_ {
  uint32_t _has_storage_[1];
  NSString *interfaceType;
  NSString *implementation;
} GolangBinding__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "interfaceType",
        .dataTypeSpecific.clazz = Nil,
        .number = GolangBinding_FieldNumber_InterfaceType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GolangBinding__storage_, interfaceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "implementation",
        .dataTypeSpecific.clazz = Nil,
        .number = GolangBinding_FieldNumber_Implementation,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GolangBinding__storage_, implementation),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(GolangBinding)
                                   messageName:@"GolangBinding"
                               fileDescription:&ConfigRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GolangBinding__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
