// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/auth/v1beta1/auth.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/auth/v1beta1/Auth.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(BaseAccount);
GPBObjCClassDeclaration(GPBAny);
GPBObjCClassDeclaration(ModuleAccount);
GPBObjCClassDeclaration(ModuleCredential);
GPBObjCClassDeclaration(Params);

#pragma mark - AuthRoot

@implementation AuthRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription AuthRoot_FileDescription = {
  .package = "cosmos.auth.v1beta1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - BaseAccount

@implementation BaseAccount

@dynamic address;
@dynamic hasPubKey, pubKey;
@dynamic accountNumber;
@dynamic sequence;

typedef struct BaseAccount__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
  GPBAny *pubKey;
  uint64_t accountNumber;
  uint64_t sequence;
} BaseAccount__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = BaseAccount_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BaseAccount__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pubKey",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = BaseAccount_FieldNumber_PubKey,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BaseAccount__storage_, pubKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "accountNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = BaseAccount_FieldNumber_AccountNumber,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BaseAccount__storage_, accountNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "sequence",
        .dataTypeSpecific.clazz = Nil,
        .number = BaseAccount_FieldNumber_Sequence,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BaseAccount__storage_, sequence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(BaseAccount)
                                   messageName:@"BaseAccount"
                               fileDescription:&AuthRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BaseAccount__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ModuleAccount

@implementation ModuleAccount

@dynamic hasBaseAccount, baseAccount;
@dynamic name;
@dynamic permissionsArray, permissionsArray_Count;

typedef struct ModuleAccount__storage_ {
  uint32_t _has_storage_[1];
  BaseAccount *baseAccount;
  NSString *name;
  NSMutableArray *permissionsArray;
} ModuleAccount__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseAccount",
        .dataTypeSpecific.clazz = GPBObjCClass(BaseAccount),
        .number = ModuleAccount_FieldNumber_BaseAccount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ModuleAccount__storage_, baseAccount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = ModuleAccount_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ModuleAccount__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "permissionsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = ModuleAccount_FieldNumber_PermissionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ModuleAccount__storage_, permissionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ModuleAccount)
                                   messageName:@"ModuleAccount"
                               fileDescription:&AuthRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ModuleAccount__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ModuleCredential

@implementation ModuleCredential

@dynamic moduleName;
@dynamic derivationKeysArray, derivationKeysArray_Count;

typedef struct ModuleCredential__storage_ {
  uint32_t _has_storage_[1];
  NSString *moduleName;
  NSMutableArray *derivationKeysArray;
} ModuleCredential__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "moduleName",
        .dataTypeSpecific.clazz = Nil,
        .number = ModuleCredential_FieldNumber_ModuleName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ModuleCredential__storage_, moduleName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "derivationKeysArray",
        .dataTypeSpecific.clazz = Nil,
        .number = ModuleCredential_FieldNumber_DerivationKeysArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ModuleCredential__storage_, derivationKeysArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ModuleCredential)
                                   messageName:@"ModuleCredential"
                               fileDescription:&AuthRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ModuleCredential__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Params

@implementation Params

@dynamic maxMemoCharacters;
@dynamic txSigLimit;
@dynamic txSizeCostPerByte;
@dynamic sigVerifyCostEd25519;
@dynamic sigVerifyCostSecp256K1;

typedef struct Params__storage_ {
  uint32_t _has_storage_[1];
  uint64_t maxMemoCharacters;
  uint64_t txSigLimit;
  uint64_t txSizeCostPerByte;
  uint64_t sigVerifyCostEd25519;
  uint64_t sigVerifyCostSecp256K1;
} Params__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "maxMemoCharacters",
        .dataTypeSpecific.clazz = Nil,
        .number = Params_FieldNumber_MaxMemoCharacters,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Params__storage_, maxMemoCharacters),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "txSigLimit",
        .dataTypeSpecific.clazz = Nil,
        .number = Params_FieldNumber_TxSigLimit,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Params__storage_, txSigLimit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "txSizeCostPerByte",
        .dataTypeSpecific.clazz = Nil,
        .number = Params_FieldNumber_TxSizeCostPerByte,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Params__storage_, txSizeCostPerByte),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "sigVerifyCostEd25519",
        .dataTypeSpecific.clazz = Nil,
        .number = Params_FieldNumber_SigVerifyCostEd25519,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Params__storage_, sigVerifyCostEd25519),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "sigVerifyCostSecp256K1",
        .dataTypeSpecific.clazz = Nil,
        .number = Params_FieldNumber_SigVerifyCostSecp256K1,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Params__storage_, sigVerifyCostSecp256K1),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Params)
                                   messageName:@"Params"
                               fileDescription:&AuthRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Params__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\001\005\003\246\244\247\"\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
