// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/authz/v1beta1/authz.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/authz/v1beta1/Authz.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(GPBAny);
GPBObjCClassDeclaration(GPBTimestamp);
GPBObjCClassDeclaration(GenericAuthorization);
GPBObjCClassDeclaration(Grant);
GPBObjCClassDeclaration(GrantAuthorization);
GPBObjCClassDeclaration(GrantQueueItem);

#pragma mark - AuthzRoot

@implementation AuthzRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription AuthzRoot_FileDescription = {
  .package = "cosmos.authz.v1beta1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - GenericAuthorization

@implementation GenericAuthorization

@dynamic msg;

typedef struct GenericAuthorization__storage_ {
  uint32_t _has_storage_[1];
  NSString *msg;
} GenericAuthorization__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msg",
        .dataTypeSpecific.clazz = Nil,
        .number = GenericAuthorization_FieldNumber_Msg,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GenericAuthorization__storage_, msg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(GenericAuthorization)
                                   messageName:@"GenericAuthorization"
                               fileDescription:&AuthzRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GenericAuthorization__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Grant

@implementation Grant

@dynamic hasAuthorization, authorization;
@dynamic hasExpiration, expiration;

typedef struct Grant__storage_ {
  uint32_t _has_storage_[1];
  GPBAny *authorization;
  GPBTimestamp *expiration;
} Grant__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authorization",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = Grant_FieldNumber_Authorization,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Grant__storage_, authorization),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "expiration",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = Grant_FieldNumber_Expiration,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Grant__storage_, expiration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Grant)
                                   messageName:@"Grant"
                               fileDescription:&AuthzRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Grant__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GrantAuthorization

@implementation GrantAuthorization

@dynamic granter;
@dynamic grantee;
@dynamic hasAuthorization, authorization;
@dynamic hasExpiration, expiration;

typedef struct GrantAuthorization__storage_ {
  uint32_t _has_storage_[1];
  NSString *granter;
  NSString *grantee;
  GPBAny *authorization;
  GPBTimestamp *expiration;
} GrantAuthorization__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "granter",
        .dataTypeSpecific.clazz = Nil,
        .number = GrantAuthorization_FieldNumber_Granter,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GrantAuthorization__storage_, granter),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "grantee",
        .dataTypeSpecific.clazz = Nil,
        .number = GrantAuthorization_FieldNumber_Grantee,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GrantAuthorization__storage_, grantee),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "authorization",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = GrantAuthorization_FieldNumber_Authorization,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GrantAuthorization__storage_, authorization),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "expiration",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = GrantAuthorization_FieldNumber_Expiration,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GrantAuthorization__storage_, expiration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(GrantAuthorization)
                                   messageName:@"GrantAuthorization"
                               fileDescription:&AuthzRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GrantAuthorization__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GrantQueueItem

@implementation GrantQueueItem

@dynamic msgTypeUrlsArray, msgTypeUrlsArray_Count;

typedef struct GrantQueueItem__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *msgTypeUrlsArray;
} GrantQueueItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgTypeUrlsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = GrantQueueItem_FieldNumber_MsgTypeUrlsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GrantQueueItem__storage_, msgTypeUrlsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(GrantQueueItem)
                                   messageName:@"GrantQueueItem"
                               fileDescription:&AuthzRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GrantQueueItem__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
