// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/gov/v1beta1/gov.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import <stdatomic.h>

#import "cosmos/gov/v1beta1/Gov.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Coin);
GPBObjCClassDeclaration(Deposit);
GPBObjCClassDeclaration(DepositParams);
GPBObjCClassDeclaration(GPBAny);
GPBObjCClassDeclaration(GPBDuration);
GPBObjCClassDeclaration(GPBTimestamp);
GPBObjCClassDeclaration(Proposal);
GPBObjCClassDeclaration(TallyParams);
GPBObjCClassDeclaration(TallyResult);
GPBObjCClassDeclaration(TextProposal);
GPBObjCClassDeclaration(Vote);
GPBObjCClassDeclaration(VotingParams);
GPBObjCClassDeclaration(WeightedVoteOption);

#pragma mark - GovRoot

@implementation GovRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription GovRoot_FileDescription = {
  .package = "cosmos.gov.v1beta1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Enum VoteOption

GPBEnumDescriptor *VoteOption_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "VoteOptionUnspecified\000VoteOptionYes\000Vote"
        "OptionAbstain\000VoteOptionNo\000VoteOptionNoW"
        "ithVeto\000";
    static const int32_t values[] = {
        VoteOption_VoteOptionUnspecified,
        VoteOption_VoteOptionYes,
        VoteOption_VoteOptionAbstain,
        VoteOption_VoteOptionNo,
        VoteOption_VoteOptionNoWithVeto,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(VoteOption)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:VoteOption_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL VoteOption_IsValidValue(int32_t value__) {
  switch (value__) {
    case VoteOption_VoteOptionUnspecified:
    case VoteOption_VoteOptionYes:
    case VoteOption_VoteOptionAbstain:
    case VoteOption_VoteOptionNo:
    case VoteOption_VoteOptionNoWithVeto:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ProposalStatus

GPBEnumDescriptor *ProposalStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "ProposalStatusUnspecified\000ProposalStatus"
        "DepositPeriod\000ProposalStatusVotingPeriod"
        "\000ProposalStatusPassed\000ProposalStatusReje"
        "cted\000ProposalStatusFailed\000";
    static const int32_t values[] = {
        ProposalStatus_ProposalStatusUnspecified,
        ProposalStatus_ProposalStatusDepositPeriod,
        ProposalStatus_ProposalStatusVotingPeriod,
        ProposalStatus_ProposalStatusPassed,
        ProposalStatus_ProposalStatusRejected,
        ProposalStatus_ProposalStatusFailed,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ProposalStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ProposalStatus_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ProposalStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case ProposalStatus_ProposalStatusUnspecified:
    case ProposalStatus_ProposalStatusDepositPeriod:
    case ProposalStatus_ProposalStatusVotingPeriod:
    case ProposalStatus_ProposalStatusPassed:
    case ProposalStatus_ProposalStatusRejected:
    case ProposalStatus_ProposalStatusFailed:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - WeightedVoteOption

@implementation WeightedVoteOption

@dynamic option;
@dynamic weight;

typedef struct WeightedVoteOption__storage_ {
  uint32_t _has_storage_[1];
  VoteOption option;
  NSString *weight;
} WeightedVoteOption__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "option",
        .dataTypeSpecific.enumDescFunc = VoteOption_EnumDescriptor,
        .number = WeightedVoteOption_FieldNumber_Option,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WeightedVoteOption__storage_, option),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "weight",
        .dataTypeSpecific.clazz = Nil,
        .number = WeightedVoteOption_FieldNumber_Weight,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WeightedVoteOption__storage_, weight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(WeightedVoteOption)
                                   messageName:@"WeightedVoteOption"
                               fileDescription:&GovRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WeightedVoteOption__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t WeightedVoteOption_Option_RawValue(WeightedVoteOption *message) {
  GPBDescriptor *descriptor = [WeightedVoteOption descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WeightedVoteOption_FieldNumber_Option];
  return GPBGetMessageRawEnumField(message, field);
}

void SetWeightedVoteOption_Option_RawValue(WeightedVoteOption *message, int32_t value) {
  GPBDescriptor *descriptor = [WeightedVoteOption descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WeightedVoteOption_FieldNumber_Option];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - TextProposal

@implementation TextProposal

@dynamic title;
@dynamic description_p;

typedef struct TextProposal__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  NSString *description_p;
} TextProposal__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = TextProposal_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TextProposal__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = TextProposal_FieldNumber_Description_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TextProposal__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(TextProposal)
                                   messageName:@"TextProposal"
                               fileDescription:&GovRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TextProposal__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Deposit

@implementation Deposit

@dynamic proposalId;
@dynamic depositor;
@dynamic amountArray, amountArray_Count;

typedef struct Deposit__storage_ {
  uint32_t _has_storage_[1];
  NSString *depositor;
  NSMutableArray *amountArray;
  uint64_t proposalId;
} Deposit__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "proposalId",
        .dataTypeSpecific.clazz = Nil,
        .number = Deposit_FieldNumber_ProposalId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Deposit__storage_, proposalId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "depositor",
        .dataTypeSpecific.clazz = Nil,
        .number = Deposit_FieldNumber_Depositor,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Deposit__storage_, depositor),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amountArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = Deposit_FieldNumber_AmountArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Deposit__storage_, amountArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Deposit)
                                   messageName:@"Deposit"
                               fileDescription:&GovRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Deposit__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Proposal

@implementation Proposal

@dynamic proposalId;
@dynamic hasContent, content;
@dynamic status;
@dynamic hasFinalTallyResult, finalTallyResult;
@dynamic hasSubmitTime, submitTime;
@dynamic hasDepositEndTime, depositEndTime;
@dynamic totalDepositArray, totalDepositArray_Count;
@dynamic hasVotingStartTime, votingStartTime;
@dynamic hasVotingEndTime, votingEndTime;

typedef struct Proposal__storage_ {
  uint32_t _has_storage_[1];
  ProposalStatus status;
  GPBAny *content;
  TallyResult *finalTallyResult;
  GPBTimestamp *submitTime;
  GPBTimestamp *depositEndTime;
  NSMutableArray *totalDepositArray;
  GPBTimestamp *votingStartTime;
  GPBTimestamp *votingEndTime;
  uint64_t proposalId;
} Proposal__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "proposalId",
        .dataTypeSpecific.clazz = Nil,
        .number = Proposal_FieldNumber_ProposalId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Proposal__storage_, proposalId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "content",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = Proposal_FieldNumber_Content,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Proposal__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = ProposalStatus_EnumDescriptor,
        .number = Proposal_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Proposal__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "finalTallyResult",
        .dataTypeSpecific.clazz = GPBObjCClass(TallyResult),
        .number = Proposal_FieldNumber_FinalTallyResult,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Proposal__storage_, finalTallyResult),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "submitTime",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = Proposal_FieldNumber_SubmitTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Proposal__storage_, submitTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "depositEndTime",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = Proposal_FieldNumber_DepositEndTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Proposal__storage_, depositEndTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "totalDepositArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = Proposal_FieldNumber_TotalDepositArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Proposal__storage_, totalDepositArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "votingStartTime",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = Proposal_FieldNumber_VotingStartTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Proposal__storage_, votingStartTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "votingEndTime",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = Proposal_FieldNumber_VotingEndTime,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Proposal__storage_, votingEndTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Proposal)
                                   messageName:@"Proposal"
                               fileDescription:&GovRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Proposal__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Proposal_Status_RawValue(Proposal *message) {
  GPBDescriptor *descriptor = [Proposal descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Proposal_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void SetProposal_Status_RawValue(Proposal *message, int32_t value) {
  GPBDescriptor *descriptor = [Proposal descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Proposal_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - TallyResult

@implementation TallyResult

@dynamic yes;
@dynamic abstain;
@dynamic no;
@dynamic noWithVeto;

typedef struct TallyResult__storage_ {
  uint32_t _has_storage_[1];
  NSString *yes;
  NSString *abstain;
  NSString *no;
  NSString *noWithVeto;
} TallyResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "yes",
        .dataTypeSpecific.clazz = Nil,
        .number = TallyResult_FieldNumber_Yes,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TallyResult__storage_, yes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "abstain",
        .dataTypeSpecific.clazz = Nil,
        .number = TallyResult_FieldNumber_Abstain,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TallyResult__storage_, abstain),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "no",
        .dataTypeSpecific.clazz = Nil,
        .number = TallyResult_FieldNumber_No,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TallyResult__storage_, no),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "noWithVeto",
        .dataTypeSpecific.clazz = Nil,
        .number = TallyResult_FieldNumber_NoWithVeto,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TallyResult__storage_, noWithVeto),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(TallyResult)
                                   messageName:@"TallyResult"
                               fileDescription:&GovRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TallyResult__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Vote

@implementation Vote

@dynamic proposalId;
@dynamic voter;
@dynamic option;
@dynamic optionsArray, optionsArray_Count;

typedef struct Vote__storage_ {
  uint32_t _has_storage_[1];
  VoteOption option;
  NSString *voter;
  NSMutableArray *optionsArray;
  uint64_t proposalId;
} Vote__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "proposalId",
        .dataTypeSpecific.clazz = Nil,
        .number = Vote_FieldNumber_ProposalId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Vote__storage_, proposalId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "voter",
        .dataTypeSpecific.clazz = Nil,
        .number = Vote_FieldNumber_Voter,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Vote__storage_, voter),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "option",
        .dataTypeSpecific.enumDescFunc = VoteOption_EnumDescriptor,
        .number = Vote_FieldNumber_Option,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Vote__storage_, option),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "optionsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(WeightedVoteOption),
        .number = Vote_FieldNumber_OptionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Vote__storage_, optionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Vote)
                                   messageName:@"Vote"
                               fileDescription:&GovRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Vote__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Vote_Option_RawValue(Vote *message) {
  GPBDescriptor *descriptor = [Vote descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Vote_FieldNumber_Option];
  return GPBGetMessageRawEnumField(message, field);
}

void SetVote_Option_RawValue(Vote *message, int32_t value) {
  GPBDescriptor *descriptor = [Vote descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Vote_FieldNumber_Option];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - DepositParams

@implementation DepositParams

@dynamic minDepositArray, minDepositArray_Count;
@dynamic hasMaxDepositPeriod, maxDepositPeriod;

typedef struct DepositParams__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *minDepositArray;
  GPBDuration *maxDepositPeriod;
} DepositParams__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "minDepositArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = DepositParams_FieldNumber_MinDepositArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DepositParams__storage_, minDepositArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "maxDepositPeriod",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBDuration),
        .number = DepositParams_FieldNumber_MaxDepositPeriod,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DepositParams__storage_, maxDepositPeriod),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(DepositParams)
                                   messageName:@"DepositParams"
                               fileDescription:&GovRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DepositParams__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VotingParams

@implementation VotingParams

@dynamic hasVotingPeriod, votingPeriod;

typedef struct VotingParams__storage_ {
  uint32_t _has_storage_[1];
  GPBDuration *votingPeriod;
} VotingParams__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "votingPeriod",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBDuration),
        .number = VotingParams_FieldNumber_VotingPeriod,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VotingParams__storage_, votingPeriod),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(VotingParams)
                                   messageName:@"VotingParams"
                               fileDescription:&GovRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VotingParams__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TallyParams

@implementation TallyParams

@dynamic quorum;
@dynamic threshold;
@dynamic vetoThreshold;

typedef struct TallyParams__storage_ {
  uint32_t _has_storage_[1];
  NSData *quorum;
  NSData *threshold;
  NSData *vetoThreshold;
} TallyParams__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "quorum",
        .dataTypeSpecific.clazz = Nil,
        .number = TallyParams_FieldNumber_Quorum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TallyParams__storage_, quorum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "threshold",
        .dataTypeSpecific.clazz = Nil,
        .number = TallyParams_FieldNumber_Threshold,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TallyParams__storage_, threshold),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "vetoThreshold",
        .dataTypeSpecific.clazz = Nil,
        .number = TallyParams_FieldNumber_VetoThreshold,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TallyParams__storage_, vetoThreshold),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(TallyParams)
                                   messageName:@"TallyParams"
                               fileDescription:&GovRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TallyParams__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
