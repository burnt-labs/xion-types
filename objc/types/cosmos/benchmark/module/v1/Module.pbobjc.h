// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/benchmark/module/v1/module.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class GeneratorParams;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - ModuleRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface ModuleRoot : GPBRootObject
@end

#pragma mark - Module

typedef GPB_ENUM(Module_FieldNumber) {
  Module_FieldNumber_GenesisParams = 1,
};

/**
 * Module is the config object of the benchmark module.
 **/
GPB_FINAL @interface Module : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) GeneratorParams *genesisParams;
/** Test to see if @c genesisParams has been set. */
@property(nonatomic, readwrite) BOOL hasGenesisParams;

@end

#pragma mark - GeneratorParams

typedef GPB_ENUM(GeneratorParams_FieldNumber) {
  GeneratorParams_FieldNumber_Seed = 1,
  GeneratorParams_FieldNumber_BucketCount = 2,
  GeneratorParams_FieldNumber_KeyMean = 3,
  GeneratorParams_FieldNumber_KeyStdDev = 4,
  GeneratorParams_FieldNumber_ValueMean = 6,
  GeneratorParams_FieldNumber_ValueStdDev = 7,
  GeneratorParams_FieldNumber_GenesisCount = 8,
  GeneratorParams_FieldNumber_InsertWeight = 9,
  GeneratorParams_FieldNumber_UpdateWeight = 10,
  GeneratorParams_FieldNumber_DeleteWeight = 11,
  GeneratorParams_FieldNumber_GetWeight = 12,
};

/**
 * GenesisParams defines the genesis parameters for the benchmark module.
 **/
GPB_FINAL @interface GeneratorParams : GPBMessage

/** seed is the seed for the random number generator. */
@property(nonatomic, readwrite) uint64_t seed;

/** bucket_count is the number of store keys to uniformly distribute genesis_count keys across. */
@property(nonatomic, readwrite) uint64_t bucketCount;

/** key_mean is the mean size (in normal distribution) of keys in each bucket. */
@property(nonatomic, readwrite) uint64_t keyMean;

/** key_std_dev is the standard deviation of key sizes in each bucket. */
@property(nonatomic, readwrite) uint64_t keyStdDev;

/** value_mean is the mean size (in normal distribution) of values in each bucket. */
@property(nonatomic, readwrite) uint64_t valueMean;

/** value_std_dev is the standard deviation of value sizes in each bucket. */
@property(nonatomic, readwrite) uint64_t valueStdDev;

/** genesis_count is the number of keys to insert in the store, distributed across all buckets. */
@property(nonatomic, readwrite) uint64_t genesisCount;

/** insert_weight is the weight of insert operations. */
@property(nonatomic, readwrite) float insertWeight;

/** update_weight is the weight of update operations. */
@property(nonatomic, readwrite) float updateWeight;

/** get_weight is the weight of get operations. */
@property(nonatomic, readwrite) float getWeight;

/** delete_weight is the weight of delete operations. */
@property(nonatomic, readwrite) float deleteWeight;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
