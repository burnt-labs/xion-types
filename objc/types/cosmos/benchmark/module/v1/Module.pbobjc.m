// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/benchmark/module/v1/module.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/benchmark/module/v1/Module.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(GeneratorParams);
GPBObjCClassDeclaration(Module);

#pragma mark - ModuleRoot

@implementation ModuleRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription ModuleRoot_FileDescription = {
  .package = "cosmos.benchmark.module.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Module

@implementation Module

@dynamic hasGenesisParams, genesisParams;

typedef struct Module__storage_ {
  uint32_t _has_storage_[1];
  GeneratorParams *genesisParams;
} Module__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "genesisParams",
        .dataTypeSpecific.clazz = GPBObjCClass(GeneratorParams),
        .number = Module_FieldNumber_GenesisParams,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Module__storage_, genesisParams),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Module)
                                   messageName:@"Module"
                               fileDescription:&ModuleRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Module__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GeneratorParams

@implementation GeneratorParams

@dynamic seed;
@dynamic bucketCount;
@dynamic keyMean;
@dynamic keyStdDev;
@dynamic valueMean;
@dynamic valueStdDev;
@dynamic genesisCount;
@dynamic insertWeight;
@dynamic updateWeight;
@dynamic getWeight;
@dynamic deleteWeight;

typedef struct GeneratorParams__storage_ {
  uint32_t _has_storage_[1];
  float insertWeight;
  float updateWeight;
  float deleteWeight;
  float getWeight;
  uint64_t seed;
  uint64_t bucketCount;
  uint64_t keyMean;
  uint64_t keyStdDev;
  uint64_t valueMean;
  uint64_t valueStdDev;
  uint64_t genesisCount;
} GeneratorParams__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "seed",
        .dataTypeSpecific.clazz = Nil,
        .number = GeneratorParams_FieldNumber_Seed,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GeneratorParams__storage_, seed),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "bucketCount",
        .dataTypeSpecific.clazz = Nil,
        .number = GeneratorParams_FieldNumber_BucketCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GeneratorParams__storage_, bucketCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "keyMean",
        .dataTypeSpecific.clazz = Nil,
        .number = GeneratorParams_FieldNumber_KeyMean,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GeneratorParams__storage_, keyMean),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "keyStdDev",
        .dataTypeSpecific.clazz = Nil,
        .number = GeneratorParams_FieldNumber_KeyStdDev,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GeneratorParams__storage_, keyStdDev),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "valueMean",
        .dataTypeSpecific.clazz = Nil,
        .number = GeneratorParams_FieldNumber_ValueMean,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GeneratorParams__storage_, valueMean),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "valueStdDev",
        .dataTypeSpecific.clazz = Nil,
        .number = GeneratorParams_FieldNumber_ValueStdDev,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GeneratorParams__storage_, valueStdDev),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "genesisCount",
        .dataTypeSpecific.clazz = Nil,
        .number = GeneratorParams_FieldNumber_GenesisCount,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GeneratorParams__storage_, genesisCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "insertWeight",
        .dataTypeSpecific.clazz = Nil,
        .number = GeneratorParams_FieldNumber_InsertWeight,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GeneratorParams__storage_, insertWeight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "updateWeight",
        .dataTypeSpecific.clazz = Nil,
        .number = GeneratorParams_FieldNumber_UpdateWeight,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GeneratorParams__storage_, updateWeight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "deleteWeight",
        .dataTypeSpecific.clazz = Nil,
        .number = GeneratorParams_FieldNumber_DeleteWeight,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(GeneratorParams__storage_, deleteWeight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "getWeight",
        .dataTypeSpecific.clazz = Nil,
        .number = GeneratorParams_FieldNumber_GetWeight,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(GeneratorParams__storage_, getWeight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(GeneratorParams)
                                   messageName:@"GeneratorParams"
                               fileDescription:&ModuleRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GeneratorParams__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
