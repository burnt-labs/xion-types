// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/tx/signing/v1beta1/signing.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/crypto/multisig/v1beta1/Multisig.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class SignatureDescriptor;
@class SignatureDescriptor_Data;
@class SignatureDescriptor_Data_Multi;
@class SignatureDescriptor_Data_Single;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum SignMode

/**
 * SignMode represents a signing mode with its own security guarantees.
 *
 * This enum should be considered a registry of all known sign modes
 * in the Cosmos ecosystem. Apps are not expected to support all known
 * sign modes. Apps that would like to support custom  sign modes are
 * encouraged to open a small PR against this file to add a new case
 * to this SignMode enum describing their sign mode so that different
 * apps have a consistent version of this enum.
 **/
typedef GPB_ENUM(SignMode) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SignMode_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /**
   * SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
   * rejected.
   **/
  SignMode_SignModeUnspecified = 0,

  /**
   * SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
   * verified with raw bytes from Tx.
   **/
  SignMode_SignModeDirect = 1,

  /**
   * SIGN_MODE_TEXTUAL is a future signing mode that will verify some
   * human-readable textual representation on top of the binary representation
   * from SIGN_MODE_DIRECT.
   *
   * Since: cosmos-sdk 0.50
   **/
  SignMode_SignModeTextual = 2,

  /**
   * SIGN_MODE_DIRECT_AUX specifies a signing mode which uses
   * SignDocDirectAux. As opposed to SIGN_MODE_DIRECT, this sign mode does not
   * require signers signing over other signers' `signer_info`.
   *
   * Since: cosmos-sdk 0.46
   **/
  SignMode_SignModeDirectAux = 3,

  /**
   * SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
   * Amino JSON and will be removed in the future.
   **/
  SignMode_SignModeLegacyAminoJson = 127,

  /**
   * SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos
   * SDK. Ref: https://eips.ethereum.org/EIPS/eip-191
   *
   * Currently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant,
   * but is not implemented on the SDK by default. To enable EIP-191, you need
   * to pass a custom `TxConfig` that has an implementation of
   * `SignModeHandler` for EIP-191. The SDK may decide to fully support
   * EIP-191 in the future.
   *
   * Since: cosmos-sdk 0.45.2
   **/
  SignMode_SignModeEip191 = 191,
};

GPBEnumDescriptor *SignMode_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SignMode_IsValidValue(int32_t value);

#pragma mark - SigningRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface SigningRoot : GPBRootObject
@end

#pragma mark - SignatureDescriptors

typedef GPB_ENUM(SignatureDescriptors_FieldNumber) {
  SignatureDescriptors_FieldNumber_SignaturesArray = 1,
};

/**
 * SignatureDescriptors wraps multiple SignatureDescriptor's.
 **/
GPB_FINAL @interface SignatureDescriptors : GPBMessage

/** signatures are the signature descriptors */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<SignatureDescriptor*> *signaturesArray;
/** The number of items in @c signaturesArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger signaturesArray_Count;

@end

#pragma mark - SignatureDescriptor

typedef GPB_ENUM(SignatureDescriptor_FieldNumber) {
  SignatureDescriptor_FieldNumber_PublicKey = 1,
  SignatureDescriptor_FieldNumber_Data_p = 2,
  SignatureDescriptor_FieldNumber_Sequence = 3,
};

/**
 * SignatureDescriptor is a convenience type which represents the full data for
 * a signature including the public key of the signer, signing modes and the
 * signature itself. It is primarily used for coordinating signatures between
 * clients.
 **/
GPB_FINAL @interface SignatureDescriptor : GPBMessage

/** public_key is the public key of the signer */
@property(nonatomic, readwrite, strong, null_resettable) GPBAny *publicKey;
/** Test to see if @c publicKey has been set. */
@property(nonatomic, readwrite) BOOL hasPublicKey;

@property(nonatomic, readwrite, strong, null_resettable) SignatureDescriptor_Data *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

/**
 * sequence is the sequence of the account, which describes the
 * number of committed transactions signed by a given address. It is used to prevent
 * replay attacks.
 **/
@property(nonatomic, readwrite) uint64_t sequence;

@end

#pragma mark - SignatureDescriptor_Data

typedef GPB_ENUM(SignatureDescriptor_Data_FieldNumber) {
  SignatureDescriptor_Data_FieldNumber_Single = 1,
  SignatureDescriptor_Data_FieldNumber_Multi = 2,
};

typedef GPB_ENUM(SignatureDescriptor_Data_Sum_OneOfCase) {
  SignatureDescriptor_Data_Sum_OneOfCase_GPBUnsetOneOfCase = 0,
  SignatureDescriptor_Data_Sum_OneOfCase_Single = 1,
  SignatureDescriptor_Data_Sum_OneOfCase_Multi = 2,
};

/**
 * Data represents signature data
 **/
GPB_FINAL @interface SignatureDescriptor_Data : GPBMessage

/** sum is the oneof that specifies whether this represents single or multi-signature data */
@property(nonatomic, readonly) SignatureDescriptor_Data_Sum_OneOfCase sumOneOfCase;

/** single represents a single signer */
@property(nonatomic, readwrite, strong, null_resettable) SignatureDescriptor_Data_Single *single;

/** multi represents a multisig signer */
@property(nonatomic, readwrite, strong, null_resettable) SignatureDescriptor_Data_Multi *multi;

@end

/**
 * Clears whatever value was set for the oneof 'sum'.
 **/
void SignatureDescriptor_Data_ClearSumOneOfCase(SignatureDescriptor_Data *message);

#pragma mark - SignatureDescriptor_Data_Single

typedef GPB_ENUM(SignatureDescriptor_Data_Single_FieldNumber) {
  SignatureDescriptor_Data_Single_FieldNumber_Mode = 1,
  SignatureDescriptor_Data_Single_FieldNumber_Signature = 2,
};

/**
 * Single is the signature data for a single signer
 **/
GPB_FINAL @interface SignatureDescriptor_Data_Single : GPBMessage

/** mode is the signing mode of the single signer */
@property(nonatomic, readwrite) SignMode mode;

/** signature is the raw signature bytes */
@property(nonatomic, readwrite, copy, null_resettable) NSData *signature;

@end

/**
 * Fetches the raw value of a @c SignatureDescriptor_Data_Single's @c mode property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SignatureDescriptor_Data_Single_Mode_RawValue(SignatureDescriptor_Data_Single *message);
/**
 * Sets the raw value of an @c SignatureDescriptor_Data_Single's @c mode property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSignatureDescriptor_Data_Single_Mode_RawValue(SignatureDescriptor_Data_Single *message, int32_t value);

#pragma mark - SignatureDescriptor_Data_Multi

typedef GPB_ENUM(SignatureDescriptor_Data_Multi_FieldNumber) {
  SignatureDescriptor_Data_Multi_FieldNumber_Bitarray = 1,
  SignatureDescriptor_Data_Multi_FieldNumber_SignaturesArray = 2,
};

/**
 * Multi is the signature data for a multisig public key
 **/
GPB_FINAL @interface SignatureDescriptor_Data_Multi : GPBMessage

/** bitarray specifies which keys within the multisig are signing */
@property(nonatomic, readwrite, strong, null_resettable) CompactBitArray *bitarray;
/** Test to see if @c bitarray has been set. */
@property(nonatomic, readwrite) BOOL hasBitarray;

/** signatures is the signatures of the multi-signature */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<SignatureDescriptor_Data*> *signaturesArray;
/** The number of items in @c signaturesArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger signaturesArray_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
