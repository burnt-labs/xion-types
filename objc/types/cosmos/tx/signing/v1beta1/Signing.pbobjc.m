// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/tx/signing/v1beta1/signing.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import <stdatomic.h>

#import "cosmos/tx/signing/v1beta1/Signing.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(CompactBitArray);
GPBObjCClassDeclaration(GPBAny);
GPBObjCClassDeclaration(SignatureDescriptor);
GPBObjCClassDeclaration(SignatureDescriptor_Data);
GPBObjCClassDeclaration(SignatureDescriptor_Data_Multi);
GPBObjCClassDeclaration(SignatureDescriptor_Data_Single);
GPBObjCClassDeclaration(SignatureDescriptors);

#pragma mark - SigningRoot

@implementation SigningRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription SigningRoot_FileDescription = {
  .package = "cosmos.tx.signing.v1beta1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Enum SignMode

GPBEnumDescriptor *SignMode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "SignModeUnspecified\000SignModeDirect\000SignM"
        "odeTextual\000SignModeDirectAux\000SignModeLeg"
        "acyAminoJson\000SignModeEip191\000";
    static const int32_t values[] = {
        SignMode_SignModeUnspecified,
        SignMode_SignModeDirect,
        SignMode_SignModeTextual,
        SignMode_SignModeDirectAux,
        SignMode_SignModeLegacyAminoJson,
        SignMode_SignModeEip191,
    };
    static const char *extraTextFormatInfo = "\001\005d\344\343\203\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SignMode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SignMode_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SignMode_IsValidValue(int32_t value__) {
  switch (value__) {
    case SignMode_SignModeUnspecified:
    case SignMode_SignModeDirect:
    case SignMode_SignModeTextual:
    case SignMode_SignModeDirectAux:
    case SignMode_SignModeLegacyAminoJson:
    case SignMode_SignModeEip191:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SignatureDescriptors

@implementation SignatureDescriptors

@dynamic signaturesArray, signaturesArray_Count;

typedef struct SignatureDescriptors__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *signaturesArray;
} SignatureDescriptors__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "signaturesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SignatureDescriptor),
        .number = SignatureDescriptors_FieldNumber_SignaturesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SignatureDescriptors__storage_, signaturesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(SignatureDescriptors)
                                   messageName:@"SignatureDescriptors"
                               fileDescription:&SigningRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SignatureDescriptors__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SignatureDescriptor

@implementation SignatureDescriptor

@dynamic hasPublicKey, publicKey;
@dynamic hasData_p, data_p;
@dynamic sequence;

typedef struct SignatureDescriptor__storage_ {
  uint32_t _has_storage_[1];
  GPBAny *publicKey;
  SignatureDescriptor_Data *data_p;
  uint64_t sequence;
} SignatureDescriptor__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "publicKey",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = SignatureDescriptor_FieldNumber_PublicKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SignatureDescriptor__storage_, publicKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = GPBObjCClass(SignatureDescriptor_Data),
        .number = SignatureDescriptor_FieldNumber_Data_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SignatureDescriptor__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sequence",
        .dataTypeSpecific.clazz = Nil,
        .number = SignatureDescriptor_FieldNumber_Sequence,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SignatureDescriptor__storage_, sequence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(SignatureDescriptor)
                                   messageName:@"SignatureDescriptor"
                               fileDescription:&SigningRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SignatureDescriptor__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SignatureDescriptor_Data

@implementation SignatureDescriptor_Data

@dynamic sumOneOfCase;
@dynamic single;
@dynamic multi;

typedef struct SignatureDescriptor_Data__storage_ {
  uint32_t _has_storage_[2];
  SignatureDescriptor_Data_Single *single;
  SignatureDescriptor_Data_Multi *multi;
} SignatureDescriptor_Data__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "single",
        .dataTypeSpecific.clazz = GPBObjCClass(SignatureDescriptor_Data_Single),
        .number = SignatureDescriptor_Data_FieldNumber_Single,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SignatureDescriptor_Data__storage_, single),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "multi",
        .dataTypeSpecific.clazz = GPBObjCClass(SignatureDescriptor_Data_Multi),
        .number = SignatureDescriptor_Data_FieldNumber_Multi,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SignatureDescriptor_Data__storage_, multi),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(SignatureDescriptor_Data)
                                   messageName:@"Data"
                               fileDescription:&SigningRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SignatureDescriptor_Data__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    static const char *oneofs[] = {
      "sum",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(SignatureDescriptor)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void SignatureDescriptor_Data_ClearSumOneOfCase(SignatureDescriptor_Data *message) {
  GPBDescriptor *descriptor = [SignatureDescriptor_Data descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - SignatureDescriptor_Data_Single

@implementation SignatureDescriptor_Data_Single

@dynamic mode;
@dynamic signature;

typedef struct SignatureDescriptor_Data_Single__storage_ {
  uint32_t _has_storage_[1];
  SignMode mode;
  NSData *signature;
} SignatureDescriptor_Data_Single__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mode",
        .dataTypeSpecific.enumDescFunc = SignMode_EnumDescriptor,
        .number = SignatureDescriptor_Data_Single_FieldNumber_Mode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SignatureDescriptor_Data_Single__storage_, mode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "signature",
        .dataTypeSpecific.clazz = Nil,
        .number = SignatureDescriptor_Data_Single_FieldNumber_Signature,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SignatureDescriptor_Data_Single__storage_, signature),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(SignatureDescriptor_Data_Single)
                                   messageName:@"Single"
                               fileDescription:&SigningRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SignatureDescriptor_Data_Single__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(SignatureDescriptor_Data)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SignatureDescriptor_Data_Single_Mode_RawValue(SignatureDescriptor_Data_Single *message) {
  GPBDescriptor *descriptor = [SignatureDescriptor_Data_Single descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SignatureDescriptor_Data_Single_FieldNumber_Mode];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSignatureDescriptor_Data_Single_Mode_RawValue(SignatureDescriptor_Data_Single *message, int32_t value) {
  GPBDescriptor *descriptor = [SignatureDescriptor_Data_Single descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SignatureDescriptor_Data_Single_FieldNumber_Mode];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SignatureDescriptor_Data_Multi

@implementation SignatureDescriptor_Data_Multi

@dynamic hasBitarray, bitarray;
@dynamic signaturesArray, signaturesArray_Count;

typedef struct SignatureDescriptor_Data_Multi__storage_ {
  uint32_t _has_storage_[1];
  CompactBitArray *bitarray;
  NSMutableArray *signaturesArray;
} SignatureDescriptor_Data_Multi__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bitarray",
        .dataTypeSpecific.clazz = GPBObjCClass(CompactBitArray),
        .number = SignatureDescriptor_Data_Multi_FieldNumber_Bitarray,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SignatureDescriptor_Data_Multi__storage_, bitarray),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signaturesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SignatureDescriptor_Data),
        .number = SignatureDescriptor_Data_Multi_FieldNumber_SignaturesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SignatureDescriptor_Data_Multi__storage_, signaturesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(SignatureDescriptor_Data_Multi)
                                   messageName:@"Multi"
                               fileDescription:&SigningRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SignatureDescriptor_Data_Multi__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(SignatureDescriptor_Data)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
