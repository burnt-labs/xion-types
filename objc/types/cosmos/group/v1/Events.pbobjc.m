// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/group/v1/events.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/group/v1/Events.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(EventCreateGroup);
GPBObjCClassDeclaration(EventCreateGroupPolicy);
GPBObjCClassDeclaration(EventExec);
GPBObjCClassDeclaration(EventLeaveGroup);
GPBObjCClassDeclaration(EventProposalPruned);
GPBObjCClassDeclaration(EventSubmitProposal);
GPBObjCClassDeclaration(EventTallyError);
GPBObjCClassDeclaration(EventUpdateGroup);
GPBObjCClassDeclaration(EventUpdateGroupPolicy);
GPBObjCClassDeclaration(EventVote);
GPBObjCClassDeclaration(EventWithdrawProposal);
GPBObjCClassDeclaration(TallyResult);

#pragma mark - EventsRoot

@implementation EventsRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription EventsRoot_FileDescription = {
  .package = "cosmos.group.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - EventCreateGroup

@implementation EventCreateGroup

@dynamic groupId;

typedef struct EventCreateGroup__storage_ {
  uint32_t _has_storage_[1];
  uint64_t groupId;
} EventCreateGroup__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = EventCreateGroup_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EventCreateGroup__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(EventCreateGroup)
                                   messageName:@"EventCreateGroup"
                               fileDescription:&EventsRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EventCreateGroup__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EventUpdateGroup

@implementation EventUpdateGroup

@dynamic groupId;

typedef struct EventUpdateGroup__storage_ {
  uint32_t _has_storage_[1];
  uint64_t groupId;
} EventUpdateGroup__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = EventUpdateGroup_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EventUpdateGroup__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(EventUpdateGroup)
                                   messageName:@"EventUpdateGroup"
                               fileDescription:&EventsRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EventUpdateGroup__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EventCreateGroupPolicy

@implementation EventCreateGroupPolicy

@dynamic address;

typedef struct EventCreateGroupPolicy__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
} EventCreateGroupPolicy__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = EventCreateGroupPolicy_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EventCreateGroupPolicy__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(EventCreateGroupPolicy)
                                   messageName:@"EventCreateGroupPolicy"
                               fileDescription:&EventsRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EventCreateGroupPolicy__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EventUpdateGroupPolicy

@implementation EventUpdateGroupPolicy

@dynamic address;

typedef struct EventUpdateGroupPolicy__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
} EventUpdateGroupPolicy__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = EventUpdateGroupPolicy_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EventUpdateGroupPolicy__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(EventUpdateGroupPolicy)
                                   messageName:@"EventUpdateGroupPolicy"
                               fileDescription:&EventsRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EventUpdateGroupPolicy__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EventSubmitProposal

@implementation EventSubmitProposal

@dynamic proposalId;

typedef struct EventSubmitProposal__storage_ {
  uint32_t _has_storage_[1];
  uint64_t proposalId;
} EventSubmitProposal__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "proposalId",
        .dataTypeSpecific.clazz = Nil,
        .number = EventSubmitProposal_FieldNumber_ProposalId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EventSubmitProposal__storage_, proposalId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(EventSubmitProposal)
                                   messageName:@"EventSubmitProposal"
                               fileDescription:&EventsRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EventSubmitProposal__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EventWithdrawProposal

@implementation EventWithdrawProposal

@dynamic proposalId;

typedef struct EventWithdrawProposal__storage_ {
  uint32_t _has_storage_[1];
  uint64_t proposalId;
} EventWithdrawProposal__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "proposalId",
        .dataTypeSpecific.clazz = Nil,
        .number = EventWithdrawProposal_FieldNumber_ProposalId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EventWithdrawProposal__storage_, proposalId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(EventWithdrawProposal)
                                   messageName:@"EventWithdrawProposal"
                               fileDescription:&EventsRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EventWithdrawProposal__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EventVote

@implementation EventVote

@dynamic proposalId;

typedef struct EventVote__storage_ {
  uint32_t _has_storage_[1];
  uint64_t proposalId;
} EventVote__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "proposalId",
        .dataTypeSpecific.clazz = Nil,
        .number = EventVote_FieldNumber_ProposalId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EventVote__storage_, proposalId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(EventVote)
                                   messageName:@"EventVote"
                               fileDescription:&EventsRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EventVote__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EventExec

@implementation EventExec

@dynamic proposalId;
@dynamic result;
@dynamic logs;

typedef struct EventExec__storage_ {
  uint32_t _has_storage_[1];
  ProposalExecutorResult result;
  NSString *logs;
  uint64_t proposalId;
} EventExec__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "proposalId",
        .dataTypeSpecific.clazz = Nil,
        .number = EventExec_FieldNumber_ProposalId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EventExec__storage_, proposalId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = ProposalExecutorResult_EnumDescriptor,
        .number = EventExec_FieldNumber_Result,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EventExec__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "logs",
        .dataTypeSpecific.clazz = Nil,
        .number = EventExec_FieldNumber_Logs,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EventExec__storage_, logs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(EventExec)
                                   messageName:@"EventExec"
                               fileDescription:&EventsRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EventExec__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t EventExec_Result_RawValue(EventExec *message) {
  GPBDescriptor *descriptor = [EventExec descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:EventExec_FieldNumber_Result];
  return GPBGetMessageRawEnumField(message, field);
}

void SetEventExec_Result_RawValue(EventExec *message, int32_t value) {
  GPBDescriptor *descriptor = [EventExec descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:EventExec_FieldNumber_Result];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - EventLeaveGroup

@implementation EventLeaveGroup

@dynamic groupId;
@dynamic address;

typedef struct EventLeaveGroup__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
  uint64_t groupId;
} EventLeaveGroup__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = EventLeaveGroup_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EventLeaveGroup__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = EventLeaveGroup_FieldNumber_Address,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EventLeaveGroup__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(EventLeaveGroup)
                                   messageName:@"EventLeaveGroup"
                               fileDescription:&EventsRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EventLeaveGroup__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EventProposalPruned

@implementation EventProposalPruned

@dynamic proposalId;
@dynamic status;
@dynamic hasTallyResult, tallyResult;

typedef struct EventProposalPruned__storage_ {
  uint32_t _has_storage_[1];
  ProposalStatus status;
  TallyResult *tallyResult;
  uint64_t proposalId;
} EventProposalPruned__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "proposalId",
        .dataTypeSpecific.clazz = Nil,
        .number = EventProposalPruned_FieldNumber_ProposalId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EventProposalPruned__storage_, proposalId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = ProposalStatus_EnumDescriptor,
        .number = EventProposalPruned_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EventProposalPruned__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "tallyResult",
        .dataTypeSpecific.clazz = GPBObjCClass(TallyResult),
        .number = EventProposalPruned_FieldNumber_TallyResult,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EventProposalPruned__storage_, tallyResult),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(EventProposalPruned)
                                   messageName:@"EventProposalPruned"
                               fileDescription:&EventsRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EventProposalPruned__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t EventProposalPruned_Status_RawValue(EventProposalPruned *message) {
  GPBDescriptor *descriptor = [EventProposalPruned descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:EventProposalPruned_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void SetEventProposalPruned_Status_RawValue(EventProposalPruned *message, int32_t value) {
  GPBDescriptor *descriptor = [EventProposalPruned descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:EventProposalPruned_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - EventTallyError

@implementation EventTallyError

@dynamic proposalId;
@dynamic errorMessage;

typedef struct EventTallyError__storage_ {
  uint32_t _has_storage_[1];
  NSString *errorMessage;
  uint64_t proposalId;
} EventTallyError__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "proposalId",
        .dataTypeSpecific.clazz = Nil,
        .number = EventTallyError_FieldNumber_ProposalId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EventTallyError__storage_, proposalId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = EventTallyError_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EventTallyError__storage_, errorMessage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(EventTallyError)
                                   messageName:@"EventTallyError"
                               fileDescription:&EventsRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EventTallyError__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
