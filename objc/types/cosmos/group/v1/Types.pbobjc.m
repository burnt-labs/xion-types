// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/group/v1/types.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import <stdatomic.h>

#import "cosmos/group/v1/Types.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(DecisionPolicyWindows);
GPBObjCClassDeclaration(GPBAny);
GPBObjCClassDeclaration(GPBDuration);
GPBObjCClassDeclaration(GPBTimestamp);
GPBObjCClassDeclaration(GroupInfo);
GPBObjCClassDeclaration(GroupMember);
GPBObjCClassDeclaration(GroupPolicyInfo);
GPBObjCClassDeclaration(Member);
GPBObjCClassDeclaration(MemberRequest);
GPBObjCClassDeclaration(PercentageDecisionPolicy);
GPBObjCClassDeclaration(Proposal);
GPBObjCClassDeclaration(TallyResult);
GPBObjCClassDeclaration(ThresholdDecisionPolicy);
GPBObjCClassDeclaration(Vote);

#pragma mark - TypesRoot

@implementation TypesRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription TypesRoot_FileDescription = {
  .package = "cosmos.group.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Enum VoteOption

GPBEnumDescriptor *VoteOption_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "VoteOptionUnspecified\000VoteOptionYes\000Vote"
        "OptionAbstain\000VoteOptionNo\000VoteOptionNoW"
        "ithVeto\000";
    static const int32_t values[] = {
        VoteOption_VoteOptionUnspecified,
        VoteOption_VoteOptionYes,
        VoteOption_VoteOptionAbstain,
        VoteOption_VoteOptionNo,
        VoteOption_VoteOptionNoWithVeto,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(VoteOption)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:VoteOption_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL VoteOption_IsValidValue(int32_t value__) {
  switch (value__) {
    case VoteOption_VoteOptionUnspecified:
    case VoteOption_VoteOptionYes:
    case VoteOption_VoteOptionAbstain:
    case VoteOption_VoteOptionNo:
    case VoteOption_VoteOptionNoWithVeto:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ProposalStatus

GPBEnumDescriptor *ProposalStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "ProposalStatusUnspecified\000ProposalStatus"
        "Submitted\000ProposalStatusAccepted\000Proposa"
        "lStatusRejected\000ProposalStatusAborted\000Pr"
        "oposalStatusWithdrawn\000";
    static const int32_t values[] = {
        ProposalStatus_ProposalStatusUnspecified,
        ProposalStatus_ProposalStatusSubmitted,
        ProposalStatus_ProposalStatusAccepted,
        ProposalStatus_ProposalStatusRejected,
        ProposalStatus_ProposalStatusAborted,
        ProposalStatus_ProposalStatusWithdrawn,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ProposalStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ProposalStatus_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ProposalStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case ProposalStatus_ProposalStatusUnspecified:
    case ProposalStatus_ProposalStatusSubmitted:
    case ProposalStatus_ProposalStatusAccepted:
    case ProposalStatus_ProposalStatusRejected:
    case ProposalStatus_ProposalStatusAborted:
    case ProposalStatus_ProposalStatusWithdrawn:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ProposalExecutorResult

GPBEnumDescriptor *ProposalExecutorResult_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "ProposalExecutorResultUnspecified\000Propos"
        "alExecutorResultNotRun\000ProposalExecutorR"
        "esultSuccess\000ProposalExecutorResultFailu"
        "re\000";
    static const int32_t values[] = {
        ProposalExecutorResult_ProposalExecutorResultUnspecified,
        ProposalExecutorResult_ProposalExecutorResultNotRun,
        ProposalExecutorResult_ProposalExecutorResultSuccess,
        ProposalExecutorResult_ProposalExecutorResultFailure,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ProposalExecutorResult)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ProposalExecutorResult_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ProposalExecutorResult_IsValidValue(int32_t value__) {
  switch (value__) {
    case ProposalExecutorResult_ProposalExecutorResultUnspecified:
    case ProposalExecutorResult_ProposalExecutorResultNotRun:
    case ProposalExecutorResult_ProposalExecutorResultSuccess:
    case ProposalExecutorResult_ProposalExecutorResultFailure:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Member

@implementation Member

@dynamic address;
@dynamic weight;
@dynamic metadata;
@dynamic hasAddedAt, addedAt;

typedef struct Member__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
  NSString *weight;
  NSString *metadata;
  GPBTimestamp *addedAt;
} Member__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = Member_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Member__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weight",
        .dataTypeSpecific.clazz = Nil,
        .number = Member_FieldNumber_Weight,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Member__storage_, weight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.clazz = Nil,
        .number = Member_FieldNumber_Metadata,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Member__storage_, metadata),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "addedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = Member_FieldNumber_AddedAt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Member__storage_, addedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Member)
                                   messageName:@"Member"
                               fileDescription:&TypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Member__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MemberRequest

@implementation MemberRequest

@dynamic address;
@dynamic weight;
@dynamic metadata;

typedef struct MemberRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
  NSString *weight;
  NSString *metadata;
} MemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = MemberRequest_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MemberRequest__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "weight",
        .dataTypeSpecific.clazz = Nil,
        .number = MemberRequest_FieldNumber_Weight,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MemberRequest__storage_, weight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.clazz = Nil,
        .number = MemberRequest_FieldNumber_Metadata,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MemberRequest__storage_, metadata),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MemberRequest)
                                   messageName:@"MemberRequest"
                               fileDescription:&TypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MemberRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ThresholdDecisionPolicy

@implementation ThresholdDecisionPolicy

@dynamic threshold;
@dynamic hasWindows, windows;

typedef struct ThresholdDecisionPolicy__storage_ {
  uint32_t _has_storage_[1];
  NSString *threshold;
  DecisionPolicyWindows *windows;
} ThresholdDecisionPolicy__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "threshold",
        .dataTypeSpecific.clazz = Nil,
        .number = ThresholdDecisionPolicy_FieldNumber_Threshold,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ThresholdDecisionPolicy__storage_, threshold),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "windows",
        .dataTypeSpecific.clazz = GPBObjCClass(DecisionPolicyWindows),
        .number = ThresholdDecisionPolicy_FieldNumber_Windows,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ThresholdDecisionPolicy__storage_, windows),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ThresholdDecisionPolicy)
                                   messageName:@"ThresholdDecisionPolicy"
                               fileDescription:&TypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ThresholdDecisionPolicy__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PercentageDecisionPolicy

@implementation PercentageDecisionPolicy

@dynamic percentage;
@dynamic hasWindows, windows;

typedef struct PercentageDecisionPolicy__storage_ {
  uint32_t _has_storage_[1];
  NSString *percentage;
  DecisionPolicyWindows *windows;
} PercentageDecisionPolicy__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "percentage",
        .dataTypeSpecific.clazz = Nil,
        .number = PercentageDecisionPolicy_FieldNumber_Percentage,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PercentageDecisionPolicy__storage_, percentage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "windows",
        .dataTypeSpecific.clazz = GPBObjCClass(DecisionPolicyWindows),
        .number = PercentageDecisionPolicy_FieldNumber_Windows,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PercentageDecisionPolicy__storage_, windows),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(PercentageDecisionPolicy)
                                   messageName:@"PercentageDecisionPolicy"
                               fileDescription:&TypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PercentageDecisionPolicy__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DecisionPolicyWindows

@implementation DecisionPolicyWindows

@dynamic hasVotingPeriod, votingPeriod;
@dynamic hasMinExecutionPeriod, minExecutionPeriod;

typedef struct DecisionPolicyWindows__storage_ {
  uint32_t _has_storage_[1];
  GPBDuration *votingPeriod;
  GPBDuration *minExecutionPeriod;
} DecisionPolicyWindows__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "votingPeriod",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBDuration),
        .number = DecisionPolicyWindows_FieldNumber_VotingPeriod,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DecisionPolicyWindows__storage_, votingPeriod),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "minExecutionPeriod",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBDuration),
        .number = DecisionPolicyWindows_FieldNumber_MinExecutionPeriod,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DecisionPolicyWindows__storage_, minExecutionPeriod),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(DecisionPolicyWindows)
                                   messageName:@"DecisionPolicyWindows"
                               fileDescription:&TypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DecisionPolicyWindows__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupInfo

@implementation GroupInfo

@dynamic id_p;
@dynamic admin;
@dynamic metadata;
@dynamic version;
@dynamic totalWeight;
@dynamic hasCreatedAt, createdAt;

typedef struct GroupInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *admin;
  NSString *metadata;
  NSString *totalWeight;
  GPBTimestamp *createdAt;
  uint64_t id_p;
  uint64_t version;
} GroupInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupInfo_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GroupInfo__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "admin",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupInfo_FieldNumber_Admin,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GroupInfo__storage_, admin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupInfo_FieldNumber_Metadata,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GroupInfo__storage_, metadata),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupInfo_FieldNumber_Version,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GroupInfo__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "totalWeight",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupInfo_FieldNumber_TotalWeight,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GroupInfo__storage_, totalWeight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = GroupInfo_FieldNumber_CreatedAt,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GroupInfo__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(GroupInfo)
                                   messageName:@"GroupInfo"
                               fileDescription:&TypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GroupInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupMember

@implementation GroupMember

@dynamic groupId;
@dynamic hasMember, member;

typedef struct GroupMember__storage_ {
  uint32_t _has_storage_[1];
  Member *member;
  uint64_t groupId;
} GroupMember__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupMember_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GroupMember__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "member",
        .dataTypeSpecific.clazz = GPBObjCClass(Member),
        .number = GroupMember_FieldNumber_Member,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GroupMember__storage_, member),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(GroupMember)
                                   messageName:@"GroupMember"
                               fileDescription:&TypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GroupMember__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupPolicyInfo

@implementation GroupPolicyInfo

@dynamic address;
@dynamic groupId;
@dynamic admin;
@dynamic metadata;
@dynamic version;
@dynamic hasDecisionPolicy, decisionPolicy;
@dynamic hasCreatedAt, createdAt;

typedef struct GroupPolicyInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
  NSString *admin;
  NSString *metadata;
  GPBAny *decisionPolicy;
  GPBTimestamp *createdAt;
  uint64_t groupId;
  uint64_t version;
} GroupPolicyInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupPolicyInfo_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GroupPolicyInfo__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupPolicyInfo_FieldNumber_GroupId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GroupPolicyInfo__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "admin",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupPolicyInfo_FieldNumber_Admin,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GroupPolicyInfo__storage_, admin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupPolicyInfo_FieldNumber_Metadata,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GroupPolicyInfo__storage_, metadata),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.clazz = Nil,
        .number = GroupPolicyInfo_FieldNumber_Version,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GroupPolicyInfo__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "decisionPolicy",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = GroupPolicyInfo_FieldNumber_DecisionPolicy,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GroupPolicyInfo__storage_, decisionPolicy),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = GroupPolicyInfo_FieldNumber_CreatedAt,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GroupPolicyInfo__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(GroupPolicyInfo)
                                   messageName:@"GroupPolicyInfo"
                               fileDescription:&TypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GroupPolicyInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Proposal

@implementation Proposal

@dynamic id_p;
@dynamic groupPolicyAddress;
@dynamic metadata;
@dynamic proposersArray, proposersArray_Count;
@dynamic hasSubmitTime, submitTime;
@dynamic groupVersion;
@dynamic groupPolicyVersion;
@dynamic status;
@dynamic hasFinalTallyResult, finalTallyResult;
@dynamic hasVotingPeriodEnd, votingPeriodEnd;
@dynamic executorResult;
@dynamic messagesArray, messagesArray_Count;
@dynamic title;
@dynamic summary;

typedef struct Proposal__storage_ {
  uint32_t _has_storage_[1];
  ProposalStatus status;
  ProposalExecutorResult executorResult;
  NSString *groupPolicyAddress;
  NSString *metadata;
  NSMutableArray *proposersArray;
  GPBTimestamp *submitTime;
  TallyResult *finalTallyResult;
  GPBTimestamp *votingPeriodEnd;
  NSMutableArray *messagesArray;
  NSString *title;
  NSString *summary;
  uint64_t id_p;
  uint64_t groupVersion;
  uint64_t groupPolicyVersion;
} Proposal__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = Proposal_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Proposal__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "groupPolicyAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = Proposal_FieldNumber_GroupPolicyAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Proposal__storage_, groupPolicyAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.clazz = Nil,
        .number = Proposal_FieldNumber_Metadata,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Proposal__storage_, metadata),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "proposersArray",
        .dataTypeSpecific.clazz = Nil,
        .number = Proposal_FieldNumber_ProposersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Proposal__storage_, proposersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "submitTime",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = Proposal_FieldNumber_SubmitTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Proposal__storage_, submitTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "groupVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = Proposal_FieldNumber_GroupVersion,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Proposal__storage_, groupVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "groupPolicyVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = Proposal_FieldNumber_GroupPolicyVersion,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Proposal__storage_, groupPolicyVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = ProposalStatus_EnumDescriptor,
        .number = Proposal_FieldNumber_Status,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Proposal__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "finalTallyResult",
        .dataTypeSpecific.clazz = GPBObjCClass(TallyResult),
        .number = Proposal_FieldNumber_FinalTallyResult,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Proposal__storage_, finalTallyResult),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "votingPeriodEnd",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = Proposal_FieldNumber_VotingPeriodEnd,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Proposal__storage_, votingPeriodEnd),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "executorResult",
        .dataTypeSpecific.enumDescFunc = ProposalExecutorResult_EnumDescriptor,
        .number = Proposal_FieldNumber_ExecutorResult,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(Proposal__storage_, executorResult),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "messagesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = Proposal_FieldNumber_MessagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Proposal__storage_, messagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = Proposal_FieldNumber_Title,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(Proposal__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "summary",
        .dataTypeSpecific.clazz = Nil,
        .number = Proposal_FieldNumber_Summary,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(Proposal__storage_, summary),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Proposal)
                                   messageName:@"Proposal"
                               fileDescription:&TypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Proposal__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Proposal_Status_RawValue(Proposal *message) {
  GPBDescriptor *descriptor = [Proposal descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Proposal_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void SetProposal_Status_RawValue(Proposal *message, int32_t value) {
  GPBDescriptor *descriptor = [Proposal descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Proposal_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t Proposal_ExecutorResult_RawValue(Proposal *message) {
  GPBDescriptor *descriptor = [Proposal descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Proposal_FieldNumber_ExecutorResult];
  return GPBGetMessageRawEnumField(message, field);
}

void SetProposal_ExecutorResult_RawValue(Proposal *message, int32_t value) {
  GPBDescriptor *descriptor = [Proposal descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Proposal_FieldNumber_ExecutorResult];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - TallyResult

@implementation TallyResult

@dynamic yesCount;
@dynamic abstainCount;
@dynamic noCount;
@dynamic noWithVetoCount;

typedef struct TallyResult__storage_ {
  uint32_t _has_storage_[1];
  NSString *yesCount;
  NSString *abstainCount;
  NSString *noCount;
  NSString *noWithVetoCount;
} TallyResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "yesCount",
        .dataTypeSpecific.clazz = Nil,
        .number = TallyResult_FieldNumber_YesCount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TallyResult__storage_, yesCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "abstainCount",
        .dataTypeSpecific.clazz = Nil,
        .number = TallyResult_FieldNumber_AbstainCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TallyResult__storage_, abstainCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "noCount",
        .dataTypeSpecific.clazz = Nil,
        .number = TallyResult_FieldNumber_NoCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TallyResult__storage_, noCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "noWithVetoCount",
        .dataTypeSpecific.clazz = Nil,
        .number = TallyResult_FieldNumber_NoWithVetoCount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TallyResult__storage_, noWithVetoCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(TallyResult)
                                   messageName:@"TallyResult"
                               fileDescription:&TypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TallyResult__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Vote

@implementation Vote

@dynamic proposalId;
@dynamic voter;
@dynamic option;
@dynamic metadata;
@dynamic hasSubmitTime, submitTime;

typedef struct Vote__storage_ {
  uint32_t _has_storage_[1];
  VoteOption option;
  NSString *voter;
  NSString *metadata;
  GPBTimestamp *submitTime;
  uint64_t proposalId;
} Vote__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "proposalId",
        .dataTypeSpecific.clazz = Nil,
        .number = Vote_FieldNumber_ProposalId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Vote__storage_, proposalId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "voter",
        .dataTypeSpecific.clazz = Nil,
        .number = Vote_FieldNumber_Voter,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Vote__storage_, voter),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "option",
        .dataTypeSpecific.enumDescFunc = VoteOption_EnumDescriptor,
        .number = Vote_FieldNumber_Option,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Vote__storage_, option),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.clazz = Nil,
        .number = Vote_FieldNumber_Metadata,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Vote__storage_, metadata),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "submitTime",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = Vote_FieldNumber_SubmitTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Vote__storage_, submitTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Vote)
                                   messageName:@"Vote"
                               fileDescription:&TypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Vote__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Vote_Option_RawValue(Vote *message) {
  GPBDescriptor *descriptor = [Vote descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Vote_FieldNumber_Option];
  return GPBGetMessageRawEnumField(message, field);
}

void SetVote_Option_RawValue(Vote *message, int32_t value) {
  GPBDescriptor *descriptor = [Vote descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Vote_FieldNumber_Option];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
