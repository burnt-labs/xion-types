// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/group/v1/tx.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import <stdatomic.h>

#import "cosmos/group/v1/Tx.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(GPBAny);
GPBObjCClassDeclaration(MemberRequest);
GPBObjCClassDeclaration(MsgCreateGroup);
GPBObjCClassDeclaration(MsgCreateGroupPolicy);
GPBObjCClassDeclaration(MsgCreateGroupPolicyResponse);
GPBObjCClassDeclaration(MsgCreateGroupResponse);
GPBObjCClassDeclaration(MsgCreateGroupWithPolicy);
GPBObjCClassDeclaration(MsgCreateGroupWithPolicyResponse);
GPBObjCClassDeclaration(MsgExec);
GPBObjCClassDeclaration(MsgExecResponse);
GPBObjCClassDeclaration(MsgLeaveGroup);
GPBObjCClassDeclaration(MsgLeaveGroupResponse);
GPBObjCClassDeclaration(MsgSubmitProposal);
GPBObjCClassDeclaration(MsgSubmitProposalResponse);
GPBObjCClassDeclaration(MsgUpdateGroupAdmin);
GPBObjCClassDeclaration(MsgUpdateGroupAdminResponse);
GPBObjCClassDeclaration(MsgUpdateGroupMembers);
GPBObjCClassDeclaration(MsgUpdateGroupMembersResponse);
GPBObjCClassDeclaration(MsgUpdateGroupMetadata);
GPBObjCClassDeclaration(MsgUpdateGroupMetadataResponse);
GPBObjCClassDeclaration(MsgUpdateGroupPolicyAdmin);
GPBObjCClassDeclaration(MsgUpdateGroupPolicyAdminResponse);
GPBObjCClassDeclaration(MsgUpdateGroupPolicyDecisionPolicy);
GPBObjCClassDeclaration(MsgUpdateGroupPolicyDecisionPolicyResponse);
GPBObjCClassDeclaration(MsgUpdateGroupPolicyMetadata);
GPBObjCClassDeclaration(MsgUpdateGroupPolicyMetadataResponse);
GPBObjCClassDeclaration(MsgVote);
GPBObjCClassDeclaration(MsgVoteResponse);
GPBObjCClassDeclaration(MsgWithdrawProposal);
GPBObjCClassDeclaration(MsgWithdrawProposalResponse);

#pragma mark - TxRoot

@implementation TxRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription TxRoot_FileDescription = {
  .package = "cosmos.group.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Enum Exec

GPBEnumDescriptor *Exec_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "ExecUnspecified\000ExecTry\000";
    static const int32_t values[] = {
        Exec_ExecUnspecified,
        Exec_ExecTry,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Exec)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Exec_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Exec_IsValidValue(int32_t value__) {
  switch (value__) {
    case Exec_ExecUnspecified:
    case Exec_ExecTry:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - MsgCreateGroup

@implementation MsgCreateGroup

@dynamic admin;
@dynamic membersArray, membersArray_Count;
@dynamic metadata;

typedef struct MsgCreateGroup__storage_ {
  uint32_t _has_storage_[1];
  NSString *admin;
  NSMutableArray *membersArray;
  NSString *metadata;
} MsgCreateGroup__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "admin",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgCreateGroup_FieldNumber_Admin,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgCreateGroup__storage_, admin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "membersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(MemberRequest),
        .number = MsgCreateGroup_FieldNumber_MembersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MsgCreateGroup__storage_, membersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgCreateGroup_FieldNumber_Metadata,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgCreateGroup__storage_, metadata),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgCreateGroup)
                                   messageName:@"MsgCreateGroup"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgCreateGroup__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgCreateGroupResponse

@implementation MsgCreateGroupResponse

@dynamic groupId;

typedef struct MsgCreateGroupResponse__storage_ {
  uint32_t _has_storage_[1];
  uint64_t groupId;
} MsgCreateGroupResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgCreateGroupResponse_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgCreateGroupResponse__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgCreateGroupResponse)
                                   messageName:@"MsgCreateGroupResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgCreateGroupResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateGroupMembers

@implementation MsgUpdateGroupMembers

@dynamic admin;
@dynamic groupId;
@dynamic memberUpdatesArray, memberUpdatesArray_Count;

typedef struct MsgUpdateGroupMembers__storage_ {
  uint32_t _has_storage_[1];
  NSString *admin;
  NSMutableArray *memberUpdatesArray;
  uint64_t groupId;
} MsgUpdateGroupMembers__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "admin",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateGroupMembers_FieldNumber_Admin,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgUpdateGroupMembers__storage_, admin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateGroupMembers_FieldNumber_GroupId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgUpdateGroupMembers__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "memberUpdatesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(MemberRequest),
        .number = MsgUpdateGroupMembers_FieldNumber_MemberUpdatesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MsgUpdateGroupMembers__storage_, memberUpdatesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateGroupMembers)
                                   messageName:@"MsgUpdateGroupMembers"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgUpdateGroupMembers__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateGroupMembersResponse

@implementation MsgUpdateGroupMembersResponse


typedef struct MsgUpdateGroupMembersResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgUpdateGroupMembersResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateGroupMembersResponse)
                                   messageName:@"MsgUpdateGroupMembersResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgUpdateGroupMembersResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateGroupAdmin

@implementation MsgUpdateGroupAdmin

@dynamic admin;
@dynamic groupId;
@dynamic newAdmin;

typedef struct MsgUpdateGroupAdmin__storage_ {
  uint32_t _has_storage_[1];
  NSString *admin;
  NSString *newAdmin;
  uint64_t groupId;
} MsgUpdateGroupAdmin__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "admin",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateGroupAdmin_FieldNumber_Admin,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgUpdateGroupAdmin__storage_, admin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateGroupAdmin_FieldNumber_GroupId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgUpdateGroupAdmin__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "newAdmin",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateGroupAdmin_FieldNumber_NewAdmin,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgUpdateGroupAdmin__storage_, newAdmin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateGroupAdmin)
                                   messageName:@"MsgUpdateGroupAdmin"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgUpdateGroupAdmin__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateGroupAdminResponse

@implementation MsgUpdateGroupAdminResponse


typedef struct MsgUpdateGroupAdminResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgUpdateGroupAdminResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateGroupAdminResponse)
                                   messageName:@"MsgUpdateGroupAdminResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgUpdateGroupAdminResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateGroupMetadata

@implementation MsgUpdateGroupMetadata

@dynamic admin;
@dynamic groupId;
@dynamic metadata;

typedef struct MsgUpdateGroupMetadata__storage_ {
  uint32_t _has_storage_[1];
  NSString *admin;
  NSString *metadata;
  uint64_t groupId;
} MsgUpdateGroupMetadata__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "admin",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateGroupMetadata_FieldNumber_Admin,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgUpdateGroupMetadata__storage_, admin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateGroupMetadata_FieldNumber_GroupId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgUpdateGroupMetadata__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateGroupMetadata_FieldNumber_Metadata,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgUpdateGroupMetadata__storage_, metadata),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateGroupMetadata)
                                   messageName:@"MsgUpdateGroupMetadata"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgUpdateGroupMetadata__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateGroupMetadataResponse

@implementation MsgUpdateGroupMetadataResponse


typedef struct MsgUpdateGroupMetadataResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgUpdateGroupMetadataResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateGroupMetadataResponse)
                                   messageName:@"MsgUpdateGroupMetadataResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgUpdateGroupMetadataResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgCreateGroupPolicy

@implementation MsgCreateGroupPolicy

@dynamic admin;
@dynamic groupId;
@dynamic metadata;
@dynamic hasDecisionPolicy, decisionPolicy;

typedef struct MsgCreateGroupPolicy__storage_ {
  uint32_t _has_storage_[1];
  NSString *admin;
  NSString *metadata;
  GPBAny *decisionPolicy;
  uint64_t groupId;
} MsgCreateGroupPolicy__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "admin",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgCreateGroupPolicy_FieldNumber_Admin,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgCreateGroupPolicy__storage_, admin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgCreateGroupPolicy_FieldNumber_GroupId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgCreateGroupPolicy__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgCreateGroupPolicy_FieldNumber_Metadata,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgCreateGroupPolicy__storage_, metadata),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "decisionPolicy",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = MsgCreateGroupPolicy_FieldNumber_DecisionPolicy,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgCreateGroupPolicy__storage_, decisionPolicy),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgCreateGroupPolicy)
                                   messageName:@"MsgCreateGroupPolicy"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgCreateGroupPolicy__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgCreateGroupPolicyResponse

@implementation MsgCreateGroupPolicyResponse

@dynamic address;

typedef struct MsgCreateGroupPolicyResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
} MsgCreateGroupPolicyResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgCreateGroupPolicyResponse_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgCreateGroupPolicyResponse__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgCreateGroupPolicyResponse)
                                   messageName:@"MsgCreateGroupPolicyResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgCreateGroupPolicyResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateGroupPolicyAdmin

@implementation MsgUpdateGroupPolicyAdmin

@dynamic admin;
@dynamic groupPolicyAddress;
@dynamic newAdmin;

typedef struct MsgUpdateGroupPolicyAdmin__storage_ {
  uint32_t _has_storage_[1];
  NSString *admin;
  NSString *groupPolicyAddress;
  NSString *newAdmin;
} MsgUpdateGroupPolicyAdmin__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "admin",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateGroupPolicyAdmin_FieldNumber_Admin,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgUpdateGroupPolicyAdmin__storage_, admin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "groupPolicyAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateGroupPolicyAdmin_FieldNumber_GroupPolicyAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgUpdateGroupPolicyAdmin__storage_, groupPolicyAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "newAdmin",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateGroupPolicyAdmin_FieldNumber_NewAdmin,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgUpdateGroupPolicyAdmin__storage_, newAdmin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateGroupPolicyAdmin)
                                   messageName:@"MsgUpdateGroupPolicyAdmin"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgUpdateGroupPolicyAdmin__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateGroupPolicyAdminResponse

@implementation MsgUpdateGroupPolicyAdminResponse


typedef struct MsgUpdateGroupPolicyAdminResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgUpdateGroupPolicyAdminResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateGroupPolicyAdminResponse)
                                   messageName:@"MsgUpdateGroupPolicyAdminResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgUpdateGroupPolicyAdminResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgCreateGroupWithPolicy

@implementation MsgCreateGroupWithPolicy

@dynamic admin;
@dynamic membersArray, membersArray_Count;
@dynamic groupMetadata;
@dynamic groupPolicyMetadata;
@dynamic groupPolicyAsAdmin;
@dynamic hasDecisionPolicy, decisionPolicy;

typedef struct MsgCreateGroupWithPolicy__storage_ {
  uint32_t _has_storage_[1];
  NSString *admin;
  NSMutableArray *membersArray;
  NSString *groupMetadata;
  NSString *groupPolicyMetadata;
  GPBAny *decisionPolicy;
} MsgCreateGroupWithPolicy__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "admin",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgCreateGroupWithPolicy_FieldNumber_Admin,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgCreateGroupWithPolicy__storage_, admin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "membersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(MemberRequest),
        .number = MsgCreateGroupWithPolicy_FieldNumber_MembersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MsgCreateGroupWithPolicy__storage_, membersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "groupMetadata",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgCreateGroupWithPolicy_FieldNumber_GroupMetadata,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgCreateGroupWithPolicy__storage_, groupMetadata),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "groupPolicyMetadata",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgCreateGroupWithPolicy_FieldNumber_GroupPolicyMetadata,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgCreateGroupWithPolicy__storage_, groupPolicyMetadata),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "groupPolicyAsAdmin",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgCreateGroupWithPolicy_FieldNumber_GroupPolicyAsAdmin,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "decisionPolicy",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = MsgCreateGroupWithPolicy_FieldNumber_DecisionPolicy,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MsgCreateGroupWithPolicy__storage_, decisionPolicy),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgCreateGroupWithPolicy)
                                   messageName:@"MsgCreateGroupWithPolicy"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgCreateGroupWithPolicy__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgCreateGroupWithPolicyResponse

@implementation MsgCreateGroupWithPolicyResponse

@dynamic groupId;
@dynamic groupPolicyAddress;

typedef struct MsgCreateGroupWithPolicyResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupPolicyAddress;
  uint64_t groupId;
} MsgCreateGroupWithPolicyResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgCreateGroupWithPolicyResponse_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgCreateGroupWithPolicyResponse__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "groupPolicyAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgCreateGroupWithPolicyResponse_FieldNumber_GroupPolicyAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgCreateGroupWithPolicyResponse__storage_, groupPolicyAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgCreateGroupWithPolicyResponse)
                                   messageName:@"MsgCreateGroupWithPolicyResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgCreateGroupWithPolicyResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateGroupPolicyDecisionPolicy

@implementation MsgUpdateGroupPolicyDecisionPolicy

@dynamic admin;
@dynamic groupPolicyAddress;
@dynamic hasDecisionPolicy, decisionPolicy;

typedef struct MsgUpdateGroupPolicyDecisionPolicy__storage_ {
  uint32_t _has_storage_[1];
  NSString *admin;
  NSString *groupPolicyAddress;
  GPBAny *decisionPolicy;
} MsgUpdateGroupPolicyDecisionPolicy__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "admin",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateGroupPolicyDecisionPolicy_FieldNumber_Admin,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgUpdateGroupPolicyDecisionPolicy__storage_, admin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "groupPolicyAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateGroupPolicyDecisionPolicy_FieldNumber_GroupPolicyAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgUpdateGroupPolicyDecisionPolicy__storage_, groupPolicyAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "decisionPolicy",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = MsgUpdateGroupPolicyDecisionPolicy_FieldNumber_DecisionPolicy,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgUpdateGroupPolicyDecisionPolicy__storage_, decisionPolicy),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateGroupPolicyDecisionPolicy)
                                   messageName:@"MsgUpdateGroupPolicyDecisionPolicy"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgUpdateGroupPolicyDecisionPolicy__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateGroupPolicyDecisionPolicyResponse

@implementation MsgUpdateGroupPolicyDecisionPolicyResponse


typedef struct MsgUpdateGroupPolicyDecisionPolicyResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgUpdateGroupPolicyDecisionPolicyResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateGroupPolicyDecisionPolicyResponse)
                                   messageName:@"MsgUpdateGroupPolicyDecisionPolicyResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgUpdateGroupPolicyDecisionPolicyResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateGroupPolicyMetadata

@implementation MsgUpdateGroupPolicyMetadata

@dynamic admin;
@dynamic groupPolicyAddress;
@dynamic metadata;

typedef struct MsgUpdateGroupPolicyMetadata__storage_ {
  uint32_t _has_storage_[1];
  NSString *admin;
  NSString *groupPolicyAddress;
  NSString *metadata;
} MsgUpdateGroupPolicyMetadata__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "admin",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateGroupPolicyMetadata_FieldNumber_Admin,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgUpdateGroupPolicyMetadata__storage_, admin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "groupPolicyAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateGroupPolicyMetadata_FieldNumber_GroupPolicyAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgUpdateGroupPolicyMetadata__storage_, groupPolicyAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateGroupPolicyMetadata_FieldNumber_Metadata,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgUpdateGroupPolicyMetadata__storage_, metadata),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateGroupPolicyMetadata)
                                   messageName:@"MsgUpdateGroupPolicyMetadata"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgUpdateGroupPolicyMetadata__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateGroupPolicyMetadataResponse

@implementation MsgUpdateGroupPolicyMetadataResponse


typedef struct MsgUpdateGroupPolicyMetadataResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgUpdateGroupPolicyMetadataResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateGroupPolicyMetadataResponse)
                                   messageName:@"MsgUpdateGroupPolicyMetadataResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgUpdateGroupPolicyMetadataResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgSubmitProposal

@implementation MsgSubmitProposal

@dynamic groupPolicyAddress;
@dynamic proposersArray, proposersArray_Count;
@dynamic metadata;
@dynamic messagesArray, messagesArray_Count;
@dynamic exec;
@dynamic title;
@dynamic summary;

typedef struct MsgSubmitProposal__storage_ {
  uint32_t _has_storage_[1];
  Exec exec;
  NSString *groupPolicyAddress;
  NSMutableArray *proposersArray;
  NSString *metadata;
  NSMutableArray *messagesArray;
  NSString *title;
  NSString *summary;
} MsgSubmitProposal__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupPolicyAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSubmitProposal_FieldNumber_GroupPolicyAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgSubmitProposal__storage_, groupPolicyAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "proposersArray",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSubmitProposal_FieldNumber_ProposersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MsgSubmitProposal__storage_, proposersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSubmitProposal_FieldNumber_Metadata,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgSubmitProposal__storage_, metadata),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messagesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = MsgSubmitProposal_FieldNumber_MessagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MsgSubmitProposal__storage_, messagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "exec",
        .dataTypeSpecific.enumDescFunc = Exec_EnumDescriptor,
        .number = MsgSubmitProposal_FieldNumber_Exec,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgSubmitProposal__storage_, exec),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSubmitProposal_FieldNumber_Title,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgSubmitProposal__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "summary",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSubmitProposal_FieldNumber_Summary,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MsgSubmitProposal__storage_, summary),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgSubmitProposal)
                                   messageName:@"MsgSubmitProposal"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgSubmitProposal__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MsgSubmitProposal_Exec_RawValue(MsgSubmitProposal *message) {
  GPBDescriptor *descriptor = [MsgSubmitProposal descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgSubmitProposal_FieldNumber_Exec];
  return GPBGetMessageRawEnumField(message, field);
}

void SetMsgSubmitProposal_Exec_RawValue(MsgSubmitProposal *message, int32_t value) {
  GPBDescriptor *descriptor = [MsgSubmitProposal descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgSubmitProposal_FieldNumber_Exec];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - MsgSubmitProposalResponse

@implementation MsgSubmitProposalResponse

@dynamic proposalId;

typedef struct MsgSubmitProposalResponse__storage_ {
  uint32_t _has_storage_[1];
  uint64_t proposalId;
} MsgSubmitProposalResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "proposalId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSubmitProposalResponse_FieldNumber_ProposalId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgSubmitProposalResponse__storage_, proposalId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgSubmitProposalResponse)
                                   messageName:@"MsgSubmitProposalResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgSubmitProposalResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgWithdrawProposal

@implementation MsgWithdrawProposal

@dynamic proposalId;
@dynamic address;

typedef struct MsgWithdrawProposal__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
  uint64_t proposalId;
} MsgWithdrawProposal__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "proposalId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgWithdrawProposal_FieldNumber_ProposalId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgWithdrawProposal__storage_, proposalId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgWithdrawProposal_FieldNumber_Address,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgWithdrawProposal__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgWithdrawProposal)
                                   messageName:@"MsgWithdrawProposal"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgWithdrawProposal__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgWithdrawProposalResponse

@implementation MsgWithdrawProposalResponse


typedef struct MsgWithdrawProposalResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgWithdrawProposalResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgWithdrawProposalResponse)
                                   messageName:@"MsgWithdrawProposalResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgWithdrawProposalResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgVote

@implementation MsgVote

@dynamic proposalId;
@dynamic voter;
@dynamic option;
@dynamic metadata;
@dynamic exec;

typedef struct MsgVote__storage_ {
  uint32_t _has_storage_[1];
  VoteOption option;
  Exec exec;
  NSString *voter;
  NSString *metadata;
  uint64_t proposalId;
} MsgVote__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "proposalId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgVote_FieldNumber_ProposalId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgVote__storage_, proposalId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "voter",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgVote_FieldNumber_Voter,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgVote__storage_, voter),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "option",
        .dataTypeSpecific.enumDescFunc = VoteOption_EnumDescriptor,
        .number = MsgVote_FieldNumber_Option,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgVote__storage_, option),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgVote_FieldNumber_Metadata,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgVote__storage_, metadata),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "exec",
        .dataTypeSpecific.enumDescFunc = Exec_EnumDescriptor,
        .number = MsgVote_FieldNumber_Exec,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MsgVote__storage_, exec),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgVote)
                                   messageName:@"MsgVote"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgVote__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MsgVote_Option_RawValue(MsgVote *message) {
  GPBDescriptor *descriptor = [MsgVote descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgVote_FieldNumber_Option];
  return GPBGetMessageRawEnumField(message, field);
}

void SetMsgVote_Option_RawValue(MsgVote *message, int32_t value) {
  GPBDescriptor *descriptor = [MsgVote descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgVote_FieldNumber_Option];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t MsgVote_Exec_RawValue(MsgVote *message) {
  GPBDescriptor *descriptor = [MsgVote descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgVote_FieldNumber_Exec];
  return GPBGetMessageRawEnumField(message, field);
}

void SetMsgVote_Exec_RawValue(MsgVote *message, int32_t value) {
  GPBDescriptor *descriptor = [MsgVote descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgVote_FieldNumber_Exec];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - MsgVoteResponse

@implementation MsgVoteResponse


typedef struct MsgVoteResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgVoteResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgVoteResponse)
                                   messageName:@"MsgVoteResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgVoteResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgExec

@implementation MsgExec

@dynamic proposalId;
@dynamic executor;

typedef struct MsgExec__storage_ {
  uint32_t _has_storage_[1];
  NSString *executor;
  uint64_t proposalId;
} MsgExec__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "proposalId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgExec_FieldNumber_ProposalId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgExec__storage_, proposalId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "executor",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgExec_FieldNumber_Executor,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgExec__storage_, executor),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgExec)
                                   messageName:@"MsgExec"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgExec__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgExecResponse

@implementation MsgExecResponse

@dynamic result;

typedef struct MsgExecResponse__storage_ {
  uint32_t _has_storage_[1];
  ProposalExecutorResult result;
} MsgExecResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = ProposalExecutorResult_EnumDescriptor,
        .number = MsgExecResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgExecResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgExecResponse)
                                   messageName:@"MsgExecResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgExecResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MsgExecResponse_Result_RawValue(MsgExecResponse *message) {
  GPBDescriptor *descriptor = [MsgExecResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgExecResponse_FieldNumber_Result];
  return GPBGetMessageRawEnumField(message, field);
}

void SetMsgExecResponse_Result_RawValue(MsgExecResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [MsgExecResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgExecResponse_FieldNumber_Result];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - MsgLeaveGroup

@implementation MsgLeaveGroup

@dynamic address;
@dynamic groupId;

typedef struct MsgLeaveGroup__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
  uint64_t groupId;
} MsgLeaveGroup__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgLeaveGroup_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgLeaveGroup__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "groupId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgLeaveGroup_FieldNumber_GroupId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgLeaveGroup__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgLeaveGroup)
                                   messageName:@"MsgLeaveGroup"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgLeaveGroup__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgLeaveGroupResponse

@implementation MsgLeaveGroupResponse


typedef struct MsgLeaveGroupResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgLeaveGroupResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgLeaveGroupResponse)
                                   messageName:@"MsgLeaveGroupResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgLeaveGroupResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
