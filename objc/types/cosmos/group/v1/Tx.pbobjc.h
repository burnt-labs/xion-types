// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/group/v1/tx.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/group/v1/Types.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum Exec

/** Exec defines modes of execution of a proposal on creation or on new vote. */
typedef GPB_ENUM(Exec) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Exec_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /**
   * An empty value means that there should be a separate
   * MsgExec request for the proposal to execute.
   **/
  Exec_ExecUnspecified = 0,

  /**
   * Try to execute the proposal immediately.
   * If the proposal is not allowed per the DecisionPolicy,
   * the proposal will still be open and could
   * be executed at a later point.
   **/
  Exec_ExecTry = 1,
};

GPBEnumDescriptor *Exec_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Exec_IsValidValue(int32_t value);

#pragma mark - TxRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface TxRoot : GPBRootObject
@end

#pragma mark - MsgCreateGroup

typedef GPB_ENUM(MsgCreateGroup_FieldNumber) {
  MsgCreateGroup_FieldNumber_Admin = 1,
  MsgCreateGroup_FieldNumber_MembersArray = 2,
  MsgCreateGroup_FieldNumber_Metadata = 3,
};

/**
 * MsgCreateGroup is the Msg/CreateGroup request type.
 **/
GPB_FINAL @interface MsgCreateGroup : GPBMessage

/** admin is the account address of the group admin. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *admin;

/** members defines the group members. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<MemberRequest*> *membersArray;
/** The number of items in @c membersArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger membersArray_Count;

/** metadata is any arbitrary metadata to attached to the group. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *metadata;

@end

#pragma mark - MsgCreateGroupResponse

typedef GPB_ENUM(MsgCreateGroupResponse_FieldNumber) {
  MsgCreateGroupResponse_FieldNumber_GroupId = 1,
};

/**
 * MsgCreateGroupResponse is the Msg/CreateGroup response type.
 **/
GPB_FINAL @interface MsgCreateGroupResponse : GPBMessage

/** group_id is the unique ID of the newly created group. */
@property(nonatomic, readwrite) uint64_t groupId;

@end

#pragma mark - MsgUpdateGroupMembers

typedef GPB_ENUM(MsgUpdateGroupMembers_FieldNumber) {
  MsgUpdateGroupMembers_FieldNumber_Admin = 1,
  MsgUpdateGroupMembers_FieldNumber_GroupId = 2,
  MsgUpdateGroupMembers_FieldNumber_MemberUpdatesArray = 3,
};

/**
 * MsgUpdateGroupMembers is the Msg/UpdateGroupMembers request type.
 **/
GPB_FINAL @interface MsgUpdateGroupMembers : GPBMessage

/** admin is the account address of the group admin. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *admin;

/** group_id is the unique ID of the group. */
@property(nonatomic, readwrite) uint64_t groupId;

/**
 * member_updates is the list of members to update,
 * set weight to 0 to remove a member.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<MemberRequest*> *memberUpdatesArray;
/** The number of items in @c memberUpdatesArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger memberUpdatesArray_Count;

@end

#pragma mark - MsgUpdateGroupMembersResponse

/**
 * MsgUpdateGroupMembersResponse is the Msg/UpdateGroupMembers response type.
 **/
GPB_FINAL @interface MsgUpdateGroupMembersResponse : GPBMessage

@end

#pragma mark - MsgUpdateGroupAdmin

typedef GPB_ENUM(MsgUpdateGroupAdmin_FieldNumber) {
  MsgUpdateGroupAdmin_FieldNumber_Admin = 1,
  MsgUpdateGroupAdmin_FieldNumber_GroupId = 2,
  MsgUpdateGroupAdmin_FieldNumber_NewAdmin = 3,
};

/**
 * MsgUpdateGroupAdmin is the Msg/UpdateGroupAdmin request type.
 **/
GPB_FINAL @interface MsgUpdateGroupAdmin : GPBMessage

/** admin is the current account address of the group admin. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *admin;

/** group_id is the unique ID of the group. */
@property(nonatomic, readwrite) uint64_t groupId;

/** new_admin is the group new admin account address. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *newAdmin NS_RETURNS_NOT_RETAINED;

@end

#pragma mark - MsgUpdateGroupAdminResponse

/**
 * MsgUpdateGroupAdminResponse is the Msg/UpdateGroupAdmin response type.
 **/
GPB_FINAL @interface MsgUpdateGroupAdminResponse : GPBMessage

@end

#pragma mark - MsgUpdateGroupMetadata

typedef GPB_ENUM(MsgUpdateGroupMetadata_FieldNumber) {
  MsgUpdateGroupMetadata_FieldNumber_Admin = 1,
  MsgUpdateGroupMetadata_FieldNumber_GroupId = 2,
  MsgUpdateGroupMetadata_FieldNumber_Metadata = 3,
};

/**
 * MsgUpdateGroupMetadata is the Msg/UpdateGroupMetadata request type.
 **/
GPB_FINAL @interface MsgUpdateGroupMetadata : GPBMessage

/** admin is the account address of the group admin. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *admin;

/** group_id is the unique ID of the group. */
@property(nonatomic, readwrite) uint64_t groupId;

/** metadata is the updated group's metadata. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *metadata;

@end

#pragma mark - MsgUpdateGroupMetadataResponse

/**
 * MsgUpdateGroupMetadataResponse is the Msg/UpdateGroupMetadata response type.
 **/
GPB_FINAL @interface MsgUpdateGroupMetadataResponse : GPBMessage

@end

#pragma mark - MsgCreateGroupPolicy

typedef GPB_ENUM(MsgCreateGroupPolicy_FieldNumber) {
  MsgCreateGroupPolicy_FieldNumber_Admin = 1,
  MsgCreateGroupPolicy_FieldNumber_GroupId = 2,
  MsgCreateGroupPolicy_FieldNumber_Metadata = 3,
  MsgCreateGroupPolicy_FieldNumber_DecisionPolicy = 4,
};

/**
 * MsgCreateGroupPolicy is the Msg/CreateGroupPolicy request type.
 **/
GPB_FINAL @interface MsgCreateGroupPolicy : GPBMessage

/** admin is the account address of the group admin. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *admin;

/** group_id is the unique ID of the group. */
@property(nonatomic, readwrite) uint64_t groupId;

/** metadata is any arbitrary metadata attached to the group policy. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *metadata;

/** decision_policy specifies the group policy's decision policy. */
@property(nonatomic, readwrite, strong, null_resettable) GPBAny *decisionPolicy;
/** Test to see if @c decisionPolicy has been set. */
@property(nonatomic, readwrite) BOOL hasDecisionPolicy;

@end

#pragma mark - MsgCreateGroupPolicyResponse

typedef GPB_ENUM(MsgCreateGroupPolicyResponse_FieldNumber) {
  MsgCreateGroupPolicyResponse_FieldNumber_Address = 1,
};

/**
 * MsgCreateGroupPolicyResponse is the Msg/CreateGroupPolicy response type.
 **/
GPB_FINAL @interface MsgCreateGroupPolicyResponse : GPBMessage

/** address is the account address of the newly created group policy. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *address;

@end

#pragma mark - MsgUpdateGroupPolicyAdmin

typedef GPB_ENUM(MsgUpdateGroupPolicyAdmin_FieldNumber) {
  MsgUpdateGroupPolicyAdmin_FieldNumber_Admin = 1,
  MsgUpdateGroupPolicyAdmin_FieldNumber_GroupPolicyAddress = 2,
  MsgUpdateGroupPolicyAdmin_FieldNumber_NewAdmin = 3,
};

/**
 * MsgUpdateGroupPolicyAdmin is the Msg/UpdateGroupPolicyAdmin request type.
 **/
GPB_FINAL @interface MsgUpdateGroupPolicyAdmin : GPBMessage

/** admin is the account address of the group admin. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *admin;

/** group_policy_address is the account address of the group policy. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupPolicyAddress;

/** new_admin is the new group policy admin. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *newAdmin NS_RETURNS_NOT_RETAINED;

@end

#pragma mark - MsgUpdateGroupPolicyAdminResponse

/**
 * MsgUpdateGroupPolicyAdminResponse is the Msg/UpdateGroupPolicyAdmin response type.
 **/
GPB_FINAL @interface MsgUpdateGroupPolicyAdminResponse : GPBMessage

@end

#pragma mark - MsgCreateGroupWithPolicy

typedef GPB_ENUM(MsgCreateGroupWithPolicy_FieldNumber) {
  MsgCreateGroupWithPolicy_FieldNumber_Admin = 1,
  MsgCreateGroupWithPolicy_FieldNumber_MembersArray = 2,
  MsgCreateGroupWithPolicy_FieldNumber_GroupMetadata = 3,
  MsgCreateGroupWithPolicy_FieldNumber_GroupPolicyMetadata = 4,
  MsgCreateGroupWithPolicy_FieldNumber_GroupPolicyAsAdmin = 5,
  MsgCreateGroupWithPolicy_FieldNumber_DecisionPolicy = 6,
};

/**
 * MsgCreateGroupWithPolicy is the Msg/CreateGroupWithPolicy request type.
 **/
GPB_FINAL @interface MsgCreateGroupWithPolicy : GPBMessage

/** admin is the account address of the group and group policy admin. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *admin;

/** members defines the group members. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<MemberRequest*> *membersArray;
/** The number of items in @c membersArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger membersArray_Count;

/** group_metadata is any arbitrary metadata attached to the group. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupMetadata;

/** group_policy_metadata is any arbitrary metadata attached to the group policy. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupPolicyMetadata;

/**
 * group_policy_as_admin is a boolean field, if set to true, the group policy account address will be used as group
 * and group policy admin.
 **/
@property(nonatomic, readwrite) BOOL groupPolicyAsAdmin;

/** decision_policy specifies the group policy's decision policy. */
@property(nonatomic, readwrite, strong, null_resettable) GPBAny *decisionPolicy;
/** Test to see if @c decisionPolicy has been set. */
@property(nonatomic, readwrite) BOOL hasDecisionPolicy;

@end

#pragma mark - MsgCreateGroupWithPolicyResponse

typedef GPB_ENUM(MsgCreateGroupWithPolicyResponse_FieldNumber) {
  MsgCreateGroupWithPolicyResponse_FieldNumber_GroupId = 1,
  MsgCreateGroupWithPolicyResponse_FieldNumber_GroupPolicyAddress = 2,
};

/**
 * MsgCreateGroupWithPolicyResponse is the Msg/CreateGroupWithPolicy response type.
 **/
GPB_FINAL @interface MsgCreateGroupWithPolicyResponse : GPBMessage

/** group_id is the unique ID of the newly created group with policy. */
@property(nonatomic, readwrite) uint64_t groupId;

/** group_policy_address is the account address of the newly created group policy. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupPolicyAddress;

@end

#pragma mark - MsgUpdateGroupPolicyDecisionPolicy

typedef GPB_ENUM(MsgUpdateGroupPolicyDecisionPolicy_FieldNumber) {
  MsgUpdateGroupPolicyDecisionPolicy_FieldNumber_Admin = 1,
  MsgUpdateGroupPolicyDecisionPolicy_FieldNumber_GroupPolicyAddress = 2,
  MsgUpdateGroupPolicyDecisionPolicy_FieldNumber_DecisionPolicy = 3,
};

/**
 * MsgUpdateGroupPolicyDecisionPolicy is the Msg/UpdateGroupPolicyDecisionPolicy request type.
 **/
GPB_FINAL @interface MsgUpdateGroupPolicyDecisionPolicy : GPBMessage

/** admin is the account address of the group admin. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *admin;

/** group_policy_address is the account address of group policy. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupPolicyAddress;

/** decision_policy is the updated group policy's decision policy. */
@property(nonatomic, readwrite, strong, null_resettable) GPBAny *decisionPolicy;
/** Test to see if @c decisionPolicy has been set. */
@property(nonatomic, readwrite) BOOL hasDecisionPolicy;

@end

#pragma mark - MsgUpdateGroupPolicyDecisionPolicyResponse

/**
 * MsgUpdateGroupPolicyDecisionPolicyResponse is the Msg/UpdateGroupPolicyDecisionPolicy response type.
 **/
GPB_FINAL @interface MsgUpdateGroupPolicyDecisionPolicyResponse : GPBMessage

@end

#pragma mark - MsgUpdateGroupPolicyMetadata

typedef GPB_ENUM(MsgUpdateGroupPolicyMetadata_FieldNumber) {
  MsgUpdateGroupPolicyMetadata_FieldNumber_Admin = 1,
  MsgUpdateGroupPolicyMetadata_FieldNumber_GroupPolicyAddress = 2,
  MsgUpdateGroupPolicyMetadata_FieldNumber_Metadata = 3,
};

/**
 * MsgUpdateGroupPolicyMetadata is the Msg/UpdateGroupPolicyMetadata request type.
 **/
GPB_FINAL @interface MsgUpdateGroupPolicyMetadata : GPBMessage

/** admin is the account address of the group admin. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *admin;

/** group_policy_address is the account address of group policy. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupPolicyAddress;

/** metadata is the group policy metadata to be updated. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *metadata;

@end

#pragma mark - MsgUpdateGroupPolicyMetadataResponse

/**
 * MsgUpdateGroupPolicyMetadataResponse is the Msg/UpdateGroupPolicyMetadata response type.
 **/
GPB_FINAL @interface MsgUpdateGroupPolicyMetadataResponse : GPBMessage

@end

#pragma mark - MsgSubmitProposal

typedef GPB_ENUM(MsgSubmitProposal_FieldNumber) {
  MsgSubmitProposal_FieldNumber_GroupPolicyAddress = 1,
  MsgSubmitProposal_FieldNumber_ProposersArray = 2,
  MsgSubmitProposal_FieldNumber_Metadata = 3,
  MsgSubmitProposal_FieldNumber_MessagesArray = 4,
  MsgSubmitProposal_FieldNumber_Exec = 5,
  MsgSubmitProposal_FieldNumber_Title = 6,
  MsgSubmitProposal_FieldNumber_Summary = 7,
};

/**
 * MsgSubmitProposal is the Msg/SubmitProposal request type.
 **/
GPB_FINAL @interface MsgSubmitProposal : GPBMessage

/** group_policy_address is the account address of group policy. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupPolicyAddress;

/**
 * proposers are the account addresses of the proposers.
 * Proposers signatures will be counted as yes votes.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *proposersArray;
/** The number of items in @c proposersArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger proposersArray_Count;

/** metadata is any arbitrary metadata attached to the proposal. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *metadata;

/** messages is a list of `sdk.Msg`s that will be executed if the proposal passes. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<GPBAny*> *messagesArray;
/** The number of items in @c messagesArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger messagesArray_Count;

/**
 * exec defines the mode of execution of the proposal,
 * whether it should be executed immediately on creation or not.
 * If so, proposers signatures are considered as Yes votes.
 **/
@property(nonatomic, readwrite) Exec exec;

/** title is the title of the proposal. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *title;

/** summary is the summary of the proposal. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *summary;

@end

/**
 * Fetches the raw value of a @c MsgSubmitProposal's @c exec property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t MsgSubmitProposal_Exec_RawValue(MsgSubmitProposal *message);
/**
 * Sets the raw value of an @c MsgSubmitProposal's @c exec property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetMsgSubmitProposal_Exec_RawValue(MsgSubmitProposal *message, int32_t value);

#pragma mark - MsgSubmitProposalResponse

typedef GPB_ENUM(MsgSubmitProposalResponse_FieldNumber) {
  MsgSubmitProposalResponse_FieldNumber_ProposalId = 1,
};

/**
 * MsgSubmitProposalResponse is the Msg/SubmitProposal response type.
 **/
GPB_FINAL @interface MsgSubmitProposalResponse : GPBMessage

/** proposal is the unique ID of the proposal. */
@property(nonatomic, readwrite) uint64_t proposalId;

@end

#pragma mark - MsgWithdrawProposal

typedef GPB_ENUM(MsgWithdrawProposal_FieldNumber) {
  MsgWithdrawProposal_FieldNumber_ProposalId = 1,
  MsgWithdrawProposal_FieldNumber_Address = 2,
};

/**
 * MsgWithdrawProposal is the Msg/WithdrawProposal request type.
 **/
GPB_FINAL @interface MsgWithdrawProposal : GPBMessage

/** proposal is the unique ID of the proposal. */
@property(nonatomic, readwrite) uint64_t proposalId;

/** address is the admin of the group policy or one of the proposer of the proposal. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *address;

@end

#pragma mark - MsgWithdrawProposalResponse

/**
 * MsgWithdrawProposalResponse is the Msg/WithdrawProposal response type.
 **/
GPB_FINAL @interface MsgWithdrawProposalResponse : GPBMessage

@end

#pragma mark - MsgVote

typedef GPB_ENUM(MsgVote_FieldNumber) {
  MsgVote_FieldNumber_ProposalId = 1,
  MsgVote_FieldNumber_Voter = 2,
  MsgVote_FieldNumber_Option = 3,
  MsgVote_FieldNumber_Metadata = 4,
  MsgVote_FieldNumber_Exec = 5,
};

/**
 * MsgVote is the Msg/Vote request type.
 **/
GPB_FINAL @interface MsgVote : GPBMessage

/** proposal is the unique ID of the proposal. */
@property(nonatomic, readwrite) uint64_t proposalId;

/** voter is the voter account address. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *voter;

/** option is the voter's choice on the proposal. */
@property(nonatomic, readwrite) VoteOption option;

/** metadata is any arbitrary metadata attached to the vote. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *metadata;

/**
 * exec defines whether the proposal should be executed
 * immediately after voting or not.
 **/
@property(nonatomic, readwrite) Exec exec;

@end

/**
 * Fetches the raw value of a @c MsgVote's @c option property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t MsgVote_Option_RawValue(MsgVote *message);
/**
 * Sets the raw value of an @c MsgVote's @c option property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetMsgVote_Option_RawValue(MsgVote *message, int32_t value);

/**
 * Fetches the raw value of a @c MsgVote's @c exec property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t MsgVote_Exec_RawValue(MsgVote *message);
/**
 * Sets the raw value of an @c MsgVote's @c exec property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetMsgVote_Exec_RawValue(MsgVote *message, int32_t value);

#pragma mark - MsgVoteResponse

/**
 * MsgVoteResponse is the Msg/Vote response type.
 **/
GPB_FINAL @interface MsgVoteResponse : GPBMessage

@end

#pragma mark - MsgExec

typedef GPB_ENUM(MsgExec_FieldNumber) {
  MsgExec_FieldNumber_ProposalId = 1,
  MsgExec_FieldNumber_Executor = 2,
};

/**
 * MsgExec is the Msg/Exec request type.
 **/
GPB_FINAL @interface MsgExec : GPBMessage

/** proposal is the unique ID of the proposal. */
@property(nonatomic, readwrite) uint64_t proposalId;

/** executor is the account address used to execute the proposal. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *executor;

@end

#pragma mark - MsgExecResponse

typedef GPB_ENUM(MsgExecResponse_FieldNumber) {
  MsgExecResponse_FieldNumber_Result = 2,
};

/**
 * MsgExecResponse is the Msg/Exec request type.
 **/
GPB_FINAL @interface MsgExecResponse : GPBMessage

/** result is the final result of the proposal execution. */
@property(nonatomic, readwrite) ProposalExecutorResult result;

@end

/**
 * Fetches the raw value of a @c MsgExecResponse's @c result property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t MsgExecResponse_Result_RawValue(MsgExecResponse *message);
/**
 * Sets the raw value of an @c MsgExecResponse's @c result property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetMsgExecResponse_Result_RawValue(MsgExecResponse *message, int32_t value);

#pragma mark - MsgLeaveGroup

typedef GPB_ENUM(MsgLeaveGroup_FieldNumber) {
  MsgLeaveGroup_FieldNumber_Address = 1,
  MsgLeaveGroup_FieldNumber_GroupId = 2,
};

/**
 * MsgLeaveGroup is the Msg/LeaveGroup request type.
 **/
GPB_FINAL @interface MsgLeaveGroup : GPBMessage

/** address is the account address of the group member. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *address;

/** group_id is the unique ID of the group. */
@property(nonatomic, readwrite) uint64_t groupId;

@end

#pragma mark - MsgLeaveGroupResponse

/**
 * MsgLeaveGroupResponse is the Msg/LeaveGroup response type.
 **/
GPB_FINAL @interface MsgLeaveGroupResponse : GPBMessage

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
