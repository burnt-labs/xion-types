// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/group/v1/types.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class DecisionPolicyWindows;
@class Member;
@class TallyResult;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum VoteOption

/** VoteOption enumerates the valid vote options for a given proposal. */
typedef GPB_ENUM(VoteOption) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  VoteOption_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /**
   * VOTE_OPTION_UNSPECIFIED defines an unspecified vote option which will
   * return an error.
   **/
  VoteOption_VoteOptionUnspecified = 0,

  /** VOTE_OPTION_YES defines a yes vote option. */
  VoteOption_VoteOptionYes = 1,

  /** VOTE_OPTION_ABSTAIN defines an abstain vote option. */
  VoteOption_VoteOptionAbstain = 2,

  /** VOTE_OPTION_NO defines a no vote option. */
  VoteOption_VoteOptionNo = 3,

  /** VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option. */
  VoteOption_VoteOptionNoWithVeto = 4,
};

GPBEnumDescriptor *VoteOption_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL VoteOption_IsValidValue(int32_t value);

#pragma mark - Enum ProposalStatus

/** ProposalStatus defines proposal statuses. */
typedef GPB_ENUM(ProposalStatus) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  ProposalStatus_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** An empty value is invalid and not allowed. */
  ProposalStatus_ProposalStatusUnspecified = 0,

  /** Initial status of a proposal when submitted. */
  ProposalStatus_ProposalStatusSubmitted = 1,

  /**
   * Final status of a proposal when the final tally is done and the outcome
   * passes the group policy's decision policy.
   **/
  ProposalStatus_ProposalStatusAccepted = 2,

  /**
   * Final status of a proposal when the final tally is done and the outcome
   * is rejected by the group policy's decision policy.
   **/
  ProposalStatus_ProposalStatusRejected = 3,

  /**
   * Final status of a proposal when the group policy is modified before the
   * final tally.
   **/
  ProposalStatus_ProposalStatusAborted = 4,

  /**
   * A proposal can be withdrawn before the voting start time by the owner.
   * When this happens the final status is Withdrawn.
   **/
  ProposalStatus_ProposalStatusWithdrawn = 5,
};

GPBEnumDescriptor *ProposalStatus_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ProposalStatus_IsValidValue(int32_t value);

#pragma mark - Enum ProposalExecutorResult

/** ProposalExecutorResult defines types of proposal executor results. */
typedef GPB_ENUM(ProposalExecutorResult) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  ProposalExecutorResult_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** An empty value is not allowed. */
  ProposalExecutorResult_ProposalExecutorResultUnspecified = 0,

  /** We have not yet run the executor. */
  ProposalExecutorResult_ProposalExecutorResultNotRun = 1,

  /** The executor was successful and proposed action updated state. */
  ProposalExecutorResult_ProposalExecutorResultSuccess = 2,

  /** The executor returned an error and proposed action didn't update state. */
  ProposalExecutorResult_ProposalExecutorResultFailure = 3,
};

GPBEnumDescriptor *ProposalExecutorResult_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ProposalExecutorResult_IsValidValue(int32_t value);

#pragma mark - TypesRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface TypesRoot : GPBRootObject
@end

#pragma mark - Member

typedef GPB_ENUM(Member_FieldNumber) {
  Member_FieldNumber_Address = 1,
  Member_FieldNumber_Weight = 2,
  Member_FieldNumber_Metadata = 3,
  Member_FieldNumber_AddedAt = 4,
};

/**
 * Member represents a group member with an account address,
 * non-zero weight, metadata and added_at timestamp.
 **/
GPB_FINAL @interface Member : GPBMessage

/** address is the member's account address. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *address;

/** weight is the member's voting weight that should be greater than 0. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *weight;

/** metadata is any arbitrary metadata attached to the member. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *metadata;

/** added_at is a timestamp specifying when a member was added. */
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *addedAt;
/** Test to see if @c addedAt has been set. */
@property(nonatomic, readwrite) BOOL hasAddedAt;

@end

#pragma mark - MemberRequest

typedef GPB_ENUM(MemberRequest_FieldNumber) {
  MemberRequest_FieldNumber_Address = 1,
  MemberRequest_FieldNumber_Weight = 2,
  MemberRequest_FieldNumber_Metadata = 3,
};

/**
 * MemberRequest represents a group member to be used in Msg server requests.
 * Contrary to `Member`, it doesn't have any `added_at` field
 * since this field cannot be set as part of requests.
 **/
GPB_FINAL @interface MemberRequest : GPBMessage

/** address is the member's account address. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *address;

/** weight is the member's voting weight that should be greater than 0. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *weight;

/** metadata is any arbitrary metadata attached to the member. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *metadata;

@end

#pragma mark - ThresholdDecisionPolicy

typedef GPB_ENUM(ThresholdDecisionPolicy_FieldNumber) {
  ThresholdDecisionPolicy_FieldNumber_Threshold = 1,
  ThresholdDecisionPolicy_FieldNumber_Windows = 2,
};

/**
 * ThresholdDecisionPolicy is a decision policy where a proposal passes when it
 * satisfies the two following conditions:
 * 1. The sum of all `YES` voter's weights is greater or equal than the defined
 *    `threshold`.
 * 2. The voting and execution periods of the proposal respect the parameters
 *    given by `windows`.
 **/
GPB_FINAL @interface ThresholdDecisionPolicy : GPBMessage

/**
 * threshold is the minimum weighted sum of `YES` votes that must be met or
 * exceeded for a proposal to succeed.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *threshold;

/** windows defines the different windows for voting and execution. */
@property(nonatomic, readwrite, strong, null_resettable) DecisionPolicyWindows *windows;
/** Test to see if @c windows has been set. */
@property(nonatomic, readwrite) BOOL hasWindows;

@end

#pragma mark - PercentageDecisionPolicy

typedef GPB_ENUM(PercentageDecisionPolicy_FieldNumber) {
  PercentageDecisionPolicy_FieldNumber_Percentage = 1,
  PercentageDecisionPolicy_FieldNumber_Windows = 2,
};

/**
 * PercentageDecisionPolicy is a decision policy where a proposal passes when
 * it satisfies the two following conditions:
 * 1. The percentage of all `YES` voters' weights out of the total group weight
 *    is greater or equal than the given `percentage`.
 * 2. The voting and execution periods of the proposal respect the parameters
 *    given by `windows`.
 **/
GPB_FINAL @interface PercentageDecisionPolicy : GPBMessage

/**
 * percentage is the minimum percentage of the weighted sum of `YES` votes must
 * meet for a proposal to succeed.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *percentage;

/** windows defines the different windows for voting and execution. */
@property(nonatomic, readwrite, strong, null_resettable) DecisionPolicyWindows *windows;
/** Test to see if @c windows has been set. */
@property(nonatomic, readwrite) BOOL hasWindows;

@end

#pragma mark - DecisionPolicyWindows

typedef GPB_ENUM(DecisionPolicyWindows_FieldNumber) {
  DecisionPolicyWindows_FieldNumber_VotingPeriod = 1,
  DecisionPolicyWindows_FieldNumber_MinExecutionPeriod = 2,
};

/**
 * DecisionPolicyWindows defines the different windows for voting and execution.
 **/
GPB_FINAL @interface DecisionPolicyWindows : GPBMessage

/**
 * voting_period is the duration from submission of a proposal to the end of voting period
 * Within this times votes can be submitted with MsgVote.
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBDuration *votingPeriod;
/** Test to see if @c votingPeriod has been set. */
@property(nonatomic, readwrite) BOOL hasVotingPeriod;

/**
 * min_execution_period is the minimum duration after the proposal submission
 * where members can start sending MsgExec. This means that the window for
 * sending a MsgExec transaction is:
 * `[ submission + min_execution_period ; submission + voting_period + max_execution_period]`
 * where max_execution_period is a app-specific config, defined in the keeper.
 * If not set, min_execution_period will default to 0.
 *
 * Please make sure to set a `min_execution_period` that is smaller than
 * `voting_period + max_execution_period`, or else the above execution window
 * is empty, meaning that all proposals created with this decision policy
 * won't be able to be executed.
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBDuration *minExecutionPeriod;
/** Test to see if @c minExecutionPeriod has been set. */
@property(nonatomic, readwrite) BOOL hasMinExecutionPeriod;

@end

#pragma mark - GroupInfo

typedef GPB_ENUM(GroupInfo_FieldNumber) {
  GroupInfo_FieldNumber_Id_p = 1,
  GroupInfo_FieldNumber_Admin = 2,
  GroupInfo_FieldNumber_Metadata = 3,
  GroupInfo_FieldNumber_Version = 4,
  GroupInfo_FieldNumber_TotalWeight = 5,
  GroupInfo_FieldNumber_CreatedAt = 6,
};

/**
 * GroupInfo represents the high-level on-chain information for a group.
 **/
GPB_FINAL @interface GroupInfo : GPBMessage

/** id is the unique ID of the group. */
@property(nonatomic, readwrite) uint64_t id_p;

/** admin is the account address of the group's admin. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *admin;

/**
 * metadata is any arbitrary metadata to attached to the group.
 * the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#group-1
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *metadata;

/**
 * version is used to track changes to a group's membership structure that
 * would break existing proposals. Whenever any members weight is changed,
 * or any member is added or removed this version is incremented and will
 * cause proposals based on older versions of this group to fail
 **/
@property(nonatomic, readwrite) uint64_t version;

/** total_weight is the sum of the group members' weights. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *totalWeight;

/** created_at is a timestamp specifying when a group was created. */
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *createdAt;
/** Test to see if @c createdAt has been set. */
@property(nonatomic, readwrite) BOOL hasCreatedAt;

@end

#pragma mark - GroupMember

typedef GPB_ENUM(GroupMember_FieldNumber) {
  GroupMember_FieldNumber_GroupId = 1,
  GroupMember_FieldNumber_Member = 2,
};

/**
 * GroupMember represents the relationship between a group and a member.
 **/
GPB_FINAL @interface GroupMember : GPBMessage

/** group_id is the unique ID of the group. */
@property(nonatomic, readwrite) uint64_t groupId;

/** member is the member data. */
@property(nonatomic, readwrite, strong, null_resettable) Member *member;
/** Test to see if @c member has been set. */
@property(nonatomic, readwrite) BOOL hasMember;

@end

#pragma mark - GroupPolicyInfo

typedef GPB_ENUM(GroupPolicyInfo_FieldNumber) {
  GroupPolicyInfo_FieldNumber_Address = 1,
  GroupPolicyInfo_FieldNumber_GroupId = 2,
  GroupPolicyInfo_FieldNumber_Admin = 3,
  GroupPolicyInfo_FieldNumber_Metadata = 4,
  GroupPolicyInfo_FieldNumber_Version = 5,
  GroupPolicyInfo_FieldNumber_DecisionPolicy = 6,
  GroupPolicyInfo_FieldNumber_CreatedAt = 7,
};

/**
 * GroupPolicyInfo represents the high-level on-chain information for a group policy.
 **/
GPB_FINAL @interface GroupPolicyInfo : GPBMessage

/** address is the account address of group policy. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *address;

/** group_id is the unique ID of the group. */
@property(nonatomic, readwrite) uint64_t groupId;

/** admin is the account address of the group admin. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *admin;

/**
 * metadata is any arbitrary metadata attached to the group policy.
 * the recommended format of the metadata is to be found here:
 * https://docs.cosmos.network/v0.47/modules/group#decision-policy-1
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *metadata;

/**
 * version is used to track changes to a group's GroupPolicyInfo structure that
 * would create a different result on a running proposal.
 **/
@property(nonatomic, readwrite) uint64_t version;

/** decision_policy specifies the group policy's decision policy. */
@property(nonatomic, readwrite, strong, null_resettable) GPBAny *decisionPolicy;
/** Test to see if @c decisionPolicy has been set. */
@property(nonatomic, readwrite) BOOL hasDecisionPolicy;

/** created_at is a timestamp specifying when a group policy was created. */
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *createdAt;
/** Test to see if @c createdAt has been set. */
@property(nonatomic, readwrite) BOOL hasCreatedAt;

@end

#pragma mark - Proposal

typedef GPB_ENUM(Proposal_FieldNumber) {
  Proposal_FieldNumber_Id_p = 1,
  Proposal_FieldNumber_GroupPolicyAddress = 2,
  Proposal_FieldNumber_Metadata = 3,
  Proposal_FieldNumber_ProposersArray = 4,
  Proposal_FieldNumber_SubmitTime = 5,
  Proposal_FieldNumber_GroupVersion = 6,
  Proposal_FieldNumber_GroupPolicyVersion = 7,
  Proposal_FieldNumber_Status = 8,
  Proposal_FieldNumber_FinalTallyResult = 9,
  Proposal_FieldNumber_VotingPeriodEnd = 10,
  Proposal_FieldNumber_ExecutorResult = 11,
  Proposal_FieldNumber_MessagesArray = 12,
  Proposal_FieldNumber_Title = 13,
  Proposal_FieldNumber_Summary = 14,
};

/**
 * Proposal defines a group proposal. Any member of a group can submit a proposal
 * for a group policy to decide upon.
 * A proposal consists of a set of `sdk.Msg`s that will be executed if the proposal
 * passes as well as some optional metadata associated with the proposal.
 **/
GPB_FINAL @interface Proposal : GPBMessage

/** id is the unique id of the proposal. */
@property(nonatomic, readwrite) uint64_t id_p;

/** group_policy_address is the account address of group policy. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *groupPolicyAddress;

/**
 * metadata is any arbitrary metadata attached to the proposal.
 * the recommended format of the metadata is to be found here:
 * https://docs.cosmos.network/v0.47/modules/group#proposal-4
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *metadata;

/** proposers are the account addresses of the proposers. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *proposersArray;
/** The number of items in @c proposersArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger proposersArray_Count;

/** submit_time is a timestamp specifying when a proposal was submitted. */
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *submitTime;
/** Test to see if @c submitTime has been set. */
@property(nonatomic, readwrite) BOOL hasSubmitTime;

/**
 * group_version tracks the version of the group at proposal submission.
 * This field is here for informational purposes only.
 **/
@property(nonatomic, readwrite) uint64_t groupVersion;

/**
 * group_policy_version tracks the version of the group policy at proposal submission.
 * When a decision policy is changed, existing proposals from previous policy
 * versions will become invalid with the `ABORTED` status.
 * This field is here for informational purposes only.
 **/
@property(nonatomic, readwrite) uint64_t groupPolicyVersion;

/** status represents the high level position in the life cycle of the proposal. Initial value is Submitted. */
@property(nonatomic, readwrite) ProposalStatus status;

/**
 * final_tally_result contains the sums of all weighted votes for this
 * proposal for each vote option. It is empty at submission, and only
 * populated after tallying, at voting period end or at proposal execution,
 * whichever happens first.
 **/
@property(nonatomic, readwrite, strong, null_resettable) TallyResult *finalTallyResult;
/** Test to see if @c finalTallyResult has been set. */
@property(nonatomic, readwrite) BOOL hasFinalTallyResult;

/**
 * voting_period_end is the timestamp before which voting must be done.
 * Unless a successful MsgExec is called before (to execute a proposal whose
 * tally is successful before the voting period ends), tallying will be done
 * at this point, and the `final_tally_result`and `status` fields will be
 * accordingly updated.
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *votingPeriodEnd;
/** Test to see if @c votingPeriodEnd has been set. */
@property(nonatomic, readwrite) BOOL hasVotingPeriodEnd;

/** executor_result is the final result of the proposal execution. Initial value is NotRun. */
@property(nonatomic, readwrite) ProposalExecutorResult executorResult;

/** messages is a list of `sdk.Msg`s that will be executed if the proposal passes. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<GPBAny*> *messagesArray;
/** The number of items in @c messagesArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger messagesArray_Count;

/** title is the title of the proposal */
@property(nonatomic, readwrite, copy, null_resettable) NSString *title;

/** summary is a short summary of the proposal */
@property(nonatomic, readwrite, copy, null_resettable) NSString *summary;

@end

/**
 * Fetches the raw value of a @c Proposal's @c status property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Proposal_Status_RawValue(Proposal *message);
/**
 * Sets the raw value of an @c Proposal's @c status property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetProposal_Status_RawValue(Proposal *message, int32_t value);

/**
 * Fetches the raw value of a @c Proposal's @c executorResult property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Proposal_ExecutorResult_RawValue(Proposal *message);
/**
 * Sets the raw value of an @c Proposal's @c executorResult property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetProposal_ExecutorResult_RawValue(Proposal *message, int32_t value);

#pragma mark - TallyResult

typedef GPB_ENUM(TallyResult_FieldNumber) {
  TallyResult_FieldNumber_YesCount = 1,
  TallyResult_FieldNumber_AbstainCount = 2,
  TallyResult_FieldNumber_NoCount = 3,
  TallyResult_FieldNumber_NoWithVetoCount = 4,
};

/**
 * TallyResult represents the sum of weighted votes for each vote option.
 **/
GPB_FINAL @interface TallyResult : GPBMessage

/** yes_count is the weighted sum of yes votes. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *yesCount;

/** abstain_count is the weighted sum of abstainers. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *abstainCount;

/** no_count is the weighted sum of no votes. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *noCount;

/** no_with_veto_count is the weighted sum of veto. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *noWithVetoCount;

@end

#pragma mark - Vote

typedef GPB_ENUM(Vote_FieldNumber) {
  Vote_FieldNumber_ProposalId = 1,
  Vote_FieldNumber_Voter = 2,
  Vote_FieldNumber_Option = 3,
  Vote_FieldNumber_Metadata = 4,
  Vote_FieldNumber_SubmitTime = 5,
};

/**
 * Vote represents a vote for a proposal.string metadata
 **/
GPB_FINAL @interface Vote : GPBMessage

/** proposal is the unique ID of the proposal. */
@property(nonatomic, readwrite) uint64_t proposalId;

/** voter is the account address of the voter. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *voter;

/** option is the voter's choice on the proposal. */
@property(nonatomic, readwrite) VoteOption option;

/**
 * metadata is any arbitrary metadata attached to the vote.
 * the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#vote-2
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *metadata;

/** submit_time is the timestamp when the vote was submitted. */
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *submitTime;
/** Test to see if @c submitTime has been set. */
@property(nonatomic, readwrite) BOOL hasSubmitTime;

@end

/**
 * Fetches the raw value of a @c Vote's @c option property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Vote_Option_RawValue(Vote *message);
/**
 * Sets the raw value of an @c Vote's @c option property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetVote_Option_RawValue(Vote *message, int32_t value);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
