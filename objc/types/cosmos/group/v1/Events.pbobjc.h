// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos/group/v1/events.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/group/v1/Types.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

NS_ASSUME_NONNULL_BEGIN

#pragma mark - EventsRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface EventsRoot : GPBRootObject
@end

#pragma mark - EventCreateGroup

typedef GPB_ENUM(EventCreateGroup_FieldNumber) {
  EventCreateGroup_FieldNumber_GroupId = 1,
};

/**
 * EventCreateGroup is an event emitted when a group is created.
 **/
GPB_FINAL @interface EventCreateGroup : GPBMessage

/** group_id is the unique ID of the group. */
@property(nonatomic, readwrite) uint64_t groupId;

@end

#pragma mark - EventUpdateGroup

typedef GPB_ENUM(EventUpdateGroup_FieldNumber) {
  EventUpdateGroup_FieldNumber_GroupId = 1,
};

/**
 * EventUpdateGroup is an event emitted when a group is updated.
 **/
GPB_FINAL @interface EventUpdateGroup : GPBMessage

/** group_id is the unique ID of the group. */
@property(nonatomic, readwrite) uint64_t groupId;

@end

#pragma mark - EventCreateGroupPolicy

typedef GPB_ENUM(EventCreateGroupPolicy_FieldNumber) {
  EventCreateGroupPolicy_FieldNumber_Address = 1,
};

/**
 * EventCreateGroupPolicy is an event emitted when a group policy is created.
 **/
GPB_FINAL @interface EventCreateGroupPolicy : GPBMessage

/** address is the account address of the group policy. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *address;

@end

#pragma mark - EventUpdateGroupPolicy

typedef GPB_ENUM(EventUpdateGroupPolicy_FieldNumber) {
  EventUpdateGroupPolicy_FieldNumber_Address = 1,
};

/**
 * EventUpdateGroupPolicy is an event emitted when a group policy is updated.
 **/
GPB_FINAL @interface EventUpdateGroupPolicy : GPBMessage

/** address is the account address of the group policy. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *address;

@end

#pragma mark - EventSubmitProposal

typedef GPB_ENUM(EventSubmitProposal_FieldNumber) {
  EventSubmitProposal_FieldNumber_ProposalId = 1,
};

/**
 * EventSubmitProposal is an event emitted when a proposal is created.
 **/
GPB_FINAL @interface EventSubmitProposal : GPBMessage

/** proposal_id is the unique ID of the proposal. */
@property(nonatomic, readwrite) uint64_t proposalId;

@end

#pragma mark - EventWithdrawProposal

typedef GPB_ENUM(EventWithdrawProposal_FieldNumber) {
  EventWithdrawProposal_FieldNumber_ProposalId = 1,
};

/**
 * EventWithdrawProposal is an event emitted when a proposal is withdrawn.
 **/
GPB_FINAL @interface EventWithdrawProposal : GPBMessage

/** proposal_id is the unique ID of the proposal. */
@property(nonatomic, readwrite) uint64_t proposalId;

@end

#pragma mark - EventVote

typedef GPB_ENUM(EventVote_FieldNumber) {
  EventVote_FieldNumber_ProposalId = 1,
};

/**
 * EventVote is an event emitted when a voter votes on a proposal.
 **/
GPB_FINAL @interface EventVote : GPBMessage

/** proposal_id is the unique ID of the proposal. */
@property(nonatomic, readwrite) uint64_t proposalId;

@end

#pragma mark - EventExec

typedef GPB_ENUM(EventExec_FieldNumber) {
  EventExec_FieldNumber_ProposalId = 1,
  EventExec_FieldNumber_Result = 2,
  EventExec_FieldNumber_Logs = 3,
};

/**
 * EventExec is an event emitted when a proposal is executed.
 **/
GPB_FINAL @interface EventExec : GPBMessage

/** proposal_id is the unique ID of the proposal. */
@property(nonatomic, readwrite) uint64_t proposalId;

/** result is the proposal execution result. */
@property(nonatomic, readwrite) ProposalExecutorResult result;

/** logs contains error logs in case the execution result is FAILURE. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *logs;

@end

/**
 * Fetches the raw value of a @c EventExec's @c result property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t EventExec_Result_RawValue(EventExec *message);
/**
 * Sets the raw value of an @c EventExec's @c result property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetEventExec_Result_RawValue(EventExec *message, int32_t value);

#pragma mark - EventLeaveGroup

typedef GPB_ENUM(EventLeaveGroup_FieldNumber) {
  EventLeaveGroup_FieldNumber_GroupId = 1,
  EventLeaveGroup_FieldNumber_Address = 2,
};

/**
 * EventLeaveGroup is an event emitted when group member leaves the group.
 **/
GPB_FINAL @interface EventLeaveGroup : GPBMessage

/** group_id is the unique ID of the group. */
@property(nonatomic, readwrite) uint64_t groupId;

/** address is the account address of the group member. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *address;

@end

#pragma mark - EventProposalPruned

typedef GPB_ENUM(EventProposalPruned_FieldNumber) {
  EventProposalPruned_FieldNumber_ProposalId = 1,
  EventProposalPruned_FieldNumber_Status = 2,
  EventProposalPruned_FieldNumber_TallyResult = 3,
};

/**
 * EventProposalPruned is an event emitted when a proposal is pruned.
 **/
GPB_FINAL @interface EventProposalPruned : GPBMessage

/** proposal_id is the unique ID of the proposal. */
@property(nonatomic, readwrite) uint64_t proposalId;

/** status is the proposal status (UNSPECIFIED, SUBMITTED, ACCEPTED, REJECTED, ABORTED, WITHDRAWN). */
@property(nonatomic, readwrite) ProposalStatus status;

/** tally_result is the proposal tally result (when applicable). */
@property(nonatomic, readwrite, strong, null_resettable) TallyResult *tallyResult;
/** Test to see if @c tallyResult has been set. */
@property(nonatomic, readwrite) BOOL hasTallyResult;

@end

/**
 * Fetches the raw value of a @c EventProposalPruned's @c status property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t EventProposalPruned_Status_RawValue(EventProposalPruned *message);
/**
 * Sets the raw value of an @c EventProposalPruned's @c status property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetEventProposalPruned_Status_RawValue(EventProposalPruned *message, int32_t value);

#pragma mark - EventTallyError

typedef GPB_ENUM(EventTallyError_FieldNumber) {
  EventTallyError_FieldNumber_ProposalId = 1,
  EventTallyError_FieldNumber_ErrorMessage = 2,
};

/**
 * EventTallyError is an event emitted when a proposal tally failed with an error.
 **/
GPB_FINAL @interface EventTallyError : GPBMessage

/** proposal_id is the unique ID of the proposal. */
@property(nonatomic, readwrite) uint64_t proposalId;

/** error_message is the raw error output */
@property(nonatomic, readwrite, copy, null_resettable) NSString *errorMessage;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
