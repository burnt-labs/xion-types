// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmos_proto/cosmos.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum ScalarType

typedef GPB_ENUM(ScalarType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  ScalarType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  ScalarType_ScalarTypeUnspecified = 0,
  ScalarType_ScalarTypeString = 1,
  ScalarType_ScalarTypeBytes = 2,
};

GPBEnumDescriptor *ScalarType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ScalarType_IsValidValue(int32_t value);

#pragma mark - CosmosRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface CosmosRoot : GPBRootObject
@end

#pragma mark - InterfaceDescriptor

typedef GPB_ENUM(InterfaceDescriptor_FieldNumber) {
  InterfaceDescriptor_FieldNumber_Name = 1,
  InterfaceDescriptor_FieldNumber_Description_p = 2,
};

/**
 * InterfaceDescriptor describes an interface type to be used with
 * accepts_interface and implements_interface and declared by declare_interface.
 **/
GPB_FINAL @interface InterfaceDescriptor : GPBMessage

/**
 * name is the name of the interface. It should be a short-name (without
 * a period) such that the fully qualified name of the interface will be
 * package.name, ex. for the package a.b and interface named C, the
 * fully-qualified name will be a.b.C.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/**
 * description is a human-readable description of the interface and its
 * purpose.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;

@end

#pragma mark - ScalarDescriptor

typedef GPB_ENUM(ScalarDescriptor_FieldNumber) {
  ScalarDescriptor_FieldNumber_Name = 1,
  ScalarDescriptor_FieldNumber_Description_p = 2,
  ScalarDescriptor_FieldNumber_FieldTypeArray = 3,
};

/**
 * ScalarDescriptor describes an scalar type to be used with
 * the scalar field option and declared by declare_scalar.
 * Scalars extend simple protobuf built-in types with additional
 * syntax and semantics, for instance to represent big integers.
 * Scalars should ideally define an encoding such that there is only one
 * valid syntactical representation for a given semantic meaning,
 * i.e. the encoding should be deterministic.
 **/
GPB_FINAL @interface ScalarDescriptor : GPBMessage

/**
 * name is the name of the scalar. It should be a short-name (without
 * a period) such that the fully qualified name of the scalar will be
 * package.name, ex. for the package a.b and scalar named C, the
 * fully-qualified name will be a.b.C.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/**
 * description is a human-readable description of the scalar and its
 * encoding format. For instance a big integer or decimal scalar should
 * specify precisely the expected encoding format.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;

/**
 * field_type is the type of field with which this scalar can be used.
 * Scalars can be used with one and only one type of field so that
 * encoding standards and simple and clear. Currently only string and
 * bytes fields are supported for scalars.
 **/
// |fieldTypeArray| contains |ScalarType|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *fieldTypeArray;
/** The number of items in @c fieldTypeArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger fieldTypeArray_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
