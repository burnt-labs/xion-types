// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmwasm/wasm/v1/ibc.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmwasm/wasm/v1/Ibc.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(MsgIBCCloseChannel);
GPBObjCClassDeclaration(MsgIBCSend);
GPBObjCClassDeclaration(MsgIBCSendResponse);
GPBObjCClassDeclaration(MsgIBCWriteAcknowledgementResponse);

#pragma mark - IbcRoot

@implementation IbcRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription IbcRoot_FileDescription = {
  .package = "cosmwasm.wasm.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - MsgIBCSend

@implementation MsgIBCSend

@dynamic channel;
@dynamic timeoutHeight;
@dynamic timeoutTimestamp;
@dynamic data_p;

typedef struct MsgIBCSend__storage_ {
  uint32_t _has_storage_[1];
  NSString *channel;
  NSData *data_p;
  uint64_t timeoutHeight;
  uint64_t timeoutTimestamp;
} MsgIBCSend__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channel",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgIBCSend_FieldNumber_Channel,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgIBCSend__storage_, channel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timeoutHeight",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgIBCSend_FieldNumber_TimeoutHeight,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgIBCSend__storage_, timeoutHeight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "timeoutTimestamp",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgIBCSend_FieldNumber_TimeoutTimestamp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgIBCSend__storage_, timeoutTimestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgIBCSend_FieldNumber_Data_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgIBCSend__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgIBCSend)
                                   messageName:@"MsgIBCSend"
                               fileDescription:&IbcRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgIBCSend__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgIBCSendResponse

@implementation MsgIBCSendResponse

@dynamic sequence;

typedef struct MsgIBCSendResponse__storage_ {
  uint32_t _has_storage_[1];
  uint64_t sequence;
} MsgIBCSendResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sequence",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgIBCSendResponse_FieldNumber_Sequence,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgIBCSendResponse__storage_, sequence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgIBCSendResponse)
                                   messageName:@"MsgIBCSendResponse"
                               fileDescription:&IbcRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgIBCSendResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgIBCWriteAcknowledgementResponse

@implementation MsgIBCWriteAcknowledgementResponse


typedef struct MsgIBCWriteAcknowledgementResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgIBCWriteAcknowledgementResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgIBCWriteAcknowledgementResponse)
                                   messageName:@"MsgIBCWriteAcknowledgementResponse"
                               fileDescription:&IbcRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgIBCWriteAcknowledgementResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgIBCCloseChannel

@implementation MsgIBCCloseChannel

@dynamic channel;

typedef struct MsgIBCCloseChannel__storage_ {
  uint32_t _has_storage_[1];
  NSString *channel;
} MsgIBCCloseChannel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channel",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgIBCCloseChannel_FieldNumber_Channel,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgIBCCloseChannel__storage_, channel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgIBCCloseChannel)
                                   messageName:@"MsgIBCCloseChannel"
                               fileDescription:&IbcRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgIBCCloseChannel__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
