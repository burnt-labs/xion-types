// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmwasm/wasm/v1/query.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmwasm/wasm/v1/Query.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(AccessConfig);
GPBObjCClassDeclaration(CodeInfoResponse);
GPBObjCClassDeclaration(ContractCodeHistoryEntry);
GPBObjCClassDeclaration(ContractInfo);
GPBObjCClassDeclaration(Model);
GPBObjCClassDeclaration(PageRequest);
GPBObjCClassDeclaration(PageResponse);
GPBObjCClassDeclaration(Params);
GPBObjCClassDeclaration(QueryAllContractStateRequest);
GPBObjCClassDeclaration(QueryAllContractStateResponse);
GPBObjCClassDeclaration(QueryBuildAddressRequest);
GPBObjCClassDeclaration(QueryBuildAddressResponse);
GPBObjCClassDeclaration(QueryCodeInfoRequest);
GPBObjCClassDeclaration(QueryCodeInfoResponse);
GPBObjCClassDeclaration(QueryCodeRequest);
GPBObjCClassDeclaration(QueryCodeResponse);
GPBObjCClassDeclaration(QueryCodesRequest);
GPBObjCClassDeclaration(QueryCodesResponse);
GPBObjCClassDeclaration(QueryContractHistoryRequest);
GPBObjCClassDeclaration(QueryContractHistoryResponse);
GPBObjCClassDeclaration(QueryContractInfoRequest);
GPBObjCClassDeclaration(QueryContractInfoResponse);
GPBObjCClassDeclaration(QueryContractsByCodeRequest);
GPBObjCClassDeclaration(QueryContractsByCodeResponse);
GPBObjCClassDeclaration(QueryContractsByCreatorRequest);
GPBObjCClassDeclaration(QueryContractsByCreatorResponse);
GPBObjCClassDeclaration(QueryParamsRequest);
GPBObjCClassDeclaration(QueryParamsResponse);
GPBObjCClassDeclaration(QueryPinnedCodesRequest);
GPBObjCClassDeclaration(QueryPinnedCodesResponse);
GPBObjCClassDeclaration(QueryRawContractStateRequest);
GPBObjCClassDeclaration(QueryRawContractStateResponse);
GPBObjCClassDeclaration(QuerySmartContractStateRequest);
GPBObjCClassDeclaration(QuerySmartContractStateResponse);
GPBObjCClassDeclaration(QueryWasmLimitsConfigRequest);
GPBObjCClassDeclaration(QueryWasmLimitsConfigResponse);

#pragma mark - QueryRoot

@implementation QueryRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription QueryRoot_FileDescription = {
  .package = "cosmwasm.wasm.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - QueryContractInfoRequest

@implementation QueryContractInfoRequest

@dynamic address;

typedef struct QueryContractInfoRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
} QueryContractInfoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryContractInfoRequest_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryContractInfoRequest__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryContractInfoRequest)
                                   messageName:@"QueryContractInfoRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryContractInfoRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryContractInfoResponse

@implementation QueryContractInfoResponse

@dynamic address;
@dynamic hasContractInfo, contractInfo;

typedef struct QueryContractInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
  ContractInfo *contractInfo;
} QueryContractInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryContractInfoResponse_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryContractInfoResponse__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contractInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(ContractInfo),
        .number = QueryContractInfoResponse_FieldNumber_ContractInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryContractInfoResponse__storage_, contractInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryContractInfoResponse)
                                   messageName:@"QueryContractInfoResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryContractInfoResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryContractHistoryRequest

@implementation QueryContractHistoryRequest

@dynamic address;
@dynamic hasPagination, pagination;

typedef struct QueryContractHistoryRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
  PageRequest *pagination;
} QueryContractHistoryRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryContractHistoryRequest_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryContractHistoryRequest__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageRequest),
        .number = QueryContractHistoryRequest_FieldNumber_Pagination,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryContractHistoryRequest__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryContractHistoryRequest)
                                   messageName:@"QueryContractHistoryRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryContractHistoryRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryContractHistoryResponse

@implementation QueryContractHistoryResponse

@dynamic entriesArray, entriesArray_Count;
@dynamic hasPagination, pagination;

typedef struct QueryContractHistoryResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *entriesArray;
  PageResponse *pagination;
} QueryContractHistoryResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "entriesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ContractCodeHistoryEntry),
        .number = QueryContractHistoryResponse_FieldNumber_EntriesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryContractHistoryResponse__storage_, entriesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageResponse),
        .number = QueryContractHistoryResponse_FieldNumber_Pagination,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryContractHistoryResponse__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryContractHistoryResponse)
                                   messageName:@"QueryContractHistoryResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryContractHistoryResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryContractsByCodeRequest

@implementation QueryContractsByCodeRequest

@dynamic codeId;
@dynamic hasPagination, pagination;

typedef struct QueryContractsByCodeRequest__storage_ {
  uint32_t _has_storage_[1];
  PageRequest *pagination;
  uint64_t codeId;
} QueryContractsByCodeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "codeId",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryContractsByCodeRequest_FieldNumber_CodeId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryContractsByCodeRequest__storage_, codeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageRequest),
        .number = QueryContractsByCodeRequest_FieldNumber_Pagination,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryContractsByCodeRequest__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryContractsByCodeRequest)
                                   messageName:@"QueryContractsByCodeRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryContractsByCodeRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryContractsByCodeResponse

@implementation QueryContractsByCodeResponse

@dynamic contractsArray, contractsArray_Count;
@dynamic hasPagination, pagination;

typedef struct QueryContractsByCodeResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *contractsArray;
  PageResponse *pagination;
} QueryContractsByCodeResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "contractsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryContractsByCodeResponse_FieldNumber_ContractsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryContractsByCodeResponse__storage_, contractsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageResponse),
        .number = QueryContractsByCodeResponse_FieldNumber_Pagination,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryContractsByCodeResponse__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryContractsByCodeResponse)
                                   messageName:@"QueryContractsByCodeResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryContractsByCodeResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryAllContractStateRequest

@implementation QueryAllContractStateRequest

@dynamic address;
@dynamic hasPagination, pagination;

typedef struct QueryAllContractStateRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
  PageRequest *pagination;
} QueryAllContractStateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryAllContractStateRequest_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryAllContractStateRequest__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageRequest),
        .number = QueryAllContractStateRequest_FieldNumber_Pagination,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryAllContractStateRequest__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryAllContractStateRequest)
                                   messageName:@"QueryAllContractStateRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryAllContractStateRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryAllContractStateResponse

@implementation QueryAllContractStateResponse

@dynamic modelsArray, modelsArray_Count;
@dynamic hasPagination, pagination;

typedef struct QueryAllContractStateResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *modelsArray;
  PageResponse *pagination;
} QueryAllContractStateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "modelsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Model),
        .number = QueryAllContractStateResponse_FieldNumber_ModelsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryAllContractStateResponse__storage_, modelsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageResponse),
        .number = QueryAllContractStateResponse_FieldNumber_Pagination,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryAllContractStateResponse__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryAllContractStateResponse)
                                   messageName:@"QueryAllContractStateResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryAllContractStateResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryRawContractStateRequest

@implementation QueryRawContractStateRequest

@dynamic address;
@dynamic queryData;

typedef struct QueryRawContractStateRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
  NSData *queryData;
} QueryRawContractStateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryRawContractStateRequest_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryRawContractStateRequest__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "queryData",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryRawContractStateRequest_FieldNumber_QueryData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryRawContractStateRequest__storage_, queryData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryRawContractStateRequest)
                                   messageName:@"QueryRawContractStateRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryRawContractStateRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryRawContractStateResponse

@implementation QueryRawContractStateResponse

@dynamic data_p;

typedef struct QueryRawContractStateResponse__storage_ {
  uint32_t _has_storage_[1];
  NSData *data_p;
} QueryRawContractStateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryRawContractStateResponse_FieldNumber_Data_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryRawContractStateResponse__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryRawContractStateResponse)
                                   messageName:@"QueryRawContractStateResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryRawContractStateResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QuerySmartContractStateRequest

@implementation QuerySmartContractStateRequest

@dynamic address;
@dynamic queryData;

typedef struct QuerySmartContractStateRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
  NSData *queryData;
} QuerySmartContractStateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = QuerySmartContractStateRequest_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QuerySmartContractStateRequest__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "queryData",
        .dataTypeSpecific.clazz = Nil,
        .number = QuerySmartContractStateRequest_FieldNumber_QueryData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QuerySmartContractStateRequest__storage_, queryData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QuerySmartContractStateRequest)
                                   messageName:@"QuerySmartContractStateRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QuerySmartContractStateRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QuerySmartContractStateResponse

@implementation QuerySmartContractStateResponse

@dynamic data_p;

typedef struct QuerySmartContractStateResponse__storage_ {
  uint32_t _has_storage_[1];
  NSData *data_p;
} QuerySmartContractStateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = QuerySmartContractStateResponse_FieldNumber_Data_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QuerySmartContractStateResponse__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QuerySmartContractStateResponse)
                                   messageName:@"QuerySmartContractStateResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QuerySmartContractStateResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryCodeRequest

@implementation QueryCodeRequest

@dynamic codeId;

typedef struct QueryCodeRequest__storage_ {
  uint32_t _has_storage_[1];
  uint64_t codeId;
} QueryCodeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "codeId",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryCodeRequest_FieldNumber_CodeId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryCodeRequest__storage_, codeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryCodeRequest)
                                   messageName:@"QueryCodeRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryCodeRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryCodeInfoRequest

@implementation QueryCodeInfoRequest

@dynamic codeId;

typedef struct QueryCodeInfoRequest__storage_ {
  uint32_t _has_storage_[1];
  uint64_t codeId;
} QueryCodeInfoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "codeId",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryCodeInfoRequest_FieldNumber_CodeId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryCodeInfoRequest__storage_, codeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryCodeInfoRequest)
                                   messageName:@"QueryCodeInfoRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryCodeInfoRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryCodeInfoResponse

@implementation QueryCodeInfoResponse

@dynamic codeId;
@dynamic creator;
@dynamic checksum;
@dynamic hasInstantiatePermission, instantiatePermission;

typedef struct QueryCodeInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *creator;
  NSData *checksum;
  AccessConfig *instantiatePermission;
  uint64_t codeId;
} QueryCodeInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "codeId",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryCodeInfoResponse_FieldNumber_CodeId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryCodeInfoResponse__storage_, codeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "creator",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryCodeInfoResponse_FieldNumber_Creator,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryCodeInfoResponse__storage_, creator),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "checksum",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryCodeInfoResponse_FieldNumber_Checksum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(QueryCodeInfoResponse__storage_, checksum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "instantiatePermission",
        .dataTypeSpecific.clazz = GPBObjCClass(AccessConfig),
        .number = QueryCodeInfoResponse_FieldNumber_InstantiatePermission,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(QueryCodeInfoResponse__storage_, instantiatePermission),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryCodeInfoResponse)
                                   messageName:@"QueryCodeInfoResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryCodeInfoResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CodeInfoResponse

@implementation CodeInfoResponse

@dynamic codeId;
@dynamic creator;
@dynamic dataHash;
@dynamic hasInstantiatePermission, instantiatePermission;

typedef struct CodeInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *creator;
  NSData *dataHash;
  AccessConfig *instantiatePermission;
  uint64_t codeId;
} CodeInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "codeId",
        .dataTypeSpecific.clazz = Nil,
        .number = CodeInfoResponse_FieldNumber_CodeId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CodeInfoResponse__storage_, codeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "creator",
        .dataTypeSpecific.clazz = Nil,
        .number = CodeInfoResponse_FieldNumber_Creator,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CodeInfoResponse__storage_, creator),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dataHash",
        .dataTypeSpecific.clazz = Nil,
        .number = CodeInfoResponse_FieldNumber_DataHash,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CodeInfoResponse__storage_, dataHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "instantiatePermission",
        .dataTypeSpecific.clazz = GPBObjCClass(AccessConfig),
        .number = CodeInfoResponse_FieldNumber_InstantiatePermission,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CodeInfoResponse__storage_, instantiatePermission),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(CodeInfoResponse)
                                   messageName:@"CodeInfoResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CodeInfoResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryCodeResponse

@implementation QueryCodeResponse

@dynamic hasCodeInfo, codeInfo;
@dynamic data_p;

typedef struct QueryCodeResponse__storage_ {
  uint32_t _has_storage_[1];
  CodeInfoResponse *codeInfo;
  NSData *data_p;
} QueryCodeResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "codeInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(CodeInfoResponse),
        .number = QueryCodeResponse_FieldNumber_CodeInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryCodeResponse__storage_, codeInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryCodeResponse_FieldNumber_Data_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryCodeResponse__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryCodeResponse)
                                   messageName:@"QueryCodeResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryCodeResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryCodesRequest

@implementation QueryCodesRequest

@dynamic hasPagination, pagination;

typedef struct QueryCodesRequest__storage_ {
  uint32_t _has_storage_[1];
  PageRequest *pagination;
} QueryCodesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageRequest),
        .number = QueryCodesRequest_FieldNumber_Pagination,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryCodesRequest__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryCodesRequest)
                                   messageName:@"QueryCodesRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryCodesRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryCodesResponse

@implementation QueryCodesResponse

@dynamic codeInfosArray, codeInfosArray_Count;
@dynamic hasPagination, pagination;

typedef struct QueryCodesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *codeInfosArray;
  PageResponse *pagination;
} QueryCodesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "codeInfosArray",
        .dataTypeSpecific.clazz = GPBObjCClass(CodeInfoResponse),
        .number = QueryCodesResponse_FieldNumber_CodeInfosArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryCodesResponse__storage_, codeInfosArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageResponse),
        .number = QueryCodesResponse_FieldNumber_Pagination,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryCodesResponse__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryCodesResponse)
                                   messageName:@"QueryCodesResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryCodesResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryPinnedCodesRequest

@implementation QueryPinnedCodesRequest

@dynamic hasPagination, pagination;

typedef struct QueryPinnedCodesRequest__storage_ {
  uint32_t _has_storage_[1];
  PageRequest *pagination;
} QueryPinnedCodesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageRequest),
        .number = QueryPinnedCodesRequest_FieldNumber_Pagination,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryPinnedCodesRequest__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryPinnedCodesRequest)
                                   messageName:@"QueryPinnedCodesRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryPinnedCodesRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryPinnedCodesResponse

@implementation QueryPinnedCodesResponse

@dynamic codeIdsArray, codeIdsArray_Count;
@dynamic hasPagination, pagination;

typedef struct QueryPinnedCodesResponse__storage_ {
  uint32_t _has_storage_[1];
  GPBUInt64Array *codeIdsArray;
  PageResponse *pagination;
} QueryPinnedCodesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "codeIdsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryPinnedCodesResponse_FieldNumber_CodeIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryPinnedCodesResponse__storage_, codeIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageResponse),
        .number = QueryPinnedCodesResponse_FieldNumber_Pagination,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryPinnedCodesResponse__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryPinnedCodesResponse)
                                   messageName:@"QueryPinnedCodesResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryPinnedCodesResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryParamsRequest

@implementation QueryParamsRequest


typedef struct QueryParamsRequest__storage_ {
  uint32_t _has_storage_[1];
} QueryParamsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryParamsRequest)
                                   messageName:@"QueryParamsRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(QueryParamsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryParamsResponse

@implementation QueryParamsResponse

@dynamic hasParams, params;

typedef struct QueryParamsResponse__storage_ {
  uint32_t _has_storage_[1];
  Params *params;
} QueryParamsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "params",
        .dataTypeSpecific.clazz = GPBObjCClass(Params),
        .number = QueryParamsResponse_FieldNumber_Params,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryParamsResponse__storage_, params),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryParamsResponse)
                                   messageName:@"QueryParamsResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryParamsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryContractsByCreatorRequest

@implementation QueryContractsByCreatorRequest

@dynamic creatorAddress;
@dynamic hasPagination, pagination;

typedef struct QueryContractsByCreatorRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *creatorAddress;
  PageRequest *pagination;
} QueryContractsByCreatorRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "creatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryContractsByCreatorRequest_FieldNumber_CreatorAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryContractsByCreatorRequest__storage_, creatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageRequest),
        .number = QueryContractsByCreatorRequest_FieldNumber_Pagination,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryContractsByCreatorRequest__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryContractsByCreatorRequest)
                                   messageName:@"QueryContractsByCreatorRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryContractsByCreatorRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryContractsByCreatorResponse

@implementation QueryContractsByCreatorResponse

@dynamic contractAddressesArray, contractAddressesArray_Count;
@dynamic hasPagination, pagination;

typedef struct QueryContractsByCreatorResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *contractAddressesArray;
  PageResponse *pagination;
} QueryContractsByCreatorResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "contractAddressesArray",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryContractsByCreatorResponse_FieldNumber_ContractAddressesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryContractsByCreatorResponse__storage_, contractAddressesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageResponse),
        .number = QueryContractsByCreatorResponse_FieldNumber_Pagination,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryContractsByCreatorResponse__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryContractsByCreatorResponse)
                                   messageName:@"QueryContractsByCreatorResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryContractsByCreatorResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryWasmLimitsConfigRequest

@implementation QueryWasmLimitsConfigRequest


typedef struct QueryWasmLimitsConfigRequest__storage_ {
  uint32_t _has_storage_[1];
} QueryWasmLimitsConfigRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryWasmLimitsConfigRequest)
                                   messageName:@"QueryWasmLimitsConfigRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(QueryWasmLimitsConfigRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryWasmLimitsConfigResponse

@implementation QueryWasmLimitsConfigResponse

@dynamic config;

typedef struct QueryWasmLimitsConfigResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *config;
} QueryWasmLimitsConfigResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "config",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryWasmLimitsConfigResponse_FieldNumber_Config,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryWasmLimitsConfigResponse__storage_, config),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryWasmLimitsConfigResponse)
                                   messageName:@"QueryWasmLimitsConfigResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryWasmLimitsConfigResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryBuildAddressRequest

@implementation QueryBuildAddressRequest

@dynamic codeHash;
@dynamic creatorAddress;
@dynamic salt;
@dynamic initArgs;

typedef struct QueryBuildAddressRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *codeHash;
  NSString *creatorAddress;
  NSString *salt;
  NSData *initArgs;
} QueryBuildAddressRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "codeHash",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryBuildAddressRequest_FieldNumber_CodeHash,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryBuildAddressRequest__storage_, codeHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "creatorAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryBuildAddressRequest_FieldNumber_CreatorAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryBuildAddressRequest__storage_, creatorAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "salt",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryBuildAddressRequest_FieldNumber_Salt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(QueryBuildAddressRequest__storage_, salt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "initArgs",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryBuildAddressRequest_FieldNumber_InitArgs,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(QueryBuildAddressRequest__storage_, initArgs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryBuildAddressRequest)
                                   messageName:@"QueryBuildAddressRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryBuildAddressRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryBuildAddressResponse

@implementation QueryBuildAddressResponse

@dynamic address;

typedef struct QueryBuildAddressResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
} QueryBuildAddressResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryBuildAddressResponse_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryBuildAddressResponse__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryBuildAddressResponse)
                                   messageName:@"QueryBuildAddressResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryBuildAddressResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
