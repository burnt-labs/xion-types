// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmwasm/wasm/v1/tx.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmwasm/wasm/v1/Tx.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(AccessConfig);
GPBObjCClassDeclaration(Coin);
GPBObjCClassDeclaration(MsgAddCodeUploadParamsAddresses);
GPBObjCClassDeclaration(MsgAddCodeUploadParamsAddressesResponse);
GPBObjCClassDeclaration(MsgClearAdmin);
GPBObjCClassDeclaration(MsgClearAdminResponse);
GPBObjCClassDeclaration(MsgExecuteContract);
GPBObjCClassDeclaration(MsgExecuteContractResponse);
GPBObjCClassDeclaration(MsgInstantiateContract);
GPBObjCClassDeclaration(MsgInstantiateContract2);
GPBObjCClassDeclaration(MsgInstantiateContract2Response);
GPBObjCClassDeclaration(MsgInstantiateContractResponse);
GPBObjCClassDeclaration(MsgMigrateContract);
GPBObjCClassDeclaration(MsgMigrateContractResponse);
GPBObjCClassDeclaration(MsgPinCodes);
GPBObjCClassDeclaration(MsgPinCodesResponse);
GPBObjCClassDeclaration(MsgRemoveCodeUploadParamsAddresses);
GPBObjCClassDeclaration(MsgRemoveCodeUploadParamsAddressesResponse);
GPBObjCClassDeclaration(MsgStoreAndInstantiateContract);
GPBObjCClassDeclaration(MsgStoreAndInstantiateContractResponse);
GPBObjCClassDeclaration(MsgStoreAndMigrateContract);
GPBObjCClassDeclaration(MsgStoreAndMigrateContractResponse);
GPBObjCClassDeclaration(MsgStoreCode);
GPBObjCClassDeclaration(MsgStoreCodeResponse);
GPBObjCClassDeclaration(MsgSudoContract);
GPBObjCClassDeclaration(MsgSudoContractResponse);
GPBObjCClassDeclaration(MsgUnpinCodes);
GPBObjCClassDeclaration(MsgUnpinCodesResponse);
GPBObjCClassDeclaration(MsgUpdateAdmin);
GPBObjCClassDeclaration(MsgUpdateAdminResponse);
GPBObjCClassDeclaration(MsgUpdateContractLabel);
GPBObjCClassDeclaration(MsgUpdateContractLabelResponse);
GPBObjCClassDeclaration(MsgUpdateInstantiateConfig);
GPBObjCClassDeclaration(MsgUpdateInstantiateConfigResponse);
GPBObjCClassDeclaration(MsgUpdateParams);
GPBObjCClassDeclaration(MsgUpdateParamsResponse);
GPBObjCClassDeclaration(Params);

#pragma mark - TxRoot

@implementation TxRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription TxRoot_FileDescription = {
  .package = "cosmwasm.wasm.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - MsgStoreCode

@implementation MsgStoreCode

@dynamic sender;
@dynamic wasmByteCode;
@dynamic hasInstantiatePermission, instantiatePermission;

typedef struct MsgStoreCode__storage_ {
  uint32_t _has_storage_[1];
  NSString *sender;
  NSData *wasmByteCode;
  AccessConfig *instantiatePermission;
} MsgStoreCode__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sender",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgStoreCode_FieldNumber_Sender,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgStoreCode__storage_, sender),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wasmByteCode",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgStoreCode_FieldNumber_WasmByteCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgStoreCode__storage_, wasmByteCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "instantiatePermission",
        .dataTypeSpecific.clazz = GPBObjCClass(AccessConfig),
        .number = MsgStoreCode_FieldNumber_InstantiatePermission,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgStoreCode__storage_, instantiatePermission),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgStoreCode)
                                   messageName:@"MsgStoreCode"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgStoreCode__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgStoreCodeResponse

@implementation MsgStoreCodeResponse

@dynamic codeId;
@dynamic checksum;

typedef struct MsgStoreCodeResponse__storage_ {
  uint32_t _has_storage_[1];
  NSData *checksum;
  uint64_t codeId;
} MsgStoreCodeResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "codeId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgStoreCodeResponse_FieldNumber_CodeId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgStoreCodeResponse__storage_, codeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "checksum",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgStoreCodeResponse_FieldNumber_Checksum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgStoreCodeResponse__storage_, checksum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgStoreCodeResponse)
                                   messageName:@"MsgStoreCodeResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgStoreCodeResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgInstantiateContract

@implementation MsgInstantiateContract

@dynamic sender;
@dynamic admin;
@dynamic codeId;
@dynamic label;
@dynamic msg;
@dynamic fundsArray, fundsArray_Count;

typedef struct MsgInstantiateContract__storage_ {
  uint32_t _has_storage_[1];
  NSString *sender;
  NSString *admin;
  NSString *label;
  NSData *msg;
  NSMutableArray *fundsArray;
  uint64_t codeId;
} MsgInstantiateContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sender",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgInstantiateContract_FieldNumber_Sender,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgInstantiateContract__storage_, sender),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "admin",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgInstantiateContract_FieldNumber_Admin,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgInstantiateContract__storage_, admin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "codeId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgInstantiateContract_FieldNumber_CodeId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgInstantiateContract__storage_, codeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "label",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgInstantiateContract_FieldNumber_Label,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgInstantiateContract__storage_, label),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgInstantiateContract_FieldNumber_Msg,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MsgInstantiateContract__storage_, msg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "fundsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = MsgInstantiateContract_FieldNumber_FundsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MsgInstantiateContract__storage_, fundsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgInstantiateContract)
                                   messageName:@"MsgInstantiateContract"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgInstantiateContract__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgInstantiateContractResponse

@implementation MsgInstantiateContractResponse

@dynamic address;
@dynamic data_p;

typedef struct MsgInstantiateContractResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
  NSData *data_p;
} MsgInstantiateContractResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgInstantiateContractResponse_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgInstantiateContractResponse__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgInstantiateContractResponse_FieldNumber_Data_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgInstantiateContractResponse__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgInstantiateContractResponse)
                                   messageName:@"MsgInstantiateContractResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgInstantiateContractResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgInstantiateContract2

@implementation MsgInstantiateContract2

@dynamic sender;
@dynamic admin;
@dynamic codeId;
@dynamic label;
@dynamic msg;
@dynamic fundsArray, fundsArray_Count;
@dynamic salt;
@dynamic fixMsg;

typedef struct MsgInstantiateContract2__storage_ {
  uint32_t _has_storage_[1];
  NSString *sender;
  NSString *admin;
  NSString *label;
  NSData *msg;
  NSMutableArray *fundsArray;
  NSData *salt;
  uint64_t codeId;
} MsgInstantiateContract2__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sender",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgInstantiateContract2_FieldNumber_Sender,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgInstantiateContract2__storage_, sender),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "admin",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgInstantiateContract2_FieldNumber_Admin,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgInstantiateContract2__storage_, admin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "codeId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgInstantiateContract2_FieldNumber_CodeId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgInstantiateContract2__storage_, codeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "label",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgInstantiateContract2_FieldNumber_Label,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgInstantiateContract2__storage_, label),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgInstantiateContract2_FieldNumber_Msg,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MsgInstantiateContract2__storage_, msg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "fundsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = MsgInstantiateContract2_FieldNumber_FundsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MsgInstantiateContract2__storage_, fundsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "salt",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgInstantiateContract2_FieldNumber_Salt,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MsgInstantiateContract2__storage_, salt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "fixMsg",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgInstantiateContract2_FieldNumber_FixMsg,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgInstantiateContract2)
                                   messageName:@"MsgInstantiateContract2"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgInstantiateContract2__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgInstantiateContract2Response

@implementation MsgInstantiateContract2Response

@dynamic address;
@dynamic data_p;

typedef struct MsgInstantiateContract2Response__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
  NSData *data_p;
} MsgInstantiateContract2Response__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgInstantiateContract2Response_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgInstantiateContract2Response__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgInstantiateContract2Response_FieldNumber_Data_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgInstantiateContract2Response__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgInstantiateContract2Response)
                                   messageName:@"MsgInstantiateContract2Response"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgInstantiateContract2Response__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgExecuteContract

@implementation MsgExecuteContract

@dynamic sender;
@dynamic contract;
@dynamic msg;
@dynamic fundsArray, fundsArray_Count;

typedef struct MsgExecuteContract__storage_ {
  uint32_t _has_storage_[1];
  NSString *sender;
  NSString *contract;
  NSData *msg;
  NSMutableArray *fundsArray;
} MsgExecuteContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sender",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgExecuteContract_FieldNumber_Sender,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgExecuteContract__storage_, sender),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contract",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgExecuteContract_FieldNumber_Contract,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgExecuteContract__storage_, contract),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgExecuteContract_FieldNumber_Msg,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgExecuteContract__storage_, msg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "fundsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = MsgExecuteContract_FieldNumber_FundsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MsgExecuteContract__storage_, fundsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgExecuteContract)
                                   messageName:@"MsgExecuteContract"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgExecuteContract__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgExecuteContractResponse

@implementation MsgExecuteContractResponse

@dynamic data_p;

typedef struct MsgExecuteContractResponse__storage_ {
  uint32_t _has_storage_[1];
  NSData *data_p;
} MsgExecuteContractResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgExecuteContractResponse_FieldNumber_Data_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgExecuteContractResponse__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgExecuteContractResponse)
                                   messageName:@"MsgExecuteContractResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgExecuteContractResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgMigrateContract

@implementation MsgMigrateContract

@dynamic sender;
@dynamic contract;
@dynamic codeId;
@dynamic msg;

typedef struct MsgMigrateContract__storage_ {
  uint32_t _has_storage_[1];
  NSString *sender;
  NSString *contract;
  NSData *msg;
  uint64_t codeId;
} MsgMigrateContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sender",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgMigrateContract_FieldNumber_Sender,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgMigrateContract__storage_, sender),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contract",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgMigrateContract_FieldNumber_Contract,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgMigrateContract__storage_, contract),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "codeId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgMigrateContract_FieldNumber_CodeId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgMigrateContract__storage_, codeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgMigrateContract_FieldNumber_Msg,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgMigrateContract__storage_, msg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgMigrateContract)
                                   messageName:@"MsgMigrateContract"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgMigrateContract__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgMigrateContractResponse

@implementation MsgMigrateContractResponse

@dynamic data_p;

typedef struct MsgMigrateContractResponse__storage_ {
  uint32_t _has_storage_[1];
  NSData *data_p;
} MsgMigrateContractResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgMigrateContractResponse_FieldNumber_Data_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgMigrateContractResponse__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgMigrateContractResponse)
                                   messageName:@"MsgMigrateContractResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgMigrateContractResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateAdmin

@implementation MsgUpdateAdmin

@dynamic sender;
@dynamic newAdmin;
@dynamic contract;

typedef struct MsgUpdateAdmin__storage_ {
  uint32_t _has_storage_[1];
  NSString *sender;
  NSString *newAdmin;
  NSString *contract;
} MsgUpdateAdmin__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sender",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateAdmin_FieldNumber_Sender,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgUpdateAdmin__storage_, sender),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "newAdmin",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateAdmin_FieldNumber_NewAdmin,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgUpdateAdmin__storage_, newAdmin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contract",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateAdmin_FieldNumber_Contract,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgUpdateAdmin__storage_, contract),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateAdmin)
                                   messageName:@"MsgUpdateAdmin"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgUpdateAdmin__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateAdminResponse

@implementation MsgUpdateAdminResponse


typedef struct MsgUpdateAdminResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgUpdateAdminResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateAdminResponse)
                                   messageName:@"MsgUpdateAdminResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgUpdateAdminResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgClearAdmin

@implementation MsgClearAdmin

@dynamic sender;
@dynamic contract;

typedef struct MsgClearAdmin__storage_ {
  uint32_t _has_storage_[1];
  NSString *sender;
  NSString *contract;
} MsgClearAdmin__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sender",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgClearAdmin_FieldNumber_Sender,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgClearAdmin__storage_, sender),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contract",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgClearAdmin_FieldNumber_Contract,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgClearAdmin__storage_, contract),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgClearAdmin)
                                   messageName:@"MsgClearAdmin"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgClearAdmin__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgClearAdminResponse

@implementation MsgClearAdminResponse


typedef struct MsgClearAdminResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgClearAdminResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgClearAdminResponse)
                                   messageName:@"MsgClearAdminResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgClearAdminResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateInstantiateConfig

@implementation MsgUpdateInstantiateConfig

@dynamic sender;
@dynamic codeId;
@dynamic hasNewInstantiatePermission, newInstantiatePermission;

typedef struct MsgUpdateInstantiateConfig__storage_ {
  uint32_t _has_storage_[1];
  NSString *sender;
  AccessConfig *newInstantiatePermission;
  uint64_t codeId;
} MsgUpdateInstantiateConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sender",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateInstantiateConfig_FieldNumber_Sender,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgUpdateInstantiateConfig__storage_, sender),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "codeId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateInstantiateConfig_FieldNumber_CodeId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgUpdateInstantiateConfig__storage_, codeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "newInstantiatePermission",
        .dataTypeSpecific.clazz = GPBObjCClass(AccessConfig),
        .number = MsgUpdateInstantiateConfig_FieldNumber_NewInstantiatePermission,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgUpdateInstantiateConfig__storage_, newInstantiatePermission),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateInstantiateConfig)
                                   messageName:@"MsgUpdateInstantiateConfig"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgUpdateInstantiateConfig__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateInstantiateConfigResponse

@implementation MsgUpdateInstantiateConfigResponse


typedef struct MsgUpdateInstantiateConfigResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgUpdateInstantiateConfigResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateInstantiateConfigResponse)
                                   messageName:@"MsgUpdateInstantiateConfigResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgUpdateInstantiateConfigResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateParams

@implementation MsgUpdateParams

@dynamic authority;
@dynamic hasParams, params;

typedef struct MsgUpdateParams__storage_ {
  uint32_t _has_storage_[1];
  NSString *authority;
  Params *params;
} MsgUpdateParams__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authority",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateParams_FieldNumber_Authority,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgUpdateParams__storage_, authority),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "params",
        .dataTypeSpecific.clazz = GPBObjCClass(Params),
        .number = MsgUpdateParams_FieldNumber_Params,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgUpdateParams__storage_, params),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateParams)
                                   messageName:@"MsgUpdateParams"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgUpdateParams__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateParamsResponse

@implementation MsgUpdateParamsResponse


typedef struct MsgUpdateParamsResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgUpdateParamsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateParamsResponse)
                                   messageName:@"MsgUpdateParamsResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgUpdateParamsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgSudoContract

@implementation MsgSudoContract

@dynamic authority;
@dynamic contract;
@dynamic msg;

typedef struct MsgSudoContract__storage_ {
  uint32_t _has_storage_[1];
  NSString *authority;
  NSString *contract;
  NSData *msg;
} MsgSudoContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authority",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSudoContract_FieldNumber_Authority,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgSudoContract__storage_, authority),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contract",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSudoContract_FieldNumber_Contract,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgSudoContract__storage_, contract),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSudoContract_FieldNumber_Msg,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgSudoContract__storage_, msg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgSudoContract)
                                   messageName:@"MsgSudoContract"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgSudoContract__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgSudoContractResponse

@implementation MsgSudoContractResponse

@dynamic data_p;

typedef struct MsgSudoContractResponse__storage_ {
  uint32_t _has_storage_[1];
  NSData *data_p;
} MsgSudoContractResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSudoContractResponse_FieldNumber_Data_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgSudoContractResponse__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgSudoContractResponse)
                                   messageName:@"MsgSudoContractResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgSudoContractResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgPinCodes

@implementation MsgPinCodes

@dynamic authority;
@dynamic codeIdsArray, codeIdsArray_Count;

typedef struct MsgPinCodes__storage_ {
  uint32_t _has_storage_[1];
  NSString *authority;
  GPBUInt64Array *codeIdsArray;
} MsgPinCodes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authority",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgPinCodes_FieldNumber_Authority,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgPinCodes__storage_, authority),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "codeIdsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgPinCodes_FieldNumber_CodeIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MsgPinCodes__storage_, codeIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgPinCodes)
                                   messageName:@"MsgPinCodes"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgPinCodes__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgPinCodesResponse

@implementation MsgPinCodesResponse


typedef struct MsgPinCodesResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgPinCodesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgPinCodesResponse)
                                   messageName:@"MsgPinCodesResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgPinCodesResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUnpinCodes

@implementation MsgUnpinCodes

@dynamic authority;
@dynamic codeIdsArray, codeIdsArray_Count;

typedef struct MsgUnpinCodes__storage_ {
  uint32_t _has_storage_[1];
  NSString *authority;
  GPBUInt64Array *codeIdsArray;
} MsgUnpinCodes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authority",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUnpinCodes_FieldNumber_Authority,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgUnpinCodes__storage_, authority),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "codeIdsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUnpinCodes_FieldNumber_CodeIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MsgUnpinCodes__storage_, codeIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUnpinCodes)
                                   messageName:@"MsgUnpinCodes"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgUnpinCodes__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUnpinCodesResponse

@implementation MsgUnpinCodesResponse


typedef struct MsgUnpinCodesResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgUnpinCodesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUnpinCodesResponse)
                                   messageName:@"MsgUnpinCodesResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgUnpinCodesResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgStoreAndInstantiateContract

@implementation MsgStoreAndInstantiateContract

@dynamic authority;
@dynamic wasmByteCode;
@dynamic hasInstantiatePermission, instantiatePermission;
@dynamic unpinCode;
@dynamic admin;
@dynamic label;
@dynamic msg;
@dynamic fundsArray, fundsArray_Count;
@dynamic source;
@dynamic builder;
@dynamic codeHash;

typedef struct MsgStoreAndInstantiateContract__storage_ {
  uint32_t _has_storage_[1];
  NSString *authority;
  NSData *wasmByteCode;
  AccessConfig *instantiatePermission;
  NSString *admin;
  NSString *label;
  NSData *msg;
  NSMutableArray *fundsArray;
  NSString *source;
  NSString *builder;
  NSData *codeHash;
} MsgStoreAndInstantiateContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authority",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgStoreAndInstantiateContract_FieldNumber_Authority,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgStoreAndInstantiateContract__storage_, authority),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wasmByteCode",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgStoreAndInstantiateContract_FieldNumber_WasmByteCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgStoreAndInstantiateContract__storage_, wasmByteCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "instantiatePermission",
        .dataTypeSpecific.clazz = GPBObjCClass(AccessConfig),
        .number = MsgStoreAndInstantiateContract_FieldNumber_InstantiatePermission,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgStoreAndInstantiateContract__storage_, instantiatePermission),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "unpinCode",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgStoreAndInstantiateContract_FieldNumber_UnpinCode,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "admin",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgStoreAndInstantiateContract_FieldNumber_Admin,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MsgStoreAndInstantiateContract__storage_, admin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "label",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgStoreAndInstantiateContract_FieldNumber_Label,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(MsgStoreAndInstantiateContract__storage_, label),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgStoreAndInstantiateContract_FieldNumber_Msg,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(MsgStoreAndInstantiateContract__storage_, msg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "fundsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = MsgStoreAndInstantiateContract_FieldNumber_FundsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MsgStoreAndInstantiateContract__storage_, fundsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "source",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgStoreAndInstantiateContract_FieldNumber_Source,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(MsgStoreAndInstantiateContract__storage_, source),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "builder",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgStoreAndInstantiateContract_FieldNumber_Builder,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(MsgStoreAndInstantiateContract__storage_, builder),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "codeHash",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgStoreAndInstantiateContract_FieldNumber_CodeHash,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(MsgStoreAndInstantiateContract__storage_, codeHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgStoreAndInstantiateContract)
                                   messageName:@"MsgStoreAndInstantiateContract"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgStoreAndInstantiateContract__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgStoreAndInstantiateContractResponse

@implementation MsgStoreAndInstantiateContractResponse

@dynamic address;
@dynamic data_p;

typedef struct MsgStoreAndInstantiateContractResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
  NSData *data_p;
} MsgStoreAndInstantiateContractResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgStoreAndInstantiateContractResponse_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgStoreAndInstantiateContractResponse__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgStoreAndInstantiateContractResponse_FieldNumber_Data_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgStoreAndInstantiateContractResponse__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgStoreAndInstantiateContractResponse)
                                   messageName:@"MsgStoreAndInstantiateContractResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgStoreAndInstantiateContractResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgAddCodeUploadParamsAddresses

@implementation MsgAddCodeUploadParamsAddresses

@dynamic authority;
@dynamic addressesArray, addressesArray_Count;

typedef struct MsgAddCodeUploadParamsAddresses__storage_ {
  uint32_t _has_storage_[1];
  NSString *authority;
  NSMutableArray *addressesArray;
} MsgAddCodeUploadParamsAddresses__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authority",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgAddCodeUploadParamsAddresses_FieldNumber_Authority,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgAddCodeUploadParamsAddresses__storage_, authority),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "addressesArray",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgAddCodeUploadParamsAddresses_FieldNumber_AddressesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MsgAddCodeUploadParamsAddresses__storage_, addressesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgAddCodeUploadParamsAddresses)
                                   messageName:@"MsgAddCodeUploadParamsAddresses"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgAddCodeUploadParamsAddresses__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgAddCodeUploadParamsAddressesResponse

@implementation MsgAddCodeUploadParamsAddressesResponse


typedef struct MsgAddCodeUploadParamsAddressesResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgAddCodeUploadParamsAddressesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgAddCodeUploadParamsAddressesResponse)
                                   messageName:@"MsgAddCodeUploadParamsAddressesResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgAddCodeUploadParamsAddressesResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgRemoveCodeUploadParamsAddresses

@implementation MsgRemoveCodeUploadParamsAddresses

@dynamic authority;
@dynamic addressesArray, addressesArray_Count;

typedef struct MsgRemoveCodeUploadParamsAddresses__storage_ {
  uint32_t _has_storage_[1];
  NSString *authority;
  NSMutableArray *addressesArray;
} MsgRemoveCodeUploadParamsAddresses__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authority",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgRemoveCodeUploadParamsAddresses_FieldNumber_Authority,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgRemoveCodeUploadParamsAddresses__storage_, authority),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "addressesArray",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgRemoveCodeUploadParamsAddresses_FieldNumber_AddressesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MsgRemoveCodeUploadParamsAddresses__storage_, addressesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgRemoveCodeUploadParamsAddresses)
                                   messageName:@"MsgRemoveCodeUploadParamsAddresses"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgRemoveCodeUploadParamsAddresses__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgRemoveCodeUploadParamsAddressesResponse

@implementation MsgRemoveCodeUploadParamsAddressesResponse


typedef struct MsgRemoveCodeUploadParamsAddressesResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgRemoveCodeUploadParamsAddressesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgRemoveCodeUploadParamsAddressesResponse)
                                   messageName:@"MsgRemoveCodeUploadParamsAddressesResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgRemoveCodeUploadParamsAddressesResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgStoreAndMigrateContract

@implementation MsgStoreAndMigrateContract

@dynamic authority;
@dynamic wasmByteCode;
@dynamic hasInstantiatePermission, instantiatePermission;
@dynamic contract;
@dynamic msg;

typedef struct MsgStoreAndMigrateContract__storage_ {
  uint32_t _has_storage_[1];
  NSString *authority;
  NSData *wasmByteCode;
  AccessConfig *instantiatePermission;
  NSString *contract;
  NSData *msg;
} MsgStoreAndMigrateContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authority",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgStoreAndMigrateContract_FieldNumber_Authority,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgStoreAndMigrateContract__storage_, authority),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wasmByteCode",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgStoreAndMigrateContract_FieldNumber_WasmByteCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgStoreAndMigrateContract__storage_, wasmByteCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "instantiatePermission",
        .dataTypeSpecific.clazz = GPBObjCClass(AccessConfig),
        .number = MsgStoreAndMigrateContract_FieldNumber_InstantiatePermission,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgStoreAndMigrateContract__storage_, instantiatePermission),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "contract",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgStoreAndMigrateContract_FieldNumber_Contract,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgStoreAndMigrateContract__storage_, contract),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msg",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgStoreAndMigrateContract_FieldNumber_Msg,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MsgStoreAndMigrateContract__storage_, msg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgStoreAndMigrateContract)
                                   messageName:@"MsgStoreAndMigrateContract"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgStoreAndMigrateContract__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgStoreAndMigrateContractResponse

@implementation MsgStoreAndMigrateContractResponse

@dynamic codeId;
@dynamic checksum;
@dynamic data_p;

typedef struct MsgStoreAndMigrateContractResponse__storage_ {
  uint32_t _has_storage_[1];
  NSData *checksum;
  NSData *data_p;
  uint64_t codeId;
} MsgStoreAndMigrateContractResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "codeId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgStoreAndMigrateContractResponse_FieldNumber_CodeId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgStoreAndMigrateContractResponse__storage_, codeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "checksum",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgStoreAndMigrateContractResponse_FieldNumber_Checksum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgStoreAndMigrateContractResponse__storage_, checksum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgStoreAndMigrateContractResponse_FieldNumber_Data_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgStoreAndMigrateContractResponse__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgStoreAndMigrateContractResponse)
                                   messageName:@"MsgStoreAndMigrateContractResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgStoreAndMigrateContractResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateContractLabel

@implementation MsgUpdateContractLabel

@dynamic sender;
@dynamic newLabel;
@dynamic contract;

typedef struct MsgUpdateContractLabel__storage_ {
  uint32_t _has_storage_[1];
  NSString *sender;
  NSString *newLabel;
  NSString *contract;
} MsgUpdateContractLabel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sender",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateContractLabel_FieldNumber_Sender,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgUpdateContractLabel__storage_, sender),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "newLabel",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateContractLabel_FieldNumber_NewLabel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgUpdateContractLabel__storage_, newLabel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contract",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateContractLabel_FieldNumber_Contract,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgUpdateContractLabel__storage_, contract),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateContractLabel)
                                   messageName:@"MsgUpdateContractLabel"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgUpdateContractLabel__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateContractLabelResponse

@implementation MsgUpdateContractLabelResponse


typedef struct MsgUpdateContractLabelResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgUpdateContractLabelResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateContractLabelResponse)
                                   messageName:@"MsgUpdateContractLabelResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgUpdateContractLabelResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
