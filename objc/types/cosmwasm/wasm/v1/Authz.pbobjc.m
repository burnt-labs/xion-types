// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: cosmwasm/wasm/v1/authz.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmwasm/wasm/v1/Authz.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(AcceptedMessageKeysFilter);
GPBObjCClassDeclaration(AcceptedMessagesFilter);
GPBObjCClassDeclaration(AccessConfig);
GPBObjCClassDeclaration(AllowAllMessagesFilter);
GPBObjCClassDeclaration(CodeGrant);
GPBObjCClassDeclaration(Coin);
GPBObjCClassDeclaration(CombinedLimit);
GPBObjCClassDeclaration(ContractExecutionAuthorization);
GPBObjCClassDeclaration(ContractGrant);
GPBObjCClassDeclaration(ContractMigrationAuthorization);
GPBObjCClassDeclaration(GPBAny);
GPBObjCClassDeclaration(MaxCallsLimit);
GPBObjCClassDeclaration(MaxFundsLimit);
GPBObjCClassDeclaration(StoreCodeAuthorization);

#pragma mark - AuthzRoot

@implementation AuthzRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription AuthzRoot_FileDescription = {
  .package = "cosmwasm.wasm.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - StoreCodeAuthorization

@implementation StoreCodeAuthorization

@dynamic grantsArray, grantsArray_Count;

typedef struct StoreCodeAuthorization__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *grantsArray;
} StoreCodeAuthorization__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "grantsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(CodeGrant),
        .number = StoreCodeAuthorization_FieldNumber_GrantsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(StoreCodeAuthorization__storage_, grantsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(StoreCodeAuthorization)
                                   messageName:@"StoreCodeAuthorization"
                               fileDescription:&AuthzRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StoreCodeAuthorization__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ContractExecutionAuthorization

@implementation ContractExecutionAuthorization

@dynamic grantsArray, grantsArray_Count;

typedef struct ContractExecutionAuthorization__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *grantsArray;
} ContractExecutionAuthorization__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "grantsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ContractGrant),
        .number = ContractExecutionAuthorization_FieldNumber_GrantsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ContractExecutionAuthorization__storage_, grantsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ContractExecutionAuthorization)
                                   messageName:@"ContractExecutionAuthorization"
                               fileDescription:&AuthzRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ContractExecutionAuthorization__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ContractMigrationAuthorization

@implementation ContractMigrationAuthorization

@dynamic grantsArray, grantsArray_Count;

typedef struct ContractMigrationAuthorization__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *grantsArray;
} ContractMigrationAuthorization__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "grantsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ContractGrant),
        .number = ContractMigrationAuthorization_FieldNumber_GrantsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ContractMigrationAuthorization__storage_, grantsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ContractMigrationAuthorization)
                                   messageName:@"ContractMigrationAuthorization"
                               fileDescription:&AuthzRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ContractMigrationAuthorization__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CodeGrant

@implementation CodeGrant

@dynamic codeHash;
@dynamic hasInstantiatePermission, instantiatePermission;

typedef struct CodeGrant__storage_ {
  uint32_t _has_storage_[1];
  NSData *codeHash;
  AccessConfig *instantiatePermission;
} CodeGrant__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "codeHash",
        .dataTypeSpecific.clazz = Nil,
        .number = CodeGrant_FieldNumber_CodeHash,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CodeGrant__storage_, codeHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "instantiatePermission",
        .dataTypeSpecific.clazz = GPBObjCClass(AccessConfig),
        .number = CodeGrant_FieldNumber_InstantiatePermission,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CodeGrant__storage_, instantiatePermission),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(CodeGrant)
                                   messageName:@"CodeGrant"
                               fileDescription:&AuthzRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CodeGrant__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ContractGrant

@implementation ContractGrant

@dynamic contract;
@dynamic hasLimit, limit;
@dynamic hasFilter, filter;

typedef struct ContractGrant__storage_ {
  uint32_t _has_storage_[1];
  NSString *contract;
  GPBAny *limit;
  GPBAny *filter;
} ContractGrant__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "contract",
        .dataTypeSpecific.clazz = Nil,
        .number = ContractGrant_FieldNumber_Contract,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ContractGrant__storage_, contract),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "limit",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = ContractGrant_FieldNumber_Limit,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ContractGrant__storage_, limit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "filter",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = ContractGrant_FieldNumber_Filter,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ContractGrant__storage_, filter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ContractGrant)
                                   messageName:@"ContractGrant"
                               fileDescription:&AuthzRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ContractGrant__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MaxCallsLimit

@implementation MaxCallsLimit

@dynamic remaining;

typedef struct MaxCallsLimit__storage_ {
  uint32_t _has_storage_[1];
  uint64_t remaining;
} MaxCallsLimit__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "remaining",
        .dataTypeSpecific.clazz = Nil,
        .number = MaxCallsLimit_FieldNumber_Remaining,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MaxCallsLimit__storage_, remaining),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MaxCallsLimit)
                                   messageName:@"MaxCallsLimit"
                               fileDescription:&AuthzRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MaxCallsLimit__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MaxFundsLimit

@implementation MaxFundsLimit

@dynamic amountsArray, amountsArray_Count;

typedef struct MaxFundsLimit__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *amountsArray;
} MaxFundsLimit__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "amountsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = MaxFundsLimit_FieldNumber_AmountsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MaxFundsLimit__storage_, amountsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MaxFundsLimit)
                                   messageName:@"MaxFundsLimit"
                               fileDescription:&AuthzRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MaxFundsLimit__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CombinedLimit

@implementation CombinedLimit

@dynamic callsRemaining;
@dynamic amountsArray, amountsArray_Count;

typedef struct CombinedLimit__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *amountsArray;
  uint64_t callsRemaining;
} CombinedLimit__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "callsRemaining",
        .dataTypeSpecific.clazz = Nil,
        .number = CombinedLimit_FieldNumber_CallsRemaining,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CombinedLimit__storage_, callsRemaining),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "amountsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = CombinedLimit_FieldNumber_AmountsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CombinedLimit__storage_, amountsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(CombinedLimit)
                                   messageName:@"CombinedLimit"
                               fileDescription:&AuthzRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CombinedLimit__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AllowAllMessagesFilter

@implementation AllowAllMessagesFilter


typedef struct AllowAllMessagesFilter__storage_ {
  uint32_t _has_storage_[1];
} AllowAllMessagesFilter__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(AllowAllMessagesFilter)
                                   messageName:@"AllowAllMessagesFilter"
                               fileDescription:&AuthzRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(AllowAllMessagesFilter__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AcceptedMessageKeysFilter

@implementation AcceptedMessageKeysFilter

@dynamic keysArray, keysArray_Count;

typedef struct AcceptedMessageKeysFilter__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *keysArray;
} AcceptedMessageKeysFilter__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "keysArray",
        .dataTypeSpecific.clazz = Nil,
        .number = AcceptedMessageKeysFilter_FieldNumber_KeysArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AcceptedMessageKeysFilter__storage_, keysArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(AcceptedMessageKeysFilter)
                                   messageName:@"AcceptedMessageKeysFilter"
                               fileDescription:&AuthzRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AcceptedMessageKeysFilter__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AcceptedMessagesFilter

@implementation AcceptedMessagesFilter

@dynamic messagesArray, messagesArray_Count;

typedef struct AcceptedMessagesFilter__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *messagesArray;
} AcceptedMessagesFilter__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messagesArray",
        .dataTypeSpecific.clazz = Nil,
        .number = AcceptedMessagesFilter_FieldNumber_MessagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AcceptedMessagesFilter__storage_, messagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(AcceptedMessagesFilter)
                                   messageName:@"AcceptedMessagesFilter"
                               fileDescription:&AuthzRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AcceptedMessagesFilter__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
