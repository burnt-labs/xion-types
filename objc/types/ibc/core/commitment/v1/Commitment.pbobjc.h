// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: ibc/core/commitment/v1/commitment.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "cosmos/ics23/v1/Proofs.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

NS_ASSUME_NONNULL_BEGIN

#pragma mark - CommitmentRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface CommitmentRoot : GPBRootObject
@end

#pragma mark - MerkleRoot

typedef GPB_ENUM(MerkleRoot_FieldNumber) {
  MerkleRoot_FieldNumber_Hash_p = 1,
};

/**
 * MerkleRoot defines a merkle root hash.
 * In the Cosmos SDK, the AppHash of a block header becomes the root.
 **/
GPB_FINAL @interface MerkleRoot : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *hash_p;

@end

#pragma mark - MerklePrefix

typedef GPB_ENUM(MerklePrefix_FieldNumber) {
  MerklePrefix_FieldNumber_KeyPrefix = 1,
};

/**
 * MerklePrefix is merkle path prefixed to the key.
 * The constructed key from the Path and the key will be append(Path.KeyPath,
 * append(Path.KeyPrefix, key...))
 **/
GPB_FINAL @interface MerklePrefix : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *keyPrefix;

@end

#pragma mark - MerkleProof

typedef GPB_ENUM(MerkleProof_FieldNumber) {
  MerkleProof_FieldNumber_ProofsArray = 1,
};

/**
 * MerkleProof is a wrapper type over a chain of CommitmentProofs.
 * It demonstrates membership or non-membership for an element or set of
 * elements, verifiable in conjunction with a known commitment root. Proofs
 * should be succinct.
 * MerkleProofs are ordered from leaf-to-root
 **/
GPB_FINAL @interface MerkleProof : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<CommitmentProof*> *proofsArray;
/** The number of items in @c proofsArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger proofsArray_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
