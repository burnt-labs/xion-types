// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: ibc/core/channel/v2/query.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "ibc/core/channel/v2/Query.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Height);
GPBObjCClassDeclaration(PacketState);
GPBObjCClassDeclaration(PageRequest);
GPBObjCClassDeclaration(PageResponse);
GPBObjCClassDeclaration(QueryNextSequenceSendRequest);
GPBObjCClassDeclaration(QueryNextSequenceSendResponse);
GPBObjCClassDeclaration(QueryPacketAcknowledgementRequest);
GPBObjCClassDeclaration(QueryPacketAcknowledgementResponse);
GPBObjCClassDeclaration(QueryPacketAcknowledgementsRequest);
GPBObjCClassDeclaration(QueryPacketAcknowledgementsResponse);
GPBObjCClassDeclaration(QueryPacketCommitmentRequest);
GPBObjCClassDeclaration(QueryPacketCommitmentResponse);
GPBObjCClassDeclaration(QueryPacketCommitmentsRequest);
GPBObjCClassDeclaration(QueryPacketCommitmentsResponse);
GPBObjCClassDeclaration(QueryPacketReceiptRequest);
GPBObjCClassDeclaration(QueryPacketReceiptResponse);
GPBObjCClassDeclaration(QueryUnreceivedAcksRequest);
GPBObjCClassDeclaration(QueryUnreceivedAcksResponse);
GPBObjCClassDeclaration(QueryUnreceivedPacketsRequest);
GPBObjCClassDeclaration(QueryUnreceivedPacketsResponse);

#pragma mark - QueryRoot

@implementation QueryRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription QueryRoot_FileDescription = {
  .package = "ibc.core.channel.v2",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - QueryNextSequenceSendRequest

@implementation QueryNextSequenceSendRequest

@dynamic clientId;

typedef struct QueryNextSequenceSendRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
} QueryNextSequenceSendRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryNextSequenceSendRequest_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryNextSequenceSendRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryNextSequenceSendRequest)
                                   messageName:@"QueryNextSequenceSendRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryNextSequenceSendRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryNextSequenceSendResponse

@implementation QueryNextSequenceSendResponse

@dynamic nextSequenceSend;
@dynamic proof;
@dynamic hasProofHeight, proofHeight;

typedef struct QueryNextSequenceSendResponse__storage_ {
  uint32_t _has_storage_[1];
  NSData *proof;
  Height *proofHeight;
  uint64_t nextSequenceSend;
} QueryNextSequenceSendResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nextSequenceSend",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryNextSequenceSendResponse_FieldNumber_NextSequenceSend,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryNextSequenceSendResponse__storage_, nextSequenceSend),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "proof",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryNextSequenceSendResponse_FieldNumber_Proof,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryNextSequenceSendResponse__storage_, proof),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = QueryNextSequenceSendResponse_FieldNumber_ProofHeight,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(QueryNextSequenceSendResponse__storage_, proofHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryNextSequenceSendResponse)
                                   messageName:@"QueryNextSequenceSendResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryNextSequenceSendResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryPacketCommitmentRequest

@implementation QueryPacketCommitmentRequest

@dynamic clientId;
@dynamic sequence;

typedef struct QueryPacketCommitmentRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  uint64_t sequence;
} QueryPacketCommitmentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryPacketCommitmentRequest_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryPacketCommitmentRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sequence",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryPacketCommitmentRequest_FieldNumber_Sequence,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryPacketCommitmentRequest__storage_, sequence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryPacketCommitmentRequest)
                                   messageName:@"QueryPacketCommitmentRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryPacketCommitmentRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryPacketCommitmentResponse

@implementation QueryPacketCommitmentResponse

@dynamic commitment;
@dynamic proof;
@dynamic hasProofHeight, proofHeight;

typedef struct QueryPacketCommitmentResponse__storage_ {
  uint32_t _has_storage_[1];
  NSData *commitment;
  NSData *proof;
  Height *proofHeight;
} QueryPacketCommitmentResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "commitment",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryPacketCommitmentResponse_FieldNumber_Commitment,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryPacketCommitmentResponse__storage_, commitment),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proof",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryPacketCommitmentResponse_FieldNumber_Proof,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryPacketCommitmentResponse__storage_, proof),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = QueryPacketCommitmentResponse_FieldNumber_ProofHeight,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(QueryPacketCommitmentResponse__storage_, proofHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryPacketCommitmentResponse)
                                   messageName:@"QueryPacketCommitmentResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryPacketCommitmentResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryPacketCommitmentsRequest

@implementation QueryPacketCommitmentsRequest

@dynamic clientId;
@dynamic hasPagination, pagination;

typedef struct QueryPacketCommitmentsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  PageRequest *pagination;
} QueryPacketCommitmentsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryPacketCommitmentsRequest_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryPacketCommitmentsRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageRequest),
        .number = QueryPacketCommitmentsRequest_FieldNumber_Pagination,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryPacketCommitmentsRequest__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryPacketCommitmentsRequest)
                                   messageName:@"QueryPacketCommitmentsRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryPacketCommitmentsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryPacketCommitmentsResponse

@implementation QueryPacketCommitmentsResponse

@dynamic commitmentsArray, commitmentsArray_Count;
@dynamic hasPagination, pagination;
@dynamic hasHeight, height;

typedef struct QueryPacketCommitmentsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *commitmentsArray;
  PageResponse *pagination;
  Height *height;
} QueryPacketCommitmentsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "commitmentsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(PacketState),
        .number = QueryPacketCommitmentsResponse_FieldNumber_CommitmentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryPacketCommitmentsResponse__storage_, commitmentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageResponse),
        .number = QueryPacketCommitmentsResponse_FieldNumber_Pagination,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryPacketCommitmentsResponse__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "height",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = QueryPacketCommitmentsResponse_FieldNumber_Height,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryPacketCommitmentsResponse__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryPacketCommitmentsResponse)
                                   messageName:@"QueryPacketCommitmentsResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryPacketCommitmentsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryPacketAcknowledgementRequest

@implementation QueryPacketAcknowledgementRequest

@dynamic clientId;
@dynamic sequence;

typedef struct QueryPacketAcknowledgementRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  uint64_t sequence;
} QueryPacketAcknowledgementRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryPacketAcknowledgementRequest_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryPacketAcknowledgementRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sequence",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryPacketAcknowledgementRequest_FieldNumber_Sequence,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryPacketAcknowledgementRequest__storage_, sequence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryPacketAcknowledgementRequest)
                                   messageName:@"QueryPacketAcknowledgementRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryPacketAcknowledgementRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryPacketAcknowledgementResponse

@implementation QueryPacketAcknowledgementResponse

@dynamic acknowledgement;
@dynamic proof;
@dynamic hasProofHeight, proofHeight;

typedef struct QueryPacketAcknowledgementResponse__storage_ {
  uint32_t _has_storage_[1];
  NSData *acknowledgement;
  NSData *proof;
  Height *proofHeight;
} QueryPacketAcknowledgementResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "acknowledgement",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryPacketAcknowledgementResponse_FieldNumber_Acknowledgement,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryPacketAcknowledgementResponse__storage_, acknowledgement),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proof",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryPacketAcknowledgementResponse_FieldNumber_Proof,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryPacketAcknowledgementResponse__storage_, proof),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = QueryPacketAcknowledgementResponse_FieldNumber_ProofHeight,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(QueryPacketAcknowledgementResponse__storage_, proofHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryPacketAcknowledgementResponse)
                                   messageName:@"QueryPacketAcknowledgementResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryPacketAcknowledgementResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryPacketAcknowledgementsRequest

@implementation QueryPacketAcknowledgementsRequest

@dynamic clientId;
@dynamic hasPagination, pagination;
@dynamic packetCommitmentSequencesArray, packetCommitmentSequencesArray_Count;

typedef struct QueryPacketAcknowledgementsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  PageRequest *pagination;
  GPBUInt64Array *packetCommitmentSequencesArray;
} QueryPacketAcknowledgementsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryPacketAcknowledgementsRequest_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryPacketAcknowledgementsRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageRequest),
        .number = QueryPacketAcknowledgementsRequest_FieldNumber_Pagination,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryPacketAcknowledgementsRequest__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "packetCommitmentSequencesArray",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryPacketAcknowledgementsRequest_FieldNumber_PacketCommitmentSequencesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryPacketAcknowledgementsRequest__storage_, packetCommitmentSequencesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryPacketAcknowledgementsRequest)
                                   messageName:@"QueryPacketAcknowledgementsRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryPacketAcknowledgementsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryPacketAcknowledgementsResponse

@implementation QueryPacketAcknowledgementsResponse

@dynamic acknowledgementsArray, acknowledgementsArray_Count;
@dynamic hasPagination, pagination;
@dynamic hasHeight, height;

typedef struct QueryPacketAcknowledgementsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *acknowledgementsArray;
  PageResponse *pagination;
  Height *height;
} QueryPacketAcknowledgementsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "acknowledgementsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(PacketState),
        .number = QueryPacketAcknowledgementsResponse_FieldNumber_AcknowledgementsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryPacketAcknowledgementsResponse__storage_, acknowledgementsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageResponse),
        .number = QueryPacketAcknowledgementsResponse_FieldNumber_Pagination,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryPacketAcknowledgementsResponse__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "height",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = QueryPacketAcknowledgementsResponse_FieldNumber_Height,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryPacketAcknowledgementsResponse__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryPacketAcknowledgementsResponse)
                                   messageName:@"QueryPacketAcknowledgementsResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryPacketAcknowledgementsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryPacketReceiptRequest

@implementation QueryPacketReceiptRequest

@dynamic clientId;
@dynamic sequence;

typedef struct QueryPacketReceiptRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  uint64_t sequence;
} QueryPacketReceiptRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryPacketReceiptRequest_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryPacketReceiptRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sequence",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryPacketReceiptRequest_FieldNumber_Sequence,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryPacketReceiptRequest__storage_, sequence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryPacketReceiptRequest)
                                   messageName:@"QueryPacketReceiptRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryPacketReceiptRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryPacketReceiptResponse

@implementation QueryPacketReceiptResponse

@dynamic received;
@dynamic proof;
@dynamic hasProofHeight, proofHeight;

typedef struct QueryPacketReceiptResponse__storage_ {
  uint32_t _has_storage_[1];
  NSData *proof;
  Height *proofHeight;
} QueryPacketReceiptResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "received",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryPacketReceiptResponse_FieldNumber_Received,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "proof",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryPacketReceiptResponse_FieldNumber_Proof,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(QueryPacketReceiptResponse__storage_, proof),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = QueryPacketReceiptResponse_FieldNumber_ProofHeight,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(QueryPacketReceiptResponse__storage_, proofHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryPacketReceiptResponse)
                                   messageName:@"QueryPacketReceiptResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryPacketReceiptResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryUnreceivedPacketsRequest

@implementation QueryUnreceivedPacketsRequest

@dynamic clientId;
@dynamic sequencesArray, sequencesArray_Count;

typedef struct QueryUnreceivedPacketsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  GPBUInt64Array *sequencesArray;
} QueryUnreceivedPacketsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryUnreceivedPacketsRequest_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryUnreceivedPacketsRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sequencesArray",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryUnreceivedPacketsRequest_FieldNumber_SequencesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryUnreceivedPacketsRequest__storage_, sequencesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryUnreceivedPacketsRequest)
                                   messageName:@"QueryUnreceivedPacketsRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryUnreceivedPacketsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryUnreceivedPacketsResponse

@implementation QueryUnreceivedPacketsResponse

@dynamic sequencesArray, sequencesArray_Count;
@dynamic hasHeight, height;

typedef struct QueryUnreceivedPacketsResponse__storage_ {
  uint32_t _has_storage_[1];
  GPBUInt64Array *sequencesArray;
  Height *height;
} QueryUnreceivedPacketsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sequencesArray",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryUnreceivedPacketsResponse_FieldNumber_SequencesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryUnreceivedPacketsResponse__storage_, sequencesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "height",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = QueryUnreceivedPacketsResponse_FieldNumber_Height,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryUnreceivedPacketsResponse__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryUnreceivedPacketsResponse)
                                   messageName:@"QueryUnreceivedPacketsResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryUnreceivedPacketsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryUnreceivedAcksRequest

@implementation QueryUnreceivedAcksRequest

@dynamic clientId;
@dynamic packetAckSequencesArray, packetAckSequencesArray_Count;

typedef struct QueryUnreceivedAcksRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  GPBUInt64Array *packetAckSequencesArray;
} QueryUnreceivedAcksRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryUnreceivedAcksRequest_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryUnreceivedAcksRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "packetAckSequencesArray",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryUnreceivedAcksRequest_FieldNumber_PacketAckSequencesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryUnreceivedAcksRequest__storage_, packetAckSequencesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryUnreceivedAcksRequest)
                                   messageName:@"QueryUnreceivedAcksRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryUnreceivedAcksRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryUnreceivedAcksResponse

@implementation QueryUnreceivedAcksResponse

@dynamic sequencesArray, sequencesArray_Count;
@dynamic hasHeight, height;

typedef struct QueryUnreceivedAcksResponse__storage_ {
  uint32_t _has_storage_[1];
  GPBUInt64Array *sequencesArray;
  Height *height;
} QueryUnreceivedAcksResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sequencesArray",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryUnreceivedAcksResponse_FieldNumber_SequencesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryUnreceivedAcksResponse__storage_, sequencesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "height",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = QueryUnreceivedAcksResponse_FieldNumber_Height,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryUnreceivedAcksResponse__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryUnreceivedAcksResponse)
                                   messageName:@"QueryUnreceivedAcksResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryUnreceivedAcksResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
