// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: ibc/core/channel/v2/packet.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import <stdatomic.h>

#import "ibc/core/channel/v2/Packet.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Acknowledgement);
GPBObjCClassDeclaration(Packet);
GPBObjCClassDeclaration(Payload);
GPBObjCClassDeclaration(RecvPacketResult);

#pragma mark - PacketRoot

@implementation PacketRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription PacketRoot_FileDescription = {
  .package = "ibc.core.channel.v2",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Enum PacketStatus

GPBEnumDescriptor *PacketStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "PacketStatusUnspecified\000PacketStatusSucc"
        "ess\000PacketStatusFailure\000PacketStatusAsyn"
        "c\000";
    static const int32_t values[] = {
        PacketStatus_PacketStatusUnspecified,
        PacketStatus_PacketStatusSuccess,
        PacketStatus_PacketStatusFailure,
        PacketStatus_PacketStatusAsync,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PacketStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PacketStatus_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PacketStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PacketStatus_PacketStatusUnspecified:
    case PacketStatus_PacketStatusSuccess:
    case PacketStatus_PacketStatusFailure:
    case PacketStatus_PacketStatusAsync:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Packet

@implementation Packet

@dynamic sequence;
@dynamic sourceClient;
@dynamic destinationClient;
@dynamic timeoutTimestamp;
@dynamic payloadsArray, payloadsArray_Count;

typedef struct Packet__storage_ {
  uint32_t _has_storage_[1];
  NSString *sourceClient;
  NSString *destinationClient;
  NSMutableArray *payloadsArray;
  uint64_t sequence;
  uint64_t timeoutTimestamp;
} Packet__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sequence",
        .dataTypeSpecific.clazz = Nil,
        .number = Packet_FieldNumber_Sequence,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Packet__storage_, sequence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "sourceClient",
        .dataTypeSpecific.clazz = Nil,
        .number = Packet_FieldNumber_SourceClient,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Packet__storage_, sourceClient),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "destinationClient",
        .dataTypeSpecific.clazz = Nil,
        .number = Packet_FieldNumber_DestinationClient,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Packet__storage_, destinationClient),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timeoutTimestamp",
        .dataTypeSpecific.clazz = Nil,
        .number = Packet_FieldNumber_TimeoutTimestamp,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Packet__storage_, timeoutTimestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "payloadsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Payload),
        .number = Packet_FieldNumber_PayloadsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Packet__storage_, payloadsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Packet)
                                   messageName:@"Packet"
                               fileDescription:&PacketRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Packet__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Payload

@implementation Payload

@dynamic sourcePort;
@dynamic destinationPort;
@dynamic version;
@dynamic encoding;
@dynamic value;

typedef struct Payload__storage_ {
  uint32_t _has_storage_[1];
  NSString *sourcePort;
  NSString *destinationPort;
  NSString *version;
  NSString *encoding;
  NSData *value;
} Payload__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sourcePort",
        .dataTypeSpecific.clazz = Nil,
        .number = Payload_FieldNumber_SourcePort,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Payload__storage_, sourcePort),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "destinationPort",
        .dataTypeSpecific.clazz = Nil,
        .number = Payload_FieldNumber_DestinationPort,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Payload__storage_, destinationPort),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.clazz = Nil,
        .number = Payload_FieldNumber_Version,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Payload__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "encoding",
        .dataTypeSpecific.clazz = Nil,
        .number = Payload_FieldNumber_Encoding,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Payload__storage_, encoding),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.clazz = Nil,
        .number = Payload_FieldNumber_Value,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Payload__storage_, value),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Payload)
                                   messageName:@"Payload"
                               fileDescription:&PacketRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Payload__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Acknowledgement

@implementation Acknowledgement

@dynamic appAcknowledgementsArray, appAcknowledgementsArray_Count;

typedef struct Acknowledgement__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *appAcknowledgementsArray;
} Acknowledgement__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "appAcknowledgementsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = Acknowledgement_FieldNumber_AppAcknowledgementsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Acknowledgement__storage_, appAcknowledgementsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Acknowledgement)
                                   messageName:@"Acknowledgement"
                               fileDescription:&PacketRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Acknowledgement__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RecvPacketResult

@implementation RecvPacketResult

@dynamic status;
@dynamic acknowledgement;

typedef struct RecvPacketResult__storage_ {
  uint32_t _has_storage_[1];
  PacketStatus status;
  NSData *acknowledgement;
} RecvPacketResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PacketStatus_EnumDescriptor,
        .number = RecvPacketResult_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RecvPacketResult__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "acknowledgement",
        .dataTypeSpecific.clazz = Nil,
        .number = RecvPacketResult_FieldNumber_Acknowledgement,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RecvPacketResult__storage_, acknowledgement),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(RecvPacketResult)
                                   messageName:@"RecvPacketResult"
                               fileDescription:&PacketRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RecvPacketResult__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RecvPacketResult_Status_RawValue(RecvPacketResult *message) {
  GPBDescriptor *descriptor = [RecvPacketResult descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RecvPacketResult_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void SetRecvPacketResult_Status_RawValue(RecvPacketResult *message, int32_t value) {
  GPBDescriptor *descriptor = [RecvPacketResult descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RecvPacketResult_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
