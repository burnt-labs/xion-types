// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: ibc/core/channel/v2/tx.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import <stdatomic.h>

#import "ibc/core/channel/v2/Tx.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Acknowledgement);
GPBObjCClassDeclaration(Height);
GPBObjCClassDeclaration(MsgAcknowledgement);
GPBObjCClassDeclaration(MsgAcknowledgementResponse);
GPBObjCClassDeclaration(MsgRecvPacket);
GPBObjCClassDeclaration(MsgRecvPacketResponse);
GPBObjCClassDeclaration(MsgSendPacket);
GPBObjCClassDeclaration(MsgSendPacketResponse);
GPBObjCClassDeclaration(MsgTimeout);
GPBObjCClassDeclaration(MsgTimeoutResponse);
GPBObjCClassDeclaration(Packet);
GPBObjCClassDeclaration(Payload);

#pragma mark - TxRoot

@implementation TxRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription TxRoot_FileDescription = {
  .package = "ibc.core.channel.v2",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Enum ResponseResultType

GPBEnumDescriptor *ResponseResultType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "ResponseResultTypeUnspecified\000ResponseRe"
        "sultTypeNoop\000ResponseResultTypeSuccess\000R"
        "esponseResultTypeFailure\000";
    static const int32_t values[] = {
        ResponseResultType_ResponseResultTypeUnspecified,
        ResponseResultType_ResponseResultTypeNoop,
        ResponseResultType_ResponseResultTypeSuccess,
        ResponseResultType_ResponseResultTypeFailure,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ResponseResultType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ResponseResultType_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ResponseResultType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ResponseResultType_ResponseResultTypeUnspecified:
    case ResponseResultType_ResponseResultTypeNoop:
    case ResponseResultType_ResponseResultTypeSuccess:
    case ResponseResultType_ResponseResultTypeFailure:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - MsgSendPacket

@implementation MsgSendPacket

@dynamic sourceClient;
@dynamic timeoutTimestamp;
@dynamic payloadsArray, payloadsArray_Count;
@dynamic signer;

typedef struct MsgSendPacket__storage_ {
  uint32_t _has_storage_[1];
  NSString *sourceClient;
  NSMutableArray *payloadsArray;
  NSString *signer;
  uint64_t timeoutTimestamp;
} MsgSendPacket__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sourceClient",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSendPacket_FieldNumber_SourceClient,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgSendPacket__storage_, sourceClient),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timeoutTimestamp",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSendPacket_FieldNumber_TimeoutTimestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgSendPacket__storage_, timeoutTimestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "payloadsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Payload),
        .number = MsgSendPacket_FieldNumber_PayloadsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MsgSendPacket__storage_, payloadsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSendPacket_FieldNumber_Signer,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgSendPacket__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgSendPacket)
                                   messageName:@"MsgSendPacket"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgSendPacket__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgSendPacketResponse

@implementation MsgSendPacketResponse

@dynamic sequence;

typedef struct MsgSendPacketResponse__storage_ {
  uint32_t _has_storage_[1];
  uint64_t sequence;
} MsgSendPacketResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sequence",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSendPacketResponse_FieldNumber_Sequence,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgSendPacketResponse__storage_, sequence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgSendPacketResponse)
                                   messageName:@"MsgSendPacketResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgSendPacketResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgRecvPacket

@implementation MsgRecvPacket

@dynamic hasPacket, packet;
@dynamic proofCommitment;
@dynamic hasProofHeight, proofHeight;
@dynamic signer;

typedef struct MsgRecvPacket__storage_ {
  uint32_t _has_storage_[1];
  Packet *packet;
  NSData *proofCommitment;
  Height *proofHeight;
  NSString *signer;
} MsgRecvPacket__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "packet",
        .dataTypeSpecific.clazz = GPBObjCClass(Packet),
        .number = MsgRecvPacket_FieldNumber_Packet,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgRecvPacket__storage_, packet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "proofCommitment",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgRecvPacket_FieldNumber_ProofCommitment,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgRecvPacket__storage_, proofCommitment),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = MsgRecvPacket_FieldNumber_ProofHeight,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgRecvPacket__storage_, proofHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgRecvPacket_FieldNumber_Signer,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgRecvPacket__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgRecvPacket)
                                   messageName:@"MsgRecvPacket"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgRecvPacket__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgRecvPacketResponse

@implementation MsgRecvPacketResponse

@dynamic result;

typedef struct MsgRecvPacketResponse__storage_ {
  uint32_t _has_storage_[1];
  ResponseResultType result;
} MsgRecvPacketResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = ResponseResultType_EnumDescriptor,
        .number = MsgRecvPacketResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgRecvPacketResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgRecvPacketResponse)
                                   messageName:@"MsgRecvPacketResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgRecvPacketResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MsgRecvPacketResponse_Result_RawValue(MsgRecvPacketResponse *message) {
  GPBDescriptor *descriptor = [MsgRecvPacketResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgRecvPacketResponse_FieldNumber_Result];
  return GPBGetMessageRawEnumField(message, field);
}

void SetMsgRecvPacketResponse_Result_RawValue(MsgRecvPacketResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [MsgRecvPacketResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgRecvPacketResponse_FieldNumber_Result];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - MsgTimeout

@implementation MsgTimeout

@dynamic hasPacket, packet;
@dynamic proofUnreceived;
@dynamic hasProofHeight, proofHeight;
@dynamic signer;

typedef struct MsgTimeout__storage_ {
  uint32_t _has_storage_[1];
  Packet *packet;
  NSData *proofUnreceived;
  Height *proofHeight;
  NSString *signer;
} MsgTimeout__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "packet",
        .dataTypeSpecific.clazz = GPBObjCClass(Packet),
        .number = MsgTimeout_FieldNumber_Packet,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgTimeout__storage_, packet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "proofUnreceived",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgTimeout_FieldNumber_ProofUnreceived,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgTimeout__storage_, proofUnreceived),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = MsgTimeout_FieldNumber_ProofHeight,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgTimeout__storage_, proofHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgTimeout_FieldNumber_Signer,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgTimeout__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgTimeout)
                                   messageName:@"MsgTimeout"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgTimeout__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgTimeoutResponse

@implementation MsgTimeoutResponse

@dynamic result;

typedef struct MsgTimeoutResponse__storage_ {
  uint32_t _has_storage_[1];
  ResponseResultType result;
} MsgTimeoutResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = ResponseResultType_EnumDescriptor,
        .number = MsgTimeoutResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgTimeoutResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgTimeoutResponse)
                                   messageName:@"MsgTimeoutResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgTimeoutResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MsgTimeoutResponse_Result_RawValue(MsgTimeoutResponse *message) {
  GPBDescriptor *descriptor = [MsgTimeoutResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgTimeoutResponse_FieldNumber_Result];
  return GPBGetMessageRawEnumField(message, field);
}

void SetMsgTimeoutResponse_Result_RawValue(MsgTimeoutResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [MsgTimeoutResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgTimeoutResponse_FieldNumber_Result];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - MsgAcknowledgement

@implementation MsgAcknowledgement

@dynamic hasPacket, packet;
@dynamic hasAcknowledgement, acknowledgement;
@dynamic proofAcked;
@dynamic hasProofHeight, proofHeight;
@dynamic signer;

typedef struct MsgAcknowledgement__storage_ {
  uint32_t _has_storage_[1];
  Packet *packet;
  Acknowledgement *acknowledgement;
  NSData *proofAcked;
  Height *proofHeight;
  NSString *signer;
} MsgAcknowledgement__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "packet",
        .dataTypeSpecific.clazz = GPBObjCClass(Packet),
        .number = MsgAcknowledgement_FieldNumber_Packet,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgAcknowledgement__storage_, packet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "acknowledgement",
        .dataTypeSpecific.clazz = GPBObjCClass(Acknowledgement),
        .number = MsgAcknowledgement_FieldNumber_Acknowledgement,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgAcknowledgement__storage_, acknowledgement),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "proofAcked",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgAcknowledgement_FieldNumber_ProofAcked,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgAcknowledgement__storage_, proofAcked),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = MsgAcknowledgement_FieldNumber_ProofHeight,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgAcknowledgement__storage_, proofHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgAcknowledgement_FieldNumber_Signer,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MsgAcknowledgement__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgAcknowledgement)
                                   messageName:@"MsgAcknowledgement"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgAcknowledgement__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgAcknowledgementResponse

@implementation MsgAcknowledgementResponse

@dynamic result;

typedef struct MsgAcknowledgementResponse__storage_ {
  uint32_t _has_storage_[1];
  ResponseResultType result;
} MsgAcknowledgementResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = ResponseResultType_EnumDescriptor,
        .number = MsgAcknowledgementResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgAcknowledgementResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgAcknowledgementResponse)
                                   messageName:@"MsgAcknowledgementResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgAcknowledgementResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MsgAcknowledgementResponse_Result_RawValue(MsgAcknowledgementResponse *message) {
  GPBDescriptor *descriptor = [MsgAcknowledgementResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgAcknowledgementResponse_FieldNumber_Result];
  return GPBGetMessageRawEnumField(message, field);
}

void SetMsgAcknowledgementResponse_Result_RawValue(MsgAcknowledgementResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [MsgAcknowledgementResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgAcknowledgementResponse_FieldNumber_Result];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
