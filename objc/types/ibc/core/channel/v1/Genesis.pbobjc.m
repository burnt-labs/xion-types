// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: ibc/core/channel/v1/genesis.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "ibc/core/channel/v1/Genesis.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(GenesisState);
GPBObjCClassDeclaration(IdentifiedChannel);
GPBObjCClassDeclaration(PacketSequence);
GPBObjCClassDeclaration(PacketState);

#pragma mark - GenesisRoot

@implementation GenesisRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription GenesisRoot_FileDescription = {
  .package = "ibc.core.channel.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - GenesisState

@implementation GenesisState

@dynamic channelsArray, channelsArray_Count;
@dynamic acknowledgementsArray, acknowledgementsArray_Count;
@dynamic commitmentsArray, commitmentsArray_Count;
@dynamic receiptsArray, receiptsArray_Count;
@dynamic sendSequencesArray, sendSequencesArray_Count;
@dynamic recvSequencesArray, recvSequencesArray_Count;
@dynamic ackSequencesArray, ackSequencesArray_Count;
@dynamic nextChannelSequence;

typedef struct GenesisState__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *channelsArray;
  NSMutableArray *acknowledgementsArray;
  NSMutableArray *commitmentsArray;
  NSMutableArray *receiptsArray;
  NSMutableArray *sendSequencesArray;
  NSMutableArray *recvSequencesArray;
  NSMutableArray *ackSequencesArray;
  uint64_t nextChannelSequence;
} GenesisState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(IdentifiedChannel),
        .number = GenesisState_FieldNumber_ChannelsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GenesisState__storage_, channelsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "acknowledgementsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(PacketState),
        .number = GenesisState_FieldNumber_AcknowledgementsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GenesisState__storage_, acknowledgementsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "commitmentsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(PacketState),
        .number = GenesisState_FieldNumber_CommitmentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GenesisState__storage_, commitmentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "receiptsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(PacketState),
        .number = GenesisState_FieldNumber_ReceiptsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GenesisState__storage_, receiptsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sendSequencesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(PacketSequence),
        .number = GenesisState_FieldNumber_SendSequencesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GenesisState__storage_, sendSequencesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "recvSequencesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(PacketSequence),
        .number = GenesisState_FieldNumber_RecvSequencesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GenesisState__storage_, recvSequencesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ackSequencesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(PacketSequence),
        .number = GenesisState_FieldNumber_AckSequencesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GenesisState__storage_, ackSequencesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextChannelSequence",
        .dataTypeSpecific.clazz = Nil,
        .number = GenesisState_FieldNumber_NextChannelSequence,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GenesisState__storage_, nextChannelSequence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(GenesisState)
                                   messageName:@"GenesisState"
                               fileDescription:&GenesisRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GenesisState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PacketSequence

@implementation PacketSequence

@dynamic portId;
@dynamic channelId;
@dynamic sequence;

typedef struct PacketSequence__storage_ {
  uint32_t _has_storage_[1];
  NSString *portId;
  NSString *channelId;
  uint64_t sequence;
} PacketSequence__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "portId",
        .dataTypeSpecific.clazz = Nil,
        .number = PacketSequence_FieldNumber_PortId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PacketSequence__storage_, portId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = PacketSequence_FieldNumber_ChannelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PacketSequence__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sequence",
        .dataTypeSpecific.clazz = Nil,
        .number = PacketSequence_FieldNumber_Sequence,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PacketSequence__storage_, sequence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(PacketSequence)
                                   messageName:@"PacketSequence"
                               fileDescription:&GenesisRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PacketSequence__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
