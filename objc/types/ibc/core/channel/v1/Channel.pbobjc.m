// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: ibc/core/channel/v1/channel.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import <stdatomic.h>

#import "ibc/core/channel/v1/Channel.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Acknowledgement);
GPBObjCClassDeclaration(Channel);
GPBObjCClassDeclaration(Counterparty);
GPBObjCClassDeclaration(Height);
GPBObjCClassDeclaration(IdentifiedChannel);
GPBObjCClassDeclaration(Packet);
GPBObjCClassDeclaration(PacketId);
GPBObjCClassDeclaration(PacketState);
GPBObjCClassDeclaration(Timeout);

#pragma mark - ChannelRoot

@implementation ChannelRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription ChannelRoot_FileDescription = {
  .package = "ibc.core.channel.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Enum State

GPBEnumDescriptor *State_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "StateUninitializedUnspecified\000StateInit\000"
        "StateTryopen\000StateOpen\000StateClosed\000";
    static const int32_t values[] = {
        State_StateUninitializedUnspecified,
        State_StateInit,
        State_StateTryopen,
        State_StateOpen,
        State_StateClosed,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(State)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:State_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL State_IsValidValue(int32_t value__) {
  switch (value__) {
    case State_StateUninitializedUnspecified:
    case State_StateInit:
    case State_StateTryopen:
    case State_StateOpen:
    case State_StateClosed:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum Order

GPBEnumDescriptor *Order_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "OrderNoneUnspecified\000OrderUnordered\000Orde"
        "rOrdered\000";
    static const int32_t values[] = {
        Order_OrderNoneUnspecified,
        Order_OrderUnordered,
        Order_OrderOrdered,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Order)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Order_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Order_IsValidValue(int32_t value__) {
  switch (value__) {
    case Order_OrderNoneUnspecified:
    case Order_OrderUnordered:
    case Order_OrderOrdered:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Channel

@implementation Channel

@dynamic state;
@dynamic ordering;
@dynamic hasCounterparty, counterparty;
@dynamic connectionHopsArray, connectionHopsArray_Count;
@dynamic version;

typedef struct Channel__storage_ {
  uint32_t _has_storage_[1];
  State state;
  Order ordering;
  Counterparty *counterparty;
  NSMutableArray *connectionHopsArray;
  NSString *version;
} Channel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "state",
        .dataTypeSpecific.enumDescFunc = State_EnumDescriptor,
        .number = Channel_FieldNumber_State,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Channel__storage_, state),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "ordering",
        .dataTypeSpecific.enumDescFunc = Order_EnumDescriptor,
        .number = Channel_FieldNumber_Ordering,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Channel__storage_, ordering),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "counterparty",
        .dataTypeSpecific.clazz = GPBObjCClass(Counterparty),
        .number = Channel_FieldNumber_Counterparty,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Channel__storage_, counterparty),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "connectionHopsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = Channel_FieldNumber_ConnectionHopsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Channel__storage_, connectionHopsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.clazz = Nil,
        .number = Channel_FieldNumber_Version,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Channel__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Channel)
                                   messageName:@"Channel"
                               fileDescription:&ChannelRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Channel__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Channel_State_RawValue(Channel *message) {
  GPBDescriptor *descriptor = [Channel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Channel_FieldNumber_State];
  return GPBGetMessageRawEnumField(message, field);
}

void SetChannel_State_RawValue(Channel *message, int32_t value) {
  GPBDescriptor *descriptor = [Channel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Channel_FieldNumber_State];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t Channel_Ordering_RawValue(Channel *message) {
  GPBDescriptor *descriptor = [Channel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Channel_FieldNumber_Ordering];
  return GPBGetMessageRawEnumField(message, field);
}

void SetChannel_Ordering_RawValue(Channel *message, int32_t value) {
  GPBDescriptor *descriptor = [Channel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Channel_FieldNumber_Ordering];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - IdentifiedChannel

@implementation IdentifiedChannel

@dynamic state;
@dynamic ordering;
@dynamic hasCounterparty, counterparty;
@dynamic connectionHopsArray, connectionHopsArray_Count;
@dynamic version;
@dynamic portId;
@dynamic channelId;

typedef struct IdentifiedChannel__storage_ {
  uint32_t _has_storage_[1];
  State state;
  Order ordering;
  Counterparty *counterparty;
  NSMutableArray *connectionHopsArray;
  NSString *version;
  NSString *portId;
  NSString *channelId;
} IdentifiedChannel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "state",
        .dataTypeSpecific.enumDescFunc = State_EnumDescriptor,
        .number = IdentifiedChannel_FieldNumber_State,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IdentifiedChannel__storage_, state),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "ordering",
        .dataTypeSpecific.enumDescFunc = Order_EnumDescriptor,
        .number = IdentifiedChannel_FieldNumber_Ordering,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IdentifiedChannel__storage_, ordering),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "counterparty",
        .dataTypeSpecific.clazz = GPBObjCClass(Counterparty),
        .number = IdentifiedChannel_FieldNumber_Counterparty,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IdentifiedChannel__storage_, counterparty),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "connectionHopsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = IdentifiedChannel_FieldNumber_ConnectionHopsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IdentifiedChannel__storage_, connectionHopsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.clazz = Nil,
        .number = IdentifiedChannel_FieldNumber_Version,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(IdentifiedChannel__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "portId",
        .dataTypeSpecific.clazz = Nil,
        .number = IdentifiedChannel_FieldNumber_PortId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(IdentifiedChannel__storage_, portId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = IdentifiedChannel_FieldNumber_ChannelId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(IdentifiedChannel__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(IdentifiedChannel)
                                   messageName:@"IdentifiedChannel"
                               fileDescription:&ChannelRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IdentifiedChannel__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t IdentifiedChannel_State_RawValue(IdentifiedChannel *message) {
  GPBDescriptor *descriptor = [IdentifiedChannel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:IdentifiedChannel_FieldNumber_State];
  return GPBGetMessageRawEnumField(message, field);
}

void SetIdentifiedChannel_State_RawValue(IdentifiedChannel *message, int32_t value) {
  GPBDescriptor *descriptor = [IdentifiedChannel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:IdentifiedChannel_FieldNumber_State];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t IdentifiedChannel_Ordering_RawValue(IdentifiedChannel *message) {
  GPBDescriptor *descriptor = [IdentifiedChannel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:IdentifiedChannel_FieldNumber_Ordering];
  return GPBGetMessageRawEnumField(message, field);
}

void SetIdentifiedChannel_Ordering_RawValue(IdentifiedChannel *message, int32_t value) {
  GPBDescriptor *descriptor = [IdentifiedChannel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:IdentifiedChannel_FieldNumber_Ordering];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Counterparty

@implementation Counterparty

@dynamic portId;
@dynamic channelId;

typedef struct Counterparty__storage_ {
  uint32_t _has_storage_[1];
  NSString *portId;
  NSString *channelId;
} Counterparty__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "portId",
        .dataTypeSpecific.clazz = Nil,
        .number = Counterparty_FieldNumber_PortId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Counterparty__storage_, portId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = Counterparty_FieldNumber_ChannelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Counterparty__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Counterparty)
                                   messageName:@"Counterparty"
                               fileDescription:&ChannelRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Counterparty__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Packet

@implementation Packet

@dynamic sequence;
@dynamic sourcePort;
@dynamic sourceChannel;
@dynamic destinationPort;
@dynamic destinationChannel;
@dynamic data_p;
@dynamic hasTimeoutHeight, timeoutHeight;
@dynamic timeoutTimestamp;

typedef struct Packet__storage_ {
  uint32_t _has_storage_[1];
  NSString *sourcePort;
  NSString *sourceChannel;
  NSString *destinationPort;
  NSString *destinationChannel;
  NSData *data_p;
  Height *timeoutHeight;
  uint64_t sequence;
  uint64_t timeoutTimestamp;
} Packet__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sequence",
        .dataTypeSpecific.clazz = Nil,
        .number = Packet_FieldNumber_Sequence,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Packet__storage_, sequence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "sourcePort",
        .dataTypeSpecific.clazz = Nil,
        .number = Packet_FieldNumber_SourcePort,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Packet__storage_, sourcePort),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sourceChannel",
        .dataTypeSpecific.clazz = Nil,
        .number = Packet_FieldNumber_SourceChannel,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Packet__storage_, sourceChannel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "destinationPort",
        .dataTypeSpecific.clazz = Nil,
        .number = Packet_FieldNumber_DestinationPort,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Packet__storage_, destinationPort),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "destinationChannel",
        .dataTypeSpecific.clazz = Nil,
        .number = Packet_FieldNumber_DestinationChannel,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Packet__storage_, destinationChannel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = Packet_FieldNumber_Data_p,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Packet__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "timeoutHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = Packet_FieldNumber_TimeoutHeight,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Packet__storage_, timeoutHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "timeoutTimestamp",
        .dataTypeSpecific.clazz = Nil,
        .number = Packet_FieldNumber_TimeoutTimestamp,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Packet__storage_, timeoutTimestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Packet)
                                   messageName:@"Packet"
                               fileDescription:&ChannelRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Packet__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PacketState

@implementation PacketState

@dynamic portId;
@dynamic channelId;
@dynamic sequence;
@dynamic data_p;

typedef struct PacketState__storage_ {
  uint32_t _has_storage_[1];
  NSString *portId;
  NSString *channelId;
  NSData *data_p;
  uint64_t sequence;
} PacketState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "portId",
        .dataTypeSpecific.clazz = Nil,
        .number = PacketState_FieldNumber_PortId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PacketState__storage_, portId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = PacketState_FieldNumber_ChannelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PacketState__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sequence",
        .dataTypeSpecific.clazz = Nil,
        .number = PacketState_FieldNumber_Sequence,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PacketState__storage_, sequence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = PacketState_FieldNumber_Data_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PacketState__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(PacketState)
                                   messageName:@"PacketState"
                               fileDescription:&ChannelRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PacketState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PacketId

@implementation PacketId

@dynamic portId;
@dynamic channelId;
@dynamic sequence;

typedef struct PacketId__storage_ {
  uint32_t _has_storage_[1];
  NSString *portId;
  NSString *channelId;
  uint64_t sequence;
} PacketId__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "portId",
        .dataTypeSpecific.clazz = Nil,
        .number = PacketId_FieldNumber_PortId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PacketId__storage_, portId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = PacketId_FieldNumber_ChannelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PacketId__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sequence",
        .dataTypeSpecific.clazz = Nil,
        .number = PacketId_FieldNumber_Sequence,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PacketId__storage_, sequence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(PacketId)
                                   messageName:@"PacketId"
                               fileDescription:&ChannelRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PacketId__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Acknowledgement

@implementation Acknowledgement

@dynamic responseOneOfCase;
@dynamic result;
@dynamic error;

typedef struct Acknowledgement__storage_ {
  uint32_t _has_storage_[2];
  NSData *result;
  NSString *error;
} Acknowledgement__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.clazz = Nil,
        .number = Acknowledgement_FieldNumber_Result,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Acknowledgement__storage_, result),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "error",
        .dataTypeSpecific.clazz = Nil,
        .number = Acknowledgement_FieldNumber_Error,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Acknowledgement__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Acknowledgement)
                                   messageName:@"Acknowledgement"
                               fileDescription:&ChannelRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Acknowledgement__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    static const char *oneofs[] = {
      "response",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Acknowledgement_ClearResponseOneOfCase(Acknowledgement *message) {
  GPBDescriptor *descriptor = [Acknowledgement descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - Timeout

@implementation Timeout

@dynamic hasHeight, height;
@dynamic timestamp;

typedef struct Timeout__storage_ {
  uint32_t _has_storage_[1];
  Height *height;
  uint64_t timestamp;
} Timeout__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "height",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = Timeout_FieldNumber_Height,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Timeout__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.clazz = Nil,
        .number = Timeout_FieldNumber_Timestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Timeout__storage_, timestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Timeout)
                                   messageName:@"Timeout"
                               fileDescription:&ChannelRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Timeout__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
