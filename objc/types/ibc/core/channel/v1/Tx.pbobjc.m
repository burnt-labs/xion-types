// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: ibc/core/channel/v1/tx.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import <stdatomic.h>

#import "ibc/core/channel/v1/Tx.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Channel);
GPBObjCClassDeclaration(Height);
GPBObjCClassDeclaration(MsgAcknowledgement);
GPBObjCClassDeclaration(MsgAcknowledgementResponse);
GPBObjCClassDeclaration(MsgChannelCloseConfirm);
GPBObjCClassDeclaration(MsgChannelCloseConfirmResponse);
GPBObjCClassDeclaration(MsgChannelCloseInit);
GPBObjCClassDeclaration(MsgChannelCloseInitResponse);
GPBObjCClassDeclaration(MsgChannelOpenAck);
GPBObjCClassDeclaration(MsgChannelOpenAckResponse);
GPBObjCClassDeclaration(MsgChannelOpenConfirm);
GPBObjCClassDeclaration(MsgChannelOpenConfirmResponse);
GPBObjCClassDeclaration(MsgChannelOpenInit);
GPBObjCClassDeclaration(MsgChannelOpenInitResponse);
GPBObjCClassDeclaration(MsgChannelOpenTry);
GPBObjCClassDeclaration(MsgChannelOpenTryResponse);
GPBObjCClassDeclaration(MsgRecvPacket);
GPBObjCClassDeclaration(MsgRecvPacketResponse);
GPBObjCClassDeclaration(MsgTimeout);
GPBObjCClassDeclaration(MsgTimeoutOnClose);
GPBObjCClassDeclaration(MsgTimeoutOnCloseResponse);
GPBObjCClassDeclaration(MsgTimeoutResponse);
GPBObjCClassDeclaration(Packet);

#pragma mark - TxRoot

@implementation TxRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription TxRoot_FileDescription = {
  .package = "ibc.core.channel.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Enum ResponseResultType

GPBEnumDescriptor *ResponseResultType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "ResponseResultTypeUnspecified\000ResponseRe"
        "sultTypeNoop\000ResponseResultTypeSuccess\000R"
        "esponseResultTypeFailure\000";
    static const int32_t values[] = {
        ResponseResultType_ResponseResultTypeUnspecified,
        ResponseResultType_ResponseResultTypeNoop,
        ResponseResultType_ResponseResultTypeSuccess,
        ResponseResultType_ResponseResultTypeFailure,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ResponseResultType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ResponseResultType_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ResponseResultType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ResponseResultType_ResponseResultTypeUnspecified:
    case ResponseResultType_ResponseResultTypeNoop:
    case ResponseResultType_ResponseResultTypeSuccess:
    case ResponseResultType_ResponseResultTypeFailure:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - MsgChannelOpenInit

@implementation MsgChannelOpenInit

@dynamic portId;
@dynamic hasChannel, channel;
@dynamic signer;

typedef struct MsgChannelOpenInit__storage_ {
  uint32_t _has_storage_[1];
  NSString *portId;
  Channel *channel;
  NSString *signer;
} MsgChannelOpenInit__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "portId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgChannelOpenInit_FieldNumber_PortId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgChannelOpenInit__storage_, portId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channel",
        .dataTypeSpecific.clazz = GPBObjCClass(Channel),
        .number = MsgChannelOpenInit_FieldNumber_Channel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgChannelOpenInit__storage_, channel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgChannelOpenInit_FieldNumber_Signer,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgChannelOpenInit__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgChannelOpenInit)
                                   messageName:@"MsgChannelOpenInit"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgChannelOpenInit__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgChannelOpenInitResponse

@implementation MsgChannelOpenInitResponse

@dynamic channelId;
@dynamic version;

typedef struct MsgChannelOpenInitResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *channelId;
  NSString *version;
} MsgChannelOpenInitResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgChannelOpenInitResponse_FieldNumber_ChannelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgChannelOpenInitResponse__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgChannelOpenInitResponse_FieldNumber_Version,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgChannelOpenInitResponse__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgChannelOpenInitResponse)
                                   messageName:@"MsgChannelOpenInitResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgChannelOpenInitResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgChannelOpenTry

@implementation MsgChannelOpenTry

@dynamic portId;
@dynamic previousChannelId;
@dynamic hasChannel, channel;
@dynamic counterpartyVersion;
@dynamic proofInit;
@dynamic hasProofHeight, proofHeight;
@dynamic signer;

typedef struct MsgChannelOpenTry__storage_ {
  uint32_t _has_storage_[1];
  NSString *portId;
  NSString *previousChannelId;
  Channel *channel;
  NSString *counterpartyVersion;
  NSData *proofInit;
  Height *proofHeight;
  NSString *signer;
} MsgChannelOpenTry__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "portId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgChannelOpenTry_FieldNumber_PortId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgChannelOpenTry__storage_, portId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "previousChannelId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgChannelOpenTry_FieldNumber_PreviousChannelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgChannelOpenTry__storage_, previousChannelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channel",
        .dataTypeSpecific.clazz = GPBObjCClass(Channel),
        .number = MsgChannelOpenTry_FieldNumber_Channel,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgChannelOpenTry__storage_, channel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "counterpartyVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgChannelOpenTry_FieldNumber_CounterpartyVersion,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgChannelOpenTry__storage_, counterpartyVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "proofInit",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgChannelOpenTry_FieldNumber_ProofInit,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MsgChannelOpenTry__storage_, proofInit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = MsgChannelOpenTry_FieldNumber_ProofHeight,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MsgChannelOpenTry__storage_, proofHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgChannelOpenTry_FieldNumber_Signer,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(MsgChannelOpenTry__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgChannelOpenTry)
                                   messageName:@"MsgChannelOpenTry"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgChannelOpenTry__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgChannelOpenTryResponse

@implementation MsgChannelOpenTryResponse

@dynamic version;
@dynamic channelId;

typedef struct MsgChannelOpenTryResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *version;
  NSString *channelId;
} MsgChannelOpenTryResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "version",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgChannelOpenTryResponse_FieldNumber_Version,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgChannelOpenTryResponse__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgChannelOpenTryResponse_FieldNumber_ChannelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgChannelOpenTryResponse__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgChannelOpenTryResponse)
                                   messageName:@"MsgChannelOpenTryResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgChannelOpenTryResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgChannelOpenAck

@implementation MsgChannelOpenAck

@dynamic portId;
@dynamic channelId;
@dynamic counterpartyChannelId;
@dynamic counterpartyVersion;
@dynamic proofTry;
@dynamic hasProofHeight, proofHeight;
@dynamic signer;

typedef struct MsgChannelOpenAck__storage_ {
  uint32_t _has_storage_[1];
  NSString *portId;
  NSString *channelId;
  NSString *counterpartyChannelId;
  NSString *counterpartyVersion;
  NSData *proofTry;
  Height *proofHeight;
  NSString *signer;
} MsgChannelOpenAck__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "portId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgChannelOpenAck_FieldNumber_PortId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgChannelOpenAck__storage_, portId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgChannelOpenAck_FieldNumber_ChannelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgChannelOpenAck__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "counterpartyChannelId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgChannelOpenAck_FieldNumber_CounterpartyChannelId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgChannelOpenAck__storage_, counterpartyChannelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "counterpartyVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgChannelOpenAck_FieldNumber_CounterpartyVersion,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgChannelOpenAck__storage_, counterpartyVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "proofTry",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgChannelOpenAck_FieldNumber_ProofTry,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MsgChannelOpenAck__storage_, proofTry),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = MsgChannelOpenAck_FieldNumber_ProofHeight,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MsgChannelOpenAck__storage_, proofHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgChannelOpenAck_FieldNumber_Signer,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(MsgChannelOpenAck__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgChannelOpenAck)
                                   messageName:@"MsgChannelOpenAck"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgChannelOpenAck__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgChannelOpenAckResponse

@implementation MsgChannelOpenAckResponse


typedef struct MsgChannelOpenAckResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgChannelOpenAckResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgChannelOpenAckResponse)
                                   messageName:@"MsgChannelOpenAckResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgChannelOpenAckResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgChannelOpenConfirm

@implementation MsgChannelOpenConfirm

@dynamic portId;
@dynamic channelId;
@dynamic proofAck;
@dynamic hasProofHeight, proofHeight;
@dynamic signer;

typedef struct MsgChannelOpenConfirm__storage_ {
  uint32_t _has_storage_[1];
  NSString *portId;
  NSString *channelId;
  NSData *proofAck;
  Height *proofHeight;
  NSString *signer;
} MsgChannelOpenConfirm__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "portId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgChannelOpenConfirm_FieldNumber_PortId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgChannelOpenConfirm__storage_, portId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgChannelOpenConfirm_FieldNumber_ChannelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgChannelOpenConfirm__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "proofAck",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgChannelOpenConfirm_FieldNumber_ProofAck,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgChannelOpenConfirm__storage_, proofAck),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = MsgChannelOpenConfirm_FieldNumber_ProofHeight,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgChannelOpenConfirm__storage_, proofHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgChannelOpenConfirm_FieldNumber_Signer,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MsgChannelOpenConfirm__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgChannelOpenConfirm)
                                   messageName:@"MsgChannelOpenConfirm"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgChannelOpenConfirm__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgChannelOpenConfirmResponse

@implementation MsgChannelOpenConfirmResponse


typedef struct MsgChannelOpenConfirmResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgChannelOpenConfirmResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgChannelOpenConfirmResponse)
                                   messageName:@"MsgChannelOpenConfirmResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgChannelOpenConfirmResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgChannelCloseInit

@implementation MsgChannelCloseInit

@dynamic portId;
@dynamic channelId;
@dynamic signer;

typedef struct MsgChannelCloseInit__storage_ {
  uint32_t _has_storage_[1];
  NSString *portId;
  NSString *channelId;
  NSString *signer;
} MsgChannelCloseInit__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "portId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgChannelCloseInit_FieldNumber_PortId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgChannelCloseInit__storage_, portId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgChannelCloseInit_FieldNumber_ChannelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgChannelCloseInit__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgChannelCloseInit_FieldNumber_Signer,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgChannelCloseInit__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgChannelCloseInit)
                                   messageName:@"MsgChannelCloseInit"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgChannelCloseInit__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgChannelCloseInitResponse

@implementation MsgChannelCloseInitResponse


typedef struct MsgChannelCloseInitResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgChannelCloseInitResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgChannelCloseInitResponse)
                                   messageName:@"MsgChannelCloseInitResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgChannelCloseInitResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgChannelCloseConfirm

@implementation MsgChannelCloseConfirm

@dynamic portId;
@dynamic channelId;
@dynamic proofInit;
@dynamic hasProofHeight, proofHeight;
@dynamic signer;

typedef struct MsgChannelCloseConfirm__storage_ {
  uint32_t _has_storage_[1];
  NSString *portId;
  NSString *channelId;
  NSData *proofInit;
  Height *proofHeight;
  NSString *signer;
} MsgChannelCloseConfirm__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "portId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgChannelCloseConfirm_FieldNumber_PortId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgChannelCloseConfirm__storage_, portId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgChannelCloseConfirm_FieldNumber_ChannelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgChannelCloseConfirm__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "proofInit",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgChannelCloseConfirm_FieldNumber_ProofInit,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgChannelCloseConfirm__storage_, proofInit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = MsgChannelCloseConfirm_FieldNumber_ProofHeight,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgChannelCloseConfirm__storage_, proofHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgChannelCloseConfirm_FieldNumber_Signer,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MsgChannelCloseConfirm__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgChannelCloseConfirm)
                                   messageName:@"MsgChannelCloseConfirm"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgChannelCloseConfirm__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgChannelCloseConfirmResponse

@implementation MsgChannelCloseConfirmResponse


typedef struct MsgChannelCloseConfirmResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgChannelCloseConfirmResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgChannelCloseConfirmResponse)
                                   messageName:@"MsgChannelCloseConfirmResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgChannelCloseConfirmResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgRecvPacket

@implementation MsgRecvPacket

@dynamic hasPacket, packet;
@dynamic proofCommitment;
@dynamic hasProofHeight, proofHeight;
@dynamic signer;

typedef struct MsgRecvPacket__storage_ {
  uint32_t _has_storage_[1];
  Packet *packet;
  NSData *proofCommitment;
  Height *proofHeight;
  NSString *signer;
} MsgRecvPacket__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "packet",
        .dataTypeSpecific.clazz = GPBObjCClass(Packet),
        .number = MsgRecvPacket_FieldNumber_Packet,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgRecvPacket__storage_, packet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "proofCommitment",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgRecvPacket_FieldNumber_ProofCommitment,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgRecvPacket__storage_, proofCommitment),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = MsgRecvPacket_FieldNumber_ProofHeight,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgRecvPacket__storage_, proofHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgRecvPacket_FieldNumber_Signer,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgRecvPacket__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgRecvPacket)
                                   messageName:@"MsgRecvPacket"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgRecvPacket__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgRecvPacketResponse

@implementation MsgRecvPacketResponse

@dynamic result;

typedef struct MsgRecvPacketResponse__storage_ {
  uint32_t _has_storage_[1];
  ResponseResultType result;
} MsgRecvPacketResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = ResponseResultType_EnumDescriptor,
        .number = MsgRecvPacketResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgRecvPacketResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgRecvPacketResponse)
                                   messageName:@"MsgRecvPacketResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgRecvPacketResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MsgRecvPacketResponse_Result_RawValue(MsgRecvPacketResponse *message) {
  GPBDescriptor *descriptor = [MsgRecvPacketResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgRecvPacketResponse_FieldNumber_Result];
  return GPBGetMessageRawEnumField(message, field);
}

void SetMsgRecvPacketResponse_Result_RawValue(MsgRecvPacketResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [MsgRecvPacketResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgRecvPacketResponse_FieldNumber_Result];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - MsgTimeout

@implementation MsgTimeout

@dynamic hasPacket, packet;
@dynamic proofUnreceived;
@dynamic hasProofHeight, proofHeight;
@dynamic nextSequenceRecv;
@dynamic signer;

typedef struct MsgTimeout__storage_ {
  uint32_t _has_storage_[1];
  Packet *packet;
  NSData *proofUnreceived;
  Height *proofHeight;
  NSString *signer;
  uint64_t nextSequenceRecv;
} MsgTimeout__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "packet",
        .dataTypeSpecific.clazz = GPBObjCClass(Packet),
        .number = MsgTimeout_FieldNumber_Packet,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgTimeout__storage_, packet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "proofUnreceived",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgTimeout_FieldNumber_ProofUnreceived,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgTimeout__storage_, proofUnreceived),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = MsgTimeout_FieldNumber_ProofHeight,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgTimeout__storage_, proofHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextSequenceRecv",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgTimeout_FieldNumber_NextSequenceRecv,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgTimeout__storage_, nextSequenceRecv),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgTimeout_FieldNumber_Signer,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MsgTimeout__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgTimeout)
                                   messageName:@"MsgTimeout"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgTimeout__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgTimeoutResponse

@implementation MsgTimeoutResponse

@dynamic result;

typedef struct MsgTimeoutResponse__storage_ {
  uint32_t _has_storage_[1];
  ResponseResultType result;
} MsgTimeoutResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = ResponseResultType_EnumDescriptor,
        .number = MsgTimeoutResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgTimeoutResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgTimeoutResponse)
                                   messageName:@"MsgTimeoutResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgTimeoutResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MsgTimeoutResponse_Result_RawValue(MsgTimeoutResponse *message) {
  GPBDescriptor *descriptor = [MsgTimeoutResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgTimeoutResponse_FieldNumber_Result];
  return GPBGetMessageRawEnumField(message, field);
}

void SetMsgTimeoutResponse_Result_RawValue(MsgTimeoutResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [MsgTimeoutResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgTimeoutResponse_FieldNumber_Result];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - MsgTimeoutOnClose

@implementation MsgTimeoutOnClose

@dynamic hasPacket, packet;
@dynamic proofUnreceived;
@dynamic proofClose;
@dynamic hasProofHeight, proofHeight;
@dynamic nextSequenceRecv;
@dynamic signer;

typedef struct MsgTimeoutOnClose__storage_ {
  uint32_t _has_storage_[1];
  Packet *packet;
  NSData *proofUnreceived;
  NSData *proofClose;
  Height *proofHeight;
  NSString *signer;
  uint64_t nextSequenceRecv;
} MsgTimeoutOnClose__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "packet",
        .dataTypeSpecific.clazz = GPBObjCClass(Packet),
        .number = MsgTimeoutOnClose_FieldNumber_Packet,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgTimeoutOnClose__storage_, packet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "proofUnreceived",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgTimeoutOnClose_FieldNumber_ProofUnreceived,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgTimeoutOnClose__storage_, proofUnreceived),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofClose",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgTimeoutOnClose_FieldNumber_ProofClose,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgTimeoutOnClose__storage_, proofClose),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = MsgTimeoutOnClose_FieldNumber_ProofHeight,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgTimeoutOnClose__storage_, proofHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextSequenceRecv",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgTimeoutOnClose_FieldNumber_NextSequenceRecv,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MsgTimeoutOnClose__storage_, nextSequenceRecv),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgTimeoutOnClose_FieldNumber_Signer,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MsgTimeoutOnClose__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgTimeoutOnClose)
                                   messageName:@"MsgTimeoutOnClose"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgTimeoutOnClose__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgTimeoutOnCloseResponse

@implementation MsgTimeoutOnCloseResponse

@dynamic result;

typedef struct MsgTimeoutOnCloseResponse__storage_ {
  uint32_t _has_storage_[1];
  ResponseResultType result;
} MsgTimeoutOnCloseResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = ResponseResultType_EnumDescriptor,
        .number = MsgTimeoutOnCloseResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgTimeoutOnCloseResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgTimeoutOnCloseResponse)
                                   messageName:@"MsgTimeoutOnCloseResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgTimeoutOnCloseResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MsgTimeoutOnCloseResponse_Result_RawValue(MsgTimeoutOnCloseResponse *message) {
  GPBDescriptor *descriptor = [MsgTimeoutOnCloseResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgTimeoutOnCloseResponse_FieldNumber_Result];
  return GPBGetMessageRawEnumField(message, field);
}

void SetMsgTimeoutOnCloseResponse_Result_RawValue(MsgTimeoutOnCloseResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [MsgTimeoutOnCloseResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgTimeoutOnCloseResponse_FieldNumber_Result];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - MsgAcknowledgement

@implementation MsgAcknowledgement

@dynamic hasPacket, packet;
@dynamic acknowledgement;
@dynamic proofAcked;
@dynamic hasProofHeight, proofHeight;
@dynamic signer;

typedef struct MsgAcknowledgement__storage_ {
  uint32_t _has_storage_[1];
  Packet *packet;
  NSData *acknowledgement;
  NSData *proofAcked;
  Height *proofHeight;
  NSString *signer;
} MsgAcknowledgement__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "packet",
        .dataTypeSpecific.clazz = GPBObjCClass(Packet),
        .number = MsgAcknowledgement_FieldNumber_Packet,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgAcknowledgement__storage_, packet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "acknowledgement",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgAcknowledgement_FieldNumber_Acknowledgement,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgAcknowledgement__storage_, acknowledgement),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofAcked",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgAcknowledgement_FieldNumber_ProofAcked,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgAcknowledgement__storage_, proofAcked),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = MsgAcknowledgement_FieldNumber_ProofHeight,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgAcknowledgement__storage_, proofHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgAcknowledgement_FieldNumber_Signer,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MsgAcknowledgement__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgAcknowledgement)
                                   messageName:@"MsgAcknowledgement"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgAcknowledgement__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgAcknowledgementResponse

@implementation MsgAcknowledgementResponse

@dynamic result;

typedef struct MsgAcknowledgementResponse__storage_ {
  uint32_t _has_storage_[1];
  ResponseResultType result;
} MsgAcknowledgementResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = ResponseResultType_EnumDescriptor,
        .number = MsgAcknowledgementResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgAcknowledgementResponse__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgAcknowledgementResponse)
                                   messageName:@"MsgAcknowledgementResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgAcknowledgementResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MsgAcknowledgementResponse_Result_RawValue(MsgAcknowledgementResponse *message) {
  GPBDescriptor *descriptor = [MsgAcknowledgementResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgAcknowledgementResponse_FieldNumber_Result];
  return GPBGetMessageRawEnumField(message, field);
}

void SetMsgAcknowledgementResponse_Result_RawValue(MsgAcknowledgementResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [MsgAcknowledgementResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgAcknowledgementResponse_FieldNumber_Result];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
