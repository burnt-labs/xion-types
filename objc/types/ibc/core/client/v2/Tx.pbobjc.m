// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: ibc/core/client/v2/tx.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "ibc/core/client/v2/Tx.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Config);
GPBObjCClassDeclaration(MsgRegisterCounterparty);
GPBObjCClassDeclaration(MsgRegisterCounterpartyResponse);
GPBObjCClassDeclaration(MsgUpdateClientConfig);
GPBObjCClassDeclaration(MsgUpdateClientConfigResponse);

#pragma mark - TxRoot

@implementation TxRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription TxRoot_FileDescription = {
  .package = "ibc.core.client.v2",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - MsgRegisterCounterparty

@implementation MsgRegisterCounterparty

@dynamic clientId;
@dynamic counterpartyMerklePrefixArray, counterpartyMerklePrefixArray_Count;
@dynamic counterpartyClientId;
@dynamic signer;

typedef struct MsgRegisterCounterparty__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  NSMutableArray *counterpartyMerklePrefixArray;
  NSString *counterpartyClientId;
  NSString *signer;
} MsgRegisterCounterparty__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgRegisterCounterparty_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgRegisterCounterparty__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "counterpartyMerklePrefixArray",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgRegisterCounterparty_FieldNumber_CounterpartyMerklePrefixArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MsgRegisterCounterparty__storage_, counterpartyMerklePrefixArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "counterpartyClientId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgRegisterCounterparty_FieldNumber_CounterpartyClientId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgRegisterCounterparty__storage_, counterpartyClientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgRegisterCounterparty_FieldNumber_Signer,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgRegisterCounterparty__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgRegisterCounterparty)
                                   messageName:@"MsgRegisterCounterparty"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgRegisterCounterparty__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgRegisterCounterpartyResponse

@implementation MsgRegisterCounterpartyResponse


typedef struct MsgRegisterCounterpartyResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgRegisterCounterpartyResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgRegisterCounterpartyResponse)
                                   messageName:@"MsgRegisterCounterpartyResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgRegisterCounterpartyResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateClientConfig

@implementation MsgUpdateClientConfig

@dynamic clientId;
@dynamic hasConfig, config;
@dynamic signer;

typedef struct MsgUpdateClientConfig__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  Config *config;
  NSString *signer;
} MsgUpdateClientConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateClientConfig_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgUpdateClientConfig__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "config",
        .dataTypeSpecific.clazz = GPBObjCClass(Config),
        .number = MsgUpdateClientConfig_FieldNumber_Config,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgUpdateClientConfig__storage_, config),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateClientConfig_FieldNumber_Signer,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgUpdateClientConfig__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateClientConfig)
                                   messageName:@"MsgUpdateClientConfig"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgUpdateClientConfig__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateClientConfigResponse

@implementation MsgUpdateClientConfigResponse


typedef struct MsgUpdateClientConfigResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgUpdateClientConfigResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateClientConfigResponse)
                                   messageName:@"MsgUpdateClientConfigResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgUpdateClientConfigResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
