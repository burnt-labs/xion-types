// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: ibc/core/client/v1/client.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "ibc/core/client/v1/Client.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ClientConsensusStates);
GPBObjCClassDeclaration(ConsensusStateWithHeight);
GPBObjCClassDeclaration(GPBAny);
GPBObjCClassDeclaration(Height);
GPBObjCClassDeclaration(IdentifiedClientState);
GPBObjCClassDeclaration(Params);

#pragma mark - ClientRoot

@implementation ClientRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription ClientRoot_FileDescription = {
  .package = "ibc.core.client.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - IdentifiedClientState

@implementation IdentifiedClientState

@dynamic clientId;
@dynamic hasClientState, clientState;

typedef struct IdentifiedClientState__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  GPBAny *clientState;
} IdentifiedClientState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = IdentifiedClientState_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IdentifiedClientState__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientState",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = IdentifiedClientState_FieldNumber_ClientState,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IdentifiedClientState__storage_, clientState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(IdentifiedClientState)
                                   messageName:@"IdentifiedClientState"
                               fileDescription:&ClientRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IdentifiedClientState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ConsensusStateWithHeight

@implementation ConsensusStateWithHeight

@dynamic hasHeight, height;
@dynamic hasConsensusState, consensusState;

typedef struct ConsensusStateWithHeight__storage_ {
  uint32_t _has_storage_[1];
  Height *height;
  GPBAny *consensusState;
} ConsensusStateWithHeight__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "height",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = ConsensusStateWithHeight_FieldNumber_Height,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ConsensusStateWithHeight__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "consensusState",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = ConsensusStateWithHeight_FieldNumber_ConsensusState,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ConsensusStateWithHeight__storage_, consensusState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ConsensusStateWithHeight)
                                   messageName:@"ConsensusStateWithHeight"
                               fileDescription:&ClientRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ConsensusStateWithHeight__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ClientConsensusStates

@implementation ClientConsensusStates

@dynamic clientId;
@dynamic consensusStatesArray, consensusStatesArray_Count;

typedef struct ClientConsensusStates__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  NSMutableArray *consensusStatesArray;
} ClientConsensusStates__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = ClientConsensusStates_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ClientConsensusStates__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "consensusStatesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ConsensusStateWithHeight),
        .number = ClientConsensusStates_FieldNumber_ConsensusStatesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ClientConsensusStates__storage_, consensusStatesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ClientConsensusStates)
                                   messageName:@"ClientConsensusStates"
                               fileDescription:&ClientRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ClientConsensusStates__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Height

@implementation Height

@dynamic revisionNumber;
@dynamic revisionHeight;

typedef struct Height__storage_ {
  uint32_t _has_storage_[1];
  uint64_t revisionNumber;
  uint64_t revisionHeight;
} Height__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "revisionNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = Height_FieldNumber_RevisionNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Height__storage_, revisionNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "revisionHeight",
        .dataTypeSpecific.clazz = Nil,
        .number = Height_FieldNumber_RevisionHeight,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Height__storage_, revisionHeight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Height)
                                   messageName:@"Height"
                               fileDescription:&ClientRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Height__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Params

@implementation Params

@dynamic allowedClientsArray, allowedClientsArray_Count;

typedef struct Params__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *allowedClientsArray;
} Params__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "allowedClientsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = Params_FieldNumber_AllowedClientsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Params__storage_, allowedClientsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Params)
                                   messageName:@"Params"
                               fileDescription:&ClientRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Params__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
