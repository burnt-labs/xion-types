// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: ibc/core/client/v1/query.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "ibc/core/client/v1/Query.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ConsensusStateWithHeight);
GPBObjCClassDeclaration(GPBAny);
GPBObjCClassDeclaration(Height);
GPBObjCClassDeclaration(IdentifiedClientState);
GPBObjCClassDeclaration(MerklePath);
GPBObjCClassDeclaration(PageRequest);
GPBObjCClassDeclaration(PageResponse);
GPBObjCClassDeclaration(Params);
GPBObjCClassDeclaration(QueryClientCreatorRequest);
GPBObjCClassDeclaration(QueryClientCreatorResponse);
GPBObjCClassDeclaration(QueryClientParamsRequest);
GPBObjCClassDeclaration(QueryClientParamsResponse);
GPBObjCClassDeclaration(QueryClientStateRequest);
GPBObjCClassDeclaration(QueryClientStateResponse);
GPBObjCClassDeclaration(QueryClientStatesRequest);
GPBObjCClassDeclaration(QueryClientStatesResponse);
GPBObjCClassDeclaration(QueryClientStatusRequest);
GPBObjCClassDeclaration(QueryClientStatusResponse);
GPBObjCClassDeclaration(QueryConsensusStateHeightsRequest);
GPBObjCClassDeclaration(QueryConsensusStateHeightsResponse);
GPBObjCClassDeclaration(QueryConsensusStateRequest);
GPBObjCClassDeclaration(QueryConsensusStateResponse);
GPBObjCClassDeclaration(QueryConsensusStatesRequest);
GPBObjCClassDeclaration(QueryConsensusStatesResponse);
GPBObjCClassDeclaration(QueryUpgradedClientStateRequest);
GPBObjCClassDeclaration(QueryUpgradedClientStateResponse);
GPBObjCClassDeclaration(QueryUpgradedConsensusStateRequest);
GPBObjCClassDeclaration(QueryUpgradedConsensusStateResponse);
GPBObjCClassDeclaration(QueryVerifyMembershipRequest);
GPBObjCClassDeclaration(QueryVerifyMembershipResponse);

#pragma mark - QueryRoot

@implementation QueryRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription QueryRoot_FileDescription = {
  .package = "ibc.core.client.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - QueryClientStateRequest

@implementation QueryClientStateRequest

@dynamic clientId;

typedef struct QueryClientStateRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
} QueryClientStateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryClientStateRequest_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryClientStateRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryClientStateRequest)
                                   messageName:@"QueryClientStateRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryClientStateRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryClientStateResponse

@implementation QueryClientStateResponse

@dynamic hasClientState, clientState;
@dynamic proof;
@dynamic hasProofHeight, proofHeight;

typedef struct QueryClientStateResponse__storage_ {
  uint32_t _has_storage_[1];
  GPBAny *clientState;
  NSData *proof;
  Height *proofHeight;
} QueryClientStateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientState",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = QueryClientStateResponse_FieldNumber_ClientState,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryClientStateResponse__storage_, clientState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "proof",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryClientStateResponse_FieldNumber_Proof,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryClientStateResponse__storage_, proof),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = QueryClientStateResponse_FieldNumber_ProofHeight,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(QueryClientStateResponse__storage_, proofHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryClientStateResponse)
                                   messageName:@"QueryClientStateResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryClientStateResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryClientStatesRequest

@implementation QueryClientStatesRequest

@dynamic hasPagination, pagination;

typedef struct QueryClientStatesRequest__storage_ {
  uint32_t _has_storage_[1];
  PageRequest *pagination;
} QueryClientStatesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageRequest),
        .number = QueryClientStatesRequest_FieldNumber_Pagination,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryClientStatesRequest__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryClientStatesRequest)
                                   messageName:@"QueryClientStatesRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryClientStatesRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryClientStatesResponse

@implementation QueryClientStatesResponse

@dynamic clientStatesArray, clientStatesArray_Count;
@dynamic hasPagination, pagination;

typedef struct QueryClientStatesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *clientStatesArray;
  PageResponse *pagination;
} QueryClientStatesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientStatesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(IdentifiedClientState),
        .number = QueryClientStatesResponse_FieldNumber_ClientStatesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryClientStatesResponse__storage_, clientStatesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageResponse),
        .number = QueryClientStatesResponse_FieldNumber_Pagination,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryClientStatesResponse__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryClientStatesResponse)
                                   messageName:@"QueryClientStatesResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryClientStatesResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryConsensusStateRequest

@implementation QueryConsensusStateRequest

@dynamic clientId;
@dynamic revisionNumber;
@dynamic revisionHeight;
@dynamic latestHeight;

typedef struct QueryConsensusStateRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  uint64_t revisionNumber;
  uint64_t revisionHeight;
} QueryConsensusStateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryConsensusStateRequest_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryConsensusStateRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "revisionNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryConsensusStateRequest_FieldNumber_RevisionNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryConsensusStateRequest__storage_, revisionNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "revisionHeight",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryConsensusStateRequest_FieldNumber_RevisionHeight,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(QueryConsensusStateRequest__storage_, revisionHeight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "latestHeight",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryConsensusStateRequest_FieldNumber_LatestHeight,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryConsensusStateRequest)
                                   messageName:@"QueryConsensusStateRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryConsensusStateRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryConsensusStateResponse

@implementation QueryConsensusStateResponse

@dynamic hasConsensusState, consensusState;
@dynamic proof;
@dynamic hasProofHeight, proofHeight;

typedef struct QueryConsensusStateResponse__storage_ {
  uint32_t _has_storage_[1];
  GPBAny *consensusState;
  NSData *proof;
  Height *proofHeight;
} QueryConsensusStateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "consensusState",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = QueryConsensusStateResponse_FieldNumber_ConsensusState,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryConsensusStateResponse__storage_, consensusState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "proof",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryConsensusStateResponse_FieldNumber_Proof,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryConsensusStateResponse__storage_, proof),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = QueryConsensusStateResponse_FieldNumber_ProofHeight,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(QueryConsensusStateResponse__storage_, proofHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryConsensusStateResponse)
                                   messageName:@"QueryConsensusStateResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryConsensusStateResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryConsensusStatesRequest

@implementation QueryConsensusStatesRequest

@dynamic clientId;
@dynamic hasPagination, pagination;

typedef struct QueryConsensusStatesRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  PageRequest *pagination;
} QueryConsensusStatesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryConsensusStatesRequest_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryConsensusStatesRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageRequest),
        .number = QueryConsensusStatesRequest_FieldNumber_Pagination,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryConsensusStatesRequest__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryConsensusStatesRequest)
                                   messageName:@"QueryConsensusStatesRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryConsensusStatesRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryConsensusStatesResponse

@implementation QueryConsensusStatesResponse

@dynamic consensusStatesArray, consensusStatesArray_Count;
@dynamic hasPagination, pagination;

typedef struct QueryConsensusStatesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *consensusStatesArray;
  PageResponse *pagination;
} QueryConsensusStatesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "consensusStatesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ConsensusStateWithHeight),
        .number = QueryConsensusStatesResponse_FieldNumber_ConsensusStatesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryConsensusStatesResponse__storage_, consensusStatesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageResponse),
        .number = QueryConsensusStatesResponse_FieldNumber_Pagination,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryConsensusStatesResponse__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryConsensusStatesResponse)
                                   messageName:@"QueryConsensusStatesResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryConsensusStatesResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryConsensusStateHeightsRequest

@implementation QueryConsensusStateHeightsRequest

@dynamic clientId;
@dynamic hasPagination, pagination;

typedef struct QueryConsensusStateHeightsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  PageRequest *pagination;
} QueryConsensusStateHeightsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryConsensusStateHeightsRequest_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryConsensusStateHeightsRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageRequest),
        .number = QueryConsensusStateHeightsRequest_FieldNumber_Pagination,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryConsensusStateHeightsRequest__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryConsensusStateHeightsRequest)
                                   messageName:@"QueryConsensusStateHeightsRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryConsensusStateHeightsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryConsensusStateHeightsResponse

@implementation QueryConsensusStateHeightsResponse

@dynamic consensusStateHeightsArray, consensusStateHeightsArray_Count;
@dynamic hasPagination, pagination;

typedef struct QueryConsensusStateHeightsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *consensusStateHeightsArray;
  PageResponse *pagination;
} QueryConsensusStateHeightsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "consensusStateHeightsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = QueryConsensusStateHeightsResponse_FieldNumber_ConsensusStateHeightsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryConsensusStateHeightsResponse__storage_, consensusStateHeightsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageResponse),
        .number = QueryConsensusStateHeightsResponse_FieldNumber_Pagination,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryConsensusStateHeightsResponse__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryConsensusStateHeightsResponse)
                                   messageName:@"QueryConsensusStateHeightsResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryConsensusStateHeightsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryClientStatusRequest

@implementation QueryClientStatusRequest

@dynamic clientId;

typedef struct QueryClientStatusRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
} QueryClientStatusRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryClientStatusRequest_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryClientStatusRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryClientStatusRequest)
                                   messageName:@"QueryClientStatusRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryClientStatusRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryClientStatusResponse

@implementation QueryClientStatusResponse

@dynamic status;

typedef struct QueryClientStatusResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *status;
} QueryClientStatusResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryClientStatusResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryClientStatusResponse__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryClientStatusResponse)
                                   messageName:@"QueryClientStatusResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryClientStatusResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryClientParamsRequest

@implementation QueryClientParamsRequest


typedef struct QueryClientParamsRequest__storage_ {
  uint32_t _has_storage_[1];
} QueryClientParamsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryClientParamsRequest)
                                   messageName:@"QueryClientParamsRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(QueryClientParamsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryClientParamsResponse

@implementation QueryClientParamsResponse

@dynamic hasParams, params;

typedef struct QueryClientParamsResponse__storage_ {
  uint32_t _has_storage_[1];
  Params *params;
} QueryClientParamsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "params",
        .dataTypeSpecific.clazz = GPBObjCClass(Params),
        .number = QueryClientParamsResponse_FieldNumber_Params,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryClientParamsResponse__storage_, params),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryClientParamsResponse)
                                   messageName:@"QueryClientParamsResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryClientParamsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryClientCreatorRequest

@implementation QueryClientCreatorRequest

@dynamic clientId;

typedef struct QueryClientCreatorRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
} QueryClientCreatorRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryClientCreatorRequest_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryClientCreatorRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryClientCreatorRequest)
                                   messageName:@"QueryClientCreatorRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryClientCreatorRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryClientCreatorResponse

@implementation QueryClientCreatorResponse

@dynamic creator;

typedef struct QueryClientCreatorResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *creator;
} QueryClientCreatorResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "creator",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryClientCreatorResponse_FieldNumber_Creator,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryClientCreatorResponse__storage_, creator),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryClientCreatorResponse)
                                   messageName:@"QueryClientCreatorResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryClientCreatorResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryUpgradedClientStateRequest

@implementation QueryUpgradedClientStateRequest


typedef struct QueryUpgradedClientStateRequest__storage_ {
  uint32_t _has_storage_[1];
} QueryUpgradedClientStateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryUpgradedClientStateRequest)
                                   messageName:@"QueryUpgradedClientStateRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(QueryUpgradedClientStateRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryUpgradedClientStateResponse

@implementation QueryUpgradedClientStateResponse

@dynamic hasUpgradedClientState, upgradedClientState;

typedef struct QueryUpgradedClientStateResponse__storage_ {
  uint32_t _has_storage_[1];
  GPBAny *upgradedClientState;
} QueryUpgradedClientStateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "upgradedClientState",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = QueryUpgradedClientStateResponse_FieldNumber_UpgradedClientState,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryUpgradedClientStateResponse__storage_, upgradedClientState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryUpgradedClientStateResponse)
                                   messageName:@"QueryUpgradedClientStateResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryUpgradedClientStateResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryUpgradedConsensusStateRequest

@implementation QueryUpgradedConsensusStateRequest


typedef struct QueryUpgradedConsensusStateRequest__storage_ {
  uint32_t _has_storage_[1];
} QueryUpgradedConsensusStateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryUpgradedConsensusStateRequest)
                                   messageName:@"QueryUpgradedConsensusStateRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(QueryUpgradedConsensusStateRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryUpgradedConsensusStateResponse

@implementation QueryUpgradedConsensusStateResponse

@dynamic hasUpgradedConsensusState, upgradedConsensusState;

typedef struct QueryUpgradedConsensusStateResponse__storage_ {
  uint32_t _has_storage_[1];
  GPBAny *upgradedConsensusState;
} QueryUpgradedConsensusStateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "upgradedConsensusState",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = QueryUpgradedConsensusStateResponse_FieldNumber_UpgradedConsensusState,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryUpgradedConsensusStateResponse__storage_, upgradedConsensusState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryUpgradedConsensusStateResponse)
                                   messageName:@"QueryUpgradedConsensusStateResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryUpgradedConsensusStateResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryVerifyMembershipRequest

@implementation QueryVerifyMembershipRequest

@dynamic clientId;
@dynamic proof;
@dynamic hasProofHeight, proofHeight;
@dynamic value;
@dynamic timeDelay;
@dynamic blockDelay;
@dynamic hasMerklePath, merklePath;

typedef struct QueryVerifyMembershipRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  NSData *proof;
  Height *proofHeight;
  NSData *value;
  MerklePath *merklePath;
  uint64_t timeDelay;
  uint64_t blockDelay;
} QueryVerifyMembershipRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryVerifyMembershipRequest_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryVerifyMembershipRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "proof",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryVerifyMembershipRequest_FieldNumber_Proof,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryVerifyMembershipRequest__storage_, proof),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = QueryVerifyMembershipRequest_FieldNumber_ProofHeight,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(QueryVerifyMembershipRequest__storage_, proofHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "value",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryVerifyMembershipRequest_FieldNumber_Value,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(QueryVerifyMembershipRequest__storage_, value),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "timeDelay",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryVerifyMembershipRequest_FieldNumber_TimeDelay,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(QueryVerifyMembershipRequest__storage_, timeDelay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "blockDelay",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryVerifyMembershipRequest_FieldNumber_BlockDelay,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(QueryVerifyMembershipRequest__storage_, blockDelay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "merklePath",
        .dataTypeSpecific.clazz = GPBObjCClass(MerklePath),
        .number = QueryVerifyMembershipRequest_FieldNumber_MerklePath,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(QueryVerifyMembershipRequest__storage_, merklePath),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryVerifyMembershipRequest)
                                   messageName:@"QueryVerifyMembershipRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryVerifyMembershipRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryVerifyMembershipResponse

@implementation QueryVerifyMembershipResponse

@dynamic success;

typedef struct QueryVerifyMembershipResponse__storage_ {
  uint32_t _has_storage_[1];
} QueryVerifyMembershipResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryVerifyMembershipResponse_FieldNumber_Success,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryVerifyMembershipResponse)
                                   messageName:@"QueryVerifyMembershipResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryVerifyMembershipResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
