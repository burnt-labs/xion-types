// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: ibc/core/client/v1/tx.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "ibc/core/client/v1/Tx.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(GPBAny);
GPBObjCClassDeclaration(MsgCreateClient);
GPBObjCClassDeclaration(MsgCreateClientResponse);
GPBObjCClassDeclaration(MsgDeleteClientCreator);
GPBObjCClassDeclaration(MsgDeleteClientCreatorResponse);
GPBObjCClassDeclaration(MsgIBCSoftwareUpgrade);
GPBObjCClassDeclaration(MsgIBCSoftwareUpgradeResponse);
GPBObjCClassDeclaration(MsgRecoverClient);
GPBObjCClassDeclaration(MsgRecoverClientResponse);
GPBObjCClassDeclaration(MsgSubmitMisbehaviour);
GPBObjCClassDeclaration(MsgSubmitMisbehaviourResponse);
GPBObjCClassDeclaration(MsgUpdateClient);
GPBObjCClassDeclaration(MsgUpdateClientResponse);
GPBObjCClassDeclaration(MsgUpdateParams);
GPBObjCClassDeclaration(MsgUpdateParamsResponse);
GPBObjCClassDeclaration(MsgUpgradeClient);
GPBObjCClassDeclaration(MsgUpgradeClientResponse);
GPBObjCClassDeclaration(Params);
GPBObjCClassDeclaration(Plan);

#pragma mark - TxRoot

@implementation TxRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription TxRoot_FileDescription = {
  .package = "ibc.core.client.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - MsgCreateClient

@implementation MsgCreateClient

@dynamic hasClientState, clientState;
@dynamic hasConsensusState, consensusState;
@dynamic signer;

typedef struct MsgCreateClient__storage_ {
  uint32_t _has_storage_[1];
  GPBAny *clientState;
  GPBAny *consensusState;
  NSString *signer;
} MsgCreateClient__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientState",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = MsgCreateClient_FieldNumber_ClientState,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgCreateClient__storage_, clientState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "consensusState",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = MsgCreateClient_FieldNumber_ConsensusState,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgCreateClient__storage_, consensusState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgCreateClient_FieldNumber_Signer,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgCreateClient__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgCreateClient)
                                   messageName:@"MsgCreateClient"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgCreateClient__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgCreateClientResponse

@implementation MsgCreateClientResponse

@dynamic clientId;

typedef struct MsgCreateClientResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
} MsgCreateClientResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgCreateClientResponse_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgCreateClientResponse__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgCreateClientResponse)
                                   messageName:@"MsgCreateClientResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgCreateClientResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateClient

@implementation MsgUpdateClient

@dynamic clientId;
@dynamic hasClientMessage, clientMessage;
@dynamic signer;

typedef struct MsgUpdateClient__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  GPBAny *clientMessage;
  NSString *signer;
} MsgUpdateClient__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateClient_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgUpdateClient__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientMessage",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = MsgUpdateClient_FieldNumber_ClientMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgUpdateClient__storage_, clientMessage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateClient_FieldNumber_Signer,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgUpdateClient__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateClient)
                                   messageName:@"MsgUpdateClient"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgUpdateClient__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateClientResponse

@implementation MsgUpdateClientResponse


typedef struct MsgUpdateClientResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgUpdateClientResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateClientResponse)
                                   messageName:@"MsgUpdateClientResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgUpdateClientResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpgradeClient

@implementation MsgUpgradeClient

@dynamic clientId;
@dynamic hasClientState, clientState;
@dynamic hasConsensusState, consensusState;
@dynamic proofUpgradeClient;
@dynamic proofUpgradeConsensusState;
@dynamic signer;

typedef struct MsgUpgradeClient__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  GPBAny *clientState;
  GPBAny *consensusState;
  NSData *proofUpgradeClient;
  NSData *proofUpgradeConsensusState;
  NSString *signer;
} MsgUpgradeClient__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpgradeClient_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgUpgradeClient__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientState",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = MsgUpgradeClient_FieldNumber_ClientState,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgUpgradeClient__storage_, clientState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "consensusState",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = MsgUpgradeClient_FieldNumber_ConsensusState,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgUpgradeClient__storage_, consensusState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "proofUpgradeClient",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpgradeClient_FieldNumber_ProofUpgradeClient,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgUpgradeClient__storage_, proofUpgradeClient),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofUpgradeConsensusState",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpgradeClient_FieldNumber_ProofUpgradeConsensusState,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MsgUpgradeClient__storage_, proofUpgradeConsensusState),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpgradeClient_FieldNumber_Signer,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MsgUpgradeClient__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpgradeClient)
                                   messageName:@"MsgUpgradeClient"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgUpgradeClient__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpgradeClientResponse

@implementation MsgUpgradeClientResponse


typedef struct MsgUpgradeClientResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgUpgradeClientResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpgradeClientResponse)
                                   messageName:@"MsgUpgradeClientResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgUpgradeClientResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgSubmitMisbehaviour

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-implementations"

@implementation MsgSubmitMisbehaviour

@dynamic clientId;
@dynamic hasMisbehaviour, misbehaviour;
@dynamic signer;

typedef struct MsgSubmitMisbehaviour__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  GPBAny *misbehaviour;
  NSString *signer;
} MsgSubmitMisbehaviour__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSubmitMisbehaviour_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgSubmitMisbehaviour__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "misbehaviour",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = MsgSubmitMisbehaviour_FieldNumber_Misbehaviour,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgSubmitMisbehaviour__storage_, misbehaviour),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSubmitMisbehaviour_FieldNumber_Signer,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgSubmitMisbehaviour__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgSubmitMisbehaviour)
                                   messageName:@"MsgSubmitMisbehaviour"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgSubmitMisbehaviour__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma clang diagnostic pop

#pragma mark - MsgSubmitMisbehaviourResponse

@implementation MsgSubmitMisbehaviourResponse


typedef struct MsgSubmitMisbehaviourResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgSubmitMisbehaviourResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgSubmitMisbehaviourResponse)
                                   messageName:@"MsgSubmitMisbehaviourResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgSubmitMisbehaviourResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgRecoverClient

@implementation MsgRecoverClient

@dynamic subjectClientId;
@dynamic substituteClientId;
@dynamic signer;

typedef struct MsgRecoverClient__storage_ {
  uint32_t _has_storage_[1];
  NSString *subjectClientId;
  NSString *substituteClientId;
  NSString *signer;
} MsgRecoverClient__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "subjectClientId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgRecoverClient_FieldNumber_SubjectClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgRecoverClient__storage_, subjectClientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "substituteClientId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgRecoverClient_FieldNumber_SubstituteClientId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgRecoverClient__storage_, substituteClientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgRecoverClient_FieldNumber_Signer,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgRecoverClient__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgRecoverClient)
                                   messageName:@"MsgRecoverClient"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgRecoverClient__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgRecoverClientResponse

@implementation MsgRecoverClientResponse


typedef struct MsgRecoverClientResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgRecoverClientResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgRecoverClientResponse)
                                   messageName:@"MsgRecoverClientResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgRecoverClientResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgIBCSoftwareUpgrade

@implementation MsgIBCSoftwareUpgrade

@dynamic hasPlan, plan;
@dynamic hasUpgradedClientState, upgradedClientState;
@dynamic signer;

typedef struct MsgIBCSoftwareUpgrade__storage_ {
  uint32_t _has_storage_[1];
  Plan *plan;
  GPBAny *upgradedClientState;
  NSString *signer;
} MsgIBCSoftwareUpgrade__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "plan",
        .dataTypeSpecific.clazz = GPBObjCClass(Plan),
        .number = MsgIBCSoftwareUpgrade_FieldNumber_Plan,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgIBCSoftwareUpgrade__storage_, plan),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "upgradedClientState",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = MsgIBCSoftwareUpgrade_FieldNumber_UpgradedClientState,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgIBCSoftwareUpgrade__storage_, upgradedClientState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgIBCSoftwareUpgrade_FieldNumber_Signer,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgIBCSoftwareUpgrade__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgIBCSoftwareUpgrade)
                                   messageName:@"MsgIBCSoftwareUpgrade"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgIBCSoftwareUpgrade__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgIBCSoftwareUpgradeResponse

@implementation MsgIBCSoftwareUpgradeResponse


typedef struct MsgIBCSoftwareUpgradeResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgIBCSoftwareUpgradeResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgIBCSoftwareUpgradeResponse)
                                   messageName:@"MsgIBCSoftwareUpgradeResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgIBCSoftwareUpgradeResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateParams

@implementation MsgUpdateParams

@dynamic signer;
@dynamic hasParams, params;

typedef struct MsgUpdateParams__storage_ {
  uint32_t _has_storage_[1];
  NSString *signer;
  Params *params;
} MsgUpdateParams__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateParams_FieldNumber_Signer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgUpdateParams__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "params",
        .dataTypeSpecific.clazz = GPBObjCClass(Params),
        .number = MsgUpdateParams_FieldNumber_Params,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgUpdateParams__storage_, params),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateParams)
                                   messageName:@"MsgUpdateParams"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgUpdateParams__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateParamsResponse

@implementation MsgUpdateParamsResponse


typedef struct MsgUpdateParamsResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgUpdateParamsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateParamsResponse)
                                   messageName:@"MsgUpdateParamsResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgUpdateParamsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgDeleteClientCreator

@implementation MsgDeleteClientCreator

@dynamic clientId;
@dynamic signer;

typedef struct MsgDeleteClientCreator__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  NSString *signer;
} MsgDeleteClientCreator__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgDeleteClientCreator_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgDeleteClientCreator__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgDeleteClientCreator_FieldNumber_Signer,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgDeleteClientCreator__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgDeleteClientCreator)
                                   messageName:@"MsgDeleteClientCreator"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgDeleteClientCreator__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgDeleteClientCreatorResponse

@implementation MsgDeleteClientCreatorResponse


typedef struct MsgDeleteClientCreatorResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgDeleteClientCreatorResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgDeleteClientCreatorResponse)
                                   messageName:@"MsgDeleteClientCreatorResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgDeleteClientCreatorResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
