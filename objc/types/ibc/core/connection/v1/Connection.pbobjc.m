// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: ibc/core/connection/v1/connection.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import <stdatomic.h>

#import "ibc/core/connection/v1/Connection.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ClientPaths);
GPBObjCClassDeclaration(ConnectionEnd);
GPBObjCClassDeclaration(ConnectionPaths);
GPBObjCClassDeclaration(Counterparty);
GPBObjCClassDeclaration(IdentifiedConnection);
GPBObjCClassDeclaration(MerklePrefix);
GPBObjCClassDeclaration(Params);
GPBObjCClassDeclaration(Version);

#pragma mark - ConnectionRoot

@implementation ConnectionRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription ConnectionRoot_FileDescription = {
  .package = "ibc.core.connection.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Enum State

GPBEnumDescriptor *State_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "StateUninitializedUnspecified\000StateInit\000"
        "StateTryopen\000StateOpen\000";
    static const int32_t values[] = {
        State_StateUninitializedUnspecified,
        State_StateInit,
        State_StateTryopen,
        State_StateOpen,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(State)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:State_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL State_IsValidValue(int32_t value__) {
  switch (value__) {
    case State_StateUninitializedUnspecified:
    case State_StateInit:
    case State_StateTryopen:
    case State_StateOpen:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ConnectionEnd

@implementation ConnectionEnd

@dynamic clientId;
@dynamic versionsArray, versionsArray_Count;
@dynamic state;
@dynamic hasCounterparty, counterparty;
@dynamic delayPeriod;

typedef struct ConnectionEnd__storage_ {
  uint32_t _has_storage_[1];
  State state;
  NSString *clientId;
  NSMutableArray *versionsArray;
  Counterparty *counterparty;
  uint64_t delayPeriod;
} ConnectionEnd__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectionEnd_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ConnectionEnd__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "versionsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Version),
        .number = ConnectionEnd_FieldNumber_VersionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ConnectionEnd__storage_, versionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "state",
        .dataTypeSpecific.enumDescFunc = State_EnumDescriptor,
        .number = ConnectionEnd_FieldNumber_State,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ConnectionEnd__storage_, state),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "counterparty",
        .dataTypeSpecific.clazz = GPBObjCClass(Counterparty),
        .number = ConnectionEnd_FieldNumber_Counterparty,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ConnectionEnd__storage_, counterparty),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "delayPeriod",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectionEnd_FieldNumber_DelayPeriod,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ConnectionEnd__storage_, delayPeriod),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ConnectionEnd)
                                   messageName:@"ConnectionEnd"
                               fileDescription:&ConnectionRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ConnectionEnd__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ConnectionEnd_State_RawValue(ConnectionEnd *message) {
  GPBDescriptor *descriptor = [ConnectionEnd descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ConnectionEnd_FieldNumber_State];
  return GPBGetMessageRawEnumField(message, field);
}

void SetConnectionEnd_State_RawValue(ConnectionEnd *message, int32_t value) {
  GPBDescriptor *descriptor = [ConnectionEnd descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ConnectionEnd_FieldNumber_State];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - IdentifiedConnection

@implementation IdentifiedConnection

@dynamic id_p;
@dynamic clientId;
@dynamic versionsArray, versionsArray_Count;
@dynamic state;
@dynamic hasCounterparty, counterparty;
@dynamic delayPeriod;

typedef struct IdentifiedConnection__storage_ {
  uint32_t _has_storage_[1];
  State state;
  NSString *id_p;
  NSString *clientId;
  NSMutableArray *versionsArray;
  Counterparty *counterparty;
  uint64_t delayPeriod;
} IdentifiedConnection__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = IdentifiedConnection_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IdentifiedConnection__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = IdentifiedConnection_FieldNumber_ClientId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IdentifiedConnection__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "versionsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Version),
        .number = IdentifiedConnection_FieldNumber_VersionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IdentifiedConnection__storage_, versionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "state",
        .dataTypeSpecific.enumDescFunc = State_EnumDescriptor,
        .number = IdentifiedConnection_FieldNumber_State,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IdentifiedConnection__storage_, state),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "counterparty",
        .dataTypeSpecific.clazz = GPBObjCClass(Counterparty),
        .number = IdentifiedConnection_FieldNumber_Counterparty,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(IdentifiedConnection__storage_, counterparty),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "delayPeriod",
        .dataTypeSpecific.clazz = Nil,
        .number = IdentifiedConnection_FieldNumber_DelayPeriod,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(IdentifiedConnection__storage_, delayPeriod),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(IdentifiedConnection)
                                   messageName:@"IdentifiedConnection"
                               fileDescription:&ConnectionRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IdentifiedConnection__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t IdentifiedConnection_State_RawValue(IdentifiedConnection *message) {
  GPBDescriptor *descriptor = [IdentifiedConnection descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:IdentifiedConnection_FieldNumber_State];
  return GPBGetMessageRawEnumField(message, field);
}

void SetIdentifiedConnection_State_RawValue(IdentifiedConnection *message, int32_t value) {
  GPBDescriptor *descriptor = [IdentifiedConnection descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:IdentifiedConnection_FieldNumber_State];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Counterparty

@implementation Counterparty

@dynamic clientId;
@dynamic connectionId;
@dynamic hasPrefix, prefix;

typedef struct Counterparty__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  NSString *connectionId;
  MerklePrefix *prefix;
} Counterparty__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = Counterparty_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Counterparty__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "connectionId",
        .dataTypeSpecific.clazz = Nil,
        .number = Counterparty_FieldNumber_ConnectionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Counterparty__storage_, connectionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "prefix",
        .dataTypeSpecific.clazz = GPBObjCClass(MerklePrefix),
        .number = Counterparty_FieldNumber_Prefix,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Counterparty__storage_, prefix),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Counterparty)
                                   messageName:@"Counterparty"
                               fileDescription:&ConnectionRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Counterparty__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ClientPaths

@implementation ClientPaths

@dynamic pathsArray, pathsArray_Count;

typedef struct ClientPaths__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *pathsArray;
} ClientPaths__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pathsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = ClientPaths_FieldNumber_PathsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ClientPaths__storage_, pathsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ClientPaths)
                                   messageName:@"ClientPaths"
                               fileDescription:&ConnectionRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ClientPaths__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ConnectionPaths

@implementation ConnectionPaths

@dynamic clientId;
@dynamic pathsArray, pathsArray_Count;

typedef struct ConnectionPaths__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  NSMutableArray *pathsArray;
} ConnectionPaths__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectionPaths_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ConnectionPaths__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pathsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectionPaths_FieldNumber_PathsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ConnectionPaths__storage_, pathsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ConnectionPaths)
                                   messageName:@"ConnectionPaths"
                               fileDescription:&ConnectionRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ConnectionPaths__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Version

@implementation Version

@dynamic identifier;
@dynamic featuresArray, featuresArray_Count;

typedef struct Version__storage_ {
  uint32_t _has_storage_[1];
  NSString *identifier;
  NSMutableArray *featuresArray;
} Version__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "identifier",
        .dataTypeSpecific.clazz = Nil,
        .number = Version_FieldNumber_Identifier,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Version__storage_, identifier),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "featuresArray",
        .dataTypeSpecific.clazz = Nil,
        .number = Version_FieldNumber_FeaturesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Version__storage_, featuresArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Version)
                                   messageName:@"Version"
                               fileDescription:&ConnectionRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Version__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Params

@implementation Params

@dynamic maxExpectedTimePerBlock;

typedef struct Params__storage_ {
  uint32_t _has_storage_[1];
  uint64_t maxExpectedTimePerBlock;
} Params__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "maxExpectedTimePerBlock",
        .dataTypeSpecific.clazz = Nil,
        .number = Params_FieldNumber_MaxExpectedTimePerBlock,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Params__storage_, maxExpectedTimePerBlock),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Params)
                                   messageName:@"Params"
                               fileDescription:&ConnectionRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Params__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
