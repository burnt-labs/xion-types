// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: ibc/core/connection/v1/query.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "ibc/core/connection/v1/Query.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ConnectionEnd);
GPBObjCClassDeclaration(GPBAny);
GPBObjCClassDeclaration(Height);
GPBObjCClassDeclaration(IdentifiedClientState);
GPBObjCClassDeclaration(IdentifiedConnection);
GPBObjCClassDeclaration(PageRequest);
GPBObjCClassDeclaration(PageResponse);
GPBObjCClassDeclaration(Params);
GPBObjCClassDeclaration(QueryClientConnectionsRequest);
GPBObjCClassDeclaration(QueryClientConnectionsResponse);
GPBObjCClassDeclaration(QueryConnectionClientStateRequest);
GPBObjCClassDeclaration(QueryConnectionClientStateResponse);
GPBObjCClassDeclaration(QueryConnectionConsensusStateRequest);
GPBObjCClassDeclaration(QueryConnectionConsensusStateResponse);
GPBObjCClassDeclaration(QueryConnectionParamsRequest);
GPBObjCClassDeclaration(QueryConnectionParamsResponse);
GPBObjCClassDeclaration(QueryConnectionRequest);
GPBObjCClassDeclaration(QueryConnectionResponse);
GPBObjCClassDeclaration(QueryConnectionsRequest);
GPBObjCClassDeclaration(QueryConnectionsResponse);

#pragma mark - QueryRoot

@implementation QueryRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription QueryRoot_FileDescription = {
  .package = "ibc.core.connection.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - QueryConnectionRequest

@implementation QueryConnectionRequest

@dynamic connectionId;

typedef struct QueryConnectionRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *connectionId;
} QueryConnectionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "connectionId",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryConnectionRequest_FieldNumber_ConnectionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryConnectionRequest__storage_, connectionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryConnectionRequest)
                                   messageName:@"QueryConnectionRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryConnectionRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryConnectionResponse

@implementation QueryConnectionResponse

@dynamic hasConnection, connection;
@dynamic proof;
@dynamic hasProofHeight, proofHeight;

typedef struct QueryConnectionResponse__storage_ {
  uint32_t _has_storage_[1];
  ConnectionEnd *connection;
  NSData *proof;
  Height *proofHeight;
} QueryConnectionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "connection",
        .dataTypeSpecific.clazz = GPBObjCClass(ConnectionEnd),
        .number = QueryConnectionResponse_FieldNumber_Connection,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryConnectionResponse__storage_, connection),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "proof",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryConnectionResponse_FieldNumber_Proof,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryConnectionResponse__storage_, proof),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = QueryConnectionResponse_FieldNumber_ProofHeight,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(QueryConnectionResponse__storage_, proofHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryConnectionResponse)
                                   messageName:@"QueryConnectionResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryConnectionResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryConnectionsRequest

@implementation QueryConnectionsRequest

@dynamic hasPagination, pagination;

typedef struct QueryConnectionsRequest__storage_ {
  uint32_t _has_storage_[1];
  PageRequest *pagination;
} QueryConnectionsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageRequest),
        .number = QueryConnectionsRequest_FieldNumber_Pagination,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryConnectionsRequest__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryConnectionsRequest)
                                   messageName:@"QueryConnectionsRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryConnectionsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryConnectionsResponse

@implementation QueryConnectionsResponse

@dynamic connectionsArray, connectionsArray_Count;
@dynamic hasPagination, pagination;
@dynamic hasHeight, height;

typedef struct QueryConnectionsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *connectionsArray;
  PageResponse *pagination;
  Height *height;
} QueryConnectionsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "connectionsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(IdentifiedConnection),
        .number = QueryConnectionsResponse_FieldNumber_ConnectionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryConnectionsResponse__storage_, connectionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pagination",
        .dataTypeSpecific.clazz = GPBObjCClass(PageResponse),
        .number = QueryConnectionsResponse_FieldNumber_Pagination,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryConnectionsResponse__storage_, pagination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "height",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = QueryConnectionsResponse_FieldNumber_Height,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryConnectionsResponse__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryConnectionsResponse)
                                   messageName:@"QueryConnectionsResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryConnectionsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryClientConnectionsRequest

@implementation QueryClientConnectionsRequest

@dynamic clientId;

typedef struct QueryClientConnectionsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
} QueryClientConnectionsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryClientConnectionsRequest_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryClientConnectionsRequest__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryClientConnectionsRequest)
                                   messageName:@"QueryClientConnectionsRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryClientConnectionsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryClientConnectionsResponse

@implementation QueryClientConnectionsResponse

@dynamic connectionPathsArray, connectionPathsArray_Count;
@dynamic proof;
@dynamic hasProofHeight, proofHeight;

typedef struct QueryClientConnectionsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *connectionPathsArray;
  NSData *proof;
  Height *proofHeight;
} QueryClientConnectionsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "connectionPathsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryClientConnectionsResponse_FieldNumber_ConnectionPathsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryClientConnectionsResponse__storage_, connectionPathsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "proof",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryClientConnectionsResponse_FieldNumber_Proof,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryClientConnectionsResponse__storage_, proof),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = QueryClientConnectionsResponse_FieldNumber_ProofHeight,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryClientConnectionsResponse__storage_, proofHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryClientConnectionsResponse)
                                   messageName:@"QueryClientConnectionsResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryClientConnectionsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryConnectionClientStateRequest

@implementation QueryConnectionClientStateRequest

@dynamic connectionId;

typedef struct QueryConnectionClientStateRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *connectionId;
} QueryConnectionClientStateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "connectionId",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryConnectionClientStateRequest_FieldNumber_ConnectionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryConnectionClientStateRequest__storage_, connectionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryConnectionClientStateRequest)
                                   messageName:@"QueryConnectionClientStateRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryConnectionClientStateRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryConnectionClientStateResponse

@implementation QueryConnectionClientStateResponse

@dynamic hasIdentifiedClientState, identifiedClientState;
@dynamic proof;
@dynamic hasProofHeight, proofHeight;

typedef struct QueryConnectionClientStateResponse__storage_ {
  uint32_t _has_storage_[1];
  IdentifiedClientState *identifiedClientState;
  NSData *proof;
  Height *proofHeight;
} QueryConnectionClientStateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "identifiedClientState",
        .dataTypeSpecific.clazz = GPBObjCClass(IdentifiedClientState),
        .number = QueryConnectionClientStateResponse_FieldNumber_IdentifiedClientState,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryConnectionClientStateResponse__storage_, identifiedClientState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "proof",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryConnectionClientStateResponse_FieldNumber_Proof,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryConnectionClientStateResponse__storage_, proof),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = QueryConnectionClientStateResponse_FieldNumber_ProofHeight,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(QueryConnectionClientStateResponse__storage_, proofHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryConnectionClientStateResponse)
                                   messageName:@"QueryConnectionClientStateResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryConnectionClientStateResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryConnectionConsensusStateRequest

@implementation QueryConnectionConsensusStateRequest

@dynamic connectionId;
@dynamic revisionNumber;
@dynamic revisionHeight;

typedef struct QueryConnectionConsensusStateRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *connectionId;
  uint64_t revisionNumber;
  uint64_t revisionHeight;
} QueryConnectionConsensusStateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "connectionId",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryConnectionConsensusStateRequest_FieldNumber_ConnectionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryConnectionConsensusStateRequest__storage_, connectionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "revisionNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryConnectionConsensusStateRequest_FieldNumber_RevisionNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryConnectionConsensusStateRequest__storage_, revisionNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "revisionHeight",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryConnectionConsensusStateRequest_FieldNumber_RevisionHeight,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(QueryConnectionConsensusStateRequest__storage_, revisionHeight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryConnectionConsensusStateRequest)
                                   messageName:@"QueryConnectionConsensusStateRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryConnectionConsensusStateRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryConnectionConsensusStateResponse

@implementation QueryConnectionConsensusStateResponse

@dynamic hasConsensusState, consensusState;
@dynamic clientId;
@dynamic proof;
@dynamic hasProofHeight, proofHeight;

typedef struct QueryConnectionConsensusStateResponse__storage_ {
  uint32_t _has_storage_[1];
  GPBAny *consensusState;
  NSString *clientId;
  NSData *proof;
  Height *proofHeight;
} QueryConnectionConsensusStateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "consensusState",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = QueryConnectionConsensusStateResponse_FieldNumber_ConsensusState,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryConnectionConsensusStateResponse__storage_, consensusState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryConnectionConsensusStateResponse_FieldNumber_ClientId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryConnectionConsensusStateResponse__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "proof",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryConnectionConsensusStateResponse_FieldNumber_Proof,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(QueryConnectionConsensusStateResponse__storage_, proof),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = QueryConnectionConsensusStateResponse_FieldNumber_ProofHeight,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(QueryConnectionConsensusStateResponse__storage_, proofHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryConnectionConsensusStateResponse)
                                   messageName:@"QueryConnectionConsensusStateResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryConnectionConsensusStateResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryConnectionParamsRequest

@implementation QueryConnectionParamsRequest


typedef struct QueryConnectionParamsRequest__storage_ {
  uint32_t _has_storage_[1];
} QueryConnectionParamsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryConnectionParamsRequest)
                                   messageName:@"QueryConnectionParamsRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(QueryConnectionParamsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryConnectionParamsResponse

@implementation QueryConnectionParamsResponse

@dynamic hasParams, params;

typedef struct QueryConnectionParamsResponse__storage_ {
  uint32_t _has_storage_[1];
  Params *params;
} QueryConnectionParamsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "params",
        .dataTypeSpecific.clazz = GPBObjCClass(Params),
        .number = QueryConnectionParamsResponse_FieldNumber_Params,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryConnectionParamsResponse__storage_, params),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryConnectionParamsResponse)
                                   messageName:@"QueryConnectionParamsResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryConnectionParamsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
