// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: ibc/core/connection/v1/tx.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "ibc/core/connection/v1/Tx.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Counterparty);
GPBObjCClassDeclaration(GPBAny);
GPBObjCClassDeclaration(Height);
GPBObjCClassDeclaration(MsgConnectionOpenAck);
GPBObjCClassDeclaration(MsgConnectionOpenAckResponse);
GPBObjCClassDeclaration(MsgConnectionOpenConfirm);
GPBObjCClassDeclaration(MsgConnectionOpenConfirmResponse);
GPBObjCClassDeclaration(MsgConnectionOpenInit);
GPBObjCClassDeclaration(MsgConnectionOpenInitResponse);
GPBObjCClassDeclaration(MsgConnectionOpenTry);
GPBObjCClassDeclaration(MsgConnectionOpenTryResponse);
GPBObjCClassDeclaration(MsgUpdateParams);
GPBObjCClassDeclaration(MsgUpdateParamsResponse);
GPBObjCClassDeclaration(Params);
GPBObjCClassDeclaration(Version);

#pragma mark - TxRoot

@implementation TxRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription TxRoot_FileDescription = {
  .package = "ibc.core.connection.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - MsgConnectionOpenInit

@implementation MsgConnectionOpenInit

@dynamic clientId;
@dynamic hasCounterparty, counterparty;
@dynamic hasVersion, version;
@dynamic delayPeriod;
@dynamic signer;

typedef struct MsgConnectionOpenInit__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  Counterparty *counterparty;
  Version *version;
  NSString *signer;
  uint64_t delayPeriod;
} MsgConnectionOpenInit__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgConnectionOpenInit_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgConnectionOpenInit__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "counterparty",
        .dataTypeSpecific.clazz = GPBObjCClass(Counterparty),
        .number = MsgConnectionOpenInit_FieldNumber_Counterparty,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgConnectionOpenInit__storage_, counterparty),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "version",
        .dataTypeSpecific.clazz = GPBObjCClass(Version),
        .number = MsgConnectionOpenInit_FieldNumber_Version,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgConnectionOpenInit__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "delayPeriod",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgConnectionOpenInit_FieldNumber_DelayPeriod,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgConnectionOpenInit__storage_, delayPeriod),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgConnectionOpenInit_FieldNumber_Signer,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MsgConnectionOpenInit__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgConnectionOpenInit)
                                   messageName:@"MsgConnectionOpenInit"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgConnectionOpenInit__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgConnectionOpenInitResponse

@implementation MsgConnectionOpenInitResponse


typedef struct MsgConnectionOpenInitResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgConnectionOpenInitResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgConnectionOpenInitResponse)
                                   messageName:@"MsgConnectionOpenInitResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgConnectionOpenInitResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgConnectionOpenTry

@implementation MsgConnectionOpenTry

@dynamic clientId;
@dynamic previousConnectionId;
@dynamic hasClientState, clientState;
@dynamic hasCounterparty, counterparty;
@dynamic delayPeriod;
@dynamic counterpartyVersionsArray, counterpartyVersionsArray_Count;
@dynamic hasProofHeight, proofHeight;
@dynamic proofInit;
@dynamic proofClient;
@dynamic proofConsensus;
@dynamic hasConsensusHeight, consensusHeight;
@dynamic signer;
@dynamic hostConsensusStateProof;

typedef struct MsgConnectionOpenTry__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  NSString *previousConnectionId;
  GPBAny *clientState;
  Counterparty *counterparty;
  NSMutableArray *counterpartyVersionsArray;
  Height *proofHeight;
  NSData *proofInit;
  NSData *proofClient;
  NSData *proofConsensus;
  Height *consensusHeight;
  NSString *signer;
  NSData *hostConsensusStateProof;
  uint64_t delayPeriod;
} MsgConnectionOpenTry__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgConnectionOpenTry_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgConnectionOpenTry__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "previousConnectionId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgConnectionOpenTry_FieldNumber_PreviousConnectionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgConnectionOpenTry__storage_, previousConnectionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientState",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = MsgConnectionOpenTry_FieldNumber_ClientState,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgConnectionOpenTry__storage_, clientState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "counterparty",
        .dataTypeSpecific.clazz = GPBObjCClass(Counterparty),
        .number = MsgConnectionOpenTry_FieldNumber_Counterparty,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgConnectionOpenTry__storage_, counterparty),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "delayPeriod",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgConnectionOpenTry_FieldNumber_DelayPeriod,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MsgConnectionOpenTry__storage_, delayPeriod),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "counterpartyVersionsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Version),
        .number = MsgConnectionOpenTry_FieldNumber_CounterpartyVersionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MsgConnectionOpenTry__storage_, counterpartyVersionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "proofHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = MsgConnectionOpenTry_FieldNumber_ProofHeight,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MsgConnectionOpenTry__storage_, proofHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "proofInit",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgConnectionOpenTry_FieldNumber_ProofInit,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(MsgConnectionOpenTry__storage_, proofInit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofClient",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgConnectionOpenTry_FieldNumber_ProofClient,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(MsgConnectionOpenTry__storage_, proofClient),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofConsensus",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgConnectionOpenTry_FieldNumber_ProofConsensus,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(MsgConnectionOpenTry__storage_, proofConsensus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "consensusHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = MsgConnectionOpenTry_FieldNumber_ConsensusHeight,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(MsgConnectionOpenTry__storage_, consensusHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgConnectionOpenTry_FieldNumber_Signer,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(MsgConnectionOpenTry__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hostConsensusStateProof",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgConnectionOpenTry_FieldNumber_HostConsensusStateProof,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(MsgConnectionOpenTry__storage_, hostConsensusStateProof),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgConnectionOpenTry)
                                   messageName:@"MsgConnectionOpenTry"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgConnectionOpenTry__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgConnectionOpenTryResponse

@implementation MsgConnectionOpenTryResponse


typedef struct MsgConnectionOpenTryResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgConnectionOpenTryResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgConnectionOpenTryResponse)
                                   messageName:@"MsgConnectionOpenTryResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgConnectionOpenTryResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgConnectionOpenAck

@implementation MsgConnectionOpenAck

@dynamic connectionId;
@dynamic counterpartyConnectionId;
@dynamic hasVersion, version;
@dynamic hasClientState, clientState;
@dynamic hasProofHeight, proofHeight;
@dynamic proofTry;
@dynamic proofClient;
@dynamic proofConsensus;
@dynamic hasConsensusHeight, consensusHeight;
@dynamic signer;
@dynamic hostConsensusStateProof;

typedef struct MsgConnectionOpenAck__storage_ {
  uint32_t _has_storage_[1];
  NSString *connectionId;
  NSString *counterpartyConnectionId;
  Version *version;
  GPBAny *clientState;
  Height *proofHeight;
  NSData *proofTry;
  NSData *proofClient;
  NSData *proofConsensus;
  Height *consensusHeight;
  NSString *signer;
  NSData *hostConsensusStateProof;
} MsgConnectionOpenAck__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "connectionId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgConnectionOpenAck_FieldNumber_ConnectionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgConnectionOpenAck__storage_, connectionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "counterpartyConnectionId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgConnectionOpenAck_FieldNumber_CounterpartyConnectionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgConnectionOpenAck__storage_, counterpartyConnectionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.clazz = GPBObjCClass(Version),
        .number = MsgConnectionOpenAck_FieldNumber_Version,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgConnectionOpenAck__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientState",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = MsgConnectionOpenAck_FieldNumber_ClientState,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgConnectionOpenAck__storage_, clientState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "proofHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = MsgConnectionOpenAck_FieldNumber_ProofHeight,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MsgConnectionOpenAck__storage_, proofHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "proofTry",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgConnectionOpenAck_FieldNumber_ProofTry,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MsgConnectionOpenAck__storage_, proofTry),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofClient",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgConnectionOpenAck_FieldNumber_ProofClient,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(MsgConnectionOpenAck__storage_, proofClient),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofConsensus",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgConnectionOpenAck_FieldNumber_ProofConsensus,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(MsgConnectionOpenAck__storage_, proofConsensus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "consensusHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = MsgConnectionOpenAck_FieldNumber_ConsensusHeight,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(MsgConnectionOpenAck__storage_, consensusHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgConnectionOpenAck_FieldNumber_Signer,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(MsgConnectionOpenAck__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hostConsensusStateProof",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgConnectionOpenAck_FieldNumber_HostConsensusStateProof,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(MsgConnectionOpenAck__storage_, hostConsensusStateProof),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgConnectionOpenAck)
                                   messageName:@"MsgConnectionOpenAck"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgConnectionOpenAck__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgConnectionOpenAckResponse

@implementation MsgConnectionOpenAckResponse


typedef struct MsgConnectionOpenAckResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgConnectionOpenAckResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgConnectionOpenAckResponse)
                                   messageName:@"MsgConnectionOpenAckResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgConnectionOpenAckResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgConnectionOpenConfirm

@implementation MsgConnectionOpenConfirm

@dynamic connectionId;
@dynamic proofAck;
@dynamic hasProofHeight, proofHeight;
@dynamic signer;

typedef struct MsgConnectionOpenConfirm__storage_ {
  uint32_t _has_storage_[1];
  NSString *connectionId;
  NSData *proofAck;
  Height *proofHeight;
  NSString *signer;
} MsgConnectionOpenConfirm__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "connectionId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgConnectionOpenConfirm_FieldNumber_ConnectionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgConnectionOpenConfirm__storage_, connectionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "proofAck",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgConnectionOpenConfirm_FieldNumber_ProofAck,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgConnectionOpenConfirm__storage_, proofAck),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proofHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = MsgConnectionOpenConfirm_FieldNumber_ProofHeight,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgConnectionOpenConfirm__storage_, proofHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgConnectionOpenConfirm_FieldNumber_Signer,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgConnectionOpenConfirm__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgConnectionOpenConfirm)
                                   messageName:@"MsgConnectionOpenConfirm"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgConnectionOpenConfirm__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgConnectionOpenConfirmResponse

@implementation MsgConnectionOpenConfirmResponse


typedef struct MsgConnectionOpenConfirmResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgConnectionOpenConfirmResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgConnectionOpenConfirmResponse)
                                   messageName:@"MsgConnectionOpenConfirmResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgConnectionOpenConfirmResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateParams

@implementation MsgUpdateParams

@dynamic signer;
@dynamic hasParams, params;

typedef struct MsgUpdateParams__storage_ {
  uint32_t _has_storage_[1];
  NSString *signer;
  Params *params;
} MsgUpdateParams__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateParams_FieldNumber_Signer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgUpdateParams__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "params",
        .dataTypeSpecific.clazz = GPBObjCClass(Params),
        .number = MsgUpdateParams_FieldNumber_Params,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgUpdateParams__storage_, params),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateParams)
                                   messageName:@"MsgUpdateParams"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgUpdateParams__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateParamsResponse

@implementation MsgUpdateParamsResponse


typedef struct MsgUpdateParamsResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgUpdateParamsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateParamsResponse)
                                   messageName:@"MsgUpdateParamsResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgUpdateParamsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
