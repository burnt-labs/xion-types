// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: ibc/lightclients/tendermint/v1/tendermint.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "ibc/lightclients/tendermint/v1/Tendermint.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ClientState);
GPBObjCClassDeclaration(ConsensusState);
GPBObjCClassDeclaration(Fraction);
GPBObjCClassDeclaration(GPBDuration);
GPBObjCClassDeclaration(GPBTimestamp);
GPBObjCClassDeclaration(Header);
GPBObjCClassDeclaration(Height);
GPBObjCClassDeclaration(MerkleRoot);
GPBObjCClassDeclaration(Misbehaviour);
GPBObjCClassDeclaration(ProofSpec);
GPBObjCClassDeclaration(SignedHeader);
GPBObjCClassDeclaration(ValidatorSet);

#pragma mark - TendermintRoot

@implementation TendermintRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription TendermintRoot_FileDescription = {
  .package = "ibc.lightclients.tendermint.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - ClientState

@implementation ClientState

@dynamic chainId;
@dynamic hasTrustLevel, trustLevel;
@dynamic hasTrustingPeriod, trustingPeriod;
@dynamic hasUnbondingPeriod, unbondingPeriod;
@dynamic hasMaxClockDrift, maxClockDrift;
@dynamic hasFrozenHeight, frozenHeight;
@dynamic hasLatestHeight, latestHeight;
@dynamic proofSpecsArray, proofSpecsArray_Count;
@dynamic upgradePathArray, upgradePathArray_Count;
@dynamic allowUpdateAfterExpiry;
@dynamic allowUpdateAfterMisbehaviour;

typedef struct ClientState__storage_ {
  uint32_t _has_storage_[1];
  NSString *chainId;
  Fraction *trustLevel;
  GPBDuration *trustingPeriod;
  GPBDuration *unbondingPeriod;
  GPBDuration *maxClockDrift;
  Height *frozenHeight;
  Height *latestHeight;
  NSMutableArray *proofSpecsArray;
  NSMutableArray *upgradePathArray;
} ClientState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chainId",
        .dataTypeSpecific.clazz = Nil,
        .number = ClientState_FieldNumber_ChainId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ClientState__storage_, chainId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "trustLevel",
        .dataTypeSpecific.clazz = GPBObjCClass(Fraction),
        .number = ClientState_FieldNumber_TrustLevel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ClientState__storage_, trustLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "trustingPeriod",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBDuration),
        .number = ClientState_FieldNumber_TrustingPeriod,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ClientState__storage_, trustingPeriod),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "unbondingPeriod",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBDuration),
        .number = ClientState_FieldNumber_UnbondingPeriod,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ClientState__storage_, unbondingPeriod),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "maxClockDrift",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBDuration),
        .number = ClientState_FieldNumber_MaxClockDrift,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ClientState__storage_, maxClockDrift),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "frozenHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = ClientState_FieldNumber_FrozenHeight,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ClientState__storage_, frozenHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "latestHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = ClientState_FieldNumber_LatestHeight,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ClientState__storage_, latestHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "proofSpecsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ProofSpec),
        .number = ClientState_FieldNumber_ProofSpecsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ClientState__storage_, proofSpecsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "upgradePathArray",
        .dataTypeSpecific.clazz = Nil,
        .number = ClientState_FieldNumber_UpgradePathArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ClientState__storage_, upgradePathArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "allowUpdateAfterExpiry",
        .dataTypeSpecific.clazz = Nil,
        .number = ClientState_FieldNumber_AllowUpdateAfterExpiry,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "allowUpdateAfterMisbehaviour",
        .dataTypeSpecific.clazz = Nil,
        .number = ClientState_FieldNumber_AllowUpdateAfterMisbehaviour,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ClientState)
                                   messageName:@"ClientState"
                               fileDescription:&TendermintRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ClientState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ConsensusState

@implementation ConsensusState

@dynamic hasTimestamp, timestamp;
@dynamic hasRoot, root;
@dynamic nextValidatorsHash;

typedef struct ConsensusState__storage_ {
  uint32_t _has_storage_[1];
  GPBTimestamp *timestamp;
  MerkleRoot *root;
  NSData *nextValidatorsHash;
} ConsensusState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timestamp",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = ConsensusState_FieldNumber_Timestamp,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ConsensusState__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "root",
        .dataTypeSpecific.clazz = GPBObjCClass(MerkleRoot),
        .number = ConsensusState_FieldNumber_Root,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ConsensusState__storage_, root),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextValidatorsHash",
        .dataTypeSpecific.clazz = Nil,
        .number = ConsensusState_FieldNumber_NextValidatorsHash,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ConsensusState__storage_, nextValidatorsHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ConsensusState)
                                   messageName:@"ConsensusState"
                               fileDescription:&TendermintRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ConsensusState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Misbehaviour

@implementation Misbehaviour

@dynamic clientId;
@dynamic hasHeader1, header1;
@dynamic hasHeader2, header2;

typedef struct Misbehaviour__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  Header *header1;
  Header *header2;
} Misbehaviour__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = Misbehaviour_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Misbehaviour__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "header1",
        .dataTypeSpecific.clazz = GPBObjCClass(Header),
        .number = Misbehaviour_FieldNumber_Header1,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Misbehaviour__storage_, header1),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "header2",
        .dataTypeSpecific.clazz = GPBObjCClass(Header),
        .number = Misbehaviour_FieldNumber_Header2,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Misbehaviour__storage_, header2),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Misbehaviour)
                                   messageName:@"Misbehaviour"
                               fileDescription:&TendermintRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Misbehaviour__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\002\002\006\201\000\003\006\201\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Header

@implementation Header

@dynamic hasSignedHeader, signedHeader;
@dynamic hasValidatorSet, validatorSet;
@dynamic hasTrustedHeight, trustedHeight;
@dynamic hasTrustedValidators, trustedValidators;

typedef struct Header__storage_ {
  uint32_t _has_storage_[1];
  SignedHeader *signedHeader;
  ValidatorSet *validatorSet;
  Height *trustedHeight;
  ValidatorSet *trustedValidators;
} Header__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "signedHeader",
        .dataTypeSpecific.clazz = GPBObjCClass(SignedHeader),
        .number = Header_FieldNumber_SignedHeader,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Header__storage_, signedHeader),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "validatorSet",
        .dataTypeSpecific.clazz = GPBObjCClass(ValidatorSet),
        .number = Header_FieldNumber_ValidatorSet,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Header__storage_, validatorSet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "trustedHeight",
        .dataTypeSpecific.clazz = GPBObjCClass(Height),
        .number = Header_FieldNumber_TrustedHeight,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Header__storage_, trustedHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "trustedValidators",
        .dataTypeSpecific.clazz = GPBObjCClass(ValidatorSet),
        .number = Header_FieldNumber_TrustedValidators,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Header__storage_, trustedValidators),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Header)
                                   messageName:@"Header"
                               fileDescription:&TendermintRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Header__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Fraction

@implementation Fraction

@dynamic numerator;
@dynamic denominator;

typedef struct Fraction__storage_ {
  uint32_t _has_storage_[1];
  uint64_t numerator;
  uint64_t denominator;
} Fraction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "numerator",
        .dataTypeSpecific.clazz = Nil,
        .number = Fraction_FieldNumber_Numerator,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Fraction__storage_, numerator),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "denominator",
        .dataTypeSpecific.clazz = Nil,
        .number = Fraction_FieldNumber_Denominator,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Fraction__storage_, denominator),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Fraction)
                                   messageName:@"Fraction"
                               fileDescription:&TendermintRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Fraction__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
