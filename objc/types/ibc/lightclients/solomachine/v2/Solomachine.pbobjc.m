// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: ibc/lightclients/solomachine/v2/solomachine.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import <stdatomic.h>

#import "ibc/lightclients/solomachine/v2/Solomachine.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Channel);
GPBObjCClassDeclaration(ChannelStateData);
GPBObjCClassDeclaration(ClientState);
GPBObjCClassDeclaration(ClientStateData);
GPBObjCClassDeclaration(ConnectionEnd);
GPBObjCClassDeclaration(ConnectionStateData);
GPBObjCClassDeclaration(ConsensusState);
GPBObjCClassDeclaration(ConsensusStateData);
GPBObjCClassDeclaration(GPBAny);
GPBObjCClassDeclaration(Header);
GPBObjCClassDeclaration(HeaderData);
GPBObjCClassDeclaration(Misbehaviour);
GPBObjCClassDeclaration(NextSequenceRecvData);
GPBObjCClassDeclaration(PacketAcknowledgementData);
GPBObjCClassDeclaration(PacketCommitmentData);
GPBObjCClassDeclaration(PacketReceiptAbsenceData);
GPBObjCClassDeclaration(SignBytes);
GPBObjCClassDeclaration(SignatureAndData);
GPBObjCClassDeclaration(TimestampedSignatureData);

#pragma mark - SolomachineRoot

@implementation SolomachineRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription SolomachineRoot_FileDescription = {
  .package = "ibc.lightclients.solomachine.v2",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Enum DataType

GPBEnumDescriptor *DataType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "DataTypeUninitializedUnspecified\000DataTyp"
        "eClientState\000DataTypeConsensusState\000Data"
        "TypeConnectionState\000DataTypeChannelState"
        "\000DataTypePacketCommitment\000DataTypePacket"
        "Acknowledgement\000DataTypePacketReceiptAbs"
        "ence\000DataTypeNextSequenceRecv\000DataTypeHe"
        "ader\000";
    static const int32_t values[] = {
        DataType_DataTypeUninitializedUnspecified,
        DataType_DataTypeClientState,
        DataType_DataTypeConsensusState,
        DataType_DataTypeConnectionState,
        DataType_DataTypeChannelState,
        DataType_DataTypePacketCommitment,
        DataType_DataTypePacketAcknowledgement,
        DataType_DataTypePacketReceiptAbsence,
        DataType_DataTypeNextSequenceRecv,
        DataType_DataTypeHeader,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DataType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DataType_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DataType_IsValidValue(int32_t value__) {
  switch (value__) {
    case DataType_DataTypeUninitializedUnspecified:
    case DataType_DataTypeClientState:
    case DataType_DataTypeConsensusState:
    case DataType_DataTypeConnectionState:
    case DataType_DataTypeChannelState:
    case DataType_DataTypePacketCommitment:
    case DataType_DataTypePacketAcknowledgement:
    case DataType_DataTypePacketReceiptAbsence:
    case DataType_DataTypeNextSequenceRecv:
    case DataType_DataTypeHeader:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ClientState

@implementation ClientState

@dynamic sequence;
@dynamic isFrozen;
@dynamic hasConsensusState, consensusState;
@dynamic allowUpdateAfterProposal;

typedef struct ClientState__storage_ {
  uint32_t _has_storage_[1];
  ConsensusState *consensusState;
  uint64_t sequence;
} ClientState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sequence",
        .dataTypeSpecific.clazz = Nil,
        .number = ClientState_FieldNumber_Sequence,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ClientState__storage_, sequence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "isFrozen",
        .dataTypeSpecific.clazz = Nil,
        .number = ClientState_FieldNumber_IsFrozen,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "consensusState",
        .dataTypeSpecific.clazz = GPBObjCClass(ConsensusState),
        .number = ClientState_FieldNumber_ConsensusState,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ClientState__storage_, consensusState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "allowUpdateAfterProposal",
        .dataTypeSpecific.clazz = Nil,
        .number = ClientState_FieldNumber_AllowUpdateAfterProposal,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ClientState)
                                   messageName:@"ClientState"
                               fileDescription:&SolomachineRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ClientState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ConsensusState

@implementation ConsensusState

@dynamic hasPublicKey, publicKey;
@dynamic diversifier;
@dynamic timestamp;

typedef struct ConsensusState__storage_ {
  uint32_t _has_storage_[1];
  GPBAny *publicKey;
  NSString *diversifier;
  uint64_t timestamp;
} ConsensusState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "publicKey",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = ConsensusState_FieldNumber_PublicKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ConsensusState__storage_, publicKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "diversifier",
        .dataTypeSpecific.clazz = Nil,
        .number = ConsensusState_FieldNumber_Diversifier,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ConsensusState__storage_, diversifier),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.clazz = Nil,
        .number = ConsensusState_FieldNumber_Timestamp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ConsensusState__storage_, timestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ConsensusState)
                                   messageName:@"ConsensusState"
                               fileDescription:&SolomachineRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ConsensusState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Header

@implementation Header

@dynamic sequence;
@dynamic timestamp;
@dynamic signature;
@dynamic hasNewPublicKey, newPublicKey;
@dynamic newDiversifier;

typedef struct Header__storage_ {
  uint32_t _has_storage_[1];
  NSData *signature;
  GPBAny *newPublicKey;
  NSString *newDiversifier;
  uint64_t sequence;
  uint64_t timestamp;
} Header__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sequence",
        .dataTypeSpecific.clazz = Nil,
        .number = Header_FieldNumber_Sequence,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Header__storage_, sequence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.clazz = Nil,
        .number = Header_FieldNumber_Timestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Header__storage_, timestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "signature",
        .dataTypeSpecific.clazz = Nil,
        .number = Header_FieldNumber_Signature,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Header__storage_, signature),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "newPublicKey",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = Header_FieldNumber_NewPublicKey,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Header__storage_, newPublicKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "newDiversifier",
        .dataTypeSpecific.clazz = Nil,
        .number = Header_FieldNumber_NewDiversifier,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Header__storage_, newDiversifier),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Header)
                                   messageName:@"Header"
                               fileDescription:&SolomachineRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Header__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Misbehaviour

@implementation Misbehaviour

@dynamic clientId;
@dynamic sequence;
@dynamic hasSignatureOne, signatureOne;
@dynamic hasSignatureTwo, signatureTwo;

typedef struct Misbehaviour__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  SignatureAndData *signatureOne;
  SignatureAndData *signatureTwo;
  uint64_t sequence;
} Misbehaviour__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.clazz = Nil,
        .number = Misbehaviour_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Misbehaviour__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sequence",
        .dataTypeSpecific.clazz = Nil,
        .number = Misbehaviour_FieldNumber_Sequence,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Misbehaviour__storage_, sequence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "signatureOne",
        .dataTypeSpecific.clazz = GPBObjCClass(SignatureAndData),
        .number = Misbehaviour_FieldNumber_SignatureOne,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Misbehaviour__storage_, signatureOne),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signatureTwo",
        .dataTypeSpecific.clazz = GPBObjCClass(SignatureAndData),
        .number = Misbehaviour_FieldNumber_SignatureTwo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Misbehaviour__storage_, signatureTwo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Misbehaviour)
                                   messageName:@"Misbehaviour"
                               fileDescription:&SolomachineRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Misbehaviour__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SignatureAndData

@implementation SignatureAndData

@dynamic signature;
@dynamic dataType;
@dynamic data_p;
@dynamic timestamp;

typedef struct SignatureAndData__storage_ {
  uint32_t _has_storage_[1];
  DataType dataType;
  NSData *signature;
  NSData *data_p;
  uint64_t timestamp;
} SignatureAndData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "signature",
        .dataTypeSpecific.clazz = Nil,
        .number = SignatureAndData_FieldNumber_Signature,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SignatureAndData__storage_, signature),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "dataType",
        .dataTypeSpecific.enumDescFunc = DataType_EnumDescriptor,
        .number = SignatureAndData_FieldNumber_DataType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SignatureAndData__storage_, dataType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SignatureAndData_FieldNumber_Data_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SignatureAndData__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.clazz = Nil,
        .number = SignatureAndData_FieldNumber_Timestamp,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SignatureAndData__storage_, timestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(SignatureAndData)
                                   messageName:@"SignatureAndData"
                               fileDescription:&SolomachineRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SignatureAndData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SignatureAndData_DataType_RawValue(SignatureAndData *message) {
  GPBDescriptor *descriptor = [SignatureAndData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SignatureAndData_FieldNumber_DataType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSignatureAndData_DataType_RawValue(SignatureAndData *message, int32_t value) {
  GPBDescriptor *descriptor = [SignatureAndData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SignatureAndData_FieldNumber_DataType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - TimestampedSignatureData

@implementation TimestampedSignatureData

@dynamic signatureData;
@dynamic timestamp;

typedef struct TimestampedSignatureData__storage_ {
  uint32_t _has_storage_[1];
  NSData *signatureData;
  uint64_t timestamp;
} TimestampedSignatureData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "signatureData",
        .dataTypeSpecific.clazz = Nil,
        .number = TimestampedSignatureData_FieldNumber_SignatureData,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TimestampedSignatureData__storage_, signatureData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.clazz = Nil,
        .number = TimestampedSignatureData_FieldNumber_Timestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TimestampedSignatureData__storage_, timestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(TimestampedSignatureData)
                                   messageName:@"TimestampedSignatureData"
                               fileDescription:&SolomachineRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TimestampedSignatureData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SignBytes

@implementation SignBytes

@dynamic sequence;
@dynamic timestamp;
@dynamic diversifier;
@dynamic dataType;
@dynamic data_p;

typedef struct SignBytes__storage_ {
  uint32_t _has_storage_[1];
  DataType dataType;
  NSString *diversifier;
  NSData *data_p;
  uint64_t sequence;
  uint64_t timestamp;
} SignBytes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sequence",
        .dataTypeSpecific.clazz = Nil,
        .number = SignBytes_FieldNumber_Sequence,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SignBytes__storage_, sequence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.clazz = Nil,
        .number = SignBytes_FieldNumber_Timestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SignBytes__storage_, timestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "diversifier",
        .dataTypeSpecific.clazz = Nil,
        .number = SignBytes_FieldNumber_Diversifier,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SignBytes__storage_, diversifier),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dataType",
        .dataTypeSpecific.enumDescFunc = DataType_EnumDescriptor,
        .number = SignBytes_FieldNumber_DataType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SignBytes__storage_, dataType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SignBytes_FieldNumber_Data_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SignBytes__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(SignBytes)
                                   messageName:@"SignBytes"
                               fileDescription:&SolomachineRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SignBytes__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SignBytes_DataType_RawValue(SignBytes *message) {
  GPBDescriptor *descriptor = [SignBytes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SignBytes_FieldNumber_DataType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSignBytes_DataType_RawValue(SignBytes *message, int32_t value) {
  GPBDescriptor *descriptor = [SignBytes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SignBytes_FieldNumber_DataType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - HeaderData

@implementation HeaderData

@dynamic hasNewPubKey, newPubKey;
@dynamic newDiversifier;

typedef struct HeaderData__storage_ {
  uint32_t _has_storage_[1];
  GPBAny *newPubKey;
  NSString *newDiversifier;
} HeaderData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "newPubKey",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = HeaderData_FieldNumber_NewPubKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HeaderData__storage_, newPubKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "newDiversifier",
        .dataTypeSpecific.clazz = Nil,
        .number = HeaderData_FieldNumber_NewDiversifier,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HeaderData__storage_, newDiversifier),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(HeaderData)
                                   messageName:@"HeaderData"
                               fileDescription:&SolomachineRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HeaderData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ClientStateData

@implementation ClientStateData

@dynamic path;
@dynamic hasClientState, clientState;

typedef struct ClientStateData__storage_ {
  uint32_t _has_storage_[1];
  NSData *path;
  GPBAny *clientState;
} ClientStateData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "path",
        .dataTypeSpecific.clazz = Nil,
        .number = ClientStateData_FieldNumber_Path,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ClientStateData__storage_, path),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "clientState",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = ClientStateData_FieldNumber_ClientState,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ClientStateData__storage_, clientState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ClientStateData)
                                   messageName:@"ClientStateData"
                               fileDescription:&SolomachineRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ClientStateData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ConsensusStateData

@implementation ConsensusStateData

@dynamic path;
@dynamic hasConsensusState, consensusState;

typedef struct ConsensusStateData__storage_ {
  uint32_t _has_storage_[1];
  NSData *path;
  GPBAny *consensusState;
} ConsensusStateData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "path",
        .dataTypeSpecific.clazz = Nil,
        .number = ConsensusStateData_FieldNumber_Path,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ConsensusStateData__storage_, path),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "consensusState",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = ConsensusStateData_FieldNumber_ConsensusState,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ConsensusStateData__storage_, consensusState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ConsensusStateData)
                                   messageName:@"ConsensusStateData"
                               fileDescription:&SolomachineRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ConsensusStateData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ConnectionStateData

@implementation ConnectionStateData

@dynamic path;
@dynamic hasConnection, connection;

typedef struct ConnectionStateData__storage_ {
  uint32_t _has_storage_[1];
  NSData *path;
  ConnectionEnd *connection;
} ConnectionStateData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "path",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectionStateData_FieldNumber_Path,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ConnectionStateData__storage_, path),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "connection",
        .dataTypeSpecific.clazz = GPBObjCClass(ConnectionEnd),
        .number = ConnectionStateData_FieldNumber_Connection,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ConnectionStateData__storage_, connection),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ConnectionStateData)
                                   messageName:@"ConnectionStateData"
                               fileDescription:&SolomachineRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ConnectionStateData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChannelStateData

@implementation ChannelStateData

@dynamic path;
@dynamic hasChannel, channel;

typedef struct ChannelStateData__storage_ {
  uint32_t _has_storage_[1];
  NSData *path;
  Channel *channel;
} ChannelStateData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "path",
        .dataTypeSpecific.clazz = Nil,
        .number = ChannelStateData_FieldNumber_Path,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChannelStateData__storage_, path),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "channel",
        .dataTypeSpecific.clazz = GPBObjCClass(Channel),
        .number = ChannelStateData_FieldNumber_Channel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChannelStateData__storage_, channel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ChannelStateData)
                                   messageName:@"ChannelStateData"
                               fileDescription:&SolomachineRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChannelStateData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PacketCommitmentData

@implementation PacketCommitmentData

@dynamic path;
@dynamic commitment;

typedef struct PacketCommitmentData__storage_ {
  uint32_t _has_storage_[1];
  NSData *path;
  NSData *commitment;
} PacketCommitmentData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "path",
        .dataTypeSpecific.clazz = Nil,
        .number = PacketCommitmentData_FieldNumber_Path,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PacketCommitmentData__storage_, path),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "commitment",
        .dataTypeSpecific.clazz = Nil,
        .number = PacketCommitmentData_FieldNumber_Commitment,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PacketCommitmentData__storage_, commitment),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(PacketCommitmentData)
                                   messageName:@"PacketCommitmentData"
                               fileDescription:&SolomachineRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PacketCommitmentData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PacketAcknowledgementData

@implementation PacketAcknowledgementData

@dynamic path;
@dynamic acknowledgement;

typedef struct PacketAcknowledgementData__storage_ {
  uint32_t _has_storage_[1];
  NSData *path;
  NSData *acknowledgement;
} PacketAcknowledgementData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "path",
        .dataTypeSpecific.clazz = Nil,
        .number = PacketAcknowledgementData_FieldNumber_Path,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PacketAcknowledgementData__storage_, path),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "acknowledgement",
        .dataTypeSpecific.clazz = Nil,
        .number = PacketAcknowledgementData_FieldNumber_Acknowledgement,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PacketAcknowledgementData__storage_, acknowledgement),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(PacketAcknowledgementData)
                                   messageName:@"PacketAcknowledgementData"
                               fileDescription:&SolomachineRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PacketAcknowledgementData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PacketReceiptAbsenceData

@implementation PacketReceiptAbsenceData

@dynamic path;

typedef struct PacketReceiptAbsenceData__storage_ {
  uint32_t _has_storage_[1];
  NSData *path;
} PacketReceiptAbsenceData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "path",
        .dataTypeSpecific.clazz = Nil,
        .number = PacketReceiptAbsenceData_FieldNumber_Path,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PacketReceiptAbsenceData__storage_, path),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(PacketReceiptAbsenceData)
                                   messageName:@"PacketReceiptAbsenceData"
                               fileDescription:&SolomachineRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PacketReceiptAbsenceData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NextSequenceRecvData

@implementation NextSequenceRecvData

@dynamic path;
@dynamic nextSeqRecv;

typedef struct NextSequenceRecvData__storage_ {
  uint32_t _has_storage_[1];
  NSData *path;
  uint64_t nextSeqRecv;
} NextSequenceRecvData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "path",
        .dataTypeSpecific.clazz = Nil,
        .number = NextSequenceRecvData_FieldNumber_Path,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NextSequenceRecvData__storage_, path),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "nextSeqRecv",
        .dataTypeSpecific.clazz = Nil,
        .number = NextSequenceRecvData_FieldNumber_NextSeqRecv,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NextSequenceRecvData__storage_, nextSeqRecv),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(NextSequenceRecvData)
                                   messageName:@"NextSequenceRecvData"
                               fileDescription:&SolomachineRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NextSequenceRecvData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
