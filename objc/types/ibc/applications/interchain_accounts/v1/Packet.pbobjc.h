// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: ibc/applications/interchain_accounts/v1/packet.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum Type

/**
 * Type defines a classification of message issued from a controller chain to its associated interchain accounts
 * host
 **/
typedef GPB_ENUM(Type) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Type_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** Default zero value enumeration */
  Type_TypeUnspecified = 0,

  /** Execute a transaction on an interchain accounts host chain */
  Type_TypeExecuteTx = 1,
};

GPBEnumDescriptor *Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Type_IsValidValue(int32_t value);

#pragma mark - PacketRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface PacketRoot : GPBRootObject
@end

#pragma mark - InterchainAccountPacketData

typedef GPB_ENUM(InterchainAccountPacketData_FieldNumber) {
  InterchainAccountPacketData_FieldNumber_Type = 1,
  InterchainAccountPacketData_FieldNumber_Data_p = 2,
  InterchainAccountPacketData_FieldNumber_Memo = 3,
};

/**
 * InterchainAccountPacketData is comprised of a raw transaction, type of transaction and optional memo field.
 **/
GPB_FINAL @interface InterchainAccountPacketData : GPBMessage

@property(nonatomic, readwrite) Type type;

@property(nonatomic, readwrite, copy, null_resettable) NSData *data_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *memo;

@end

/**
 * Fetches the raw value of a @c InterchainAccountPacketData's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t InterchainAccountPacketData_Type_RawValue(InterchainAccountPacketData *message);
/**
 * Sets the raw value of an @c InterchainAccountPacketData's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetInterchainAccountPacketData_Type_RawValue(InterchainAccountPacketData *message, int32_t value);

#pragma mark - CosmosTx

typedef GPB_ENUM(CosmosTx_FieldNumber) {
  CosmosTx_FieldNumber_MessagesArray = 1,
};

/**
 * CosmosTx contains a list of sdk.Msg's. It should be used when sending transactions to an SDK host chain.
 **/
GPB_FINAL @interface CosmosTx : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<GPBAny*> *messagesArray;
/** The number of items in @c messagesArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger messagesArray_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
