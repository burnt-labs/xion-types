// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: ibc/applications/interchain_accounts/v1/packet.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import <stdatomic.h>

#import "ibc/applications/interchain_accounts/v1/Packet.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(CosmosTx);
GPBObjCClassDeclaration(GPBAny);
GPBObjCClassDeclaration(InterchainAccountPacketData);

#pragma mark - PacketRoot

@implementation PacketRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription PacketRoot_FileDescription = {
  .package = "ibc.applications.interchain_accounts.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Enum Type

GPBEnumDescriptor *Type_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "TypeUnspecified\000TypeExecuteTx\000";
    static const int32_t values[] = {
        Type_TypeUnspecified,
        Type_TypeExecuteTx,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Type_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case Type_TypeUnspecified:
    case Type_TypeExecuteTx:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - InterchainAccountPacketData

@implementation InterchainAccountPacketData

@dynamic type;
@dynamic data_p;
@dynamic memo;

typedef struct InterchainAccountPacketData__storage_ {
  uint32_t _has_storage_[1];
  Type type;
  NSData *data_p;
  NSString *memo;
} InterchainAccountPacketData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = Type_EnumDescriptor,
        .number = InterchainAccountPacketData_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InterchainAccountPacketData__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = InterchainAccountPacketData_FieldNumber_Data_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(InterchainAccountPacketData__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "memo",
        .dataTypeSpecific.clazz = Nil,
        .number = InterchainAccountPacketData_FieldNumber_Memo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(InterchainAccountPacketData__storage_, memo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(InterchainAccountPacketData)
                                   messageName:@"InterchainAccountPacketData"
                               fileDescription:&PacketRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InterchainAccountPacketData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t InterchainAccountPacketData_Type_RawValue(InterchainAccountPacketData *message) {
  GPBDescriptor *descriptor = [InterchainAccountPacketData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:InterchainAccountPacketData_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetInterchainAccountPacketData_Type_RawValue(InterchainAccountPacketData *message, int32_t value) {
  GPBDescriptor *descriptor = [InterchainAccountPacketData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:InterchainAccountPacketData_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - CosmosTx

@implementation CosmosTx

@dynamic messagesArray, messagesArray_Count;

typedef struct CosmosTx__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *messagesArray;
} CosmosTx__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messagesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = CosmosTx_FieldNumber_MessagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CosmosTx__storage_, messagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(CosmosTx)
                                   messageName:@"CosmosTx"
                               fileDescription:&PacketRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CosmosTx__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
