// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: ibc/applications/interchain_accounts/controller/v1/tx.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "ibc/applications/interchain_accounts/controller/v1/Tx.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(InterchainAccountPacketData);
GPBObjCClassDeclaration(MsgRegisterInterchainAccount);
GPBObjCClassDeclaration(MsgRegisterInterchainAccountResponse);
GPBObjCClassDeclaration(MsgSendTx);
GPBObjCClassDeclaration(MsgSendTxResponse);
GPBObjCClassDeclaration(MsgUpdateParams);
GPBObjCClassDeclaration(MsgUpdateParamsResponse);
GPBObjCClassDeclaration(Params);

#pragma mark - TxRoot

@implementation TxRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription TxRoot_FileDescription = {
  .package = "ibc.applications.interchain_accounts.controller.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - MsgRegisterInterchainAccount

@implementation MsgRegisterInterchainAccount

@dynamic owner;
@dynamic connectionId;
@dynamic version;
@dynamic ordering;

typedef struct MsgRegisterInterchainAccount__storage_ {
  uint32_t _has_storage_[1];
  Order ordering;
  NSString *owner;
  NSString *connectionId;
  NSString *version;
} MsgRegisterInterchainAccount__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "owner",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgRegisterInterchainAccount_FieldNumber_Owner,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgRegisterInterchainAccount__storage_, owner),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "connectionId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgRegisterInterchainAccount_FieldNumber_ConnectionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgRegisterInterchainAccount__storage_, connectionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgRegisterInterchainAccount_FieldNumber_Version,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgRegisterInterchainAccount__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ordering",
        .dataTypeSpecific.enumDescFunc = Order_EnumDescriptor,
        .number = MsgRegisterInterchainAccount_FieldNumber_Ordering,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgRegisterInterchainAccount__storage_, ordering),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgRegisterInterchainAccount)
                                   messageName:@"MsgRegisterInterchainAccount"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgRegisterInterchainAccount__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MsgRegisterInterchainAccount_Ordering_RawValue(MsgRegisterInterchainAccount *message) {
  GPBDescriptor *descriptor = [MsgRegisterInterchainAccount descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgRegisterInterchainAccount_FieldNumber_Ordering];
  return GPBGetMessageRawEnumField(message, field);
}

void SetMsgRegisterInterchainAccount_Ordering_RawValue(MsgRegisterInterchainAccount *message, int32_t value) {
  GPBDescriptor *descriptor = [MsgRegisterInterchainAccount descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgRegisterInterchainAccount_FieldNumber_Ordering];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - MsgRegisterInterchainAccountResponse

@implementation MsgRegisterInterchainAccountResponse

@dynamic channelId;
@dynamic portId;

typedef struct MsgRegisterInterchainAccountResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *channelId;
  NSString *portId;
} MsgRegisterInterchainAccountResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgRegisterInterchainAccountResponse_FieldNumber_ChannelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgRegisterInterchainAccountResponse__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "portId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgRegisterInterchainAccountResponse_FieldNumber_PortId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgRegisterInterchainAccountResponse__storage_, portId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgRegisterInterchainAccountResponse)
                                   messageName:@"MsgRegisterInterchainAccountResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgRegisterInterchainAccountResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgSendTx

@implementation MsgSendTx

@dynamic owner;
@dynamic connectionId;
@dynamic hasPacketData, packetData;
@dynamic relativeTimeout;

typedef struct MsgSendTx__storage_ {
  uint32_t _has_storage_[1];
  NSString *owner;
  NSString *connectionId;
  InterchainAccountPacketData *packetData;
  uint64_t relativeTimeout;
} MsgSendTx__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "owner",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSendTx_FieldNumber_Owner,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgSendTx__storage_, owner),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "connectionId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSendTx_FieldNumber_ConnectionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgSendTx__storage_, connectionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "packetData",
        .dataTypeSpecific.clazz = GPBObjCClass(InterchainAccountPacketData),
        .number = MsgSendTx_FieldNumber_PacketData,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgSendTx__storage_, packetData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "relativeTimeout",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSendTx_FieldNumber_RelativeTimeout,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgSendTx__storage_, relativeTimeout),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgSendTx)
                                   messageName:@"MsgSendTx"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgSendTx__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgSendTxResponse

@implementation MsgSendTxResponse

@dynamic sequence;

typedef struct MsgSendTxResponse__storage_ {
  uint32_t _has_storage_[1];
  uint64_t sequence;
} MsgSendTxResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sequence",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSendTxResponse_FieldNumber_Sequence,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgSendTxResponse__storage_, sequence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgSendTxResponse)
                                   messageName:@"MsgSendTxResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgSendTxResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateParams

@implementation MsgUpdateParams

@dynamic signer;
@dynamic hasParams, params;

typedef struct MsgUpdateParams__storage_ {
  uint32_t _has_storage_[1];
  NSString *signer;
  Params *params;
} MsgUpdateParams__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "signer",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateParams_FieldNumber_Signer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgUpdateParams__storage_, signer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "params",
        .dataTypeSpecific.clazz = GPBObjCClass(Params),
        .number = MsgUpdateParams_FieldNumber_Params,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgUpdateParams__storage_, params),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateParams)
                                   messageName:@"MsgUpdateParams"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgUpdateParams__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateParamsResponse

@implementation MsgUpdateParamsResponse


typedef struct MsgUpdateParamsResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgUpdateParamsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateParamsResponse)
                                   messageName:@"MsgUpdateParamsResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgUpdateParamsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
