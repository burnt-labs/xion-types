// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: ibc/applications/interchain_accounts/genesis/v1/genesis.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "ibc/applications/interchain_accounts/genesis/v1/Genesis.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ActiveChannel);
GPBObjCClassDeclaration(ControllerGenesisState);
GPBObjCClassDeclaration(GenesisState);
GPBObjCClassDeclaration(HostGenesisState);
GPBObjCClassDeclaration(Params);
GPBObjCClassDeclaration(RegisteredInterchainAccount);

#pragma mark - GenesisRoot

@implementation GenesisRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription GenesisRoot_FileDescription = {
  .package = "ibc.applications.interchain_accounts.genesis.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - GenesisState

@implementation GenesisState

@dynamic hasControllerGenesisState, controllerGenesisState;
@dynamic hasHostGenesisState, hostGenesisState;

typedef struct GenesisState__storage_ {
  uint32_t _has_storage_[1];
  ControllerGenesisState *controllerGenesisState;
  HostGenesisState *hostGenesisState;
} GenesisState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "controllerGenesisState",
        .dataTypeSpecific.clazz = GPBObjCClass(ControllerGenesisState),
        .number = GenesisState_FieldNumber_ControllerGenesisState,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GenesisState__storage_, controllerGenesisState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hostGenesisState",
        .dataTypeSpecific.clazz = GPBObjCClass(HostGenesisState),
        .number = GenesisState_FieldNumber_HostGenesisState,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GenesisState__storage_, hostGenesisState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(GenesisState)
                                   messageName:@"GenesisState"
                               fileDescription:&GenesisRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GenesisState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ControllerGenesisState

@implementation ControllerGenesisState

@dynamic activeChannelsArray, activeChannelsArray_Count;
@dynamic interchainAccountsArray, interchainAccountsArray_Count;
@dynamic portsArray, portsArray_Count;
@dynamic hasParams, params;

typedef struct ControllerGenesisState__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *activeChannelsArray;
  NSMutableArray *interchainAccountsArray;
  NSMutableArray *portsArray;
  Params *params;
} ControllerGenesisState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "activeChannelsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ActiveChannel),
        .number = ControllerGenesisState_FieldNumber_ActiveChannelsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ControllerGenesisState__storage_, activeChannelsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "interchainAccountsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(RegisteredInterchainAccount),
        .number = ControllerGenesisState_FieldNumber_InterchainAccountsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ControllerGenesisState__storage_, interchainAccountsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "portsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = ControllerGenesisState_FieldNumber_PortsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ControllerGenesisState__storage_, portsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "params",
        .dataTypeSpecific.clazz = GPBObjCClass(Params),
        .number = ControllerGenesisState_FieldNumber_Params,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ControllerGenesisState__storage_, params),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ControllerGenesisState)
                                   messageName:@"ControllerGenesisState"
                               fileDescription:&GenesisRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ControllerGenesisState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HostGenesisState

@implementation HostGenesisState

@dynamic activeChannelsArray, activeChannelsArray_Count;
@dynamic interchainAccountsArray, interchainAccountsArray_Count;
@dynamic port;
@dynamic hasParams, params;

typedef struct HostGenesisState__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *activeChannelsArray;
  NSMutableArray *interchainAccountsArray;
  NSString *port;
  Params *params;
} HostGenesisState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "activeChannelsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ActiveChannel),
        .number = HostGenesisState_FieldNumber_ActiveChannelsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(HostGenesisState__storage_, activeChannelsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "interchainAccountsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(RegisteredInterchainAccount),
        .number = HostGenesisState_FieldNumber_InterchainAccountsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(HostGenesisState__storage_, interchainAccountsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "port",
        .dataTypeSpecific.clazz = Nil,
        .number = HostGenesisState_FieldNumber_Port,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HostGenesisState__storage_, port),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "params",
        .dataTypeSpecific.clazz = GPBObjCClass(Params),
        .number = HostGenesisState_FieldNumber_Params,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HostGenesisState__storage_, params),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(HostGenesisState)
                                   messageName:@"HostGenesisState"
                               fileDescription:&GenesisRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HostGenesisState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ActiveChannel

@implementation ActiveChannel

@dynamic connectionId;
@dynamic portId;
@dynamic channelId;
@dynamic isMiddlewareEnabled;

typedef struct ActiveChannel__storage_ {
  uint32_t _has_storage_[1];
  NSString *connectionId;
  NSString *portId;
  NSString *channelId;
} ActiveChannel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "connectionId",
        .dataTypeSpecific.clazz = Nil,
        .number = ActiveChannel_FieldNumber_ConnectionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ActiveChannel__storage_, connectionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "portId",
        .dataTypeSpecific.clazz = Nil,
        .number = ActiveChannel_FieldNumber_PortId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ActiveChannel__storage_, portId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.clazz = Nil,
        .number = ActiveChannel_FieldNumber_ChannelId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ActiveChannel__storage_, channelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isMiddlewareEnabled",
        .dataTypeSpecific.clazz = Nil,
        .number = ActiveChannel_FieldNumber_IsMiddlewareEnabled,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ActiveChannel)
                                   messageName:@"ActiveChannel"
                               fileDescription:&GenesisRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ActiveChannel__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RegisteredInterchainAccount

@implementation RegisteredInterchainAccount

@dynamic connectionId;
@dynamic portId;
@dynamic accountAddress;

typedef struct RegisteredInterchainAccount__storage_ {
  uint32_t _has_storage_[1];
  NSString *connectionId;
  NSString *portId;
  NSString *accountAddress;
} RegisteredInterchainAccount__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "connectionId",
        .dataTypeSpecific.clazz = Nil,
        .number = RegisteredInterchainAccount_FieldNumber_ConnectionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RegisteredInterchainAccount__storage_, connectionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "portId",
        .dataTypeSpecific.clazz = Nil,
        .number = RegisteredInterchainAccount_FieldNumber_PortId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RegisteredInterchainAccount__storage_, portId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = RegisteredInterchainAccount_FieldNumber_AccountAddress,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RegisteredInterchainAccount__storage_, accountAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(RegisteredInterchainAccount)
                                   messageName:@"RegisteredInterchainAccount"
                               fileDescription:&GenesisRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RegisteredInterchainAccount__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
