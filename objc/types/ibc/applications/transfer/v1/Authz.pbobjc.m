// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: ibc/applications/transfer/v1/authz.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "ibc/applications/transfer/v1/Authz.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Allocation);
GPBObjCClassDeclaration(Coin);
GPBObjCClassDeclaration(TransferAuthorization);

#pragma mark - AuthzRoot

@implementation AuthzRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription AuthzRoot_FileDescription = {
  .package = "ibc.applications.transfer.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Allocation

@implementation Allocation

@dynamic sourcePort;
@dynamic sourceChannel;
@dynamic spendLimitArray, spendLimitArray_Count;
@dynamic allowListArray, allowListArray_Count;
@dynamic allowedPacketDataArray, allowedPacketDataArray_Count;

typedef struct Allocation__storage_ {
  uint32_t _has_storage_[1];
  NSString *sourcePort;
  NSString *sourceChannel;
  NSMutableArray *spendLimitArray;
  NSMutableArray *allowListArray;
  NSMutableArray *allowedPacketDataArray;
} Allocation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sourcePort",
        .dataTypeSpecific.clazz = Nil,
        .number = Allocation_FieldNumber_SourcePort,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Allocation__storage_, sourcePort),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sourceChannel",
        .dataTypeSpecific.clazz = Nil,
        .number = Allocation_FieldNumber_SourceChannel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Allocation__storage_, sourceChannel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "spendLimitArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = Allocation_FieldNumber_SpendLimitArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Allocation__storage_, spendLimitArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "allowListArray",
        .dataTypeSpecific.clazz = Nil,
        .number = Allocation_FieldNumber_AllowListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Allocation__storage_, allowListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "allowedPacketDataArray",
        .dataTypeSpecific.clazz = Nil,
        .number = Allocation_FieldNumber_AllowedPacketDataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Allocation__storage_, allowedPacketDataArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Allocation)
                                   messageName:@"Allocation"
                               fileDescription:&AuthzRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Allocation__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferAuthorization

@implementation TransferAuthorization

@dynamic allocationsArray, allocationsArray_Count;

typedef struct TransferAuthorization__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *allocationsArray;
} TransferAuthorization__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "allocationsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Allocation),
        .number = TransferAuthorization_FieldNumber_AllocationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TransferAuthorization__storage_, allocationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(TransferAuthorization)
                                   messageName:@"TransferAuthorization"
                               fileDescription:&AuthzRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferAuthorization__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
