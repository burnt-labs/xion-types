// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: packetforward/v1/genesis.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "packetforward/v1/Genesis.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(GenesisState);
GPBObjCClassDeclaration(InFlightPacket);

#pragma mark - GenesisRoot

@implementation GenesisRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription GenesisRoot_FileDescription = {
  .package = "packetforward.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - GenesisState

@implementation GenesisState

@dynamic inFlightPackets, inFlightPackets_Count;

typedef struct GenesisState__storage_ {
  uint32_t _has_storage_[1];
  NSMutableDictionary *inFlightPackets;
} GenesisState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "inFlightPackets",
        .dataTypeSpecific.clazz = GPBObjCClass(InFlightPacket),
        .number = GenesisState_FieldNumber_InFlightPackets,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GenesisState__storage_, inFlightPackets),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(GenesisState)
                                   messageName:@"GenesisState"
                               fileDescription:&GenesisRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GenesisState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - InFlightPacket

@implementation InFlightPacket

@dynamic originalSenderAddress;
@dynamic refundChannelId;
@dynamic refundPortId;
@dynamic packetSrcChannelId;
@dynamic packetSrcPortId;
@dynamic packetTimeoutTimestamp;
@dynamic packetTimeoutHeight;
@dynamic packetData;
@dynamic refundSequence;
@dynamic retriesRemaining;
@dynamic timeout;
@dynamic nonrefundable;

typedef struct InFlightPacket__storage_ {
  uint32_t _has_storage_[1];
  int32_t retriesRemaining;
  NSString *originalSenderAddress;
  NSString *refundChannelId;
  NSString *refundPortId;
  NSString *packetSrcChannelId;
  NSString *packetSrcPortId;
  NSString *packetTimeoutHeight;
  NSData *packetData;
  uint64_t packetTimeoutTimestamp;
  uint64_t refundSequence;
  uint64_t timeout;
} InFlightPacket__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "originalSenderAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = InFlightPacket_FieldNumber_OriginalSenderAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InFlightPacket__storage_, originalSenderAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "refundChannelId",
        .dataTypeSpecific.clazz = Nil,
        .number = InFlightPacket_FieldNumber_RefundChannelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(InFlightPacket__storage_, refundChannelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "refundPortId",
        .dataTypeSpecific.clazz = Nil,
        .number = InFlightPacket_FieldNumber_RefundPortId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(InFlightPacket__storage_, refundPortId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "packetSrcChannelId",
        .dataTypeSpecific.clazz = Nil,
        .number = InFlightPacket_FieldNumber_PacketSrcChannelId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(InFlightPacket__storage_, packetSrcChannelId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "packetSrcPortId",
        .dataTypeSpecific.clazz = Nil,
        .number = InFlightPacket_FieldNumber_PacketSrcPortId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(InFlightPacket__storage_, packetSrcPortId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "packetTimeoutTimestamp",
        .dataTypeSpecific.clazz = Nil,
        .number = InFlightPacket_FieldNumber_PacketTimeoutTimestamp,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(InFlightPacket__storage_, packetTimeoutTimestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "packetTimeoutHeight",
        .dataTypeSpecific.clazz = Nil,
        .number = InFlightPacket_FieldNumber_PacketTimeoutHeight,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(InFlightPacket__storage_, packetTimeoutHeight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "packetData",
        .dataTypeSpecific.clazz = Nil,
        .number = InFlightPacket_FieldNumber_PacketData,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(InFlightPacket__storage_, packetData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "refundSequence",
        .dataTypeSpecific.clazz = Nil,
        .number = InFlightPacket_FieldNumber_RefundSequence,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(InFlightPacket__storage_, refundSequence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "retriesRemaining",
        .dataTypeSpecific.clazz = Nil,
        .number = InFlightPacket_FieldNumber_RetriesRemaining,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(InFlightPacket__storage_, retriesRemaining),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "timeout",
        .dataTypeSpecific.clazz = Nil,
        .number = InFlightPacket_FieldNumber_Timeout,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(InFlightPacket__storage_, timeout),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "nonrefundable",
        .dataTypeSpecific.clazz = Nil,
        .number = InFlightPacket_FieldNumber_Nonrefundable,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(InFlightPacket)
                                   messageName:@"InFlightPacket"
                               fileDescription:&GenesisRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InFlightPacket__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
