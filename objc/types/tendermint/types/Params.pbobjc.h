// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: tendermint/types/params.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class ABCIParams;
@class BlockParams;
@class EvidenceParams;
@class ValidatorParams;
@class VersionParams;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - ParamsRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface ParamsRoot : GPBRootObject
@end

#pragma mark - ConsensusParams

typedef GPB_ENUM(ConsensusParams_FieldNumber) {
  ConsensusParams_FieldNumber_Block = 1,
  ConsensusParams_FieldNumber_Evidence = 2,
  ConsensusParams_FieldNumber_Validator = 3,
  ConsensusParams_FieldNumber_Version = 4,
  ConsensusParams_FieldNumber_Abci = 5,
};

/**
 * ConsensusParams contains consensus critical parameters that determine the
 * validity of blocks.
 **/
GPB_FINAL @interface ConsensusParams : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) BlockParams *block;
/** Test to see if @c block has been set. */
@property(nonatomic, readwrite) BOOL hasBlock;

@property(nonatomic, readwrite, strong, null_resettable) EvidenceParams *evidence;
/** Test to see if @c evidence has been set. */
@property(nonatomic, readwrite) BOOL hasEvidence;

@property(nonatomic, readwrite, strong, null_resettable) ValidatorParams *validator;
/** Test to see if @c validator has been set. */
@property(nonatomic, readwrite) BOOL hasValidator;

@property(nonatomic, readwrite, strong, null_resettable) VersionParams *version;
/** Test to see if @c version has been set. */
@property(nonatomic, readwrite) BOOL hasVersion;

@property(nonatomic, readwrite, strong, null_resettable) ABCIParams *abci;
/** Test to see if @c abci has been set. */
@property(nonatomic, readwrite) BOOL hasAbci;

@end

#pragma mark - BlockParams

typedef GPB_ENUM(BlockParams_FieldNumber) {
  BlockParams_FieldNumber_MaxBytes = 1,
  BlockParams_FieldNumber_MaxGas = 2,
};

/**
 * BlockParams contains limits on the block size.
 **/
GPB_FINAL @interface BlockParams : GPBMessage

/**
 * Max block size, in bytes.
 * Note: must be greater than 0
 **/
@property(nonatomic, readwrite) int64_t maxBytes;

/**
 * Max gas per block.
 * Note: must be greater or equal to -1
 **/
@property(nonatomic, readwrite) int64_t maxGas;

@end

#pragma mark - EvidenceParams

typedef GPB_ENUM(EvidenceParams_FieldNumber) {
  EvidenceParams_FieldNumber_MaxAgeNumBlocks = 1,
  EvidenceParams_FieldNumber_MaxAgeDuration = 2,
  EvidenceParams_FieldNumber_MaxBytes = 3,
};

/**
 * EvidenceParams determine how we handle evidence of malfeasance.
 **/
GPB_FINAL @interface EvidenceParams : GPBMessage

/**
 * Max age of evidence, in blocks.
 *
 * The basic formula for calculating this is: MaxAgeDuration / {average block
 * time}.
 **/
@property(nonatomic, readwrite) int64_t maxAgeNumBlocks;

/**
 * Max age of evidence, in time.
 *
 * It should correspond with an app's "unbonding period" or other similar
 * mechanism for handling [Nothing-At-Stake
 * attacks](https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed).
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBDuration *maxAgeDuration;
/** Test to see if @c maxAgeDuration has been set. */
@property(nonatomic, readwrite) BOOL hasMaxAgeDuration;

/**
 * This sets the maximum size of total evidence in bytes that can be committed in a single block.
 * and should fall comfortably under the max block bytes.
 * Default is 1048576 or 1MB
 **/
@property(nonatomic, readwrite) int64_t maxBytes;

@end

#pragma mark - ValidatorParams

typedef GPB_ENUM(ValidatorParams_FieldNumber) {
  ValidatorParams_FieldNumber_PubKeyTypesArray = 1,
};

/**
 * ValidatorParams restrict the public key types validators can use.
 * NOTE: uses ABCI pubkey naming, not Amino names.
 **/
GPB_FINAL @interface ValidatorParams : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *pubKeyTypesArray;
/** The number of items in @c pubKeyTypesArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger pubKeyTypesArray_Count;

@end

#pragma mark - VersionParams

typedef GPB_ENUM(VersionParams_FieldNumber) {
  VersionParams_FieldNumber_App = 1,
};

/**
 * VersionParams contains the ABCI application version.
 **/
GPB_FINAL @interface VersionParams : GPBMessage

@property(nonatomic, readwrite) uint64_t app;

@end

#pragma mark - HashedParams

typedef GPB_ENUM(HashedParams_FieldNumber) {
  HashedParams_FieldNumber_BlockMaxBytes = 1,
  HashedParams_FieldNumber_BlockMaxGas = 2,
};

/**
 * HashedParams is a subset of ConsensusParams.
 *
 * It is hashed into the Header.ConsensusHash.
 **/
GPB_FINAL @interface HashedParams : GPBMessage

@property(nonatomic, readwrite) int64_t blockMaxBytes;

@property(nonatomic, readwrite) int64_t blockMaxGas;

@end

#pragma mark - ABCIParams

typedef GPB_ENUM(ABCIParams_FieldNumber) {
  ABCIParams_FieldNumber_VoteExtensionsEnableHeight = 1,
};

/**
 * ABCIParams configure functionality specific to the Application Blockchain Interface.
 **/
GPB_FINAL @interface ABCIParams : GPBMessage

/**
 * vote_extensions_enable_height configures the first height during which
 * vote extensions will be enabled. During this specified height, and for all
 * subsequent heights, precommit messages that do not contain valid extension data
 * will be considered invalid. Prior to this height, vote extensions will not
 * be used or accepted by validators on the network.
 *
 * Once enabled, vote extensions will be created by the application in ExtendVote,
 * passed to the application for validation in VerifyVoteExtension and given
 * to the application to use when proposing a block during PrepareProposal.
 **/
@property(nonatomic, readwrite) int64_t voteExtensionsEnableHeight;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
