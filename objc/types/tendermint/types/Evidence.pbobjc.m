// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: tendermint/types/evidence.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "tendermint/types/Evidence.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(DuplicateVoteEvidence);
GPBObjCClassDeclaration(Evidence);
GPBObjCClassDeclaration(EvidenceList);
GPBObjCClassDeclaration(GPBTimestamp);
GPBObjCClassDeclaration(LightBlock);
GPBObjCClassDeclaration(LightClientAttackEvidence);
GPBObjCClassDeclaration(Validator);
GPBObjCClassDeclaration(Vote);

#pragma mark - EvidenceRoot

@implementation EvidenceRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription EvidenceRoot_FileDescription = {
  .package = "tendermint.types",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Evidence

@implementation Evidence

@dynamic sumOneOfCase;
@dynamic duplicateVoteEvidence;
@dynamic lightClientAttackEvidence;

typedef struct Evidence__storage_ {
  uint32_t _has_storage_[2];
  DuplicateVoteEvidence *duplicateVoteEvidence;
  LightClientAttackEvidence *lightClientAttackEvidence;
} Evidence__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "duplicateVoteEvidence",
        .dataTypeSpecific.clazz = GPBObjCClass(DuplicateVoteEvidence),
        .number = Evidence_FieldNumber_DuplicateVoteEvidence,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Evidence__storage_, duplicateVoteEvidence),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lightClientAttackEvidence",
        .dataTypeSpecific.clazz = GPBObjCClass(LightClientAttackEvidence),
        .number = Evidence_FieldNumber_LightClientAttackEvidence,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Evidence__storage_, lightClientAttackEvidence),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Evidence)
                                   messageName:@"Evidence"
                               fileDescription:&EvidenceRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Evidence__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    static const char *oneofs[] = {
      "sum",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Evidence_ClearSumOneOfCase(Evidence *message) {
  GPBDescriptor *descriptor = [Evidence descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - DuplicateVoteEvidence

@implementation DuplicateVoteEvidence

@dynamic hasVoteA, voteA;
@dynamic hasVoteB, voteB;
@dynamic totalVotingPower;
@dynamic validatorPower;
@dynamic hasTimestamp, timestamp;

typedef struct DuplicateVoteEvidence__storage_ {
  uint32_t _has_storage_[1];
  Vote *voteA;
  Vote *voteB;
  GPBTimestamp *timestamp;
  int64_t totalVotingPower;
  int64_t validatorPower;
} DuplicateVoteEvidence__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voteA",
        .dataTypeSpecific.clazz = GPBObjCClass(Vote),
        .number = DuplicateVoteEvidence_FieldNumber_VoteA,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DuplicateVoteEvidence__storage_, voteA),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "voteB",
        .dataTypeSpecific.clazz = GPBObjCClass(Vote),
        .number = DuplicateVoteEvidence_FieldNumber_VoteB,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DuplicateVoteEvidence__storage_, voteB),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "totalVotingPower",
        .dataTypeSpecific.clazz = Nil,
        .number = DuplicateVoteEvidence_FieldNumber_TotalVotingPower,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DuplicateVoteEvidence__storage_, totalVotingPower),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "validatorPower",
        .dataTypeSpecific.clazz = Nil,
        .number = DuplicateVoteEvidence_FieldNumber_ValidatorPower,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DuplicateVoteEvidence__storage_, validatorPower),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = DuplicateVoteEvidence_FieldNumber_Timestamp,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DuplicateVoteEvidence__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(DuplicateVoteEvidence)
                                   messageName:@"DuplicateVoteEvidence"
                               fileDescription:&EvidenceRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DuplicateVoteEvidence__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LightClientAttackEvidence

@implementation LightClientAttackEvidence

@dynamic hasConflictingBlock, conflictingBlock;
@dynamic commonHeight;
@dynamic byzantineValidatorsArray, byzantineValidatorsArray_Count;
@dynamic totalVotingPower;
@dynamic hasTimestamp, timestamp;

typedef struct LightClientAttackEvidence__storage_ {
  uint32_t _has_storage_[1];
  LightBlock *conflictingBlock;
  NSMutableArray *byzantineValidatorsArray;
  GPBTimestamp *timestamp;
  int64_t commonHeight;
  int64_t totalVotingPower;
} LightClientAttackEvidence__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "conflictingBlock",
        .dataTypeSpecific.clazz = GPBObjCClass(LightBlock),
        .number = LightClientAttackEvidence_FieldNumber_ConflictingBlock,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LightClientAttackEvidence__storage_, conflictingBlock),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "commonHeight",
        .dataTypeSpecific.clazz = Nil,
        .number = LightClientAttackEvidence_FieldNumber_CommonHeight,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LightClientAttackEvidence__storage_, commonHeight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "byzantineValidatorsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Validator),
        .number = LightClientAttackEvidence_FieldNumber_ByzantineValidatorsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LightClientAttackEvidence__storage_, byzantineValidatorsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "totalVotingPower",
        .dataTypeSpecific.clazz = Nil,
        .number = LightClientAttackEvidence_FieldNumber_TotalVotingPower,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LightClientAttackEvidence__storage_, totalVotingPower),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = LightClientAttackEvidence_FieldNumber_Timestamp,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LightClientAttackEvidence__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(LightClientAttackEvidence)
                                   messageName:@"LightClientAttackEvidence"
                               fileDescription:&EvidenceRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LightClientAttackEvidence__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EvidenceList

@implementation EvidenceList

@dynamic evidenceArray, evidenceArray_Count;

typedef struct EvidenceList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *evidenceArray;
} EvidenceList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "evidenceArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Evidence),
        .number = EvidenceList_FieldNumber_EvidenceArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(EvidenceList__storage_, evidenceArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(EvidenceList)
                                   messageName:@"EvidenceList"
                               fileDescription:&EvidenceRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EvidenceList__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
