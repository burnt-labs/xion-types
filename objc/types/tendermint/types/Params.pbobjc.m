// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: tendermint/types/params.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "tendermint/types/Params.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ABCIParams);
GPBObjCClassDeclaration(BlockParams);
GPBObjCClassDeclaration(ConsensusParams);
GPBObjCClassDeclaration(EvidenceParams);
GPBObjCClassDeclaration(GPBDuration);
GPBObjCClassDeclaration(HashedParams);
GPBObjCClassDeclaration(ValidatorParams);
GPBObjCClassDeclaration(VersionParams);

#pragma mark - ParamsRoot

@implementation ParamsRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription ParamsRoot_FileDescription = {
  .package = "tendermint.types",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - ConsensusParams

@implementation ConsensusParams

@dynamic hasBlock, block;
@dynamic hasEvidence, evidence;
@dynamic hasValidator, validator;
@dynamic hasVersion, version;
@dynamic hasAbci, abci;

typedef struct ConsensusParams__storage_ {
  uint32_t _has_storage_[1];
  BlockParams *block;
  EvidenceParams *evidence;
  ValidatorParams *validator;
  VersionParams *version;
  ABCIParams *abci;
} ConsensusParams__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "block",
        .dataTypeSpecific.clazz = GPBObjCClass(BlockParams),
        .number = ConsensusParams_FieldNumber_Block,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ConsensusParams__storage_, block),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "evidence",
        .dataTypeSpecific.clazz = GPBObjCClass(EvidenceParams),
        .number = ConsensusParams_FieldNumber_Evidence,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ConsensusParams__storage_, evidence),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "validator",
        .dataTypeSpecific.clazz = GPBObjCClass(ValidatorParams),
        .number = ConsensusParams_FieldNumber_Validator,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ConsensusParams__storage_, validator),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "version",
        .dataTypeSpecific.clazz = GPBObjCClass(VersionParams),
        .number = ConsensusParams_FieldNumber_Version,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ConsensusParams__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "abci",
        .dataTypeSpecific.clazz = GPBObjCClass(ABCIParams),
        .number = ConsensusParams_FieldNumber_Abci,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ConsensusParams__storage_, abci),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ConsensusParams)
                                   messageName:@"ConsensusParams"
                               fileDescription:&ParamsRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ConsensusParams__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BlockParams

@implementation BlockParams

@dynamic maxBytes;
@dynamic maxGas;

typedef struct BlockParams__storage_ {
  uint32_t _has_storage_[1];
  int64_t maxBytes;
  int64_t maxGas;
} BlockParams__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "maxBytes",
        .dataTypeSpecific.clazz = Nil,
        .number = BlockParams_FieldNumber_MaxBytes,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BlockParams__storage_, maxBytes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "maxGas",
        .dataTypeSpecific.clazz = Nil,
        .number = BlockParams_FieldNumber_MaxGas,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BlockParams__storage_, maxGas),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(BlockParams)
                                   messageName:@"BlockParams"
                               fileDescription:&ParamsRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BlockParams__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EvidenceParams

@implementation EvidenceParams

@dynamic maxAgeNumBlocks;
@dynamic hasMaxAgeDuration, maxAgeDuration;
@dynamic maxBytes;

typedef struct EvidenceParams__storage_ {
  uint32_t _has_storage_[1];
  GPBDuration *maxAgeDuration;
  int64_t maxAgeNumBlocks;
  int64_t maxBytes;
} EvidenceParams__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "maxAgeNumBlocks",
        .dataTypeSpecific.clazz = Nil,
        .number = EvidenceParams_FieldNumber_MaxAgeNumBlocks,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EvidenceParams__storage_, maxAgeNumBlocks),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "maxAgeDuration",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBDuration),
        .number = EvidenceParams_FieldNumber_MaxAgeDuration,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EvidenceParams__storage_, maxAgeDuration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "maxBytes",
        .dataTypeSpecific.clazz = Nil,
        .number = EvidenceParams_FieldNumber_MaxBytes,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EvidenceParams__storage_, maxBytes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(EvidenceParams)
                                   messageName:@"EvidenceParams"
                               fileDescription:&ParamsRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EvidenceParams__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ValidatorParams

@implementation ValidatorParams

@dynamic pubKeyTypesArray, pubKeyTypesArray_Count;

typedef struct ValidatorParams__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *pubKeyTypesArray;
} ValidatorParams__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pubKeyTypesArray",
        .dataTypeSpecific.clazz = Nil,
        .number = ValidatorParams_FieldNumber_PubKeyTypesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ValidatorParams__storage_, pubKeyTypesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ValidatorParams)
                                   messageName:@"ValidatorParams"
                               fileDescription:&ParamsRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ValidatorParams__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VersionParams

@implementation VersionParams

@dynamic app;

typedef struct VersionParams__storage_ {
  uint32_t _has_storage_[1];
  uint64_t app;
} VersionParams__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "app",
        .dataTypeSpecific.clazz = Nil,
        .number = VersionParams_FieldNumber_App,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VersionParams__storage_, app),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(VersionParams)
                                   messageName:@"VersionParams"
                               fileDescription:&ParamsRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VersionParams__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HashedParams

@implementation HashedParams

@dynamic blockMaxBytes;
@dynamic blockMaxGas;

typedef struct HashedParams__storage_ {
  uint32_t _has_storage_[1];
  int64_t blockMaxBytes;
  int64_t blockMaxGas;
} HashedParams__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "blockMaxBytes",
        .dataTypeSpecific.clazz = Nil,
        .number = HashedParams_FieldNumber_BlockMaxBytes,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HashedParams__storage_, blockMaxBytes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "blockMaxGas",
        .dataTypeSpecific.clazz = Nil,
        .number = HashedParams_FieldNumber_BlockMaxGas,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HashedParams__storage_, blockMaxGas),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(HashedParams)
                                   messageName:@"HashedParams"
                               fileDescription:&ParamsRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HashedParams__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ABCIParams

@implementation ABCIParams

@dynamic voteExtensionsEnableHeight;

typedef struct ABCIParams__storage_ {
  uint32_t _has_storage_[1];
  int64_t voteExtensionsEnableHeight;
} ABCIParams__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voteExtensionsEnableHeight",
        .dataTypeSpecific.clazz = Nil,
        .number = ABCIParams_FieldNumber_VoteExtensionsEnableHeight,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ABCIParams__storage_, voteExtensionsEnableHeight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ABCIParams)
                                   messageName:@"ABCIParams"
                               fileDescription:&ParamsRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ABCIParams__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
