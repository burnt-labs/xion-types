// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: tendermint/types/validator.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import <stdatomic.h>

#import "tendermint/types/Validator.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(PublicKey);
GPBObjCClassDeclaration(SimpleValidator);
GPBObjCClassDeclaration(Validator);
GPBObjCClassDeclaration(ValidatorSet);

#pragma mark - ValidatorRoot

@implementation ValidatorRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription ValidatorRoot_FileDescription = {
  .package = "tendermint.types",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Enum BlockIDFlag

GPBEnumDescriptor *BlockIDFlag_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "BlockIdFlagUnknown\000BlockIdFlagAbsent\000Blo"
        "ckIdFlagCommit\000BlockIdFlagNil\000";
    static const int32_t values[] = {
        BlockIDFlag_BlockIdFlagUnknown,
        BlockIDFlag_BlockIdFlagAbsent,
        BlockIDFlag_BlockIdFlagCommit,
        BlockIDFlag_BlockIdFlagNil,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(BlockIDFlag)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:BlockIDFlag_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL BlockIDFlag_IsValidValue(int32_t value__) {
  switch (value__) {
    case BlockIDFlag_BlockIdFlagUnknown:
    case BlockIDFlag_BlockIdFlagAbsent:
    case BlockIDFlag_BlockIdFlagCommit:
    case BlockIDFlag_BlockIdFlagNil:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ValidatorSet

@implementation ValidatorSet

@dynamic validatorsArray, validatorsArray_Count;
@dynamic hasProposer, proposer;
@dynamic totalVotingPower;

typedef struct ValidatorSet__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *validatorsArray;
  Validator *proposer;
  int64_t totalVotingPower;
} ValidatorSet__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "validatorsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Validator),
        .number = ValidatorSet_FieldNumber_ValidatorsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ValidatorSet__storage_, validatorsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "proposer",
        .dataTypeSpecific.clazz = GPBObjCClass(Validator),
        .number = ValidatorSet_FieldNumber_Proposer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ValidatorSet__storage_, proposer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "totalVotingPower",
        .dataTypeSpecific.clazz = Nil,
        .number = ValidatorSet_FieldNumber_TotalVotingPower,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ValidatorSet__storage_, totalVotingPower),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ValidatorSet)
                                   messageName:@"ValidatorSet"
                               fileDescription:&ValidatorRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ValidatorSet__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Validator

@implementation Validator

@dynamic address;
@dynamic hasPubKey, pubKey;
@dynamic votingPower;
@dynamic proposerPriority;

typedef struct Validator__storage_ {
  uint32_t _has_storage_[1];
  NSData *address;
  PublicKey *pubKey;
  int64_t votingPower;
  int64_t proposerPriority;
} Validator__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = Validator_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Validator__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "pubKey",
        .dataTypeSpecific.clazz = GPBObjCClass(PublicKey),
        .number = Validator_FieldNumber_PubKey,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Validator__storage_, pubKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "votingPower",
        .dataTypeSpecific.clazz = Nil,
        .number = Validator_FieldNumber_VotingPower,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Validator__storage_, votingPower),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "proposerPriority",
        .dataTypeSpecific.clazz = Nil,
        .number = Validator_FieldNumber_ProposerPriority,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Validator__storage_, proposerPriority),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Validator)
                                   messageName:@"Validator"
                               fileDescription:&ValidatorRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Validator__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SimpleValidator

@implementation SimpleValidator

@dynamic hasPubKey, pubKey;
@dynamic votingPower;

typedef struct SimpleValidator__storage_ {
  uint32_t _has_storage_[1];
  PublicKey *pubKey;
  int64_t votingPower;
} SimpleValidator__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pubKey",
        .dataTypeSpecific.clazz = GPBObjCClass(PublicKey),
        .number = SimpleValidator_FieldNumber_PubKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SimpleValidator__storage_, pubKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "votingPower",
        .dataTypeSpecific.clazz = Nil,
        .number = SimpleValidator_FieldNumber_VotingPower,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SimpleValidator__storage_, votingPower),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(SimpleValidator)
                                   messageName:@"SimpleValidator"
                               fileDescription:&ValidatorRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SimpleValidator__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
