// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: tendermint/types/types.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "tendermint/crypto/Proof.pbobjc.h"
#import "tendermint/version/Types.pbobjc.h"
#import "tendermint/types/Validator.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class BlockID;
@class Commit;
@class CommitSig;
@class ExtendedCommitSig;
@class Header;
@class PartSetHeader;
@class SignedHeader;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum SignedMsgType

/** SignedMsgType is a type of signed message in the consensus. */
typedef GPB_ENUM(SignedMsgType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SignedMsgType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  SignedMsgType_SignedMsgTypeUnknown = 0,

  /** Votes */
  SignedMsgType_SignedMsgTypePrevote = 1,
  SignedMsgType_SignedMsgTypePrecommit = 2,

  /** Proposals */
  SignedMsgType_SignedMsgTypeProposal = 32,
};

GPBEnumDescriptor *SignedMsgType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SignedMsgType_IsValidValue(int32_t value);

#pragma mark - TypesRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface TypesRoot : GPBRootObject
@end

#pragma mark - PartSetHeader

typedef GPB_ENUM(PartSetHeader_FieldNumber) {
  PartSetHeader_FieldNumber_Total = 1,
  PartSetHeader_FieldNumber_Hash_p = 2,
};

/**
 * PartsetHeader
 **/
GPB_FINAL @interface PartSetHeader : GPBMessage

@property(nonatomic, readwrite) uint32_t total;

@property(nonatomic, readwrite, copy, null_resettable) NSData *hash_p;

@end

#pragma mark - Part

typedef GPB_ENUM(Part_FieldNumber) {
  Part_FieldNumber_Index = 1,
  Part_FieldNumber_Bytes = 2,
  Part_FieldNumber_Proof = 3,
};

GPB_FINAL @interface Part : GPBMessage

@property(nonatomic, readwrite) uint32_t index;

@property(nonatomic, readwrite, copy, null_resettable) NSData *bytes;

@property(nonatomic, readwrite, strong, null_resettable) Proof *proof;
/** Test to see if @c proof has been set. */
@property(nonatomic, readwrite) BOOL hasProof;

@end

#pragma mark - BlockID

typedef GPB_ENUM(BlockID_FieldNumber) {
  BlockID_FieldNumber_Hash_p = 1,
  BlockID_FieldNumber_PartSetHeader = 2,
};

/**
 * BlockID
 **/
GPB_FINAL @interface BlockID : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *hash_p;

@property(nonatomic, readwrite, strong, null_resettable) PartSetHeader *partSetHeader;
/** Test to see if @c partSetHeader has been set. */
@property(nonatomic, readwrite) BOOL hasPartSetHeader;

@end

#pragma mark - Header

typedef GPB_ENUM(Header_FieldNumber) {
  Header_FieldNumber_Version = 1,
  Header_FieldNumber_ChainId = 2,
  Header_FieldNumber_Height = 3,
  Header_FieldNumber_Time = 4,
  Header_FieldNumber_LastBlockId = 5,
  Header_FieldNumber_LastCommitHash = 6,
  Header_FieldNumber_DataHash = 7,
  Header_FieldNumber_ValidatorsHash = 8,
  Header_FieldNumber_NextValidatorsHash = 9,
  Header_FieldNumber_ConsensusHash = 10,
  Header_FieldNumber_AppHash = 11,
  Header_FieldNumber_LastResultsHash = 12,
  Header_FieldNumber_EvidenceHash = 13,
  Header_FieldNumber_ProposerAddress = 14,
};

/**
 * Header defines the structure of a block header.
 **/
GPB_FINAL @interface Header : GPBMessage

/** basic block info */
@property(nonatomic, readwrite, strong, null_resettable) Consensus *version;
/** Test to see if @c version has been set. */
@property(nonatomic, readwrite) BOOL hasVersion;

@property(nonatomic, readwrite, copy, null_resettable) NSString *chainId;

@property(nonatomic, readwrite) int64_t height;

@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *time;
/** Test to see if @c time has been set. */
@property(nonatomic, readwrite) BOOL hasTime;

/** prev block info */
@property(nonatomic, readwrite, strong, null_resettable) BlockID *lastBlockId;
/** Test to see if @c lastBlockId has been set. */
@property(nonatomic, readwrite) BOOL hasLastBlockId;

/** hashes of block data */
@property(nonatomic, readwrite, copy, null_resettable) NSData *lastCommitHash;

/** transactions */
@property(nonatomic, readwrite, copy, null_resettable) NSData *dataHash;

/** hashes from the app output from the prev block */
@property(nonatomic, readwrite, copy, null_resettable) NSData *validatorsHash;

/** validators for the next block */
@property(nonatomic, readwrite, copy, null_resettable) NSData *nextValidatorsHash;

/** consensus params for current block */
@property(nonatomic, readwrite, copy, null_resettable) NSData *consensusHash;

/** state after txs from the previous block */
@property(nonatomic, readwrite, copy, null_resettable) NSData *appHash;

/** root hash of all results from the txs from the previous block */
@property(nonatomic, readwrite, copy, null_resettable) NSData *lastResultsHash;

/** consensus info */
@property(nonatomic, readwrite, copy, null_resettable) NSData *evidenceHash;

/** original proposer of the block */
@property(nonatomic, readwrite, copy, null_resettable) NSData *proposerAddress;

@end

#pragma mark - Data

typedef GPB_ENUM(Data_FieldNumber) {
  Data_FieldNumber_TxsArray = 1,
};

/**
 * Data contains the set of transactions included in the block
 **/
GPB_FINAL @interface Data : GPBMessage

/**
 * Txs that will be applied by state \@ block.Height+1.
 * NOTE: not all txs here are valid.  We're just agreeing on the order first.
 * This means that block.AppHash does not include these txs.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSData*> *txsArray;
/** The number of items in @c txsArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger txsArray_Count;

@end

#pragma mark - Vote

typedef GPB_ENUM(Vote_FieldNumber) {
  Vote_FieldNumber_Type = 1,
  Vote_FieldNumber_Height = 2,
  Vote_FieldNumber_Round = 3,
  Vote_FieldNumber_BlockId = 4,
  Vote_FieldNumber_Timestamp = 5,
  Vote_FieldNumber_ValidatorAddress = 6,
  Vote_FieldNumber_ValidatorIndex = 7,
  Vote_FieldNumber_Signature = 8,
  Vote_FieldNumber_Extension = 9,
  Vote_FieldNumber_ExtensionSignature = 10,
};

/**
 * Vote represents a prevote or precommit vote from validators for
 * consensus.
 **/
GPB_FINAL @interface Vote : GPBMessage

@property(nonatomic, readwrite) SignedMsgType type;

@property(nonatomic, readwrite) int64_t height;

@property(nonatomic, readwrite) int32_t round;

/** zero if vote is nil. */
@property(nonatomic, readwrite, strong, null_resettable) BlockID *blockId;
/** Test to see if @c blockId has been set. */
@property(nonatomic, readwrite) BOOL hasBlockId;

@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *timestamp;
/** Test to see if @c timestamp has been set. */
@property(nonatomic, readwrite) BOOL hasTimestamp;

@property(nonatomic, readwrite, copy, null_resettable) NSData *validatorAddress;

@property(nonatomic, readwrite) int32_t validatorIndex;

/**
 * Vote signature by the validator if they participated in consensus for the
 * associated block.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *signature;

/**
 * Vote extension provided by the application. Only valid for precommit
 * messages.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *extension;

/**
 * Vote extension signature by the validator if they participated in
 * consensus for the associated block.
 * Only valid for precommit messages.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *extensionSignature;

@end

/**
 * Fetches the raw value of a @c Vote's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Vote_Type_RawValue(Vote *message);
/**
 * Sets the raw value of an @c Vote's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetVote_Type_RawValue(Vote *message, int32_t value);

#pragma mark - Commit

typedef GPB_ENUM(Commit_FieldNumber) {
  Commit_FieldNumber_Height = 1,
  Commit_FieldNumber_Round = 2,
  Commit_FieldNumber_BlockId = 3,
  Commit_FieldNumber_SignaturesArray = 4,
};

/**
 * Commit contains the evidence that a block was committed by a set of validators.
 **/
GPB_FINAL @interface Commit : GPBMessage

@property(nonatomic, readwrite) int64_t height;

@property(nonatomic, readwrite) int32_t round;

@property(nonatomic, readwrite, strong, null_resettable) BlockID *blockId;
/** Test to see if @c blockId has been set. */
@property(nonatomic, readwrite) BOOL hasBlockId;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<CommitSig*> *signaturesArray;
/** The number of items in @c signaturesArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger signaturesArray_Count;

@end

#pragma mark - CommitSig

typedef GPB_ENUM(CommitSig_FieldNumber) {
  CommitSig_FieldNumber_BlockIdFlag = 1,
  CommitSig_FieldNumber_ValidatorAddress = 2,
  CommitSig_FieldNumber_Timestamp = 3,
  CommitSig_FieldNumber_Signature = 4,
};

/**
 * CommitSig is a part of the Vote included in a Commit.
 **/
GPB_FINAL @interface CommitSig : GPBMessage

@property(nonatomic, readwrite) BlockIDFlag blockIdFlag;

@property(nonatomic, readwrite, copy, null_resettable) NSData *validatorAddress;

@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *timestamp;
/** Test to see if @c timestamp has been set. */
@property(nonatomic, readwrite) BOOL hasTimestamp;

@property(nonatomic, readwrite, copy, null_resettable) NSData *signature;

@end

/**
 * Fetches the raw value of a @c CommitSig's @c blockIdFlag property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t CommitSig_BlockIdFlag_RawValue(CommitSig *message);
/**
 * Sets the raw value of an @c CommitSig's @c blockIdFlag property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetCommitSig_BlockIdFlag_RawValue(CommitSig *message, int32_t value);

#pragma mark - ExtendedCommit

typedef GPB_ENUM(ExtendedCommit_FieldNumber) {
  ExtendedCommit_FieldNumber_Height = 1,
  ExtendedCommit_FieldNumber_Round = 2,
  ExtendedCommit_FieldNumber_BlockId = 3,
  ExtendedCommit_FieldNumber_ExtendedSignaturesArray = 4,
};

GPB_FINAL @interface ExtendedCommit : GPBMessage

@property(nonatomic, readwrite) int64_t height;

@property(nonatomic, readwrite) int32_t round;

@property(nonatomic, readwrite, strong, null_resettable) BlockID *blockId;
/** Test to see if @c blockId has been set. */
@property(nonatomic, readwrite) BOOL hasBlockId;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ExtendedCommitSig*> *extendedSignaturesArray;
/** The number of items in @c extendedSignaturesArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger extendedSignaturesArray_Count;

@end

#pragma mark - ExtendedCommitSig

typedef GPB_ENUM(ExtendedCommitSig_FieldNumber) {
  ExtendedCommitSig_FieldNumber_BlockIdFlag = 1,
  ExtendedCommitSig_FieldNumber_ValidatorAddress = 2,
  ExtendedCommitSig_FieldNumber_Timestamp = 3,
  ExtendedCommitSig_FieldNumber_Signature = 4,
  ExtendedCommitSig_FieldNumber_Extension = 5,
  ExtendedCommitSig_FieldNumber_ExtensionSignature = 6,
};

/**
 * ExtendedCommitSig retains all the same fields as CommitSig but adds vote
 * extension-related fields. We use two signatures to ensure backwards compatibility.
 * That is the digest of the original signature is still the same in prior versions
 **/
GPB_FINAL @interface ExtendedCommitSig : GPBMessage

@property(nonatomic, readwrite) BlockIDFlag blockIdFlag;

@property(nonatomic, readwrite, copy, null_resettable) NSData *validatorAddress;

@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *timestamp;
/** Test to see if @c timestamp has been set. */
@property(nonatomic, readwrite) BOOL hasTimestamp;

@property(nonatomic, readwrite, copy, null_resettable) NSData *signature;

/** Vote extension data */
@property(nonatomic, readwrite, copy, null_resettable) NSData *extension;

/** Vote extension signature */
@property(nonatomic, readwrite, copy, null_resettable) NSData *extensionSignature;

@end

/**
 * Fetches the raw value of a @c ExtendedCommitSig's @c blockIdFlag property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t ExtendedCommitSig_BlockIdFlag_RawValue(ExtendedCommitSig *message);
/**
 * Sets the raw value of an @c ExtendedCommitSig's @c blockIdFlag property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetExtendedCommitSig_BlockIdFlag_RawValue(ExtendedCommitSig *message, int32_t value);

#pragma mark - Proposal

typedef GPB_ENUM(Proposal_FieldNumber) {
  Proposal_FieldNumber_Type = 1,
  Proposal_FieldNumber_Height = 2,
  Proposal_FieldNumber_Round = 3,
  Proposal_FieldNumber_PolRound = 4,
  Proposal_FieldNumber_BlockId = 5,
  Proposal_FieldNumber_Timestamp = 6,
  Proposal_FieldNumber_Signature = 7,
};

GPB_FINAL @interface Proposal : GPBMessage

@property(nonatomic, readwrite) SignedMsgType type;

@property(nonatomic, readwrite) int64_t height;

@property(nonatomic, readwrite) int32_t round;

@property(nonatomic, readwrite) int32_t polRound;

@property(nonatomic, readwrite, strong, null_resettable) BlockID *blockId;
/** Test to see if @c blockId has been set. */
@property(nonatomic, readwrite) BOOL hasBlockId;

@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *timestamp;
/** Test to see if @c timestamp has been set. */
@property(nonatomic, readwrite) BOOL hasTimestamp;

@property(nonatomic, readwrite, copy, null_resettable) NSData *signature;

@end

/**
 * Fetches the raw value of a @c Proposal's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Proposal_Type_RawValue(Proposal *message);
/**
 * Sets the raw value of an @c Proposal's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetProposal_Type_RawValue(Proposal *message, int32_t value);

#pragma mark - SignedHeader

typedef GPB_ENUM(SignedHeader_FieldNumber) {
  SignedHeader_FieldNumber_Header = 1,
  SignedHeader_FieldNumber_Commit = 2,
};

GPB_FINAL @interface SignedHeader : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) Header *header;
/** Test to see if @c header has been set. */
@property(nonatomic, readwrite) BOOL hasHeader;

@property(nonatomic, readwrite, strong, null_resettable) Commit *commit;
/** Test to see if @c commit has been set. */
@property(nonatomic, readwrite) BOOL hasCommit;

@end

#pragma mark - LightBlock

typedef GPB_ENUM(LightBlock_FieldNumber) {
  LightBlock_FieldNumber_SignedHeader = 1,
  LightBlock_FieldNumber_ValidatorSet = 2,
};

GPB_FINAL @interface LightBlock : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) SignedHeader *signedHeader;
/** Test to see if @c signedHeader has been set. */
@property(nonatomic, readwrite) BOOL hasSignedHeader;

@property(nonatomic, readwrite, strong, null_resettable) ValidatorSet *validatorSet;
/** Test to see if @c validatorSet has been set. */
@property(nonatomic, readwrite) BOOL hasValidatorSet;

@end

#pragma mark - BlockMeta

typedef GPB_ENUM(BlockMeta_FieldNumber) {
  BlockMeta_FieldNumber_BlockId = 1,
  BlockMeta_FieldNumber_BlockSize = 2,
  BlockMeta_FieldNumber_Header = 3,
  BlockMeta_FieldNumber_NumTxs = 4,
};

GPB_FINAL @interface BlockMeta : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) BlockID *blockId;
/** Test to see if @c blockId has been set. */
@property(nonatomic, readwrite) BOOL hasBlockId;

@property(nonatomic, readwrite) int64_t blockSize;

@property(nonatomic, readwrite, strong, null_resettable) Header *header;
/** Test to see if @c header has been set. */
@property(nonatomic, readwrite) BOOL hasHeader;

@property(nonatomic, readwrite) int64_t numTxs;

@end

#pragma mark - TxProof

typedef GPB_ENUM(TxProof_FieldNumber) {
  TxProof_FieldNumber_RootHash = 1,
  TxProof_FieldNumber_Data_p = 2,
  TxProof_FieldNumber_Proof = 3,
};

/**
 * TxProof represents a Merkle proof of the presence of a transaction in the Merkle tree.
 **/
GPB_FINAL @interface TxProof : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *rootHash;

@property(nonatomic, readwrite, copy, null_resettable) NSData *data_p;

@property(nonatomic, readwrite, strong, null_resettable) Proof *proof;
/** Test to see if @c proof has been set. */
@property(nonatomic, readwrite) BOOL hasProof;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
