// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: tendermint/crypto/proof.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "tendermint/crypto/Proof.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(DominoOp);
GPBObjCClassDeclaration(Proof);
GPBObjCClassDeclaration(ProofOp);
GPBObjCClassDeclaration(ProofOps);
GPBObjCClassDeclaration(ValueOp);

#pragma mark - ProofRoot

@implementation ProofRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription ProofRoot_FileDescription = {
  .package = "tendermint.crypto",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Proof

@implementation Proof

@dynamic total;
@dynamic index;
@dynamic leafHash;
@dynamic auntsArray, auntsArray_Count;

typedef struct Proof__storage_ {
  uint32_t _has_storage_[1];
  NSData *leafHash;
  NSMutableArray *auntsArray;
  int64_t total;
  int64_t index;
} Proof__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "total",
        .dataTypeSpecific.clazz = Nil,
        .number = Proof_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Proof__storage_, total),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "index",
        .dataTypeSpecific.clazz = Nil,
        .number = Proof_FieldNumber_Index,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Proof__storage_, index),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "leafHash",
        .dataTypeSpecific.clazz = Nil,
        .number = Proof_FieldNumber_LeafHash,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Proof__storage_, leafHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "auntsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = Proof_FieldNumber_AuntsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Proof__storage_, auntsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Proof)
                                   messageName:@"Proof"
                               fileDescription:&ProofRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Proof__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ValueOp

@implementation ValueOp

@dynamic key;
@dynamic hasProof, proof;

typedef struct ValueOp__storage_ {
  uint32_t _has_storage_[1];
  NSData *key;
  Proof *proof;
} ValueOp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.clazz = Nil,
        .number = ValueOp_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ValueOp__storage_, key),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "proof",
        .dataTypeSpecific.clazz = GPBObjCClass(Proof),
        .number = ValueOp_FieldNumber_Proof,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ValueOp__storage_, proof),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ValueOp)
                                   messageName:@"ValueOp"
                               fileDescription:&ProofRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ValueOp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DominoOp

@implementation DominoOp

@dynamic key;
@dynamic input;
@dynamic output;

typedef struct DominoOp__storage_ {
  uint32_t _has_storage_[1];
  NSString *key;
  NSString *input;
  NSString *output;
} DominoOp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.clazz = Nil,
        .number = DominoOp_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DominoOp__storage_, key),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "input",
        .dataTypeSpecific.clazz = Nil,
        .number = DominoOp_FieldNumber_Input,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DominoOp__storage_, input),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "output",
        .dataTypeSpecific.clazz = Nil,
        .number = DominoOp_FieldNumber_Output,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DominoOp__storage_, output),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(DominoOp)
                                   messageName:@"DominoOp"
                               fileDescription:&ProofRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DominoOp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ProofOp

@implementation ProofOp

@dynamic type;
@dynamic key;
@dynamic data_p;

typedef struct ProofOp__storage_ {
  uint32_t _has_storage_[1];
  NSString *type;
  NSData *key;
  NSData *data_p;
} ProofOp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.clazz = Nil,
        .number = ProofOp_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ProofOp__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "key",
        .dataTypeSpecific.clazz = Nil,
        .number = ProofOp_FieldNumber_Key,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ProofOp__storage_, key),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = ProofOp_FieldNumber_Data_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ProofOp__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ProofOp)
                                   messageName:@"ProofOp"
                               fileDescription:&ProofRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProofOp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ProofOps

@implementation ProofOps

@dynamic opsArray, opsArray_Count;

typedef struct ProofOps__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *opsArray;
} ProofOps__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "opsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ProofOp),
        .number = ProofOps_FieldNumber_OpsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ProofOps__storage_, opsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ProofOps)
                                   messageName:@"ProofOps"
                               fileDescription:&ProofRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProofOps__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
