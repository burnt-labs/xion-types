// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: tendermint/crypto/proof.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Proof;
@class ProofOp;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - ProofRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface ProofRoot : GPBRootObject
@end

#pragma mark - Proof

typedef GPB_ENUM(Proof_FieldNumber) {
  Proof_FieldNumber_Total = 1,
  Proof_FieldNumber_Index = 2,
  Proof_FieldNumber_LeafHash = 3,
  Proof_FieldNumber_AuntsArray = 4,
};

GPB_FINAL @interface Proof : GPBMessage

@property(nonatomic, readwrite) int64_t total;

@property(nonatomic, readwrite) int64_t index;

@property(nonatomic, readwrite, copy, null_resettable) NSData *leafHash;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSData*> *auntsArray;
/** The number of items in @c auntsArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger auntsArray_Count;

@end

#pragma mark - ValueOp

typedef GPB_ENUM(ValueOp_FieldNumber) {
  ValueOp_FieldNumber_Key = 1,
  ValueOp_FieldNumber_Proof = 2,
};

GPB_FINAL @interface ValueOp : GPBMessage

/** Encoded in ProofOp.Key. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *key;

/** To encode in ProofOp.Data */
@property(nonatomic, readwrite, strong, null_resettable) Proof *proof;
/** Test to see if @c proof has been set. */
@property(nonatomic, readwrite) BOOL hasProof;

@end

#pragma mark - DominoOp

typedef GPB_ENUM(DominoOp_FieldNumber) {
  DominoOp_FieldNumber_Key = 1,
  DominoOp_FieldNumber_Input = 2,
  DominoOp_FieldNumber_Output = 3,
};

GPB_FINAL @interface DominoOp : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *key;

@property(nonatomic, readwrite, copy, null_resettable) NSString *input;

@property(nonatomic, readwrite, copy, null_resettable) NSString *output;

@end

#pragma mark - ProofOp

typedef GPB_ENUM(ProofOp_FieldNumber) {
  ProofOp_FieldNumber_Type = 1,
  ProofOp_FieldNumber_Key = 2,
  ProofOp_FieldNumber_Data_p = 3,
};

/**
 * ProofOp defines an operation used for calculating Merkle root
 * The data could be arbitrary format, providing nessecary data
 * for example neighbouring node hash
 **/
GPB_FINAL @interface ProofOp : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *type;

@property(nonatomic, readwrite, copy, null_resettable) NSData *key;

@property(nonatomic, readwrite, copy, null_resettable) NSData *data_p;

@end

#pragma mark - ProofOps

typedef GPB_ENUM(ProofOps_FieldNumber) {
  ProofOps_FieldNumber_OpsArray = 1,
};

/**
 * ProofOps is Merkle proof defined by the list of ProofOps
 **/
GPB_FINAL @interface ProofOps : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ProofOp*> *opsArray;
/** The number of items in @c opsArray without causing the container to be created. */
@property(nonatomic, readonly) NSUInteger opsArray_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
