// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: tendermint/p2p/types.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "tendermint/p2p/Types.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(DefaultNodeInfo);
GPBObjCClassDeclaration(DefaultNodeInfoOther);
GPBObjCClassDeclaration(NetAddress);
GPBObjCClassDeclaration(ProtocolVersion);

#pragma mark - TypesRoot

@implementation TypesRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription TypesRoot_FileDescription = {
  .package = "tendermint.p2p",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - NetAddress

@implementation NetAddress

@dynamic id_p;
@dynamic ip;
@dynamic port;

typedef struct NetAddress__storage_ {
  uint32_t _has_storage_[1];
  uint32_t port;
  NSString *id_p;
  NSString *ip;
} NetAddress__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = NetAddress_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NetAddress__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ip",
        .dataTypeSpecific.clazz = Nil,
        .number = NetAddress_FieldNumber_Ip,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NetAddress__storage_, ip),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "port",
        .dataTypeSpecific.clazz = Nil,
        .number = NetAddress_FieldNumber_Port,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NetAddress__storage_, port),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(NetAddress)
                                   messageName:@"NetAddress"
                               fileDescription:&TypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NetAddress__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ProtocolVersion

@implementation ProtocolVersion

@dynamic p2P;
@dynamic block;
@dynamic app;

typedef struct ProtocolVersion__storage_ {
  uint32_t _has_storage_[1];
  uint64_t p2P;
  uint64_t block;
  uint64_t app;
} ProtocolVersion__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "p2P",
        .dataTypeSpecific.clazz = Nil,
        .number = ProtocolVersion_FieldNumber_P2P,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ProtocolVersion__storage_, p2P),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "block",
        .dataTypeSpecific.clazz = Nil,
        .number = ProtocolVersion_FieldNumber_Block,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ProtocolVersion__storage_, block),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "app",
        .dataTypeSpecific.clazz = Nil,
        .number = ProtocolVersion_FieldNumber_App,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ProtocolVersion__storage_, app),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ProtocolVersion)
                                   messageName:@"ProtocolVersion"
                               fileDescription:&TypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProtocolVersion__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\001\001\002!\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DefaultNodeInfo

@implementation DefaultNodeInfo

@dynamic hasProtocolVersion, protocolVersion;
@dynamic defaultNodeId;
@dynamic listenAddr;
@dynamic network;
@dynamic version;
@dynamic channels;
@dynamic moniker;
@dynamic hasOther, other;

typedef struct DefaultNodeInfo__storage_ {
  uint32_t _has_storage_[1];
  ProtocolVersion *protocolVersion;
  NSString *defaultNodeId;
  NSString *listenAddr;
  NSString *network;
  NSString *version;
  NSData *channels;
  NSString *moniker;
  DefaultNodeInfoOther *other;
} DefaultNodeInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "protocolVersion",
        .dataTypeSpecific.clazz = GPBObjCClass(ProtocolVersion),
        .number = DefaultNodeInfo_FieldNumber_ProtocolVersion,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DefaultNodeInfo__storage_, protocolVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "defaultNodeId",
        .dataTypeSpecific.clazz = Nil,
        .number = DefaultNodeInfo_FieldNumber_DefaultNodeId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DefaultNodeInfo__storage_, defaultNodeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "listenAddr",
        .dataTypeSpecific.clazz = Nil,
        .number = DefaultNodeInfo_FieldNumber_ListenAddr,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DefaultNodeInfo__storage_, listenAddr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "network",
        .dataTypeSpecific.clazz = Nil,
        .number = DefaultNodeInfo_FieldNumber_Network,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DefaultNodeInfo__storage_, network),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.clazz = Nil,
        .number = DefaultNodeInfo_FieldNumber_Version,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DefaultNodeInfo__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channels",
        .dataTypeSpecific.clazz = Nil,
        .number = DefaultNodeInfo_FieldNumber_Channels,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(DefaultNodeInfo__storage_, channels),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "moniker",
        .dataTypeSpecific.clazz = Nil,
        .number = DefaultNodeInfo_FieldNumber_Moniker,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(DefaultNodeInfo__storage_, moniker),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "other",
        .dataTypeSpecific.clazz = GPBObjCClass(DefaultNodeInfoOther),
        .number = DefaultNodeInfo_FieldNumber_Other,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(DefaultNodeInfo__storage_, other),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(DefaultNodeInfo)
                                   messageName:@"DefaultNodeInfo"
                               fileDescription:&TypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DefaultNodeInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DefaultNodeInfoOther

@implementation DefaultNodeInfoOther

@dynamic txIndex;
@dynamic rpcAddress;

typedef struct DefaultNodeInfoOther__storage_ {
  uint32_t _has_storage_[1];
  NSString *txIndex;
  NSString *rpcAddress;
} DefaultNodeInfoOther__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "txIndex",
        .dataTypeSpecific.clazz = Nil,
        .number = DefaultNodeInfoOther_FieldNumber_TxIndex,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DefaultNodeInfoOther__storage_, txIndex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rpcAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = DefaultNodeInfoOther_FieldNumber_RpcAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DefaultNodeInfoOther__storage_, rpcAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(DefaultNodeInfoOther)
                                   messageName:@"DefaultNodeInfoOther"
                               fileDescription:&TypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DefaultNodeInfoOther__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
