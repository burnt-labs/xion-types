// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: xion/jwk/v1/tx.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "xion/jwk/v1/Tx.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Audience);
GPBObjCClassDeclaration(MsgCreateAudience);
GPBObjCClassDeclaration(MsgCreateAudienceClaim);
GPBObjCClassDeclaration(MsgCreateAudienceClaimResponse);
GPBObjCClassDeclaration(MsgCreateAudienceResponse);
GPBObjCClassDeclaration(MsgDeleteAudience);
GPBObjCClassDeclaration(MsgDeleteAudienceClaim);
GPBObjCClassDeclaration(MsgDeleteAudienceClaimResponse);
GPBObjCClassDeclaration(MsgDeleteAudienceResponse);
GPBObjCClassDeclaration(MsgUpdateAudience);
GPBObjCClassDeclaration(MsgUpdateAudienceResponse);

#pragma mark - TxRoot

@implementation TxRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription TxRoot_FileDescription = {
  .package = "xion.jwk.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - MsgCreateAudienceClaim

@implementation MsgCreateAudienceClaim

@dynamic admin;
@dynamic audHash;

typedef struct MsgCreateAudienceClaim__storage_ {
  uint32_t _has_storage_[1];
  NSString *admin;
  NSData *audHash;
} MsgCreateAudienceClaim__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "admin",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgCreateAudienceClaim_FieldNumber_Admin,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgCreateAudienceClaim__storage_, admin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "audHash",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgCreateAudienceClaim_FieldNumber_AudHash,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgCreateAudienceClaim__storage_, audHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgCreateAudienceClaim)
                                   messageName:@"MsgCreateAudienceClaim"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgCreateAudienceClaim__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgCreateAudienceClaimResponse

@implementation MsgCreateAudienceClaimResponse


typedef struct MsgCreateAudienceClaimResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgCreateAudienceClaimResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgCreateAudienceClaimResponse)
                                   messageName:@"MsgCreateAudienceClaimResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgCreateAudienceClaimResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgDeleteAudienceClaim

@implementation MsgDeleteAudienceClaim

@dynamic admin;
@dynamic audHash;

typedef struct MsgDeleteAudienceClaim__storage_ {
  uint32_t _has_storage_[1];
  NSString *admin;
  NSData *audHash;
} MsgDeleteAudienceClaim__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "admin",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgDeleteAudienceClaim_FieldNumber_Admin,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgDeleteAudienceClaim__storage_, admin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "audHash",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgDeleteAudienceClaim_FieldNumber_AudHash,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgDeleteAudienceClaim__storage_, audHash),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgDeleteAudienceClaim)
                                   messageName:@"MsgDeleteAudienceClaim"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgDeleteAudienceClaim__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgDeleteAudienceClaimResponse

@implementation MsgDeleteAudienceClaimResponse


typedef struct MsgDeleteAudienceClaimResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgDeleteAudienceClaimResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgDeleteAudienceClaimResponse)
                                   messageName:@"MsgDeleteAudienceClaimResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgDeleteAudienceClaimResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgCreateAudience

@implementation MsgCreateAudience

@dynamic admin;
@dynamic aud;
@dynamic key;

typedef struct MsgCreateAudience__storage_ {
  uint32_t _has_storage_[1];
  NSString *admin;
  NSString *aud;
  NSString *key;
} MsgCreateAudience__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "admin",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgCreateAudience_FieldNumber_Admin,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgCreateAudience__storage_, admin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "aud",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgCreateAudience_FieldNumber_Aud,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgCreateAudience__storage_, aud),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "key",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgCreateAudience_FieldNumber_Key,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgCreateAudience__storage_, key),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgCreateAudience)
                                   messageName:@"MsgCreateAudience"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgCreateAudience__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgCreateAudienceResponse

@implementation MsgCreateAudienceResponse

@dynamic hasAudience, audience;

typedef struct MsgCreateAudienceResponse__storage_ {
  uint32_t _has_storage_[1];
  Audience *audience;
} MsgCreateAudienceResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "audience",
        .dataTypeSpecific.clazz = GPBObjCClass(Audience),
        .number = MsgCreateAudienceResponse_FieldNumber_Audience,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgCreateAudienceResponse__storage_, audience),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgCreateAudienceResponse)
                                   messageName:@"MsgCreateAudienceResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgCreateAudienceResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateAudience

@implementation MsgUpdateAudience

@dynamic admin;
@dynamic newAdmin;
@dynamic aud;
@dynamic key;
@dynamic newAud;

typedef struct MsgUpdateAudience__storage_ {
  uint32_t _has_storage_[1];
  NSString *admin;
  NSString *newAdmin;
  NSString *aud;
  NSString *key;
  NSString *newAud;
} MsgUpdateAudience__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "admin",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateAudience_FieldNumber_Admin,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgUpdateAudience__storage_, admin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "newAdmin",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateAudience_FieldNumber_NewAdmin,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgUpdateAudience__storage_, newAdmin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "aud",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateAudience_FieldNumber_Aud,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgUpdateAudience__storage_, aud),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "key",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateAudience_FieldNumber_Key,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgUpdateAudience__storage_, key),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "newAud",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateAudience_FieldNumber_NewAud,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MsgUpdateAudience__storage_, newAud),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateAudience)
                                   messageName:@"MsgUpdateAudience"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgUpdateAudience__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateAudienceResponse

@implementation MsgUpdateAudienceResponse

@dynamic hasAudience, audience;

typedef struct MsgUpdateAudienceResponse__storage_ {
  uint32_t _has_storage_[1];
  Audience *audience;
} MsgUpdateAudienceResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "audience",
        .dataTypeSpecific.clazz = GPBObjCClass(Audience),
        .number = MsgUpdateAudienceResponse_FieldNumber_Audience,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgUpdateAudienceResponse__storage_, audience),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateAudienceResponse)
                                   messageName:@"MsgUpdateAudienceResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgUpdateAudienceResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgDeleteAudience

@implementation MsgDeleteAudience

@dynamic admin;
@dynamic aud;

typedef struct MsgDeleteAudience__storage_ {
  uint32_t _has_storage_[1];
  NSString *admin;
  NSString *aud;
} MsgDeleteAudience__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "admin",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgDeleteAudience_FieldNumber_Admin,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgDeleteAudience__storage_, admin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "aud",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgDeleteAudience_FieldNumber_Aud,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgDeleteAudience__storage_, aud),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgDeleteAudience)
                                   messageName:@"MsgDeleteAudience"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgDeleteAudience__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgDeleteAudienceResponse

@implementation MsgDeleteAudienceResponse


typedef struct MsgDeleteAudienceResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgDeleteAudienceResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgDeleteAudienceResponse)
                                   messageName:@"MsgDeleteAudienceResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgDeleteAudienceResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
