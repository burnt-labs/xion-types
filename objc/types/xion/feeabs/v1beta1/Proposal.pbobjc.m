// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: xion/feeabs/v1beta1/proposal.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import <stdatomic.h>

#import "xion/feeabs/v1beta1/Proposal.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(AddHostZoneProposal);
GPBObjCClassDeclaration(DeleteHostZoneProposal);
GPBObjCClassDeclaration(HostChainFeeAbsConfig);
GPBObjCClassDeclaration(SetHostZoneProposal);

#pragma mark - ProposalRoot

@implementation ProposalRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription ProposalRoot_FileDescription = {
  .package = "xion.feeabs.v1beta1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Enum HostChainFeeAbsStatus

GPBEnumDescriptor *HostChainFeeAbsStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "Updated\000Outdated\000Frozen\000";
    static const int32_t values[] = {
        HostChainFeeAbsStatus_Updated,
        HostChainFeeAbsStatus_Outdated,
        HostChainFeeAbsStatus_Frozen,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(HostChainFeeAbsStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:HostChainFeeAbsStatus_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL HostChainFeeAbsStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case HostChainFeeAbsStatus_Updated:
    case HostChainFeeAbsStatus_Outdated:
    case HostChainFeeAbsStatus_Frozen:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - HostChainFeeAbsConfig

@implementation HostChainFeeAbsConfig

@dynamic ibcDenom;
@dynamic osmosisPoolTokenDenomIn;
@dynamic poolId;
@dynamic status;

typedef struct HostChainFeeAbsConfig__storage_ {
  uint32_t _has_storage_[1];
  HostChainFeeAbsStatus status;
  NSString *ibcDenom;
  NSString *osmosisPoolTokenDenomIn;
  uint64_t poolId;
} HostChainFeeAbsConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ibcDenom",
        .dataTypeSpecific.clazz = Nil,
        .number = HostChainFeeAbsConfig_FieldNumber_IbcDenom,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HostChainFeeAbsConfig__storage_, ibcDenom),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "osmosisPoolTokenDenomIn",
        .dataTypeSpecific.clazz = Nil,
        .number = HostChainFeeAbsConfig_FieldNumber_OsmosisPoolTokenDenomIn,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HostChainFeeAbsConfig__storage_, osmosisPoolTokenDenomIn),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "poolId",
        .dataTypeSpecific.clazz = Nil,
        .number = HostChainFeeAbsConfig_FieldNumber_PoolId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(HostChainFeeAbsConfig__storage_, poolId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = HostChainFeeAbsStatus_EnumDescriptor,
        .number = HostChainFeeAbsConfig_FieldNumber_Status,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(HostChainFeeAbsConfig__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(HostChainFeeAbsConfig)
                                   messageName:@"HostChainFeeAbsConfig"
                               fileDescription:&ProposalRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HostChainFeeAbsConfig__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t HostChainFeeAbsConfig_Status_RawValue(HostChainFeeAbsConfig *message) {
  GPBDescriptor *descriptor = [HostChainFeeAbsConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HostChainFeeAbsConfig_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void SetHostChainFeeAbsConfig_Status_RawValue(HostChainFeeAbsConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [HostChainFeeAbsConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HostChainFeeAbsConfig_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - AddHostZoneProposal

@implementation AddHostZoneProposal

@dynamic title;
@dynamic description_p;
@dynamic hasHostChainConfig, hostChainConfig;

typedef struct AddHostZoneProposal__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  NSString *description_p;
  HostChainFeeAbsConfig *hostChainConfig;
} AddHostZoneProposal__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = AddHostZoneProposal_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddHostZoneProposal__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = AddHostZoneProposal_FieldNumber_Description_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddHostZoneProposal__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hostChainConfig",
        .dataTypeSpecific.clazz = GPBObjCClass(HostChainFeeAbsConfig),
        .number = AddHostZoneProposal_FieldNumber_HostChainConfig,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AddHostZoneProposal__storage_, hostChainConfig),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(AddHostZoneProposal)
                                   messageName:@"AddHostZoneProposal"
                               fileDescription:&ProposalRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddHostZoneProposal__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteHostZoneProposal

@implementation DeleteHostZoneProposal

@dynamic title;
@dynamic description_p;
@dynamic ibcDenom;

typedef struct DeleteHostZoneProposal__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  NSString *description_p;
  NSString *ibcDenom;
} DeleteHostZoneProposal__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = DeleteHostZoneProposal_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DeleteHostZoneProposal__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = DeleteHostZoneProposal_FieldNumber_Description_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DeleteHostZoneProposal__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ibcDenom",
        .dataTypeSpecific.clazz = Nil,
        .number = DeleteHostZoneProposal_FieldNumber_IbcDenom,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DeleteHostZoneProposal__storage_, ibcDenom),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(DeleteHostZoneProposal)
                                   messageName:@"DeleteHostZoneProposal"
                               fileDescription:&ProposalRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeleteHostZoneProposal__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SetHostZoneProposal

@implementation SetHostZoneProposal

@dynamic title;
@dynamic description_p;
@dynamic hasHostChainConfig, hostChainConfig;

typedef struct SetHostZoneProposal__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  NSString *description_p;
  HostChainFeeAbsConfig *hostChainConfig;
} SetHostZoneProposal__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = SetHostZoneProposal_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SetHostZoneProposal__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SetHostZoneProposal_FieldNumber_Description_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SetHostZoneProposal__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hostChainConfig",
        .dataTypeSpecific.clazz = GPBObjCClass(HostChainFeeAbsConfig),
        .number = SetHostZoneProposal_FieldNumber_HostChainConfig,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SetHostZoneProposal__storage_, hostChainConfig),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(SetHostZoneProposal)
                                   messageName:@"SetHostZoneProposal"
                               fileDescription:&ProposalRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SetHostZoneProposal__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
