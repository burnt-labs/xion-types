// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: xion/feeabs/v1beta1/epoch.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "xion/feeabs/v1beta1/Epoch.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(EpochInfo);
GPBObjCClassDeclaration(ExponentialBackoff);
GPBObjCClassDeclaration(GPBDuration);
GPBObjCClassDeclaration(GPBTimestamp);

#pragma mark - EpochRoot

@implementation EpochRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription EpochRoot_FileDescription = {
  .package = "xion.feeabs.v1beta1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - EpochInfo

@implementation EpochInfo

@dynamic identifier;
@dynamic hasStartTime, startTime;
@dynamic hasDuration, duration;
@dynamic currentEpoch;
@dynamic hasCurrentEpochStartTime, currentEpochStartTime;
@dynamic epochCountingStarted;
@dynamic currentEpochStartHeight;

typedef struct EpochInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *identifier;
  GPBTimestamp *startTime;
  GPBDuration *duration;
  GPBTimestamp *currentEpochStartTime;
  int64_t currentEpoch;
  int64_t currentEpochStartHeight;
} EpochInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "identifier",
        .dataTypeSpecific.clazz = Nil,
        .number = EpochInfo_FieldNumber_Identifier,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EpochInfo__storage_, identifier),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = EpochInfo_FieldNumber_StartTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EpochInfo__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "duration",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBDuration),
        .number = EpochInfo_FieldNumber_Duration,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EpochInfo__storage_, duration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "currentEpoch",
        .dataTypeSpecific.clazz = Nil,
        .number = EpochInfo_FieldNumber_CurrentEpoch,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(EpochInfo__storage_, currentEpoch),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "currentEpochStartTime",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = EpochInfo_FieldNumber_CurrentEpochStartTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(EpochInfo__storage_, currentEpochStartTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "epochCountingStarted",
        .dataTypeSpecific.clazz = Nil,
        .number = EpochInfo_FieldNumber_EpochCountingStarted,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "currentEpochStartHeight",
        .dataTypeSpecific.clazz = Nil,
        .number = EpochInfo_FieldNumber_CurrentEpochStartHeight,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(EpochInfo__storage_, currentEpochStartHeight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(EpochInfo)
                                   messageName:@"EpochInfo"
                               fileDescription:&EpochRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EpochInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ExponentialBackoff

@implementation ExponentialBackoff

@dynamic jump;
@dynamic futureEpoch;

typedef struct ExponentialBackoff__storage_ {
  uint32_t _has_storage_[1];
  int64_t jump;
  int64_t futureEpoch;
} ExponentialBackoff__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "jump",
        .dataTypeSpecific.clazz = Nil,
        .number = ExponentialBackoff_FieldNumber_Jump,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExponentialBackoff__storage_, jump),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "futureEpoch",
        .dataTypeSpecific.clazz = Nil,
        .number = ExponentialBackoff_FieldNumber_FutureEpoch,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ExponentialBackoff__storage_, futureEpoch),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ExponentialBackoff)
                                   messageName:@"ExponentialBackoff"
                               fileDescription:&EpochRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExponentialBackoff__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
