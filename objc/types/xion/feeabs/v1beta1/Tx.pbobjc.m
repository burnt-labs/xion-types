// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: xion/feeabs/v1beta1/tx.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "xion/feeabs/v1beta1/Tx.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Coin);
GPBObjCClassDeclaration(HostChainFeeAbsConfig);
GPBObjCClassDeclaration(MsgAddHostZone);
GPBObjCClassDeclaration(MsgAddHostZoneResponse);
GPBObjCClassDeclaration(MsgFundFeeAbsModuleAccount);
GPBObjCClassDeclaration(MsgFundFeeAbsModuleAccountResponse);
GPBObjCClassDeclaration(MsgRemoveHostZone);
GPBObjCClassDeclaration(MsgRemoveHostZoneResponse);
GPBObjCClassDeclaration(MsgSendQueryIbcDenomTWAP);
GPBObjCClassDeclaration(MsgSendQueryIbcDenomTWAPResponse);
GPBObjCClassDeclaration(MsgSwapCrossChain);
GPBObjCClassDeclaration(MsgSwapCrossChainResponse);
GPBObjCClassDeclaration(MsgUpdateHostZone);
GPBObjCClassDeclaration(MsgUpdateHostZoneResponse);
GPBObjCClassDeclaration(MsgUpdateParams);
GPBObjCClassDeclaration(MsgUpdateParamsResponse);
GPBObjCClassDeclaration(Params);

#pragma mark - TxRoot

@implementation TxRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription TxRoot_FileDescription = {
  .package = "xion.feeabs.v1beta1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - MsgFundFeeAbsModuleAccount

@implementation MsgFundFeeAbsModuleAccount

@dynamic sender;
@dynamic amountArray, amountArray_Count;

typedef struct MsgFundFeeAbsModuleAccount__storage_ {
  uint32_t _has_storage_[1];
  NSString *sender;
  NSMutableArray *amountArray;
} MsgFundFeeAbsModuleAccount__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sender",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgFundFeeAbsModuleAccount_FieldNumber_Sender,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgFundFeeAbsModuleAccount__storage_, sender),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amountArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = MsgFundFeeAbsModuleAccount_FieldNumber_AmountArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MsgFundFeeAbsModuleAccount__storage_, amountArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgFundFeeAbsModuleAccount)
                                   messageName:@"MsgFundFeeAbsModuleAccount"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgFundFeeAbsModuleAccount__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgFundFeeAbsModuleAccountResponse

@implementation MsgFundFeeAbsModuleAccountResponse


typedef struct MsgFundFeeAbsModuleAccountResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgFundFeeAbsModuleAccountResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgFundFeeAbsModuleAccountResponse)
                                   messageName:@"MsgFundFeeAbsModuleAccountResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgFundFeeAbsModuleAccountResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgSendQueryIbcDenomTWAP

@implementation MsgSendQueryIbcDenomTWAP

@dynamic sender;

typedef struct MsgSendQueryIbcDenomTWAP__storage_ {
  uint32_t _has_storage_[1];
  NSString *sender;
} MsgSendQueryIbcDenomTWAP__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sender",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSendQueryIbcDenomTWAP_FieldNumber_Sender,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgSendQueryIbcDenomTWAP__storage_, sender),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgSendQueryIbcDenomTWAP)
                                   messageName:@"MsgSendQueryIbcDenomTWAP"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgSendQueryIbcDenomTWAP__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgSendQueryIbcDenomTWAPResponse

@implementation MsgSendQueryIbcDenomTWAPResponse


typedef struct MsgSendQueryIbcDenomTWAPResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgSendQueryIbcDenomTWAPResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgSendQueryIbcDenomTWAPResponse)
                                   messageName:@"MsgSendQueryIbcDenomTWAPResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgSendQueryIbcDenomTWAPResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgSwapCrossChain

@implementation MsgSwapCrossChain

@dynamic sender;
@dynamic ibcDenom;

typedef struct MsgSwapCrossChain__storage_ {
  uint32_t _has_storage_[1];
  NSString *sender;
  NSString *ibcDenom;
} MsgSwapCrossChain__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sender",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSwapCrossChain_FieldNumber_Sender,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgSwapCrossChain__storage_, sender),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ibcDenom",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSwapCrossChain_FieldNumber_IbcDenom,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgSwapCrossChain__storage_, ibcDenom),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgSwapCrossChain)
                                   messageName:@"MsgSwapCrossChain"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgSwapCrossChain__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgSwapCrossChainResponse

@implementation MsgSwapCrossChainResponse


typedef struct MsgSwapCrossChainResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgSwapCrossChainResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgSwapCrossChainResponse)
                                   messageName:@"MsgSwapCrossChainResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgSwapCrossChainResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateParams

@implementation MsgUpdateParams

@dynamic authority;
@dynamic hasParams, params;

typedef struct MsgUpdateParams__storage_ {
  uint32_t _has_storage_[1];
  NSString *authority;
  Params *params;
} MsgUpdateParams__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authority",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateParams_FieldNumber_Authority,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgUpdateParams__storage_, authority),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "params",
        .dataTypeSpecific.clazz = GPBObjCClass(Params),
        .number = MsgUpdateParams_FieldNumber_Params,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgUpdateParams__storage_, params),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateParams)
                                   messageName:@"MsgUpdateParams"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgUpdateParams__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateParamsResponse

@implementation MsgUpdateParamsResponse


typedef struct MsgUpdateParamsResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgUpdateParamsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateParamsResponse)
                                   messageName:@"MsgUpdateParamsResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgUpdateParamsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgAddHostZone

@implementation MsgAddHostZone

@dynamic authority;
@dynamic hasHostChainConfig, hostChainConfig;

typedef struct MsgAddHostZone__storage_ {
  uint32_t _has_storage_[1];
  NSString *authority;
  HostChainFeeAbsConfig *hostChainConfig;
} MsgAddHostZone__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authority",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgAddHostZone_FieldNumber_Authority,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgAddHostZone__storage_, authority),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hostChainConfig",
        .dataTypeSpecific.clazz = GPBObjCClass(HostChainFeeAbsConfig),
        .number = MsgAddHostZone_FieldNumber_HostChainConfig,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgAddHostZone__storage_, hostChainConfig),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgAddHostZone)
                                   messageName:@"MsgAddHostZone"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgAddHostZone__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgAddHostZoneResponse

@implementation MsgAddHostZoneResponse


typedef struct MsgAddHostZoneResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgAddHostZoneResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgAddHostZoneResponse)
                                   messageName:@"MsgAddHostZoneResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgAddHostZoneResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateHostZone

@implementation MsgUpdateHostZone

@dynamic authority;
@dynamic hasHostChainConfig, hostChainConfig;

typedef struct MsgUpdateHostZone__storage_ {
  uint32_t _has_storage_[1];
  NSString *authority;
  HostChainFeeAbsConfig *hostChainConfig;
} MsgUpdateHostZone__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authority",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgUpdateHostZone_FieldNumber_Authority,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgUpdateHostZone__storage_, authority),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hostChainConfig",
        .dataTypeSpecific.clazz = GPBObjCClass(HostChainFeeAbsConfig),
        .number = MsgUpdateHostZone_FieldNumber_HostChainConfig,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgUpdateHostZone__storage_, hostChainConfig),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateHostZone)
                                   messageName:@"MsgUpdateHostZone"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgUpdateHostZone__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgUpdateHostZoneResponse

@implementation MsgUpdateHostZoneResponse


typedef struct MsgUpdateHostZoneResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgUpdateHostZoneResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgUpdateHostZoneResponse)
                                   messageName:@"MsgUpdateHostZoneResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgUpdateHostZoneResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgRemoveHostZone

@implementation MsgRemoveHostZone

@dynamic authority;
@dynamic ibcDenom;

typedef struct MsgRemoveHostZone__storage_ {
  uint32_t _has_storage_[1];
  NSString *authority;
  NSString *ibcDenom;
} MsgRemoveHostZone__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authority",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgRemoveHostZone_FieldNumber_Authority,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgRemoveHostZone__storage_, authority),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ibcDenom",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgRemoveHostZone_FieldNumber_IbcDenom,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgRemoveHostZone__storage_, ibcDenom),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgRemoveHostZone)
                                   messageName:@"MsgRemoveHostZone"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgRemoveHostZone__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgRemoveHostZoneResponse

@implementation MsgRemoveHostZoneResponse


typedef struct MsgRemoveHostZoneResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgRemoveHostZoneResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgRemoveHostZoneResponse)
                                   messageName:@"MsgRemoveHostZoneResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgRemoveHostZoneResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
