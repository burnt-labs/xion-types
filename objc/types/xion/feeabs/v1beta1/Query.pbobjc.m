// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: xion/feeabs/v1beta1/query.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "xion/feeabs/v1beta1/Query.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(AllQueryHostChainConfigRequest);
GPBObjCClassDeclaration(AllQueryHostChainConfigResponse);
GPBObjCClassDeclaration(Coin);
GPBObjCClassDeclaration(HostChainFeeAbsConfig);
GPBObjCClassDeclaration(QueryFeeabsModuleBalacesRequest);
GPBObjCClassDeclaration(QueryFeeabsModuleBalacesResponse);
GPBObjCClassDeclaration(QueryHostChainConfigRequest);
GPBObjCClassDeclaration(QueryHostChainConfigResponse);
GPBObjCClassDeclaration(QueryOsmosisArithmeticTwapRequest);
GPBObjCClassDeclaration(QueryOsmosisArithmeticTwapResponse);

#pragma mark - QueryRoot

@implementation QueryRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription QueryRoot_FileDescription = {
  .package = "xion.feeabs.v1beta1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - QueryHostChainConfigRequest

@implementation QueryHostChainConfigRequest

@dynamic ibcDenom;

typedef struct QueryHostChainConfigRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *ibcDenom;
} QueryHostChainConfigRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ibcDenom",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryHostChainConfigRequest_FieldNumber_IbcDenom,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryHostChainConfigRequest__storage_, ibcDenom),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryHostChainConfigRequest)
                                   messageName:@"QueryHostChainConfigRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryHostChainConfigRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryHostChainConfigResponse

@implementation QueryHostChainConfigResponse

@dynamic hasHostChainConfig, hostChainConfig;

typedef struct QueryHostChainConfigResponse__storage_ {
  uint32_t _has_storage_[1];
  HostChainFeeAbsConfig *hostChainConfig;
} QueryHostChainConfigResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hostChainConfig",
        .dataTypeSpecific.clazz = GPBObjCClass(HostChainFeeAbsConfig),
        .number = QueryHostChainConfigResponse_FieldNumber_HostChainConfig,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryHostChainConfigResponse__storage_, hostChainConfig),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryHostChainConfigResponse)
                                   messageName:@"QueryHostChainConfigResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryHostChainConfigResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryOsmosisArithmeticTwapRequest

@implementation QueryOsmosisArithmeticTwapRequest

@dynamic ibcDenom;

typedef struct QueryOsmosisArithmeticTwapRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *ibcDenom;
} QueryOsmosisArithmeticTwapRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ibcDenom",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryOsmosisArithmeticTwapRequest_FieldNumber_IbcDenom,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryOsmosisArithmeticTwapRequest__storage_, ibcDenom),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryOsmosisArithmeticTwapRequest)
                                   messageName:@"QueryOsmosisArithmeticTwapRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryOsmosisArithmeticTwapRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryOsmosisArithmeticTwapResponse

@implementation QueryOsmosisArithmeticTwapResponse

@dynamic arithmeticTwap;

typedef struct QueryOsmosisArithmeticTwapResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *arithmeticTwap;
} QueryOsmosisArithmeticTwapResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "arithmeticTwap",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryOsmosisArithmeticTwapResponse_FieldNumber_ArithmeticTwap,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryOsmosisArithmeticTwapResponse__storage_, arithmeticTwap),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryOsmosisArithmeticTwapResponse)
                                   messageName:@"QueryOsmosisArithmeticTwapResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryOsmosisArithmeticTwapResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryFeeabsModuleBalacesRequest

@implementation QueryFeeabsModuleBalacesRequest


typedef struct QueryFeeabsModuleBalacesRequest__storage_ {
  uint32_t _has_storage_[1];
} QueryFeeabsModuleBalacesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryFeeabsModuleBalacesRequest)
                                   messageName:@"QueryFeeabsModuleBalacesRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(QueryFeeabsModuleBalacesRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryFeeabsModuleBalacesResponse

@implementation QueryFeeabsModuleBalacesResponse

@dynamic balancesArray, balancesArray_Count;
@dynamic address;

typedef struct QueryFeeabsModuleBalacesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *balancesArray;
  NSString *address;
} QueryFeeabsModuleBalacesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "balancesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = QueryFeeabsModuleBalacesResponse_FieldNumber_BalancesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryFeeabsModuleBalacesResponse__storage_, balancesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryFeeabsModuleBalacesResponse_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryFeeabsModuleBalacesResponse__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(QueryFeeabsModuleBalacesResponse)
                                   messageName:@"QueryFeeabsModuleBalacesResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryFeeabsModuleBalacesResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AllQueryHostChainConfigRequest

@implementation AllQueryHostChainConfigRequest


typedef struct AllQueryHostChainConfigRequest__storage_ {
  uint32_t _has_storage_[1];
} AllQueryHostChainConfigRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(AllQueryHostChainConfigRequest)
                                   messageName:@"AllQueryHostChainConfigRequest"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(AllQueryHostChainConfigRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AllQueryHostChainConfigResponse

@implementation AllQueryHostChainConfigResponse

@dynamic allHostChainConfigArray, allHostChainConfigArray_Count;

typedef struct AllQueryHostChainConfigResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *allHostChainConfigArray;
} AllQueryHostChainConfigResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "allHostChainConfigArray",
        .dataTypeSpecific.clazz = GPBObjCClass(HostChainFeeAbsConfig),
        .number = AllQueryHostChainConfigResponse_FieldNumber_AllHostChainConfigArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AllQueryHostChainConfigResponse__storage_, allHostChainConfigArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(AllQueryHostChainConfigResponse)
                                   messageName:@"AllQueryHostChainConfigResponse"
                               fileDescription:&QueryRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AllQueryHostChainConfigResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
