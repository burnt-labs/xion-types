// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: xion/v1/tx.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "xion/v1/Tx.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Coin);
GPBObjCClassDeclaration(Input);
GPBObjCClassDeclaration(MsgMultiSend);
GPBObjCClassDeclaration(MsgMultiSendResponse);
GPBObjCClassDeclaration(MsgSend);
GPBObjCClassDeclaration(MsgSendResponse);
GPBObjCClassDeclaration(MsgSetPlatformMinimum);
GPBObjCClassDeclaration(MsgSetPlatformMinimumResponse);
GPBObjCClassDeclaration(MsgSetPlatformPercentage);
GPBObjCClassDeclaration(MsgSetPlatformPercentageResponse);
GPBObjCClassDeclaration(Output);

#pragma mark - TxRoot

@implementation TxRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription TxRoot_FileDescription = {
  .package = "xion.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - MsgSend

@implementation MsgSend

@dynamic fromAddress;
@dynamic toAddress;
@dynamic amountArray, amountArray_Count;

typedef struct MsgSend__storage_ {
  uint32_t _has_storage_[1];
  NSString *fromAddress;
  NSString *toAddress;
  NSMutableArray *amountArray;
} MsgSend__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fromAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSend_FieldNumber_FromAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgSend__storage_, fromAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "toAddress",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSend_FieldNumber_ToAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgSend__storage_, toAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amountArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = MsgSend_FieldNumber_AmountArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MsgSend__storage_, amountArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgSend)
                                   messageName:@"MsgSend"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgSend__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgSendResponse

@implementation MsgSendResponse


typedef struct MsgSendResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgSendResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgSendResponse)
                                   messageName:@"MsgSendResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgSendResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgMultiSend

@implementation MsgMultiSend

@dynamic inputsArray, inputsArray_Count;
@dynamic outputsArray, outputsArray_Count;

typedef struct MsgMultiSend__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *inputsArray;
  NSMutableArray *outputsArray;
} MsgMultiSend__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "inputsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Input),
        .number = MsgMultiSend_FieldNumber_InputsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MsgMultiSend__storage_, inputsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "outputsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Output),
        .number = MsgMultiSend_FieldNumber_OutputsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MsgMultiSend__storage_, outputsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgMultiSend)
                                   messageName:@"MsgMultiSend"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgMultiSend__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgMultiSendResponse

@implementation MsgMultiSendResponse


typedef struct MsgMultiSendResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgMultiSendResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgMultiSendResponse)
                                   messageName:@"MsgMultiSendResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgMultiSendResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgSetPlatformPercentage

@implementation MsgSetPlatformPercentage

@dynamic authority;
@dynamic platformPercentage;

typedef struct MsgSetPlatformPercentage__storage_ {
  uint32_t _has_storage_[1];
  uint32_t platformPercentage;
  NSString *authority;
} MsgSetPlatformPercentage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authority",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSetPlatformPercentage_FieldNumber_Authority,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgSetPlatformPercentage__storage_, authority),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "platformPercentage",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSetPlatformPercentage_FieldNumber_PlatformPercentage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgSetPlatformPercentage__storage_, platformPercentage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgSetPlatformPercentage)
                                   messageName:@"MsgSetPlatformPercentage"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgSetPlatformPercentage__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgSetPlatformPercentageResponse

@implementation MsgSetPlatformPercentageResponse


typedef struct MsgSetPlatformPercentageResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgSetPlatformPercentageResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgSetPlatformPercentageResponse)
                                   messageName:@"MsgSetPlatformPercentageResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgSetPlatformPercentageResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgSetPlatformMinimum

@implementation MsgSetPlatformMinimum

@dynamic authority;
@dynamic minimumsArray, minimumsArray_Count;

typedef struct MsgSetPlatformMinimum__storage_ {
  uint32_t _has_storage_[1];
  NSString *authority;
  NSMutableArray *minimumsArray;
} MsgSetPlatformMinimum__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authority",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgSetPlatformMinimum_FieldNumber_Authority,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgSetPlatformMinimum__storage_, authority),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "minimumsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Coin),
        .number = MsgSetPlatformMinimum_FieldNumber_MinimumsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MsgSetPlatformMinimum__storage_, minimumsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgSetPlatformMinimum)
                                   messageName:@"MsgSetPlatformMinimum"
                               fileDescription:&TxRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgSetPlatformMinimum__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgSetPlatformMinimumResponse

@implementation MsgSetPlatformMinimumResponse


typedef struct MsgSetPlatformMinimumResponse__storage_ {
  uint32_t _has_storage_[1];
} MsgSetPlatformMinimumResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgSetPlatformMinimumResponse)
                                   messageName:@"MsgSetPlatformMinimumResponse"
                               fileDescription:&TxRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MsgSetPlatformMinimumResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
