// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: xion/v1/feegrant.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "xion/v1/Feegrant.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(AuthzAllowance);
GPBObjCClassDeclaration(ContractsAllowance);
GPBObjCClassDeclaration(GPBAny);
GPBObjCClassDeclaration(MultiAnyAllowance);

#pragma mark - FeegrantRoot

@implementation FeegrantRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription FeegrantRoot_FileDescription = {
  .package = "xion.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - AuthzAllowance

@implementation AuthzAllowance

@dynamic hasAllowance, allowance;
@dynamic authzGrantee;

typedef struct AuthzAllowance__storage_ {
  uint32_t _has_storage_[1];
  GPBAny *allowance;
  NSString *authzGrantee;
} AuthzAllowance__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "allowance",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = AuthzAllowance_FieldNumber_Allowance,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AuthzAllowance__storage_, allowance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "authzGrantee",
        .dataTypeSpecific.clazz = Nil,
        .number = AuthzAllowance_FieldNumber_AuthzGrantee,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AuthzAllowance__storage_, authzGrantee),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(AuthzAllowance)
                                   messageName:@"AuthzAllowance"
                               fileDescription:&FeegrantRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AuthzAllowance__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ContractsAllowance

@implementation ContractsAllowance

@dynamic hasAllowance, allowance;
@dynamic contractAddressesArray, contractAddressesArray_Count;

typedef struct ContractsAllowance__storage_ {
  uint32_t _has_storage_[1];
  GPBAny *allowance;
  NSMutableArray *contractAddressesArray;
} ContractsAllowance__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "allowance",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = ContractsAllowance_FieldNumber_Allowance,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ContractsAllowance__storage_, allowance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "contractAddressesArray",
        .dataTypeSpecific.clazz = Nil,
        .number = ContractsAllowance_FieldNumber_ContractAddressesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ContractsAllowance__storage_, contractAddressesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ContractsAllowance)
                                   messageName:@"ContractsAllowance"
                               fileDescription:&FeegrantRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ContractsAllowance__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MultiAnyAllowance

@implementation MultiAnyAllowance

@dynamic allowancesArray, allowancesArray_Count;

typedef struct MultiAnyAllowance__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *allowancesArray;
} MultiAnyAllowance__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "allowancesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = MultiAnyAllowance_FieldNumber_AllowancesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MultiAnyAllowance__storage_, allowancesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MultiAnyAllowance)
                                   messageName:@"MultiAnyAllowance"
                               fileDescription:&FeegrantRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MultiAnyAllowance__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
