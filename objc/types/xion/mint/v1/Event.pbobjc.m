// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: xion/mint/v1/event.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "xion/mint/v1/Event.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(MintIncentiveTokens);

#pragma mark - EventRoot

@implementation EventRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription EventRoot_FileDescription = {
  .package = "xion.mint.v1",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - MintIncentiveTokens

@implementation MintIncentiveTokens

@dynamic bondedRatio;
@dynamic inflation;
@dynamic annualProvisions;
@dynamic neededAmount;
@dynamic collectedAmount;
@dynamic mintedAmount;
@dynamic burnedAmount;

typedef struct MintIncentiveTokens__storage_ {
  uint32_t _has_storage_[1];
  NSString *bondedRatio;
  NSString *inflation;
  NSString *annualProvisions;
  uint64_t neededAmount;
  uint64_t collectedAmount;
  uint64_t mintedAmount;
  uint64_t burnedAmount;
} MintIncentiveTokens__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bondedRatio",
        .dataTypeSpecific.clazz = Nil,
        .number = MintIncentiveTokens_FieldNumber_BondedRatio,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MintIncentiveTokens__storage_, bondedRatio),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inflation",
        .dataTypeSpecific.clazz = Nil,
        .number = MintIncentiveTokens_FieldNumber_Inflation,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MintIncentiveTokens__storage_, inflation),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "annualProvisions",
        .dataTypeSpecific.clazz = Nil,
        .number = MintIncentiveTokens_FieldNumber_AnnualProvisions,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MintIncentiveTokens__storage_, annualProvisions),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "neededAmount",
        .dataTypeSpecific.clazz = Nil,
        .number = MintIncentiveTokens_FieldNumber_NeededAmount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MintIncentiveTokens__storage_, neededAmount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "collectedAmount",
        .dataTypeSpecific.clazz = Nil,
        .number = MintIncentiveTokens_FieldNumber_CollectedAmount,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MintIncentiveTokens__storage_, collectedAmount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "mintedAmount",
        .dataTypeSpecific.clazz = Nil,
        .number = MintIncentiveTokens_FieldNumber_MintedAmount,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MintIncentiveTokens__storage_, mintedAmount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "burnedAmount",
        .dataTypeSpecific.clazz = Nil,
        .number = MintIncentiveTokens_FieldNumber_BurnedAmount,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(MintIncentiveTokens__storage_, burnedAmount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MintIncentiveTokens)
                                   messageName:@"MintIncentiveTokens"
                               fileDescription:&EventRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MintIncentiveTokens__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
