/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Addr, Binary, InstantiateMsg, FeeConfig, Any, GrantConfig, ExecuteMsg, Uint128, Params, Coin, QueryMsg } from "./Treasury.types";
export interface TreasuryMsg {
  contractAddress: string;
  sender: string;
  proposeAdmin: ({
    newAdmin
  }: {
    newAdmin: Addr;
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  acceptAdmin: (funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  cancelProposedAdmin: (funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  updateGrantConfig: ({
    grantConfig,
    msgTypeUrl
  }: {
    grantConfig: GrantConfig;
    msgTypeUrl: string;
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  removeGrantConfig: ({
    msgTypeUrl
  }: {
    msgTypeUrl: string;
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  updateFeeConfig: ({
    feeConfig
  }: {
    feeConfig: FeeConfig;
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  deployFeeGrant: ({
    authzGrantee,
    authzGranter
  }: {
    authzGrantee: Addr;
    authzGranter: Addr;
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  revokeAllowance: ({
    grantee
  }: {
    grantee: Addr;
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  updateParams: ({
    params
  }: {
    params: Params;
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  withdraw: ({
    coins
  }: {
    coins: Coin[];
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class TreasuryMsgComposer implements TreasuryMsg {
  sender: string;
  contractAddress: string;
  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.proposeAdmin = this.proposeAdmin.bind(this);
    this.acceptAdmin = this.acceptAdmin.bind(this);
    this.cancelProposedAdmin = this.cancelProposedAdmin.bind(this);
    this.updateGrantConfig = this.updateGrantConfig.bind(this);
    this.removeGrantConfig = this.removeGrantConfig.bind(this);
    this.updateFeeConfig = this.updateFeeConfig.bind(this);
    this.deployFeeGrant = this.deployFeeGrant.bind(this);
    this.revokeAllowance = this.revokeAllowance.bind(this);
    this.updateParams = this.updateParams.bind(this);
    this.withdraw = this.withdraw.bind(this);
  }
  proposeAdmin = ({
    newAdmin
  }: {
    newAdmin: Addr;
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          propose_admin: {
            new_admin: newAdmin
          }
        })),
        funds: funds_
      })
    };
  };
  acceptAdmin = (funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          accept_admin: {}
        })),
        funds: funds_
      })
    };
  };
  cancelProposedAdmin = (funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          cancel_proposed_admin: {}
        })),
        funds: funds_
      })
    };
  };
  updateGrantConfig = ({
    grantConfig,
    msgTypeUrl
  }: {
    grantConfig: GrantConfig;
    msgTypeUrl: string;
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_grant_config: {
            grant_config: grantConfig,
            msg_type_url: msgTypeUrl
          }
        })),
        funds: funds_
      })
    };
  };
  removeGrantConfig = ({
    msgTypeUrl
  }: {
    msgTypeUrl: string;
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_grant_config: {
            msg_type_url: msgTypeUrl
          }
        })),
        funds: funds_
      })
    };
  };
  updateFeeConfig = ({
    feeConfig
  }: {
    feeConfig: FeeConfig;
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_fee_config: {
            fee_config: feeConfig
          }
        })),
        funds: funds_
      })
    };
  };
  deployFeeGrant = ({
    authzGrantee,
    authzGranter
  }: {
    authzGrantee: Addr;
    authzGranter: Addr;
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          deploy_fee_grant: {
            authz_grantee: authzGrantee,
            authz_granter: authzGranter
          }
        })),
        funds: funds_
      })
    };
  };
  revokeAllowance = ({
    grantee
  }: {
    grantee: Addr;
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          revoke_allowance: {
            grantee
          }
        })),
        funds: funds_
      })
    };
  };
  updateParams = ({
    params
  }: {
    params: Params;
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_params: {
            params
          }
        })),
        funds: funds_
      })
    };
  };
  withdraw = ({
    coins
  }: {
    coins: Coin[];
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          withdraw: {
            coins
          }
        })),
        funds: funds_
      })
    };
  };
}