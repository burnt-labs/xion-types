/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { AddAuthenticator, Binary, InstantiateMsg, ExecuteMsg, QueryMsg, MigrateMsg } from "./Account.types";
import { AccountQueryClient, AccountClient } from "./Account.client";
export const accountQueryKeys = {
  contract: ([{
    contract: "account"
  }] as const),
  address: (contractAddress: string | undefined) => ([{
    ...accountQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  authenticatorIDs: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...accountQueryKeys.address(contractAddress)[0],
    method: "authenticator_i_ds",
    args
  }] as const),
  authenticatorByID: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...accountQueryKeys.address(contractAddress)[0],
    method: "authenticator_by_i_d",
    args
  }] as const)
};
export const accountQueries = {
  authenticatorIDs: <TData = Binary,>({
    client,
    options
  }: AccountAuthenticatorIDsQuery<TData>): UseQueryOptions<Binary, Error, TData> => ({
    queryKey: accountQueryKeys.authenticatorIDs(client?.contractAddress),
    queryFn: () => client ? client.authenticatorIDs() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  authenticatorByID: <TData = Binary,>({
    client,
    args,
    options
  }: AccountAuthenticatorByIDQuery<TData>): UseQueryOptions<Binary, Error, TData> => ({
    queryKey: accountQueryKeys.authenticatorByID(client?.contractAddress, args),
    queryFn: () => client ? client.authenticatorByID({
      id: args.id
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface AccountReactQuery<TResponse, TData = TResponse> {
  client: AccountQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface AccountAuthenticatorByIDQuery<TData> extends AccountReactQuery<Binary, TData> {
  args: {
    id: number;
  };
}
export function useAccountAuthenticatorByIDQuery<TData = Binary>({
  client,
  args,
  options
}: AccountAuthenticatorByIDQuery<TData>) {
  return useQuery<Binary, Error, TData>(accountQueryKeys.authenticatorByID(client?.contractAddress, args), () => client ? client.authenticatorByID({
    id: args.id
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface AccountAuthenticatorIDsQuery<TData> extends AccountReactQuery<Binary, TData> {}
export function useAccountAuthenticatorIDsQuery<TData = Binary>({
  client,
  options
}: AccountAuthenticatorIDsQuery<TData>) {
  return useQuery<Binary, Error, TData>(accountQueryKeys.authenticatorIDs(client?.contractAddress), () => client ? client.authenticatorIDs() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface AccountEmitMutation {
  client: AccountClient;
  msg: {
    data: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useAccountEmitMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, AccountEmitMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, AccountEmitMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.emit(msg, fee, memo, funds), options);
}
export interface AccountRemoveAuthMethodMutation {
  client: AccountClient;
  msg: {
    id: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useAccountRemoveAuthMethodMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, AccountRemoveAuthMethodMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, AccountRemoveAuthMethodMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.removeAuthMethod(msg, fee, memo, funds), options);
}
export interface AccountAddAuthMethodMutation {
  client: AccountClient;
  msg: {
    addAuthenticator: AddAuthenticator;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useAccountAddAuthMethodMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, AccountAddAuthMethodMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, AccountAddAuthMethodMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.addAuthMethod(msg, fee, memo, funds), options);
}