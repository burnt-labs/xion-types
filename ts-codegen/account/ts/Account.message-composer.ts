/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { AddAuthenticator, Binary, InstantiateMsg, ExecuteMsg, QueryMsg, MigrateMsg } from "./Account.types";
export interface AccountMsg {
  contractAddress: string;
  sender: string;
  addAuthMethod: ({
    addAuthenticator
  }: {
    addAuthenticator: AddAuthenticator;
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  removeAuthMethod: ({
    id
  }: {
    id: number;
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  emit: ({
    data
  }: {
    data: string;
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class AccountMsgComposer implements AccountMsg {
  sender: string;
  contractAddress: string;
  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.addAuthMethod = this.addAuthMethod.bind(this);
    this.removeAuthMethod = this.removeAuthMethod.bind(this);
    this.emit = this.emit.bind(this);
  }
  addAuthMethod = ({
    addAuthenticator
  }: {
    addAuthenticator: AddAuthenticator;
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          add_auth_method: {
            add_authenticator: addAuthenticator
          }
        })),
        funds: funds_
      })
    };
  };
  removeAuthMethod = ({
    id
  }: {
    id: number;
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_auth_method: {
            id
          }
        })),
        funds: funds_
      })
    };
  };
  emit = ({
    data
  }: {
    data: string;
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          emit: {
            data
          }
        })),
        funds: funds_
      })
    };
  };
}