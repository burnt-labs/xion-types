/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { AddAuthenticator, Binary, InstantiateMsg, ExecuteMsg, QueryMsg, MigrateMsg } from "./Account.types";
export interface AccountReadOnlyInterface {
  contractAddress: string;
  authenticatorIDs: () => Promise<Binary>;
  authenticatorByID: ({
    id
  }: {
    id: number;
  }) => Promise<Binary>;
}
export class AccountQueryClient implements AccountReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.authenticatorIDs = this.authenticatorIDs.bind(this);
    this.authenticatorByID = this.authenticatorByID.bind(this);
  }
  authenticatorIDs = async (): Promise<Binary> => {
    return this.client.queryContractSmart(this.contractAddress, {
      authenticator_i_ds: {}
    });
  };
  authenticatorByID = async ({
    id
  }: {
    id: number;
  }): Promise<Binary> => {
    return this.client.queryContractSmart(this.contractAddress, {
      authenticator_by_i_d: {
        id
      }
    });
  };
}
export interface AccountInterface extends AccountReadOnlyInterface {
  contractAddress: string;
  sender: string;
  addAuthMethod: ({
    addAuthenticator
  }: {
    addAuthenticator: AddAuthenticator;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  removeAuthMethod: ({
    id
  }: {
    id: number;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  emit: ({
    data
  }: {
    data: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class AccountClient extends AccountQueryClient implements AccountInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.addAuthMethod = this.addAuthMethod.bind(this);
    this.removeAuthMethod = this.removeAuthMethod.bind(this);
    this.emit = this.emit.bind(this);
  }
  addAuthMethod = async ({
    addAuthenticator
  }: {
    addAuthenticator: AddAuthenticator;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_auth_method: {
        add_authenticator: addAuthenticator
      }
    }, fee_, memo_, funds_);
  };
  removeAuthMethod = async ({
    id
  }: {
    id: number;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_auth_method: {
        id
      }
    }, fee_, memo_, funds_);
  };
  emit = async ({
    data
  }: {
    data: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      emit: {
        data
      }
    }, fee_, memo_, funds_);
  };
}