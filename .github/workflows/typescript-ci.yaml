name: Xion-Types Package CI/CD

on:
  push:
    branches: 
      # - main #TODO: Uncomment this when we want to publish to main
      - feat/do-99-package-releasing-automation
    paths:
      #- 'ts/**'
      - 'proto/**'
      - '.github/workflows/typescript-ci.yaml'
  pull_request:
    branches: [main] #TODO : is it enough ?
    paths:
      - 'ts/**'
      - 'proto/**'
      - '.github/workflows/typescript-ci.yaml'
  workflow_dispatch:
    inputs:
      next_version:
        description: 'Specific version to set (e.g., 1.2.3). If empty, will use the latest Git tag.'
        required: false
        type: string

env:
  NODE_VERSION: '20'
  REGISTRY_URL: 'https://registry.npmjs.org'

jobs:
  setup-submodules:
    name: Setup Submodules
    runs-on: ubuntu-latest
    outputs:
      submodules-ready: ${{ steps.check-submodules.outputs.ready }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git for HTTPS
        run: |
          git config --global url."https://github.com/".insteadOf "git@github.com:"
          git config --global url."https://".insteadOf "git://"

      - name: Initialize and Update Submodules
        run: |
          # Initialize only the required submodules
          git submodule init xion
          git submodule init contracts
          
          # Update submodules using HTTPS URLs
          git submodule update --init xion
          git submodule update --init contracts
          
          # Verify submodules are available
          if [ ! -d "xion" ] || [ -z "$(ls -A xion)" ]; then
            echo "❌ xion submodule not available"
            exit 1
          fi
          
          if [ ! -d "contracts" ] || [ -z "$(ls -A contracts)" ]; then
            echo "❌ contracts submodule not available"
            exit 1
          fi
          
          echo "✅ Required submodules initialized"

      - name: Upload Submodules
        uses: actions/upload-artifact@v4
        with:
          name: submodules
          path: |
            xion/
            contracts/
          retention-days: 1

      - name: Check Submodules
        id: check-submodules
        run: |
          echo "ready=true" >> $GITHUB_OUTPUT

  generate-protobuf:
    name: Generate Protobuf Definitions
    needs: [setup-submodules]
    runs-on: ubuntu-latest
    outputs:
      types-generated: ${{ steps.check-types.outputs.types-generated }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Submodules
        uses: actions/download-artifact@v4
        with:
          name: submodules
          path: ./

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Dependencies
        run: |
          cd ts
          npm install

      - name: Install buf CLI
        run: |
          curl -sSL "https://github.com/bufbuild/buf/releases/latest/download/buf-$(uname -s)-$(uname -m)" -o "/usr/local/bin/buf"
          chmod +x "/usr/local/bin/buf"

      - name: Generate TypeScript Definitions
        run: |
          ./scripts/proto-gen.sh --ts

      - name: Check if Types Were Generated
        id: check-types
        run: |
          if [ -d "./ts/types" ] && [ "$(ls -A ./ts/types)" ]; then
            echo "types-generated=true" >> $GITHUB_OUTPUT
            echo "✅ TypeScript definitions generated successfully"
          else
            echo "types-generated=false" >> $GITHUB_OUTPUT
            echo "❌ Failed to generate TypeScript definitions"
            exit 1
          fi

      - name: Upload Generated Types
        uses: actions/upload-artifact@v4
        with:
          name: generated-types
          path: ts/types
          retention-days: 1

  # test-dependent-projects:
  #   name: Test Dependent Projects Compatibility
  #   needs: [setup-submodules, generate-protobuf]
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       project: 
  #         #- xion-dashboard-app # is private TODO
  #         - xion-explorer
  #         - xion-faucet
  #         - xion-staking
  #   steps:
  #     - name: Checkout Main Repository
  #       uses: actions/checkout@v4
  #       with:
  #         path: xion-types
  #         token: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Download Submodules
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: submodules
  #         path: xion-types/

  #     - name: Download Generated Types
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: generated-types
  #         path: xion-types/ts/types

  #     - name: Checkout Dependent Project
  #       uses: actions/checkout@v4
  #       with:
  #         repository: burnt-labs/${{ matrix.project }}
  #         path: dependent-project
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         fetch-depth: 1
          
  #     - name: Debug Repository Checkout
  #       run: |
  #         echo "Checking if dependent-project directory exists..."
  #         ls -la dependent-project/ || echo "Directory not found"
          
  #         echo "Checking repository URL..."
  #         echo "Repository: burnt-labs/${{ matrix.project }}"
          
  #         echo "Checking if package.json exists..."
  #         if [ -f "dependent-project/package.json" ]; then
  #           echo "✅ package.json found"
  #           head -5 dependent-project/package.json
  #         else
  #           echo "❌ package.json not found"
  #           echo "Contents of dependent-project directory:"
  #           ls -la dependent-project/ || echo "Directory is empty or doesn't exist"
  #         fi

  #     - name: Test Project with Updated Types
  #       run: |
  #         cd dependent-project
          
  #         # Check if package.json exists
  #         if [ ! -f "package.json" ]; then
  #           echo "❌ No package.json found in ${{ matrix.project }}"
  #           exit 1
  #         fi
          
  #         # Install the types package with legacy peer deps to bypass conflicts
  #         echo "Installing types package for ${{ matrix.project }}..."
  #         npm install ../xion-types/ts --no-save --legacy-peer-deps
          
  #         # Run type checking
  #         echo "Running type check for ${{ matrix.project }}..."
  #         npx tsc --noEmit --skipLibCheck || echo "Type check completed with warnings"
          
  #         echo "✅ Proto compatibility test completed for ${{ matrix.project }}"

  publish:
    name: Publish to NPM
    needs: generate-protobuf # TODO [test-dependent-projects]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    #if: github.ref == 'refs/heads/main' && github.event_name == 'push' #TODO: Uncomment this when we want to publish to main
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}
          token: ${{ secrets.NPM_TOKEN }}

      - name: Bump Version
        working-directory: ./ts
        run: |
          if [ "${{ github.event.inputs.next_version }}" != "" ]; then
            # Set specific version from manual input
            npm version ${{ github.event.inputs.next_version }} --no-git-tag-version
            echo "Set version from manual input: ${{ github.event.inputs.next_version }}"
          else
            # Get version from latest Git tag
            echo "No manual version specified, using latest Git tag..."
            
            # Fetch all tags
            git fetch --tags
            
            # Get the latest tag (excluding pre-release tags like v1.0.0-beta.1)
            LATEST_TAG=$(git tag -l --sort=-version:refname | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | head -1)
            
            if [ -z "$LATEST_TAG" ]; then
              echo "❌ No version tags found. Please either:"
              echo "   1. Create a Git tag (e.g., git tag v1.0.0)"
              echo "   2. Provide next_version input in workflow_dispatch"
              exit 1
            else
              # Remove 'v' prefix if present
              CLEAN_TAG=${LATEST_TAG#v}
              echo "Using version from Git tag: $LATEST_TAG (clean: $CLEAN_TAG)"
              npm version $CLEAN_TAG --no-git-tag-version
            fi
          fi
        
          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "New package version: $NEW_VERSION"

# TODO: Uncomment this when we want to publish to main
      - name: Publish to NPM 
        working-directory: ./ts
        env:
          token: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publishing package version: ${{ env.NEW_VERSION }}"
          npm publish --provenance --access public
          echo "Successfully published @burnt-labs/xion-types@${{ env.NEW_VERSION }}"

#   validate-package:
#     name: Validate NPM Package
#     needs: publish
#     runs-on: ubuntu-latest
#     #if: github.ref == 'refs/heads/main' && github.event_name == 'push' #TODO: Uncomment this when we want to publish to main
#     steps:
#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: ${{ env.NODE_VERSION }}
#           registry-url: ${{ env.REGISTRY_URL }}

#       - name: Verify Package on NPM
#         run: |
#           PACKAGE_VERSION="${{ needs.publish.outputs.NEW_VERSION }}"
#           echo "Verifying package version: $PACKAGE_VERSION"
          
#           # Retry logic for NPM verification
#           MAX_ATTEMPTS=10
#           ATTEMPT=1
          
#           while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
#             echo "Attempt $ATTEMPT/$MAX_ATTEMPTS: Checking if package is available on NPM..."
            
#             if npm view @burnt-labs/xion-types@$PACKAGE_VERSION version > /dev/null 2>&1; then
#               echo "✅ Package successfully published to NPM"
#               echo "Package version $PACKAGE_VERSION is available on NPM"
#               exit 0
#             else
#               echo "Package not yet available on NPM (attempt $ATTEMPT/$MAX_ATTEMPTS)"
              
#               if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
#                 echo "Waiting 10 seconds before retry..."
#                 sleep 10
#               fi
#             fi
            
#             ATTEMPT=$((ATTEMPT + 1))
#           done
          
#           echo "❌ Failed to verify package on NPM after $MAX_ATTEMPTS attempts"
#           exit 1