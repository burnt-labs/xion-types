name: Xion-Types Package CI/CD

on:
  push:
    branches: 
      # - main #TODO: Uncomment this when we want to publish to main
      - feat/do-99-package-releasing-automation
    paths:
      - 'ts/**'
      - 'proto/**'
      - '.github/workflows/typescript-ci.yaml'
  pull_request:
    branches: [main] #TODO : is it enough ?
    paths:
      - 'ts/**'
      - 'proto/**'
      - '.github/workflows/typescript-ci.yaml'
  workflow_dispatch:
    inputs:
      next_version:
        description: 'Specific version to set (e.g., 1.2.3). If empty, will use the latest Git tag.'
        required: false
        type: string

env:
  NODE_VERSION: '18'
  REGISTRY_URL: 'https://registry.npmjs.org'

jobs:
  validate:
    name: Validate Package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify Types Directory
        run: |
          if [ ! -d "./ts/types" ] || [ -z "$(ls -A ./ts/types)" ]; then
            echo "Error: Types directory is empty or missing"
            exit 1
          fi
          echo "✅ Types directory validated"

  publish:
    name: Publish to NPM
    needs: [validate]
    runs-on: ubuntu-latest
    #if: github.ref == 'refs/heads/main' && github.event_name == 'push' #TODO: Uncomment this when we want to publish to main
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}
          token: ${{ secrets.NPM_TOKEN }}

      - name: Bump Version
        working-directory: ./ts
        run: |
          if [ "${{ github.event.inputs.next_version }}" != "" ]; then
            # Set specific version from manual input
            npm version ${{ github.event.inputs.next_version }} --no-git-tag-version
            echo "Set version from manual input: ${{ github.event.inputs.next_version }}"
          else
            # Get version from latest Git tag
            echo "No manual version specified, using latest Git tag..."
            
            # Fetch all tags
            git fetch --tags
            
            # Get the latest tag (excluding pre-release tags like v1.0.0-beta.1)
            LATEST_TAG=$(git tag -l --sort=-version:refname | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | head -1)
            
            if [ -z "$LATEST_TAG" ]; then
              echo "❌ No version tags found. Please either:"
              echo "   1. Create a Git tag (e.g., git tag v1.0.0)"
              echo "   2. Provide next_version input in workflow_dispatch"
              exit 1
            else
              # Remove 'v' prefix if present
              CLEAN_TAG=${LATEST_TAG#v}
              echo "Using version from Git tag: $LATEST_TAG (clean: $CLEAN_TAG)"
              npm version $CLEAN_TAG --no-git-tag-version
            fi
          fi
        
          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "New package version: $NEW_VERSION"

# TODO: Uncomment this when we want to publish to main
      - name: Publish to NPM 
        working-directory: ./ts
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publishing package version: ${{ env.NEW_VERSION }}"
          npm publish --access public
          echo "Successfully published @burnt-labs/xion-types@${{ env.NEW_VERSION }}"

  validate-package:
    name: Validate NPM Package
    needs: publish
    runs-on: ubuntu-latest
    #if: github.ref == 'refs/heads/main' && github.event_name == 'push' #TODO: Uncomment this when we want to publish to main
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}

      - name: Verify Package on NPM
        run: |
          PACKAGE_VERSION="${{ needs.publish.outputs.NEW_VERSION }}"
          echo "Verifying package version: $PACKAGE_VERSION"
          
          # Retry logic for NPM verification
          MAX_ATTEMPTS=10
          ATTEMPT=1
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT/$MAX_ATTEMPTS: Checking if package is available on NPM..."
            
            if npm view @burnt-labs/xion-types@$PACKAGE_VERSION version > /dev/null 2>&1; then
              echo "✅ Package successfully published to NPM"
              echo "Package version $PACKAGE_VERSION is available on NPM"
              exit 0
            else
              echo "Package not yet available on NPM (attempt $ATTEMPT/$MAX_ATTEMPTS)"
              
              if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
                echo "Waiting 10 seconds before retry..."
                sleep 10
              fi
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
          done
          
          echo "❌ Failed to verify package on NPM after $MAX_ATTEMPTS attempts"
          exit 1