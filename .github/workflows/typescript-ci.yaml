name: TypeScript Package CI/CD

on:
  push:
    branches: 
      # - main
      - feat/do-99-package-releasing-automation
    paths:
      - 'ts/**'
      - 'proto/**'
      - '.github/workflows/typescript-ci.yaml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'ts/**'
      - 'proto/**'
      - '.github/workflows/typescript-ci.yaml'
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type (patch, minor, major)'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  NODE_VERSION: '18'
  REGISTRY_URL: 'https://registry.npmjs.org'

jobs:
  test:
    name: Test and Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'ts/package-lock.json'

      - name: Install Dependencies
        working-directory: ./ts
        run: npm ci

      - name: Run Tests
        working-directory: ./ts
        run: npm test

      - name: Build Package
        working-directory: ./ts
        run: npm run build

      - name: Type Check
        working-directory: ./ts
        run: npx tsc --noEmit

  generate-protobuf:
    name: Generate Protobuf Types
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/cosmos/proto-builder:0.15.2
      options: --user root
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout Essential Submodules
        run: |
          echo "Only checkout the essential submodules needed for protobuf generation"
          
          git submodule init
          git submodule update --init --recursive xion
          git submodule update --init --recursive buf
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'ts/package-lock.json'

      - name: Install Dependencies
        working-directory: ./ts
        run: npm ci

      - name: Install buf
        run: |
          curl -sSL \
            "https://github.com/bufbuild/buf/releases/download/v1.28.1/buf-$(uname -s)-$(uname -m)" \
            -o "/usr/local/bin/buf" && chmod +x "/usr/local/bin/buf"

      - name: Generate Protobuf Definitions
        run: |
          # Use the existing proto-gen.sh script for TypeScript generation
          cd ts
          npm run generate-types
          
          # Verify the types were generated
          if [ ! -d "./types" ] || [ -z "$(ls -A ./types)" ]; then
            echo "Error: No TypeScript types were generated"
            exit 1
          fi
          
          # Count generated files
          file_count=$(find ./types -name "*.ts" | wc -l)
          echo "Generated $file_count TypeScript type files"
          
          # List some generated files for verification
          echo "Sample generated files:"
          find ./types -name "*.ts" | head -10

      - name: Verify Generated Types
        working-directory: ./ts
        run: |
          # Basic syntax check
          npx tsc --noEmit --skipLibCheck

      - name: Upload Generated Types
        uses: actions/upload-artifact@v4
        with:
          name: generated-types
          path: ./ts/types
          retention-days: 1

  # COMMENTED OUT FOR TESTING - PUBLISH JOB
  # publish:
  #   name: Publish to NPM
  #   needs: [test, generate-protobuf]
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4
  #       with:
  #         submodules: recursive
  #         token: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Download Generated Types
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: generated-types
  #         path: ./ts/types

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         registry-url: ${{ env.REGISTRY_URL }}

  #     - name: Install Dependencies
  #       working-directory: ./ts
  #       run: npm ci

  #     - name: Bump Version
  #       working-directory: ./ts
  #       run: |
  #         if [ "${{ github.event.inputs.version_bump }}" != "" ]; then
  #           npm version ${{ github.event.inputs.version_bump }} --no-git-tag-version
  #         else
  #           npm version patch --no-git-tag-version
  #         fi
        
  #         # Get the new version
  #         NEW_VERSION=$(node -p "require('./package.json').version")
  #         echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
  #         echo "New package version: $NEW_VERSION"

  #     - name: Build Package for Publishing
  #       working-directory: ./ts
  #       run: |
  #         # Build the package (this will create the dist directory)
  #         npm run build
        
  #         # Verify the dist structure
  #         echo "Dist directory contents:"
  #         ls -la dist/
  #         echo "Dist types contents:"
  #         ls -la dist/types/ | head -10

  #     - name: Prepare Package for Publishing
  #       working-directory: ./ts
  #       run: |
  #         # Copy necessary files to dist
  #         cp package.json dist/
  #         cp README.md dist/ 2>/dev/null || echo "README.md not found, skipping"
  #         cp ../../README.md dist/ 2>/dev/null || echo "Root README.md not found, skipping"
        
  #         # Ensure dist directory structure is correct
  #         echo "Final dist structure:"
  #         ls -la dist/
  #         echo "Package.json in dist:"
  #         cat dist/package.json | grep -E "(name|version|main|types)"

  #     - name: Publish to NPM
  #       working-directory: ./ts/dist
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  #       run: |
  #         echo "Publishing package version: ${{ env.NEW_VERSION }}"
  #         npm publish --access public
  #         echo "Successfully published @burnt-labs/xion-types@${{ env.NEW_VERSION }}"

  #     - name: Create Release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: v${{ env.NEW_VERSION }}
  #         release_name: Release v${{ env.NEW_VERSION }}
  #         body: |
  #           ## What's Changed
            
  #           This release includes:
  #           - Updated TypeScript type definitions from latest protobuf files
  #           - Generated types for Xion blockchain protocol
  #           - Cosmos SDK and IBC type definitions
            
  #           ## Installation
            
  #           ```bash
  #           npm install @burnt-labs/xion-types@${{ env.NEW_VERSION }}
  #           ```
            
  #           ## Usage
            
  #           ```typescript
  #           import { MsgSend } from '@burnt-labs/xion-types/cosmos/bank/v1beta1/tx';
  #           ```
  #         draft: false
  #         prerelease: false

  # COMMENTED OUT FOR TESTING - VALIDATE RELEASE JOB
  # validate-release:
  #   name: Validate Release
  #   needs: publish
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   steps:
  #     - name: Wait for NPM
  #       run: sleep 30

  #     - name: Verify Package on NPM
  #       run: |
  #         PACKAGE_VERSION="${{ needs.publish.outputs.NEW_VERSION }}"
  #         echo "echo "Verifying package version: $PACKAGE_VERSION"
        
  #         # Check if package is available on NPM
  #         npm view @burnt-labs/xion-types@$PACKAGE_VERSION version
        
  #         echo "âœ… Package successfully published to NPM"


