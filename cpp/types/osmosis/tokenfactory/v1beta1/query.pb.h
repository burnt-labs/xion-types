// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: osmosis/tokenfactory/v1beta1/query.proto
// Protobuf C++ Version: 5.29.4

#ifndef osmosis_2ftokenfactory_2fv1beta1_2fquery_2eproto_2epb_2eh
#define osmosis_2ftokenfactory_2fv1beta1_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/api/annotations.pb.h"
#include "cosmos/base/query/v1beta1/pagination.pb.h"
#include "osmosis/tokenfactory/v1beta1/authorityMetadata.pb.h"
#include "osmosis/tokenfactory/v1beta1/params.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_osmosis_2ftokenfactory_2fv1beta1_2fquery_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_osmosis_2ftokenfactory_2fv1beta1_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_osmosis_2ftokenfactory_2fv1beta1_2fquery_2eproto;
namespace osmosis {
namespace tokenfactory {
namespace v1beta1 {
class QueryDenomAuthorityMetadataRequest;
struct QueryDenomAuthorityMetadataRequestDefaultTypeInternal;
extern QueryDenomAuthorityMetadataRequestDefaultTypeInternal _QueryDenomAuthorityMetadataRequest_default_instance_;
class QueryDenomAuthorityMetadataResponse;
struct QueryDenomAuthorityMetadataResponseDefaultTypeInternal;
extern QueryDenomAuthorityMetadataResponseDefaultTypeInternal _QueryDenomAuthorityMetadataResponse_default_instance_;
class QueryDenomsFromAdminRequest;
struct QueryDenomsFromAdminRequestDefaultTypeInternal;
extern QueryDenomsFromAdminRequestDefaultTypeInternal _QueryDenomsFromAdminRequest_default_instance_;
class QueryDenomsFromAdminResponse;
struct QueryDenomsFromAdminResponseDefaultTypeInternal;
extern QueryDenomsFromAdminResponseDefaultTypeInternal _QueryDenomsFromAdminResponse_default_instance_;
class QueryDenomsFromCreatorRequest;
struct QueryDenomsFromCreatorRequestDefaultTypeInternal;
extern QueryDenomsFromCreatorRequestDefaultTypeInternal _QueryDenomsFromCreatorRequest_default_instance_;
class QueryDenomsFromCreatorResponse;
struct QueryDenomsFromCreatorResponseDefaultTypeInternal;
extern QueryDenomsFromCreatorResponseDefaultTypeInternal _QueryDenomsFromCreatorResponse_default_instance_;
class QueryParamsRequest;
struct QueryParamsRequestDefaultTypeInternal;
extern QueryParamsRequestDefaultTypeInternal _QueryParamsRequest_default_instance_;
class QueryParamsResponse;
struct QueryParamsResponseDefaultTypeInternal;
extern QueryParamsResponseDefaultTypeInternal _QueryParamsResponse_default_instance_;
}  // namespace v1beta1
}  // namespace tokenfactory
}  // namespace osmosis
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace osmosis {
namespace tokenfactory {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class QueryParamsRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:osmosis.tokenfactory.v1beta1.QueryParamsRequest) */ {
 public:
  inline QueryParamsRequest() : QueryParamsRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QueryParamsRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QueryParamsRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueryParamsRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueryParamsRequest(const QueryParamsRequest& from) : QueryParamsRequest(nullptr, from) {}
  inline QueryParamsRequest(QueryParamsRequest&& from) noexcept
      : QueryParamsRequest(nullptr, std::move(from)) {}
  inline QueryParamsRequest& operator=(const QueryParamsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryParamsRequest& operator=(QueryParamsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryParamsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryParamsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryParamsRequest*>(
        &_QueryParamsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(QueryParamsRequest& a, QueryParamsRequest& b) { a.Swap(&b); }
  inline void Swap(QueryParamsRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryParamsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryParamsRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<QueryParamsRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryParamsRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryParamsRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "osmosis.tokenfactory.v1beta1.QueryParamsRequest"; }

 protected:
  explicit QueryParamsRequest(::google::protobuf::Arena* arena);
  QueryParamsRequest(::google::protobuf::Arena* arena, const QueryParamsRequest& from);
  QueryParamsRequest(::google::protobuf::Arena* arena, QueryParamsRequest&& from) noexcept
      : QueryParamsRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:osmosis.tokenfactory.v1beta1.QueryParamsRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QueryParamsRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_osmosis_2ftokenfactory_2fv1beta1_2fquery_2eproto;
};
// -------------------------------------------------------------------

class QueryDenomsFromCreatorResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse) */ {
 public:
  inline QueryDenomsFromCreatorResponse() : QueryDenomsFromCreatorResponse(nullptr) {}
  ~QueryDenomsFromCreatorResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QueryDenomsFromCreatorResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QueryDenomsFromCreatorResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueryDenomsFromCreatorResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueryDenomsFromCreatorResponse(const QueryDenomsFromCreatorResponse& from) : QueryDenomsFromCreatorResponse(nullptr, from) {}
  inline QueryDenomsFromCreatorResponse(QueryDenomsFromCreatorResponse&& from) noexcept
      : QueryDenomsFromCreatorResponse(nullptr, std::move(from)) {}
  inline QueryDenomsFromCreatorResponse& operator=(const QueryDenomsFromCreatorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDenomsFromCreatorResponse& operator=(QueryDenomsFromCreatorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDenomsFromCreatorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDenomsFromCreatorResponse* internal_default_instance() {
    return reinterpret_cast<const QueryDenomsFromCreatorResponse*>(
        &_QueryDenomsFromCreatorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(QueryDenomsFromCreatorResponse& a, QueryDenomsFromCreatorResponse& b) { a.Swap(&b); }
  inline void Swap(QueryDenomsFromCreatorResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDenomsFromCreatorResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryDenomsFromCreatorResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QueryDenomsFromCreatorResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryDenomsFromCreatorResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueryDenomsFromCreatorResponse& from) { QueryDenomsFromCreatorResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QueryDenomsFromCreatorResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse"; }

 protected:
  explicit QueryDenomsFromCreatorResponse(::google::protobuf::Arena* arena);
  QueryDenomsFromCreatorResponse(::google::protobuf::Arena* arena, const QueryDenomsFromCreatorResponse& from);
  QueryDenomsFromCreatorResponse(::google::protobuf::Arena* arena, QueryDenomsFromCreatorResponse&& from) noexcept
      : QueryDenomsFromCreatorResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDenomsFieldNumber = 1,
  };
  // repeated string denoms = 1 [json_name = "denoms", (.gogoproto.moretags) = "yaml:\"denoms\""];
  int denoms_size() const;
  private:
  int _internal_denoms_size() const;

  public:
  void clear_denoms() ;
  const std::string& denoms(int index) const;
  std::string* mutable_denoms(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_denoms(int index, Arg_&& value, Args_... args);
  std::string* add_denoms();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_denoms(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& denoms() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_denoms();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_denoms() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_denoms();

  public:
  // @@protoc_insertion_point(class_scope:osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      74, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QueryDenomsFromCreatorResponse& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> denoms_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osmosis_2ftokenfactory_2fv1beta1_2fquery_2eproto;
};
// -------------------------------------------------------------------

class QueryDenomsFromCreatorRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest) */ {
 public:
  inline QueryDenomsFromCreatorRequest() : QueryDenomsFromCreatorRequest(nullptr) {}
  ~QueryDenomsFromCreatorRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QueryDenomsFromCreatorRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QueryDenomsFromCreatorRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueryDenomsFromCreatorRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueryDenomsFromCreatorRequest(const QueryDenomsFromCreatorRequest& from) : QueryDenomsFromCreatorRequest(nullptr, from) {}
  inline QueryDenomsFromCreatorRequest(QueryDenomsFromCreatorRequest&& from) noexcept
      : QueryDenomsFromCreatorRequest(nullptr, std::move(from)) {}
  inline QueryDenomsFromCreatorRequest& operator=(const QueryDenomsFromCreatorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDenomsFromCreatorRequest& operator=(QueryDenomsFromCreatorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDenomsFromCreatorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDenomsFromCreatorRequest* internal_default_instance() {
    return reinterpret_cast<const QueryDenomsFromCreatorRequest*>(
        &_QueryDenomsFromCreatorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(QueryDenomsFromCreatorRequest& a, QueryDenomsFromCreatorRequest& b) { a.Swap(&b); }
  inline void Swap(QueryDenomsFromCreatorRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDenomsFromCreatorRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryDenomsFromCreatorRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QueryDenomsFromCreatorRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryDenomsFromCreatorRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueryDenomsFromCreatorRequest& from) { QueryDenomsFromCreatorRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QueryDenomsFromCreatorRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest"; }

 protected:
  explicit QueryDenomsFromCreatorRequest(::google::protobuf::Arena* arena);
  QueryDenomsFromCreatorRequest(::google::protobuf::Arena* arena, const QueryDenomsFromCreatorRequest& from);
  QueryDenomsFromCreatorRequest(::google::protobuf::Arena* arena, QueryDenomsFromCreatorRequest&& from) noexcept
      : QueryDenomsFromCreatorRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCreatorFieldNumber = 1,
  };
  // string creator = 1 [json_name = "creator", (.gogoproto.moretags) = "yaml:\"creator\""];
  void clear_creator() ;
  const std::string& creator() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_creator(Arg_&& arg, Args_... args);
  std::string* mutable_creator();
  PROTOBUF_NODISCARD std::string* release_creator();
  void set_allocated_creator(std::string* value);

  private:
  const std::string& _internal_creator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator(
      const std::string& value);
  std::string* _internal_mutable_creator();

  public:
  // @@protoc_insertion_point(class_scope:osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      74, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QueryDenomsFromCreatorRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr creator_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osmosis_2ftokenfactory_2fv1beta1_2fquery_2eproto;
};
// -------------------------------------------------------------------

class QueryDenomsFromAdminResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:osmosis.tokenfactory.v1beta1.QueryDenomsFromAdminResponse) */ {
 public:
  inline QueryDenomsFromAdminResponse() : QueryDenomsFromAdminResponse(nullptr) {}
  ~QueryDenomsFromAdminResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QueryDenomsFromAdminResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QueryDenomsFromAdminResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueryDenomsFromAdminResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueryDenomsFromAdminResponse(const QueryDenomsFromAdminResponse& from) : QueryDenomsFromAdminResponse(nullptr, from) {}
  inline QueryDenomsFromAdminResponse(QueryDenomsFromAdminResponse&& from) noexcept
      : QueryDenomsFromAdminResponse(nullptr, std::move(from)) {}
  inline QueryDenomsFromAdminResponse& operator=(const QueryDenomsFromAdminResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDenomsFromAdminResponse& operator=(QueryDenomsFromAdminResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDenomsFromAdminResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDenomsFromAdminResponse* internal_default_instance() {
    return reinterpret_cast<const QueryDenomsFromAdminResponse*>(
        &_QueryDenomsFromAdminResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(QueryDenomsFromAdminResponse& a, QueryDenomsFromAdminResponse& b) { a.Swap(&b); }
  inline void Swap(QueryDenomsFromAdminResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDenomsFromAdminResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryDenomsFromAdminResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QueryDenomsFromAdminResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryDenomsFromAdminResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueryDenomsFromAdminResponse& from) { QueryDenomsFromAdminResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QueryDenomsFromAdminResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "osmosis.tokenfactory.v1beta1.QueryDenomsFromAdminResponse"; }

 protected:
  explicit QueryDenomsFromAdminResponse(::google::protobuf::Arena* arena);
  QueryDenomsFromAdminResponse(::google::protobuf::Arena* arena, const QueryDenomsFromAdminResponse& from);
  QueryDenomsFromAdminResponse(::google::protobuf::Arena* arena, QueryDenomsFromAdminResponse&& from) noexcept
      : QueryDenomsFromAdminResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDenomsFieldNumber = 1,
  };
  // repeated string denoms = 1 [json_name = "denoms", (.gogoproto.moretags) = "yaml:\"denoms\""];
  int denoms_size() const;
  private:
  int _internal_denoms_size() const;

  public:
  void clear_denoms() ;
  const std::string& denoms(int index) const;
  std::string* mutable_denoms(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_denoms(int index, Arg_&& value, Args_... args);
  std::string* add_denoms();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_denoms(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& denoms() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_denoms();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_denoms() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_denoms();

  public:
  // @@protoc_insertion_point(class_scope:osmosis.tokenfactory.v1beta1.QueryDenomsFromAdminResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      72, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QueryDenomsFromAdminResponse& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> denoms_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osmosis_2ftokenfactory_2fv1beta1_2fquery_2eproto;
};
// -------------------------------------------------------------------

class QueryDenomsFromAdminRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:osmosis.tokenfactory.v1beta1.QueryDenomsFromAdminRequest) */ {
 public:
  inline QueryDenomsFromAdminRequest() : QueryDenomsFromAdminRequest(nullptr) {}
  ~QueryDenomsFromAdminRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QueryDenomsFromAdminRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QueryDenomsFromAdminRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueryDenomsFromAdminRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueryDenomsFromAdminRequest(const QueryDenomsFromAdminRequest& from) : QueryDenomsFromAdminRequest(nullptr, from) {}
  inline QueryDenomsFromAdminRequest(QueryDenomsFromAdminRequest&& from) noexcept
      : QueryDenomsFromAdminRequest(nullptr, std::move(from)) {}
  inline QueryDenomsFromAdminRequest& operator=(const QueryDenomsFromAdminRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDenomsFromAdminRequest& operator=(QueryDenomsFromAdminRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDenomsFromAdminRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDenomsFromAdminRequest* internal_default_instance() {
    return reinterpret_cast<const QueryDenomsFromAdminRequest*>(
        &_QueryDenomsFromAdminRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(QueryDenomsFromAdminRequest& a, QueryDenomsFromAdminRequest& b) { a.Swap(&b); }
  inline void Swap(QueryDenomsFromAdminRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDenomsFromAdminRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryDenomsFromAdminRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QueryDenomsFromAdminRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryDenomsFromAdminRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueryDenomsFromAdminRequest& from) { QueryDenomsFromAdminRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QueryDenomsFromAdminRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "osmosis.tokenfactory.v1beta1.QueryDenomsFromAdminRequest"; }

 protected:
  explicit QueryDenomsFromAdminRequest(::google::protobuf::Arena* arena);
  QueryDenomsFromAdminRequest(::google::protobuf::Arena* arena, const QueryDenomsFromAdminRequest& from);
  QueryDenomsFromAdminRequest(::google::protobuf::Arena* arena, QueryDenomsFromAdminRequest&& from) noexcept
      : QueryDenomsFromAdminRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAdminFieldNumber = 1,
  };
  // string admin = 1 [json_name = "admin", (.gogoproto.moretags) = "yaml:\"admin\""];
  void clear_admin() ;
  const std::string& admin() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_admin(Arg_&& arg, Args_... args);
  std::string* mutable_admin();
  PROTOBUF_NODISCARD std::string* release_admin();
  void set_allocated_admin(std::string* value);

  private:
  const std::string& _internal_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin(
      const std::string& value);
  std::string* _internal_mutable_admin();

  public:
  // @@protoc_insertion_point(class_scope:osmosis.tokenfactory.v1beta1.QueryDenomsFromAdminRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      70, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QueryDenomsFromAdminRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr admin_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osmosis_2ftokenfactory_2fv1beta1_2fquery_2eproto;
};
// -------------------------------------------------------------------

class QueryDenomAuthorityMetadataRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest) */ {
 public:
  inline QueryDenomAuthorityMetadataRequest() : QueryDenomAuthorityMetadataRequest(nullptr) {}
  ~QueryDenomAuthorityMetadataRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QueryDenomAuthorityMetadataRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QueryDenomAuthorityMetadataRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueryDenomAuthorityMetadataRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueryDenomAuthorityMetadataRequest(const QueryDenomAuthorityMetadataRequest& from) : QueryDenomAuthorityMetadataRequest(nullptr, from) {}
  inline QueryDenomAuthorityMetadataRequest(QueryDenomAuthorityMetadataRequest&& from) noexcept
      : QueryDenomAuthorityMetadataRequest(nullptr, std::move(from)) {}
  inline QueryDenomAuthorityMetadataRequest& operator=(const QueryDenomAuthorityMetadataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDenomAuthorityMetadataRequest& operator=(QueryDenomAuthorityMetadataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDenomAuthorityMetadataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDenomAuthorityMetadataRequest* internal_default_instance() {
    return reinterpret_cast<const QueryDenomAuthorityMetadataRequest*>(
        &_QueryDenomAuthorityMetadataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(QueryDenomAuthorityMetadataRequest& a, QueryDenomAuthorityMetadataRequest& b) { a.Swap(&b); }
  inline void Swap(QueryDenomAuthorityMetadataRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDenomAuthorityMetadataRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryDenomAuthorityMetadataRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QueryDenomAuthorityMetadataRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryDenomAuthorityMetadataRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueryDenomAuthorityMetadataRequest& from) { QueryDenomAuthorityMetadataRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QueryDenomAuthorityMetadataRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest"; }

 protected:
  explicit QueryDenomAuthorityMetadataRequest(::google::protobuf::Arena* arena);
  QueryDenomAuthorityMetadataRequest(::google::protobuf::Arena* arena, const QueryDenomAuthorityMetadataRequest& from);
  QueryDenomAuthorityMetadataRequest(::google::protobuf::Arena* arena, QueryDenomAuthorityMetadataRequest&& from) noexcept
      : QueryDenomAuthorityMetadataRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDenomFieldNumber = 1,
  };
  // string denom = 1 [json_name = "denom", (.gogoproto.moretags) = "yaml:\"denom\""];
  void clear_denom() ;
  const std::string& denom() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_denom(Arg_&& arg, Args_... args);
  std::string* mutable_denom();
  PROTOBUF_NODISCARD std::string* release_denom();
  void set_allocated_denom(std::string* value);

  private:
  const std::string& _internal_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_denom(
      const std::string& value);
  std::string* _internal_mutable_denom();

  public:
  // @@protoc_insertion_point(class_scope:osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      77, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QueryDenomAuthorityMetadataRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr denom_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osmosis_2ftokenfactory_2fv1beta1_2fquery_2eproto;
};
// -------------------------------------------------------------------

class QueryDenomAuthorityMetadataResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse) */ {
 public:
  inline QueryDenomAuthorityMetadataResponse() : QueryDenomAuthorityMetadataResponse(nullptr) {}
  ~QueryDenomAuthorityMetadataResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QueryDenomAuthorityMetadataResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QueryDenomAuthorityMetadataResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueryDenomAuthorityMetadataResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueryDenomAuthorityMetadataResponse(const QueryDenomAuthorityMetadataResponse& from) : QueryDenomAuthorityMetadataResponse(nullptr, from) {}
  inline QueryDenomAuthorityMetadataResponse(QueryDenomAuthorityMetadataResponse&& from) noexcept
      : QueryDenomAuthorityMetadataResponse(nullptr, std::move(from)) {}
  inline QueryDenomAuthorityMetadataResponse& operator=(const QueryDenomAuthorityMetadataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDenomAuthorityMetadataResponse& operator=(QueryDenomAuthorityMetadataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDenomAuthorityMetadataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDenomAuthorityMetadataResponse* internal_default_instance() {
    return reinterpret_cast<const QueryDenomAuthorityMetadataResponse*>(
        &_QueryDenomAuthorityMetadataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(QueryDenomAuthorityMetadataResponse& a, QueryDenomAuthorityMetadataResponse& b) { a.Swap(&b); }
  inline void Swap(QueryDenomAuthorityMetadataResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDenomAuthorityMetadataResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryDenomAuthorityMetadataResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QueryDenomAuthorityMetadataResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryDenomAuthorityMetadataResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueryDenomAuthorityMetadataResponse& from) { QueryDenomAuthorityMetadataResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QueryDenomAuthorityMetadataResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse"; }

 protected:
  explicit QueryDenomAuthorityMetadataResponse(::google::protobuf::Arena* arena);
  QueryDenomAuthorityMetadataResponse(::google::protobuf::Arena* arena, const QueryDenomAuthorityMetadataResponse& from);
  QueryDenomAuthorityMetadataResponse(::google::protobuf::Arena* arena, QueryDenomAuthorityMetadataResponse&& from) noexcept
      : QueryDenomAuthorityMetadataResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAuthorityMetadataFieldNumber = 1,
  };
  // .osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata authority_metadata = 1 [json_name = "authorityMetadata", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"authority_metadata\""];
  bool has_authority_metadata() const;
  void clear_authority_metadata() ;
  const ::osmosis::tokenfactory::v1beta1::DenomAuthorityMetadata& authority_metadata() const;
  PROTOBUF_NODISCARD ::osmosis::tokenfactory::v1beta1::DenomAuthorityMetadata* release_authority_metadata();
  ::osmosis::tokenfactory::v1beta1::DenomAuthorityMetadata* mutable_authority_metadata();
  void set_allocated_authority_metadata(::osmosis::tokenfactory::v1beta1::DenomAuthorityMetadata* value);
  void unsafe_arena_set_allocated_authority_metadata(::osmosis::tokenfactory::v1beta1::DenomAuthorityMetadata* value);
  ::osmosis::tokenfactory::v1beta1::DenomAuthorityMetadata* unsafe_arena_release_authority_metadata();

  private:
  const ::osmosis::tokenfactory::v1beta1::DenomAuthorityMetadata& _internal_authority_metadata() const;
  ::osmosis::tokenfactory::v1beta1::DenomAuthorityMetadata* _internal_mutable_authority_metadata();

  public:
  // @@protoc_insertion_point(class_scope:osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QueryDenomAuthorityMetadataResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::osmosis::tokenfactory::v1beta1::DenomAuthorityMetadata* authority_metadata_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osmosis_2ftokenfactory_2fv1beta1_2fquery_2eproto;
};
// -------------------------------------------------------------------

class QueryParamsResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:osmosis.tokenfactory.v1beta1.QueryParamsResponse) */ {
 public:
  inline QueryParamsResponse() : QueryParamsResponse(nullptr) {}
  ~QueryParamsResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QueryParamsResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QueryParamsResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueryParamsResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueryParamsResponse(const QueryParamsResponse& from) : QueryParamsResponse(nullptr, from) {}
  inline QueryParamsResponse(QueryParamsResponse&& from) noexcept
      : QueryParamsResponse(nullptr, std::move(from)) {}
  inline QueryParamsResponse& operator=(const QueryParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryParamsResponse& operator=(QueryParamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryParamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryParamsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryParamsResponse*>(
        &_QueryParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(QueryParamsResponse& a, QueryParamsResponse& b) { a.Swap(&b); }
  inline void Swap(QueryParamsResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryParamsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryParamsResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QueryParamsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryParamsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueryParamsResponse& from) { QueryParamsResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QueryParamsResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "osmosis.tokenfactory.v1beta1.QueryParamsResponse"; }

 protected:
  explicit QueryParamsResponse(::google::protobuf::Arena* arena);
  QueryParamsResponse(::google::protobuf::Arena* arena, const QueryParamsResponse& from);
  QueryParamsResponse(::google::protobuf::Arena* arena, QueryParamsResponse&& from) noexcept
      : QueryParamsResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kParamsFieldNumber = 1,
  };
  // .osmosis.tokenfactory.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
  bool has_params() const;
  void clear_params() ;
  const ::osmosis::tokenfactory::v1beta1::Params& params() const;
  PROTOBUF_NODISCARD ::osmosis::tokenfactory::v1beta1::Params* release_params();
  ::osmosis::tokenfactory::v1beta1::Params* mutable_params();
  void set_allocated_params(::osmosis::tokenfactory::v1beta1::Params* value);
  void unsafe_arena_set_allocated_params(::osmosis::tokenfactory::v1beta1::Params* value);
  ::osmosis::tokenfactory::v1beta1::Params* unsafe_arena_release_params();

  private:
  const ::osmosis::tokenfactory::v1beta1::Params& _internal_params() const;
  ::osmosis::tokenfactory::v1beta1::Params* _internal_mutable_params();

  public:
  // @@protoc_insertion_point(class_scope:osmosis.tokenfactory.v1beta1.QueryParamsResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QueryParamsResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::osmosis::tokenfactory::v1beta1::Params* params_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osmosis_2ftokenfactory_2fv1beta1_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryParamsRequest

// -------------------------------------------------------------------

// QueryParamsResponse

// .osmosis.tokenfactory.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
inline bool QueryParamsResponse::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::osmosis::tokenfactory::v1beta1::Params& QueryParamsResponse::_internal_params() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::osmosis::tokenfactory::v1beta1::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::osmosis::tokenfactory::v1beta1::Params&>(::osmosis::tokenfactory::v1beta1::_Params_default_instance_);
}
inline const ::osmosis::tokenfactory::v1beta1::Params& QueryParamsResponse::params() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:osmosis.tokenfactory.v1beta1.QueryParamsResponse.params)
  return _internal_params();
}
inline void QueryParamsResponse::unsafe_arena_set_allocated_params(::osmosis::tokenfactory::v1beta1::Params* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = reinterpret_cast<::osmosis::tokenfactory::v1beta1::Params*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osmosis.tokenfactory.v1beta1.QueryParamsResponse.params)
}
inline ::osmosis::tokenfactory::v1beta1::Params* QueryParamsResponse::release_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osmosis::tokenfactory::v1beta1::Params* released = _impl_.params_;
  _impl_.params_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::osmosis::tokenfactory::v1beta1::Params* QueryParamsResponse::unsafe_arena_release_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:osmosis.tokenfactory.v1beta1.QueryParamsResponse.params)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osmosis::tokenfactory::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::osmosis::tokenfactory::v1beta1::Params* QueryParamsResponse::_internal_mutable_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.params_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::osmosis::tokenfactory::v1beta1::Params>(GetArena());
    _impl_.params_ = reinterpret_cast<::osmosis::tokenfactory::v1beta1::Params*>(p);
  }
  return _impl_.params_;
}
inline ::osmosis::tokenfactory::v1beta1::Params* QueryParamsResponse::mutable_params() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::osmosis::tokenfactory::v1beta1::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:osmosis.tokenfactory.v1beta1.QueryParamsResponse.params)
  return _msg;
}
inline void QueryParamsResponse::set_allocated_params(::osmosis::tokenfactory::v1beta1::Params* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.params_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.params_ = reinterpret_cast<::osmosis::tokenfactory::v1beta1::Params*>(value);
  // @@protoc_insertion_point(field_set_allocated:osmosis.tokenfactory.v1beta1.QueryParamsResponse.params)
}

// -------------------------------------------------------------------

// QueryDenomAuthorityMetadataRequest

// string denom = 1 [json_name = "denom", (.gogoproto.moretags) = "yaml:\"denom\""];
inline void QueryDenomAuthorityMetadataRequest::clear_denom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.denom_.ClearToEmpty();
}
inline const std::string& QueryDenomAuthorityMetadataRequest::denom() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest.denom)
  return _internal_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryDenomAuthorityMetadataRequest::set_denom(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.denom_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest.denom)
}
inline std::string* QueryDenomAuthorityMetadataRequest::mutable_denom() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_denom();
  // @@protoc_insertion_point(field_mutable:osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest.denom)
  return _s;
}
inline const std::string& QueryDenomAuthorityMetadataRequest::_internal_denom() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.denom_.Get();
}
inline void QueryDenomAuthorityMetadataRequest::_internal_set_denom(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.denom_.Set(value, GetArena());
}
inline std::string* QueryDenomAuthorityMetadataRequest::_internal_mutable_denom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.denom_.Mutable( GetArena());
}
inline std::string* QueryDenomAuthorityMetadataRequest::release_denom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest.denom)
  return _impl_.denom_.Release();
}
inline void QueryDenomAuthorityMetadataRequest::set_allocated_denom(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.denom_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.denom_.IsDefault()) {
    _impl_.denom_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest.denom)
}

// -------------------------------------------------------------------

// QueryDenomAuthorityMetadataResponse

// .osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata authority_metadata = 1 [json_name = "authorityMetadata", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"authority_metadata\""];
inline bool QueryDenomAuthorityMetadataResponse::has_authority_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.authority_metadata_ != nullptr);
  return value;
}
inline const ::osmosis::tokenfactory::v1beta1::DenomAuthorityMetadata& QueryDenomAuthorityMetadataResponse::_internal_authority_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::osmosis::tokenfactory::v1beta1::DenomAuthorityMetadata* p = _impl_.authority_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::osmosis::tokenfactory::v1beta1::DenomAuthorityMetadata&>(::osmosis::tokenfactory::v1beta1::_DenomAuthorityMetadata_default_instance_);
}
inline const ::osmosis::tokenfactory::v1beta1::DenomAuthorityMetadata& QueryDenomAuthorityMetadataResponse::authority_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse.authority_metadata)
  return _internal_authority_metadata();
}
inline void QueryDenomAuthorityMetadataResponse::unsafe_arena_set_allocated_authority_metadata(::osmosis::tokenfactory::v1beta1::DenomAuthorityMetadata* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.authority_metadata_);
  }
  _impl_.authority_metadata_ = reinterpret_cast<::osmosis::tokenfactory::v1beta1::DenomAuthorityMetadata*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse.authority_metadata)
}
inline ::osmosis::tokenfactory::v1beta1::DenomAuthorityMetadata* QueryDenomAuthorityMetadataResponse::release_authority_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osmosis::tokenfactory::v1beta1::DenomAuthorityMetadata* released = _impl_.authority_metadata_;
  _impl_.authority_metadata_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::osmosis::tokenfactory::v1beta1::DenomAuthorityMetadata* QueryDenomAuthorityMetadataResponse::unsafe_arena_release_authority_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse.authority_metadata)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osmosis::tokenfactory::v1beta1::DenomAuthorityMetadata* temp = _impl_.authority_metadata_;
  _impl_.authority_metadata_ = nullptr;
  return temp;
}
inline ::osmosis::tokenfactory::v1beta1::DenomAuthorityMetadata* QueryDenomAuthorityMetadataResponse::_internal_mutable_authority_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.authority_metadata_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::osmosis::tokenfactory::v1beta1::DenomAuthorityMetadata>(GetArena());
    _impl_.authority_metadata_ = reinterpret_cast<::osmosis::tokenfactory::v1beta1::DenomAuthorityMetadata*>(p);
  }
  return _impl_.authority_metadata_;
}
inline ::osmosis::tokenfactory::v1beta1::DenomAuthorityMetadata* QueryDenomAuthorityMetadataResponse::mutable_authority_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::osmosis::tokenfactory::v1beta1::DenomAuthorityMetadata* _msg = _internal_mutable_authority_metadata();
  // @@protoc_insertion_point(field_mutable:osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse.authority_metadata)
  return _msg;
}
inline void QueryDenomAuthorityMetadataResponse::set_allocated_authority_metadata(::osmosis::tokenfactory::v1beta1::DenomAuthorityMetadata* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.authority_metadata_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.authority_metadata_ = reinterpret_cast<::osmosis::tokenfactory::v1beta1::DenomAuthorityMetadata*>(value);
  // @@protoc_insertion_point(field_set_allocated:osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse.authority_metadata)
}

// -------------------------------------------------------------------

// QueryDenomsFromCreatorRequest

// string creator = 1 [json_name = "creator", (.gogoproto.moretags) = "yaml:\"creator\""];
inline void QueryDenomsFromCreatorRequest::clear_creator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creator_.ClearToEmpty();
}
inline const std::string& QueryDenomsFromCreatorRequest::creator() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest.creator)
  return _internal_creator();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryDenomsFromCreatorRequest::set_creator(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creator_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest.creator)
}
inline std::string* QueryDenomsFromCreatorRequest::mutable_creator() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_creator();
  // @@protoc_insertion_point(field_mutable:osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest.creator)
  return _s;
}
inline const std::string& QueryDenomsFromCreatorRequest::_internal_creator() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.creator_.Get();
}
inline void QueryDenomsFromCreatorRequest::_internal_set_creator(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creator_.Set(value, GetArena());
}
inline std::string* QueryDenomsFromCreatorRequest::_internal_mutable_creator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.creator_.Mutable( GetArena());
}
inline std::string* QueryDenomsFromCreatorRequest::release_creator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest.creator)
  return _impl_.creator_.Release();
}
inline void QueryDenomsFromCreatorRequest::set_allocated_creator(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creator_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.creator_.IsDefault()) {
    _impl_.creator_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest.creator)
}

// -------------------------------------------------------------------

// QueryDenomsFromCreatorResponse

// repeated string denoms = 1 [json_name = "denoms", (.gogoproto.moretags) = "yaml:\"denoms\""];
inline int QueryDenomsFromCreatorResponse::_internal_denoms_size() const {
  return _internal_denoms().size();
}
inline int QueryDenomsFromCreatorResponse::denoms_size() const {
  return _internal_denoms_size();
}
inline void QueryDenomsFromCreatorResponse::clear_denoms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.denoms_.Clear();
}
inline std::string* QueryDenomsFromCreatorResponse::add_denoms() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_denoms()->Add();
  // @@protoc_insertion_point(field_add_mutable:osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse.denoms)
  return _s;
}
inline const std::string& QueryDenomsFromCreatorResponse::denoms(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse.denoms)
  return _internal_denoms().Get(index);
}
inline std::string* QueryDenomsFromCreatorResponse::mutable_denoms(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse.denoms)
  return _internal_mutable_denoms()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void QueryDenomsFromCreatorResponse::set_denoms(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_denoms()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse.denoms)
}
template <typename Arg_, typename... Args_>
inline void QueryDenomsFromCreatorResponse::add_denoms(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_denoms(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse.denoms)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
QueryDenomsFromCreatorResponse::denoms() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse.denoms)
  return _internal_denoms();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
QueryDenomsFromCreatorResponse::mutable_denoms() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse.denoms)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_denoms();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
QueryDenomsFromCreatorResponse::_internal_denoms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.denoms_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
QueryDenomsFromCreatorResponse::_internal_mutable_denoms() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.denoms_;
}

// -------------------------------------------------------------------

// QueryDenomsFromAdminRequest

// string admin = 1 [json_name = "admin", (.gogoproto.moretags) = "yaml:\"admin\""];
inline void QueryDenomsFromAdminRequest::clear_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.ClearToEmpty();
}
inline const std::string& QueryDenomsFromAdminRequest::admin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:osmosis.tokenfactory.v1beta1.QueryDenomsFromAdminRequest.admin)
  return _internal_admin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryDenomsFromAdminRequest::set_admin(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:osmosis.tokenfactory.v1beta1.QueryDenomsFromAdminRequest.admin)
}
inline std::string* QueryDenomsFromAdminRequest::mutable_admin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_admin();
  // @@protoc_insertion_point(field_mutable:osmosis.tokenfactory.v1beta1.QueryDenomsFromAdminRequest.admin)
  return _s;
}
inline const std::string& QueryDenomsFromAdminRequest::_internal_admin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.admin_.Get();
}
inline void QueryDenomsFromAdminRequest::_internal_set_admin(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.Set(value, GetArena());
}
inline std::string* QueryDenomsFromAdminRequest::_internal_mutable_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.admin_.Mutable( GetArena());
}
inline std::string* QueryDenomsFromAdminRequest::release_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:osmosis.tokenfactory.v1beta1.QueryDenomsFromAdminRequest.admin)
  return _impl_.admin_.Release();
}
inline void QueryDenomsFromAdminRequest::set_allocated_admin(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.admin_.IsDefault()) {
    _impl_.admin_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:osmosis.tokenfactory.v1beta1.QueryDenomsFromAdminRequest.admin)
}

// -------------------------------------------------------------------

// QueryDenomsFromAdminResponse

// repeated string denoms = 1 [json_name = "denoms", (.gogoproto.moretags) = "yaml:\"denoms\""];
inline int QueryDenomsFromAdminResponse::_internal_denoms_size() const {
  return _internal_denoms().size();
}
inline int QueryDenomsFromAdminResponse::denoms_size() const {
  return _internal_denoms_size();
}
inline void QueryDenomsFromAdminResponse::clear_denoms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.denoms_.Clear();
}
inline std::string* QueryDenomsFromAdminResponse::add_denoms() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_denoms()->Add();
  // @@protoc_insertion_point(field_add_mutable:osmosis.tokenfactory.v1beta1.QueryDenomsFromAdminResponse.denoms)
  return _s;
}
inline const std::string& QueryDenomsFromAdminResponse::denoms(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:osmosis.tokenfactory.v1beta1.QueryDenomsFromAdminResponse.denoms)
  return _internal_denoms().Get(index);
}
inline std::string* QueryDenomsFromAdminResponse::mutable_denoms(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:osmosis.tokenfactory.v1beta1.QueryDenomsFromAdminResponse.denoms)
  return _internal_mutable_denoms()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void QueryDenomsFromAdminResponse::set_denoms(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_denoms()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:osmosis.tokenfactory.v1beta1.QueryDenomsFromAdminResponse.denoms)
}
template <typename Arg_, typename... Args_>
inline void QueryDenomsFromAdminResponse::add_denoms(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_denoms(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:osmosis.tokenfactory.v1beta1.QueryDenomsFromAdminResponse.denoms)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
QueryDenomsFromAdminResponse::denoms() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:osmosis.tokenfactory.v1beta1.QueryDenomsFromAdminResponse.denoms)
  return _internal_denoms();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
QueryDenomsFromAdminResponse::mutable_denoms() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:osmosis.tokenfactory.v1beta1.QueryDenomsFromAdminResponse.denoms)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_denoms();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
QueryDenomsFromAdminResponse::_internal_denoms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.denoms_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
QueryDenomsFromAdminResponse::_internal_mutable_denoms() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.denoms_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace tokenfactory
}  // namespace osmosis


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // osmosis_2ftokenfactory_2fv1beta1_2fquery_2eproto_2epb_2eh
