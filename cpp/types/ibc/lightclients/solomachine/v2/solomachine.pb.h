// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ibc/lightclients/solomachine/v2/solomachine.proto
// Protobuf C++ Version: 5.29.4

#ifndef ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_2epb_2eh
#define ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "ibc/core/connection/v1/connection.pb.h"
#include "ibc/core/channel/v1/channel.pb.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/any.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto;
namespace ibc {
namespace lightclients {
namespace solomachine {
namespace v2 {
class ChannelStateData;
struct ChannelStateDataDefaultTypeInternal;
extern ChannelStateDataDefaultTypeInternal _ChannelStateData_default_instance_;
class ClientState;
struct ClientStateDefaultTypeInternal;
extern ClientStateDefaultTypeInternal _ClientState_default_instance_;
class ClientStateData;
struct ClientStateDataDefaultTypeInternal;
extern ClientStateDataDefaultTypeInternal _ClientStateData_default_instance_;
class ConnectionStateData;
struct ConnectionStateDataDefaultTypeInternal;
extern ConnectionStateDataDefaultTypeInternal _ConnectionStateData_default_instance_;
class ConsensusState;
struct ConsensusStateDefaultTypeInternal;
extern ConsensusStateDefaultTypeInternal _ConsensusState_default_instance_;
class ConsensusStateData;
struct ConsensusStateDataDefaultTypeInternal;
extern ConsensusStateDataDefaultTypeInternal _ConsensusStateData_default_instance_;
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class HeaderData;
struct HeaderDataDefaultTypeInternal;
extern HeaderDataDefaultTypeInternal _HeaderData_default_instance_;
class Misbehaviour;
struct MisbehaviourDefaultTypeInternal;
extern MisbehaviourDefaultTypeInternal _Misbehaviour_default_instance_;
class NextSequenceRecvData;
struct NextSequenceRecvDataDefaultTypeInternal;
extern NextSequenceRecvDataDefaultTypeInternal _NextSequenceRecvData_default_instance_;
class PacketAcknowledgementData;
struct PacketAcknowledgementDataDefaultTypeInternal;
extern PacketAcknowledgementDataDefaultTypeInternal _PacketAcknowledgementData_default_instance_;
class PacketCommitmentData;
struct PacketCommitmentDataDefaultTypeInternal;
extern PacketCommitmentDataDefaultTypeInternal _PacketCommitmentData_default_instance_;
class PacketReceiptAbsenceData;
struct PacketReceiptAbsenceDataDefaultTypeInternal;
extern PacketReceiptAbsenceDataDefaultTypeInternal _PacketReceiptAbsenceData_default_instance_;
class SignBytes;
struct SignBytesDefaultTypeInternal;
extern SignBytesDefaultTypeInternal _SignBytes_default_instance_;
class SignatureAndData;
struct SignatureAndDataDefaultTypeInternal;
extern SignatureAndDataDefaultTypeInternal _SignatureAndData_default_instance_;
class TimestampedSignatureData;
struct TimestampedSignatureDataDefaultTypeInternal;
extern TimestampedSignatureDataDefaultTypeInternal _TimestampedSignatureData_default_instance_;
}  // namespace v2
}  // namespace solomachine
}  // namespace lightclients
}  // namespace ibc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ibc {
namespace lightclients {
namespace solomachine {
namespace v2 {
enum DataType : int {
  DATA_TYPE_UNINITIALIZED_UNSPECIFIED = 0,
  DATA_TYPE_CLIENT_STATE = 1,
  DATA_TYPE_CONSENSUS_STATE = 2,
  DATA_TYPE_CONNECTION_STATE = 3,
  DATA_TYPE_CHANNEL_STATE = 4,
  DATA_TYPE_PACKET_COMMITMENT = 5,
  DATA_TYPE_PACKET_ACKNOWLEDGEMENT = 6,
  DATA_TYPE_PACKET_RECEIPT_ABSENCE = 7,
  DATA_TYPE_NEXT_SEQUENCE_RECV = 8,
  DATA_TYPE_HEADER = 9,
  DataType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DataType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool DataType_IsValid(int value);
extern const uint32_t DataType_internal_data_[];
constexpr DataType DataType_MIN = static_cast<DataType>(0);
constexpr DataType DataType_MAX = static_cast<DataType>(9);
constexpr int DataType_ARRAYSIZE = 9 + 1;
const ::google::protobuf::EnumDescriptor*
DataType_descriptor();
template <typename T>
const std::string& DataType_Name(T value) {
  static_assert(std::is_same<T, DataType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DataType_Name().");
  return DataType_Name(static_cast<DataType>(value));
}
template <>
inline const std::string& DataType_Name(DataType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<DataType_descriptor,
                                                 0, 9>(
      static_cast<int>(value));
}
inline bool DataType_Parse(absl::string_view name, DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataType>(
      DataType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TimestampedSignatureData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.lightclients.solomachine.v2.TimestampedSignatureData) */ {
 public:
  inline TimestampedSignatureData() : TimestampedSignatureData(nullptr) {}
  ~TimestampedSignatureData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TimestampedSignatureData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TimestampedSignatureData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TimestampedSignatureData(
      ::google::protobuf::internal::ConstantInitialized);

  inline TimestampedSignatureData(const TimestampedSignatureData& from) : TimestampedSignatureData(nullptr, from) {}
  inline TimestampedSignatureData(TimestampedSignatureData&& from) noexcept
      : TimestampedSignatureData(nullptr, std::move(from)) {}
  inline TimestampedSignatureData& operator=(const TimestampedSignatureData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimestampedSignatureData& operator=(TimestampedSignatureData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimestampedSignatureData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimestampedSignatureData* internal_default_instance() {
    return reinterpret_cast<const TimestampedSignatureData*>(
        &_TimestampedSignatureData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(TimestampedSignatureData& a, TimestampedSignatureData& b) { a.Swap(&b); }
  inline void Swap(TimestampedSignatureData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimestampedSignatureData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimestampedSignatureData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TimestampedSignatureData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TimestampedSignatureData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TimestampedSignatureData& from) { TimestampedSignatureData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TimestampedSignatureData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.lightclients.solomachine.v2.TimestampedSignatureData"; }

 protected:
  explicit TimestampedSignatureData(::google::protobuf::Arena* arena);
  TimestampedSignatureData(::google::protobuf::Arena* arena, const TimestampedSignatureData& from);
  TimestampedSignatureData(::google::protobuf::Arena* arena, TimestampedSignatureData&& from) noexcept
      : TimestampedSignatureData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSignatureDataFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // bytes signature_data = 1 [json_name = "signatureData"];
  void clear_signature_data() ;
  const std::string& signature_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signature_data(Arg_&& arg, Args_... args);
  std::string* mutable_signature_data();
  PROTOBUF_NODISCARD std::string* release_signature_data();
  void set_allocated_signature_data(std::string* value);

  private:
  const std::string& _internal_signature_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature_data(
      const std::string& value);
  std::string* _internal_mutable_signature_data();

  public:
  // uint64 timestamp = 2 [json_name = "timestamp"];
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.lightclients.solomachine.v2.TimestampedSignatureData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TimestampedSignatureData& from_msg);
    ::google::protobuf::internal::ArenaStringPtr signature_data_;
    ::uint64_t timestamp_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto;
};
// -------------------------------------------------------------------

class SignatureAndData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.lightclients.solomachine.v2.SignatureAndData) */ {
 public:
  inline SignatureAndData() : SignatureAndData(nullptr) {}
  ~SignatureAndData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SignatureAndData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SignatureAndData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SignatureAndData(
      ::google::protobuf::internal::ConstantInitialized);

  inline SignatureAndData(const SignatureAndData& from) : SignatureAndData(nullptr, from) {}
  inline SignatureAndData(SignatureAndData&& from) noexcept
      : SignatureAndData(nullptr, std::move(from)) {}
  inline SignatureAndData& operator=(const SignatureAndData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignatureAndData& operator=(SignatureAndData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignatureAndData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignatureAndData* internal_default_instance() {
    return reinterpret_cast<const SignatureAndData*>(
        &_SignatureAndData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(SignatureAndData& a, SignatureAndData& b) { a.Swap(&b); }
  inline void Swap(SignatureAndData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignatureAndData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignatureAndData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SignatureAndData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SignatureAndData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SignatureAndData& from) { SignatureAndData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SignatureAndData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.lightclients.solomachine.v2.SignatureAndData"; }

 protected:
  explicit SignatureAndData(::google::protobuf::Arena* arena);
  SignatureAndData(::google::protobuf::Arena* arena, const SignatureAndData& from);
  SignatureAndData(::google::protobuf::Arena* arena, SignatureAndData&& from) noexcept
      : SignatureAndData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSignatureFieldNumber = 1,
    kDataFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kDataTypeFieldNumber = 2,
  };
  // bytes signature = 1 [json_name = "signature"];
  void clear_signature() ;
  const std::string& signature() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signature(Arg_&& arg, Args_... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* value);

  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(
      const std::string& value);
  std::string* _internal_mutable_signature();

  public:
  // bytes data = 3 [json_name = "data"];
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // uint64 timestamp = 4 [json_name = "timestamp"];
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // .ibc.lightclients.solomachine.v2.DataType data_type = 2 [json_name = "dataType"];
  void clear_data_type() ;
  ::ibc::lightclients::solomachine::v2::DataType data_type() const;
  void set_data_type(::ibc::lightclients::solomachine::v2::DataType value);

  private:
  ::ibc::lightclients::solomachine::v2::DataType _internal_data_type() const;
  void _internal_set_data_type(::ibc::lightclients::solomachine::v2::DataType value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.lightclients.solomachine.v2.SignatureAndData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SignatureAndData& from_msg);
    ::google::protobuf::internal::ArenaStringPtr signature_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::uint64_t timestamp_;
    int data_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto;
};
// -------------------------------------------------------------------

class SignBytes final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.lightclients.solomachine.v2.SignBytes) */ {
 public:
  inline SignBytes() : SignBytes(nullptr) {}
  ~SignBytes() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SignBytes* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SignBytes));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SignBytes(
      ::google::protobuf::internal::ConstantInitialized);

  inline SignBytes(const SignBytes& from) : SignBytes(nullptr, from) {}
  inline SignBytes(SignBytes&& from) noexcept
      : SignBytes(nullptr, std::move(from)) {}
  inline SignBytes& operator=(const SignBytes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignBytes& operator=(SignBytes&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignBytes& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignBytes* internal_default_instance() {
    return reinterpret_cast<const SignBytes*>(
        &_SignBytes_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(SignBytes& a, SignBytes& b) { a.Swap(&b); }
  inline void Swap(SignBytes* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignBytes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignBytes* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SignBytes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SignBytes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SignBytes& from) { SignBytes::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SignBytes* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.lightclients.solomachine.v2.SignBytes"; }

 protected:
  explicit SignBytes(::google::protobuf::Arena* arena);
  SignBytes(::google::protobuf::Arena* arena, const SignBytes& from);
  SignBytes(::google::protobuf::Arena* arena, SignBytes&& from) noexcept
      : SignBytes(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDiversifierFieldNumber = 3,
    kDataFieldNumber = 5,
    kSequenceFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kDataTypeFieldNumber = 4,
  };
  // string diversifier = 3 [json_name = "diversifier"];
  void clear_diversifier() ;
  const std::string& diversifier() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_diversifier(Arg_&& arg, Args_... args);
  std::string* mutable_diversifier();
  PROTOBUF_NODISCARD std::string* release_diversifier();
  void set_allocated_diversifier(std::string* value);

  private:
  const std::string& _internal_diversifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_diversifier(
      const std::string& value);
  std::string* _internal_mutable_diversifier();

  public:
  // bytes data = 5 [json_name = "data"];
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // uint64 sequence = 1 [json_name = "sequence"];
  void clear_sequence() ;
  ::uint64_t sequence() const;
  void set_sequence(::uint64_t value);

  private:
  ::uint64_t _internal_sequence() const;
  void _internal_set_sequence(::uint64_t value);

  public:
  // uint64 timestamp = 2 [json_name = "timestamp"];
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // .ibc.lightclients.solomachine.v2.DataType data_type = 4 [json_name = "dataType"];
  void clear_data_type() ;
  ::ibc::lightclients::solomachine::v2::DataType data_type() const;
  void set_data_type(::ibc::lightclients::solomachine::v2::DataType value);

  private:
  ::ibc::lightclients::solomachine::v2::DataType _internal_data_type() const;
  void _internal_set_data_type(::ibc::lightclients::solomachine::v2::DataType value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.lightclients.solomachine.v2.SignBytes)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      61, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SignBytes& from_msg);
    ::google::protobuf::internal::ArenaStringPtr diversifier_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::uint64_t sequence_;
    ::uint64_t timestamp_;
    int data_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto;
};
// -------------------------------------------------------------------

class PacketReceiptAbsenceData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData) */ {
 public:
  inline PacketReceiptAbsenceData() : PacketReceiptAbsenceData(nullptr) {}
  ~PacketReceiptAbsenceData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PacketReceiptAbsenceData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PacketReceiptAbsenceData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PacketReceiptAbsenceData(
      ::google::protobuf::internal::ConstantInitialized);

  inline PacketReceiptAbsenceData(const PacketReceiptAbsenceData& from) : PacketReceiptAbsenceData(nullptr, from) {}
  inline PacketReceiptAbsenceData(PacketReceiptAbsenceData&& from) noexcept
      : PacketReceiptAbsenceData(nullptr, std::move(from)) {}
  inline PacketReceiptAbsenceData& operator=(const PacketReceiptAbsenceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketReceiptAbsenceData& operator=(PacketReceiptAbsenceData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PacketReceiptAbsenceData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PacketReceiptAbsenceData* internal_default_instance() {
    return reinterpret_cast<const PacketReceiptAbsenceData*>(
        &_PacketReceiptAbsenceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(PacketReceiptAbsenceData& a, PacketReceiptAbsenceData& b) { a.Swap(&b); }
  inline void Swap(PacketReceiptAbsenceData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketReceiptAbsenceData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PacketReceiptAbsenceData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PacketReceiptAbsenceData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PacketReceiptAbsenceData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PacketReceiptAbsenceData& from) { PacketReceiptAbsenceData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PacketReceiptAbsenceData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData"; }

 protected:
  explicit PacketReceiptAbsenceData(::google::protobuf::Arena* arena);
  PacketReceiptAbsenceData(::google::protobuf::Arena* arena, const PacketReceiptAbsenceData& from);
  PacketReceiptAbsenceData(::google::protobuf::Arena* arena, PacketReceiptAbsenceData&& from) noexcept
      : PacketReceiptAbsenceData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPathFieldNumber = 1,
  };
  // bytes path = 1 [json_name = "path"];
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* value);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // @@protoc_insertion_point(class_scope:ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PacketReceiptAbsenceData& from_msg);
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto;
};
// -------------------------------------------------------------------

class PacketCommitmentData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.lightclients.solomachine.v2.PacketCommitmentData) */ {
 public:
  inline PacketCommitmentData() : PacketCommitmentData(nullptr) {}
  ~PacketCommitmentData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PacketCommitmentData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PacketCommitmentData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PacketCommitmentData(
      ::google::protobuf::internal::ConstantInitialized);

  inline PacketCommitmentData(const PacketCommitmentData& from) : PacketCommitmentData(nullptr, from) {}
  inline PacketCommitmentData(PacketCommitmentData&& from) noexcept
      : PacketCommitmentData(nullptr, std::move(from)) {}
  inline PacketCommitmentData& operator=(const PacketCommitmentData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketCommitmentData& operator=(PacketCommitmentData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PacketCommitmentData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PacketCommitmentData* internal_default_instance() {
    return reinterpret_cast<const PacketCommitmentData*>(
        &_PacketCommitmentData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(PacketCommitmentData& a, PacketCommitmentData& b) { a.Swap(&b); }
  inline void Swap(PacketCommitmentData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketCommitmentData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PacketCommitmentData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PacketCommitmentData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PacketCommitmentData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PacketCommitmentData& from) { PacketCommitmentData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PacketCommitmentData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.lightclients.solomachine.v2.PacketCommitmentData"; }

 protected:
  explicit PacketCommitmentData(::google::protobuf::Arena* arena);
  PacketCommitmentData(::google::protobuf::Arena* arena, const PacketCommitmentData& from);
  PacketCommitmentData(::google::protobuf::Arena* arena, PacketCommitmentData&& from) noexcept
      : PacketCommitmentData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPathFieldNumber = 1,
    kCommitmentFieldNumber = 2,
  };
  // bytes path = 1 [json_name = "path"];
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* value);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // bytes commitment = 2 [json_name = "commitment"];
  void clear_commitment() ;
  const std::string& commitment() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_commitment(Arg_&& arg, Args_... args);
  std::string* mutable_commitment();
  PROTOBUF_NODISCARD std::string* release_commitment();
  void set_allocated_commitment(std::string* value);

  private:
  const std::string& _internal_commitment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_commitment(
      const std::string& value);
  std::string* _internal_mutable_commitment();

  public:
  // @@protoc_insertion_point(class_scope:ibc.lightclients.solomachine.v2.PacketCommitmentData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PacketCommitmentData& from_msg);
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::internal::ArenaStringPtr commitment_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto;
};
// -------------------------------------------------------------------

class PacketAcknowledgementData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.lightclients.solomachine.v2.PacketAcknowledgementData) */ {
 public:
  inline PacketAcknowledgementData() : PacketAcknowledgementData(nullptr) {}
  ~PacketAcknowledgementData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PacketAcknowledgementData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PacketAcknowledgementData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PacketAcknowledgementData(
      ::google::protobuf::internal::ConstantInitialized);

  inline PacketAcknowledgementData(const PacketAcknowledgementData& from) : PacketAcknowledgementData(nullptr, from) {}
  inline PacketAcknowledgementData(PacketAcknowledgementData&& from) noexcept
      : PacketAcknowledgementData(nullptr, std::move(from)) {}
  inline PacketAcknowledgementData& operator=(const PacketAcknowledgementData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketAcknowledgementData& operator=(PacketAcknowledgementData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PacketAcknowledgementData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PacketAcknowledgementData* internal_default_instance() {
    return reinterpret_cast<const PacketAcknowledgementData*>(
        &_PacketAcknowledgementData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(PacketAcknowledgementData& a, PacketAcknowledgementData& b) { a.Swap(&b); }
  inline void Swap(PacketAcknowledgementData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketAcknowledgementData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PacketAcknowledgementData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PacketAcknowledgementData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PacketAcknowledgementData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PacketAcknowledgementData& from) { PacketAcknowledgementData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PacketAcknowledgementData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.lightclients.solomachine.v2.PacketAcknowledgementData"; }

 protected:
  explicit PacketAcknowledgementData(::google::protobuf::Arena* arena);
  PacketAcknowledgementData(::google::protobuf::Arena* arena, const PacketAcknowledgementData& from);
  PacketAcknowledgementData(::google::protobuf::Arena* arena, PacketAcknowledgementData&& from) noexcept
      : PacketAcknowledgementData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPathFieldNumber = 1,
    kAcknowledgementFieldNumber = 2,
  };
  // bytes path = 1 [json_name = "path"];
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* value);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // bytes acknowledgement = 2 [json_name = "acknowledgement"];
  void clear_acknowledgement() ;
  const std::string& acknowledgement() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_acknowledgement(Arg_&& arg, Args_... args);
  std::string* mutable_acknowledgement();
  PROTOBUF_NODISCARD std::string* release_acknowledgement();
  void set_allocated_acknowledgement(std::string* value);

  private:
  const std::string& _internal_acknowledgement() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_acknowledgement(
      const std::string& value);
  std::string* _internal_mutable_acknowledgement();

  public:
  // @@protoc_insertion_point(class_scope:ibc.lightclients.solomachine.v2.PacketAcknowledgementData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PacketAcknowledgementData& from_msg);
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::internal::ArenaStringPtr acknowledgement_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto;
};
// -------------------------------------------------------------------

class NextSequenceRecvData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.lightclients.solomachine.v2.NextSequenceRecvData) */ {
 public:
  inline NextSequenceRecvData() : NextSequenceRecvData(nullptr) {}
  ~NextSequenceRecvData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NextSequenceRecvData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NextSequenceRecvData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NextSequenceRecvData(
      ::google::protobuf::internal::ConstantInitialized);

  inline NextSequenceRecvData(const NextSequenceRecvData& from) : NextSequenceRecvData(nullptr, from) {}
  inline NextSequenceRecvData(NextSequenceRecvData&& from) noexcept
      : NextSequenceRecvData(nullptr, std::move(from)) {}
  inline NextSequenceRecvData& operator=(const NextSequenceRecvData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NextSequenceRecvData& operator=(NextSequenceRecvData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NextSequenceRecvData& default_instance() {
    return *internal_default_instance();
  }
  static inline const NextSequenceRecvData* internal_default_instance() {
    return reinterpret_cast<const NextSequenceRecvData*>(
        &_NextSequenceRecvData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(NextSequenceRecvData& a, NextSequenceRecvData& b) { a.Swap(&b); }
  inline void Swap(NextSequenceRecvData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NextSequenceRecvData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NextSequenceRecvData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NextSequenceRecvData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NextSequenceRecvData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NextSequenceRecvData& from) { NextSequenceRecvData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NextSequenceRecvData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.lightclients.solomachine.v2.NextSequenceRecvData"; }

 protected:
  explicit NextSequenceRecvData(::google::protobuf::Arena* arena);
  NextSequenceRecvData(::google::protobuf::Arena* arena, const NextSequenceRecvData& from);
  NextSequenceRecvData(::google::protobuf::Arena* arena, NextSequenceRecvData&& from) noexcept
      : NextSequenceRecvData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPathFieldNumber = 1,
    kNextSeqRecvFieldNumber = 2,
  };
  // bytes path = 1 [json_name = "path"];
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* value);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // uint64 next_seq_recv = 2 [json_name = "nextSeqRecv"];
  void clear_next_seq_recv() ;
  ::uint64_t next_seq_recv() const;
  void set_next_seq_recv(::uint64_t value);

  private:
  ::uint64_t _internal_next_seq_recv() const;
  void _internal_set_next_seq_recv(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.lightclients.solomachine.v2.NextSequenceRecvData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NextSequenceRecvData& from_msg);
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::uint64_t next_seq_recv_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto;
};
// -------------------------------------------------------------------

class Misbehaviour final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.lightclients.solomachine.v2.Misbehaviour) */ {
 public:
  inline Misbehaviour() : Misbehaviour(nullptr) {}
  ~Misbehaviour() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Misbehaviour* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Misbehaviour));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Misbehaviour(
      ::google::protobuf::internal::ConstantInitialized);

  inline Misbehaviour(const Misbehaviour& from) : Misbehaviour(nullptr, from) {}
  inline Misbehaviour(Misbehaviour&& from) noexcept
      : Misbehaviour(nullptr, std::move(from)) {}
  inline Misbehaviour& operator=(const Misbehaviour& from) {
    CopyFrom(from);
    return *this;
  }
  inline Misbehaviour& operator=(Misbehaviour&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Misbehaviour& default_instance() {
    return *internal_default_instance();
  }
  static inline const Misbehaviour* internal_default_instance() {
    return reinterpret_cast<const Misbehaviour*>(
        &_Misbehaviour_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Misbehaviour& a, Misbehaviour& b) { a.Swap(&b); }
  inline void Swap(Misbehaviour* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Misbehaviour* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Misbehaviour* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Misbehaviour>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Misbehaviour& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Misbehaviour& from) { Misbehaviour::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Misbehaviour* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.lightclients.solomachine.v2.Misbehaviour"; }

 protected:
  explicit Misbehaviour(::google::protobuf::Arena* arena);
  Misbehaviour(::google::protobuf::Arena* arena, const Misbehaviour& from);
  Misbehaviour(::google::protobuf::Arena* arena, Misbehaviour&& from) noexcept
      : Misbehaviour(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClientIdFieldNumber = 1,
    kSignatureOneFieldNumber = 3,
    kSignatureTwoFieldNumber = 4,
    kSequenceFieldNumber = 2,
  };
  // string client_id = 1 [json_name = "clientId"];
  void clear_client_id() ;
  const std::string& client_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_id(Arg_&& arg, Args_... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* value);

  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(
      const std::string& value);
  std::string* _internal_mutable_client_id();

  public:
  // .ibc.lightclients.solomachine.v2.SignatureAndData signature_one = 3 [json_name = "signatureOne"];
  bool has_signature_one() const;
  void clear_signature_one() ;
  const ::ibc::lightclients::solomachine::v2::SignatureAndData& signature_one() const;
  PROTOBUF_NODISCARD ::ibc::lightclients::solomachine::v2::SignatureAndData* release_signature_one();
  ::ibc::lightclients::solomachine::v2::SignatureAndData* mutable_signature_one();
  void set_allocated_signature_one(::ibc::lightclients::solomachine::v2::SignatureAndData* value);
  void unsafe_arena_set_allocated_signature_one(::ibc::lightclients::solomachine::v2::SignatureAndData* value);
  ::ibc::lightclients::solomachine::v2::SignatureAndData* unsafe_arena_release_signature_one();

  private:
  const ::ibc::lightclients::solomachine::v2::SignatureAndData& _internal_signature_one() const;
  ::ibc::lightclients::solomachine::v2::SignatureAndData* _internal_mutable_signature_one();

  public:
  // .ibc.lightclients.solomachine.v2.SignatureAndData signature_two = 4 [json_name = "signatureTwo"];
  bool has_signature_two() const;
  void clear_signature_two() ;
  const ::ibc::lightclients::solomachine::v2::SignatureAndData& signature_two() const;
  PROTOBUF_NODISCARD ::ibc::lightclients::solomachine::v2::SignatureAndData* release_signature_two();
  ::ibc::lightclients::solomachine::v2::SignatureAndData* mutable_signature_two();
  void set_allocated_signature_two(::ibc::lightclients::solomachine::v2::SignatureAndData* value);
  void unsafe_arena_set_allocated_signature_two(::ibc::lightclients::solomachine::v2::SignatureAndData* value);
  ::ibc::lightclients::solomachine::v2::SignatureAndData* unsafe_arena_release_signature_two();

  private:
  const ::ibc::lightclients::solomachine::v2::SignatureAndData& _internal_signature_two() const;
  ::ibc::lightclients::solomachine::v2::SignatureAndData* _internal_mutable_signature_two();

  public:
  // uint64 sequence = 2 [json_name = "sequence"];
  void clear_sequence() ;
  ::uint64_t sequence() const;
  void set_sequence(::uint64_t value);

  private:
  ::uint64_t _internal_sequence() const;
  void _internal_set_sequence(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.lightclients.solomachine.v2.Misbehaviour)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      62, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Misbehaviour& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr client_id_;
    ::ibc::lightclients::solomachine::v2::SignatureAndData* signature_one_;
    ::ibc::lightclients::solomachine::v2::SignatureAndData* signature_two_;
    ::uint64_t sequence_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto;
};
// -------------------------------------------------------------------

class HeaderData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.lightclients.solomachine.v2.HeaderData) */ {
 public:
  inline HeaderData() : HeaderData(nullptr) {}
  ~HeaderData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HeaderData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HeaderData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HeaderData(
      ::google::protobuf::internal::ConstantInitialized);

  inline HeaderData(const HeaderData& from) : HeaderData(nullptr, from) {}
  inline HeaderData(HeaderData&& from) noexcept
      : HeaderData(nullptr, std::move(from)) {}
  inline HeaderData& operator=(const HeaderData& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeaderData& operator=(HeaderData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeaderData& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeaderData* internal_default_instance() {
    return reinterpret_cast<const HeaderData*>(
        &_HeaderData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(HeaderData& a, HeaderData& b) { a.Swap(&b); }
  inline void Swap(HeaderData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeaderData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeaderData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HeaderData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HeaderData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HeaderData& from) { HeaderData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HeaderData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.lightclients.solomachine.v2.HeaderData"; }

 protected:
  explicit HeaderData(::google::protobuf::Arena* arena);
  HeaderData(::google::protobuf::Arena* arena, const HeaderData& from);
  HeaderData(::google::protobuf::Arena* arena, HeaderData&& from) noexcept
      : HeaderData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNewDiversifierFieldNumber = 2,
    kNewPubKeyFieldNumber = 1,
  };
  // string new_diversifier = 2 [json_name = "newDiversifier"];
  void clear_new_diversifier() ;
  const std::string& new_diversifier() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_diversifier(Arg_&& arg, Args_... args);
  std::string* mutable_new_diversifier();
  PROTOBUF_NODISCARD std::string* release_new_diversifier();
  void set_allocated_new_diversifier(std::string* value);

  private:
  const std::string& _internal_new_diversifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_diversifier(
      const std::string& value);
  std::string* _internal_mutable_new_diversifier();

  public:
  // .google.protobuf.Any new_pub_key = 1 [json_name = "newPubKey"];
  bool has_new_pub_key() const;
  void clear_new_pub_key() ;
  const ::google::protobuf::Any& new_pub_key() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_new_pub_key();
  ::google::protobuf::Any* mutable_new_pub_key();
  void set_allocated_new_pub_key(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_new_pub_key(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_new_pub_key();

  private:
  const ::google::protobuf::Any& _internal_new_pub_key() const;
  ::google::protobuf::Any* _internal_mutable_new_pub_key();

  public:
  // @@protoc_insertion_point(class_scope:ibc.lightclients.solomachine.v2.HeaderData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      66, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HeaderData& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr new_diversifier_;
    ::google::protobuf::Any* new_pub_key_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto;
};
// -------------------------------------------------------------------

class Header final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.lightclients.solomachine.v2.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Header* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Header));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Header(
      ::google::protobuf::internal::ConstantInitialized);

  inline Header(const Header& from) : Header(nullptr, from) {}
  inline Header(Header&& from) noexcept
      : Header(nullptr, std::move(from)) {}
  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
        &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Header& a, Header& b) { a.Swap(&b); }
  inline void Swap(Header* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Header* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Header>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Header& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Header& from) { Header::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Header* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.lightclients.solomachine.v2.Header"; }

 protected:
  explicit Header(::google::protobuf::Arena* arena);
  Header(::google::protobuf::Arena* arena, const Header& from);
  Header(::google::protobuf::Arena* arena, Header&& from) noexcept
      : Header(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSignatureFieldNumber = 3,
    kNewDiversifierFieldNumber = 5,
    kNewPublicKeyFieldNumber = 4,
    kSequenceFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // bytes signature = 3 [json_name = "signature"];
  void clear_signature() ;
  const std::string& signature() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signature(Arg_&& arg, Args_... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* value);

  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(
      const std::string& value);
  std::string* _internal_mutable_signature();

  public:
  // string new_diversifier = 5 [json_name = "newDiversifier"];
  void clear_new_diversifier() ;
  const std::string& new_diversifier() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_diversifier(Arg_&& arg, Args_... args);
  std::string* mutable_new_diversifier();
  PROTOBUF_NODISCARD std::string* release_new_diversifier();
  void set_allocated_new_diversifier(std::string* value);

  private:
  const std::string& _internal_new_diversifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_diversifier(
      const std::string& value);
  std::string* _internal_mutable_new_diversifier();

  public:
  // .google.protobuf.Any new_public_key = 4 [json_name = "newPublicKey"];
  bool has_new_public_key() const;
  void clear_new_public_key() ;
  const ::google::protobuf::Any& new_public_key() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_new_public_key();
  ::google::protobuf::Any* mutable_new_public_key();
  void set_allocated_new_public_key(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_new_public_key(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_new_public_key();

  private:
  const ::google::protobuf::Any& _internal_new_public_key() const;
  ::google::protobuf::Any* _internal_mutable_new_public_key();

  public:
  // uint64 sequence = 1 [json_name = "sequence"];
  void clear_sequence() ;
  ::uint64_t sequence() const;
  void set_sequence(::uint64_t value);

  private:
  ::uint64_t _internal_sequence() const;
  void _internal_set_sequence(::uint64_t value);

  public:
  // uint64 timestamp = 2 [json_name = "timestamp"];
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.lightclients.solomachine.v2.Header)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      62, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Header& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr signature_;
    ::google::protobuf::internal::ArenaStringPtr new_diversifier_;
    ::google::protobuf::Any* new_public_key_;
    ::uint64_t sequence_;
    ::uint64_t timestamp_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto;
};
// -------------------------------------------------------------------

class ConsensusStateData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.lightclients.solomachine.v2.ConsensusStateData) */ {
 public:
  inline ConsensusStateData() : ConsensusStateData(nullptr) {}
  ~ConsensusStateData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConsensusStateData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConsensusStateData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConsensusStateData(
      ::google::protobuf::internal::ConstantInitialized);

  inline ConsensusStateData(const ConsensusStateData& from) : ConsensusStateData(nullptr, from) {}
  inline ConsensusStateData(ConsensusStateData&& from) noexcept
      : ConsensusStateData(nullptr, std::move(from)) {}
  inline ConsensusStateData& operator=(const ConsensusStateData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusStateData& operator=(ConsensusStateData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConsensusStateData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConsensusStateData* internal_default_instance() {
    return reinterpret_cast<const ConsensusStateData*>(
        &_ConsensusStateData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(ConsensusStateData& a, ConsensusStateData& b) { a.Swap(&b); }
  inline void Swap(ConsensusStateData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsensusStateData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConsensusStateData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConsensusStateData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConsensusStateData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConsensusStateData& from) { ConsensusStateData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConsensusStateData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.lightclients.solomachine.v2.ConsensusStateData"; }

 protected:
  explicit ConsensusStateData(::google::protobuf::Arena* arena);
  ConsensusStateData(::google::protobuf::Arena* arena, const ConsensusStateData& from);
  ConsensusStateData(::google::protobuf::Arena* arena, ConsensusStateData&& from) noexcept
      : ConsensusStateData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPathFieldNumber = 1,
    kConsensusStateFieldNumber = 2,
  };
  // bytes path = 1 [json_name = "path"];
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* value);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // .google.protobuf.Any consensus_state = 2 [json_name = "consensusState"];
  bool has_consensus_state() const;
  void clear_consensus_state() ;
  const ::google::protobuf::Any& consensus_state() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_consensus_state();
  ::google::protobuf::Any* mutable_consensus_state();
  void set_allocated_consensus_state(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_consensus_state(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_consensus_state();

  private:
  const ::google::protobuf::Any& _internal_consensus_state() const;
  ::google::protobuf::Any* _internal_mutable_consensus_state();

  public:
  // @@protoc_insertion_point(class_scope:ibc.lightclients.solomachine.v2.ConsensusStateData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ConsensusStateData& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::Any* consensus_state_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto;
};
// -------------------------------------------------------------------

class ConsensusState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.lightclients.solomachine.v2.ConsensusState) */ {
 public:
  inline ConsensusState() : ConsensusState(nullptr) {}
  ~ConsensusState() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConsensusState* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConsensusState));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConsensusState(
      ::google::protobuf::internal::ConstantInitialized);

  inline ConsensusState(const ConsensusState& from) : ConsensusState(nullptr, from) {}
  inline ConsensusState(ConsensusState&& from) noexcept
      : ConsensusState(nullptr, std::move(from)) {}
  inline ConsensusState& operator=(const ConsensusState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusState& operator=(ConsensusState&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConsensusState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConsensusState* internal_default_instance() {
    return reinterpret_cast<const ConsensusState*>(
        &_ConsensusState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ConsensusState& a, ConsensusState& b) { a.Swap(&b); }
  inline void Swap(ConsensusState* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsensusState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConsensusState* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConsensusState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConsensusState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConsensusState& from) { ConsensusState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConsensusState* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.lightclients.solomachine.v2.ConsensusState"; }

 protected:
  explicit ConsensusState(::google::protobuf::Arena* arena);
  ConsensusState(::google::protobuf::Arena* arena, const ConsensusState& from);
  ConsensusState(::google::protobuf::Arena* arena, ConsensusState&& from) noexcept
      : ConsensusState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDiversifierFieldNumber = 2,
    kPublicKeyFieldNumber = 1,
    kTimestampFieldNumber = 3,
  };
  // string diversifier = 2 [json_name = "diversifier"];
  void clear_diversifier() ;
  const std::string& diversifier() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_diversifier(Arg_&& arg, Args_... args);
  std::string* mutable_diversifier();
  PROTOBUF_NODISCARD std::string* release_diversifier();
  void set_allocated_diversifier(std::string* value);

  private:
  const std::string& _internal_diversifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_diversifier(
      const std::string& value);
  std::string* _internal_mutable_diversifier();

  public:
  // .google.protobuf.Any public_key = 1 [json_name = "publicKey"];
  bool has_public_key() const;
  void clear_public_key() ;
  const ::google::protobuf::Any& public_key() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_public_key();
  ::google::protobuf::Any* mutable_public_key();
  void set_allocated_public_key(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_public_key(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_public_key();

  private:
  const ::google::protobuf::Any& _internal_public_key() const;
  ::google::protobuf::Any* _internal_mutable_public_key();

  public:
  // uint64 timestamp = 3 [json_name = "timestamp"];
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.lightclients.solomachine.v2.ConsensusState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      66, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ConsensusState& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr diversifier_;
    ::google::protobuf::Any* public_key_;
    ::uint64_t timestamp_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto;
};
// -------------------------------------------------------------------

class ClientStateData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.lightclients.solomachine.v2.ClientStateData) */ {
 public:
  inline ClientStateData() : ClientStateData(nullptr) {}
  ~ClientStateData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ClientStateData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ClientStateData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ClientStateData(
      ::google::protobuf::internal::ConstantInitialized);

  inline ClientStateData(const ClientStateData& from) : ClientStateData(nullptr, from) {}
  inline ClientStateData(ClientStateData&& from) noexcept
      : ClientStateData(nullptr, std::move(from)) {}
  inline ClientStateData& operator=(const ClientStateData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientStateData& operator=(ClientStateData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientStateData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientStateData* internal_default_instance() {
    return reinterpret_cast<const ClientStateData*>(
        &_ClientStateData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(ClientStateData& a, ClientStateData& b) { a.Swap(&b); }
  inline void Swap(ClientStateData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientStateData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientStateData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ClientStateData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClientStateData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ClientStateData& from) { ClientStateData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ClientStateData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.lightclients.solomachine.v2.ClientStateData"; }

 protected:
  explicit ClientStateData(::google::protobuf::Arena* arena);
  ClientStateData(::google::protobuf::Arena* arena, const ClientStateData& from);
  ClientStateData(::google::protobuf::Arena* arena, ClientStateData&& from) noexcept
      : ClientStateData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPathFieldNumber = 1,
    kClientStateFieldNumber = 2,
  };
  // bytes path = 1 [json_name = "path"];
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* value);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // .google.protobuf.Any client_state = 2 [json_name = "clientState"];
  bool has_client_state() const;
  void clear_client_state() ;
  const ::google::protobuf::Any& client_state() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_client_state();
  ::google::protobuf::Any* mutable_client_state();
  void set_allocated_client_state(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_client_state(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_client_state();

  private:
  const ::google::protobuf::Any& _internal_client_state() const;
  ::google::protobuf::Any* _internal_mutable_client_state();

  public:
  // @@protoc_insertion_point(class_scope:ibc.lightclients.solomachine.v2.ClientStateData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ClientStateData& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::Any* client_state_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto;
};
// -------------------------------------------------------------------

class ClientState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.lightclients.solomachine.v2.ClientState) */ {
 public:
  inline ClientState() : ClientState(nullptr) {}
  ~ClientState() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ClientState* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ClientState));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ClientState(
      ::google::protobuf::internal::ConstantInitialized);

  inline ClientState(const ClientState& from) : ClientState(nullptr, from) {}
  inline ClientState(ClientState&& from) noexcept
      : ClientState(nullptr, std::move(from)) {}
  inline ClientState& operator=(const ClientState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientState& operator=(ClientState&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientState* internal_default_instance() {
    return reinterpret_cast<const ClientState*>(
        &_ClientState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ClientState& a, ClientState& b) { a.Swap(&b); }
  inline void Swap(ClientState* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientState* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ClientState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClientState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ClientState& from) { ClientState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ClientState* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.lightclients.solomachine.v2.ClientState"; }

 protected:
  explicit ClientState(::google::protobuf::Arena* arena);
  ClientState(::google::protobuf::Arena* arena, const ClientState& from);
  ClientState(::google::protobuf::Arena* arena, ClientState&& from) noexcept
      : ClientState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConsensusStateFieldNumber = 3,
    kSequenceFieldNumber = 1,
    kIsFrozenFieldNumber = 2,
    kAllowUpdateAfterProposalFieldNumber = 4,
  };
  // .ibc.lightclients.solomachine.v2.ConsensusState consensus_state = 3 [json_name = "consensusState"];
  bool has_consensus_state() const;
  void clear_consensus_state() ;
  const ::ibc::lightclients::solomachine::v2::ConsensusState& consensus_state() const;
  PROTOBUF_NODISCARD ::ibc::lightclients::solomachine::v2::ConsensusState* release_consensus_state();
  ::ibc::lightclients::solomachine::v2::ConsensusState* mutable_consensus_state();
  void set_allocated_consensus_state(::ibc::lightclients::solomachine::v2::ConsensusState* value);
  void unsafe_arena_set_allocated_consensus_state(::ibc::lightclients::solomachine::v2::ConsensusState* value);
  ::ibc::lightclients::solomachine::v2::ConsensusState* unsafe_arena_release_consensus_state();

  private:
  const ::ibc::lightclients::solomachine::v2::ConsensusState& _internal_consensus_state() const;
  ::ibc::lightclients::solomachine::v2::ConsensusState* _internal_mutable_consensus_state();

  public:
  // uint64 sequence = 1 [json_name = "sequence"];
  void clear_sequence() ;
  ::uint64_t sequence() const;
  void set_sequence(::uint64_t value);

  private:
  ::uint64_t _internal_sequence() const;
  void _internal_set_sequence(::uint64_t value);

  public:
  // bool is_frozen = 2 [json_name = "isFrozen"];
  void clear_is_frozen() ;
  bool is_frozen() const;
  void set_is_frozen(bool value);

  private:
  bool _internal_is_frozen() const;
  void _internal_set_is_frozen(bool value);

  public:
  // bool allow_update_after_proposal = 4 [json_name = "allowUpdateAfterProposal"];
  void clear_allow_update_after_proposal() ;
  bool allow_update_after_proposal() const;
  void set_allow_update_after_proposal(bool value);

  private:
  bool _internal_allow_update_after_proposal() const;
  void _internal_set_allow_update_after_proposal(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.lightclients.solomachine.v2.ClientState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ClientState& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::ibc::lightclients::solomachine::v2::ConsensusState* consensus_state_;
    ::uint64_t sequence_;
    bool is_frozen_;
    bool allow_update_after_proposal_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto;
};
// -------------------------------------------------------------------

class ChannelStateData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.lightclients.solomachine.v2.ChannelStateData) */ {
 public:
  inline ChannelStateData() : ChannelStateData(nullptr) {}
  ~ChannelStateData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ChannelStateData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ChannelStateData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChannelStateData(
      ::google::protobuf::internal::ConstantInitialized);

  inline ChannelStateData(const ChannelStateData& from) : ChannelStateData(nullptr, from) {}
  inline ChannelStateData(ChannelStateData&& from) noexcept
      : ChannelStateData(nullptr, std::move(from)) {}
  inline ChannelStateData& operator=(const ChannelStateData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelStateData& operator=(ChannelStateData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelStateData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelStateData* internal_default_instance() {
    return reinterpret_cast<const ChannelStateData*>(
        &_ChannelStateData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(ChannelStateData& a, ChannelStateData& b) { a.Swap(&b); }
  inline void Swap(ChannelStateData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelStateData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChannelStateData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ChannelStateData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChannelStateData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ChannelStateData& from) { ChannelStateData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ChannelStateData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.lightclients.solomachine.v2.ChannelStateData"; }

 protected:
  explicit ChannelStateData(::google::protobuf::Arena* arena);
  ChannelStateData(::google::protobuf::Arena* arena, const ChannelStateData& from);
  ChannelStateData(::google::protobuf::Arena* arena, ChannelStateData&& from) noexcept
      : ChannelStateData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPathFieldNumber = 1,
    kChannelFieldNumber = 2,
  };
  // bytes path = 1 [json_name = "path"];
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* value);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // .ibc.core.channel.v1.Channel channel = 2 [json_name = "channel"];
  bool has_channel() const;
  void clear_channel() ;
  const ::ibc::core::channel::v1::Channel& channel() const;
  PROTOBUF_NODISCARD ::ibc::core::channel::v1::Channel* release_channel();
  ::ibc::core::channel::v1::Channel* mutable_channel();
  void set_allocated_channel(::ibc::core::channel::v1::Channel* value);
  void unsafe_arena_set_allocated_channel(::ibc::core::channel::v1::Channel* value);
  ::ibc::core::channel::v1::Channel* unsafe_arena_release_channel();

  private:
  const ::ibc::core::channel::v1::Channel& _internal_channel() const;
  ::ibc::core::channel::v1::Channel* _internal_mutable_channel();

  public:
  // @@protoc_insertion_point(class_scope:ibc.lightclients.solomachine.v2.ChannelStateData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ChannelStateData& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::ibc::core::channel::v1::Channel* channel_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto;
};
// -------------------------------------------------------------------

class ConnectionStateData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.lightclients.solomachine.v2.ConnectionStateData) */ {
 public:
  inline ConnectionStateData() : ConnectionStateData(nullptr) {}
  ~ConnectionStateData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConnectionStateData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConnectionStateData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConnectionStateData(
      ::google::protobuf::internal::ConstantInitialized);

  inline ConnectionStateData(const ConnectionStateData& from) : ConnectionStateData(nullptr, from) {}
  inline ConnectionStateData(ConnectionStateData&& from) noexcept
      : ConnectionStateData(nullptr, std::move(from)) {}
  inline ConnectionStateData& operator=(const ConnectionStateData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionStateData& operator=(ConnectionStateData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectionStateData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectionStateData* internal_default_instance() {
    return reinterpret_cast<const ConnectionStateData*>(
        &_ConnectionStateData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(ConnectionStateData& a, ConnectionStateData& b) { a.Swap(&b); }
  inline void Swap(ConnectionStateData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionStateData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectionStateData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConnectionStateData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConnectionStateData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConnectionStateData& from) { ConnectionStateData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConnectionStateData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.lightclients.solomachine.v2.ConnectionStateData"; }

 protected:
  explicit ConnectionStateData(::google::protobuf::Arena* arena);
  ConnectionStateData(::google::protobuf::Arena* arena, const ConnectionStateData& from);
  ConnectionStateData(::google::protobuf::Arena* arena, ConnectionStateData&& from) noexcept
      : ConnectionStateData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPathFieldNumber = 1,
    kConnectionFieldNumber = 2,
  };
  // bytes path = 1 [json_name = "path"];
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* value);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // .ibc.core.connection.v1.ConnectionEnd connection = 2 [json_name = "connection"];
  bool has_connection() const;
  void clear_connection() ;
  const ::ibc::core::connection::v1::ConnectionEnd& connection() const;
  PROTOBUF_NODISCARD ::ibc::core::connection::v1::ConnectionEnd* release_connection();
  ::ibc::core::connection::v1::ConnectionEnd* mutable_connection();
  void set_allocated_connection(::ibc::core::connection::v1::ConnectionEnd* value);
  void unsafe_arena_set_allocated_connection(::ibc::core::connection::v1::ConnectionEnd* value);
  ::ibc::core::connection::v1::ConnectionEnd* unsafe_arena_release_connection();

  private:
  const ::ibc::core::connection::v1::ConnectionEnd& _internal_connection() const;
  ::ibc::core::connection::v1::ConnectionEnd* _internal_mutable_connection();

  public:
  // @@protoc_insertion_point(class_scope:ibc.lightclients.solomachine.v2.ConnectionStateData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ConnectionStateData& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::ibc::core::connection::v1::ConnectionEnd* connection_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ClientState

// uint64 sequence = 1 [json_name = "sequence"];
inline void ClientState::clear_sequence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_ = ::uint64_t{0u};
}
inline ::uint64_t ClientState::sequence() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.ClientState.sequence)
  return _internal_sequence();
}
inline void ClientState::set_sequence(::uint64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.ClientState.sequence)
}
inline ::uint64_t ClientState::_internal_sequence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sequence_;
}
inline void ClientState::_internal_set_sequence(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_ = value;
}

// bool is_frozen = 2 [json_name = "isFrozen"];
inline void ClientState::clear_is_frozen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_frozen_ = false;
}
inline bool ClientState::is_frozen() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.ClientState.is_frozen)
  return _internal_is_frozen();
}
inline void ClientState::set_is_frozen(bool value) {
  _internal_set_is_frozen(value);
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.ClientState.is_frozen)
}
inline bool ClientState::_internal_is_frozen() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_frozen_;
}
inline void ClientState::_internal_set_is_frozen(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_frozen_ = value;
}

// .ibc.lightclients.solomachine.v2.ConsensusState consensus_state = 3 [json_name = "consensusState"];
inline bool ClientState::has_consensus_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.consensus_state_ != nullptr);
  return value;
}
inline void ClientState::clear_consensus_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.consensus_state_ != nullptr) _impl_.consensus_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ibc::lightclients::solomachine::v2::ConsensusState& ClientState::_internal_consensus_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ibc::lightclients::solomachine::v2::ConsensusState* p = _impl_.consensus_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::lightclients::solomachine::v2::ConsensusState&>(::ibc::lightclients::solomachine::v2::_ConsensusState_default_instance_);
}
inline const ::ibc::lightclients::solomachine::v2::ConsensusState& ClientState::consensus_state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.ClientState.consensus_state)
  return _internal_consensus_state();
}
inline void ClientState::unsafe_arena_set_allocated_consensus_state(::ibc::lightclients::solomachine::v2::ConsensusState* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.consensus_state_);
  }
  _impl_.consensus_state_ = reinterpret_cast<::ibc::lightclients::solomachine::v2::ConsensusState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.solomachine.v2.ClientState.consensus_state)
}
inline ::ibc::lightclients::solomachine::v2::ConsensusState* ClientState::release_consensus_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::lightclients::solomachine::v2::ConsensusState* released = _impl_.consensus_state_;
  _impl_.consensus_state_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ibc::lightclients::solomachine::v2::ConsensusState* ClientState::unsafe_arena_release_consensus_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.ClientState.consensus_state)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::lightclients::solomachine::v2::ConsensusState* temp = _impl_.consensus_state_;
  _impl_.consensus_state_ = nullptr;
  return temp;
}
inline ::ibc::lightclients::solomachine::v2::ConsensusState* ClientState::_internal_mutable_consensus_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.consensus_state_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ibc::lightclients::solomachine::v2::ConsensusState>(GetArena());
    _impl_.consensus_state_ = reinterpret_cast<::ibc::lightclients::solomachine::v2::ConsensusState*>(p);
  }
  return _impl_.consensus_state_;
}
inline ::ibc::lightclients::solomachine::v2::ConsensusState* ClientState::mutable_consensus_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::ibc::lightclients::solomachine::v2::ConsensusState* _msg = _internal_mutable_consensus_state();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.ClientState.consensus_state)
  return _msg;
}
inline void ClientState::set_allocated_consensus_state(::ibc::lightclients::solomachine::v2::ConsensusState* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.consensus_state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.consensus_state_ = reinterpret_cast<::ibc::lightclients::solomachine::v2::ConsensusState*>(value);
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.ClientState.consensus_state)
}

// bool allow_update_after_proposal = 4 [json_name = "allowUpdateAfterProposal"];
inline void ClientState::clear_allow_update_after_proposal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_update_after_proposal_ = false;
}
inline bool ClientState::allow_update_after_proposal() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.ClientState.allow_update_after_proposal)
  return _internal_allow_update_after_proposal();
}
inline void ClientState::set_allow_update_after_proposal(bool value) {
  _internal_set_allow_update_after_proposal(value);
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.ClientState.allow_update_after_proposal)
}
inline bool ClientState::_internal_allow_update_after_proposal() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allow_update_after_proposal_;
}
inline void ClientState::_internal_set_allow_update_after_proposal(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_update_after_proposal_ = value;
}

// -------------------------------------------------------------------

// ConsensusState

// .google.protobuf.Any public_key = 1 [json_name = "publicKey"];
inline bool ConsensusState::has_public_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.public_key_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& ConsensusState::_internal_public_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Any* p = _impl_.public_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& ConsensusState::public_key() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.ConsensusState.public_key)
  return _internal_public_key();
}
inline void ConsensusState::unsafe_arena_set_allocated_public_key(::google::protobuf::Any* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.public_key_);
  }
  _impl_.public_key_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.solomachine.v2.ConsensusState.public_key)
}
inline ::google::protobuf::Any* ConsensusState::release_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* released = _impl_.public_key_;
  _impl_.public_key_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Any* ConsensusState::unsafe_arena_release_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.ConsensusState.public_key)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* temp = _impl_.public_key_;
  _impl_.public_key_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* ConsensusState::_internal_mutable_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.public_key_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Any>(GetArena());
    _impl_.public_key_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.public_key_;
}
inline ::google::protobuf::Any* ConsensusState::mutable_public_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Any* _msg = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.ConsensusState.public_key)
  return _msg;
}
inline void ConsensusState::set_allocated_public_key(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.public_key_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.public_key_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.ConsensusState.public_key)
}

// string diversifier = 2 [json_name = "diversifier"];
inline void ConsensusState::clear_diversifier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.diversifier_.ClearToEmpty();
}
inline const std::string& ConsensusState::diversifier() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.ConsensusState.diversifier)
  return _internal_diversifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConsensusState::set_diversifier(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.diversifier_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.ConsensusState.diversifier)
}
inline std::string* ConsensusState::mutable_diversifier() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_diversifier();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.ConsensusState.diversifier)
  return _s;
}
inline const std::string& ConsensusState::_internal_diversifier() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.diversifier_.Get();
}
inline void ConsensusState::_internal_set_diversifier(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.diversifier_.Set(value, GetArena());
}
inline std::string* ConsensusState::_internal_mutable_diversifier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.diversifier_.Mutable( GetArena());
}
inline std::string* ConsensusState::release_diversifier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.ConsensusState.diversifier)
  return _impl_.diversifier_.Release();
}
inline void ConsensusState::set_allocated_diversifier(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.diversifier_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.diversifier_.IsDefault()) {
    _impl_.diversifier_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.ConsensusState.diversifier)
}

// uint64 timestamp = 3 [json_name = "timestamp"];
inline void ConsensusState::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t ConsensusState::timestamp() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.ConsensusState.timestamp)
  return _internal_timestamp();
}
inline void ConsensusState::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.ConsensusState.timestamp)
}
inline ::uint64_t ConsensusState::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void ConsensusState::_internal_set_timestamp(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// -------------------------------------------------------------------

// Header

// uint64 sequence = 1 [json_name = "sequence"];
inline void Header::clear_sequence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_ = ::uint64_t{0u};
}
inline ::uint64_t Header::sequence() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.Header.sequence)
  return _internal_sequence();
}
inline void Header::set_sequence(::uint64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.Header.sequence)
}
inline ::uint64_t Header::_internal_sequence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sequence_;
}
inline void Header::_internal_set_sequence(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_ = value;
}

// uint64 timestamp = 2 [json_name = "timestamp"];
inline void Header::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t Header::timestamp() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.Header.timestamp)
  return _internal_timestamp();
}
inline void Header::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.Header.timestamp)
}
inline ::uint64_t Header::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void Header::_internal_set_timestamp(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// bytes signature = 3 [json_name = "signature"];
inline void Header::clear_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& Header::signature() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.Header.signature)
  return _internal_signature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_signature(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.Header.signature)
}
inline std::string* Header::mutable_signature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.Header.signature)
  return _s;
}
inline const std::string& Header::_internal_signature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.signature_.Get();
}
inline void Header::_internal_set_signature(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_.Set(value, GetArena());
}
inline std::string* Header::_internal_mutable_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.signature_.Mutable( GetArena());
}
inline std::string* Header::release_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.Header.signature)
  return _impl_.signature_.Release();
}
inline void Header::set_allocated_signature(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.signature_.IsDefault()) {
    _impl_.signature_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.Header.signature)
}

// .google.protobuf.Any new_public_key = 4 [json_name = "newPublicKey"];
inline bool Header::has_new_public_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_public_key_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& Header::_internal_new_public_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Any* p = _impl_.new_public_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& Header::new_public_key() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.Header.new_public_key)
  return _internal_new_public_key();
}
inline void Header::unsafe_arena_set_allocated_new_public_key(::google::protobuf::Any* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.new_public_key_);
  }
  _impl_.new_public_key_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.solomachine.v2.Header.new_public_key)
}
inline ::google::protobuf::Any* Header::release_new_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* released = _impl_.new_public_key_;
  _impl_.new_public_key_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Any* Header::unsafe_arena_release_new_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.Header.new_public_key)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* temp = _impl_.new_public_key_;
  _impl_.new_public_key_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* Header::_internal_mutable_new_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.new_public_key_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Any>(GetArena());
    _impl_.new_public_key_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.new_public_key_;
}
inline ::google::protobuf::Any* Header::mutable_new_public_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Any* _msg = _internal_mutable_new_public_key();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.Header.new_public_key)
  return _msg;
}
inline void Header::set_allocated_new_public_key(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.new_public_key_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.new_public_key_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.Header.new_public_key)
}

// string new_diversifier = 5 [json_name = "newDiversifier"];
inline void Header::clear_new_diversifier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_diversifier_.ClearToEmpty();
}
inline const std::string& Header::new_diversifier() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.Header.new_diversifier)
  return _internal_new_diversifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_new_diversifier(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_diversifier_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.Header.new_diversifier)
}
inline std::string* Header::mutable_new_diversifier() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_new_diversifier();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.Header.new_diversifier)
  return _s;
}
inline const std::string& Header::_internal_new_diversifier() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_diversifier_.Get();
}
inline void Header::_internal_set_new_diversifier(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_diversifier_.Set(value, GetArena());
}
inline std::string* Header::_internal_mutable_new_diversifier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.new_diversifier_.Mutable( GetArena());
}
inline std::string* Header::release_new_diversifier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.Header.new_diversifier)
  return _impl_.new_diversifier_.Release();
}
inline void Header::set_allocated_new_diversifier(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_diversifier_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.new_diversifier_.IsDefault()) {
    _impl_.new_diversifier_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.Header.new_diversifier)
}

// -------------------------------------------------------------------

// Misbehaviour

// string client_id = 1 [json_name = "clientId"];
inline void Misbehaviour::clear_client_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& Misbehaviour::client_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.Misbehaviour.client_id)
  return _internal_client_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Misbehaviour::set_client_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.Misbehaviour.client_id)
}
inline std::string* Misbehaviour::mutable_client_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.Misbehaviour.client_id)
  return _s;
}
inline const std::string& Misbehaviour::_internal_client_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.client_id_.Get();
}
inline void Misbehaviour::_internal_set_client_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.Set(value, GetArena());
}
inline std::string* Misbehaviour::_internal_mutable_client_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.client_id_.Mutable( GetArena());
}
inline std::string* Misbehaviour::release_client_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.Misbehaviour.client_id)
  return _impl_.client_id_.Release();
}
inline void Misbehaviour::set_allocated_client_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.client_id_.IsDefault()) {
    _impl_.client_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.Misbehaviour.client_id)
}

// uint64 sequence = 2 [json_name = "sequence"];
inline void Misbehaviour::clear_sequence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_ = ::uint64_t{0u};
}
inline ::uint64_t Misbehaviour::sequence() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.Misbehaviour.sequence)
  return _internal_sequence();
}
inline void Misbehaviour::set_sequence(::uint64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.Misbehaviour.sequence)
}
inline ::uint64_t Misbehaviour::_internal_sequence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sequence_;
}
inline void Misbehaviour::_internal_set_sequence(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_ = value;
}

// .ibc.lightclients.solomachine.v2.SignatureAndData signature_one = 3 [json_name = "signatureOne"];
inline bool Misbehaviour::has_signature_one() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signature_one_ != nullptr);
  return value;
}
inline void Misbehaviour::clear_signature_one() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.signature_one_ != nullptr) _impl_.signature_one_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ibc::lightclients::solomachine::v2::SignatureAndData& Misbehaviour::_internal_signature_one() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ibc::lightclients::solomachine::v2::SignatureAndData* p = _impl_.signature_one_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::lightclients::solomachine::v2::SignatureAndData&>(::ibc::lightclients::solomachine::v2::_SignatureAndData_default_instance_);
}
inline const ::ibc::lightclients::solomachine::v2::SignatureAndData& Misbehaviour::signature_one() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.Misbehaviour.signature_one)
  return _internal_signature_one();
}
inline void Misbehaviour::unsafe_arena_set_allocated_signature_one(::ibc::lightclients::solomachine::v2::SignatureAndData* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.signature_one_);
  }
  _impl_.signature_one_ = reinterpret_cast<::ibc::lightclients::solomachine::v2::SignatureAndData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.solomachine.v2.Misbehaviour.signature_one)
}
inline ::ibc::lightclients::solomachine::v2::SignatureAndData* Misbehaviour::release_signature_one() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::lightclients::solomachine::v2::SignatureAndData* released = _impl_.signature_one_;
  _impl_.signature_one_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ibc::lightclients::solomachine::v2::SignatureAndData* Misbehaviour::unsafe_arena_release_signature_one() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.Misbehaviour.signature_one)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::lightclients::solomachine::v2::SignatureAndData* temp = _impl_.signature_one_;
  _impl_.signature_one_ = nullptr;
  return temp;
}
inline ::ibc::lightclients::solomachine::v2::SignatureAndData* Misbehaviour::_internal_mutable_signature_one() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.signature_one_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ibc::lightclients::solomachine::v2::SignatureAndData>(GetArena());
    _impl_.signature_one_ = reinterpret_cast<::ibc::lightclients::solomachine::v2::SignatureAndData*>(p);
  }
  return _impl_.signature_one_;
}
inline ::ibc::lightclients::solomachine::v2::SignatureAndData* Misbehaviour::mutable_signature_one() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::ibc::lightclients::solomachine::v2::SignatureAndData* _msg = _internal_mutable_signature_one();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.Misbehaviour.signature_one)
  return _msg;
}
inline void Misbehaviour::set_allocated_signature_one(::ibc::lightclients::solomachine::v2::SignatureAndData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.signature_one_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.signature_one_ = reinterpret_cast<::ibc::lightclients::solomachine::v2::SignatureAndData*>(value);
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.Misbehaviour.signature_one)
}

// .ibc.lightclients.solomachine.v2.SignatureAndData signature_two = 4 [json_name = "signatureTwo"];
inline bool Misbehaviour::has_signature_two() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signature_two_ != nullptr);
  return value;
}
inline void Misbehaviour::clear_signature_two() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.signature_two_ != nullptr) _impl_.signature_two_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::ibc::lightclients::solomachine::v2::SignatureAndData& Misbehaviour::_internal_signature_two() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ibc::lightclients::solomachine::v2::SignatureAndData* p = _impl_.signature_two_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::lightclients::solomachine::v2::SignatureAndData&>(::ibc::lightclients::solomachine::v2::_SignatureAndData_default_instance_);
}
inline const ::ibc::lightclients::solomachine::v2::SignatureAndData& Misbehaviour::signature_two() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.Misbehaviour.signature_two)
  return _internal_signature_two();
}
inline void Misbehaviour::unsafe_arena_set_allocated_signature_two(::ibc::lightclients::solomachine::v2::SignatureAndData* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.signature_two_);
  }
  _impl_.signature_two_ = reinterpret_cast<::ibc::lightclients::solomachine::v2::SignatureAndData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.solomachine.v2.Misbehaviour.signature_two)
}
inline ::ibc::lightclients::solomachine::v2::SignatureAndData* Misbehaviour::release_signature_two() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::lightclients::solomachine::v2::SignatureAndData* released = _impl_.signature_two_;
  _impl_.signature_two_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ibc::lightclients::solomachine::v2::SignatureAndData* Misbehaviour::unsafe_arena_release_signature_two() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.Misbehaviour.signature_two)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::lightclients::solomachine::v2::SignatureAndData* temp = _impl_.signature_two_;
  _impl_.signature_two_ = nullptr;
  return temp;
}
inline ::ibc::lightclients::solomachine::v2::SignatureAndData* Misbehaviour::_internal_mutable_signature_two() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.signature_two_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ibc::lightclients::solomachine::v2::SignatureAndData>(GetArena());
    _impl_.signature_two_ = reinterpret_cast<::ibc::lightclients::solomachine::v2::SignatureAndData*>(p);
  }
  return _impl_.signature_two_;
}
inline ::ibc::lightclients::solomachine::v2::SignatureAndData* Misbehaviour::mutable_signature_two() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::ibc::lightclients::solomachine::v2::SignatureAndData* _msg = _internal_mutable_signature_two();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.Misbehaviour.signature_two)
  return _msg;
}
inline void Misbehaviour::set_allocated_signature_two(::ibc::lightclients::solomachine::v2::SignatureAndData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.signature_two_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.signature_two_ = reinterpret_cast<::ibc::lightclients::solomachine::v2::SignatureAndData*>(value);
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.Misbehaviour.signature_two)
}

// -------------------------------------------------------------------

// SignatureAndData

// bytes signature = 1 [json_name = "signature"];
inline void SignatureAndData::clear_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& SignatureAndData::signature() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.SignatureAndData.signature)
  return _internal_signature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignatureAndData::set_signature(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.SignatureAndData.signature)
}
inline std::string* SignatureAndData::mutable_signature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.SignatureAndData.signature)
  return _s;
}
inline const std::string& SignatureAndData::_internal_signature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.signature_.Get();
}
inline void SignatureAndData::_internal_set_signature(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_.Set(value, GetArena());
}
inline std::string* SignatureAndData::_internal_mutable_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.signature_.Mutable( GetArena());
}
inline std::string* SignatureAndData::release_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.SignatureAndData.signature)
  return _impl_.signature_.Release();
}
inline void SignatureAndData::set_allocated_signature(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.signature_.IsDefault()) {
    _impl_.signature_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.SignatureAndData.signature)
}

// .ibc.lightclients.solomachine.v2.DataType data_type = 2 [json_name = "dataType"];
inline void SignatureAndData::clear_data_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_type_ = 0;
}
inline ::ibc::lightclients::solomachine::v2::DataType SignatureAndData::data_type() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.SignatureAndData.data_type)
  return _internal_data_type();
}
inline void SignatureAndData::set_data_type(::ibc::lightclients::solomachine::v2::DataType value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.SignatureAndData.data_type)
}
inline ::ibc::lightclients::solomachine::v2::DataType SignatureAndData::_internal_data_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ibc::lightclients::solomachine::v2::DataType>(_impl_.data_type_);
}
inline void SignatureAndData::_internal_set_data_type(::ibc::lightclients::solomachine::v2::DataType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_type_ = value;
}

// bytes data = 3 [json_name = "data"];
inline void SignatureAndData::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& SignatureAndData::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.SignatureAndData.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignatureAndData::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.SignatureAndData.data)
}
inline std::string* SignatureAndData::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.SignatureAndData.data)
  return _s;
}
inline const std::string& SignatureAndData::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void SignatureAndData::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* SignatureAndData::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* SignatureAndData::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.SignatureAndData.data)
  return _impl_.data_.Release();
}
inline void SignatureAndData::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.SignatureAndData.data)
}

// uint64 timestamp = 4 [json_name = "timestamp"];
inline void SignatureAndData::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t SignatureAndData::timestamp() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.SignatureAndData.timestamp)
  return _internal_timestamp();
}
inline void SignatureAndData::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.SignatureAndData.timestamp)
}
inline ::uint64_t SignatureAndData::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void SignatureAndData::_internal_set_timestamp(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// -------------------------------------------------------------------

// TimestampedSignatureData

// bytes signature_data = 1 [json_name = "signatureData"];
inline void TimestampedSignatureData::clear_signature_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_data_.ClearToEmpty();
}
inline const std::string& TimestampedSignatureData::signature_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.TimestampedSignatureData.signature_data)
  return _internal_signature_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TimestampedSignatureData::set_signature_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.TimestampedSignatureData.signature_data)
}
inline std::string* TimestampedSignatureData::mutable_signature_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_signature_data();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.TimestampedSignatureData.signature_data)
  return _s;
}
inline const std::string& TimestampedSignatureData::_internal_signature_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.signature_data_.Get();
}
inline void TimestampedSignatureData::_internal_set_signature_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_data_.Set(value, GetArena());
}
inline std::string* TimestampedSignatureData::_internal_mutable_signature_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.signature_data_.Mutable( GetArena());
}
inline std::string* TimestampedSignatureData::release_signature_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.TimestampedSignatureData.signature_data)
  return _impl_.signature_data_.Release();
}
inline void TimestampedSignatureData::set_allocated_signature_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.signature_data_.IsDefault()) {
    _impl_.signature_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.TimestampedSignatureData.signature_data)
}

// uint64 timestamp = 2 [json_name = "timestamp"];
inline void TimestampedSignatureData::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t TimestampedSignatureData::timestamp() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.TimestampedSignatureData.timestamp)
  return _internal_timestamp();
}
inline void TimestampedSignatureData::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.TimestampedSignatureData.timestamp)
}
inline ::uint64_t TimestampedSignatureData::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void TimestampedSignatureData::_internal_set_timestamp(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// -------------------------------------------------------------------

// SignBytes

// uint64 sequence = 1 [json_name = "sequence"];
inline void SignBytes::clear_sequence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_ = ::uint64_t{0u};
}
inline ::uint64_t SignBytes::sequence() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.SignBytes.sequence)
  return _internal_sequence();
}
inline void SignBytes::set_sequence(::uint64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.SignBytes.sequence)
}
inline ::uint64_t SignBytes::_internal_sequence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sequence_;
}
inline void SignBytes::_internal_set_sequence(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_ = value;
}

// uint64 timestamp = 2 [json_name = "timestamp"];
inline void SignBytes::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t SignBytes::timestamp() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.SignBytes.timestamp)
  return _internal_timestamp();
}
inline void SignBytes::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.SignBytes.timestamp)
}
inline ::uint64_t SignBytes::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void SignBytes::_internal_set_timestamp(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// string diversifier = 3 [json_name = "diversifier"];
inline void SignBytes::clear_diversifier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.diversifier_.ClearToEmpty();
}
inline const std::string& SignBytes::diversifier() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.SignBytes.diversifier)
  return _internal_diversifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignBytes::set_diversifier(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.diversifier_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.SignBytes.diversifier)
}
inline std::string* SignBytes::mutable_diversifier() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_diversifier();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.SignBytes.diversifier)
  return _s;
}
inline const std::string& SignBytes::_internal_diversifier() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.diversifier_.Get();
}
inline void SignBytes::_internal_set_diversifier(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.diversifier_.Set(value, GetArena());
}
inline std::string* SignBytes::_internal_mutable_diversifier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.diversifier_.Mutable( GetArena());
}
inline std::string* SignBytes::release_diversifier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.SignBytes.diversifier)
  return _impl_.diversifier_.Release();
}
inline void SignBytes::set_allocated_diversifier(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.diversifier_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.diversifier_.IsDefault()) {
    _impl_.diversifier_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.SignBytes.diversifier)
}

// .ibc.lightclients.solomachine.v2.DataType data_type = 4 [json_name = "dataType"];
inline void SignBytes::clear_data_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_type_ = 0;
}
inline ::ibc::lightclients::solomachine::v2::DataType SignBytes::data_type() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.SignBytes.data_type)
  return _internal_data_type();
}
inline void SignBytes::set_data_type(::ibc::lightclients::solomachine::v2::DataType value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.SignBytes.data_type)
}
inline ::ibc::lightclients::solomachine::v2::DataType SignBytes::_internal_data_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ibc::lightclients::solomachine::v2::DataType>(_impl_.data_type_);
}
inline void SignBytes::_internal_set_data_type(::ibc::lightclients::solomachine::v2::DataType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_type_ = value;
}

// bytes data = 5 [json_name = "data"];
inline void SignBytes::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& SignBytes::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.SignBytes.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignBytes::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.SignBytes.data)
}
inline std::string* SignBytes::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.SignBytes.data)
  return _s;
}
inline const std::string& SignBytes::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void SignBytes::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* SignBytes::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* SignBytes::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.SignBytes.data)
  return _impl_.data_.Release();
}
inline void SignBytes::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.SignBytes.data)
}

// -------------------------------------------------------------------

// HeaderData

// .google.protobuf.Any new_pub_key = 1 [json_name = "newPubKey"];
inline bool HeaderData::has_new_pub_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_pub_key_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& HeaderData::_internal_new_pub_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Any* p = _impl_.new_pub_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& HeaderData::new_pub_key() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.HeaderData.new_pub_key)
  return _internal_new_pub_key();
}
inline void HeaderData::unsafe_arena_set_allocated_new_pub_key(::google::protobuf::Any* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.new_pub_key_);
  }
  _impl_.new_pub_key_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.solomachine.v2.HeaderData.new_pub_key)
}
inline ::google::protobuf::Any* HeaderData::release_new_pub_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* released = _impl_.new_pub_key_;
  _impl_.new_pub_key_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Any* HeaderData::unsafe_arena_release_new_pub_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.HeaderData.new_pub_key)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* temp = _impl_.new_pub_key_;
  _impl_.new_pub_key_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* HeaderData::_internal_mutable_new_pub_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.new_pub_key_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Any>(GetArena());
    _impl_.new_pub_key_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.new_pub_key_;
}
inline ::google::protobuf::Any* HeaderData::mutable_new_pub_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Any* _msg = _internal_mutable_new_pub_key();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.HeaderData.new_pub_key)
  return _msg;
}
inline void HeaderData::set_allocated_new_pub_key(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.new_pub_key_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.new_pub_key_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.HeaderData.new_pub_key)
}

// string new_diversifier = 2 [json_name = "newDiversifier"];
inline void HeaderData::clear_new_diversifier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_diversifier_.ClearToEmpty();
}
inline const std::string& HeaderData::new_diversifier() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.HeaderData.new_diversifier)
  return _internal_new_diversifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HeaderData::set_new_diversifier(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_diversifier_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.HeaderData.new_diversifier)
}
inline std::string* HeaderData::mutable_new_diversifier() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_new_diversifier();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.HeaderData.new_diversifier)
  return _s;
}
inline const std::string& HeaderData::_internal_new_diversifier() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_diversifier_.Get();
}
inline void HeaderData::_internal_set_new_diversifier(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_diversifier_.Set(value, GetArena());
}
inline std::string* HeaderData::_internal_mutable_new_diversifier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.new_diversifier_.Mutable( GetArena());
}
inline std::string* HeaderData::release_new_diversifier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.HeaderData.new_diversifier)
  return _impl_.new_diversifier_.Release();
}
inline void HeaderData::set_allocated_new_diversifier(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_diversifier_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.new_diversifier_.IsDefault()) {
    _impl_.new_diversifier_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.HeaderData.new_diversifier)
}

// -------------------------------------------------------------------

// ClientStateData

// bytes path = 1 [json_name = "path"];
inline void ClientStateData::clear_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.ClearToEmpty();
}
inline const std::string& ClientStateData::path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.ClientStateData.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientStateData::set_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.ClientStateData.path)
}
inline std::string* ClientStateData::mutable_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.ClientStateData.path)
  return _s;
}
inline const std::string& ClientStateData::_internal_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.path_.Get();
}
inline void ClientStateData::_internal_set_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(value, GetArena());
}
inline std::string* ClientStateData::_internal_mutable_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.path_.Mutable( GetArena());
}
inline std::string* ClientStateData::release_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.ClientStateData.path)
  return _impl_.path_.Release();
}
inline void ClientStateData::set_allocated_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.ClientStateData.path)
}

// .google.protobuf.Any client_state = 2 [json_name = "clientState"];
inline bool ClientStateData::has_client_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.client_state_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& ClientStateData::_internal_client_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Any* p = _impl_.client_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& ClientStateData::client_state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.ClientStateData.client_state)
  return _internal_client_state();
}
inline void ClientStateData::unsafe_arena_set_allocated_client_state(::google::protobuf::Any* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.client_state_);
  }
  _impl_.client_state_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.solomachine.v2.ClientStateData.client_state)
}
inline ::google::protobuf::Any* ClientStateData::release_client_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* released = _impl_.client_state_;
  _impl_.client_state_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Any* ClientStateData::unsafe_arena_release_client_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.ClientStateData.client_state)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* temp = _impl_.client_state_;
  _impl_.client_state_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* ClientStateData::_internal_mutable_client_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.client_state_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Any>(GetArena());
    _impl_.client_state_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.client_state_;
}
inline ::google::protobuf::Any* ClientStateData::mutable_client_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Any* _msg = _internal_mutable_client_state();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.ClientStateData.client_state)
  return _msg;
}
inline void ClientStateData::set_allocated_client_state(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.client_state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.client_state_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.ClientStateData.client_state)
}

// -------------------------------------------------------------------

// ConsensusStateData

// bytes path = 1 [json_name = "path"];
inline void ConsensusStateData::clear_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.ClearToEmpty();
}
inline const std::string& ConsensusStateData::path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.ConsensusStateData.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConsensusStateData::set_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.ConsensusStateData.path)
}
inline std::string* ConsensusStateData::mutable_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.ConsensusStateData.path)
  return _s;
}
inline const std::string& ConsensusStateData::_internal_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.path_.Get();
}
inline void ConsensusStateData::_internal_set_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(value, GetArena());
}
inline std::string* ConsensusStateData::_internal_mutable_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.path_.Mutable( GetArena());
}
inline std::string* ConsensusStateData::release_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.ConsensusStateData.path)
  return _impl_.path_.Release();
}
inline void ConsensusStateData::set_allocated_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.ConsensusStateData.path)
}

// .google.protobuf.Any consensus_state = 2 [json_name = "consensusState"];
inline bool ConsensusStateData::has_consensus_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.consensus_state_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& ConsensusStateData::_internal_consensus_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Any* p = _impl_.consensus_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& ConsensusStateData::consensus_state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.ConsensusStateData.consensus_state)
  return _internal_consensus_state();
}
inline void ConsensusStateData::unsafe_arena_set_allocated_consensus_state(::google::protobuf::Any* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.consensus_state_);
  }
  _impl_.consensus_state_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.solomachine.v2.ConsensusStateData.consensus_state)
}
inline ::google::protobuf::Any* ConsensusStateData::release_consensus_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* released = _impl_.consensus_state_;
  _impl_.consensus_state_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Any* ConsensusStateData::unsafe_arena_release_consensus_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.ConsensusStateData.consensus_state)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* temp = _impl_.consensus_state_;
  _impl_.consensus_state_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* ConsensusStateData::_internal_mutable_consensus_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.consensus_state_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Any>(GetArena());
    _impl_.consensus_state_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.consensus_state_;
}
inline ::google::protobuf::Any* ConsensusStateData::mutable_consensus_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Any* _msg = _internal_mutable_consensus_state();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.ConsensusStateData.consensus_state)
  return _msg;
}
inline void ConsensusStateData::set_allocated_consensus_state(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.consensus_state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.consensus_state_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.ConsensusStateData.consensus_state)
}

// -------------------------------------------------------------------

// ConnectionStateData

// bytes path = 1 [json_name = "path"];
inline void ConnectionStateData::clear_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.ClearToEmpty();
}
inline const std::string& ConnectionStateData::path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.ConnectionStateData.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConnectionStateData::set_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.ConnectionStateData.path)
}
inline std::string* ConnectionStateData::mutable_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.ConnectionStateData.path)
  return _s;
}
inline const std::string& ConnectionStateData::_internal_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.path_.Get();
}
inline void ConnectionStateData::_internal_set_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(value, GetArena());
}
inline std::string* ConnectionStateData::_internal_mutable_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.path_.Mutable( GetArena());
}
inline std::string* ConnectionStateData::release_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.ConnectionStateData.path)
  return _impl_.path_.Release();
}
inline void ConnectionStateData::set_allocated_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.ConnectionStateData.path)
}

// .ibc.core.connection.v1.ConnectionEnd connection = 2 [json_name = "connection"];
inline bool ConnectionStateData::has_connection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.connection_ != nullptr);
  return value;
}
inline const ::ibc::core::connection::v1::ConnectionEnd& ConnectionStateData::_internal_connection() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ibc::core::connection::v1::ConnectionEnd* p = _impl_.connection_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::connection::v1::ConnectionEnd&>(::ibc::core::connection::v1::_ConnectionEnd_default_instance_);
}
inline const ::ibc::core::connection::v1::ConnectionEnd& ConnectionStateData::connection() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.ConnectionStateData.connection)
  return _internal_connection();
}
inline void ConnectionStateData::unsafe_arena_set_allocated_connection(::ibc::core::connection::v1::ConnectionEnd* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.connection_);
  }
  _impl_.connection_ = reinterpret_cast<::ibc::core::connection::v1::ConnectionEnd*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.solomachine.v2.ConnectionStateData.connection)
}
inline ::ibc::core::connection::v1::ConnectionEnd* ConnectionStateData::release_connection() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::connection::v1::ConnectionEnd* released = _impl_.connection_;
  _impl_.connection_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ibc::core::connection::v1::ConnectionEnd* ConnectionStateData::unsafe_arena_release_connection() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.ConnectionStateData.connection)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::connection::v1::ConnectionEnd* temp = _impl_.connection_;
  _impl_.connection_ = nullptr;
  return temp;
}
inline ::ibc::core::connection::v1::ConnectionEnd* ConnectionStateData::_internal_mutable_connection() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.connection_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ibc::core::connection::v1::ConnectionEnd>(GetArena());
    _impl_.connection_ = reinterpret_cast<::ibc::core::connection::v1::ConnectionEnd*>(p);
  }
  return _impl_.connection_;
}
inline ::ibc::core::connection::v1::ConnectionEnd* ConnectionStateData::mutable_connection() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::ibc::core::connection::v1::ConnectionEnd* _msg = _internal_mutable_connection();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.ConnectionStateData.connection)
  return _msg;
}
inline void ConnectionStateData::set_allocated_connection(::ibc::core::connection::v1::ConnectionEnd* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.connection_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.connection_ = reinterpret_cast<::ibc::core::connection::v1::ConnectionEnd*>(value);
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.ConnectionStateData.connection)
}

// -------------------------------------------------------------------

// ChannelStateData

// bytes path = 1 [json_name = "path"];
inline void ChannelStateData::clear_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.ClearToEmpty();
}
inline const std::string& ChannelStateData::path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.ChannelStateData.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChannelStateData::set_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.ChannelStateData.path)
}
inline std::string* ChannelStateData::mutable_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.ChannelStateData.path)
  return _s;
}
inline const std::string& ChannelStateData::_internal_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.path_.Get();
}
inline void ChannelStateData::_internal_set_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(value, GetArena());
}
inline std::string* ChannelStateData::_internal_mutable_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.path_.Mutable( GetArena());
}
inline std::string* ChannelStateData::release_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.ChannelStateData.path)
  return _impl_.path_.Release();
}
inline void ChannelStateData::set_allocated_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.ChannelStateData.path)
}

// .ibc.core.channel.v1.Channel channel = 2 [json_name = "channel"];
inline bool ChannelStateData::has_channel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.channel_ != nullptr);
  return value;
}
inline const ::ibc::core::channel::v1::Channel& ChannelStateData::_internal_channel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ibc::core::channel::v1::Channel* p = _impl_.channel_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::channel::v1::Channel&>(::ibc::core::channel::v1::_Channel_default_instance_);
}
inline const ::ibc::core::channel::v1::Channel& ChannelStateData::channel() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.ChannelStateData.channel)
  return _internal_channel();
}
inline void ChannelStateData::unsafe_arena_set_allocated_channel(::ibc::core::channel::v1::Channel* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.channel_);
  }
  _impl_.channel_ = reinterpret_cast<::ibc::core::channel::v1::Channel*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.solomachine.v2.ChannelStateData.channel)
}
inline ::ibc::core::channel::v1::Channel* ChannelStateData::release_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::channel::v1::Channel* released = _impl_.channel_;
  _impl_.channel_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ibc::core::channel::v1::Channel* ChannelStateData::unsafe_arena_release_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.ChannelStateData.channel)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::channel::v1::Channel* temp = _impl_.channel_;
  _impl_.channel_ = nullptr;
  return temp;
}
inline ::ibc::core::channel::v1::Channel* ChannelStateData::_internal_mutable_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.channel_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ibc::core::channel::v1::Channel>(GetArena());
    _impl_.channel_ = reinterpret_cast<::ibc::core::channel::v1::Channel*>(p);
  }
  return _impl_.channel_;
}
inline ::ibc::core::channel::v1::Channel* ChannelStateData::mutable_channel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::ibc::core::channel::v1::Channel* _msg = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.ChannelStateData.channel)
  return _msg;
}
inline void ChannelStateData::set_allocated_channel(::ibc::core::channel::v1::Channel* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.channel_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.channel_ = reinterpret_cast<::ibc::core::channel::v1::Channel*>(value);
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.ChannelStateData.channel)
}

// -------------------------------------------------------------------

// PacketCommitmentData

// bytes path = 1 [json_name = "path"];
inline void PacketCommitmentData::clear_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.ClearToEmpty();
}
inline const std::string& PacketCommitmentData::path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.PacketCommitmentData.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PacketCommitmentData::set_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.PacketCommitmentData.path)
}
inline std::string* PacketCommitmentData::mutable_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.PacketCommitmentData.path)
  return _s;
}
inline const std::string& PacketCommitmentData::_internal_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.path_.Get();
}
inline void PacketCommitmentData::_internal_set_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(value, GetArena());
}
inline std::string* PacketCommitmentData::_internal_mutable_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.path_.Mutable( GetArena());
}
inline std::string* PacketCommitmentData::release_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.PacketCommitmentData.path)
  return _impl_.path_.Release();
}
inline void PacketCommitmentData::set_allocated_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.PacketCommitmentData.path)
}

// bytes commitment = 2 [json_name = "commitment"];
inline void PacketCommitmentData::clear_commitment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.commitment_.ClearToEmpty();
}
inline const std::string& PacketCommitmentData::commitment() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.PacketCommitmentData.commitment)
  return _internal_commitment();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PacketCommitmentData::set_commitment(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.commitment_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.PacketCommitmentData.commitment)
}
inline std::string* PacketCommitmentData::mutable_commitment() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_commitment();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.PacketCommitmentData.commitment)
  return _s;
}
inline const std::string& PacketCommitmentData::_internal_commitment() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.commitment_.Get();
}
inline void PacketCommitmentData::_internal_set_commitment(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.commitment_.Set(value, GetArena());
}
inline std::string* PacketCommitmentData::_internal_mutable_commitment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.commitment_.Mutable( GetArena());
}
inline std::string* PacketCommitmentData::release_commitment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.PacketCommitmentData.commitment)
  return _impl_.commitment_.Release();
}
inline void PacketCommitmentData::set_allocated_commitment(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.commitment_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.commitment_.IsDefault()) {
    _impl_.commitment_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.PacketCommitmentData.commitment)
}

// -------------------------------------------------------------------

// PacketAcknowledgementData

// bytes path = 1 [json_name = "path"];
inline void PacketAcknowledgementData::clear_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.ClearToEmpty();
}
inline const std::string& PacketAcknowledgementData::path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.PacketAcknowledgementData.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PacketAcknowledgementData::set_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.PacketAcknowledgementData.path)
}
inline std::string* PacketAcknowledgementData::mutable_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.PacketAcknowledgementData.path)
  return _s;
}
inline const std::string& PacketAcknowledgementData::_internal_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.path_.Get();
}
inline void PacketAcknowledgementData::_internal_set_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(value, GetArena());
}
inline std::string* PacketAcknowledgementData::_internal_mutable_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.path_.Mutable( GetArena());
}
inline std::string* PacketAcknowledgementData::release_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.PacketAcknowledgementData.path)
  return _impl_.path_.Release();
}
inline void PacketAcknowledgementData::set_allocated_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.PacketAcknowledgementData.path)
}

// bytes acknowledgement = 2 [json_name = "acknowledgement"];
inline void PacketAcknowledgementData::clear_acknowledgement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acknowledgement_.ClearToEmpty();
}
inline const std::string& PacketAcknowledgementData::acknowledgement() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.PacketAcknowledgementData.acknowledgement)
  return _internal_acknowledgement();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PacketAcknowledgementData::set_acknowledgement(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acknowledgement_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.PacketAcknowledgementData.acknowledgement)
}
inline std::string* PacketAcknowledgementData::mutable_acknowledgement() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_acknowledgement();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.PacketAcknowledgementData.acknowledgement)
  return _s;
}
inline const std::string& PacketAcknowledgementData::_internal_acknowledgement() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acknowledgement_.Get();
}
inline void PacketAcknowledgementData::_internal_set_acknowledgement(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acknowledgement_.Set(value, GetArena());
}
inline std::string* PacketAcknowledgementData::_internal_mutable_acknowledgement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.acknowledgement_.Mutable( GetArena());
}
inline std::string* PacketAcknowledgementData::release_acknowledgement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.PacketAcknowledgementData.acknowledgement)
  return _impl_.acknowledgement_.Release();
}
inline void PacketAcknowledgementData::set_allocated_acknowledgement(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acknowledgement_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.acknowledgement_.IsDefault()) {
    _impl_.acknowledgement_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.PacketAcknowledgementData.acknowledgement)
}

// -------------------------------------------------------------------

// PacketReceiptAbsenceData

// bytes path = 1 [json_name = "path"];
inline void PacketReceiptAbsenceData::clear_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.ClearToEmpty();
}
inline const std::string& PacketReceiptAbsenceData::path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PacketReceiptAbsenceData::set_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData.path)
}
inline std::string* PacketReceiptAbsenceData::mutable_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData.path)
  return _s;
}
inline const std::string& PacketReceiptAbsenceData::_internal_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.path_.Get();
}
inline void PacketReceiptAbsenceData::_internal_set_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(value, GetArena());
}
inline std::string* PacketReceiptAbsenceData::_internal_mutable_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.path_.Mutable( GetArena());
}
inline std::string* PacketReceiptAbsenceData::release_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData.path)
  return _impl_.path_.Release();
}
inline void PacketReceiptAbsenceData::set_allocated_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData.path)
}

// -------------------------------------------------------------------

// NextSequenceRecvData

// bytes path = 1 [json_name = "path"];
inline void NextSequenceRecvData::clear_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.ClearToEmpty();
}
inline const std::string& NextSequenceRecvData::path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.NextSequenceRecvData.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NextSequenceRecvData::set_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.NextSequenceRecvData.path)
}
inline std::string* NextSequenceRecvData::mutable_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v2.NextSequenceRecvData.path)
  return _s;
}
inline const std::string& NextSequenceRecvData::_internal_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.path_.Get();
}
inline void NextSequenceRecvData::_internal_set_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(value, GetArena());
}
inline std::string* NextSequenceRecvData::_internal_mutable_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.path_.Mutable( GetArena());
}
inline std::string* NextSequenceRecvData::release_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v2.NextSequenceRecvData.path)
  return _impl_.path_.Release();
}
inline void NextSequenceRecvData::set_allocated_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v2.NextSequenceRecvData.path)
}

// uint64 next_seq_recv = 2 [json_name = "nextSeqRecv"];
inline void NextSequenceRecvData::clear_next_seq_recv() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_seq_recv_ = ::uint64_t{0u};
}
inline ::uint64_t NextSequenceRecvData::next_seq_recv() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v2.NextSequenceRecvData.next_seq_recv)
  return _internal_next_seq_recv();
}
inline void NextSequenceRecvData::set_next_seq_recv(::uint64_t value) {
  _internal_set_next_seq_recv(value);
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v2.NextSequenceRecvData.next_seq_recv)
}
inline ::uint64_t NextSequenceRecvData::_internal_next_seq_recv() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.next_seq_recv_;
}
inline void NextSequenceRecvData::_internal_set_next_seq_recv(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_seq_recv_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace solomachine
}  // namespace lightclients
}  // namespace ibc


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::ibc::lightclients::solomachine::v2::DataType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ibc::lightclients::solomachine::v2::DataType>() {
  return ::ibc::lightclients::solomachine::v2::DataType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_2epb_2eh
