// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ibc/core/channel/v1/channel.proto
// Protobuf C++ Version: 5.29.4

#ifndef ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto_2epb_2eh
#define ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "ibc/core/client/v1/client.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto;
namespace ibc {
namespace core {
namespace channel {
namespace v1 {
class Acknowledgement;
struct AcknowledgementDefaultTypeInternal;
extern AcknowledgementDefaultTypeInternal _Acknowledgement_default_instance_;
class Channel;
struct ChannelDefaultTypeInternal;
extern ChannelDefaultTypeInternal _Channel_default_instance_;
class Counterparty;
struct CounterpartyDefaultTypeInternal;
extern CounterpartyDefaultTypeInternal _Counterparty_default_instance_;
class IdentifiedChannel;
struct IdentifiedChannelDefaultTypeInternal;
extern IdentifiedChannelDefaultTypeInternal _IdentifiedChannel_default_instance_;
class Packet;
struct PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
class PacketId;
struct PacketIdDefaultTypeInternal;
extern PacketIdDefaultTypeInternal _PacketId_default_instance_;
class PacketState;
struct PacketStateDefaultTypeInternal;
extern PacketStateDefaultTypeInternal _PacketState_default_instance_;
class Timeout;
struct TimeoutDefaultTypeInternal;
extern TimeoutDefaultTypeInternal _Timeout_default_instance_;
}  // namespace v1
}  // namespace channel
}  // namespace core
}  // namespace ibc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ibc {
namespace core {
namespace channel {
namespace v1 {
enum State : int {
  STATE_UNINITIALIZED_UNSPECIFIED = 0,
  STATE_INIT = 1,
  STATE_TRYOPEN = 2,
  STATE_OPEN = 3,
  STATE_CLOSED = 4,
  State_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  State_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool State_IsValid(int value);
extern const uint32_t State_internal_data_[];
constexpr State State_MIN = static_cast<State>(0);
constexpr State State_MAX = static_cast<State>(4);
constexpr int State_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
State_descriptor();
template <typename T>
const std::string& State_Name(T value) {
  static_assert(std::is_same<T, State>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to State_Name().");
  return State_Name(static_cast<State>(value));
}
template <>
inline const std::string& State_Name(State value) {
  return ::google::protobuf::internal::NameOfDenseEnum<State_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool State_Parse(absl::string_view name, State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<State>(
      State_descriptor(), name, value);
}
enum Order : int {
  ORDER_NONE_UNSPECIFIED = 0,
  ORDER_UNORDERED = 1,
  ORDER_ORDERED = 2,
  Order_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Order_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Order_IsValid(int value);
extern const uint32_t Order_internal_data_[];
constexpr Order Order_MIN = static_cast<Order>(0);
constexpr Order Order_MAX = static_cast<Order>(2);
constexpr int Order_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
Order_descriptor();
template <typename T>
const std::string& Order_Name(T value) {
  static_assert(std::is_same<T, Order>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Order_Name().");
  return Order_Name(static_cast<Order>(value));
}
template <>
inline const std::string& Order_Name(Order value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Order_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Order_Parse(absl::string_view name, Order* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Order>(
      Order_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PacketState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.PacketState) */ {
 public:
  inline PacketState() : PacketState(nullptr) {}
  ~PacketState() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PacketState* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PacketState));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PacketState(
      ::google::protobuf::internal::ConstantInitialized);

  inline PacketState(const PacketState& from) : PacketState(nullptr, from) {}
  inline PacketState(PacketState&& from) noexcept
      : PacketState(nullptr, std::move(from)) {}
  inline PacketState& operator=(const PacketState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketState& operator=(PacketState&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PacketState& default_instance() {
    return *internal_default_instance();
  }
  static inline const PacketState* internal_default_instance() {
    return reinterpret_cast<const PacketState*>(
        &_PacketState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(PacketState& a, PacketState& b) { a.Swap(&b); }
  inline void Swap(PacketState* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PacketState* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PacketState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PacketState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PacketState& from) { PacketState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PacketState* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.core.channel.v1.PacketState"; }

 protected:
  explicit PacketState(::google::protobuf::Arena* arena);
  PacketState(::google::protobuf::Arena* arena, const PacketState& from);
  PacketState(::google::protobuf::Arena* arena, PacketState&& from) noexcept
      : PacketState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPortIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kDataFieldNumber = 4,
    kSequenceFieldNumber = 3,
  };
  // string port_id = 1 [json_name = "portId"];
  void clear_port_id() ;
  const std::string& port_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port_id(Arg_&& arg, Args_... args);
  std::string* mutable_port_id();
  PROTOBUF_NODISCARD std::string* release_port_id();
  void set_allocated_port_id(std::string* value);

  private:
  const std::string& _internal_port_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port_id(
      const std::string& value);
  std::string* _internal_mutable_port_id();

  public:
  // string channel_id = 2 [json_name = "channelId"];
  void clear_channel_id() ;
  const std::string& channel_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* value);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // bytes data = 4 [json_name = "data"];
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // uint64 sequence = 3 [json_name = "sequence"];
  void clear_sequence() ;
  ::uint64_t sequence() const;
  void set_sequence(::uint64_t value);

  private:
  ::uint64_t _internal_sequence() const;
  void _internal_set_sequence(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.PacketState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      57, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PacketState& from_msg);
    ::google::protobuf::internal::ArenaStringPtr port_id_;
    ::google::protobuf::internal::ArenaStringPtr channel_id_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::uint64_t sequence_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto;
};
// -------------------------------------------------------------------

class PacketId final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.PacketId) */ {
 public:
  inline PacketId() : PacketId(nullptr) {}
  ~PacketId() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PacketId* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PacketId));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PacketId(
      ::google::protobuf::internal::ConstantInitialized);

  inline PacketId(const PacketId& from) : PacketId(nullptr, from) {}
  inline PacketId(PacketId&& from) noexcept
      : PacketId(nullptr, std::move(from)) {}
  inline PacketId& operator=(const PacketId& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketId& operator=(PacketId&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PacketId& default_instance() {
    return *internal_default_instance();
  }
  static inline const PacketId* internal_default_instance() {
    return reinterpret_cast<const PacketId*>(
        &_PacketId_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(PacketId& a, PacketId& b) { a.Swap(&b); }
  inline void Swap(PacketId* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketId* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PacketId* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PacketId>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PacketId& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PacketId& from) { PacketId::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PacketId* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.core.channel.v1.PacketId"; }

 protected:
  explicit PacketId(::google::protobuf::Arena* arena);
  PacketId(::google::protobuf::Arena* arena, const PacketId& from);
  PacketId(::google::protobuf::Arena* arena, PacketId&& from) noexcept
      : PacketId(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPortIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kSequenceFieldNumber = 3,
  };
  // string port_id = 1 [json_name = "portId"];
  void clear_port_id() ;
  const std::string& port_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port_id(Arg_&& arg, Args_... args);
  std::string* mutable_port_id();
  PROTOBUF_NODISCARD std::string* release_port_id();
  void set_allocated_port_id(std::string* value);

  private:
  const std::string& _internal_port_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port_id(
      const std::string& value);
  std::string* _internal_mutable_port_id();

  public:
  // string channel_id = 2 [json_name = "channelId"];
  void clear_channel_id() ;
  const std::string& channel_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* value);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // uint64 sequence = 3 [json_name = "sequence"];
  void clear_sequence() ;
  ::uint64_t sequence() const;
  void set_sequence(::uint64_t value);

  private:
  ::uint64_t _internal_sequence() const;
  void _internal_set_sequence(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.PacketId)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      54, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PacketId& from_msg);
    ::google::protobuf::internal::ArenaStringPtr port_id_;
    ::google::protobuf::internal::ArenaStringPtr channel_id_;
    ::uint64_t sequence_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto;
};
// -------------------------------------------------------------------

class Counterparty final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.Counterparty) */ {
 public:
  inline Counterparty() : Counterparty(nullptr) {}
  ~Counterparty() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Counterparty* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Counterparty));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Counterparty(
      ::google::protobuf::internal::ConstantInitialized);

  inline Counterparty(const Counterparty& from) : Counterparty(nullptr, from) {}
  inline Counterparty(Counterparty&& from) noexcept
      : Counterparty(nullptr, std::move(from)) {}
  inline Counterparty& operator=(const Counterparty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Counterparty& operator=(Counterparty&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Counterparty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Counterparty* internal_default_instance() {
    return reinterpret_cast<const Counterparty*>(
        &_Counterparty_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Counterparty& a, Counterparty& b) { a.Swap(&b); }
  inline void Swap(Counterparty* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Counterparty* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Counterparty* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Counterparty>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Counterparty& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Counterparty& from) { Counterparty::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Counterparty* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.core.channel.v1.Counterparty"; }

 protected:
  explicit Counterparty(::google::protobuf::Arena* arena);
  Counterparty(::google::protobuf::Arena* arena, const Counterparty& from);
  Counterparty(::google::protobuf::Arena* arena, Counterparty&& from) noexcept
      : Counterparty(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPortIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
  };
  // string port_id = 1 [json_name = "portId"];
  void clear_port_id() ;
  const std::string& port_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port_id(Arg_&& arg, Args_... args);
  std::string* mutable_port_id();
  PROTOBUF_NODISCARD std::string* release_port_id();
  void set_allocated_port_id(std::string* value);

  private:
  const std::string& _internal_port_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port_id(
      const std::string& value);
  std::string* _internal_mutable_port_id();

  public:
  // string channel_id = 2 [json_name = "channelId"];
  void clear_channel_id() ;
  const std::string& channel_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* value);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.Counterparty)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      58, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Counterparty& from_msg);
    ::google::protobuf::internal::ArenaStringPtr port_id_;
    ::google::protobuf::internal::ArenaStringPtr channel_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto;
};
// -------------------------------------------------------------------

class Acknowledgement final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.Acknowledgement) */ {
 public:
  inline Acknowledgement() : Acknowledgement(nullptr) {}
  ~Acknowledgement() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Acknowledgement* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Acknowledgement));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Acknowledgement(
      ::google::protobuf::internal::ConstantInitialized);

  inline Acknowledgement(const Acknowledgement& from) : Acknowledgement(nullptr, from) {}
  inline Acknowledgement(Acknowledgement&& from) noexcept
      : Acknowledgement(nullptr, std::move(from)) {}
  inline Acknowledgement& operator=(const Acknowledgement& from) {
    CopyFrom(from);
    return *this;
  }
  inline Acknowledgement& operator=(Acknowledgement&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Acknowledgement& default_instance() {
    return *internal_default_instance();
  }
  enum ResponseCase {
    kResult = 21,
    kError = 22,
    RESPONSE_NOT_SET = 0,
  };
  static inline const Acknowledgement* internal_default_instance() {
    return reinterpret_cast<const Acknowledgement*>(
        &_Acknowledgement_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(Acknowledgement& a, Acknowledgement& b) { a.Swap(&b); }
  inline void Swap(Acknowledgement* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Acknowledgement* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Acknowledgement* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Acknowledgement>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Acknowledgement& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Acknowledgement& from) { Acknowledgement::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Acknowledgement* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.core.channel.v1.Acknowledgement"; }

 protected:
  explicit Acknowledgement(::google::protobuf::Arena* arena);
  Acknowledgement(::google::protobuf::Arena* arena, const Acknowledgement& from);
  Acknowledgement(::google::protobuf::Arena* arena, Acknowledgement&& from) noexcept
      : Acknowledgement(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResultFieldNumber = 21,
    kErrorFieldNumber = 22,
  };
  // bytes result = 21 [json_name = "result"];
  bool has_result() const;
  void clear_result() ;
  const std::string& result() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_result(Arg_&& arg, Args_... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* value);

  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(
      const std::string& value);
  std::string* _internal_mutable_result();

  public:
  // string error = 22 [json_name = "error"];
  bool has_error() const;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* value);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.Acknowledgement)
 private:
  class _Internal;
  void set_has_result();
  void set_has_error();
  inline bool has_response() const;
  inline void clear_has_response();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 0,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Acknowledgement& from_msg);
    union ResponseUnion {
      constexpr ResponseUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr result_;
      ::google::protobuf::internal::ArenaStringPtr error_;
    } response_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto;
};
// -------------------------------------------------------------------

class Timeout final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.Timeout) */ {
 public:
  inline Timeout() : Timeout(nullptr) {}
  ~Timeout() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Timeout* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Timeout));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Timeout(
      ::google::protobuf::internal::ConstantInitialized);

  inline Timeout(const Timeout& from) : Timeout(nullptr, from) {}
  inline Timeout(Timeout&& from) noexcept
      : Timeout(nullptr, std::move(from)) {}
  inline Timeout& operator=(const Timeout& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timeout& operator=(Timeout&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Timeout& default_instance() {
    return *internal_default_instance();
  }
  static inline const Timeout* internal_default_instance() {
    return reinterpret_cast<const Timeout*>(
        &_Timeout_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(Timeout& a, Timeout& b) { a.Swap(&b); }
  inline void Swap(Timeout* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Timeout* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Timeout* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Timeout>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Timeout& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Timeout& from) { Timeout::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Timeout* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.core.channel.v1.Timeout"; }

 protected:
  explicit Timeout(::google::protobuf::Arena* arena);
  Timeout(::google::protobuf::Arena* arena, const Timeout& from);
  Timeout(::google::protobuf::Arena* arena, Timeout&& from) noexcept
      : Timeout(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeightFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // .ibc.core.client.v1.Height height = 1 [json_name = "height", (.gogoproto.nullable) = false];
  bool has_height() const;
  void clear_height() ;
  const ::ibc::core::client::v1::Height& height() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::Height* release_height();
  ::ibc::core::client::v1::Height* mutable_height();
  void set_allocated_height(::ibc::core::client::v1::Height* value);
  void unsafe_arena_set_allocated_height(::ibc::core::client::v1::Height* value);
  ::ibc::core::client::v1::Height* unsafe_arena_release_height();

  private:
  const ::ibc::core::client::v1::Height& _internal_height() const;
  ::ibc::core::client::v1::Height* _internal_mutable_height();

  public:
  // uint64 timestamp = 2 [json_name = "timestamp"];
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.Timeout)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Timeout& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::ibc::core::client::v1::Height* height_;
    ::uint64_t timestamp_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto;
};
// -------------------------------------------------------------------

class Packet final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.Packet) */ {
 public:
  inline Packet() : Packet(nullptr) {}
  ~Packet() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Packet* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Packet));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Packet(
      ::google::protobuf::internal::ConstantInitialized);

  inline Packet(const Packet& from) : Packet(nullptr, from) {}
  inline Packet(Packet&& from) noexcept
      : Packet(nullptr, std::move(from)) {}
  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet& operator=(Packet&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Packet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
        &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Packet& a, Packet& b) { a.Swap(&b); }
  inline void Swap(Packet* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packet* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Packet* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Packet>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Packet& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Packet& from) { Packet::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Packet* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.core.channel.v1.Packet"; }

 protected:
  explicit Packet(::google::protobuf::Arena* arena);
  Packet(::google::protobuf::Arena* arena, const Packet& from);
  Packet(::google::protobuf::Arena* arena, Packet&& from) noexcept
      : Packet(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSourcePortFieldNumber = 2,
    kSourceChannelFieldNumber = 3,
    kDestinationPortFieldNumber = 4,
    kDestinationChannelFieldNumber = 5,
    kDataFieldNumber = 6,
    kTimeoutHeightFieldNumber = 7,
    kSequenceFieldNumber = 1,
    kTimeoutTimestampFieldNumber = 8,
  };
  // string source_port = 2 [json_name = "sourcePort"];
  void clear_source_port() ;
  const std::string& source_port() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source_port(Arg_&& arg, Args_... args);
  std::string* mutable_source_port();
  PROTOBUF_NODISCARD std::string* release_source_port();
  void set_allocated_source_port(std::string* value);

  private:
  const std::string& _internal_source_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_port(
      const std::string& value);
  std::string* _internal_mutable_source_port();

  public:
  // string source_channel = 3 [json_name = "sourceChannel"];
  void clear_source_channel() ;
  const std::string& source_channel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source_channel(Arg_&& arg, Args_... args);
  std::string* mutable_source_channel();
  PROTOBUF_NODISCARD std::string* release_source_channel();
  void set_allocated_source_channel(std::string* value);

  private:
  const std::string& _internal_source_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_channel(
      const std::string& value);
  std::string* _internal_mutable_source_channel();

  public:
  // string destination_port = 4 [json_name = "destinationPort"];
  void clear_destination_port() ;
  const std::string& destination_port() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_destination_port(Arg_&& arg, Args_... args);
  std::string* mutable_destination_port();
  PROTOBUF_NODISCARD std::string* release_destination_port();
  void set_allocated_destination_port(std::string* value);

  private:
  const std::string& _internal_destination_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination_port(
      const std::string& value);
  std::string* _internal_mutable_destination_port();

  public:
  // string destination_channel = 5 [json_name = "destinationChannel"];
  void clear_destination_channel() ;
  const std::string& destination_channel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_destination_channel(Arg_&& arg, Args_... args);
  std::string* mutable_destination_channel();
  PROTOBUF_NODISCARD std::string* release_destination_channel();
  void set_allocated_destination_channel(std::string* value);

  private:
  const std::string& _internal_destination_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination_channel(
      const std::string& value);
  std::string* _internal_mutable_destination_channel();

  public:
  // bytes data = 6 [json_name = "data"];
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // .ibc.core.client.v1.Height timeout_height = 7 [json_name = "timeoutHeight", (.gogoproto.nullable) = false];
  bool has_timeout_height() const;
  void clear_timeout_height() ;
  const ::ibc::core::client::v1::Height& timeout_height() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::Height* release_timeout_height();
  ::ibc::core::client::v1::Height* mutable_timeout_height();
  void set_allocated_timeout_height(::ibc::core::client::v1::Height* value);
  void unsafe_arena_set_allocated_timeout_height(::ibc::core::client::v1::Height* value);
  ::ibc::core::client::v1::Height* unsafe_arena_release_timeout_height();

  private:
  const ::ibc::core::client::v1::Height& _internal_timeout_height() const;
  ::ibc::core::client::v1::Height* _internal_mutable_timeout_height();

  public:
  // uint64 sequence = 1 [json_name = "sequence"];
  void clear_sequence() ;
  ::uint64_t sequence() const;
  void set_sequence(::uint64_t value);

  private:
  ::uint64_t _internal_sequence() const;
  void _internal_set_sequence(::uint64_t value);

  public:
  // uint64 timeout_timestamp = 8 [json_name = "timeoutTimestamp"];
  void clear_timeout_timestamp() ;
  ::uint64_t timeout_timestamp() const;
  void set_timeout_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timeout_timestamp() const;
  void _internal_set_timeout_timestamp(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.Packet)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 1,
      103, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Packet& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr source_port_;
    ::google::protobuf::internal::ArenaStringPtr source_channel_;
    ::google::protobuf::internal::ArenaStringPtr destination_port_;
    ::google::protobuf::internal::ArenaStringPtr destination_channel_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::ibc::core::client::v1::Height* timeout_height_;
    ::uint64_t sequence_;
    ::uint64_t timeout_timestamp_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto;
};
// -------------------------------------------------------------------

class IdentifiedChannel final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.IdentifiedChannel) */ {
 public:
  inline IdentifiedChannel() : IdentifiedChannel(nullptr) {}
  ~IdentifiedChannel() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(IdentifiedChannel* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(IdentifiedChannel));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IdentifiedChannel(
      ::google::protobuf::internal::ConstantInitialized);

  inline IdentifiedChannel(const IdentifiedChannel& from) : IdentifiedChannel(nullptr, from) {}
  inline IdentifiedChannel(IdentifiedChannel&& from) noexcept
      : IdentifiedChannel(nullptr, std::move(from)) {}
  inline IdentifiedChannel& operator=(const IdentifiedChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline IdentifiedChannel& operator=(IdentifiedChannel&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IdentifiedChannel& default_instance() {
    return *internal_default_instance();
  }
  static inline const IdentifiedChannel* internal_default_instance() {
    return reinterpret_cast<const IdentifiedChannel*>(
        &_IdentifiedChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(IdentifiedChannel& a, IdentifiedChannel& b) { a.Swap(&b); }
  inline void Swap(IdentifiedChannel* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IdentifiedChannel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IdentifiedChannel* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<IdentifiedChannel>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IdentifiedChannel& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const IdentifiedChannel& from) { IdentifiedChannel::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(IdentifiedChannel* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.core.channel.v1.IdentifiedChannel"; }

 protected:
  explicit IdentifiedChannel(::google::protobuf::Arena* arena);
  IdentifiedChannel(::google::protobuf::Arena* arena, const IdentifiedChannel& from);
  IdentifiedChannel(::google::protobuf::Arena* arena, IdentifiedChannel&& from) noexcept
      : IdentifiedChannel(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConnectionHopsFieldNumber = 4,
    kVersionFieldNumber = 5,
    kPortIdFieldNumber = 6,
    kChannelIdFieldNumber = 7,
    kCounterpartyFieldNumber = 3,
    kStateFieldNumber = 1,
    kOrderingFieldNumber = 2,
  };
  // repeated string connection_hops = 4 [json_name = "connectionHops"];
  int connection_hops_size() const;
  private:
  int _internal_connection_hops_size() const;

  public:
  void clear_connection_hops() ;
  const std::string& connection_hops(int index) const;
  std::string* mutable_connection_hops(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_connection_hops(int index, Arg_&& value, Args_... args);
  std::string* add_connection_hops();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_connection_hops(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& connection_hops() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_connection_hops();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_connection_hops() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_connection_hops();

  public:
  // string version = 5 [json_name = "version"];
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // string port_id = 6 [json_name = "portId"];
  void clear_port_id() ;
  const std::string& port_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port_id(Arg_&& arg, Args_... args);
  std::string* mutable_port_id();
  PROTOBUF_NODISCARD std::string* release_port_id();
  void set_allocated_port_id(std::string* value);

  private:
  const std::string& _internal_port_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port_id(
      const std::string& value);
  std::string* _internal_mutable_port_id();

  public:
  // string channel_id = 7 [json_name = "channelId"];
  void clear_channel_id() ;
  const std::string& channel_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* value);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // .ibc.core.channel.v1.Counterparty counterparty = 3 [json_name = "counterparty", (.gogoproto.nullable) = false];
  bool has_counterparty() const;
  void clear_counterparty() ;
  const ::ibc::core::channel::v1::Counterparty& counterparty() const;
  PROTOBUF_NODISCARD ::ibc::core::channel::v1::Counterparty* release_counterparty();
  ::ibc::core::channel::v1::Counterparty* mutable_counterparty();
  void set_allocated_counterparty(::ibc::core::channel::v1::Counterparty* value);
  void unsafe_arena_set_allocated_counterparty(::ibc::core::channel::v1::Counterparty* value);
  ::ibc::core::channel::v1::Counterparty* unsafe_arena_release_counterparty();

  private:
  const ::ibc::core::channel::v1::Counterparty& _internal_counterparty() const;
  ::ibc::core::channel::v1::Counterparty* _internal_mutable_counterparty();

  public:
  // .ibc.core.channel.v1.State state = 1 [json_name = "state"];
  void clear_state() ;
  ::ibc::core::channel::v1::State state() const;
  void set_state(::ibc::core::channel::v1::State value);

  private:
  ::ibc::core::channel::v1::State _internal_state() const;
  void _internal_set_state(::ibc::core::channel::v1::State value);

  public:
  // .ibc.core.channel.v1.Order ordering = 2 [json_name = "ordering"];
  void clear_ordering() ;
  ::ibc::core::channel::v1::Order ordering() const;
  void set_ordering(::ibc::core::channel::v1::Order value);

  private:
  ::ibc::core::channel::v1::Order _internal_ordering() const;
  void _internal_set_ordering(::ibc::core::channel::v1::Order value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.IdentifiedChannel)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      85, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const IdentifiedChannel& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> connection_hops_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::ArenaStringPtr port_id_;
    ::google::protobuf::internal::ArenaStringPtr channel_id_;
    ::ibc::core::channel::v1::Counterparty* counterparty_;
    int state_;
    int ordering_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto;
};
// -------------------------------------------------------------------

class Channel final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.Channel) */ {
 public:
  inline Channel() : Channel(nullptr) {}
  ~Channel() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Channel* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Channel));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Channel(
      ::google::protobuf::internal::ConstantInitialized);

  inline Channel(const Channel& from) : Channel(nullptr, from) {}
  inline Channel(Channel&& from) noexcept
      : Channel(nullptr, std::move(from)) {}
  inline Channel& operator=(const Channel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Channel& operator=(Channel&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Channel& default_instance() {
    return *internal_default_instance();
  }
  static inline const Channel* internal_default_instance() {
    return reinterpret_cast<const Channel*>(
        &_Channel_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Channel& a, Channel& b) { a.Swap(&b); }
  inline void Swap(Channel* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Channel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Channel* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Channel>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Channel& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Channel& from) { Channel::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Channel* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.core.channel.v1.Channel"; }

 protected:
  explicit Channel(::google::protobuf::Arena* arena);
  Channel(::google::protobuf::Arena* arena, const Channel& from);
  Channel(::google::protobuf::Arena* arena, Channel&& from) noexcept
      : Channel(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConnectionHopsFieldNumber = 4,
    kVersionFieldNumber = 5,
    kCounterpartyFieldNumber = 3,
    kStateFieldNumber = 1,
    kOrderingFieldNumber = 2,
  };
  // repeated string connection_hops = 4 [json_name = "connectionHops"];
  int connection_hops_size() const;
  private:
  int _internal_connection_hops_size() const;

  public:
  void clear_connection_hops() ;
  const std::string& connection_hops(int index) const;
  std::string* mutable_connection_hops(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_connection_hops(int index, Arg_&& value, Args_... args);
  std::string* add_connection_hops();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_connection_hops(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& connection_hops() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_connection_hops();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_connection_hops() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_connection_hops();

  public:
  // string version = 5 [json_name = "version"];
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // .ibc.core.channel.v1.Counterparty counterparty = 3 [json_name = "counterparty", (.gogoproto.nullable) = false];
  bool has_counterparty() const;
  void clear_counterparty() ;
  const ::ibc::core::channel::v1::Counterparty& counterparty() const;
  PROTOBUF_NODISCARD ::ibc::core::channel::v1::Counterparty* release_counterparty();
  ::ibc::core::channel::v1::Counterparty* mutable_counterparty();
  void set_allocated_counterparty(::ibc::core::channel::v1::Counterparty* value);
  void unsafe_arena_set_allocated_counterparty(::ibc::core::channel::v1::Counterparty* value);
  ::ibc::core::channel::v1::Counterparty* unsafe_arena_release_counterparty();

  private:
  const ::ibc::core::channel::v1::Counterparty& _internal_counterparty() const;
  ::ibc::core::channel::v1::Counterparty* _internal_mutable_counterparty();

  public:
  // .ibc.core.channel.v1.State state = 1 [json_name = "state"];
  void clear_state() ;
  ::ibc::core::channel::v1::State state() const;
  void set_state(::ibc::core::channel::v1::State value);

  private:
  ::ibc::core::channel::v1::State _internal_state() const;
  void _internal_set_state(::ibc::core::channel::v1::State value);

  public:
  // .ibc.core.channel.v1.Order ordering = 2 [json_name = "ordering"];
  void clear_ordering() ;
  ::ibc::core::channel::v1::Order ordering() const;
  void set_ordering(::ibc::core::channel::v1::Order value);

  private:
  ::ibc::core::channel::v1::Order _internal_ordering() const;
  void _internal_set_ordering(::ibc::core::channel::v1::Order value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.Channel)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      58, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Channel& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> connection_hops_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::ibc::core::channel::v1::Counterparty* counterparty_;
    int state_;
    int ordering_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Channel

// .ibc.core.channel.v1.State state = 1 [json_name = "state"];
inline void Channel::clear_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_ = 0;
}
inline ::ibc::core::channel::v1::State Channel::state() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.Channel.state)
  return _internal_state();
}
inline void Channel::set_state(::ibc::core::channel::v1::State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.Channel.state)
}
inline ::ibc::core::channel::v1::State Channel::_internal_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ibc::core::channel::v1::State>(_impl_.state_);
}
inline void Channel::_internal_set_state(::ibc::core::channel::v1::State value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_ = value;
}

// .ibc.core.channel.v1.Order ordering = 2 [json_name = "ordering"];
inline void Channel::clear_ordering() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ordering_ = 0;
}
inline ::ibc::core::channel::v1::Order Channel::ordering() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.Channel.ordering)
  return _internal_ordering();
}
inline void Channel::set_ordering(::ibc::core::channel::v1::Order value) {
  _internal_set_ordering(value);
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.Channel.ordering)
}
inline ::ibc::core::channel::v1::Order Channel::_internal_ordering() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ibc::core::channel::v1::Order>(_impl_.ordering_);
}
inline void Channel::_internal_set_ordering(::ibc::core::channel::v1::Order value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ordering_ = value;
}

// .ibc.core.channel.v1.Counterparty counterparty = 3 [json_name = "counterparty", (.gogoproto.nullable) = false];
inline bool Channel::has_counterparty() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.counterparty_ != nullptr);
  return value;
}
inline void Channel::clear_counterparty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.counterparty_ != nullptr) _impl_.counterparty_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ibc::core::channel::v1::Counterparty& Channel::_internal_counterparty() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ibc::core::channel::v1::Counterparty* p = _impl_.counterparty_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::channel::v1::Counterparty&>(::ibc::core::channel::v1::_Counterparty_default_instance_);
}
inline const ::ibc::core::channel::v1::Counterparty& Channel::counterparty() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.Channel.counterparty)
  return _internal_counterparty();
}
inline void Channel::unsafe_arena_set_allocated_counterparty(::ibc::core::channel::v1::Counterparty* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.counterparty_);
  }
  _impl_.counterparty_ = reinterpret_cast<::ibc::core::channel::v1::Counterparty*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.channel.v1.Channel.counterparty)
}
inline ::ibc::core::channel::v1::Counterparty* Channel::release_counterparty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::channel::v1::Counterparty* released = _impl_.counterparty_;
  _impl_.counterparty_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ibc::core::channel::v1::Counterparty* Channel::unsafe_arena_release_counterparty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.Channel.counterparty)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::channel::v1::Counterparty* temp = _impl_.counterparty_;
  _impl_.counterparty_ = nullptr;
  return temp;
}
inline ::ibc::core::channel::v1::Counterparty* Channel::_internal_mutable_counterparty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.counterparty_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ibc::core::channel::v1::Counterparty>(GetArena());
    _impl_.counterparty_ = reinterpret_cast<::ibc::core::channel::v1::Counterparty*>(p);
  }
  return _impl_.counterparty_;
}
inline ::ibc::core::channel::v1::Counterparty* Channel::mutable_counterparty() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::ibc::core::channel::v1::Counterparty* _msg = _internal_mutable_counterparty();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.Channel.counterparty)
  return _msg;
}
inline void Channel::set_allocated_counterparty(::ibc::core::channel::v1::Counterparty* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.counterparty_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.counterparty_ = reinterpret_cast<::ibc::core::channel::v1::Counterparty*>(value);
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.Channel.counterparty)
}

// repeated string connection_hops = 4 [json_name = "connectionHops"];
inline int Channel::_internal_connection_hops_size() const {
  return _internal_connection_hops().size();
}
inline int Channel::connection_hops_size() const {
  return _internal_connection_hops_size();
}
inline void Channel::clear_connection_hops() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.connection_hops_.Clear();
}
inline std::string* Channel::add_connection_hops() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_connection_hops()->Add();
  // @@protoc_insertion_point(field_add_mutable:ibc.core.channel.v1.Channel.connection_hops)
  return _s;
}
inline const std::string& Channel::connection_hops(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.Channel.connection_hops)
  return _internal_connection_hops().Get(index);
}
inline std::string* Channel::mutable_connection_hops(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.Channel.connection_hops)
  return _internal_mutable_connection_hops()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void Channel::set_connection_hops(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_connection_hops()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.Channel.connection_hops)
}
template <typename Arg_, typename... Args_>
inline void Channel::add_connection_hops(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_connection_hops(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:ibc.core.channel.v1.Channel.connection_hops)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Channel::connection_hops() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ibc.core.channel.v1.Channel.connection_hops)
  return _internal_connection_hops();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Channel::mutable_connection_hops() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ibc.core.channel.v1.Channel.connection_hops)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_connection_hops();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Channel::_internal_connection_hops() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.connection_hops_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Channel::_internal_mutable_connection_hops() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.connection_hops_;
}

// string version = 5 [json_name = "version"];
inline void Channel::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& Channel::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.Channel.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Channel::set_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.Channel.version)
}
inline std::string* Channel::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.Channel.version)
  return _s;
}
inline const std::string& Channel::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_.Get();
}
inline void Channel::_internal_set_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(value, GetArena());
}
inline std::string* Channel::_internal_mutable_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* Channel::release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.Channel.version)
  return _impl_.version_.Release();
}
inline void Channel::set_allocated_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.Channel.version)
}

// -------------------------------------------------------------------

// IdentifiedChannel

// .ibc.core.channel.v1.State state = 1 [json_name = "state"];
inline void IdentifiedChannel::clear_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_ = 0;
}
inline ::ibc::core::channel::v1::State IdentifiedChannel::state() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.IdentifiedChannel.state)
  return _internal_state();
}
inline void IdentifiedChannel::set_state(::ibc::core::channel::v1::State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.IdentifiedChannel.state)
}
inline ::ibc::core::channel::v1::State IdentifiedChannel::_internal_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ibc::core::channel::v1::State>(_impl_.state_);
}
inline void IdentifiedChannel::_internal_set_state(::ibc::core::channel::v1::State value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_ = value;
}

// .ibc.core.channel.v1.Order ordering = 2 [json_name = "ordering"];
inline void IdentifiedChannel::clear_ordering() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ordering_ = 0;
}
inline ::ibc::core::channel::v1::Order IdentifiedChannel::ordering() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.IdentifiedChannel.ordering)
  return _internal_ordering();
}
inline void IdentifiedChannel::set_ordering(::ibc::core::channel::v1::Order value) {
  _internal_set_ordering(value);
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.IdentifiedChannel.ordering)
}
inline ::ibc::core::channel::v1::Order IdentifiedChannel::_internal_ordering() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ibc::core::channel::v1::Order>(_impl_.ordering_);
}
inline void IdentifiedChannel::_internal_set_ordering(::ibc::core::channel::v1::Order value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ordering_ = value;
}

// .ibc.core.channel.v1.Counterparty counterparty = 3 [json_name = "counterparty", (.gogoproto.nullable) = false];
inline bool IdentifiedChannel::has_counterparty() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.counterparty_ != nullptr);
  return value;
}
inline void IdentifiedChannel::clear_counterparty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.counterparty_ != nullptr) _impl_.counterparty_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ibc::core::channel::v1::Counterparty& IdentifiedChannel::_internal_counterparty() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ibc::core::channel::v1::Counterparty* p = _impl_.counterparty_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::channel::v1::Counterparty&>(::ibc::core::channel::v1::_Counterparty_default_instance_);
}
inline const ::ibc::core::channel::v1::Counterparty& IdentifiedChannel::counterparty() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.IdentifiedChannel.counterparty)
  return _internal_counterparty();
}
inline void IdentifiedChannel::unsafe_arena_set_allocated_counterparty(::ibc::core::channel::v1::Counterparty* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.counterparty_);
  }
  _impl_.counterparty_ = reinterpret_cast<::ibc::core::channel::v1::Counterparty*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.channel.v1.IdentifiedChannel.counterparty)
}
inline ::ibc::core::channel::v1::Counterparty* IdentifiedChannel::release_counterparty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::channel::v1::Counterparty* released = _impl_.counterparty_;
  _impl_.counterparty_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ibc::core::channel::v1::Counterparty* IdentifiedChannel::unsafe_arena_release_counterparty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.IdentifiedChannel.counterparty)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::channel::v1::Counterparty* temp = _impl_.counterparty_;
  _impl_.counterparty_ = nullptr;
  return temp;
}
inline ::ibc::core::channel::v1::Counterparty* IdentifiedChannel::_internal_mutable_counterparty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.counterparty_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ibc::core::channel::v1::Counterparty>(GetArena());
    _impl_.counterparty_ = reinterpret_cast<::ibc::core::channel::v1::Counterparty*>(p);
  }
  return _impl_.counterparty_;
}
inline ::ibc::core::channel::v1::Counterparty* IdentifiedChannel::mutable_counterparty() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::ibc::core::channel::v1::Counterparty* _msg = _internal_mutable_counterparty();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.IdentifiedChannel.counterparty)
  return _msg;
}
inline void IdentifiedChannel::set_allocated_counterparty(::ibc::core::channel::v1::Counterparty* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.counterparty_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.counterparty_ = reinterpret_cast<::ibc::core::channel::v1::Counterparty*>(value);
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.IdentifiedChannel.counterparty)
}

// repeated string connection_hops = 4 [json_name = "connectionHops"];
inline int IdentifiedChannel::_internal_connection_hops_size() const {
  return _internal_connection_hops().size();
}
inline int IdentifiedChannel::connection_hops_size() const {
  return _internal_connection_hops_size();
}
inline void IdentifiedChannel::clear_connection_hops() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.connection_hops_.Clear();
}
inline std::string* IdentifiedChannel::add_connection_hops() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_connection_hops()->Add();
  // @@protoc_insertion_point(field_add_mutable:ibc.core.channel.v1.IdentifiedChannel.connection_hops)
  return _s;
}
inline const std::string& IdentifiedChannel::connection_hops(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.IdentifiedChannel.connection_hops)
  return _internal_connection_hops().Get(index);
}
inline std::string* IdentifiedChannel::mutable_connection_hops(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.IdentifiedChannel.connection_hops)
  return _internal_mutable_connection_hops()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void IdentifiedChannel::set_connection_hops(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_connection_hops()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.IdentifiedChannel.connection_hops)
}
template <typename Arg_, typename... Args_>
inline void IdentifiedChannel::add_connection_hops(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_connection_hops(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:ibc.core.channel.v1.IdentifiedChannel.connection_hops)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
IdentifiedChannel::connection_hops() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ibc.core.channel.v1.IdentifiedChannel.connection_hops)
  return _internal_connection_hops();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
IdentifiedChannel::mutable_connection_hops() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ibc.core.channel.v1.IdentifiedChannel.connection_hops)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_connection_hops();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
IdentifiedChannel::_internal_connection_hops() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.connection_hops_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
IdentifiedChannel::_internal_mutable_connection_hops() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.connection_hops_;
}

// string version = 5 [json_name = "version"];
inline void IdentifiedChannel::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& IdentifiedChannel::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.IdentifiedChannel.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IdentifiedChannel::set_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.IdentifiedChannel.version)
}
inline std::string* IdentifiedChannel::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.IdentifiedChannel.version)
  return _s;
}
inline const std::string& IdentifiedChannel::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_.Get();
}
inline void IdentifiedChannel::_internal_set_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(value, GetArena());
}
inline std::string* IdentifiedChannel::_internal_mutable_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* IdentifiedChannel::release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.IdentifiedChannel.version)
  return _impl_.version_.Release();
}
inline void IdentifiedChannel::set_allocated_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.IdentifiedChannel.version)
}

// string port_id = 6 [json_name = "portId"];
inline void IdentifiedChannel::clear_port_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_id_.ClearToEmpty();
}
inline const std::string& IdentifiedChannel::port_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.IdentifiedChannel.port_id)
  return _internal_port_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IdentifiedChannel::set_port_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.IdentifiedChannel.port_id)
}
inline std::string* IdentifiedChannel::mutable_port_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_port_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.IdentifiedChannel.port_id)
  return _s;
}
inline const std::string& IdentifiedChannel::_internal_port_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.port_id_.Get();
}
inline void IdentifiedChannel::_internal_set_port_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_id_.Set(value, GetArena());
}
inline std::string* IdentifiedChannel::_internal_mutable_port_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.port_id_.Mutable( GetArena());
}
inline std::string* IdentifiedChannel::release_port_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.IdentifiedChannel.port_id)
  return _impl_.port_id_.Release();
}
inline void IdentifiedChannel::set_allocated_port_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.port_id_.IsDefault()) {
    _impl_.port_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.IdentifiedChannel.port_id)
}

// string channel_id = 7 [json_name = "channelId"];
inline void IdentifiedChannel::clear_channel_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& IdentifiedChannel::channel_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.IdentifiedChannel.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IdentifiedChannel::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.IdentifiedChannel.channel_id)
}
inline std::string* IdentifiedChannel::mutable_channel_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.IdentifiedChannel.channel_id)
  return _s;
}
inline const std::string& IdentifiedChannel::_internal_channel_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.channel_id_.Get();
}
inline void IdentifiedChannel::_internal_set_channel_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_id_.Set(value, GetArena());
}
inline std::string* IdentifiedChannel::_internal_mutable_channel_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.channel_id_.Mutable( GetArena());
}
inline std::string* IdentifiedChannel::release_channel_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.IdentifiedChannel.channel_id)
  return _impl_.channel_id_.Release();
}
inline void IdentifiedChannel::set_allocated_channel_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.channel_id_.IsDefault()) {
    _impl_.channel_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.IdentifiedChannel.channel_id)
}

// -------------------------------------------------------------------

// Counterparty

// string port_id = 1 [json_name = "portId"];
inline void Counterparty::clear_port_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_id_.ClearToEmpty();
}
inline const std::string& Counterparty::port_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.Counterparty.port_id)
  return _internal_port_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Counterparty::set_port_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.Counterparty.port_id)
}
inline std::string* Counterparty::mutable_port_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_port_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.Counterparty.port_id)
  return _s;
}
inline const std::string& Counterparty::_internal_port_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.port_id_.Get();
}
inline void Counterparty::_internal_set_port_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_id_.Set(value, GetArena());
}
inline std::string* Counterparty::_internal_mutable_port_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.port_id_.Mutable( GetArena());
}
inline std::string* Counterparty::release_port_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.Counterparty.port_id)
  return _impl_.port_id_.Release();
}
inline void Counterparty::set_allocated_port_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.port_id_.IsDefault()) {
    _impl_.port_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.Counterparty.port_id)
}

// string channel_id = 2 [json_name = "channelId"];
inline void Counterparty::clear_channel_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& Counterparty::channel_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.Counterparty.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Counterparty::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.Counterparty.channel_id)
}
inline std::string* Counterparty::mutable_channel_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.Counterparty.channel_id)
  return _s;
}
inline const std::string& Counterparty::_internal_channel_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.channel_id_.Get();
}
inline void Counterparty::_internal_set_channel_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_id_.Set(value, GetArena());
}
inline std::string* Counterparty::_internal_mutable_channel_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.channel_id_.Mutable( GetArena());
}
inline std::string* Counterparty::release_channel_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.Counterparty.channel_id)
  return _impl_.channel_id_.Release();
}
inline void Counterparty::set_allocated_channel_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.channel_id_.IsDefault()) {
    _impl_.channel_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.Counterparty.channel_id)
}

// -------------------------------------------------------------------

// Packet

// uint64 sequence = 1 [json_name = "sequence"];
inline void Packet::clear_sequence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_ = ::uint64_t{0u};
}
inline ::uint64_t Packet::sequence() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.Packet.sequence)
  return _internal_sequence();
}
inline void Packet::set_sequence(::uint64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.Packet.sequence)
}
inline ::uint64_t Packet::_internal_sequence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sequence_;
}
inline void Packet::_internal_set_sequence(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_ = value;
}

// string source_port = 2 [json_name = "sourcePort"];
inline void Packet::clear_source_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_port_.ClearToEmpty();
}
inline const std::string& Packet::source_port() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.Packet.source_port)
  return _internal_source_port();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Packet::set_source_port(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_port_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.Packet.source_port)
}
inline std::string* Packet::mutable_source_port() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_source_port();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.Packet.source_port)
  return _s;
}
inline const std::string& Packet::_internal_source_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.source_port_.Get();
}
inline void Packet::_internal_set_source_port(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_port_.Set(value, GetArena());
}
inline std::string* Packet::_internal_mutable_source_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.source_port_.Mutable( GetArena());
}
inline std::string* Packet::release_source_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.Packet.source_port)
  return _impl_.source_port_.Release();
}
inline void Packet::set_allocated_source_port(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_port_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.source_port_.IsDefault()) {
    _impl_.source_port_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.Packet.source_port)
}

// string source_channel = 3 [json_name = "sourceChannel"];
inline void Packet::clear_source_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_channel_.ClearToEmpty();
}
inline const std::string& Packet::source_channel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.Packet.source_channel)
  return _internal_source_channel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Packet::set_source_channel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_channel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.Packet.source_channel)
}
inline std::string* Packet::mutable_source_channel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_source_channel();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.Packet.source_channel)
  return _s;
}
inline const std::string& Packet::_internal_source_channel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.source_channel_.Get();
}
inline void Packet::_internal_set_source_channel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_channel_.Set(value, GetArena());
}
inline std::string* Packet::_internal_mutable_source_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.source_channel_.Mutable( GetArena());
}
inline std::string* Packet::release_source_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.Packet.source_channel)
  return _impl_.source_channel_.Release();
}
inline void Packet::set_allocated_source_channel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_channel_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.source_channel_.IsDefault()) {
    _impl_.source_channel_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.Packet.source_channel)
}

// string destination_port = 4 [json_name = "destinationPort"];
inline void Packet::clear_destination_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_port_.ClearToEmpty();
}
inline const std::string& Packet::destination_port() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.Packet.destination_port)
  return _internal_destination_port();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Packet::set_destination_port(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_port_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.Packet.destination_port)
}
inline std::string* Packet::mutable_destination_port() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_destination_port();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.Packet.destination_port)
  return _s;
}
inline const std::string& Packet::_internal_destination_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.destination_port_.Get();
}
inline void Packet::_internal_set_destination_port(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_port_.Set(value, GetArena());
}
inline std::string* Packet::_internal_mutable_destination_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.destination_port_.Mutable( GetArena());
}
inline std::string* Packet::release_destination_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.Packet.destination_port)
  return _impl_.destination_port_.Release();
}
inline void Packet::set_allocated_destination_port(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_port_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.destination_port_.IsDefault()) {
    _impl_.destination_port_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.Packet.destination_port)
}

// string destination_channel = 5 [json_name = "destinationChannel"];
inline void Packet::clear_destination_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_channel_.ClearToEmpty();
}
inline const std::string& Packet::destination_channel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.Packet.destination_channel)
  return _internal_destination_channel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Packet::set_destination_channel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_channel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.Packet.destination_channel)
}
inline std::string* Packet::mutable_destination_channel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_destination_channel();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.Packet.destination_channel)
  return _s;
}
inline const std::string& Packet::_internal_destination_channel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.destination_channel_.Get();
}
inline void Packet::_internal_set_destination_channel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_channel_.Set(value, GetArena());
}
inline std::string* Packet::_internal_mutable_destination_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.destination_channel_.Mutable( GetArena());
}
inline std::string* Packet::release_destination_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.Packet.destination_channel)
  return _impl_.destination_channel_.Release();
}
inline void Packet::set_allocated_destination_channel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_channel_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.destination_channel_.IsDefault()) {
    _impl_.destination_channel_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.Packet.destination_channel)
}

// bytes data = 6 [json_name = "data"];
inline void Packet::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Packet::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.Packet.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Packet::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.Packet.data)
}
inline std::string* Packet::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.Packet.data)
  return _s;
}
inline const std::string& Packet::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void Packet::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* Packet::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* Packet::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.Packet.data)
  return _impl_.data_.Release();
}
inline void Packet::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.Packet.data)
}

// .ibc.core.client.v1.Height timeout_height = 7 [json_name = "timeoutHeight", (.gogoproto.nullable) = false];
inline bool Packet::has_timeout_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timeout_height_ != nullptr);
  return value;
}
inline const ::ibc::core::client::v1::Height& Packet::_internal_timeout_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ibc::core::client::v1::Height* p = _impl_.timeout_height_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::Height&>(::ibc::core::client::v1::_Height_default_instance_);
}
inline const ::ibc::core::client::v1::Height& Packet::timeout_height() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.Packet.timeout_height)
  return _internal_timeout_height();
}
inline void Packet::unsafe_arena_set_allocated_timeout_height(::ibc::core::client::v1::Height* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timeout_height_);
  }
  _impl_.timeout_height_ = reinterpret_cast<::ibc::core::client::v1::Height*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.channel.v1.Packet.timeout_height)
}
inline ::ibc::core::client::v1::Height* Packet::release_timeout_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::client::v1::Height* released = _impl_.timeout_height_;
  _impl_.timeout_height_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ibc::core::client::v1::Height* Packet::unsafe_arena_release_timeout_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.Packet.timeout_height)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::client::v1::Height* temp = _impl_.timeout_height_;
  _impl_.timeout_height_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::Height* Packet::_internal_mutable_timeout_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timeout_height_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ibc::core::client::v1::Height>(GetArena());
    _impl_.timeout_height_ = reinterpret_cast<::ibc::core::client::v1::Height*>(p);
  }
  return _impl_.timeout_height_;
}
inline ::ibc::core::client::v1::Height* Packet::mutable_timeout_height() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::ibc::core::client::v1::Height* _msg = _internal_mutable_timeout_height();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.Packet.timeout_height)
  return _msg;
}
inline void Packet::set_allocated_timeout_height(::ibc::core::client::v1::Height* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timeout_height_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.timeout_height_ = reinterpret_cast<::ibc::core::client::v1::Height*>(value);
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.Packet.timeout_height)
}

// uint64 timeout_timestamp = 8 [json_name = "timeoutTimestamp"];
inline void Packet::clear_timeout_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeout_timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t Packet::timeout_timestamp() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.Packet.timeout_timestamp)
  return _internal_timeout_timestamp();
}
inline void Packet::set_timeout_timestamp(::uint64_t value) {
  _internal_set_timeout_timestamp(value);
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.Packet.timeout_timestamp)
}
inline ::uint64_t Packet::_internal_timeout_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timeout_timestamp_;
}
inline void Packet::_internal_set_timeout_timestamp(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeout_timestamp_ = value;
}

// -------------------------------------------------------------------

// PacketState

// string port_id = 1 [json_name = "portId"];
inline void PacketState::clear_port_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_id_.ClearToEmpty();
}
inline const std::string& PacketState::port_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.PacketState.port_id)
  return _internal_port_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PacketState::set_port_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.PacketState.port_id)
}
inline std::string* PacketState::mutable_port_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_port_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.PacketState.port_id)
  return _s;
}
inline const std::string& PacketState::_internal_port_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.port_id_.Get();
}
inline void PacketState::_internal_set_port_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_id_.Set(value, GetArena());
}
inline std::string* PacketState::_internal_mutable_port_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.port_id_.Mutable( GetArena());
}
inline std::string* PacketState::release_port_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.PacketState.port_id)
  return _impl_.port_id_.Release();
}
inline void PacketState::set_allocated_port_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.port_id_.IsDefault()) {
    _impl_.port_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.PacketState.port_id)
}

// string channel_id = 2 [json_name = "channelId"];
inline void PacketState::clear_channel_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& PacketState::channel_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.PacketState.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PacketState::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.PacketState.channel_id)
}
inline std::string* PacketState::mutable_channel_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.PacketState.channel_id)
  return _s;
}
inline const std::string& PacketState::_internal_channel_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.channel_id_.Get();
}
inline void PacketState::_internal_set_channel_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_id_.Set(value, GetArena());
}
inline std::string* PacketState::_internal_mutable_channel_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.channel_id_.Mutable( GetArena());
}
inline std::string* PacketState::release_channel_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.PacketState.channel_id)
  return _impl_.channel_id_.Release();
}
inline void PacketState::set_allocated_channel_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.channel_id_.IsDefault()) {
    _impl_.channel_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.PacketState.channel_id)
}

// uint64 sequence = 3 [json_name = "sequence"];
inline void PacketState::clear_sequence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_ = ::uint64_t{0u};
}
inline ::uint64_t PacketState::sequence() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.PacketState.sequence)
  return _internal_sequence();
}
inline void PacketState::set_sequence(::uint64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.PacketState.sequence)
}
inline ::uint64_t PacketState::_internal_sequence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sequence_;
}
inline void PacketState::_internal_set_sequence(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_ = value;
}

// bytes data = 4 [json_name = "data"];
inline void PacketState::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& PacketState::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.PacketState.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PacketState::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.PacketState.data)
}
inline std::string* PacketState::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.PacketState.data)
  return _s;
}
inline const std::string& PacketState::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void PacketState::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* PacketState::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* PacketState::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.PacketState.data)
  return _impl_.data_.Release();
}
inline void PacketState::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.PacketState.data)
}

// -------------------------------------------------------------------

// PacketId

// string port_id = 1 [json_name = "portId"];
inline void PacketId::clear_port_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_id_.ClearToEmpty();
}
inline const std::string& PacketId::port_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.PacketId.port_id)
  return _internal_port_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PacketId::set_port_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.PacketId.port_id)
}
inline std::string* PacketId::mutable_port_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_port_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.PacketId.port_id)
  return _s;
}
inline const std::string& PacketId::_internal_port_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.port_id_.Get();
}
inline void PacketId::_internal_set_port_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_id_.Set(value, GetArena());
}
inline std::string* PacketId::_internal_mutable_port_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.port_id_.Mutable( GetArena());
}
inline std::string* PacketId::release_port_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.PacketId.port_id)
  return _impl_.port_id_.Release();
}
inline void PacketId::set_allocated_port_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.port_id_.IsDefault()) {
    _impl_.port_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.PacketId.port_id)
}

// string channel_id = 2 [json_name = "channelId"];
inline void PacketId::clear_channel_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& PacketId::channel_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.PacketId.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PacketId::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.PacketId.channel_id)
}
inline std::string* PacketId::mutable_channel_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.PacketId.channel_id)
  return _s;
}
inline const std::string& PacketId::_internal_channel_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.channel_id_.Get();
}
inline void PacketId::_internal_set_channel_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_id_.Set(value, GetArena());
}
inline std::string* PacketId::_internal_mutable_channel_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.channel_id_.Mutable( GetArena());
}
inline std::string* PacketId::release_channel_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.PacketId.channel_id)
  return _impl_.channel_id_.Release();
}
inline void PacketId::set_allocated_channel_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.channel_id_.IsDefault()) {
    _impl_.channel_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.PacketId.channel_id)
}

// uint64 sequence = 3 [json_name = "sequence"];
inline void PacketId::clear_sequence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_ = ::uint64_t{0u};
}
inline ::uint64_t PacketId::sequence() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.PacketId.sequence)
  return _internal_sequence();
}
inline void PacketId::set_sequence(::uint64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.PacketId.sequence)
}
inline ::uint64_t PacketId::_internal_sequence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sequence_;
}
inline void PacketId::_internal_set_sequence(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_ = value;
}

// -------------------------------------------------------------------

// Acknowledgement

// bytes result = 21 [json_name = "result"];
inline bool Acknowledgement::has_result() const {
  return response_case() == kResult;
}
inline void Acknowledgement::set_has_result() {
  _impl_._oneof_case_[0] = kResult;
}
inline void Acknowledgement::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (response_case() == kResult) {
    _impl_.response_.result_.Destroy();
    clear_has_response();
  }
}
inline const std::string& Acknowledgement::result() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.Acknowledgement.result)
  return _internal_result();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Acknowledgement::set_result(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (response_case() != kResult) {
    clear_response();

    set_has_result();
    _impl_.response_.result_.InitDefault();
  }
  _impl_.response_.result_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.Acknowledgement.result)
}
inline std::string* Acknowledgement::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.Acknowledgement.result)
  return _s;
}
inline const std::string& Acknowledgement::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (response_case() != kResult) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.response_.result_.Get();
}
inline void Acknowledgement::_internal_set_result(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (response_case() != kResult) {
    clear_response();

    set_has_result();
    _impl_.response_.result_.InitDefault();
  }
  _impl_.response_.result_.Set(value, GetArena());
}
inline std::string* Acknowledgement::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (response_case() != kResult) {
    clear_response();

    set_has_result();
    _impl_.response_.result_.InitDefault();
  }
  return _impl_.response_.result_.Mutable( GetArena());
}
inline std::string* Acknowledgement::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.Acknowledgement.result)
  if (response_case() != kResult) {
    return nullptr;
  }
  clear_has_response();
  return _impl_.response_.result_.Release();
}
inline void Acknowledgement::set_allocated_result(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_response()) {
    clear_response();
  }
  if (value != nullptr) {
    set_has_result();
    _impl_.response_.result_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.Acknowledgement.result)
}

// string error = 22 [json_name = "error"];
inline bool Acknowledgement::has_error() const {
  return response_case() == kError;
}
inline void Acknowledgement::set_has_error() {
  _impl_._oneof_case_[0] = kError;
}
inline void Acknowledgement::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (response_case() == kError) {
    _impl_.response_.error_.Destroy();
    clear_has_response();
  }
}
inline const std::string& Acknowledgement::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.Acknowledgement.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Acknowledgement::set_error(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (response_case() != kError) {
    clear_response();

    set_has_error();
    _impl_.response_.error_.InitDefault();
  }
  _impl_.response_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.Acknowledgement.error)
}
inline std::string* Acknowledgement::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.Acknowledgement.error)
  return _s;
}
inline const std::string& Acknowledgement::_internal_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (response_case() != kError) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.response_.error_.Get();
}
inline void Acknowledgement::_internal_set_error(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (response_case() != kError) {
    clear_response();

    set_has_error();
    _impl_.response_.error_.InitDefault();
  }
  _impl_.response_.error_.Set(value, GetArena());
}
inline std::string* Acknowledgement::_internal_mutable_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (response_case() != kError) {
    clear_response();

    set_has_error();
    _impl_.response_.error_.InitDefault();
  }
  return _impl_.response_.error_.Mutable( GetArena());
}
inline std::string* Acknowledgement::release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.Acknowledgement.error)
  if (response_case() != kError) {
    return nullptr;
  }
  clear_has_response();
  return _impl_.response_.error_.Release();
}
inline void Acknowledgement::set_allocated_error(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_response()) {
    clear_response();
  }
  if (value != nullptr) {
    set_has_error();
    _impl_.response_.error_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.Acknowledgement.error)
}

inline bool Acknowledgement::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void Acknowledgement::clear_has_response() {
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}
inline Acknowledgement::ResponseCase Acknowledgement::response_case() const {
  return Acknowledgement::ResponseCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Timeout

// .ibc.core.client.v1.Height height = 1 [json_name = "height", (.gogoproto.nullable) = false];
inline bool Timeout::has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.height_ != nullptr);
  return value;
}
inline const ::ibc::core::client::v1::Height& Timeout::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ibc::core::client::v1::Height* p = _impl_.height_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::Height&>(::ibc::core::client::v1::_Height_default_instance_);
}
inline const ::ibc::core::client::v1::Height& Timeout::height() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.Timeout.height)
  return _internal_height();
}
inline void Timeout::unsafe_arena_set_allocated_height(::ibc::core::client::v1::Height* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.height_);
  }
  _impl_.height_ = reinterpret_cast<::ibc::core::client::v1::Height*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.channel.v1.Timeout.height)
}
inline ::ibc::core::client::v1::Height* Timeout::release_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::client::v1::Height* released = _impl_.height_;
  _impl_.height_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ibc::core::client::v1::Height* Timeout::unsafe_arena_release_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.Timeout.height)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::client::v1::Height* temp = _impl_.height_;
  _impl_.height_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::Height* Timeout::_internal_mutable_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.height_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ibc::core::client::v1::Height>(GetArena());
    _impl_.height_ = reinterpret_cast<::ibc::core::client::v1::Height*>(p);
  }
  return _impl_.height_;
}
inline ::ibc::core::client::v1::Height* Timeout::mutable_height() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::ibc::core::client::v1::Height* _msg = _internal_mutable_height();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.Timeout.height)
  return _msg;
}
inline void Timeout::set_allocated_height(::ibc::core::client::v1::Height* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.height_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.height_ = reinterpret_cast<::ibc::core::client::v1::Height*>(value);
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.Timeout.height)
}

// uint64 timestamp = 2 [json_name = "timestamp"];
inline void Timeout::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t Timeout::timestamp() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.Timeout.timestamp)
  return _internal_timestamp();
}
inline void Timeout::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.Timeout.timestamp)
}
inline ::uint64_t Timeout::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void Timeout::_internal_set_timestamp(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace channel
}  // namespace core
}  // namespace ibc


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::ibc::core::channel::v1::State> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ibc::core::channel::v1::State>() {
  return ::ibc::core::channel::v1::State_descriptor();
}
template <>
struct is_proto_enum<::ibc::core::channel::v1::Order> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ibc::core::channel::v1::Order>() {
  return ::ibc::core::channel::v1::Order_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto_2epb_2eh
