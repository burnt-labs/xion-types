// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ibc/core/commitment/v1/commitment.proto
// Protobuf C++ Version: 5.29.4

#include "ibc/core/commitment/v1/commitment.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace ibc {
namespace core {
namespace commitment {
namespace v1 {

inline constexpr MerkleRoot::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MerkleRoot::MerkleRoot(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MerkleRootDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MerkleRootDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MerkleRootDefaultTypeInternal() {}
  union {
    MerkleRoot _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MerkleRootDefaultTypeInternal _MerkleRoot_default_instance_;

inline constexpr MerklePrefix::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : key_prefix_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MerklePrefix::MerklePrefix(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MerklePrefixDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MerklePrefixDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MerklePrefixDefaultTypeInternal() {}
  union {
    MerklePrefix _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MerklePrefixDefaultTypeInternal _MerklePrefix_default_instance_;

inline constexpr MerkleProof::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : proofs_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MerkleProof::MerkleProof(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MerkleProofDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MerkleProofDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MerkleProofDefaultTypeInternal() {}
  union {
    MerkleProof _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MerkleProofDefaultTypeInternal _MerkleProof_default_instance_;
}  // namespace v1
}  // namespace commitment
}  // namespace core
}  // namespace ibc
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto = nullptr;
const ::uint32_t
    TableStruct_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::ibc::core::commitment::v1::MerkleRoot, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::ibc::core::commitment::v1::MerkleRoot, _impl_.hash_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::ibc::core::commitment::v1::MerklePrefix, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::ibc::core::commitment::v1::MerklePrefix, _impl_.key_prefix_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::ibc::core::commitment::v1::MerkleProof, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::ibc::core::commitment::v1::MerkleProof, _impl_.proofs_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::ibc::core::commitment::v1::MerkleRoot)},
        {9, -1, -1, sizeof(::ibc::core::commitment::v1::MerklePrefix)},
        {18, -1, -1, sizeof(::ibc::core::commitment::v1::MerkleProof)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::ibc::core::commitment::v1::_MerkleRoot_default_instance_._instance,
    &::ibc::core::commitment::v1::_MerklePrefix_default_instance_._instance,
    &::ibc::core::commitment::v1::_MerkleProof_default_instance_._instance,
};
const char descriptor_table_protodef_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\'ibc/core/commitment/v1/commitment.prot"
    "o\022\026ibc.core.commitment.v1\032\024gogoproto/gog"
    "o.proto\032\034cosmos/ics23/v1/proofs.proto\"&\n"
    "\nMerkleRoot\022\022\n\004hash\030\001 \001(\014R\004hash:\004\210\240\037\000\"-\n"
    "\014MerklePrefix\022\035\n\nkey_prefix\030\001 \001(\014R\tkeyPr"
    "efix\"G\n\013MerkleProof\0228\n\006proofs\030\001 \003(\0132 .co"
    "smos.ics23.v1.CommitmentProofR\006proofsB\?Z"
    "=github.com/cosmos/ibc-go/v10/modules/co"
    "re/23-commitment/typesb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto_deps[2] =
    {
        &::descriptor_table_cosmos_2fics23_2fv1_2fproofs_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto = {
    false,
    false,
    350,
    descriptor_table_protodef_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto,
    "ibc/core/commitment/v1/commitment.proto",
    &descriptor_table_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto_once,
    descriptor_table_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto_deps,
    2,
    3,
    schemas,
    file_default_instances,
    TableStruct_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto::offsets,
    file_level_enum_descriptors_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto,
    file_level_service_descriptors_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto,
};
namespace ibc {
namespace core {
namespace commitment {
namespace v1 {
// ===================================================================

class MerkleRoot::_Internal {
 public:
};

MerkleRoot::MerkleRoot(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.commitment.v1.MerkleRoot)
}
inline PROTOBUF_NDEBUG_INLINE MerkleRoot::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::ibc::core::commitment::v1::MerkleRoot& from_msg)
      : hash_(arena, from.hash_),
        _cached_size_{0} {}

MerkleRoot::MerkleRoot(
    ::google::protobuf::Arena* arena,
    const MerkleRoot& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MerkleRoot* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:ibc.core.commitment.v1.MerkleRoot)
}
inline PROTOBUF_NDEBUG_INLINE MerkleRoot::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : hash_(arena),
        _cached_size_{0} {}

inline void MerkleRoot::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
MerkleRoot::~MerkleRoot() {
  // @@protoc_insertion_point(destructor:ibc.core.commitment.v1.MerkleRoot)
  SharedDtor(*this);
}
inline void MerkleRoot::SharedDtor(MessageLite& self) {
  MerkleRoot& this_ = static_cast<MerkleRoot&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.hash_.Destroy();
  this_._impl_.~Impl_();
}

inline void* MerkleRoot::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MerkleRoot(arena);
}
constexpr auto MerkleRoot::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MerkleRoot),
                                            alignof(MerkleRoot));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MerkleRoot::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MerkleRoot_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MerkleRoot::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MerkleRoot>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MerkleRoot::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MerkleRoot>(), &MerkleRoot::ByteSizeLong,
            &MerkleRoot::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MerkleRoot, _impl_._cached_size_),
        false,
    },
    &MerkleRoot::kDescriptorMethods,
    &descriptor_table_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MerkleRoot::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> MerkleRoot::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ibc::core::commitment::v1::MerkleRoot>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bytes hash = 1 [json_name = "hash"];
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MerkleRoot, _impl_.hash_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes hash = 1 [json_name = "hash"];
    {PROTOBUF_FIELD_OFFSET(MerkleRoot, _impl_.hash_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void MerkleRoot::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.commitment.v1.MerkleRoot)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hash_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MerkleRoot::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MerkleRoot& this_ = static_cast<const MerkleRoot&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MerkleRoot::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MerkleRoot& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:ibc.core.commitment.v1.MerkleRoot)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bytes hash = 1 [json_name = "hash"];
          if (!this_._internal_hash().empty()) {
            const std::string& _s = this_._internal_hash();
            target = stream->WriteBytesMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:ibc.core.commitment.v1.MerkleRoot)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MerkleRoot::ByteSizeLong(const MessageLite& base) {
          const MerkleRoot& this_ = static_cast<const MerkleRoot&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MerkleRoot::ByteSizeLong() const {
          const MerkleRoot& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:ibc.core.commitment.v1.MerkleRoot)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // bytes hash = 1 [json_name = "hash"];
            if (!this_._internal_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_hash());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MerkleRoot::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MerkleRoot*>(&to_msg);
  auto& from = static_cast<const MerkleRoot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.commitment.v1.MerkleRoot)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MerkleRoot::CopyFrom(const MerkleRoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.commitment.v1.MerkleRoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MerkleRoot::InternalSwap(MerkleRoot* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, &other->_impl_.hash_, arena);
}

::google::protobuf::Metadata MerkleRoot::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MerklePrefix::_Internal {
 public:
};

MerklePrefix::MerklePrefix(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.commitment.v1.MerklePrefix)
}
inline PROTOBUF_NDEBUG_INLINE MerklePrefix::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::ibc::core::commitment::v1::MerklePrefix& from_msg)
      : key_prefix_(arena, from.key_prefix_),
        _cached_size_{0} {}

MerklePrefix::MerklePrefix(
    ::google::protobuf::Arena* arena,
    const MerklePrefix& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MerklePrefix* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:ibc.core.commitment.v1.MerklePrefix)
}
inline PROTOBUF_NDEBUG_INLINE MerklePrefix::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : key_prefix_(arena),
        _cached_size_{0} {}

inline void MerklePrefix::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
MerklePrefix::~MerklePrefix() {
  // @@protoc_insertion_point(destructor:ibc.core.commitment.v1.MerklePrefix)
  SharedDtor(*this);
}
inline void MerklePrefix::SharedDtor(MessageLite& self) {
  MerklePrefix& this_ = static_cast<MerklePrefix&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.key_prefix_.Destroy();
  this_._impl_.~Impl_();
}

inline void* MerklePrefix::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MerklePrefix(arena);
}
constexpr auto MerklePrefix::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MerklePrefix),
                                            alignof(MerklePrefix));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MerklePrefix::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MerklePrefix_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MerklePrefix::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MerklePrefix>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MerklePrefix::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MerklePrefix>(), &MerklePrefix::ByteSizeLong,
            &MerklePrefix::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MerklePrefix, _impl_._cached_size_),
        false,
    },
    &MerklePrefix::kDescriptorMethods,
    &descriptor_table_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MerklePrefix::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> MerklePrefix::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ibc::core::commitment::v1::MerklePrefix>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bytes key_prefix = 1 [json_name = "keyPrefix"];
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MerklePrefix, _impl_.key_prefix_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes key_prefix = 1 [json_name = "keyPrefix"];
    {PROTOBUF_FIELD_OFFSET(MerklePrefix, _impl_.key_prefix_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void MerklePrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.commitment.v1.MerklePrefix)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_prefix_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MerklePrefix::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MerklePrefix& this_ = static_cast<const MerklePrefix&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MerklePrefix::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MerklePrefix& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:ibc.core.commitment.v1.MerklePrefix)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bytes key_prefix = 1 [json_name = "keyPrefix"];
          if (!this_._internal_key_prefix().empty()) {
            const std::string& _s = this_._internal_key_prefix();
            target = stream->WriteBytesMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:ibc.core.commitment.v1.MerklePrefix)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MerklePrefix::ByteSizeLong(const MessageLite& base) {
          const MerklePrefix& this_ = static_cast<const MerklePrefix&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MerklePrefix::ByteSizeLong() const {
          const MerklePrefix& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:ibc.core.commitment.v1.MerklePrefix)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // bytes key_prefix = 1 [json_name = "keyPrefix"];
            if (!this_._internal_key_prefix().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_key_prefix());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MerklePrefix::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MerklePrefix*>(&to_msg);
  auto& from = static_cast<const MerklePrefix&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.commitment.v1.MerklePrefix)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key_prefix().empty()) {
    _this->_internal_set_key_prefix(from._internal_key_prefix());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MerklePrefix::CopyFrom(const MerklePrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.commitment.v1.MerklePrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MerklePrefix::InternalSwap(MerklePrefix* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_prefix_, &other->_impl_.key_prefix_, arena);
}

::google::protobuf::Metadata MerklePrefix::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MerkleProof::_Internal {
 public:
};

void MerkleProof::clear_proofs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proofs_.Clear();
}
MerkleProof::MerkleProof(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.commitment.v1.MerkleProof)
}
inline PROTOBUF_NDEBUG_INLINE MerkleProof::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::ibc::core::commitment::v1::MerkleProof& from_msg)
      : proofs_{visibility, arena, from.proofs_},
        _cached_size_{0} {}

MerkleProof::MerkleProof(
    ::google::protobuf::Arena* arena,
    const MerkleProof& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MerkleProof* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:ibc.core.commitment.v1.MerkleProof)
}
inline PROTOBUF_NDEBUG_INLINE MerkleProof::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : proofs_{visibility, arena},
        _cached_size_{0} {}

inline void MerkleProof::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
MerkleProof::~MerkleProof() {
  // @@protoc_insertion_point(destructor:ibc.core.commitment.v1.MerkleProof)
  SharedDtor(*this);
}
inline void MerkleProof::SharedDtor(MessageLite& self) {
  MerkleProof& this_ = static_cast<MerkleProof&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* MerkleProof::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MerkleProof(arena);
}
constexpr auto MerkleProof::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(MerkleProof, _impl_.proofs_) +
          decltype(MerkleProof::_impl_.proofs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(MerkleProof), alignof(MerkleProof), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&MerkleProof::PlacementNew_,
                                 sizeof(MerkleProof),
                                 alignof(MerkleProof));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MerkleProof::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MerkleProof_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MerkleProof::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MerkleProof>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MerkleProof::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MerkleProof>(), &MerkleProof::ByteSizeLong,
            &MerkleProof::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MerkleProof, _impl_._cached_size_),
        false,
    },
    &MerkleProof::kDescriptorMethods,
    &descriptor_table_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MerkleProof::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> MerkleProof::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ibc::core::commitment::v1::MerkleProof>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .cosmos.ics23.v1.CommitmentProof proofs = 1 [json_name = "proofs"];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MerkleProof, _impl_.proofs_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cosmos.ics23.v1.CommitmentProof proofs = 1 [json_name = "proofs"];
    {PROTOBUF_FIELD_OFFSET(MerkleProof, _impl_.proofs_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cosmos::ics23::v1::CommitmentProof>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void MerkleProof::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.commitment.v1.MerkleProof)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.proofs_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MerkleProof::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MerkleProof& this_ = static_cast<const MerkleProof&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MerkleProof::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MerkleProof& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:ibc.core.commitment.v1.MerkleProof)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .cosmos.ics23.v1.CommitmentProof proofs = 1 [json_name = "proofs"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_proofs_size());
               i < n; i++) {
            const auto& repfield = this_._internal_proofs().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:ibc.core.commitment.v1.MerkleProof)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MerkleProof::ByteSizeLong(const MessageLite& base) {
          const MerkleProof& this_ = static_cast<const MerkleProof&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MerkleProof::ByteSizeLong() const {
          const MerkleProof& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:ibc.core.commitment.v1.MerkleProof)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .cosmos.ics23.v1.CommitmentProof proofs = 1 [json_name = "proofs"];
            {
              total_size += 1UL * this_._internal_proofs_size();
              for (const auto& msg : this_._internal_proofs()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MerkleProof::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MerkleProof*>(&to_msg);
  auto& from = static_cast<const MerkleProof&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.commitment.v1.MerkleProof)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_proofs()->MergeFrom(
      from._internal_proofs());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MerkleProof::CopyFrom(const MerkleProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.commitment.v1.MerkleProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MerkleProof::InternalSwap(MerkleProof* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.proofs_.InternalSwap(&other->_impl_.proofs_);
}

::google::protobuf::Metadata MerkleProof::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace commitment
}  // namespace core
}  // namespace ibc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
