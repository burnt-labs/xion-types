// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ibc/core/commitment/v1/commitment.proto
// Protobuf C++ Version: 5.29.4

#ifndef ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto_2epb_2eh
#define ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos/ics23/v1/proofs.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto;
namespace ibc {
namespace core {
namespace commitment {
namespace v1 {
class MerklePrefix;
struct MerklePrefixDefaultTypeInternal;
extern MerklePrefixDefaultTypeInternal _MerklePrefix_default_instance_;
class MerkleProof;
struct MerkleProofDefaultTypeInternal;
extern MerkleProofDefaultTypeInternal _MerkleProof_default_instance_;
class MerkleRoot;
struct MerkleRootDefaultTypeInternal;
extern MerkleRootDefaultTypeInternal _MerkleRoot_default_instance_;
}  // namespace v1
}  // namespace commitment
}  // namespace core
}  // namespace ibc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ibc {
namespace core {
namespace commitment {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class MerkleRoot final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.core.commitment.v1.MerkleRoot) */ {
 public:
  inline MerkleRoot() : MerkleRoot(nullptr) {}
  ~MerkleRoot() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MerkleRoot* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MerkleRoot));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MerkleRoot(
      ::google::protobuf::internal::ConstantInitialized);

  inline MerkleRoot(const MerkleRoot& from) : MerkleRoot(nullptr, from) {}
  inline MerkleRoot(MerkleRoot&& from) noexcept
      : MerkleRoot(nullptr, std::move(from)) {}
  inline MerkleRoot& operator=(const MerkleRoot& from) {
    CopyFrom(from);
    return *this;
  }
  inline MerkleRoot& operator=(MerkleRoot&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MerkleRoot& default_instance() {
    return *internal_default_instance();
  }
  static inline const MerkleRoot* internal_default_instance() {
    return reinterpret_cast<const MerkleRoot*>(
        &_MerkleRoot_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MerkleRoot& a, MerkleRoot& b) { a.Swap(&b); }
  inline void Swap(MerkleRoot* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MerkleRoot* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MerkleRoot* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MerkleRoot>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MerkleRoot& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MerkleRoot& from) { MerkleRoot::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MerkleRoot* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.core.commitment.v1.MerkleRoot"; }

 protected:
  explicit MerkleRoot(::google::protobuf::Arena* arena);
  MerkleRoot(::google::protobuf::Arena* arena, const MerkleRoot& from);
  MerkleRoot(::google::protobuf::Arena* arena, MerkleRoot&& from) noexcept
      : MerkleRoot(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHashFieldNumber = 1,
  };
  // bytes hash = 1 [json_name = "hash"];
  void clear_hash() ;
  const std::string& hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hash(Arg_&& arg, Args_... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* value);

  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(
      const std::string& value);
  std::string* _internal_mutable_hash();

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.commitment.v1.MerkleRoot)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MerkleRoot& from_msg);
    ::google::protobuf::internal::ArenaStringPtr hash_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto;
};
// -------------------------------------------------------------------

class MerklePrefix final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.core.commitment.v1.MerklePrefix) */ {
 public:
  inline MerklePrefix() : MerklePrefix(nullptr) {}
  ~MerklePrefix() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MerklePrefix* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MerklePrefix));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MerklePrefix(
      ::google::protobuf::internal::ConstantInitialized);

  inline MerklePrefix(const MerklePrefix& from) : MerklePrefix(nullptr, from) {}
  inline MerklePrefix(MerklePrefix&& from) noexcept
      : MerklePrefix(nullptr, std::move(from)) {}
  inline MerklePrefix& operator=(const MerklePrefix& from) {
    CopyFrom(from);
    return *this;
  }
  inline MerklePrefix& operator=(MerklePrefix&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MerklePrefix& default_instance() {
    return *internal_default_instance();
  }
  static inline const MerklePrefix* internal_default_instance() {
    return reinterpret_cast<const MerklePrefix*>(
        &_MerklePrefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(MerklePrefix& a, MerklePrefix& b) { a.Swap(&b); }
  inline void Swap(MerklePrefix* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MerklePrefix* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MerklePrefix* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MerklePrefix>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MerklePrefix& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MerklePrefix& from) { MerklePrefix::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MerklePrefix* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.core.commitment.v1.MerklePrefix"; }

 protected:
  explicit MerklePrefix(::google::protobuf::Arena* arena);
  MerklePrefix(::google::protobuf::Arena* arena, const MerklePrefix& from);
  MerklePrefix(::google::protobuf::Arena* arena, MerklePrefix&& from) noexcept
      : MerklePrefix(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeyPrefixFieldNumber = 1,
  };
  // bytes key_prefix = 1 [json_name = "keyPrefix"];
  void clear_key_prefix() ;
  const std::string& key_prefix() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key_prefix(Arg_&& arg, Args_... args);
  std::string* mutable_key_prefix();
  PROTOBUF_NODISCARD std::string* release_key_prefix();
  void set_allocated_key_prefix(std::string* value);

  private:
  const std::string& _internal_key_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_prefix(
      const std::string& value);
  std::string* _internal_mutable_key_prefix();

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.commitment.v1.MerklePrefix)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MerklePrefix& from_msg);
    ::google::protobuf::internal::ArenaStringPtr key_prefix_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto;
};
// -------------------------------------------------------------------

class MerkleProof final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.core.commitment.v1.MerkleProof) */ {
 public:
  inline MerkleProof() : MerkleProof(nullptr) {}
  ~MerkleProof() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MerkleProof* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MerkleProof));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MerkleProof(
      ::google::protobuf::internal::ConstantInitialized);

  inline MerkleProof(const MerkleProof& from) : MerkleProof(nullptr, from) {}
  inline MerkleProof(MerkleProof&& from) noexcept
      : MerkleProof(nullptr, std::move(from)) {}
  inline MerkleProof& operator=(const MerkleProof& from) {
    CopyFrom(from);
    return *this;
  }
  inline MerkleProof& operator=(MerkleProof&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MerkleProof& default_instance() {
    return *internal_default_instance();
  }
  static inline const MerkleProof* internal_default_instance() {
    return reinterpret_cast<const MerkleProof*>(
        &_MerkleProof_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(MerkleProof& a, MerkleProof& b) { a.Swap(&b); }
  inline void Swap(MerkleProof* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MerkleProof* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MerkleProof* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MerkleProof>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MerkleProof& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MerkleProof& from) { MerkleProof::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MerkleProof* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.core.commitment.v1.MerkleProof"; }

 protected:
  explicit MerkleProof(::google::protobuf::Arena* arena);
  MerkleProof(::google::protobuf::Arena* arena, const MerkleProof& from);
  MerkleProof(::google::protobuf::Arena* arena, MerkleProof&& from) noexcept
      : MerkleProof(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kProofsFieldNumber = 1,
  };
  // repeated .cosmos.ics23.v1.CommitmentProof proofs = 1 [json_name = "proofs"];
  int proofs_size() const;
  private:
  int _internal_proofs_size() const;

  public:
  void clear_proofs() ;
  ::cosmos::ics23::v1::CommitmentProof* mutable_proofs(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::ics23::v1::CommitmentProof>* mutable_proofs();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::ics23::v1::CommitmentProof>& _internal_proofs() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::ics23::v1::CommitmentProof>* _internal_mutable_proofs();
  public:
  const ::cosmos::ics23::v1::CommitmentProof& proofs(int index) const;
  ::cosmos::ics23::v1::CommitmentProof* add_proofs();
  const ::google::protobuf::RepeatedPtrField<::cosmos::ics23::v1::CommitmentProof>& proofs() const;
  // @@protoc_insertion_point(class_scope:ibc.core.commitment.v1.MerkleProof)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MerkleProof& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::ics23::v1::CommitmentProof > proofs_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MerkleRoot

// bytes hash = 1 [json_name = "hash"];
inline void MerkleRoot::clear_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& MerkleRoot::hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.core.commitment.v1.MerkleRoot.hash)
  return _internal_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MerkleRoot::set_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.core.commitment.v1.MerkleRoot.hash)
}
inline std::string* MerkleRoot::mutable_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:ibc.core.commitment.v1.MerkleRoot.hash)
  return _s;
}
inline const std::string& MerkleRoot::_internal_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hash_.Get();
}
inline void MerkleRoot::_internal_set_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.Set(value, GetArena());
}
inline std::string* MerkleRoot::_internal_mutable_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hash_.Mutable( GetArena());
}
inline std::string* MerkleRoot::release_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.core.commitment.v1.MerkleRoot.hash)
  return _impl_.hash_.Release();
}
inline void MerkleRoot::set_allocated_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.core.commitment.v1.MerkleRoot.hash)
}

// -------------------------------------------------------------------

// MerklePrefix

// bytes key_prefix = 1 [json_name = "keyPrefix"];
inline void MerklePrefix::clear_key_prefix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_prefix_.ClearToEmpty();
}
inline const std::string& MerklePrefix::key_prefix() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.core.commitment.v1.MerklePrefix.key_prefix)
  return _internal_key_prefix();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MerklePrefix::set_key_prefix(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_prefix_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.core.commitment.v1.MerklePrefix.key_prefix)
}
inline std::string* MerklePrefix::mutable_key_prefix() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key_prefix();
  // @@protoc_insertion_point(field_mutable:ibc.core.commitment.v1.MerklePrefix.key_prefix)
  return _s;
}
inline const std::string& MerklePrefix::_internal_key_prefix() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_prefix_.Get();
}
inline void MerklePrefix::_internal_set_key_prefix(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_prefix_.Set(value, GetArena());
}
inline std::string* MerklePrefix::_internal_mutable_key_prefix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.key_prefix_.Mutable( GetArena());
}
inline std::string* MerklePrefix::release_key_prefix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.core.commitment.v1.MerklePrefix.key_prefix)
  return _impl_.key_prefix_.Release();
}
inline void MerklePrefix::set_allocated_key_prefix(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_prefix_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.key_prefix_.IsDefault()) {
    _impl_.key_prefix_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.core.commitment.v1.MerklePrefix.key_prefix)
}

// -------------------------------------------------------------------

// MerkleProof

// repeated .cosmos.ics23.v1.CommitmentProof proofs = 1 [json_name = "proofs"];
inline int MerkleProof::_internal_proofs_size() const {
  return _internal_proofs().size();
}
inline int MerkleProof::proofs_size() const {
  return _internal_proofs_size();
}
inline ::cosmos::ics23::v1::CommitmentProof* MerkleProof::mutable_proofs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ibc.core.commitment.v1.MerkleProof.proofs)
  return _internal_mutable_proofs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::ics23::v1::CommitmentProof>* MerkleProof::mutable_proofs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ibc.core.commitment.v1.MerkleProof.proofs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_proofs();
}
inline const ::cosmos::ics23::v1::CommitmentProof& MerkleProof::proofs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.core.commitment.v1.MerkleProof.proofs)
  return _internal_proofs().Get(index);
}
inline ::cosmos::ics23::v1::CommitmentProof* MerkleProof::add_proofs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::ics23::v1::CommitmentProof* _add = _internal_mutable_proofs()->Add();
  // @@protoc_insertion_point(field_add:ibc.core.commitment.v1.MerkleProof.proofs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::ics23::v1::CommitmentProof>& MerkleProof::proofs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ibc.core.commitment.v1.MerkleProof.proofs)
  return _internal_proofs();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::ics23::v1::CommitmentProof>&
MerkleProof::_internal_proofs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proofs_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::ics23::v1::CommitmentProof>*
MerkleProof::_internal_mutable_proofs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.proofs_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace commitment
}  // namespace core
}  // namespace ibc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto_2epb_2eh
