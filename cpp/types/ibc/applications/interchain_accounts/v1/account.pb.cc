// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ibc/applications/interchain_accounts/v1/account.proto
// Protobuf C++ Version: 5.29.4

#include "ibc/applications/interchain_accounts/v1/account.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace ibc {
namespace applications {
namespace interchain_accounts {
namespace v1 {

inline constexpr InterchainAccount::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        account_owner_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        base_account_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR InterchainAccount::InterchainAccount(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct InterchainAccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InterchainAccountDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InterchainAccountDefaultTypeInternal() {}
  union {
    InterchainAccount _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InterchainAccountDefaultTypeInternal _InterchainAccount_default_instance_;
}  // namespace v1
}  // namespace interchain_accounts
}  // namespace applications
}  // namespace ibc
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto = nullptr;
const ::uint32_t
    TableStruct_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::v1::InterchainAccount, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::v1::InterchainAccount, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::v1::InterchainAccount, _impl_.base_account_),
        PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::v1::InterchainAccount, _impl_.account_owner_),
        0,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::ibc::applications::interchain_accounts::v1::InterchainAccount)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::ibc::applications::interchain_accounts::v1::_InterchainAccount_default_instance_._instance,
};
const char descriptor_table_protodef_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n5ibc/applications/interchain_accounts/v"
    "1/account.proto\022\'ibc.applications.interc"
    "hain_accounts.v1\032\031cosmos_proto/cosmos.pr"
    "oto\032\024gogoproto/gogo.proto\032\036cosmos/auth/v"
    "1beta1/auth.proto\"\313\001\n\021InterchainAccount\022"
    "I\n\014base_account\030\001 \001(\0132 .cosmos.auth.v1be"
    "ta1.BaseAccountB\004\320\336\037\001R\013baseAccount\022#\n\rac"
    "count_owner\030\002 \001(\tR\014accountOwner:F\210\240\037\000\230\240\037"
    "\000\312\264-:ibc.applications.interchain_account"
    "s.v1.InterchainAccountIBHZFgithub.com/co"
    "smos/ibc-go/v10/modules/apps/27-intercha"
    "in-accounts/typesb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto_deps[3] =
    {
        &::descriptor_table_cosmos_2fauth_2fv1beta1_2fauth_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto = {
    false,
    false,
    465,
    descriptor_table_protodef_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto,
    "ibc/applications/interchain_accounts/v1/account.proto",
    &descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto_once,
    descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto_deps,
    3,
    1,
    schemas,
    file_default_instances,
    TableStruct_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto::offsets,
    file_level_enum_descriptors_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto,
    file_level_service_descriptors_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto,
};
namespace ibc {
namespace applications {
namespace interchain_accounts {
namespace v1 {
// ===================================================================

class InterchainAccount::_Internal {
 public:
  using HasBits =
      decltype(std::declval<InterchainAccount>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(InterchainAccount, _impl_._has_bits_);
};

void InterchainAccount::clear_base_account() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.base_account_ != nullptr) _impl_.base_account_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
InterchainAccount::InterchainAccount(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.interchain_accounts.v1.InterchainAccount)
}
inline PROTOBUF_NDEBUG_INLINE InterchainAccount::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::ibc::applications::interchain_accounts::v1::InterchainAccount& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        account_owner_(arena, from.account_owner_) {}

InterchainAccount::InterchainAccount(
    ::google::protobuf::Arena* arena,
    const InterchainAccount& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  InterchainAccount* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.base_account_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::cosmos::auth::v1beta1::BaseAccount>(
                              arena, *from._impl_.base_account_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:ibc.applications.interchain_accounts.v1.InterchainAccount)
}
inline PROTOBUF_NDEBUG_INLINE InterchainAccount::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        account_owner_(arena) {}

inline void InterchainAccount::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.base_account_ = {};
}
InterchainAccount::~InterchainAccount() {
  // @@protoc_insertion_point(destructor:ibc.applications.interchain_accounts.v1.InterchainAccount)
  SharedDtor(*this);
}
inline void InterchainAccount::SharedDtor(MessageLite& self) {
  InterchainAccount& this_ = static_cast<InterchainAccount&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.account_owner_.Destroy();
  delete this_._impl_.base_account_;
  this_._impl_.~Impl_();
}

inline void* InterchainAccount::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) InterchainAccount(arena);
}
constexpr auto InterchainAccount::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(InterchainAccount),
                                            alignof(InterchainAccount));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull InterchainAccount::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_InterchainAccount_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &InterchainAccount::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<InterchainAccount>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &InterchainAccount::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<InterchainAccount>(), &InterchainAccount::ByteSizeLong,
            &InterchainAccount::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(InterchainAccount, _impl_._cached_size_),
        false,
    },
    &InterchainAccount::kDescriptorMethods,
    &descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* InterchainAccount::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 79, 2> InterchainAccount::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(InterchainAccount, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ibc::applications::interchain_accounts::v1::InterchainAccount>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string account_owner = 2 [json_name = "accountOwner"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(InterchainAccount, _impl_.account_owner_)}},
    // .cosmos.auth.v1beta1.BaseAccount base_account = 1 [json_name = "baseAccount", (.gogoproto.embed) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(InterchainAccount, _impl_.base_account_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .cosmos.auth.v1beta1.BaseAccount base_account = 1 [json_name = "baseAccount", (.gogoproto.embed) = true];
    {PROTOBUF_FIELD_OFFSET(InterchainAccount, _impl_.base_account_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string account_owner = 2 [json_name = "accountOwner"];
    {PROTOBUF_FIELD_OFFSET(InterchainAccount, _impl_.account_owner_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cosmos::auth::v1beta1::BaseAccount>()},
  }}, {{
    "\71\0\15\0\0\0\0\0"
    "ibc.applications.interchain_accounts.v1.InterchainAccount"
    "account_owner"
  }},
};

PROTOBUF_NOINLINE void InterchainAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.interchain_accounts.v1.InterchainAccount)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_owner_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.base_account_ != nullptr);
    _impl_.base_account_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* InterchainAccount::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const InterchainAccount& this_ = static_cast<const InterchainAccount&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* InterchainAccount::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const InterchainAccount& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.interchain_accounts.v1.InterchainAccount)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .cosmos.auth.v1beta1.BaseAccount base_account = 1 [json_name = "baseAccount", (.gogoproto.embed) = true];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.base_account_, this_._impl_.base_account_->GetCachedSize(), target,
                stream);
          }

          // string account_owner = 2 [json_name = "accountOwner"];
          if (!this_._internal_account_owner().empty()) {
            const std::string& _s = this_._internal_account_owner();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ibc.applications.interchain_accounts.v1.InterchainAccount.account_owner");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.interchain_accounts.v1.InterchainAccount)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t InterchainAccount::ByteSizeLong(const MessageLite& base) {
          const InterchainAccount& this_ = static_cast<const InterchainAccount&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t InterchainAccount::ByteSizeLong() const {
          const InterchainAccount& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:ibc.applications.interchain_accounts.v1.InterchainAccount)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string account_owner = 2 [json_name = "accountOwner"];
            if (!this_._internal_account_owner().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_account_owner());
            }
          }
           {
            // .cosmos.auth.v1beta1.BaseAccount base_account = 1 [json_name = "baseAccount", (.gogoproto.embed) = true];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.base_account_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void InterchainAccount::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<InterchainAccount*>(&to_msg);
  auto& from = static_cast<const InterchainAccount&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.interchain_accounts.v1.InterchainAccount)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_owner().empty()) {
    _this->_internal_set_account_owner(from._internal_account_owner());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.base_account_ != nullptr);
    if (_this->_impl_.base_account_ == nullptr) {
      _this->_impl_.base_account_ =
          ::google::protobuf::Message::CopyConstruct<::cosmos::auth::v1beta1::BaseAccount>(arena, *from._impl_.base_account_);
    } else {
      _this->_impl_.base_account_->MergeFrom(*from._impl_.base_account_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InterchainAccount::CopyFrom(const InterchainAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.interchain_accounts.v1.InterchainAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void InterchainAccount::InternalSwap(InterchainAccount* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_owner_, &other->_impl_.account_owner_, arena);
  swap(_impl_.base_account_, other->_impl_.base_account_);
}

::google::protobuf::Metadata InterchainAccount::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace interchain_accounts
}  // namespace applications
}  // namespace ibc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
