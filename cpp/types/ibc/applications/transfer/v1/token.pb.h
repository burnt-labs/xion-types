// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ibc/applications/transfer/v1/token.proto
// Protobuf C++ Version: 5.29.4

#ifndef ibc_2fapplications_2ftransfer_2fv1_2ftoken_2eproto_2epb_2eh
#define ibc_2fapplications_2ftransfer_2fv1_2ftoken_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ibc_2fapplications_2ftransfer_2fv1_2ftoken_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ibc_2fapplications_2ftransfer_2fv1_2ftoken_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ibc_2fapplications_2ftransfer_2fv1_2ftoken_2eproto;
namespace ibc {
namespace applications {
namespace transfer {
namespace v1 {
class Denom;
struct DenomDefaultTypeInternal;
extern DenomDefaultTypeInternal _Denom_default_instance_;
class Hop;
struct HopDefaultTypeInternal;
extern HopDefaultTypeInternal _Hop_default_instance_;
class Token;
struct TokenDefaultTypeInternal;
extern TokenDefaultTypeInternal _Token_default_instance_;
}  // namespace v1
}  // namespace transfer
}  // namespace applications
}  // namespace ibc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ibc {
namespace applications {
namespace transfer {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class Hop final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.applications.transfer.v1.Hop) */ {
 public:
  inline Hop() : Hop(nullptr) {}
  ~Hop() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Hop* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Hop));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Hop(
      ::google::protobuf::internal::ConstantInitialized);

  inline Hop(const Hop& from) : Hop(nullptr, from) {}
  inline Hop(Hop&& from) noexcept
      : Hop(nullptr, std::move(from)) {}
  inline Hop& operator=(const Hop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hop& operator=(Hop&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Hop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Hop* internal_default_instance() {
    return reinterpret_cast<const Hop*>(
        &_Hop_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Hop& a, Hop& b) { a.Swap(&b); }
  inline void Swap(Hop* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Hop* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Hop* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Hop>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Hop& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Hop& from) { Hop::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Hop* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.applications.transfer.v1.Hop"; }

 protected:
  explicit Hop(::google::protobuf::Arena* arena);
  Hop(::google::protobuf::Arena* arena, const Hop& from);
  Hop(::google::protobuf::Arena* arena, Hop&& from) noexcept
      : Hop(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPortIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
  };
  // string port_id = 1 [json_name = "portId"];
  void clear_port_id() ;
  const std::string& port_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port_id(Arg_&& arg, Args_... args);
  std::string* mutable_port_id();
  PROTOBUF_NODISCARD std::string* release_port_id();
  void set_allocated_port_id(std::string* value);

  private:
  const std::string& _internal_port_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port_id(
      const std::string& value);
  std::string* _internal_mutable_port_id();

  public:
  // string channel_id = 2 [json_name = "channelId"];
  void clear_channel_id() ;
  const std::string& channel_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* value);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.transfer.v1.Hop)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      58, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Hop& from_msg);
    ::google::protobuf::internal::ArenaStringPtr port_id_;
    ::google::protobuf::internal::ArenaStringPtr channel_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ftransfer_2fv1_2ftoken_2eproto;
};
// -------------------------------------------------------------------

class Denom final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.applications.transfer.v1.Denom) */ {
 public:
  inline Denom() : Denom(nullptr) {}
  ~Denom() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Denom* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Denom));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Denom(
      ::google::protobuf::internal::ConstantInitialized);

  inline Denom(const Denom& from) : Denom(nullptr, from) {}
  inline Denom(Denom&& from) noexcept
      : Denom(nullptr, std::move(from)) {}
  inline Denom& operator=(const Denom& from) {
    CopyFrom(from);
    return *this;
  }
  inline Denom& operator=(Denom&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Denom& default_instance() {
    return *internal_default_instance();
  }
  static inline const Denom* internal_default_instance() {
    return reinterpret_cast<const Denom*>(
        &_Denom_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Denom& a, Denom& b) { a.Swap(&b); }
  inline void Swap(Denom* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Denom* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Denom* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Denom>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Denom& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Denom& from) { Denom::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Denom* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.applications.transfer.v1.Denom"; }

 protected:
  explicit Denom(::google::protobuf::Arena* arena);
  Denom(::google::protobuf::Arena* arena, const Denom& from);
  Denom(::google::protobuf::Arena* arena, Denom&& from) noexcept
      : Denom(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTraceFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // repeated .ibc.applications.transfer.v1.Hop trace = 3 [json_name = "trace", (.gogoproto.nullable) = false];
  int trace_size() const;
  private:
  int _internal_trace_size() const;

  public:
  void clear_trace() ;
  ::ibc::applications::transfer::v1::Hop* mutable_trace(int index);
  ::google::protobuf::RepeatedPtrField<::ibc::applications::transfer::v1::Hop>* mutable_trace();

  private:
  const ::google::protobuf::RepeatedPtrField<::ibc::applications::transfer::v1::Hop>& _internal_trace() const;
  ::google::protobuf::RepeatedPtrField<::ibc::applications::transfer::v1::Hop>* _internal_mutable_trace();
  public:
  const ::ibc::applications::transfer::v1::Hop& trace(int index) const;
  ::ibc::applications::transfer::v1::Hop* add_trace();
  const ::google::protobuf::RepeatedPtrField<::ibc::applications::transfer::v1::Hop>& trace() const;
  // string base = 1 [json_name = "base"];
  void clear_base() ;
  const std::string& base() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_base(Arg_&& arg, Args_... args);
  std::string* mutable_base();
  PROTOBUF_NODISCARD std::string* release_base();
  void set_allocated_base(std::string* value);

  private:
  const std::string& _internal_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base(
      const std::string& value);
  std::string* _internal_mutable_base();

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.transfer.v1.Denom)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      47, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Denom& from_msg);
    ::google::protobuf::RepeatedPtrField< ::ibc::applications::transfer::v1::Hop > trace_;
    ::google::protobuf::internal::ArenaStringPtr base_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ftransfer_2fv1_2ftoken_2eproto;
};
// -------------------------------------------------------------------

class Token final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.applications.transfer.v1.Token) */ {
 public:
  inline Token() : Token(nullptr) {}
  ~Token() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Token* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Token));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Token(
      ::google::protobuf::internal::ConstantInitialized);

  inline Token(const Token& from) : Token(nullptr, from) {}
  inline Token(Token&& from) noexcept
      : Token(nullptr, std::move(from)) {}
  inline Token& operator=(const Token& from) {
    CopyFrom(from);
    return *this;
  }
  inline Token& operator=(Token&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Token& default_instance() {
    return *internal_default_instance();
  }
  static inline const Token* internal_default_instance() {
    return reinterpret_cast<const Token*>(
        &_Token_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Token& a, Token& b) { a.Swap(&b); }
  inline void Swap(Token* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Token* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Token* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Token>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Token& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Token& from) { Token::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Token* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.applications.transfer.v1.Token"; }

 protected:
  explicit Token(::google::protobuf::Arena* arena);
  Token(::google::protobuf::Arena* arena, const Token& from);
  Token(::google::protobuf::Arena* arena, Token&& from) noexcept
      : Token(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAmountFieldNumber = 2,
    kDenomFieldNumber = 1,
  };
  // string amount = 2 [json_name = "amount"];
  void clear_amount() ;
  const std::string& amount() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_amount(Arg_&& arg, Args_... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* value);

  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(
      const std::string& value);
  std::string* _internal_mutable_amount();

  public:
  // .ibc.applications.transfer.v1.Denom denom = 1 [json_name = "denom", (.gogoproto.nullable) = false];
  bool has_denom() const;
  void clear_denom() ;
  const ::ibc::applications::transfer::v1::Denom& denom() const;
  PROTOBUF_NODISCARD ::ibc::applications::transfer::v1::Denom* release_denom();
  ::ibc::applications::transfer::v1::Denom* mutable_denom();
  void set_allocated_denom(::ibc::applications::transfer::v1::Denom* value);
  void unsafe_arena_set_allocated_denom(::ibc::applications::transfer::v1::Denom* value);
  ::ibc::applications::transfer::v1::Denom* unsafe_arena_release_denom();

  private:
  const ::ibc::applications::transfer::v1::Denom& _internal_denom() const;
  ::ibc::applications::transfer::v1::Denom* _internal_mutable_denom();

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.transfer.v1.Token)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Token& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr amount_;
    ::ibc::applications::transfer::v1::Denom* denom_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ftransfer_2fv1_2ftoken_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Token

// .ibc.applications.transfer.v1.Denom denom = 1 [json_name = "denom", (.gogoproto.nullable) = false];
inline bool Token::has_denom() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.denom_ != nullptr);
  return value;
}
inline void Token::clear_denom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.denom_ != nullptr) _impl_.denom_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ibc::applications::transfer::v1::Denom& Token::_internal_denom() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ibc::applications::transfer::v1::Denom* p = _impl_.denom_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::applications::transfer::v1::Denom&>(::ibc::applications::transfer::v1::_Denom_default_instance_);
}
inline const ::ibc::applications::transfer::v1::Denom& Token::denom() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.Token.denom)
  return _internal_denom();
}
inline void Token::unsafe_arena_set_allocated_denom(::ibc::applications::transfer::v1::Denom* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.denom_);
  }
  _impl_.denom_ = reinterpret_cast<::ibc::applications::transfer::v1::Denom*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.applications.transfer.v1.Token.denom)
}
inline ::ibc::applications::transfer::v1::Denom* Token::release_denom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::applications::transfer::v1::Denom* released = _impl_.denom_;
  _impl_.denom_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ibc::applications::transfer::v1::Denom* Token::unsafe_arena_release_denom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v1.Token.denom)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::applications::transfer::v1::Denom* temp = _impl_.denom_;
  _impl_.denom_ = nullptr;
  return temp;
}
inline ::ibc::applications::transfer::v1::Denom* Token::_internal_mutable_denom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.denom_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ibc::applications::transfer::v1::Denom>(GetArena());
    _impl_.denom_ = reinterpret_cast<::ibc::applications::transfer::v1::Denom*>(p);
  }
  return _impl_.denom_;
}
inline ::ibc::applications::transfer::v1::Denom* Token::mutable_denom() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::ibc::applications::transfer::v1::Denom* _msg = _internal_mutable_denom();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.Token.denom)
  return _msg;
}
inline void Token::set_allocated_denom(::ibc::applications::transfer::v1::Denom* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.denom_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.denom_ = reinterpret_cast<::ibc::applications::transfer::v1::Denom*>(value);
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v1.Token.denom)
}

// string amount = 2 [json_name = "amount"];
inline void Token::clear_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_.ClearToEmpty();
}
inline const std::string& Token::amount() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.Token.amount)
  return _internal_amount();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Token::set_amount(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.applications.transfer.v1.Token.amount)
}
inline std::string* Token::mutable_amount() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.Token.amount)
  return _s;
}
inline const std::string& Token::_internal_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_.Get();
}
inline void Token::_internal_set_amount(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_.Set(value, GetArena());
}
inline std::string* Token::_internal_mutable_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.amount_.Mutable( GetArena());
}
inline std::string* Token::release_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v1.Token.amount)
  return _impl_.amount_.Release();
}
inline void Token::set_allocated_amount(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.amount_.IsDefault()) {
    _impl_.amount_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v1.Token.amount)
}

// -------------------------------------------------------------------

// Denom

// string base = 1 [json_name = "base"];
inline void Denom::clear_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_.ClearToEmpty();
}
inline const std::string& Denom::base() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.Denom.base)
  return _internal_base();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Denom::set_base(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.applications.transfer.v1.Denom.base)
}
inline std::string* Denom::mutable_base() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.Denom.base)
  return _s;
}
inline const std::string& Denom::_internal_base() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.base_.Get();
}
inline void Denom::_internal_set_base(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_.Set(value, GetArena());
}
inline std::string* Denom::_internal_mutable_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.base_.Mutable( GetArena());
}
inline std::string* Denom::release_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v1.Denom.base)
  return _impl_.base_.Release();
}
inline void Denom::set_allocated_base(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.base_.IsDefault()) {
    _impl_.base_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v1.Denom.base)
}

// repeated .ibc.applications.transfer.v1.Hop trace = 3 [json_name = "trace", (.gogoproto.nullable) = false];
inline int Denom::_internal_trace_size() const {
  return _internal_trace().size();
}
inline int Denom::trace_size() const {
  return _internal_trace_size();
}
inline void Denom::clear_trace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trace_.Clear();
}
inline ::ibc::applications::transfer::v1::Hop* Denom::mutable_trace(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.Denom.trace)
  return _internal_mutable_trace()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ibc::applications::transfer::v1::Hop>* Denom::mutable_trace()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ibc.applications.transfer.v1.Denom.trace)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_trace();
}
inline const ::ibc::applications::transfer::v1::Hop& Denom::trace(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.Denom.trace)
  return _internal_trace().Get(index);
}
inline ::ibc::applications::transfer::v1::Hop* Denom::add_trace() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::ibc::applications::transfer::v1::Hop* _add = _internal_mutable_trace()->Add();
  // @@protoc_insertion_point(field_add:ibc.applications.transfer.v1.Denom.trace)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ibc::applications::transfer::v1::Hop>& Denom::trace() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ibc.applications.transfer.v1.Denom.trace)
  return _internal_trace();
}
inline const ::google::protobuf::RepeatedPtrField<::ibc::applications::transfer::v1::Hop>&
Denom::_internal_trace() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.trace_;
}
inline ::google::protobuf::RepeatedPtrField<::ibc::applications::transfer::v1::Hop>*
Denom::_internal_mutable_trace() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.trace_;
}

// -------------------------------------------------------------------

// Hop

// string port_id = 1 [json_name = "portId"];
inline void Hop::clear_port_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_id_.ClearToEmpty();
}
inline const std::string& Hop::port_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.Hop.port_id)
  return _internal_port_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Hop::set_port_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.applications.transfer.v1.Hop.port_id)
}
inline std::string* Hop::mutable_port_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_port_id();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.Hop.port_id)
  return _s;
}
inline const std::string& Hop::_internal_port_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.port_id_.Get();
}
inline void Hop::_internal_set_port_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_id_.Set(value, GetArena());
}
inline std::string* Hop::_internal_mutable_port_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.port_id_.Mutable( GetArena());
}
inline std::string* Hop::release_port_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v1.Hop.port_id)
  return _impl_.port_id_.Release();
}
inline void Hop::set_allocated_port_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.port_id_.IsDefault()) {
    _impl_.port_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v1.Hop.port_id)
}

// string channel_id = 2 [json_name = "channelId"];
inline void Hop::clear_channel_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& Hop::channel_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.Hop.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Hop::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.applications.transfer.v1.Hop.channel_id)
}
inline std::string* Hop::mutable_channel_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.Hop.channel_id)
  return _s;
}
inline const std::string& Hop::_internal_channel_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.channel_id_.Get();
}
inline void Hop::_internal_set_channel_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_id_.Set(value, GetArena());
}
inline std::string* Hop::_internal_mutable_channel_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.channel_id_.Mutable( GetArena());
}
inline std::string* Hop::release_channel_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v1.Hop.channel_id)
  return _impl_.channel_id_.Release();
}
inline void Hop::set_allocated_channel_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.channel_id_.IsDefault()) {
    _impl_.channel_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v1.Hop.channel_id)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace transfer
}  // namespace applications
}  // namespace ibc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // ibc_2fapplications_2ftransfer_2fv1_2ftoken_2eproto_2epb_2eh
