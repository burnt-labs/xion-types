// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ibc/applications/transfer/v1/authz.proto
// Protobuf C++ Version: 5.29.4

#ifndef ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto_2epb_2eh
#define ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cosmos_proto/cosmos.pb.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto;
namespace ibc {
namespace applications {
namespace transfer {
namespace v1 {
class Allocation;
struct AllocationDefaultTypeInternal;
extern AllocationDefaultTypeInternal _Allocation_default_instance_;
class TransferAuthorization;
struct TransferAuthorizationDefaultTypeInternal;
extern TransferAuthorizationDefaultTypeInternal _TransferAuthorization_default_instance_;
}  // namespace v1
}  // namespace transfer
}  // namespace applications
}  // namespace ibc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ibc {
namespace applications {
namespace transfer {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class Allocation final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.applications.transfer.v1.Allocation) */ {
 public:
  inline Allocation() : Allocation(nullptr) {}
  ~Allocation() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Allocation* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Allocation));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Allocation(
      ::google::protobuf::internal::ConstantInitialized);

  inline Allocation(const Allocation& from) : Allocation(nullptr, from) {}
  inline Allocation(Allocation&& from) noexcept
      : Allocation(nullptr, std::move(from)) {}
  inline Allocation& operator=(const Allocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Allocation& operator=(Allocation&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Allocation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Allocation* internal_default_instance() {
    return reinterpret_cast<const Allocation*>(
        &_Allocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Allocation& a, Allocation& b) { a.Swap(&b); }
  inline void Swap(Allocation* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Allocation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Allocation* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Allocation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Allocation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Allocation& from) { Allocation::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Allocation* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.applications.transfer.v1.Allocation"; }

 protected:
  explicit Allocation(::google::protobuf::Arena* arena);
  Allocation(::google::protobuf::Arena* arena, const Allocation& from);
  Allocation(::google::protobuf::Arena* arena, Allocation&& from) noexcept
      : Allocation(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSpendLimitFieldNumber = 3,
    kAllowListFieldNumber = 4,
    kAllowedPacketDataFieldNumber = 5,
    kSourcePortFieldNumber = 1,
    kSourceChannelFieldNumber = 2,
  };
  // repeated .cosmos.base.v1beta1.Coin spend_limit = 3 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  int spend_limit_size() const;
  private:
  int _internal_spend_limit_size() const;

  public:
  void clear_spend_limit() ;
  ::cosmos::base::v1beta1::Coin* mutable_spend_limit(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* mutable_spend_limit();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_spend_limit() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_spend_limit();
  public:
  const ::cosmos::base::v1beta1::Coin& spend_limit(int index) const;
  ::cosmos::base::v1beta1::Coin* add_spend_limit();
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& spend_limit() const;
  // repeated string allow_list = 4 [json_name = "allowList"];
  int allow_list_size() const;
  private:
  int _internal_allow_list_size() const;

  public:
  void clear_allow_list() ;
  const std::string& allow_list(int index) const;
  std::string* mutable_allow_list(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_allow_list(int index, Arg_&& value, Args_... args);
  std::string* add_allow_list();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_allow_list(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& allow_list() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_allow_list();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_allow_list() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_allow_list();

  public:
  // repeated string allowed_packet_data = 5 [json_name = "allowedPacketData"];
  int allowed_packet_data_size() const;
  private:
  int _internal_allowed_packet_data_size() const;

  public:
  void clear_allowed_packet_data() ;
  const std::string& allowed_packet_data(int index) const;
  std::string* mutable_allowed_packet_data(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_allowed_packet_data(int index, Arg_&& value, Args_... args);
  std::string* add_allowed_packet_data();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_allowed_packet_data(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& allowed_packet_data() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_allowed_packet_data();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_allowed_packet_data() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_allowed_packet_data();

  public:
  // string source_port = 1 [json_name = "sourcePort"];
  void clear_source_port() ;
  const std::string& source_port() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source_port(Arg_&& arg, Args_... args);
  std::string* mutable_source_port();
  PROTOBUF_NODISCARD std::string* release_source_port();
  void set_allocated_source_port(std::string* value);

  private:
  const std::string& _internal_source_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_port(
      const std::string& value);
  std::string* _internal_mutable_source_port();

  public:
  // string source_channel = 2 [json_name = "sourceChannel"];
  void clear_source_channel() ;
  const std::string& source_channel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source_channel(Arg_&& arg, Args_... args);
  std::string* mutable_source_channel();
  PROTOBUF_NODISCARD std::string* release_source_channel();
  void set_allocated_source_channel(std::string* value);

  private:
  const std::string& _internal_source_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_channel(
      const std::string& value);
  std::string* _internal_mutable_source_channel();

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.transfer.v1.Allocation)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      102, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Allocation& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > spend_limit_;
    ::google::protobuf::RepeatedPtrField<std::string> allow_list_;
    ::google::protobuf::RepeatedPtrField<std::string> allowed_packet_data_;
    ::google::protobuf::internal::ArenaStringPtr source_port_;
    ::google::protobuf::internal::ArenaStringPtr source_channel_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto;
};
// -------------------------------------------------------------------

class TransferAuthorization final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ibc.applications.transfer.v1.TransferAuthorization) */ {
 public:
  inline TransferAuthorization() : TransferAuthorization(nullptr) {}
  ~TransferAuthorization() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TransferAuthorization* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TransferAuthorization));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TransferAuthorization(
      ::google::protobuf::internal::ConstantInitialized);

  inline TransferAuthorization(const TransferAuthorization& from) : TransferAuthorization(nullptr, from) {}
  inline TransferAuthorization(TransferAuthorization&& from) noexcept
      : TransferAuthorization(nullptr, std::move(from)) {}
  inline TransferAuthorization& operator=(const TransferAuthorization& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferAuthorization& operator=(TransferAuthorization&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferAuthorization& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferAuthorization* internal_default_instance() {
    return reinterpret_cast<const TransferAuthorization*>(
        &_TransferAuthorization_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(TransferAuthorization& a, TransferAuthorization& b) { a.Swap(&b); }
  inline void Swap(TransferAuthorization* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferAuthorization* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransferAuthorization* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TransferAuthorization>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TransferAuthorization& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TransferAuthorization& from) { TransferAuthorization::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TransferAuthorization* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ibc.applications.transfer.v1.TransferAuthorization"; }

 protected:
  explicit TransferAuthorization(::google::protobuf::Arena* arena);
  TransferAuthorization(::google::protobuf::Arena* arena, const TransferAuthorization& from);
  TransferAuthorization(::google::protobuf::Arena* arena, TransferAuthorization&& from) noexcept
      : TransferAuthorization(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAllocationsFieldNumber = 1,
  };
  // repeated .ibc.applications.transfer.v1.Allocation allocations = 1 [json_name = "allocations", (.gogoproto.nullable) = false];
  int allocations_size() const;
  private:
  int _internal_allocations_size() const;

  public:
  void clear_allocations() ;
  ::ibc::applications::transfer::v1::Allocation* mutable_allocations(int index);
  ::google::protobuf::RepeatedPtrField<::ibc::applications::transfer::v1::Allocation>* mutable_allocations();

  private:
  const ::google::protobuf::RepeatedPtrField<::ibc::applications::transfer::v1::Allocation>& _internal_allocations() const;
  ::google::protobuf::RepeatedPtrField<::ibc::applications::transfer::v1::Allocation>* _internal_mutable_allocations();
  public:
  const ::ibc::applications::transfer::v1::Allocation& allocations(int index) const;
  ::ibc::applications::transfer::v1::Allocation* add_allocations();
  const ::google::protobuf::RepeatedPtrField<::ibc::applications::transfer::v1::Allocation>& allocations() const;
  // @@protoc_insertion_point(class_scope:ibc.applications.transfer.v1.TransferAuthorization)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TransferAuthorization& from_msg);
    ::google::protobuf::RepeatedPtrField< ::ibc::applications::transfer::v1::Allocation > allocations_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Allocation

// string source_port = 1 [json_name = "sourcePort"];
inline void Allocation::clear_source_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_port_.ClearToEmpty();
}
inline const std::string& Allocation::source_port() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.Allocation.source_port)
  return _internal_source_port();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Allocation::set_source_port(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_port_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.applications.transfer.v1.Allocation.source_port)
}
inline std::string* Allocation::mutable_source_port() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_source_port();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.Allocation.source_port)
  return _s;
}
inline const std::string& Allocation::_internal_source_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.source_port_.Get();
}
inline void Allocation::_internal_set_source_port(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_port_.Set(value, GetArena());
}
inline std::string* Allocation::_internal_mutable_source_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.source_port_.Mutable( GetArena());
}
inline std::string* Allocation::release_source_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v1.Allocation.source_port)
  return _impl_.source_port_.Release();
}
inline void Allocation::set_allocated_source_port(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_port_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.source_port_.IsDefault()) {
    _impl_.source_port_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v1.Allocation.source_port)
}

// string source_channel = 2 [json_name = "sourceChannel"];
inline void Allocation::clear_source_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_channel_.ClearToEmpty();
}
inline const std::string& Allocation::source_channel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.Allocation.source_channel)
  return _internal_source_channel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Allocation::set_source_channel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_channel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ibc.applications.transfer.v1.Allocation.source_channel)
}
inline std::string* Allocation::mutable_source_channel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_source_channel();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.Allocation.source_channel)
  return _s;
}
inline const std::string& Allocation::_internal_source_channel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.source_channel_.Get();
}
inline void Allocation::_internal_set_source_channel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_channel_.Set(value, GetArena());
}
inline std::string* Allocation::_internal_mutable_source_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.source_channel_.Mutable( GetArena());
}
inline std::string* Allocation::release_source_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v1.Allocation.source_channel)
  return _impl_.source_channel_.Release();
}
inline void Allocation::set_allocated_source_channel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_channel_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.source_channel_.IsDefault()) {
    _impl_.source_channel_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v1.Allocation.source_channel)
}

// repeated .cosmos.base.v1beta1.Coin spend_limit = 3 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
inline int Allocation::_internal_spend_limit_size() const {
  return _internal_spend_limit().size();
}
inline int Allocation::spend_limit_size() const {
  return _internal_spend_limit_size();
}
inline ::cosmos::base::v1beta1::Coin* Allocation::mutable_spend_limit(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.Allocation.spend_limit)
  return _internal_mutable_spend_limit()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* Allocation::mutable_spend_limit()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ibc.applications.transfer.v1.Allocation.spend_limit)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_spend_limit();
}
inline const ::cosmos::base::v1beta1::Coin& Allocation::spend_limit(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.Allocation.spend_limit)
  return _internal_spend_limit().Get(index);
}
inline ::cosmos::base::v1beta1::Coin* Allocation::add_spend_limit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::base::v1beta1::Coin* _add = _internal_mutable_spend_limit()->Add();
  // @@protoc_insertion_point(field_add:ibc.applications.transfer.v1.Allocation.spend_limit)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& Allocation::spend_limit() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ibc.applications.transfer.v1.Allocation.spend_limit)
  return _internal_spend_limit();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
Allocation::_internal_spend_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.spend_limit_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
Allocation::_internal_mutable_spend_limit() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.spend_limit_;
}

// repeated string allow_list = 4 [json_name = "allowList"];
inline int Allocation::_internal_allow_list_size() const {
  return _internal_allow_list().size();
}
inline int Allocation::allow_list_size() const {
  return _internal_allow_list_size();
}
inline void Allocation::clear_allow_list() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_list_.Clear();
}
inline std::string* Allocation::add_allow_list() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_allow_list()->Add();
  // @@protoc_insertion_point(field_add_mutable:ibc.applications.transfer.v1.Allocation.allow_list)
  return _s;
}
inline const std::string& Allocation::allow_list(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.Allocation.allow_list)
  return _internal_allow_list().Get(index);
}
inline std::string* Allocation::mutable_allow_list(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.Allocation.allow_list)
  return _internal_mutable_allow_list()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void Allocation::set_allow_list(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_allow_list()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:ibc.applications.transfer.v1.Allocation.allow_list)
}
template <typename Arg_, typename... Args_>
inline void Allocation::add_allow_list(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_allow_list(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:ibc.applications.transfer.v1.Allocation.allow_list)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Allocation::allow_list() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ibc.applications.transfer.v1.Allocation.allow_list)
  return _internal_allow_list();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Allocation::mutable_allow_list() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ibc.applications.transfer.v1.Allocation.allow_list)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_allow_list();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Allocation::_internal_allow_list() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allow_list_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Allocation::_internal_mutable_allow_list() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.allow_list_;
}

// repeated string allowed_packet_data = 5 [json_name = "allowedPacketData"];
inline int Allocation::_internal_allowed_packet_data_size() const {
  return _internal_allowed_packet_data().size();
}
inline int Allocation::allowed_packet_data_size() const {
  return _internal_allowed_packet_data_size();
}
inline void Allocation::clear_allowed_packet_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allowed_packet_data_.Clear();
}
inline std::string* Allocation::add_allowed_packet_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_allowed_packet_data()->Add();
  // @@protoc_insertion_point(field_add_mutable:ibc.applications.transfer.v1.Allocation.allowed_packet_data)
  return _s;
}
inline const std::string& Allocation::allowed_packet_data(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.Allocation.allowed_packet_data)
  return _internal_allowed_packet_data().Get(index);
}
inline std::string* Allocation::mutable_allowed_packet_data(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.Allocation.allowed_packet_data)
  return _internal_mutable_allowed_packet_data()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void Allocation::set_allowed_packet_data(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_allowed_packet_data()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:ibc.applications.transfer.v1.Allocation.allowed_packet_data)
}
template <typename Arg_, typename... Args_>
inline void Allocation::add_allowed_packet_data(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_allowed_packet_data(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:ibc.applications.transfer.v1.Allocation.allowed_packet_data)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Allocation::allowed_packet_data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ibc.applications.transfer.v1.Allocation.allowed_packet_data)
  return _internal_allowed_packet_data();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Allocation::mutable_allowed_packet_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ibc.applications.transfer.v1.Allocation.allowed_packet_data)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_allowed_packet_data();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Allocation::_internal_allowed_packet_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allowed_packet_data_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Allocation::_internal_mutable_allowed_packet_data() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.allowed_packet_data_;
}

// -------------------------------------------------------------------

// TransferAuthorization

// repeated .ibc.applications.transfer.v1.Allocation allocations = 1 [json_name = "allocations", (.gogoproto.nullable) = false];
inline int TransferAuthorization::_internal_allocations_size() const {
  return _internal_allocations().size();
}
inline int TransferAuthorization::allocations_size() const {
  return _internal_allocations_size();
}
inline void TransferAuthorization::clear_allocations() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allocations_.Clear();
}
inline ::ibc::applications::transfer::v1::Allocation* TransferAuthorization::mutable_allocations(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.TransferAuthorization.allocations)
  return _internal_mutable_allocations()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ibc::applications::transfer::v1::Allocation>* TransferAuthorization::mutable_allocations()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ibc.applications.transfer.v1.TransferAuthorization.allocations)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_allocations();
}
inline const ::ibc::applications::transfer::v1::Allocation& TransferAuthorization::allocations(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.TransferAuthorization.allocations)
  return _internal_allocations().Get(index);
}
inline ::ibc::applications::transfer::v1::Allocation* TransferAuthorization::add_allocations() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::ibc::applications::transfer::v1::Allocation* _add = _internal_mutable_allocations()->Add();
  // @@protoc_insertion_point(field_add:ibc.applications.transfer.v1.TransferAuthorization.allocations)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ibc::applications::transfer::v1::Allocation>& TransferAuthorization::allocations() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ibc.applications.transfer.v1.TransferAuthorization.allocations)
  return _internal_allocations();
}
inline const ::google::protobuf::RepeatedPtrField<::ibc::applications::transfer::v1::Allocation>&
TransferAuthorization::_internal_allocations() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allocations_;
}
inline ::google::protobuf::RepeatedPtrField<::ibc::applications::transfer::v1::Allocation>*
TransferAuthorization::_internal_mutable_allocations() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.allocations_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace transfer
}  // namespace applications
}  // namespace ibc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto_2epb_2eh
