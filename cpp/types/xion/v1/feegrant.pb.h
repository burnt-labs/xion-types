// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: xion/v1/feegrant.proto
// Protobuf C++ Version: 5.29.4

#ifndef xion_2fv1_2ffeegrant_2eproto_2epb_2eh
#define xion_2fv1_2ffeegrant_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/any.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
#include "amino/amino.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "google/protobuf/duration.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_xion_2fv1_2ffeegrant_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_xion_2fv1_2ffeegrant_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_xion_2fv1_2ffeegrant_2eproto;
namespace xion {
namespace v1 {
class AuthzAllowance;
struct AuthzAllowanceDefaultTypeInternal;
extern AuthzAllowanceDefaultTypeInternal _AuthzAllowance_default_instance_;
class ContractsAllowance;
struct ContractsAllowanceDefaultTypeInternal;
extern ContractsAllowanceDefaultTypeInternal _ContractsAllowance_default_instance_;
class MultiAnyAllowance;
struct MultiAnyAllowanceDefaultTypeInternal;
extern MultiAnyAllowanceDefaultTypeInternal _MultiAnyAllowance_default_instance_;
}  // namespace v1
}  // namespace xion
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace xion {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class MultiAnyAllowance final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:xion.v1.MultiAnyAllowance) */ {
 public:
  inline MultiAnyAllowance() : MultiAnyAllowance(nullptr) {}
  ~MultiAnyAllowance() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MultiAnyAllowance* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MultiAnyAllowance));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MultiAnyAllowance(
      ::google::protobuf::internal::ConstantInitialized);

  inline MultiAnyAllowance(const MultiAnyAllowance& from) : MultiAnyAllowance(nullptr, from) {}
  inline MultiAnyAllowance(MultiAnyAllowance&& from) noexcept
      : MultiAnyAllowance(nullptr, std::move(from)) {}
  inline MultiAnyAllowance& operator=(const MultiAnyAllowance& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiAnyAllowance& operator=(MultiAnyAllowance&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiAnyAllowance& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiAnyAllowance* internal_default_instance() {
    return reinterpret_cast<const MultiAnyAllowance*>(
        &_MultiAnyAllowance_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(MultiAnyAllowance& a, MultiAnyAllowance& b) { a.Swap(&b); }
  inline void Swap(MultiAnyAllowance* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiAnyAllowance* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiAnyAllowance* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MultiAnyAllowance>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MultiAnyAllowance& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MultiAnyAllowance& from) { MultiAnyAllowance::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MultiAnyAllowance* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "xion.v1.MultiAnyAllowance"; }

 protected:
  explicit MultiAnyAllowance(::google::protobuf::Arena* arena);
  MultiAnyAllowance(::google::protobuf::Arena* arena, const MultiAnyAllowance& from);
  MultiAnyAllowance(::google::protobuf::Arena* arena, MultiAnyAllowance&& from) noexcept
      : MultiAnyAllowance(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAllowancesFieldNumber = 1,
  };
  // repeated .google.protobuf.Any allowances = 1 [json_name = "allowances", (.cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
  int allowances_size() const;
  private:
  int _internal_allowances_size() const;

  public:
  void clear_allowances() ;
  ::google::protobuf::Any* mutable_allowances(int index);
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* mutable_allowances();

  private:
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& _internal_allowances() const;
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* _internal_mutable_allowances();
  public:
  const ::google::protobuf::Any& allowances(int index) const;
  ::google::protobuf::Any* add_allowances();
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& allowances() const;
  // @@protoc_insertion_point(class_scope:xion.v1.MultiAnyAllowance)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MultiAnyAllowance& from_msg);
    ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > allowances_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xion_2fv1_2ffeegrant_2eproto;
};
// -------------------------------------------------------------------

class ContractsAllowance final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:xion.v1.ContractsAllowance) */ {
 public:
  inline ContractsAllowance() : ContractsAllowance(nullptr) {}
  ~ContractsAllowance() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ContractsAllowance* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ContractsAllowance));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ContractsAllowance(
      ::google::protobuf::internal::ConstantInitialized);

  inline ContractsAllowance(const ContractsAllowance& from) : ContractsAllowance(nullptr, from) {}
  inline ContractsAllowance(ContractsAllowance&& from) noexcept
      : ContractsAllowance(nullptr, std::move(from)) {}
  inline ContractsAllowance& operator=(const ContractsAllowance& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractsAllowance& operator=(ContractsAllowance&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContractsAllowance& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContractsAllowance* internal_default_instance() {
    return reinterpret_cast<const ContractsAllowance*>(
        &_ContractsAllowance_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ContractsAllowance& a, ContractsAllowance& b) { a.Swap(&b); }
  inline void Swap(ContractsAllowance* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContractsAllowance* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContractsAllowance* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ContractsAllowance>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ContractsAllowance& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ContractsAllowance& from) { ContractsAllowance::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ContractsAllowance* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "xion.v1.ContractsAllowance"; }

 protected:
  explicit ContractsAllowance(::google::protobuf::Arena* arena);
  ContractsAllowance(::google::protobuf::Arena* arena, const ContractsAllowance& from);
  ContractsAllowance(::google::protobuf::Arena* arena, ContractsAllowance&& from) noexcept
      : ContractsAllowance(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kContractAddressesFieldNumber = 2,
    kAllowanceFieldNumber = 1,
  };
  // repeated string contract_addresses = 2 [json_name = "contractAddresses", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  int contract_addresses_size() const;
  private:
  int _internal_contract_addresses_size() const;

  public:
  void clear_contract_addresses() ;
  const std::string& contract_addresses(int index) const;
  std::string* mutable_contract_addresses(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contract_addresses(int index, Arg_&& value, Args_... args);
  std::string* add_contract_addresses();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_contract_addresses(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& contract_addresses() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_contract_addresses();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_contract_addresses() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_contract_addresses();

  public:
  // .google.protobuf.Any allowance = 1 [json_name = "allowance", (.cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
  bool has_allowance() const;
  void clear_allowance() ;
  const ::google::protobuf::Any& allowance() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_allowance();
  ::google::protobuf::Any* mutable_allowance();
  void set_allocated_allowance(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_allowance(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_allowance();

  private:
  const ::google::protobuf::Any& _internal_allowance() const;
  ::google::protobuf::Any* _internal_mutable_allowance();

  public:
  // @@protoc_insertion_point(class_scope:xion.v1.ContractsAllowance)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      53, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ContractsAllowance& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> contract_addresses_;
    ::google::protobuf::Any* allowance_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xion_2fv1_2ffeegrant_2eproto;
};
// -------------------------------------------------------------------

class AuthzAllowance final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:xion.v1.AuthzAllowance) */ {
 public:
  inline AuthzAllowance() : AuthzAllowance(nullptr) {}
  ~AuthzAllowance() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AuthzAllowance* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AuthzAllowance));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuthzAllowance(
      ::google::protobuf::internal::ConstantInitialized);

  inline AuthzAllowance(const AuthzAllowance& from) : AuthzAllowance(nullptr, from) {}
  inline AuthzAllowance(AuthzAllowance&& from) noexcept
      : AuthzAllowance(nullptr, std::move(from)) {}
  inline AuthzAllowance& operator=(const AuthzAllowance& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthzAllowance& operator=(AuthzAllowance&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthzAllowance& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthzAllowance* internal_default_instance() {
    return reinterpret_cast<const AuthzAllowance*>(
        &_AuthzAllowance_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(AuthzAllowance& a, AuthzAllowance& b) { a.Swap(&b); }
  inline void Swap(AuthzAllowance* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthzAllowance* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthzAllowance* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AuthzAllowance>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AuthzAllowance& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AuthzAllowance& from) { AuthzAllowance::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AuthzAllowance* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "xion.v1.AuthzAllowance"; }

 protected:
  explicit AuthzAllowance(::google::protobuf::Arena* arena);
  AuthzAllowance(::google::protobuf::Arena* arena, const AuthzAllowance& from);
  AuthzAllowance(::google::protobuf::Arena* arena, AuthzAllowance&& from) noexcept
      : AuthzAllowance(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAuthzGranteeFieldNumber = 2,
    kAllowanceFieldNumber = 1,
  };
  // string authz_grantee = 2 [json_name = "authzGrantee", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_authz_grantee() ;
  const std::string& authz_grantee() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_authz_grantee(Arg_&& arg, Args_... args);
  std::string* mutable_authz_grantee();
  PROTOBUF_NODISCARD std::string* release_authz_grantee();
  void set_allocated_authz_grantee(std::string* value);

  private:
  const std::string& _internal_authz_grantee() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authz_grantee(
      const std::string& value);
  std::string* _internal_mutable_authz_grantee();

  public:
  // .google.protobuf.Any allowance = 1 [json_name = "allowance", (.cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
  bool has_allowance() const;
  void clear_allowance() ;
  const ::google::protobuf::Any& allowance() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_allowance();
  ::google::protobuf::Any* mutable_allowance();
  void set_allocated_allowance(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_allowance(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_allowance();

  private:
  const ::google::protobuf::Any& _internal_allowance() const;
  ::google::protobuf::Any* _internal_mutable_allowance();

  public:
  // @@protoc_insertion_point(class_scope:xion.v1.AuthzAllowance)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      44, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AuthzAllowance& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr authz_grantee_;
    ::google::protobuf::Any* allowance_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xion_2fv1_2ffeegrant_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AuthzAllowance

// .google.protobuf.Any allowance = 1 [json_name = "allowance", (.cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
inline bool AuthzAllowance::has_allowance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.allowance_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& AuthzAllowance::_internal_allowance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Any* p = _impl_.allowance_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& AuthzAllowance::allowance() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xion.v1.AuthzAllowance.allowance)
  return _internal_allowance();
}
inline void AuthzAllowance::unsafe_arena_set_allocated_allowance(::google::protobuf::Any* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.allowance_);
  }
  _impl_.allowance_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xion.v1.AuthzAllowance.allowance)
}
inline ::google::protobuf::Any* AuthzAllowance::release_allowance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* released = _impl_.allowance_;
  _impl_.allowance_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Any* AuthzAllowance::unsafe_arena_release_allowance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xion.v1.AuthzAllowance.allowance)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* temp = _impl_.allowance_;
  _impl_.allowance_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* AuthzAllowance::_internal_mutable_allowance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.allowance_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Any>(GetArena());
    _impl_.allowance_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.allowance_;
}
inline ::google::protobuf::Any* AuthzAllowance::mutable_allowance() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Any* _msg = _internal_mutable_allowance();
  // @@protoc_insertion_point(field_mutable:xion.v1.AuthzAllowance.allowance)
  return _msg;
}
inline void AuthzAllowance::set_allocated_allowance(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.allowance_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.allowance_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:xion.v1.AuthzAllowance.allowance)
}

// string authz_grantee = 2 [json_name = "authzGrantee", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void AuthzAllowance::clear_authz_grantee() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.authz_grantee_.ClearToEmpty();
}
inline const std::string& AuthzAllowance::authz_grantee() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xion.v1.AuthzAllowance.authz_grantee)
  return _internal_authz_grantee();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthzAllowance::set_authz_grantee(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.authz_grantee_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xion.v1.AuthzAllowance.authz_grantee)
}
inline std::string* AuthzAllowance::mutable_authz_grantee() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_authz_grantee();
  // @@protoc_insertion_point(field_mutable:xion.v1.AuthzAllowance.authz_grantee)
  return _s;
}
inline const std::string& AuthzAllowance::_internal_authz_grantee() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.authz_grantee_.Get();
}
inline void AuthzAllowance::_internal_set_authz_grantee(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.authz_grantee_.Set(value, GetArena());
}
inline std::string* AuthzAllowance::_internal_mutable_authz_grantee() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.authz_grantee_.Mutable( GetArena());
}
inline std::string* AuthzAllowance::release_authz_grantee() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xion.v1.AuthzAllowance.authz_grantee)
  return _impl_.authz_grantee_.Release();
}
inline void AuthzAllowance::set_allocated_authz_grantee(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.authz_grantee_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.authz_grantee_.IsDefault()) {
    _impl_.authz_grantee_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:xion.v1.AuthzAllowance.authz_grantee)
}

// -------------------------------------------------------------------

// ContractsAllowance

// .google.protobuf.Any allowance = 1 [json_name = "allowance", (.cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
inline bool ContractsAllowance::has_allowance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.allowance_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& ContractsAllowance::_internal_allowance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Any* p = _impl_.allowance_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& ContractsAllowance::allowance() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xion.v1.ContractsAllowance.allowance)
  return _internal_allowance();
}
inline void ContractsAllowance::unsafe_arena_set_allocated_allowance(::google::protobuf::Any* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.allowance_);
  }
  _impl_.allowance_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xion.v1.ContractsAllowance.allowance)
}
inline ::google::protobuf::Any* ContractsAllowance::release_allowance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* released = _impl_.allowance_;
  _impl_.allowance_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Any* ContractsAllowance::unsafe_arena_release_allowance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xion.v1.ContractsAllowance.allowance)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* temp = _impl_.allowance_;
  _impl_.allowance_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* ContractsAllowance::_internal_mutable_allowance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.allowance_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Any>(GetArena());
    _impl_.allowance_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.allowance_;
}
inline ::google::protobuf::Any* ContractsAllowance::mutable_allowance() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Any* _msg = _internal_mutable_allowance();
  // @@protoc_insertion_point(field_mutable:xion.v1.ContractsAllowance.allowance)
  return _msg;
}
inline void ContractsAllowance::set_allocated_allowance(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.allowance_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.allowance_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:xion.v1.ContractsAllowance.allowance)
}

// repeated string contract_addresses = 2 [json_name = "contractAddresses", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline int ContractsAllowance::_internal_contract_addresses_size() const {
  return _internal_contract_addresses().size();
}
inline int ContractsAllowance::contract_addresses_size() const {
  return _internal_contract_addresses_size();
}
inline void ContractsAllowance::clear_contract_addresses() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contract_addresses_.Clear();
}
inline std::string* ContractsAllowance::add_contract_addresses() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_contract_addresses()->Add();
  // @@protoc_insertion_point(field_add_mutable:xion.v1.ContractsAllowance.contract_addresses)
  return _s;
}
inline const std::string& ContractsAllowance::contract_addresses(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xion.v1.ContractsAllowance.contract_addresses)
  return _internal_contract_addresses().Get(index);
}
inline std::string* ContractsAllowance::mutable_contract_addresses(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xion.v1.ContractsAllowance.contract_addresses)
  return _internal_mutable_contract_addresses()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ContractsAllowance::set_contract_addresses(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_contract_addresses()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:xion.v1.ContractsAllowance.contract_addresses)
}
template <typename Arg_, typename... Args_>
inline void ContractsAllowance::add_contract_addresses(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_contract_addresses(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:xion.v1.ContractsAllowance.contract_addresses)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ContractsAllowance::contract_addresses() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xion.v1.ContractsAllowance.contract_addresses)
  return _internal_contract_addresses();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ContractsAllowance::mutable_contract_addresses() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xion.v1.ContractsAllowance.contract_addresses)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_contract_addresses();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ContractsAllowance::_internal_contract_addresses() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.contract_addresses_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ContractsAllowance::_internal_mutable_contract_addresses() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.contract_addresses_;
}

// -------------------------------------------------------------------

// MultiAnyAllowance

// repeated .google.protobuf.Any allowances = 1 [json_name = "allowances", (.cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
inline int MultiAnyAllowance::_internal_allowances_size() const {
  return _internal_allowances().size();
}
inline int MultiAnyAllowance::allowances_size() const {
  return _internal_allowances_size();
}
inline ::google::protobuf::Any* MultiAnyAllowance::mutable_allowances(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:xion.v1.MultiAnyAllowance.allowances)
  return _internal_mutable_allowances()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* MultiAnyAllowance::mutable_allowances()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:xion.v1.MultiAnyAllowance.allowances)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_allowances();
}
inline const ::google::protobuf::Any& MultiAnyAllowance::allowances(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xion.v1.MultiAnyAllowance.allowances)
  return _internal_allowances().Get(index);
}
inline ::google::protobuf::Any* MultiAnyAllowance::add_allowances() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::Any* _add = _internal_mutable_allowances()->Add();
  // @@protoc_insertion_point(field_add:xion.v1.MultiAnyAllowance.allowances)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& MultiAnyAllowance::allowances() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:xion.v1.MultiAnyAllowance.allowances)
  return _internal_allowances();
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>&
MultiAnyAllowance::_internal_allowances() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allowances_;
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>*
MultiAnyAllowance::_internal_mutable_allowances() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.allowances_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace xion


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // xion_2fv1_2ffeegrant_2eproto_2epb_2eh
