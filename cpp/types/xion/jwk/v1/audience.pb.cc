// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: xion/jwk/v1/audience.proto
// Protobuf C++ Version: 5.29.4

#include "xion/jwk/v1/audience.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xion {
namespace jwk {
namespace v1 {

inline constexpr AudienceClaim::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : signer_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AudienceClaim::AudienceClaim(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AudienceClaimDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudienceClaimDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudienceClaimDefaultTypeInternal() {}
  union {
    AudienceClaim _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudienceClaimDefaultTypeInternal _AudienceClaim_default_instance_;

inline constexpr Audience::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : aud_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        admin_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Audience::Audience(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AudienceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudienceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudienceDefaultTypeInternal() {}
  union {
    Audience _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudienceDefaultTypeInternal _Audience_default_instance_;
}  // namespace v1
}  // namespace jwk
}  // namespace xion
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_xion_2fjwk_2fv1_2faudience_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_xion_2fjwk_2fv1_2faudience_2eproto = nullptr;
const ::uint32_t
    TableStruct_xion_2fjwk_2fv1_2faudience_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::xion::jwk::v1::Audience, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xion::jwk::v1::Audience, _impl_.aud_),
        PROTOBUF_FIELD_OFFSET(::xion::jwk::v1::Audience, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::xion::jwk::v1::Audience, _impl_.admin_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::xion::jwk::v1::AudienceClaim, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xion::jwk::v1::AudienceClaim, _impl_.signer_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::xion::jwk::v1::Audience)},
        {11, -1, -1, sizeof(::xion::jwk::v1::AudienceClaim)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::xion::jwk::v1::_Audience_default_instance_._instance,
    &::xion::jwk::v1::_AudienceClaim_default_instance_._instance,
};
const char descriptor_table_protodef_xion_2fjwk_2fv1_2faudience_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\032xion/jwk/v1/audience.proto\022\013xion.jwk.v"
    "1\"D\n\010Audience\022\020\n\003aud\030\001 \001(\tR\003aud\022\020\n\003key\030\002"
    " \001(\tR\003key\022\024\n\005admin\030\003 \001(\tR\005admin\"\'\n\rAudie"
    "nceClaim\022\026\n\006signer\030\001 \001(\tR\006signerB(Z&gith"
    "ub.com/burnt-labs/xion/x/jwk/typesb\006prot"
    "o3"
};
static ::absl::once_flag descriptor_table_xion_2fjwk_2fv1_2faudience_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_xion_2fjwk_2fv1_2faudience_2eproto = {
    false,
    false,
    202,
    descriptor_table_protodef_xion_2fjwk_2fv1_2faudience_2eproto,
    "xion/jwk/v1/audience.proto",
    &descriptor_table_xion_2fjwk_2fv1_2faudience_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_xion_2fjwk_2fv1_2faudience_2eproto::offsets,
    file_level_enum_descriptors_xion_2fjwk_2fv1_2faudience_2eproto,
    file_level_service_descriptors_xion_2fjwk_2fv1_2faudience_2eproto,
};
namespace xion {
namespace jwk {
namespace v1 {
// ===================================================================

class Audience::_Internal {
 public:
};

Audience::Audience(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xion.jwk.v1.Audience)
}
inline PROTOBUF_NDEBUG_INLINE Audience::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::xion::jwk::v1::Audience& from_msg)
      : aud_(arena, from.aud_),
        key_(arena, from.key_),
        admin_(arena, from.admin_),
        _cached_size_{0} {}

Audience::Audience(
    ::google::protobuf::Arena* arena,
    const Audience& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Audience* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:xion.jwk.v1.Audience)
}
inline PROTOBUF_NDEBUG_INLINE Audience::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : aud_(arena),
        key_(arena),
        admin_(arena),
        _cached_size_{0} {}

inline void Audience::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Audience::~Audience() {
  // @@protoc_insertion_point(destructor:xion.jwk.v1.Audience)
  SharedDtor(*this);
}
inline void Audience::SharedDtor(MessageLite& self) {
  Audience& this_ = static_cast<Audience&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.aud_.Destroy();
  this_._impl_.key_.Destroy();
  this_._impl_.admin_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Audience::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Audience(arena);
}
constexpr auto Audience::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Audience),
                                            alignof(Audience));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Audience::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Audience_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Audience::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Audience>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Audience::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Audience>(), &Audience::ByteSizeLong,
            &Audience::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Audience, _impl_._cached_size_),
        false,
    },
    &Audience::kDescriptorMethods,
    &descriptor_table_xion_2fjwk_2fv1_2faudience_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Audience::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 40, 2> Audience::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xion::jwk::v1::Audience>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string aud = 1 [json_name = "aud"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Audience, _impl_.aud_)}},
    // string key = 2 [json_name = "key"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Audience, _impl_.key_)}},
    // string admin = 3 [json_name = "admin"];
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Audience, _impl_.admin_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string aud = 1 [json_name = "aud"];
    {PROTOBUF_FIELD_OFFSET(Audience, _impl_.aud_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string key = 2 [json_name = "key"];
    {PROTOBUF_FIELD_OFFSET(Audience, _impl_.key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string admin = 3 [json_name = "admin"];
    {PROTOBUF_FIELD_OFFSET(Audience, _impl_.admin_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\24\3\3\5\0\0\0\0"
    "xion.jwk.v1.Audience"
    "aud"
    "key"
    "admin"
  }},
};

PROTOBUF_NOINLINE void Audience::Clear() {
// @@protoc_insertion_point(message_clear_start:xion.jwk.v1.Audience)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.aud_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _impl_.admin_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Audience::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Audience& this_ = static_cast<const Audience&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Audience::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Audience& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xion.jwk.v1.Audience)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string aud = 1 [json_name = "aud"];
          if (!this_._internal_aud().empty()) {
            const std::string& _s = this_._internal_aud();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xion.jwk.v1.Audience.aud");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string key = 2 [json_name = "key"];
          if (!this_._internal_key().empty()) {
            const std::string& _s = this_._internal_key();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xion.jwk.v1.Audience.key");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string admin = 3 [json_name = "admin"];
          if (!this_._internal_admin().empty()) {
            const std::string& _s = this_._internal_admin();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xion.jwk.v1.Audience.admin");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xion.jwk.v1.Audience)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Audience::ByteSizeLong(const MessageLite& base) {
          const Audience& this_ = static_cast<const Audience&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Audience::ByteSizeLong() const {
          const Audience& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xion.jwk.v1.Audience)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string aud = 1 [json_name = "aud"];
            if (!this_._internal_aud().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_aud());
            }
            // string key = 2 [json_name = "key"];
            if (!this_._internal_key().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_key());
            }
            // string admin = 3 [json_name = "admin"];
            if (!this_._internal_admin().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_admin());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Audience::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Audience*>(&to_msg);
  auto& from = static_cast<const Audience&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xion.jwk.v1.Audience)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_aud().empty()) {
    _this->_internal_set_aud(from._internal_aud());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_admin().empty()) {
    _this->_internal_set_admin(from._internal_admin());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Audience::CopyFrom(const Audience& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xion.jwk.v1.Audience)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Audience::InternalSwap(Audience* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.aud_, &other->_impl_.aud_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, &other->_impl_.key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.admin_, &other->_impl_.admin_, arena);
}

::google::protobuf::Metadata Audience::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AudienceClaim::_Internal {
 public:
};

AudienceClaim::AudienceClaim(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xion.jwk.v1.AudienceClaim)
}
inline PROTOBUF_NDEBUG_INLINE AudienceClaim::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::xion::jwk::v1::AudienceClaim& from_msg)
      : signer_(arena, from.signer_),
        _cached_size_{0} {}

AudienceClaim::AudienceClaim(
    ::google::protobuf::Arena* arena,
    const AudienceClaim& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AudienceClaim* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:xion.jwk.v1.AudienceClaim)
}
inline PROTOBUF_NDEBUG_INLINE AudienceClaim::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : signer_(arena),
        _cached_size_{0} {}

inline void AudienceClaim::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AudienceClaim::~AudienceClaim() {
  // @@protoc_insertion_point(destructor:xion.jwk.v1.AudienceClaim)
  SharedDtor(*this);
}
inline void AudienceClaim::SharedDtor(MessageLite& self) {
  AudienceClaim& this_ = static_cast<AudienceClaim&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.signer_.Destroy();
  this_._impl_.~Impl_();
}

inline void* AudienceClaim::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AudienceClaim(arena);
}
constexpr auto AudienceClaim::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AudienceClaim),
                                            alignof(AudienceClaim));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AudienceClaim::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AudienceClaim_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AudienceClaim::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AudienceClaim>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AudienceClaim::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AudienceClaim>(), &AudienceClaim::ByteSizeLong,
            &AudienceClaim::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AudienceClaim, _impl_._cached_size_),
        false,
    },
    &AudienceClaim::kDescriptorMethods,
    &descriptor_table_xion_2fjwk_2fv1_2faudience_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AudienceClaim::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 40, 2> AudienceClaim::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xion::jwk::v1::AudienceClaim>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string signer = 1 [json_name = "signer"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AudienceClaim, _impl_.signer_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string signer = 1 [json_name = "signer"];
    {PROTOBUF_FIELD_OFFSET(AudienceClaim, _impl_.signer_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\31\6\0\0\0\0\0\0"
    "xion.jwk.v1.AudienceClaim"
    "signer"
  }},
};

PROTOBUF_NOINLINE void AudienceClaim::Clear() {
// @@protoc_insertion_point(message_clear_start:xion.jwk.v1.AudienceClaim)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signer_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AudienceClaim::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AudienceClaim& this_ = static_cast<const AudienceClaim&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AudienceClaim::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AudienceClaim& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xion.jwk.v1.AudienceClaim)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string signer = 1 [json_name = "signer"];
          if (!this_._internal_signer().empty()) {
            const std::string& _s = this_._internal_signer();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xion.jwk.v1.AudienceClaim.signer");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xion.jwk.v1.AudienceClaim)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AudienceClaim::ByteSizeLong(const MessageLite& base) {
          const AudienceClaim& this_ = static_cast<const AudienceClaim&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AudienceClaim::ByteSizeLong() const {
          const AudienceClaim& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xion.jwk.v1.AudienceClaim)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string signer = 1 [json_name = "signer"];
            if (!this_._internal_signer().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_signer());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AudienceClaim::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AudienceClaim*>(&to_msg);
  auto& from = static_cast<const AudienceClaim&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xion.jwk.v1.AudienceClaim)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signer().empty()) {
    _this->_internal_set_signer(from._internal_signer());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AudienceClaim::CopyFrom(const AudienceClaim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xion.jwk.v1.AudienceClaim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AudienceClaim::InternalSwap(AudienceClaim* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signer_, &other->_impl_.signer_, arena);
}

::google::protobuf::Metadata AudienceClaim::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace jwk
}  // namespace xion
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_xion_2fjwk_2fv1_2faudience_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
