// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: xion/mint/v1/event.proto
// Protobuf C++ Version: 5.29.4

#include "xion/mint/v1/event.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xion {
namespace mint {
namespace v1 {

inline constexpr MintIncentiveTokens::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : bonded_ratio_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        inflation_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        annual_provisions_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        needed_amount_{::uint64_t{0u}},
        collected_amount_{::uint64_t{0u}},
        minted_amount_{::uint64_t{0u}},
        burned_amount_{::uint64_t{0u}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MintIncentiveTokens::MintIncentiveTokens(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MintIncentiveTokensDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MintIncentiveTokensDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MintIncentiveTokensDefaultTypeInternal() {}
  union {
    MintIncentiveTokens _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MintIncentiveTokensDefaultTypeInternal _MintIncentiveTokens_default_instance_;
}  // namespace v1
}  // namespace mint
}  // namespace xion
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_xion_2fmint_2fv1_2fevent_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_xion_2fmint_2fv1_2fevent_2eproto = nullptr;
const ::uint32_t
    TableStruct_xion_2fmint_2fv1_2fevent_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::xion::mint::v1::MintIncentiveTokens, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xion::mint::v1::MintIncentiveTokens, _impl_.bonded_ratio_),
        PROTOBUF_FIELD_OFFSET(::xion::mint::v1::MintIncentiveTokens, _impl_.inflation_),
        PROTOBUF_FIELD_OFFSET(::xion::mint::v1::MintIncentiveTokens, _impl_.annual_provisions_),
        PROTOBUF_FIELD_OFFSET(::xion::mint::v1::MintIncentiveTokens, _impl_.needed_amount_),
        PROTOBUF_FIELD_OFFSET(::xion::mint::v1::MintIncentiveTokens, _impl_.collected_amount_),
        PROTOBUF_FIELD_OFFSET(::xion::mint::v1::MintIncentiveTokens, _impl_.minted_amount_),
        PROTOBUF_FIELD_OFFSET(::xion::mint::v1::MintIncentiveTokens, _impl_.burned_amount_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::xion::mint::v1::MintIncentiveTokens)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::xion::mint::v1::_MintIncentiveTokens_default_instance_._instance,
};
const char descriptor_table_protodef_xion_2fmint_2fv1_2fevent_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\030xion/mint/v1/event.proto\022\014xion.mint.v1"
    "\032\024gogoproto/gogo.proto\032\031cosmos_proto/cos"
    "mos.proto\"\375\003\n\023MintIncentiveTokens\022k\n\014bon"
    "ded_ratio\030\001 \001(\tBH\310\336\037\000\332\336\037\033cosmossdk.io/ma"
    "th.LegacyDec\362\336\037\023yaml:\"bonded_ratio\"\322\264-\nc"
    "osmos.DecR\013bondedRatio\022c\n\tinflation\030\002 \001("
    "\tBE\310\336\037\000\332\336\037\033cosmossdk.io/math.LegacyDec\362\336"
    "\037\020yaml:\"inflation\"\322\264-\ncosmos.DecR\tinflat"
    "ion\022z\n\021annual_provisions\030\003 \001(\tBM\310\336\037\000\332\336\037\033"
    "cosmossdk.io/math.LegacyDec\362\336\037\030yaml:\"ann"
    "ual_provisions\"\322\264-\ncosmos.DecR\020annualPro"
    "visions\022#\n\rneeded_amount\030\004 \001(\004R\014neededAm"
    "ount\022)\n\020collected_amount\030\005 \001(\004R\017collecte"
    "dAmount\022#\n\rminted_amount\030\006 \001(\004R\014mintedAm"
    "ount\022#\n\rburned_amount\030\007 \001(\004R\014burnedAmoun"
    "tB)Z\'github.com/burnt-labs/xion/x/mint/t"
    "ypesb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_xion_2fmint_2fv1_2fevent_2eproto_deps[2] =
    {
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_xion_2fmint_2fv1_2fevent_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_xion_2fmint_2fv1_2fevent_2eproto = {
    false,
    false,
    652,
    descriptor_table_protodef_xion_2fmint_2fv1_2fevent_2eproto,
    "xion/mint/v1/event.proto",
    &descriptor_table_xion_2fmint_2fv1_2fevent_2eproto_once,
    descriptor_table_xion_2fmint_2fv1_2fevent_2eproto_deps,
    2,
    1,
    schemas,
    file_default_instances,
    TableStruct_xion_2fmint_2fv1_2fevent_2eproto::offsets,
    file_level_enum_descriptors_xion_2fmint_2fv1_2fevent_2eproto,
    file_level_service_descriptors_xion_2fmint_2fv1_2fevent_2eproto,
};
namespace xion {
namespace mint {
namespace v1 {
// ===================================================================

class MintIncentiveTokens::_Internal {
 public:
};

MintIncentiveTokens::MintIncentiveTokens(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xion.mint.v1.MintIncentiveTokens)
}
inline PROTOBUF_NDEBUG_INLINE MintIncentiveTokens::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::xion::mint::v1::MintIncentiveTokens& from_msg)
      : bonded_ratio_(arena, from.bonded_ratio_),
        inflation_(arena, from.inflation_),
        annual_provisions_(arena, from.annual_provisions_),
        _cached_size_{0} {}

MintIncentiveTokens::MintIncentiveTokens(
    ::google::protobuf::Arena* arena,
    const MintIncentiveTokens& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MintIncentiveTokens* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, needed_amount_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, needed_amount_),
           offsetof(Impl_, burned_amount_) -
               offsetof(Impl_, needed_amount_) +
               sizeof(Impl_::burned_amount_));

  // @@protoc_insertion_point(copy_constructor:xion.mint.v1.MintIncentiveTokens)
}
inline PROTOBUF_NDEBUG_INLINE MintIncentiveTokens::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : bonded_ratio_(arena),
        inflation_(arena),
        annual_provisions_(arena),
        _cached_size_{0} {}

inline void MintIncentiveTokens::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, needed_amount_),
           0,
           offsetof(Impl_, burned_amount_) -
               offsetof(Impl_, needed_amount_) +
               sizeof(Impl_::burned_amount_));
}
MintIncentiveTokens::~MintIncentiveTokens() {
  // @@protoc_insertion_point(destructor:xion.mint.v1.MintIncentiveTokens)
  SharedDtor(*this);
}
inline void MintIncentiveTokens::SharedDtor(MessageLite& self) {
  MintIncentiveTokens& this_ = static_cast<MintIncentiveTokens&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.bonded_ratio_.Destroy();
  this_._impl_.inflation_.Destroy();
  this_._impl_.annual_provisions_.Destroy();
  this_._impl_.~Impl_();
}

inline void* MintIncentiveTokens::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MintIncentiveTokens(arena);
}
constexpr auto MintIncentiveTokens::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MintIncentiveTokens),
                                            alignof(MintIncentiveTokens));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MintIncentiveTokens::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MintIncentiveTokens_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MintIncentiveTokens::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MintIncentiveTokens>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MintIncentiveTokens::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MintIncentiveTokens>(), &MintIncentiveTokens::ByteSizeLong,
            &MintIncentiveTokens::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MintIncentiveTokens, _impl_._cached_size_),
        false,
    },
    &MintIncentiveTokens::kDescriptorMethods,
    &descriptor_table_xion_2fmint_2fv1_2fevent_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MintIncentiveTokens::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 79, 2> MintIncentiveTokens::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xion::mint::v1::MintIncentiveTokens>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string bonded_ratio = 1 [json_name = "bondedRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.moretags) = "yaml:\"bonded_ratio\"", (.cosmos_proto.scalar) = "cosmos.Dec"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MintIncentiveTokens, _impl_.bonded_ratio_)}},
    // string inflation = 2 [json_name = "inflation", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.moretags) = "yaml:\"inflation\"", (.cosmos_proto.scalar) = "cosmos.Dec"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MintIncentiveTokens, _impl_.inflation_)}},
    // string annual_provisions = 3 [json_name = "annualProvisions", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.moretags) = "yaml:\"annual_provisions\"", (.cosmos_proto.scalar) = "cosmos.Dec"];
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(MintIncentiveTokens, _impl_.annual_provisions_)}},
    // uint64 needed_amount = 4 [json_name = "neededAmount"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MintIncentiveTokens, _impl_.needed_amount_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(MintIncentiveTokens, _impl_.needed_amount_)}},
    // uint64 collected_amount = 5 [json_name = "collectedAmount"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MintIncentiveTokens, _impl_.collected_amount_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(MintIncentiveTokens, _impl_.collected_amount_)}},
    // uint64 minted_amount = 6 [json_name = "mintedAmount"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MintIncentiveTokens, _impl_.minted_amount_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(MintIncentiveTokens, _impl_.minted_amount_)}},
    // uint64 burned_amount = 7 [json_name = "burnedAmount"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MintIncentiveTokens, _impl_.burned_amount_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(MintIncentiveTokens, _impl_.burned_amount_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string bonded_ratio = 1 [json_name = "bondedRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.moretags) = "yaml:\"bonded_ratio\"", (.cosmos_proto.scalar) = "cosmos.Dec"];
    {PROTOBUF_FIELD_OFFSET(MintIncentiveTokens, _impl_.bonded_ratio_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string inflation = 2 [json_name = "inflation", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.moretags) = "yaml:\"inflation\"", (.cosmos_proto.scalar) = "cosmos.Dec"];
    {PROTOBUF_FIELD_OFFSET(MintIncentiveTokens, _impl_.inflation_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string annual_provisions = 3 [json_name = "annualProvisions", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.moretags) = "yaml:\"annual_provisions\"", (.cosmos_proto.scalar) = "cosmos.Dec"];
    {PROTOBUF_FIELD_OFFSET(MintIncentiveTokens, _impl_.annual_provisions_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint64 needed_amount = 4 [json_name = "neededAmount"];
    {PROTOBUF_FIELD_OFFSET(MintIncentiveTokens, _impl_.needed_amount_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 collected_amount = 5 [json_name = "collectedAmount"];
    {PROTOBUF_FIELD_OFFSET(MintIncentiveTokens, _impl_.collected_amount_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 minted_amount = 6 [json_name = "mintedAmount"];
    {PROTOBUF_FIELD_OFFSET(MintIncentiveTokens, _impl_.minted_amount_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 burned_amount = 7 [json_name = "burnedAmount"];
    {PROTOBUF_FIELD_OFFSET(MintIncentiveTokens, _impl_.burned_amount_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
    "\40\14\11\21\0\0\0\0"
    "xion.mint.v1.MintIncentiveTokens"
    "bonded_ratio"
    "inflation"
    "annual_provisions"
  }},
};

PROTOBUF_NOINLINE void MintIncentiveTokens::Clear() {
// @@protoc_insertion_point(message_clear_start:xion.mint.v1.MintIncentiveTokens)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bonded_ratio_.ClearToEmpty();
  _impl_.inflation_.ClearToEmpty();
  _impl_.annual_provisions_.ClearToEmpty();
  ::memset(&_impl_.needed_amount_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.burned_amount_) -
      reinterpret_cast<char*>(&_impl_.needed_amount_)) + sizeof(_impl_.burned_amount_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MintIncentiveTokens::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MintIncentiveTokens& this_ = static_cast<const MintIncentiveTokens&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MintIncentiveTokens::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MintIncentiveTokens& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xion.mint.v1.MintIncentiveTokens)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string bonded_ratio = 1 [json_name = "bondedRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.moretags) = "yaml:\"bonded_ratio\"", (.cosmos_proto.scalar) = "cosmos.Dec"];
          if (!this_._internal_bonded_ratio().empty()) {
            const std::string& _s = this_._internal_bonded_ratio();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xion.mint.v1.MintIncentiveTokens.bonded_ratio");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string inflation = 2 [json_name = "inflation", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.moretags) = "yaml:\"inflation\"", (.cosmos_proto.scalar) = "cosmos.Dec"];
          if (!this_._internal_inflation().empty()) {
            const std::string& _s = this_._internal_inflation();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xion.mint.v1.MintIncentiveTokens.inflation");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string annual_provisions = 3 [json_name = "annualProvisions", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.moretags) = "yaml:\"annual_provisions\"", (.cosmos_proto.scalar) = "cosmos.Dec"];
          if (!this_._internal_annual_provisions().empty()) {
            const std::string& _s = this_._internal_annual_provisions();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xion.mint.v1.MintIncentiveTokens.annual_provisions");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // uint64 needed_amount = 4 [json_name = "neededAmount"];
          if (this_._internal_needed_amount() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                4, this_._internal_needed_amount(), target);
          }

          // uint64 collected_amount = 5 [json_name = "collectedAmount"];
          if (this_._internal_collected_amount() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                5, this_._internal_collected_amount(), target);
          }

          // uint64 minted_amount = 6 [json_name = "mintedAmount"];
          if (this_._internal_minted_amount() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                6, this_._internal_minted_amount(), target);
          }

          // uint64 burned_amount = 7 [json_name = "burnedAmount"];
          if (this_._internal_burned_amount() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                7, this_._internal_burned_amount(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xion.mint.v1.MintIncentiveTokens)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MintIncentiveTokens::ByteSizeLong(const MessageLite& base) {
          const MintIncentiveTokens& this_ = static_cast<const MintIncentiveTokens&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MintIncentiveTokens::ByteSizeLong() const {
          const MintIncentiveTokens& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xion.mint.v1.MintIncentiveTokens)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string bonded_ratio = 1 [json_name = "bondedRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.moretags) = "yaml:\"bonded_ratio\"", (.cosmos_proto.scalar) = "cosmos.Dec"];
            if (!this_._internal_bonded_ratio().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_bonded_ratio());
            }
            // string inflation = 2 [json_name = "inflation", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.moretags) = "yaml:\"inflation\"", (.cosmos_proto.scalar) = "cosmos.Dec"];
            if (!this_._internal_inflation().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_inflation());
            }
            // string annual_provisions = 3 [json_name = "annualProvisions", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.moretags) = "yaml:\"annual_provisions\"", (.cosmos_proto.scalar) = "cosmos.Dec"];
            if (!this_._internal_annual_provisions().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_annual_provisions());
            }
            // uint64 needed_amount = 4 [json_name = "neededAmount"];
            if (this_._internal_needed_amount() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_needed_amount());
            }
            // uint64 collected_amount = 5 [json_name = "collectedAmount"];
            if (this_._internal_collected_amount() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_collected_amount());
            }
            // uint64 minted_amount = 6 [json_name = "mintedAmount"];
            if (this_._internal_minted_amount() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_minted_amount());
            }
            // uint64 burned_amount = 7 [json_name = "burnedAmount"];
            if (this_._internal_burned_amount() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_burned_amount());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MintIncentiveTokens::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MintIncentiveTokens*>(&to_msg);
  auto& from = static_cast<const MintIncentiveTokens&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xion.mint.v1.MintIncentiveTokens)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bonded_ratio().empty()) {
    _this->_internal_set_bonded_ratio(from._internal_bonded_ratio());
  }
  if (!from._internal_inflation().empty()) {
    _this->_internal_set_inflation(from._internal_inflation());
  }
  if (!from._internal_annual_provisions().empty()) {
    _this->_internal_set_annual_provisions(from._internal_annual_provisions());
  }
  if (from._internal_needed_amount() != 0) {
    _this->_impl_.needed_amount_ = from._impl_.needed_amount_;
  }
  if (from._internal_collected_amount() != 0) {
    _this->_impl_.collected_amount_ = from._impl_.collected_amount_;
  }
  if (from._internal_minted_amount() != 0) {
    _this->_impl_.minted_amount_ = from._impl_.minted_amount_;
  }
  if (from._internal_burned_amount() != 0) {
    _this->_impl_.burned_amount_ = from._impl_.burned_amount_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MintIncentiveTokens::CopyFrom(const MintIncentiveTokens& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xion.mint.v1.MintIncentiveTokens)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MintIncentiveTokens::InternalSwap(MintIncentiveTokens* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bonded_ratio_, &other->_impl_.bonded_ratio_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.inflation_, &other->_impl_.inflation_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.annual_provisions_, &other->_impl_.annual_provisions_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MintIncentiveTokens, _impl_.burned_amount_)
      + sizeof(MintIncentiveTokens::_impl_.burned_amount_)
      - PROTOBUF_FIELD_OFFSET(MintIncentiveTokens, _impl_.needed_amount_)>(
          reinterpret_cast<char*>(&_impl_.needed_amount_),
          reinterpret_cast<char*>(&other->_impl_.needed_amount_));
}

::google::protobuf::Metadata MintIncentiveTokens::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace mint
}  // namespace xion
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_xion_2fmint_2fv1_2fevent_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
