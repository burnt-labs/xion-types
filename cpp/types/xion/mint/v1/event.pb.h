// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: xion/mint/v1/event.proto
// Protobuf C++ Version: 5.29.4

#ifndef xion_2fmint_2fv1_2fevent_2eproto_2epb_2eh
#define xion_2fmint_2fv1_2fevent_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos_proto/cosmos.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_xion_2fmint_2fv1_2fevent_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_xion_2fmint_2fv1_2fevent_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_xion_2fmint_2fv1_2fevent_2eproto;
namespace xion {
namespace mint {
namespace v1 {
class MintIncentiveTokens;
struct MintIncentiveTokensDefaultTypeInternal;
extern MintIncentiveTokensDefaultTypeInternal _MintIncentiveTokens_default_instance_;
}  // namespace v1
}  // namespace mint
}  // namespace xion
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace xion {
namespace mint {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class MintIncentiveTokens final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:xion.mint.v1.MintIncentiveTokens) */ {
 public:
  inline MintIncentiveTokens() : MintIncentiveTokens(nullptr) {}
  ~MintIncentiveTokens() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MintIncentiveTokens* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MintIncentiveTokens));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MintIncentiveTokens(
      ::google::protobuf::internal::ConstantInitialized);

  inline MintIncentiveTokens(const MintIncentiveTokens& from) : MintIncentiveTokens(nullptr, from) {}
  inline MintIncentiveTokens(MintIncentiveTokens&& from) noexcept
      : MintIncentiveTokens(nullptr, std::move(from)) {}
  inline MintIncentiveTokens& operator=(const MintIncentiveTokens& from) {
    CopyFrom(from);
    return *this;
  }
  inline MintIncentiveTokens& operator=(MintIncentiveTokens&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MintIncentiveTokens& default_instance() {
    return *internal_default_instance();
  }
  static inline const MintIncentiveTokens* internal_default_instance() {
    return reinterpret_cast<const MintIncentiveTokens*>(
        &_MintIncentiveTokens_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MintIncentiveTokens& a, MintIncentiveTokens& b) { a.Swap(&b); }
  inline void Swap(MintIncentiveTokens* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MintIncentiveTokens* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MintIncentiveTokens* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MintIncentiveTokens>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MintIncentiveTokens& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MintIncentiveTokens& from) { MintIncentiveTokens::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MintIncentiveTokens* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "xion.mint.v1.MintIncentiveTokens"; }

 protected:
  explicit MintIncentiveTokens(::google::protobuf::Arena* arena);
  MintIncentiveTokens(::google::protobuf::Arena* arena, const MintIncentiveTokens& from);
  MintIncentiveTokens(::google::protobuf::Arena* arena, MintIncentiveTokens&& from) noexcept
      : MintIncentiveTokens(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBondedRatioFieldNumber = 1,
    kInflationFieldNumber = 2,
    kAnnualProvisionsFieldNumber = 3,
    kNeededAmountFieldNumber = 4,
    kCollectedAmountFieldNumber = 5,
    kMintedAmountFieldNumber = 6,
    kBurnedAmountFieldNumber = 7,
  };
  // string bonded_ratio = 1 [json_name = "bondedRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.moretags) = "yaml:\"bonded_ratio\"", (.cosmos_proto.scalar) = "cosmos.Dec"];
  void clear_bonded_ratio() ;
  const std::string& bonded_ratio() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bonded_ratio(Arg_&& arg, Args_... args);
  std::string* mutable_bonded_ratio();
  PROTOBUF_NODISCARD std::string* release_bonded_ratio();
  void set_allocated_bonded_ratio(std::string* value);

  private:
  const std::string& _internal_bonded_ratio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bonded_ratio(
      const std::string& value);
  std::string* _internal_mutable_bonded_ratio();

  public:
  // string inflation = 2 [json_name = "inflation", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.moretags) = "yaml:\"inflation\"", (.cosmos_proto.scalar) = "cosmos.Dec"];
  void clear_inflation() ;
  const std::string& inflation() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_inflation(Arg_&& arg, Args_... args);
  std::string* mutable_inflation();
  PROTOBUF_NODISCARD std::string* release_inflation();
  void set_allocated_inflation(std::string* value);

  private:
  const std::string& _internal_inflation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inflation(
      const std::string& value);
  std::string* _internal_mutable_inflation();

  public:
  // string annual_provisions = 3 [json_name = "annualProvisions", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.moretags) = "yaml:\"annual_provisions\"", (.cosmos_proto.scalar) = "cosmos.Dec"];
  void clear_annual_provisions() ;
  const std::string& annual_provisions() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_annual_provisions(Arg_&& arg, Args_... args);
  std::string* mutable_annual_provisions();
  PROTOBUF_NODISCARD std::string* release_annual_provisions();
  void set_allocated_annual_provisions(std::string* value);

  private:
  const std::string& _internal_annual_provisions() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_annual_provisions(
      const std::string& value);
  std::string* _internal_mutable_annual_provisions();

  public:
  // uint64 needed_amount = 4 [json_name = "neededAmount"];
  void clear_needed_amount() ;
  ::uint64_t needed_amount() const;
  void set_needed_amount(::uint64_t value);

  private:
  ::uint64_t _internal_needed_amount() const;
  void _internal_set_needed_amount(::uint64_t value);

  public:
  // uint64 collected_amount = 5 [json_name = "collectedAmount"];
  void clear_collected_amount() ;
  ::uint64_t collected_amount() const;
  void set_collected_amount(::uint64_t value);

  private:
  ::uint64_t _internal_collected_amount() const;
  void _internal_set_collected_amount(::uint64_t value);

  public:
  // uint64 minted_amount = 6 [json_name = "mintedAmount"];
  void clear_minted_amount() ;
  ::uint64_t minted_amount() const;
  void set_minted_amount(::uint64_t value);

  private:
  ::uint64_t _internal_minted_amount() const;
  void _internal_set_minted_amount(::uint64_t value);

  public:
  // uint64 burned_amount = 7 [json_name = "burnedAmount"];
  void clear_burned_amount() ;
  ::uint64_t burned_amount() const;
  void set_burned_amount(::uint64_t value);

  private:
  ::uint64_t _internal_burned_amount() const;
  void _internal_set_burned_amount(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:xion.mint.v1.MintIncentiveTokens)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      79, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MintIncentiveTokens& from_msg);
    ::google::protobuf::internal::ArenaStringPtr bonded_ratio_;
    ::google::protobuf::internal::ArenaStringPtr inflation_;
    ::google::protobuf::internal::ArenaStringPtr annual_provisions_;
    ::uint64_t needed_amount_;
    ::uint64_t collected_amount_;
    ::uint64_t minted_amount_;
    ::uint64_t burned_amount_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xion_2fmint_2fv1_2fevent_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MintIncentiveTokens

// string bonded_ratio = 1 [json_name = "bondedRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.moretags) = "yaml:\"bonded_ratio\"", (.cosmos_proto.scalar) = "cosmos.Dec"];
inline void MintIncentiveTokens::clear_bonded_ratio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bonded_ratio_.ClearToEmpty();
}
inline const std::string& MintIncentiveTokens::bonded_ratio() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xion.mint.v1.MintIncentiveTokens.bonded_ratio)
  return _internal_bonded_ratio();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MintIncentiveTokens::set_bonded_ratio(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bonded_ratio_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xion.mint.v1.MintIncentiveTokens.bonded_ratio)
}
inline std::string* MintIncentiveTokens::mutable_bonded_ratio() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bonded_ratio();
  // @@protoc_insertion_point(field_mutable:xion.mint.v1.MintIncentiveTokens.bonded_ratio)
  return _s;
}
inline const std::string& MintIncentiveTokens::_internal_bonded_ratio() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bonded_ratio_.Get();
}
inline void MintIncentiveTokens::_internal_set_bonded_ratio(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bonded_ratio_.Set(value, GetArena());
}
inline std::string* MintIncentiveTokens::_internal_mutable_bonded_ratio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.bonded_ratio_.Mutable( GetArena());
}
inline std::string* MintIncentiveTokens::release_bonded_ratio() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xion.mint.v1.MintIncentiveTokens.bonded_ratio)
  return _impl_.bonded_ratio_.Release();
}
inline void MintIncentiveTokens::set_allocated_bonded_ratio(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bonded_ratio_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.bonded_ratio_.IsDefault()) {
    _impl_.bonded_ratio_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:xion.mint.v1.MintIncentiveTokens.bonded_ratio)
}

// string inflation = 2 [json_name = "inflation", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.moretags) = "yaml:\"inflation\"", (.cosmos_proto.scalar) = "cosmos.Dec"];
inline void MintIncentiveTokens::clear_inflation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inflation_.ClearToEmpty();
}
inline const std::string& MintIncentiveTokens::inflation() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xion.mint.v1.MintIncentiveTokens.inflation)
  return _internal_inflation();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MintIncentiveTokens::set_inflation(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inflation_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xion.mint.v1.MintIncentiveTokens.inflation)
}
inline std::string* MintIncentiveTokens::mutable_inflation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_inflation();
  // @@protoc_insertion_point(field_mutable:xion.mint.v1.MintIncentiveTokens.inflation)
  return _s;
}
inline const std::string& MintIncentiveTokens::_internal_inflation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.inflation_.Get();
}
inline void MintIncentiveTokens::_internal_set_inflation(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inflation_.Set(value, GetArena());
}
inline std::string* MintIncentiveTokens::_internal_mutable_inflation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.inflation_.Mutable( GetArena());
}
inline std::string* MintIncentiveTokens::release_inflation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xion.mint.v1.MintIncentiveTokens.inflation)
  return _impl_.inflation_.Release();
}
inline void MintIncentiveTokens::set_allocated_inflation(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inflation_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.inflation_.IsDefault()) {
    _impl_.inflation_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:xion.mint.v1.MintIncentiveTokens.inflation)
}

// string annual_provisions = 3 [json_name = "annualProvisions", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.moretags) = "yaml:\"annual_provisions\"", (.cosmos_proto.scalar) = "cosmos.Dec"];
inline void MintIncentiveTokens::clear_annual_provisions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.annual_provisions_.ClearToEmpty();
}
inline const std::string& MintIncentiveTokens::annual_provisions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xion.mint.v1.MintIncentiveTokens.annual_provisions)
  return _internal_annual_provisions();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MintIncentiveTokens::set_annual_provisions(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.annual_provisions_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xion.mint.v1.MintIncentiveTokens.annual_provisions)
}
inline std::string* MintIncentiveTokens::mutable_annual_provisions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_annual_provisions();
  // @@protoc_insertion_point(field_mutable:xion.mint.v1.MintIncentiveTokens.annual_provisions)
  return _s;
}
inline const std::string& MintIncentiveTokens::_internal_annual_provisions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.annual_provisions_.Get();
}
inline void MintIncentiveTokens::_internal_set_annual_provisions(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.annual_provisions_.Set(value, GetArena());
}
inline std::string* MintIncentiveTokens::_internal_mutable_annual_provisions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.annual_provisions_.Mutable( GetArena());
}
inline std::string* MintIncentiveTokens::release_annual_provisions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xion.mint.v1.MintIncentiveTokens.annual_provisions)
  return _impl_.annual_provisions_.Release();
}
inline void MintIncentiveTokens::set_allocated_annual_provisions(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.annual_provisions_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.annual_provisions_.IsDefault()) {
    _impl_.annual_provisions_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:xion.mint.v1.MintIncentiveTokens.annual_provisions)
}

// uint64 needed_amount = 4 [json_name = "neededAmount"];
inline void MintIncentiveTokens::clear_needed_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.needed_amount_ = ::uint64_t{0u};
}
inline ::uint64_t MintIncentiveTokens::needed_amount() const {
  // @@protoc_insertion_point(field_get:xion.mint.v1.MintIncentiveTokens.needed_amount)
  return _internal_needed_amount();
}
inline void MintIncentiveTokens::set_needed_amount(::uint64_t value) {
  _internal_set_needed_amount(value);
  // @@protoc_insertion_point(field_set:xion.mint.v1.MintIncentiveTokens.needed_amount)
}
inline ::uint64_t MintIncentiveTokens::_internal_needed_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.needed_amount_;
}
inline void MintIncentiveTokens::_internal_set_needed_amount(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.needed_amount_ = value;
}

// uint64 collected_amount = 5 [json_name = "collectedAmount"];
inline void MintIncentiveTokens::clear_collected_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.collected_amount_ = ::uint64_t{0u};
}
inline ::uint64_t MintIncentiveTokens::collected_amount() const {
  // @@protoc_insertion_point(field_get:xion.mint.v1.MintIncentiveTokens.collected_amount)
  return _internal_collected_amount();
}
inline void MintIncentiveTokens::set_collected_amount(::uint64_t value) {
  _internal_set_collected_amount(value);
  // @@protoc_insertion_point(field_set:xion.mint.v1.MintIncentiveTokens.collected_amount)
}
inline ::uint64_t MintIncentiveTokens::_internal_collected_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.collected_amount_;
}
inline void MintIncentiveTokens::_internal_set_collected_amount(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.collected_amount_ = value;
}

// uint64 minted_amount = 6 [json_name = "mintedAmount"];
inline void MintIncentiveTokens::clear_minted_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.minted_amount_ = ::uint64_t{0u};
}
inline ::uint64_t MintIncentiveTokens::minted_amount() const {
  // @@protoc_insertion_point(field_get:xion.mint.v1.MintIncentiveTokens.minted_amount)
  return _internal_minted_amount();
}
inline void MintIncentiveTokens::set_minted_amount(::uint64_t value) {
  _internal_set_minted_amount(value);
  // @@protoc_insertion_point(field_set:xion.mint.v1.MintIncentiveTokens.minted_amount)
}
inline ::uint64_t MintIncentiveTokens::_internal_minted_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.minted_amount_;
}
inline void MintIncentiveTokens::_internal_set_minted_amount(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.minted_amount_ = value;
}

// uint64 burned_amount = 7 [json_name = "burnedAmount"];
inline void MintIncentiveTokens::clear_burned_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.burned_amount_ = ::uint64_t{0u};
}
inline ::uint64_t MintIncentiveTokens::burned_amount() const {
  // @@protoc_insertion_point(field_get:xion.mint.v1.MintIncentiveTokens.burned_amount)
  return _internal_burned_amount();
}
inline void MintIncentiveTokens::set_burned_amount(::uint64_t value) {
  _internal_set_burned_amount(value);
  // @@protoc_insertion_point(field_set:xion.mint.v1.MintIncentiveTokens.burned_amount)
}
inline ::uint64_t MintIncentiveTokens::_internal_burned_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.burned_amount_;
}
inline void MintIncentiveTokens::_internal_set_burned_amount(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.burned_amount_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace mint
}  // namespace xion


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // xion_2fmint_2fv1_2fevent_2eproto_2epb_2eh
