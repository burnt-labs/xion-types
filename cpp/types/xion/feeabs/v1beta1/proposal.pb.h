// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: xion/feeabs/v1beta1/proposal.proto
// Protobuf C++ Version: 5.29.4

#ifndef xion_2ffeeabs_2fv1beta1_2fproposal_2eproto_2epb_2eh
#define xion_2ffeeabs_2fv1beta1_2fproposal_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_xion_2ffeeabs_2fv1beta1_2fproposal_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_xion_2ffeeabs_2fv1beta1_2fproposal_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_xion_2ffeeabs_2fv1beta1_2fproposal_2eproto;
namespace xion {
namespace feeabs {
namespace v1beta1 {
class AddHostZoneProposal;
struct AddHostZoneProposalDefaultTypeInternal;
extern AddHostZoneProposalDefaultTypeInternal _AddHostZoneProposal_default_instance_;
class DeleteHostZoneProposal;
struct DeleteHostZoneProposalDefaultTypeInternal;
extern DeleteHostZoneProposalDefaultTypeInternal _DeleteHostZoneProposal_default_instance_;
class HostChainFeeAbsConfig;
struct HostChainFeeAbsConfigDefaultTypeInternal;
extern HostChainFeeAbsConfigDefaultTypeInternal _HostChainFeeAbsConfig_default_instance_;
class SetHostZoneProposal;
struct SetHostZoneProposalDefaultTypeInternal;
extern SetHostZoneProposalDefaultTypeInternal _SetHostZoneProposal_default_instance_;
}  // namespace v1beta1
}  // namespace feeabs
}  // namespace xion
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace xion {
namespace feeabs {
namespace v1beta1 {
enum HostChainFeeAbsStatus : int {
  UPDATED = 0,
  OUTDATED = 1,
  FROZEN = 2,
  HostChainFeeAbsStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  HostChainFeeAbsStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool HostChainFeeAbsStatus_IsValid(int value);
extern const uint32_t HostChainFeeAbsStatus_internal_data_[];
constexpr HostChainFeeAbsStatus HostChainFeeAbsStatus_MIN = static_cast<HostChainFeeAbsStatus>(0);
constexpr HostChainFeeAbsStatus HostChainFeeAbsStatus_MAX = static_cast<HostChainFeeAbsStatus>(2);
constexpr int HostChainFeeAbsStatus_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
HostChainFeeAbsStatus_descriptor();
template <typename T>
const std::string& HostChainFeeAbsStatus_Name(T value) {
  static_assert(std::is_same<T, HostChainFeeAbsStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to HostChainFeeAbsStatus_Name().");
  return HostChainFeeAbsStatus_Name(static_cast<HostChainFeeAbsStatus>(value));
}
template <>
inline const std::string& HostChainFeeAbsStatus_Name(HostChainFeeAbsStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<HostChainFeeAbsStatus_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool HostChainFeeAbsStatus_Parse(absl::string_view name, HostChainFeeAbsStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HostChainFeeAbsStatus>(
      HostChainFeeAbsStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class HostChainFeeAbsConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:xion.feeabs.v1beta1.HostChainFeeAbsConfig) */ {
 public:
  inline HostChainFeeAbsConfig() : HostChainFeeAbsConfig(nullptr) {}
  ~HostChainFeeAbsConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HostChainFeeAbsConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HostChainFeeAbsConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HostChainFeeAbsConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline HostChainFeeAbsConfig(const HostChainFeeAbsConfig& from) : HostChainFeeAbsConfig(nullptr, from) {}
  inline HostChainFeeAbsConfig(HostChainFeeAbsConfig&& from) noexcept
      : HostChainFeeAbsConfig(nullptr, std::move(from)) {}
  inline HostChainFeeAbsConfig& operator=(const HostChainFeeAbsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostChainFeeAbsConfig& operator=(HostChainFeeAbsConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HostChainFeeAbsConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const HostChainFeeAbsConfig* internal_default_instance() {
    return reinterpret_cast<const HostChainFeeAbsConfig*>(
        &_HostChainFeeAbsConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(HostChainFeeAbsConfig& a, HostChainFeeAbsConfig& b) { a.Swap(&b); }
  inline void Swap(HostChainFeeAbsConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostChainFeeAbsConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HostChainFeeAbsConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HostChainFeeAbsConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HostChainFeeAbsConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HostChainFeeAbsConfig& from) { HostChainFeeAbsConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HostChainFeeAbsConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "xion.feeabs.v1beta1.HostChainFeeAbsConfig"; }

 protected:
  explicit HostChainFeeAbsConfig(::google::protobuf::Arena* arena);
  HostChainFeeAbsConfig(::google::protobuf::Arena* arena, const HostChainFeeAbsConfig& from);
  HostChainFeeAbsConfig(::google::protobuf::Arena* arena, HostChainFeeAbsConfig&& from) noexcept
      : HostChainFeeAbsConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIbcDenomFieldNumber = 1,
    kOsmosisPoolTokenDenomInFieldNumber = 2,
    kPoolIdFieldNumber = 3,
    kStatusFieldNumber = 4,
  };
  // string ibc_denom = 1 [json_name = "ibcDenom", (.gogoproto.moretags) = "yaml:\"allowed_token\""];
  void clear_ibc_denom() ;
  const std::string& ibc_denom() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ibc_denom(Arg_&& arg, Args_... args);
  std::string* mutable_ibc_denom();
  PROTOBUF_NODISCARD std::string* release_ibc_denom();
  void set_allocated_ibc_denom(std::string* value);

  private:
  const std::string& _internal_ibc_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ibc_denom(
      const std::string& value);
  std::string* _internal_mutable_ibc_denom();

  public:
  // string osmosis_pool_token_denom_in = 2 [json_name = "osmosisPoolTokenDenomIn"];
  void clear_osmosis_pool_token_denom_in() ;
  const std::string& osmosis_pool_token_denom_in() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_osmosis_pool_token_denom_in(Arg_&& arg, Args_... args);
  std::string* mutable_osmosis_pool_token_denom_in();
  PROTOBUF_NODISCARD std::string* release_osmosis_pool_token_denom_in();
  void set_allocated_osmosis_pool_token_denom_in(std::string* value);

  private:
  const std::string& _internal_osmosis_pool_token_denom_in() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_osmosis_pool_token_denom_in(
      const std::string& value);
  std::string* _internal_mutable_osmosis_pool_token_denom_in();

  public:
  // uint64 pool_id = 3 [json_name = "poolId"];
  void clear_pool_id() ;
  ::uint64_t pool_id() const;
  void set_pool_id(::uint64_t value);

  private:
  ::uint64_t _internal_pool_id() const;
  void _internal_set_pool_id(::uint64_t value);

  public:
  // .xion.feeabs.v1beta1.HostChainFeeAbsStatus status = 4 [json_name = "status"];
  void clear_status() ;
  ::xion::feeabs::v1beta1::HostChainFeeAbsStatus status() const;
  void set_status(::xion::feeabs::v1beta1::HostChainFeeAbsStatus value);

  private:
  ::xion::feeabs::v1beta1::HostChainFeeAbsStatus _internal_status() const;
  void _internal_set_status(::xion::feeabs::v1beta1::HostChainFeeAbsStatus value);

  public:
  // @@protoc_insertion_point(class_scope:xion.feeabs.v1beta1.HostChainFeeAbsConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      86, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HostChainFeeAbsConfig& from_msg);
    ::google::protobuf::internal::ArenaStringPtr ibc_denom_;
    ::google::protobuf::internal::ArenaStringPtr osmosis_pool_token_denom_in_;
    ::uint64_t pool_id_;
    int status_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xion_2ffeeabs_2fv1beta1_2fproposal_2eproto;
};
// -------------------------------------------------------------------

class DeleteHostZoneProposal final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:xion.feeabs.v1beta1.DeleteHostZoneProposal) */ {
 public:
  inline DeleteHostZoneProposal() : DeleteHostZoneProposal(nullptr) {}
  ~DeleteHostZoneProposal() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DeleteHostZoneProposal* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DeleteHostZoneProposal));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeleteHostZoneProposal(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeleteHostZoneProposal(const DeleteHostZoneProposal& from) : DeleteHostZoneProposal(nullptr, from) {}
  inline DeleteHostZoneProposal(DeleteHostZoneProposal&& from) noexcept
      : DeleteHostZoneProposal(nullptr, std::move(from)) {}
  inline DeleteHostZoneProposal& operator=(const DeleteHostZoneProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteHostZoneProposal& operator=(DeleteHostZoneProposal&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteHostZoneProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteHostZoneProposal* internal_default_instance() {
    return reinterpret_cast<const DeleteHostZoneProposal*>(
        &_DeleteHostZoneProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(DeleteHostZoneProposal& a, DeleteHostZoneProposal& b) { a.Swap(&b); }
  inline void Swap(DeleteHostZoneProposal* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteHostZoneProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteHostZoneProposal* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DeleteHostZoneProposal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeleteHostZoneProposal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeleteHostZoneProposal& from) { DeleteHostZoneProposal::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DeleteHostZoneProposal* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "xion.feeabs.v1beta1.DeleteHostZoneProposal"; }

 protected:
  explicit DeleteHostZoneProposal(::google::protobuf::Arena* arena);
  DeleteHostZoneProposal(::google::protobuf::Arena* arena, const DeleteHostZoneProposal& from);
  DeleteHostZoneProposal(::google::protobuf::Arena* arena, DeleteHostZoneProposal&& from) noexcept
      : DeleteHostZoneProposal(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kIbcDenomFieldNumber = 3,
  };
  // string title = 1 [json_name = "title"];
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 2 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // string ibc_denom = 3 [json_name = "ibcDenom"];
  void clear_ibc_denom() ;
  const std::string& ibc_denom() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ibc_denom(Arg_&& arg, Args_... args);
  std::string* mutable_ibc_denom();
  PROTOBUF_NODISCARD std::string* release_ibc_denom();
  void set_allocated_ibc_denom(std::string* value);

  private:
  const std::string& _internal_ibc_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ibc_denom(
      const std::string& value);
  std::string* _internal_mutable_ibc_denom();

  public:
  // @@protoc_insertion_point(class_scope:xion.feeabs.v1beta1.DeleteHostZoneProposal)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      76, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DeleteHostZoneProposal& from_msg);
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr ibc_denom_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xion_2ffeeabs_2fv1beta1_2fproposal_2eproto;
};
// -------------------------------------------------------------------

class SetHostZoneProposal final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:xion.feeabs.v1beta1.SetHostZoneProposal) */ {
 public:
  inline SetHostZoneProposal() : SetHostZoneProposal(nullptr) {}
  ~SetHostZoneProposal() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetHostZoneProposal* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetHostZoneProposal));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetHostZoneProposal(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetHostZoneProposal(const SetHostZoneProposal& from) : SetHostZoneProposal(nullptr, from) {}
  inline SetHostZoneProposal(SetHostZoneProposal&& from) noexcept
      : SetHostZoneProposal(nullptr, std::move(from)) {}
  inline SetHostZoneProposal& operator=(const SetHostZoneProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetHostZoneProposal& operator=(SetHostZoneProposal&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetHostZoneProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetHostZoneProposal* internal_default_instance() {
    return reinterpret_cast<const SetHostZoneProposal*>(
        &_SetHostZoneProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(SetHostZoneProposal& a, SetHostZoneProposal& b) { a.Swap(&b); }
  inline void Swap(SetHostZoneProposal* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetHostZoneProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetHostZoneProposal* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetHostZoneProposal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetHostZoneProposal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetHostZoneProposal& from) { SetHostZoneProposal::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetHostZoneProposal* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "xion.feeabs.v1beta1.SetHostZoneProposal"; }

 protected:
  explicit SetHostZoneProposal(::google::protobuf::Arena* arena);
  SetHostZoneProposal(::google::protobuf::Arena* arena, const SetHostZoneProposal& from);
  SetHostZoneProposal(::google::protobuf::Arena* arena, SetHostZoneProposal&& from) noexcept
      : SetHostZoneProposal(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kHostChainConfigFieldNumber = 3,
  };
  // string title = 1 [json_name = "title"];
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 2 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // .xion.feeabs.v1beta1.HostChainFeeAbsConfig host_chain_config = 3 [json_name = "hostChainConfig"];
  bool has_host_chain_config() const;
  void clear_host_chain_config() ;
  const ::xion::feeabs::v1beta1::HostChainFeeAbsConfig& host_chain_config() const;
  PROTOBUF_NODISCARD ::xion::feeabs::v1beta1::HostChainFeeAbsConfig* release_host_chain_config();
  ::xion::feeabs::v1beta1::HostChainFeeAbsConfig* mutable_host_chain_config();
  void set_allocated_host_chain_config(::xion::feeabs::v1beta1::HostChainFeeAbsConfig* value);
  void unsafe_arena_set_allocated_host_chain_config(::xion::feeabs::v1beta1::HostChainFeeAbsConfig* value);
  ::xion::feeabs::v1beta1::HostChainFeeAbsConfig* unsafe_arena_release_host_chain_config();

  private:
  const ::xion::feeabs::v1beta1::HostChainFeeAbsConfig& _internal_host_chain_config() const;
  ::xion::feeabs::v1beta1::HostChainFeeAbsConfig* _internal_mutable_host_chain_config();

  public:
  // @@protoc_insertion_point(class_scope:xion.feeabs.v1beta1.SetHostZoneProposal)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      64, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetHostZoneProposal& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::xion::feeabs::v1beta1::HostChainFeeAbsConfig* host_chain_config_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xion_2ffeeabs_2fv1beta1_2fproposal_2eproto;
};
// -------------------------------------------------------------------

class AddHostZoneProposal final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:xion.feeabs.v1beta1.AddHostZoneProposal) */ {
 public:
  inline AddHostZoneProposal() : AddHostZoneProposal(nullptr) {}
  ~AddHostZoneProposal() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AddHostZoneProposal* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AddHostZoneProposal));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AddHostZoneProposal(
      ::google::protobuf::internal::ConstantInitialized);

  inline AddHostZoneProposal(const AddHostZoneProposal& from) : AddHostZoneProposal(nullptr, from) {}
  inline AddHostZoneProposal(AddHostZoneProposal&& from) noexcept
      : AddHostZoneProposal(nullptr, std::move(from)) {}
  inline AddHostZoneProposal& operator=(const AddHostZoneProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddHostZoneProposal& operator=(AddHostZoneProposal&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddHostZoneProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddHostZoneProposal* internal_default_instance() {
    return reinterpret_cast<const AddHostZoneProposal*>(
        &_AddHostZoneProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(AddHostZoneProposal& a, AddHostZoneProposal& b) { a.Swap(&b); }
  inline void Swap(AddHostZoneProposal* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddHostZoneProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddHostZoneProposal* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AddHostZoneProposal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AddHostZoneProposal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AddHostZoneProposal& from) { AddHostZoneProposal::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AddHostZoneProposal* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "xion.feeabs.v1beta1.AddHostZoneProposal"; }

 protected:
  explicit AddHostZoneProposal(::google::protobuf::Arena* arena);
  AddHostZoneProposal(::google::protobuf::Arena* arena, const AddHostZoneProposal& from);
  AddHostZoneProposal(::google::protobuf::Arena* arena, AddHostZoneProposal&& from) noexcept
      : AddHostZoneProposal(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kHostChainConfigFieldNumber = 3,
  };
  // string title = 1 [json_name = "title"];
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 2 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // .xion.feeabs.v1beta1.HostChainFeeAbsConfig host_chain_config = 3 [json_name = "hostChainConfig"];
  bool has_host_chain_config() const;
  void clear_host_chain_config() ;
  const ::xion::feeabs::v1beta1::HostChainFeeAbsConfig& host_chain_config() const;
  PROTOBUF_NODISCARD ::xion::feeabs::v1beta1::HostChainFeeAbsConfig* release_host_chain_config();
  ::xion::feeabs::v1beta1::HostChainFeeAbsConfig* mutable_host_chain_config();
  void set_allocated_host_chain_config(::xion::feeabs::v1beta1::HostChainFeeAbsConfig* value);
  void unsafe_arena_set_allocated_host_chain_config(::xion::feeabs::v1beta1::HostChainFeeAbsConfig* value);
  ::xion::feeabs::v1beta1::HostChainFeeAbsConfig* unsafe_arena_release_host_chain_config();

  private:
  const ::xion::feeabs::v1beta1::HostChainFeeAbsConfig& _internal_host_chain_config() const;
  ::xion::feeabs::v1beta1::HostChainFeeAbsConfig* _internal_mutable_host_chain_config();

  public:
  // @@protoc_insertion_point(class_scope:xion.feeabs.v1beta1.AddHostZoneProposal)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      64, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AddHostZoneProposal& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::xion::feeabs::v1beta1::HostChainFeeAbsConfig* host_chain_config_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xion_2ffeeabs_2fv1beta1_2fproposal_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// HostChainFeeAbsConfig

// string ibc_denom = 1 [json_name = "ibcDenom", (.gogoproto.moretags) = "yaml:\"allowed_token\""];
inline void HostChainFeeAbsConfig::clear_ibc_denom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ibc_denom_.ClearToEmpty();
}
inline const std::string& HostChainFeeAbsConfig::ibc_denom() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xion.feeabs.v1beta1.HostChainFeeAbsConfig.ibc_denom)
  return _internal_ibc_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HostChainFeeAbsConfig::set_ibc_denom(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ibc_denom_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xion.feeabs.v1beta1.HostChainFeeAbsConfig.ibc_denom)
}
inline std::string* HostChainFeeAbsConfig::mutable_ibc_denom() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ibc_denom();
  // @@protoc_insertion_point(field_mutable:xion.feeabs.v1beta1.HostChainFeeAbsConfig.ibc_denom)
  return _s;
}
inline const std::string& HostChainFeeAbsConfig::_internal_ibc_denom() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ibc_denom_.Get();
}
inline void HostChainFeeAbsConfig::_internal_set_ibc_denom(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ibc_denom_.Set(value, GetArena());
}
inline std::string* HostChainFeeAbsConfig::_internal_mutable_ibc_denom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.ibc_denom_.Mutable( GetArena());
}
inline std::string* HostChainFeeAbsConfig::release_ibc_denom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xion.feeabs.v1beta1.HostChainFeeAbsConfig.ibc_denom)
  return _impl_.ibc_denom_.Release();
}
inline void HostChainFeeAbsConfig::set_allocated_ibc_denom(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ibc_denom_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.ibc_denom_.IsDefault()) {
    _impl_.ibc_denom_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:xion.feeabs.v1beta1.HostChainFeeAbsConfig.ibc_denom)
}

// string osmosis_pool_token_denom_in = 2 [json_name = "osmosisPoolTokenDenomIn"];
inline void HostChainFeeAbsConfig::clear_osmosis_pool_token_denom_in() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.osmosis_pool_token_denom_in_.ClearToEmpty();
}
inline const std::string& HostChainFeeAbsConfig::osmosis_pool_token_denom_in() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xion.feeabs.v1beta1.HostChainFeeAbsConfig.osmosis_pool_token_denom_in)
  return _internal_osmosis_pool_token_denom_in();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HostChainFeeAbsConfig::set_osmosis_pool_token_denom_in(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.osmosis_pool_token_denom_in_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xion.feeabs.v1beta1.HostChainFeeAbsConfig.osmosis_pool_token_denom_in)
}
inline std::string* HostChainFeeAbsConfig::mutable_osmosis_pool_token_denom_in() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_osmosis_pool_token_denom_in();
  // @@protoc_insertion_point(field_mutable:xion.feeabs.v1beta1.HostChainFeeAbsConfig.osmosis_pool_token_denom_in)
  return _s;
}
inline const std::string& HostChainFeeAbsConfig::_internal_osmosis_pool_token_denom_in() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.osmosis_pool_token_denom_in_.Get();
}
inline void HostChainFeeAbsConfig::_internal_set_osmosis_pool_token_denom_in(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.osmosis_pool_token_denom_in_.Set(value, GetArena());
}
inline std::string* HostChainFeeAbsConfig::_internal_mutable_osmosis_pool_token_denom_in() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.osmosis_pool_token_denom_in_.Mutable( GetArena());
}
inline std::string* HostChainFeeAbsConfig::release_osmosis_pool_token_denom_in() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xion.feeabs.v1beta1.HostChainFeeAbsConfig.osmosis_pool_token_denom_in)
  return _impl_.osmosis_pool_token_denom_in_.Release();
}
inline void HostChainFeeAbsConfig::set_allocated_osmosis_pool_token_denom_in(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.osmosis_pool_token_denom_in_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.osmosis_pool_token_denom_in_.IsDefault()) {
    _impl_.osmosis_pool_token_denom_in_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:xion.feeabs.v1beta1.HostChainFeeAbsConfig.osmosis_pool_token_denom_in)
}

// uint64 pool_id = 3 [json_name = "poolId"];
inline void HostChainFeeAbsConfig::clear_pool_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pool_id_ = ::uint64_t{0u};
}
inline ::uint64_t HostChainFeeAbsConfig::pool_id() const {
  // @@protoc_insertion_point(field_get:xion.feeabs.v1beta1.HostChainFeeAbsConfig.pool_id)
  return _internal_pool_id();
}
inline void HostChainFeeAbsConfig::set_pool_id(::uint64_t value) {
  _internal_set_pool_id(value);
  // @@protoc_insertion_point(field_set:xion.feeabs.v1beta1.HostChainFeeAbsConfig.pool_id)
}
inline ::uint64_t HostChainFeeAbsConfig::_internal_pool_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pool_id_;
}
inline void HostChainFeeAbsConfig::_internal_set_pool_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pool_id_ = value;
}

// .xion.feeabs.v1beta1.HostChainFeeAbsStatus status = 4 [json_name = "status"];
inline void HostChainFeeAbsConfig::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::xion::feeabs::v1beta1::HostChainFeeAbsStatus HostChainFeeAbsConfig::status() const {
  // @@protoc_insertion_point(field_get:xion.feeabs.v1beta1.HostChainFeeAbsConfig.status)
  return _internal_status();
}
inline void HostChainFeeAbsConfig::set_status(::xion::feeabs::v1beta1::HostChainFeeAbsStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:xion.feeabs.v1beta1.HostChainFeeAbsConfig.status)
}
inline ::xion::feeabs::v1beta1::HostChainFeeAbsStatus HostChainFeeAbsConfig::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::xion::feeabs::v1beta1::HostChainFeeAbsStatus>(_impl_.status_);
}
inline void HostChainFeeAbsConfig::_internal_set_status(::xion::feeabs::v1beta1::HostChainFeeAbsStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// -------------------------------------------------------------------

// AddHostZoneProposal

// string title = 1 [json_name = "title"];
inline void AddHostZoneProposal::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& AddHostZoneProposal::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xion.feeabs.v1beta1.AddHostZoneProposal.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddHostZoneProposal::set_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xion.feeabs.v1beta1.AddHostZoneProposal.title)
}
inline std::string* AddHostZoneProposal::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:xion.feeabs.v1beta1.AddHostZoneProposal.title)
  return _s;
}
inline const std::string& AddHostZoneProposal::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void AddHostZoneProposal::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(value, GetArena());
}
inline std::string* AddHostZoneProposal::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* AddHostZoneProposal::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xion.feeabs.v1beta1.AddHostZoneProposal.title)
  return _impl_.title_.Release();
}
inline void AddHostZoneProposal::set_allocated_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:xion.feeabs.v1beta1.AddHostZoneProposal.title)
}

// string description = 2 [json_name = "description"];
inline void AddHostZoneProposal::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& AddHostZoneProposal::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xion.feeabs.v1beta1.AddHostZoneProposal.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddHostZoneProposal::set_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xion.feeabs.v1beta1.AddHostZoneProposal.description)
}
inline std::string* AddHostZoneProposal::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:xion.feeabs.v1beta1.AddHostZoneProposal.description)
  return _s;
}
inline const std::string& AddHostZoneProposal::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_.Get();
}
inline void AddHostZoneProposal::_internal_set_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(value, GetArena());
}
inline std::string* AddHostZoneProposal::_internal_mutable_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* AddHostZoneProposal::release_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xion.feeabs.v1beta1.AddHostZoneProposal.description)
  return _impl_.description_.Release();
}
inline void AddHostZoneProposal::set_allocated_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:xion.feeabs.v1beta1.AddHostZoneProposal.description)
}

// .xion.feeabs.v1beta1.HostChainFeeAbsConfig host_chain_config = 3 [json_name = "hostChainConfig"];
inline bool AddHostZoneProposal::has_host_chain_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.host_chain_config_ != nullptr);
  return value;
}
inline void AddHostZoneProposal::clear_host_chain_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.host_chain_config_ != nullptr) _impl_.host_chain_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::xion::feeabs::v1beta1::HostChainFeeAbsConfig& AddHostZoneProposal::_internal_host_chain_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::xion::feeabs::v1beta1::HostChainFeeAbsConfig* p = _impl_.host_chain_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::xion::feeabs::v1beta1::HostChainFeeAbsConfig&>(::xion::feeabs::v1beta1::_HostChainFeeAbsConfig_default_instance_);
}
inline const ::xion::feeabs::v1beta1::HostChainFeeAbsConfig& AddHostZoneProposal::host_chain_config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xion.feeabs.v1beta1.AddHostZoneProposal.host_chain_config)
  return _internal_host_chain_config();
}
inline void AddHostZoneProposal::unsafe_arena_set_allocated_host_chain_config(::xion::feeabs::v1beta1::HostChainFeeAbsConfig* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.host_chain_config_);
  }
  _impl_.host_chain_config_ = reinterpret_cast<::xion::feeabs::v1beta1::HostChainFeeAbsConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xion.feeabs.v1beta1.AddHostZoneProposal.host_chain_config)
}
inline ::xion::feeabs::v1beta1::HostChainFeeAbsConfig* AddHostZoneProposal::release_host_chain_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xion::feeabs::v1beta1::HostChainFeeAbsConfig* released = _impl_.host_chain_config_;
  _impl_.host_chain_config_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::xion::feeabs::v1beta1::HostChainFeeAbsConfig* AddHostZoneProposal::unsafe_arena_release_host_chain_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xion.feeabs.v1beta1.AddHostZoneProposal.host_chain_config)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xion::feeabs::v1beta1::HostChainFeeAbsConfig* temp = _impl_.host_chain_config_;
  _impl_.host_chain_config_ = nullptr;
  return temp;
}
inline ::xion::feeabs::v1beta1::HostChainFeeAbsConfig* AddHostZoneProposal::_internal_mutable_host_chain_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.host_chain_config_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::xion::feeabs::v1beta1::HostChainFeeAbsConfig>(GetArena());
    _impl_.host_chain_config_ = reinterpret_cast<::xion::feeabs::v1beta1::HostChainFeeAbsConfig*>(p);
  }
  return _impl_.host_chain_config_;
}
inline ::xion::feeabs::v1beta1::HostChainFeeAbsConfig* AddHostZoneProposal::mutable_host_chain_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::xion::feeabs::v1beta1::HostChainFeeAbsConfig* _msg = _internal_mutable_host_chain_config();
  // @@protoc_insertion_point(field_mutable:xion.feeabs.v1beta1.AddHostZoneProposal.host_chain_config)
  return _msg;
}
inline void AddHostZoneProposal::set_allocated_host_chain_config(::xion::feeabs::v1beta1::HostChainFeeAbsConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.host_chain_config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.host_chain_config_ = reinterpret_cast<::xion::feeabs::v1beta1::HostChainFeeAbsConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:xion.feeabs.v1beta1.AddHostZoneProposal.host_chain_config)
}

// -------------------------------------------------------------------

// DeleteHostZoneProposal

// string title = 1 [json_name = "title"];
inline void DeleteHostZoneProposal::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& DeleteHostZoneProposal::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xion.feeabs.v1beta1.DeleteHostZoneProposal.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeleteHostZoneProposal::set_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xion.feeabs.v1beta1.DeleteHostZoneProposal.title)
}
inline std::string* DeleteHostZoneProposal::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:xion.feeabs.v1beta1.DeleteHostZoneProposal.title)
  return _s;
}
inline const std::string& DeleteHostZoneProposal::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void DeleteHostZoneProposal::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(value, GetArena());
}
inline std::string* DeleteHostZoneProposal::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* DeleteHostZoneProposal::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xion.feeabs.v1beta1.DeleteHostZoneProposal.title)
  return _impl_.title_.Release();
}
inline void DeleteHostZoneProposal::set_allocated_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:xion.feeabs.v1beta1.DeleteHostZoneProposal.title)
}

// string description = 2 [json_name = "description"];
inline void DeleteHostZoneProposal::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& DeleteHostZoneProposal::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xion.feeabs.v1beta1.DeleteHostZoneProposal.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeleteHostZoneProposal::set_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xion.feeabs.v1beta1.DeleteHostZoneProposal.description)
}
inline std::string* DeleteHostZoneProposal::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:xion.feeabs.v1beta1.DeleteHostZoneProposal.description)
  return _s;
}
inline const std::string& DeleteHostZoneProposal::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_.Get();
}
inline void DeleteHostZoneProposal::_internal_set_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(value, GetArena());
}
inline std::string* DeleteHostZoneProposal::_internal_mutable_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* DeleteHostZoneProposal::release_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xion.feeabs.v1beta1.DeleteHostZoneProposal.description)
  return _impl_.description_.Release();
}
inline void DeleteHostZoneProposal::set_allocated_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:xion.feeabs.v1beta1.DeleteHostZoneProposal.description)
}

// string ibc_denom = 3 [json_name = "ibcDenom"];
inline void DeleteHostZoneProposal::clear_ibc_denom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ibc_denom_.ClearToEmpty();
}
inline const std::string& DeleteHostZoneProposal::ibc_denom() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xion.feeabs.v1beta1.DeleteHostZoneProposal.ibc_denom)
  return _internal_ibc_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeleteHostZoneProposal::set_ibc_denom(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ibc_denom_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xion.feeabs.v1beta1.DeleteHostZoneProposal.ibc_denom)
}
inline std::string* DeleteHostZoneProposal::mutable_ibc_denom() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ibc_denom();
  // @@protoc_insertion_point(field_mutable:xion.feeabs.v1beta1.DeleteHostZoneProposal.ibc_denom)
  return _s;
}
inline const std::string& DeleteHostZoneProposal::_internal_ibc_denom() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ibc_denom_.Get();
}
inline void DeleteHostZoneProposal::_internal_set_ibc_denom(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ibc_denom_.Set(value, GetArena());
}
inline std::string* DeleteHostZoneProposal::_internal_mutable_ibc_denom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.ibc_denom_.Mutable( GetArena());
}
inline std::string* DeleteHostZoneProposal::release_ibc_denom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xion.feeabs.v1beta1.DeleteHostZoneProposal.ibc_denom)
  return _impl_.ibc_denom_.Release();
}
inline void DeleteHostZoneProposal::set_allocated_ibc_denom(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ibc_denom_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.ibc_denom_.IsDefault()) {
    _impl_.ibc_denom_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:xion.feeabs.v1beta1.DeleteHostZoneProposal.ibc_denom)
}

// -------------------------------------------------------------------

// SetHostZoneProposal

// string title = 1 [json_name = "title"];
inline void SetHostZoneProposal::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& SetHostZoneProposal::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xion.feeabs.v1beta1.SetHostZoneProposal.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetHostZoneProposal::set_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xion.feeabs.v1beta1.SetHostZoneProposal.title)
}
inline std::string* SetHostZoneProposal::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:xion.feeabs.v1beta1.SetHostZoneProposal.title)
  return _s;
}
inline const std::string& SetHostZoneProposal::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void SetHostZoneProposal::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(value, GetArena());
}
inline std::string* SetHostZoneProposal::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* SetHostZoneProposal::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xion.feeabs.v1beta1.SetHostZoneProposal.title)
  return _impl_.title_.Release();
}
inline void SetHostZoneProposal::set_allocated_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:xion.feeabs.v1beta1.SetHostZoneProposal.title)
}

// string description = 2 [json_name = "description"];
inline void SetHostZoneProposal::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& SetHostZoneProposal::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xion.feeabs.v1beta1.SetHostZoneProposal.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetHostZoneProposal::set_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xion.feeabs.v1beta1.SetHostZoneProposal.description)
}
inline std::string* SetHostZoneProposal::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:xion.feeabs.v1beta1.SetHostZoneProposal.description)
  return _s;
}
inline const std::string& SetHostZoneProposal::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_.Get();
}
inline void SetHostZoneProposal::_internal_set_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(value, GetArena());
}
inline std::string* SetHostZoneProposal::_internal_mutable_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* SetHostZoneProposal::release_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xion.feeabs.v1beta1.SetHostZoneProposal.description)
  return _impl_.description_.Release();
}
inline void SetHostZoneProposal::set_allocated_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:xion.feeabs.v1beta1.SetHostZoneProposal.description)
}

// .xion.feeabs.v1beta1.HostChainFeeAbsConfig host_chain_config = 3 [json_name = "hostChainConfig"];
inline bool SetHostZoneProposal::has_host_chain_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.host_chain_config_ != nullptr);
  return value;
}
inline void SetHostZoneProposal::clear_host_chain_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.host_chain_config_ != nullptr) _impl_.host_chain_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::xion::feeabs::v1beta1::HostChainFeeAbsConfig& SetHostZoneProposal::_internal_host_chain_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::xion::feeabs::v1beta1::HostChainFeeAbsConfig* p = _impl_.host_chain_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::xion::feeabs::v1beta1::HostChainFeeAbsConfig&>(::xion::feeabs::v1beta1::_HostChainFeeAbsConfig_default_instance_);
}
inline const ::xion::feeabs::v1beta1::HostChainFeeAbsConfig& SetHostZoneProposal::host_chain_config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xion.feeabs.v1beta1.SetHostZoneProposal.host_chain_config)
  return _internal_host_chain_config();
}
inline void SetHostZoneProposal::unsafe_arena_set_allocated_host_chain_config(::xion::feeabs::v1beta1::HostChainFeeAbsConfig* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.host_chain_config_);
  }
  _impl_.host_chain_config_ = reinterpret_cast<::xion::feeabs::v1beta1::HostChainFeeAbsConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xion.feeabs.v1beta1.SetHostZoneProposal.host_chain_config)
}
inline ::xion::feeabs::v1beta1::HostChainFeeAbsConfig* SetHostZoneProposal::release_host_chain_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xion::feeabs::v1beta1::HostChainFeeAbsConfig* released = _impl_.host_chain_config_;
  _impl_.host_chain_config_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::xion::feeabs::v1beta1::HostChainFeeAbsConfig* SetHostZoneProposal::unsafe_arena_release_host_chain_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xion.feeabs.v1beta1.SetHostZoneProposal.host_chain_config)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xion::feeabs::v1beta1::HostChainFeeAbsConfig* temp = _impl_.host_chain_config_;
  _impl_.host_chain_config_ = nullptr;
  return temp;
}
inline ::xion::feeabs::v1beta1::HostChainFeeAbsConfig* SetHostZoneProposal::_internal_mutable_host_chain_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.host_chain_config_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::xion::feeabs::v1beta1::HostChainFeeAbsConfig>(GetArena());
    _impl_.host_chain_config_ = reinterpret_cast<::xion::feeabs::v1beta1::HostChainFeeAbsConfig*>(p);
  }
  return _impl_.host_chain_config_;
}
inline ::xion::feeabs::v1beta1::HostChainFeeAbsConfig* SetHostZoneProposal::mutable_host_chain_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::xion::feeabs::v1beta1::HostChainFeeAbsConfig* _msg = _internal_mutable_host_chain_config();
  // @@protoc_insertion_point(field_mutable:xion.feeabs.v1beta1.SetHostZoneProposal.host_chain_config)
  return _msg;
}
inline void SetHostZoneProposal::set_allocated_host_chain_config(::xion::feeabs::v1beta1::HostChainFeeAbsConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.host_chain_config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.host_chain_config_ = reinterpret_cast<::xion::feeabs::v1beta1::HostChainFeeAbsConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:xion.feeabs.v1beta1.SetHostZoneProposal.host_chain_config)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace feeabs
}  // namespace xion


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::xion::feeabs::v1beta1::HostChainFeeAbsStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::xion::feeabs::v1beta1::HostChainFeeAbsStatus>() {
  return ::xion::feeabs::v1beta1::HostChainFeeAbsStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // xion_2ffeeabs_2fv1beta1_2fproposal_2eproto_2epb_2eh
