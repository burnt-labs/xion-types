// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: xion/feeabs/v1beta1/epoch.proto
// Protobuf C++ Version: 5.29.4

#include "xion/feeabs/v1beta1/epoch.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xion {
namespace feeabs {
namespace v1beta1 {

inline constexpr ExponentialBackoff::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : jump_{::int64_t{0}},
        future_epoch_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ExponentialBackoff::ExponentialBackoff(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ExponentialBackoffDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExponentialBackoffDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExponentialBackoffDefaultTypeInternal() {}
  union {
    ExponentialBackoff _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExponentialBackoffDefaultTypeInternal _ExponentialBackoff_default_instance_;

inline constexpr EpochInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        identifier_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        start_time_{nullptr},
        duration_{nullptr},
        current_epoch_start_time_{nullptr},
        current_epoch_{::int64_t{0}},
        current_epoch_start_height_{::int64_t{0}},
        epoch_counting_started_{false} {}

template <typename>
PROTOBUF_CONSTEXPR EpochInfo::EpochInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EpochInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EpochInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EpochInfoDefaultTypeInternal() {}
  union {
    EpochInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EpochInfoDefaultTypeInternal _EpochInfo_default_instance_;
}  // namespace v1beta1
}  // namespace feeabs
}  // namespace xion
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_xion_2ffeeabs_2fv1beta1_2fepoch_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_xion_2ffeeabs_2fv1beta1_2fepoch_2eproto = nullptr;
const ::uint32_t
    TableStruct_xion_2ffeeabs_2fv1beta1_2fepoch_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::EpochInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::EpochInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::EpochInfo, _impl_.identifier_),
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::EpochInfo, _impl_.start_time_),
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::EpochInfo, _impl_.duration_),
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::EpochInfo, _impl_.current_epoch_),
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::EpochInfo, _impl_.current_epoch_start_time_),
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::EpochInfo, _impl_.epoch_counting_started_),
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::EpochInfo, _impl_.current_epoch_start_height_),
        ~0u,
        0,
        1,
        ~0u,
        2,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::ExponentialBackoff, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::ExponentialBackoff, _impl_.jump_),
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::ExponentialBackoff, _impl_.future_epoch_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 15, -1, sizeof(::xion::feeabs::v1beta1::EpochInfo)},
        {22, -1, -1, sizeof(::xion::feeabs::v1beta1::ExponentialBackoff)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::xion::feeabs::v1beta1::_EpochInfo_default_instance_._instance,
    &::xion::feeabs::v1beta1::_ExponentialBackoff_default_instance_._instance,
};
const char descriptor_table_protodef_xion_2ffeeabs_2fv1beta1_2fepoch_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\037xion/feeabs/v1beta1/epoch.proto\022\023xion."
    "feeabs.v1beta1\032\024gogoproto/gogo.proto\032\036go"
    "ogle/protobuf/duration.proto\032\037google/pro"
    "tobuf/timestamp.proto\"\220\004\n\tEpochInfo\022\036\n\ni"
    "dentifier\030\001 \001(\tR\nidentifier\022X\n\nstart_tim"
    "e\030\002 \001(\0132\032.google.protobuf.TimestampB\035\310\336\037"
    "\000\362\336\037\021yaml:\"start_time\"\220\337\037\001R\tstartTime\022h\n"
    "\010duration\030\003 \001(\0132\031.google.protobuf.Durati"
    "onB1\310\336\037\000\352\336\037\022duration,omitempty\362\336\037\017yaml:\""
    "duration\"\230\337\037\001R\010duration\022#\n\rcurrent_epoch"
    "\030\004 \001(\003R\014currentEpoch\022\200\001\n\030current_epoch_s"
    "tart_time\030\005 \001(\0132\032.google.protobuf.Timest"
    "ampB+\310\336\037\000\362\336\037\037yaml:\"current_epoch_start_t"
    "ime\"\220\337\037\001R\025currentEpochStartTime\0224\n\026epoch"
    "_counting_started\030\006 \001(\010R\024epochCountingSt"
    "arted\022;\n\032current_epoch_start_height\030\010 \001("
    "\003R\027currentEpochStartHeightJ\004\010\007\020\010\"K\n\022Expo"
    "nentialBackoff\022\022\n\004jump\030\001 \001(\003R\004jump\022!\n\014fu"
    "ture_epoch\030\002 \001(\003R\013futureEpochB+Z)github."
    "com/burnt-labs/xion/x/feeabs/typesb\006prot"
    "o3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_xion_2ffeeabs_2fv1beta1_2fepoch_2eproto_deps[3] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_xion_2ffeeabs_2fv1beta1_2fepoch_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_xion_2ffeeabs_2fv1beta1_2fepoch_2eproto = {
    false,
    false,
    802,
    descriptor_table_protodef_xion_2ffeeabs_2fv1beta1_2fepoch_2eproto,
    "xion/feeabs/v1beta1/epoch.proto",
    &descriptor_table_xion_2ffeeabs_2fv1beta1_2fepoch_2eproto_once,
    descriptor_table_xion_2ffeeabs_2fv1beta1_2fepoch_2eproto_deps,
    3,
    2,
    schemas,
    file_default_instances,
    TableStruct_xion_2ffeeabs_2fv1beta1_2fepoch_2eproto::offsets,
    file_level_enum_descriptors_xion_2ffeeabs_2fv1beta1_2fepoch_2eproto,
    file_level_service_descriptors_xion_2ffeeabs_2fv1beta1_2fepoch_2eproto,
};
namespace xion {
namespace feeabs {
namespace v1beta1 {
// ===================================================================

class EpochInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<EpochInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(EpochInfo, _impl_._has_bits_);
};

void EpochInfo::clear_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.start_time_ != nullptr) _impl_.start_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void EpochInfo::clear_duration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.duration_ != nullptr) _impl_.duration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void EpochInfo::clear_current_epoch_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.current_epoch_start_time_ != nullptr) _impl_.current_epoch_start_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
EpochInfo::EpochInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xion.feeabs.v1beta1.EpochInfo)
}
inline PROTOBUF_NDEBUG_INLINE EpochInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::xion::feeabs::v1beta1::EpochInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        identifier_(arena, from.identifier_) {}

EpochInfo::EpochInfo(
    ::google::protobuf::Arena* arena,
    const EpochInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  EpochInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.start_time_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.start_time_)
                        : nullptr;
  _impl_.duration_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(
                              arena, *from._impl_.duration_)
                        : nullptr;
  _impl_.current_epoch_start_time_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.current_epoch_start_time_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, current_epoch_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, current_epoch_),
           offsetof(Impl_, epoch_counting_started_) -
               offsetof(Impl_, current_epoch_) +
               sizeof(Impl_::epoch_counting_started_));

  // @@protoc_insertion_point(copy_constructor:xion.feeabs.v1beta1.EpochInfo)
}
inline PROTOBUF_NDEBUG_INLINE EpochInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        identifier_(arena) {}

inline void EpochInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_time_),
           0,
           offsetof(Impl_, epoch_counting_started_) -
               offsetof(Impl_, start_time_) +
               sizeof(Impl_::epoch_counting_started_));
}
EpochInfo::~EpochInfo() {
  // @@protoc_insertion_point(destructor:xion.feeabs.v1beta1.EpochInfo)
  SharedDtor(*this);
}
inline void EpochInfo::SharedDtor(MessageLite& self) {
  EpochInfo& this_ = static_cast<EpochInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.identifier_.Destroy();
  delete this_._impl_.start_time_;
  delete this_._impl_.duration_;
  delete this_._impl_.current_epoch_start_time_;
  this_._impl_.~Impl_();
}

inline void* EpochInfo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) EpochInfo(arena);
}
constexpr auto EpochInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(EpochInfo),
                                            alignof(EpochInfo));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull EpochInfo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_EpochInfo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &EpochInfo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<EpochInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &EpochInfo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<EpochInfo>(), &EpochInfo::ByteSizeLong,
            &EpochInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(EpochInfo, _impl_._cached_size_),
        false,
    },
    &EpochInfo::kDescriptorMethods,
    &descriptor_table_xion_2ffeeabs_2fv1beta1_2fepoch_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* EpochInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 3, 48, 2> EpochInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EpochInfo, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967104,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xion::feeabs::v1beta1::EpochInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int64 current_epoch_start_height = 8 [json_name = "currentEpochStartHeight"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(EpochInfo, _impl_.current_epoch_start_height_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(EpochInfo, _impl_.current_epoch_start_height_)}},
    // string identifier = 1 [json_name = "identifier"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(EpochInfo, _impl_.identifier_)}},
    // .google.protobuf.Timestamp start_time = 2 [json_name = "startTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"start_time\"", (.gogoproto.stdtime) = true];
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(EpochInfo, _impl_.start_time_)}},
    // .google.protobuf.Duration duration = 3 [json_name = "duration", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "duration,omitempty", (.gogoproto.moretags) = "yaml:\"duration\"", (.gogoproto.stdduration) = true];
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(EpochInfo, _impl_.duration_)}},
    // int64 current_epoch = 4 [json_name = "currentEpoch"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(EpochInfo, _impl_.current_epoch_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(EpochInfo, _impl_.current_epoch_)}},
    // .google.protobuf.Timestamp current_epoch_start_time = 5 [json_name = "currentEpochStartTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"current_epoch_start_time\"", (.gogoproto.stdtime) = true];
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 2, PROTOBUF_FIELD_OFFSET(EpochInfo, _impl_.current_epoch_start_time_)}},
    // bool epoch_counting_started = 6 [json_name = "epochCountingStarted"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(EpochInfo, _impl_.epoch_counting_started_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(EpochInfo, _impl_.epoch_counting_started_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string identifier = 1 [json_name = "identifier"];
    {PROTOBUF_FIELD_OFFSET(EpochInfo, _impl_.identifier_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp start_time = 2 [json_name = "startTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"start_time\"", (.gogoproto.stdtime) = true];
    {PROTOBUF_FIELD_OFFSET(EpochInfo, _impl_.start_time_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Duration duration = 3 [json_name = "duration", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "duration,omitempty", (.gogoproto.moretags) = "yaml:\"duration\"", (.gogoproto.stdduration) = true];
    {PROTOBUF_FIELD_OFFSET(EpochInfo, _impl_.duration_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 current_epoch = 4 [json_name = "currentEpoch"];
    {PROTOBUF_FIELD_OFFSET(EpochInfo, _impl_.current_epoch_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .google.protobuf.Timestamp current_epoch_start_time = 5 [json_name = "currentEpochStartTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"current_epoch_start_time\"", (.gogoproto.stdtime) = true];
    {PROTOBUF_FIELD_OFFSET(EpochInfo, _impl_.current_epoch_start_time_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool epoch_counting_started = 6 [json_name = "epochCountingStarted"];
    {PROTOBUF_FIELD_OFFSET(EpochInfo, _impl_.epoch_counting_started_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int64 current_epoch_start_height = 8 [json_name = "currentEpochStartHeight"];
    {PROTOBUF_FIELD_OFFSET(EpochInfo, _impl_.current_epoch_start_height_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\35\12\0\0\0\0\0\0"
    "xion.feeabs.v1beta1.EpochInfo"
    "identifier"
  }},
};

PROTOBUF_NOINLINE void EpochInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xion.feeabs.v1beta1.EpochInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.identifier_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.start_time_ != nullptr);
      _impl_.start_time_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.duration_ != nullptr);
      _impl_.duration_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.current_epoch_start_time_ != nullptr);
      _impl_.current_epoch_start_time_->Clear();
    }
  }
  ::memset(&_impl_.current_epoch_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.epoch_counting_started_) -
      reinterpret_cast<char*>(&_impl_.current_epoch_)) + sizeof(_impl_.epoch_counting_started_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* EpochInfo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const EpochInfo& this_ = static_cast<const EpochInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* EpochInfo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const EpochInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xion.feeabs.v1beta1.EpochInfo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string identifier = 1 [json_name = "identifier"];
          if (!this_._internal_identifier().empty()) {
            const std::string& _s = this_._internal_identifier();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xion.feeabs.v1beta1.EpochInfo.identifier");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp start_time = 2 [json_name = "startTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"start_time\"", (.gogoproto.stdtime) = true];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.start_time_, this_._impl_.start_time_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Duration duration = 3 [json_name = "duration", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "duration,omitempty", (.gogoproto.moretags) = "yaml:\"duration\"", (.gogoproto.stdduration) = true];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.duration_, this_._impl_.duration_->GetCachedSize(), target,
                stream);
          }

          // int64 current_epoch = 4 [json_name = "currentEpoch"];
          if (this_._internal_current_epoch() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<4>(
                    stream, this_._internal_current_epoch(), target);
          }

          // .google.protobuf.Timestamp current_epoch_start_time = 5 [json_name = "currentEpochStartTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"current_epoch_start_time\"", (.gogoproto.stdtime) = true];
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.current_epoch_start_time_, this_._impl_.current_epoch_start_time_->GetCachedSize(), target,
                stream);
          }

          // bool epoch_counting_started = 6 [json_name = "epochCountingStarted"];
          if (this_._internal_epoch_counting_started() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                6, this_._internal_epoch_counting_started(), target);
          }

          // int64 current_epoch_start_height = 8 [json_name = "currentEpochStartHeight"];
          if (this_._internal_current_epoch_start_height() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<8>(
                    stream, this_._internal_current_epoch_start_height(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xion.feeabs.v1beta1.EpochInfo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t EpochInfo::ByteSizeLong(const MessageLite& base) {
          const EpochInfo& this_ = static_cast<const EpochInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t EpochInfo::ByteSizeLong() const {
          const EpochInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xion.feeabs.v1beta1.EpochInfo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string identifier = 1 [json_name = "identifier"];
            if (!this_._internal_identifier().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_identifier());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .google.protobuf.Timestamp start_time = 2 [json_name = "startTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"start_time\"", (.gogoproto.stdtime) = true];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.start_time_);
            }
            // .google.protobuf.Duration duration = 3 [json_name = "duration", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "duration,omitempty", (.gogoproto.moretags) = "yaml:\"duration\"", (.gogoproto.stdduration) = true];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.duration_);
            }
            // .google.protobuf.Timestamp current_epoch_start_time = 5 [json_name = "currentEpochStartTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"current_epoch_start_time\"", (.gogoproto.stdtime) = true];
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.current_epoch_start_time_);
            }
          }
           {
            // int64 current_epoch = 4 [json_name = "currentEpoch"];
            if (this_._internal_current_epoch() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_current_epoch());
            }
            // int64 current_epoch_start_height = 8 [json_name = "currentEpochStartHeight"];
            if (this_._internal_current_epoch_start_height() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_current_epoch_start_height());
            }
            // bool epoch_counting_started = 6 [json_name = "epochCountingStarted"];
            if (this_._internal_epoch_counting_started() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void EpochInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EpochInfo*>(&to_msg);
  auto& from = static_cast<const EpochInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:xion.feeabs.v1beta1.EpochInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_identifier().empty()) {
    _this->_internal_set_identifier(from._internal_identifier());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.start_time_ != nullptr);
      if (_this->_impl_.start_time_ == nullptr) {
        _this->_impl_.start_time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.start_time_);
      } else {
        _this->_impl_.start_time_->MergeFrom(*from._impl_.start_time_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.duration_ != nullptr);
      if (_this->_impl_.duration_ == nullptr) {
        _this->_impl_.duration_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(arena, *from._impl_.duration_);
      } else {
        _this->_impl_.duration_->MergeFrom(*from._impl_.duration_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.current_epoch_start_time_ != nullptr);
      if (_this->_impl_.current_epoch_start_time_ == nullptr) {
        _this->_impl_.current_epoch_start_time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.current_epoch_start_time_);
      } else {
        _this->_impl_.current_epoch_start_time_->MergeFrom(*from._impl_.current_epoch_start_time_);
      }
    }
  }
  if (from._internal_current_epoch() != 0) {
    _this->_impl_.current_epoch_ = from._impl_.current_epoch_;
  }
  if (from._internal_current_epoch_start_height() != 0) {
    _this->_impl_.current_epoch_start_height_ = from._impl_.current_epoch_start_height_;
  }
  if (from._internal_epoch_counting_started() != 0) {
    _this->_impl_.epoch_counting_started_ = from._impl_.epoch_counting_started_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EpochInfo::CopyFrom(const EpochInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xion.feeabs.v1beta1.EpochInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EpochInfo::InternalSwap(EpochInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identifier_, &other->_impl_.identifier_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EpochInfo, _impl_.epoch_counting_started_)
      + sizeof(EpochInfo::_impl_.epoch_counting_started_)
      - PROTOBUF_FIELD_OFFSET(EpochInfo, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::google::protobuf::Metadata EpochInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ExponentialBackoff::_Internal {
 public:
};

ExponentialBackoff::ExponentialBackoff(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xion.feeabs.v1beta1.ExponentialBackoff)
}
ExponentialBackoff::ExponentialBackoff(
    ::google::protobuf::Arena* arena, const ExponentialBackoff& from)
    : ExponentialBackoff(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE ExponentialBackoff::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ExponentialBackoff::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, jump_),
           0,
           offsetof(Impl_, future_epoch_) -
               offsetof(Impl_, jump_) +
               sizeof(Impl_::future_epoch_));
}
ExponentialBackoff::~ExponentialBackoff() {
  // @@protoc_insertion_point(destructor:xion.feeabs.v1beta1.ExponentialBackoff)
  SharedDtor(*this);
}
inline void ExponentialBackoff::SharedDtor(MessageLite& self) {
  ExponentialBackoff& this_ = static_cast<ExponentialBackoff&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* ExponentialBackoff::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ExponentialBackoff(arena);
}
constexpr auto ExponentialBackoff::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ExponentialBackoff),
                                            alignof(ExponentialBackoff));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ExponentialBackoff::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ExponentialBackoff_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ExponentialBackoff::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ExponentialBackoff>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ExponentialBackoff::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ExponentialBackoff>(), &ExponentialBackoff::ByteSizeLong,
            &ExponentialBackoff::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ExponentialBackoff, _impl_._cached_size_),
        false,
    },
    &ExponentialBackoff::kDescriptorMethods,
    &descriptor_table_xion_2ffeeabs_2fv1beta1_2fepoch_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ExponentialBackoff::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> ExponentialBackoff::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xion::feeabs::v1beta1::ExponentialBackoff>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int64 future_epoch = 2 [json_name = "futureEpoch"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ExponentialBackoff, _impl_.future_epoch_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ExponentialBackoff, _impl_.future_epoch_)}},
    // int64 jump = 1 [json_name = "jump"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ExponentialBackoff, _impl_.jump_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ExponentialBackoff, _impl_.jump_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 jump = 1 [json_name = "jump"];
    {PROTOBUF_FIELD_OFFSET(ExponentialBackoff, _impl_.jump_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 future_epoch = 2 [json_name = "futureEpoch"];
    {PROTOBUF_FIELD_OFFSET(ExponentialBackoff, _impl_.future_epoch_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void ExponentialBackoff::Clear() {
// @@protoc_insertion_point(message_clear_start:xion.feeabs.v1beta1.ExponentialBackoff)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.jump_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.future_epoch_) -
      reinterpret_cast<char*>(&_impl_.jump_)) + sizeof(_impl_.future_epoch_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ExponentialBackoff::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ExponentialBackoff& this_ = static_cast<const ExponentialBackoff&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ExponentialBackoff::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ExponentialBackoff& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xion.feeabs.v1beta1.ExponentialBackoff)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int64 jump = 1 [json_name = "jump"];
          if (this_._internal_jump() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<1>(
                    stream, this_._internal_jump(), target);
          }

          // int64 future_epoch = 2 [json_name = "futureEpoch"];
          if (this_._internal_future_epoch() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<2>(
                    stream, this_._internal_future_epoch(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xion.feeabs.v1beta1.ExponentialBackoff)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ExponentialBackoff::ByteSizeLong(const MessageLite& base) {
          const ExponentialBackoff& this_ = static_cast<const ExponentialBackoff&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ExponentialBackoff::ByteSizeLong() const {
          const ExponentialBackoff& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xion.feeabs.v1beta1.ExponentialBackoff)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // int64 jump = 1 [json_name = "jump"];
            if (this_._internal_jump() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_jump());
            }
            // int64 future_epoch = 2 [json_name = "futureEpoch"];
            if (this_._internal_future_epoch() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_future_epoch());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ExponentialBackoff::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ExponentialBackoff*>(&to_msg);
  auto& from = static_cast<const ExponentialBackoff&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xion.feeabs.v1beta1.ExponentialBackoff)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_jump() != 0) {
    _this->_impl_.jump_ = from._impl_.jump_;
  }
  if (from._internal_future_epoch() != 0) {
    _this->_impl_.future_epoch_ = from._impl_.future_epoch_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ExponentialBackoff::CopyFrom(const ExponentialBackoff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xion.feeabs.v1beta1.ExponentialBackoff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ExponentialBackoff::InternalSwap(ExponentialBackoff* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExponentialBackoff, _impl_.future_epoch_)
      + sizeof(ExponentialBackoff::_impl_.future_epoch_)
      - PROTOBUF_FIELD_OFFSET(ExponentialBackoff, _impl_.jump_)>(
          reinterpret_cast<char*>(&_impl_.jump_),
          reinterpret_cast<char*>(&other->_impl_.jump_));
}

::google::protobuf::Metadata ExponentialBackoff::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace feeabs
}  // namespace xion
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_xion_2ffeeabs_2fv1beta1_2fepoch_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
