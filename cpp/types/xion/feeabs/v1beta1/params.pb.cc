// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: xion/feeabs/v1beta1/params.proto
// Protobuf C++ Version: 5.29.4

#include "xion/feeabs/v1beta1/params.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xion {
namespace feeabs {
namespace v1beta1 {

inline constexpr Params::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : native_ibced_in_osmosis_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        osmosis_query_twap_path_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        chain_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ibc_transfer_channel_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ibc_query_icq_channel_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        osmosis_crosschain_swap_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Params::Params(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParamsDefaultTypeInternal() {}
  union {
    Params _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParamsDefaultTypeInternal _Params_default_instance_;
}  // namespace v1beta1
}  // namespace feeabs
}  // namespace xion
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_xion_2ffeeabs_2fv1beta1_2fparams_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_xion_2ffeeabs_2fv1beta1_2fparams_2eproto = nullptr;
const ::uint32_t
    TableStruct_xion_2ffeeabs_2fv1beta1_2fparams_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::Params, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::Params, _impl_.native_ibced_in_osmosis_),
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::Params, _impl_.osmosis_query_twap_path_),
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::Params, _impl_.chain_name_),
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::Params, _impl_.ibc_transfer_channel_),
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::Params, _impl_.ibc_query_icq_channel_),
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::Params, _impl_.osmosis_crosschain_swap_address_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::xion::feeabs::v1beta1::Params)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::xion::feeabs::v1beta1::_Params_default_instance_._instance,
};
const char descriptor_table_protodef_xion_2ffeeabs_2fv1beta1_2fparams_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n xion/feeabs/v1beta1/params.proto\022\023xion"
    ".feeabs.v1beta1\"\301\002\n\006Params\0225\n\027native_ibc"
    "ed_in_osmosis\030\001 \001(\tR\024nativeIbcedInOsmosi"
    "s\0225\n\027osmosis_query_twap_path\030\002 \001(\tR\024osmo"
    "sisQueryTwapPath\022\035\n\nchain_name\030\003 \001(\tR\tch"
    "ainName\0220\n\024ibc_transfer_channel\030\004 \001(\tR\022i"
    "bcTransferChannel\0221\n\025ibc_query_icq_chann"
    "el\030\005 \001(\tR\022ibcQueryIcqChannel\022E\n\037osmosis_"
    "crosschain_swap_address\030\006 \001(\tR\034osmosisCr"
    "osschainSwapAddressB+Z)github.com/burnt-"
    "labs/xion/x/feeabs/typesb\006proto3"
};
static ::absl::once_flag descriptor_table_xion_2ffeeabs_2fv1beta1_2fparams_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_xion_2ffeeabs_2fv1beta1_2fparams_2eproto = {
    false,
    false,
    432,
    descriptor_table_protodef_xion_2ffeeabs_2fv1beta1_2fparams_2eproto,
    "xion/feeabs/v1beta1/params.proto",
    &descriptor_table_xion_2ffeeabs_2fv1beta1_2fparams_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_xion_2ffeeabs_2fv1beta1_2fparams_2eproto::offsets,
    file_level_enum_descriptors_xion_2ffeeabs_2fv1beta1_2fparams_2eproto,
    file_level_service_descriptors_xion_2ffeeabs_2fv1beta1_2fparams_2eproto,
};
namespace xion {
namespace feeabs {
namespace v1beta1 {
// ===================================================================

class Params::_Internal {
 public:
};

Params::Params(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xion.feeabs.v1beta1.Params)
}
inline PROTOBUF_NDEBUG_INLINE Params::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::xion::feeabs::v1beta1::Params& from_msg)
      : native_ibced_in_osmosis_(arena, from.native_ibced_in_osmosis_),
        osmosis_query_twap_path_(arena, from.osmosis_query_twap_path_),
        chain_name_(arena, from.chain_name_),
        ibc_transfer_channel_(arena, from.ibc_transfer_channel_),
        ibc_query_icq_channel_(arena, from.ibc_query_icq_channel_),
        osmosis_crosschain_swap_address_(arena, from.osmosis_crosschain_swap_address_),
        _cached_size_{0} {}

Params::Params(
    ::google::protobuf::Arena* arena,
    const Params& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Params* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:xion.feeabs.v1beta1.Params)
}
inline PROTOBUF_NDEBUG_INLINE Params::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : native_ibced_in_osmosis_(arena),
        osmosis_query_twap_path_(arena),
        chain_name_(arena),
        ibc_transfer_channel_(arena),
        ibc_query_icq_channel_(arena),
        osmosis_crosschain_swap_address_(arena),
        _cached_size_{0} {}

inline void Params::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Params::~Params() {
  // @@protoc_insertion_point(destructor:xion.feeabs.v1beta1.Params)
  SharedDtor(*this);
}
inline void Params::SharedDtor(MessageLite& self) {
  Params& this_ = static_cast<Params&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.native_ibced_in_osmosis_.Destroy();
  this_._impl_.osmosis_query_twap_path_.Destroy();
  this_._impl_.chain_name_.Destroy();
  this_._impl_.ibc_transfer_channel_.Destroy();
  this_._impl_.ibc_query_icq_channel_.Destroy();
  this_._impl_.osmosis_crosschain_swap_address_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Params::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Params(arena);
}
constexpr auto Params::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Params),
                                            alignof(Params));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Params::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Params_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Params::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Params>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Params::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Params>(), &Params::ByteSizeLong,
            &Params::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Params, _impl_._cached_size_),
        false,
    },
    &Params::kDescriptorMethods,
    &descriptor_table_xion_2ffeeabs_2fv1beta1_2fparams_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Params::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 163, 2> Params::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xion::feeabs::v1beta1::Params>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string native_ibced_in_osmosis = 1 [json_name = "nativeIbcedInOsmosis"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Params, _impl_.native_ibced_in_osmosis_)}},
    // string osmosis_query_twap_path = 2 [json_name = "osmosisQueryTwapPath"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Params, _impl_.osmosis_query_twap_path_)}},
    // string chain_name = 3 [json_name = "chainName"];
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Params, _impl_.chain_name_)}},
    // string ibc_transfer_channel = 4 [json_name = "ibcTransferChannel"];
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Params, _impl_.ibc_transfer_channel_)}},
    // string ibc_query_icq_channel = 5 [json_name = "ibcQueryIcqChannel"];
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Params, _impl_.ibc_query_icq_channel_)}},
    // string osmosis_crosschain_swap_address = 6 [json_name = "osmosisCrosschainSwapAddress"];
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Params, _impl_.osmosis_crosschain_swap_address_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string native_ibced_in_osmosis = 1 [json_name = "nativeIbcedInOsmosis"];
    {PROTOBUF_FIELD_OFFSET(Params, _impl_.native_ibced_in_osmosis_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string osmosis_query_twap_path = 2 [json_name = "osmosisQueryTwapPath"];
    {PROTOBUF_FIELD_OFFSET(Params, _impl_.osmosis_query_twap_path_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string chain_name = 3 [json_name = "chainName"];
    {PROTOBUF_FIELD_OFFSET(Params, _impl_.chain_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ibc_transfer_channel = 4 [json_name = "ibcTransferChannel"];
    {PROTOBUF_FIELD_OFFSET(Params, _impl_.ibc_transfer_channel_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ibc_query_icq_channel = 5 [json_name = "ibcQueryIcqChannel"];
    {PROTOBUF_FIELD_OFFSET(Params, _impl_.ibc_query_icq_channel_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string osmosis_crosschain_swap_address = 6 [json_name = "osmosisCrosschainSwapAddress"];
    {PROTOBUF_FIELD_OFFSET(Params, _impl_.osmosis_crosschain_swap_address_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\32\27\27\12\24\25\37\0"
    "xion.feeabs.v1beta1.Params"
    "native_ibced_in_osmosis"
    "osmosis_query_twap_path"
    "chain_name"
    "ibc_transfer_channel"
    "ibc_query_icq_channel"
    "osmosis_crosschain_swap_address"
  }},
};

PROTOBUF_NOINLINE void Params::Clear() {
// @@protoc_insertion_point(message_clear_start:xion.feeabs.v1beta1.Params)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.native_ibced_in_osmosis_.ClearToEmpty();
  _impl_.osmosis_query_twap_path_.ClearToEmpty();
  _impl_.chain_name_.ClearToEmpty();
  _impl_.ibc_transfer_channel_.ClearToEmpty();
  _impl_.ibc_query_icq_channel_.ClearToEmpty();
  _impl_.osmosis_crosschain_swap_address_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Params::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Params& this_ = static_cast<const Params&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Params::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Params& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xion.feeabs.v1beta1.Params)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string native_ibced_in_osmosis = 1 [json_name = "nativeIbcedInOsmosis"];
          if (!this_._internal_native_ibced_in_osmosis().empty()) {
            const std::string& _s = this_._internal_native_ibced_in_osmosis();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xion.feeabs.v1beta1.Params.native_ibced_in_osmosis");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string osmosis_query_twap_path = 2 [json_name = "osmosisQueryTwapPath"];
          if (!this_._internal_osmosis_query_twap_path().empty()) {
            const std::string& _s = this_._internal_osmosis_query_twap_path();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xion.feeabs.v1beta1.Params.osmosis_query_twap_path");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string chain_name = 3 [json_name = "chainName"];
          if (!this_._internal_chain_name().empty()) {
            const std::string& _s = this_._internal_chain_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xion.feeabs.v1beta1.Params.chain_name");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string ibc_transfer_channel = 4 [json_name = "ibcTransferChannel"];
          if (!this_._internal_ibc_transfer_channel().empty()) {
            const std::string& _s = this_._internal_ibc_transfer_channel();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xion.feeabs.v1beta1.Params.ibc_transfer_channel");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string ibc_query_icq_channel = 5 [json_name = "ibcQueryIcqChannel"];
          if (!this_._internal_ibc_query_icq_channel().empty()) {
            const std::string& _s = this_._internal_ibc_query_icq_channel();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xion.feeabs.v1beta1.Params.ibc_query_icq_channel");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // string osmosis_crosschain_swap_address = 6 [json_name = "osmosisCrosschainSwapAddress"];
          if (!this_._internal_osmosis_crosschain_swap_address().empty()) {
            const std::string& _s = this_._internal_osmosis_crosschain_swap_address();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xion.feeabs.v1beta1.Params.osmosis_crosschain_swap_address");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xion.feeabs.v1beta1.Params)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Params::ByteSizeLong(const MessageLite& base) {
          const Params& this_ = static_cast<const Params&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Params::ByteSizeLong() const {
          const Params& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xion.feeabs.v1beta1.Params)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string native_ibced_in_osmosis = 1 [json_name = "nativeIbcedInOsmosis"];
            if (!this_._internal_native_ibced_in_osmosis().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_native_ibced_in_osmosis());
            }
            // string osmosis_query_twap_path = 2 [json_name = "osmosisQueryTwapPath"];
            if (!this_._internal_osmosis_query_twap_path().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_osmosis_query_twap_path());
            }
            // string chain_name = 3 [json_name = "chainName"];
            if (!this_._internal_chain_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_chain_name());
            }
            // string ibc_transfer_channel = 4 [json_name = "ibcTransferChannel"];
            if (!this_._internal_ibc_transfer_channel().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ibc_transfer_channel());
            }
            // string ibc_query_icq_channel = 5 [json_name = "ibcQueryIcqChannel"];
            if (!this_._internal_ibc_query_icq_channel().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ibc_query_icq_channel());
            }
            // string osmosis_crosschain_swap_address = 6 [json_name = "osmosisCrosschainSwapAddress"];
            if (!this_._internal_osmosis_crosschain_swap_address().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_osmosis_crosschain_swap_address());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Params::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Params*>(&to_msg);
  auto& from = static_cast<const Params&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xion.feeabs.v1beta1.Params)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_native_ibced_in_osmosis().empty()) {
    _this->_internal_set_native_ibced_in_osmosis(from._internal_native_ibced_in_osmosis());
  }
  if (!from._internal_osmosis_query_twap_path().empty()) {
    _this->_internal_set_osmosis_query_twap_path(from._internal_osmosis_query_twap_path());
  }
  if (!from._internal_chain_name().empty()) {
    _this->_internal_set_chain_name(from._internal_chain_name());
  }
  if (!from._internal_ibc_transfer_channel().empty()) {
    _this->_internal_set_ibc_transfer_channel(from._internal_ibc_transfer_channel());
  }
  if (!from._internal_ibc_query_icq_channel().empty()) {
    _this->_internal_set_ibc_query_icq_channel(from._internal_ibc_query_icq_channel());
  }
  if (!from._internal_osmosis_crosschain_swap_address().empty()) {
    _this->_internal_set_osmosis_crosschain_swap_address(from._internal_osmosis_crosschain_swap_address());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Params::CopyFrom(const Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xion.feeabs.v1beta1.Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Params::InternalSwap(Params* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.native_ibced_in_osmosis_, &other->_impl_.native_ibced_in_osmosis_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.osmosis_query_twap_path_, &other->_impl_.osmosis_query_twap_path_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.chain_name_, &other->_impl_.chain_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ibc_transfer_channel_, &other->_impl_.ibc_transfer_channel_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ibc_query_icq_channel_, &other->_impl_.ibc_query_icq_channel_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.osmosis_crosschain_swap_address_, &other->_impl_.osmosis_crosschain_swap_address_, arena);
}

::google::protobuf::Metadata Params::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace feeabs
}  // namespace xion
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_xion_2ffeeabs_2fv1beta1_2fparams_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
