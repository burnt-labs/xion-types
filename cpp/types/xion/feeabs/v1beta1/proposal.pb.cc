// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: xion/feeabs/v1beta1/proposal.proto
// Protobuf C++ Version: 5.29.4

#include "xion/feeabs/v1beta1/proposal.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xion {
namespace feeabs {
namespace v1beta1 {

inline constexpr HostChainFeeAbsConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : ibc_denom_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        osmosis_pool_token_denom_in_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        pool_id_{::uint64_t{0u}},
        status_{static_cast< ::xion::feeabs::v1beta1::HostChainFeeAbsStatus >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HostChainFeeAbsConfig::HostChainFeeAbsConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HostChainFeeAbsConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HostChainFeeAbsConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HostChainFeeAbsConfigDefaultTypeInternal() {}
  union {
    HostChainFeeAbsConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HostChainFeeAbsConfigDefaultTypeInternal _HostChainFeeAbsConfig_default_instance_;

inline constexpr DeleteHostZoneProposal::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : title_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ibc_denom_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DeleteHostZoneProposal::DeleteHostZoneProposal(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DeleteHostZoneProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteHostZoneProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteHostZoneProposalDefaultTypeInternal() {}
  union {
    DeleteHostZoneProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteHostZoneProposalDefaultTypeInternal _DeleteHostZoneProposal_default_instance_;

inline constexpr SetHostZoneProposal::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        title_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        host_chain_config_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetHostZoneProposal::SetHostZoneProposal(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SetHostZoneProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetHostZoneProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetHostZoneProposalDefaultTypeInternal() {}
  union {
    SetHostZoneProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetHostZoneProposalDefaultTypeInternal _SetHostZoneProposal_default_instance_;

inline constexpr AddHostZoneProposal::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        title_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        host_chain_config_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AddHostZoneProposal::AddHostZoneProposal(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AddHostZoneProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddHostZoneProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddHostZoneProposalDefaultTypeInternal() {}
  union {
    AddHostZoneProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddHostZoneProposalDefaultTypeInternal _AddHostZoneProposal_default_instance_;
}  // namespace v1beta1
}  // namespace feeabs
}  // namespace xion
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_xion_2ffeeabs_2fv1beta1_2fproposal_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_xion_2ffeeabs_2fv1beta1_2fproposal_2eproto = nullptr;
const ::uint32_t
    TableStruct_xion_2ffeeabs_2fv1beta1_2fproposal_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::HostChainFeeAbsConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::HostChainFeeAbsConfig, _impl_.ibc_denom_),
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::HostChainFeeAbsConfig, _impl_.osmosis_pool_token_denom_in_),
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::HostChainFeeAbsConfig, _impl_.pool_id_),
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::HostChainFeeAbsConfig, _impl_.status_),
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::AddHostZoneProposal, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::AddHostZoneProposal, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::AddHostZoneProposal, _impl_.title_),
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::AddHostZoneProposal, _impl_.description_),
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::AddHostZoneProposal, _impl_.host_chain_config_),
        ~0u,
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::DeleteHostZoneProposal, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::DeleteHostZoneProposal, _impl_.title_),
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::DeleteHostZoneProposal, _impl_.description_),
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::DeleteHostZoneProposal, _impl_.ibc_denom_),
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::SetHostZoneProposal, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::SetHostZoneProposal, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::SetHostZoneProposal, _impl_.title_),
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::SetHostZoneProposal, _impl_.description_),
        PROTOBUF_FIELD_OFFSET(::xion::feeabs::v1beta1::SetHostZoneProposal, _impl_.host_chain_config_),
        ~0u,
        ~0u,
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::xion::feeabs::v1beta1::HostChainFeeAbsConfig)},
        {12, 23, -1, sizeof(::xion::feeabs::v1beta1::AddHostZoneProposal)},
        {26, -1, -1, sizeof(::xion::feeabs::v1beta1::DeleteHostZoneProposal)},
        {37, 48, -1, sizeof(::xion::feeabs::v1beta1::SetHostZoneProposal)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::xion::feeabs::v1beta1::_HostChainFeeAbsConfig_default_instance_._instance,
    &::xion::feeabs::v1beta1::_AddHostZoneProposal_default_instance_._instance,
    &::xion::feeabs::v1beta1::_DeleteHostZoneProposal_default_instance_._instance,
    &::xion::feeabs::v1beta1::_SetHostZoneProposal_default_instance_._instance,
};
const char descriptor_table_protodef_xion_2ffeeabs_2fv1beta1_2fproposal_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\"xion/feeabs/v1beta1/proposal.proto\022\023xi"
    "on.feeabs.v1beta1\032\024gogoproto/gogo.proto\""
    "\351\001\n\025HostChainFeeAbsConfig\0225\n\tibc_denom\030\001"
    " \001(\tB\030\362\336\037\024yaml:\"allowed_token\"R\010ibcDenom"
    "\022<\n\033osmosis_pool_token_denom_in\030\002 \001(\tR\027o"
    "smosisPoolTokenDenomIn\022\027\n\007pool_id\030\003 \001(\004R"
    "\006poolId\022B\n\006status\030\004 \001(\0162*.xion.feeabs.v1"
    "beta1.HostChainFeeAbsStatusR\006status\"\253\001\n\023"
    "AddHostZoneProposal\022\024\n\005title\030\001 \001(\tR\005titl"
    "e\022 \n\013description\030\002 \001(\tR\013description\022V\n\021h"
    "ost_chain_config\030\003 \001(\0132*.xion.feeabs.v1b"
    "eta1.HostChainFeeAbsConfigR\017hostChainCon"
    "fig:\004\210\240\037\000\"s\n\026DeleteHostZoneProposal\022\024\n\005t"
    "itle\030\001 \001(\tR\005title\022 \n\013description\030\002 \001(\tR\013"
    "description\022\033\n\tibc_denom\030\003 \001(\tR\010ibcDenom"
    ":\004\210\240\037\000\"\253\001\n\023SetHostZoneProposal\022\024\n\005title\030"
    "\001 \001(\tR\005title\022 \n\013description\030\002 \001(\tR\013descr"
    "iption\022V\n\021host_chain_config\030\003 \001(\0132*.xion"
    ".feeabs.v1beta1.HostChainFeeAbsConfigR\017h"
    "ostChainConfig:\004\210\240\037\000*>\n\025HostChainFeeAbsS"
    "tatus\022\013\n\007UPDATED\020\000\022\014\n\010OUTDATED\020\001\022\n\n\006FROZ"
    "EN\020\002B+Z)github.com/burnt-labs/xion/x/fee"
    "abs/typesb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_xion_2ffeeabs_2fv1beta1_2fproposal_2eproto_deps[1] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_xion_2ffeeabs_2fv1beta1_2fproposal_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_xion_2ffeeabs_2fv1beta1_2fproposal_2eproto = {
    false,
    false,
    897,
    descriptor_table_protodef_xion_2ffeeabs_2fv1beta1_2fproposal_2eproto,
    "xion/feeabs/v1beta1/proposal.proto",
    &descriptor_table_xion_2ffeeabs_2fv1beta1_2fproposal_2eproto_once,
    descriptor_table_xion_2ffeeabs_2fv1beta1_2fproposal_2eproto_deps,
    1,
    4,
    schemas,
    file_default_instances,
    TableStruct_xion_2ffeeabs_2fv1beta1_2fproposal_2eproto::offsets,
    file_level_enum_descriptors_xion_2ffeeabs_2fv1beta1_2fproposal_2eproto,
    file_level_service_descriptors_xion_2ffeeabs_2fv1beta1_2fproposal_2eproto,
};
namespace xion {
namespace feeabs {
namespace v1beta1 {
const ::google::protobuf::EnumDescriptor* HostChainFeeAbsStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_xion_2ffeeabs_2fv1beta1_2fproposal_2eproto);
  return file_level_enum_descriptors_xion_2ffeeabs_2fv1beta1_2fproposal_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t HostChainFeeAbsStatus_internal_data_[] = {
    196608u, 0u, };
bool HostChainFeeAbsStatus_IsValid(int value) {
  return 0 <= value && value <= 2;
}
// ===================================================================

class HostChainFeeAbsConfig::_Internal {
 public:
};

HostChainFeeAbsConfig::HostChainFeeAbsConfig(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xion.feeabs.v1beta1.HostChainFeeAbsConfig)
}
inline PROTOBUF_NDEBUG_INLINE HostChainFeeAbsConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::xion::feeabs::v1beta1::HostChainFeeAbsConfig& from_msg)
      : ibc_denom_(arena, from.ibc_denom_),
        osmosis_pool_token_denom_in_(arena, from.osmosis_pool_token_denom_in_),
        _cached_size_{0} {}

HostChainFeeAbsConfig::HostChainFeeAbsConfig(
    ::google::protobuf::Arena* arena,
    const HostChainFeeAbsConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HostChainFeeAbsConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pool_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, pool_id_),
           offsetof(Impl_, status_) -
               offsetof(Impl_, pool_id_) +
               sizeof(Impl_::status_));

  // @@protoc_insertion_point(copy_constructor:xion.feeabs.v1beta1.HostChainFeeAbsConfig)
}
inline PROTOBUF_NDEBUG_INLINE HostChainFeeAbsConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : ibc_denom_(arena),
        osmosis_pool_token_denom_in_(arena),
        _cached_size_{0} {}

inline void HostChainFeeAbsConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pool_id_),
           0,
           offsetof(Impl_, status_) -
               offsetof(Impl_, pool_id_) +
               sizeof(Impl_::status_));
}
HostChainFeeAbsConfig::~HostChainFeeAbsConfig() {
  // @@protoc_insertion_point(destructor:xion.feeabs.v1beta1.HostChainFeeAbsConfig)
  SharedDtor(*this);
}
inline void HostChainFeeAbsConfig::SharedDtor(MessageLite& self) {
  HostChainFeeAbsConfig& this_ = static_cast<HostChainFeeAbsConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.ibc_denom_.Destroy();
  this_._impl_.osmosis_pool_token_denom_in_.Destroy();
  this_._impl_.~Impl_();
}

inline void* HostChainFeeAbsConfig::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) HostChainFeeAbsConfig(arena);
}
constexpr auto HostChainFeeAbsConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(HostChainFeeAbsConfig),
                                            alignof(HostChainFeeAbsConfig));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull HostChainFeeAbsConfig::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_HostChainFeeAbsConfig_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &HostChainFeeAbsConfig::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<HostChainFeeAbsConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &HostChainFeeAbsConfig::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<HostChainFeeAbsConfig>(), &HostChainFeeAbsConfig::ByteSizeLong,
            &HostChainFeeAbsConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(HostChainFeeAbsConfig, _impl_._cached_size_),
        false,
    },
    &HostChainFeeAbsConfig::kDescriptorMethods,
    &descriptor_table_xion_2ffeeabs_2fv1beta1_2fproposal_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* HostChainFeeAbsConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 86, 2> HostChainFeeAbsConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xion::feeabs::v1beta1::HostChainFeeAbsConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .xion.feeabs.v1beta1.HostChainFeeAbsStatus status = 4 [json_name = "status"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HostChainFeeAbsConfig, _impl_.status_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(HostChainFeeAbsConfig, _impl_.status_)}},
    // string ibc_denom = 1 [json_name = "ibcDenom", (.gogoproto.moretags) = "yaml:\"allowed_token\""];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(HostChainFeeAbsConfig, _impl_.ibc_denom_)}},
    // string osmosis_pool_token_denom_in = 2 [json_name = "osmosisPoolTokenDenomIn"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(HostChainFeeAbsConfig, _impl_.osmosis_pool_token_denom_in_)}},
    // uint64 pool_id = 3 [json_name = "poolId"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(HostChainFeeAbsConfig, _impl_.pool_id_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(HostChainFeeAbsConfig, _impl_.pool_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string ibc_denom = 1 [json_name = "ibcDenom", (.gogoproto.moretags) = "yaml:\"allowed_token\""];
    {PROTOBUF_FIELD_OFFSET(HostChainFeeAbsConfig, _impl_.ibc_denom_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string osmosis_pool_token_denom_in = 2 [json_name = "osmosisPoolTokenDenomIn"];
    {PROTOBUF_FIELD_OFFSET(HostChainFeeAbsConfig, _impl_.osmosis_pool_token_denom_in_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint64 pool_id = 3 [json_name = "poolId"];
    {PROTOBUF_FIELD_OFFSET(HostChainFeeAbsConfig, _impl_.pool_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // .xion.feeabs.v1beta1.HostChainFeeAbsStatus status = 4 [json_name = "status"];
    {PROTOBUF_FIELD_OFFSET(HostChainFeeAbsConfig, _impl_.status_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\51\11\33\0\0\0\0\0"
    "xion.feeabs.v1beta1.HostChainFeeAbsConfig"
    "ibc_denom"
    "osmosis_pool_token_denom_in"
  }},
};

PROTOBUF_NOINLINE void HostChainFeeAbsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xion.feeabs.v1beta1.HostChainFeeAbsConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ibc_denom_.ClearToEmpty();
  _impl_.osmosis_pool_token_denom_in_.ClearToEmpty();
  ::memset(&_impl_.pool_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.pool_id_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* HostChainFeeAbsConfig::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const HostChainFeeAbsConfig& this_ = static_cast<const HostChainFeeAbsConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* HostChainFeeAbsConfig::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const HostChainFeeAbsConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xion.feeabs.v1beta1.HostChainFeeAbsConfig)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string ibc_denom = 1 [json_name = "ibcDenom", (.gogoproto.moretags) = "yaml:\"allowed_token\""];
          if (!this_._internal_ibc_denom().empty()) {
            const std::string& _s = this_._internal_ibc_denom();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xion.feeabs.v1beta1.HostChainFeeAbsConfig.ibc_denom");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string osmosis_pool_token_denom_in = 2 [json_name = "osmosisPoolTokenDenomIn"];
          if (!this_._internal_osmosis_pool_token_denom_in().empty()) {
            const std::string& _s = this_._internal_osmosis_pool_token_denom_in();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xion.feeabs.v1beta1.HostChainFeeAbsConfig.osmosis_pool_token_denom_in");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // uint64 pool_id = 3 [json_name = "poolId"];
          if (this_._internal_pool_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                3, this_._internal_pool_id(), target);
          }

          // .xion.feeabs.v1beta1.HostChainFeeAbsStatus status = 4 [json_name = "status"];
          if (this_._internal_status() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                4, this_._internal_status(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xion.feeabs.v1beta1.HostChainFeeAbsConfig)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t HostChainFeeAbsConfig::ByteSizeLong(const MessageLite& base) {
          const HostChainFeeAbsConfig& this_ = static_cast<const HostChainFeeAbsConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t HostChainFeeAbsConfig::ByteSizeLong() const {
          const HostChainFeeAbsConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xion.feeabs.v1beta1.HostChainFeeAbsConfig)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string ibc_denom = 1 [json_name = "ibcDenom", (.gogoproto.moretags) = "yaml:\"allowed_token\""];
            if (!this_._internal_ibc_denom().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ibc_denom());
            }
            // string osmosis_pool_token_denom_in = 2 [json_name = "osmosisPoolTokenDenomIn"];
            if (!this_._internal_osmosis_pool_token_denom_in().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_osmosis_pool_token_denom_in());
            }
            // uint64 pool_id = 3 [json_name = "poolId"];
            if (this_._internal_pool_id() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_pool_id());
            }
            // .xion.feeabs.v1beta1.HostChainFeeAbsStatus status = 4 [json_name = "status"];
            if (this_._internal_status() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_status());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void HostChainFeeAbsConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HostChainFeeAbsConfig*>(&to_msg);
  auto& from = static_cast<const HostChainFeeAbsConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xion.feeabs.v1beta1.HostChainFeeAbsConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ibc_denom().empty()) {
    _this->_internal_set_ibc_denom(from._internal_ibc_denom());
  }
  if (!from._internal_osmosis_pool_token_denom_in().empty()) {
    _this->_internal_set_osmosis_pool_token_denom_in(from._internal_osmosis_pool_token_denom_in());
  }
  if (from._internal_pool_id() != 0) {
    _this->_impl_.pool_id_ = from._impl_.pool_id_;
  }
  if (from._internal_status() != 0) {
    _this->_impl_.status_ = from._impl_.status_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HostChainFeeAbsConfig::CopyFrom(const HostChainFeeAbsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xion.feeabs.v1beta1.HostChainFeeAbsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HostChainFeeAbsConfig::InternalSwap(HostChainFeeAbsConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ibc_denom_, &other->_impl_.ibc_denom_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.osmosis_pool_token_denom_in_, &other->_impl_.osmosis_pool_token_denom_in_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HostChainFeeAbsConfig, _impl_.status_)
      + sizeof(HostChainFeeAbsConfig::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(HostChainFeeAbsConfig, _impl_.pool_id_)>(
          reinterpret_cast<char*>(&_impl_.pool_id_),
          reinterpret_cast<char*>(&other->_impl_.pool_id_));
}

::google::protobuf::Metadata HostChainFeeAbsConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AddHostZoneProposal::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AddHostZoneProposal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AddHostZoneProposal, _impl_._has_bits_);
};

AddHostZoneProposal::AddHostZoneProposal(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xion.feeabs.v1beta1.AddHostZoneProposal)
}
inline PROTOBUF_NDEBUG_INLINE AddHostZoneProposal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::xion::feeabs::v1beta1::AddHostZoneProposal& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        title_(arena, from.title_),
        description_(arena, from.description_) {}

AddHostZoneProposal::AddHostZoneProposal(
    ::google::protobuf::Arena* arena,
    const AddHostZoneProposal& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AddHostZoneProposal* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.host_chain_config_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::xion::feeabs::v1beta1::HostChainFeeAbsConfig>(
                              arena, *from._impl_.host_chain_config_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:xion.feeabs.v1beta1.AddHostZoneProposal)
}
inline PROTOBUF_NDEBUG_INLINE AddHostZoneProposal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        title_(arena),
        description_(arena) {}

inline void AddHostZoneProposal::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.host_chain_config_ = {};
}
AddHostZoneProposal::~AddHostZoneProposal() {
  // @@protoc_insertion_point(destructor:xion.feeabs.v1beta1.AddHostZoneProposal)
  SharedDtor(*this);
}
inline void AddHostZoneProposal::SharedDtor(MessageLite& self) {
  AddHostZoneProposal& this_ = static_cast<AddHostZoneProposal&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.title_.Destroy();
  this_._impl_.description_.Destroy();
  delete this_._impl_.host_chain_config_;
  this_._impl_.~Impl_();
}

inline void* AddHostZoneProposal::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AddHostZoneProposal(arena);
}
constexpr auto AddHostZoneProposal::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AddHostZoneProposal),
                                            alignof(AddHostZoneProposal));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AddHostZoneProposal::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AddHostZoneProposal_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AddHostZoneProposal::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AddHostZoneProposal>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AddHostZoneProposal::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AddHostZoneProposal>(), &AddHostZoneProposal::ByteSizeLong,
            &AddHostZoneProposal::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AddHostZoneProposal, _impl_._cached_size_),
        false,
    },
    &AddHostZoneProposal::kDescriptorMethods,
    &descriptor_table_xion_2ffeeabs_2fv1beta1_2fproposal_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AddHostZoneProposal::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 64, 2> AddHostZoneProposal::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AddHostZoneProposal, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xion::feeabs::v1beta1::AddHostZoneProposal>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string title = 1 [json_name = "title"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AddHostZoneProposal, _impl_.title_)}},
    // string description = 2 [json_name = "description"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AddHostZoneProposal, _impl_.description_)}},
    // .xion.feeabs.v1beta1.HostChainFeeAbsConfig host_chain_config = 3 [json_name = "hostChainConfig"];
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(AddHostZoneProposal, _impl_.host_chain_config_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string title = 1 [json_name = "title"];
    {PROTOBUF_FIELD_OFFSET(AddHostZoneProposal, _impl_.title_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string description = 2 [json_name = "description"];
    {PROTOBUF_FIELD_OFFSET(AddHostZoneProposal, _impl_.description_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .xion.feeabs.v1beta1.HostChainFeeAbsConfig host_chain_config = 3 [json_name = "hostChainConfig"];
    {PROTOBUF_FIELD_OFFSET(AddHostZoneProposal, _impl_.host_chain_config_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xion::feeabs::v1beta1::HostChainFeeAbsConfig>()},
  }}, {{
    "\47\5\13\0\0\0\0\0"
    "xion.feeabs.v1beta1.AddHostZoneProposal"
    "title"
    "description"
  }},
};

PROTOBUF_NOINLINE void AddHostZoneProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:xion.feeabs.v1beta1.AddHostZoneProposal)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.host_chain_config_ != nullptr);
    _impl_.host_chain_config_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AddHostZoneProposal::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AddHostZoneProposal& this_ = static_cast<const AddHostZoneProposal&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AddHostZoneProposal::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AddHostZoneProposal& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xion.feeabs.v1beta1.AddHostZoneProposal)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string title = 1 [json_name = "title"];
          if (!this_._internal_title().empty()) {
            const std::string& _s = this_._internal_title();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xion.feeabs.v1beta1.AddHostZoneProposal.title");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string description = 2 [json_name = "description"];
          if (!this_._internal_description().empty()) {
            const std::string& _s = this_._internal_description();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xion.feeabs.v1beta1.AddHostZoneProposal.description");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .xion.feeabs.v1beta1.HostChainFeeAbsConfig host_chain_config = 3 [json_name = "hostChainConfig"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.host_chain_config_, this_._impl_.host_chain_config_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xion.feeabs.v1beta1.AddHostZoneProposal)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AddHostZoneProposal::ByteSizeLong(const MessageLite& base) {
          const AddHostZoneProposal& this_ = static_cast<const AddHostZoneProposal&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AddHostZoneProposal::ByteSizeLong() const {
          const AddHostZoneProposal& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xion.feeabs.v1beta1.AddHostZoneProposal)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string title = 1 [json_name = "title"];
            if (!this_._internal_title().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_title());
            }
            // string description = 2 [json_name = "description"];
            if (!this_._internal_description().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_description());
            }
          }
           {
            // .xion.feeabs.v1beta1.HostChainFeeAbsConfig host_chain_config = 3 [json_name = "hostChainConfig"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.host_chain_config_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AddHostZoneProposal::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AddHostZoneProposal*>(&to_msg);
  auto& from = static_cast<const AddHostZoneProposal&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:xion.feeabs.v1beta1.AddHostZoneProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.host_chain_config_ != nullptr);
    if (_this->_impl_.host_chain_config_ == nullptr) {
      _this->_impl_.host_chain_config_ =
          ::google::protobuf::Message::CopyConstruct<::xion::feeabs::v1beta1::HostChainFeeAbsConfig>(arena, *from._impl_.host_chain_config_);
    } else {
      _this->_impl_.host_chain_config_->MergeFrom(*from._impl_.host_chain_config_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AddHostZoneProposal::CopyFrom(const AddHostZoneProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xion.feeabs.v1beta1.AddHostZoneProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AddHostZoneProposal::InternalSwap(AddHostZoneProposal* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, &other->_impl_.title_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
  swap(_impl_.host_chain_config_, other->_impl_.host_chain_config_);
}

::google::protobuf::Metadata AddHostZoneProposal::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DeleteHostZoneProposal::_Internal {
 public:
};

DeleteHostZoneProposal::DeleteHostZoneProposal(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xion.feeabs.v1beta1.DeleteHostZoneProposal)
}
inline PROTOBUF_NDEBUG_INLINE DeleteHostZoneProposal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::xion::feeabs::v1beta1::DeleteHostZoneProposal& from_msg)
      : title_(arena, from.title_),
        description_(arena, from.description_),
        ibc_denom_(arena, from.ibc_denom_),
        _cached_size_{0} {}

DeleteHostZoneProposal::DeleteHostZoneProposal(
    ::google::protobuf::Arena* arena,
    const DeleteHostZoneProposal& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DeleteHostZoneProposal* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:xion.feeabs.v1beta1.DeleteHostZoneProposal)
}
inline PROTOBUF_NDEBUG_INLINE DeleteHostZoneProposal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : title_(arena),
        description_(arena),
        ibc_denom_(arena),
        _cached_size_{0} {}

inline void DeleteHostZoneProposal::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
DeleteHostZoneProposal::~DeleteHostZoneProposal() {
  // @@protoc_insertion_point(destructor:xion.feeabs.v1beta1.DeleteHostZoneProposal)
  SharedDtor(*this);
}
inline void DeleteHostZoneProposal::SharedDtor(MessageLite& self) {
  DeleteHostZoneProposal& this_ = static_cast<DeleteHostZoneProposal&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.title_.Destroy();
  this_._impl_.description_.Destroy();
  this_._impl_.ibc_denom_.Destroy();
  this_._impl_.~Impl_();
}

inline void* DeleteHostZoneProposal::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DeleteHostZoneProposal(arena);
}
constexpr auto DeleteHostZoneProposal::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(DeleteHostZoneProposal),
                                            alignof(DeleteHostZoneProposal));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DeleteHostZoneProposal::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DeleteHostZoneProposal_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DeleteHostZoneProposal::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<DeleteHostZoneProposal>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DeleteHostZoneProposal::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<DeleteHostZoneProposal>(), &DeleteHostZoneProposal::ByteSizeLong,
            &DeleteHostZoneProposal::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DeleteHostZoneProposal, _impl_._cached_size_),
        false,
    },
    &DeleteHostZoneProposal::kDescriptorMethods,
    &descriptor_table_xion_2ffeeabs_2fv1beta1_2fproposal_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DeleteHostZoneProposal::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 76, 2> DeleteHostZoneProposal::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xion::feeabs::v1beta1::DeleteHostZoneProposal>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string title = 1 [json_name = "title"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DeleteHostZoneProposal, _impl_.title_)}},
    // string description = 2 [json_name = "description"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(DeleteHostZoneProposal, _impl_.description_)}},
    // string ibc_denom = 3 [json_name = "ibcDenom"];
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(DeleteHostZoneProposal, _impl_.ibc_denom_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string title = 1 [json_name = "title"];
    {PROTOBUF_FIELD_OFFSET(DeleteHostZoneProposal, _impl_.title_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string description = 2 [json_name = "description"];
    {PROTOBUF_FIELD_OFFSET(DeleteHostZoneProposal, _impl_.description_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ibc_denom = 3 [json_name = "ibcDenom"];
    {PROTOBUF_FIELD_OFFSET(DeleteHostZoneProposal, _impl_.ibc_denom_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\52\5\13\11\0\0\0\0"
    "xion.feeabs.v1beta1.DeleteHostZoneProposal"
    "title"
    "description"
    "ibc_denom"
  }},
};

PROTOBUF_NOINLINE void DeleteHostZoneProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:xion.feeabs.v1beta1.DeleteHostZoneProposal)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.ibc_denom_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DeleteHostZoneProposal::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DeleteHostZoneProposal& this_ = static_cast<const DeleteHostZoneProposal&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DeleteHostZoneProposal::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DeleteHostZoneProposal& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xion.feeabs.v1beta1.DeleteHostZoneProposal)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string title = 1 [json_name = "title"];
          if (!this_._internal_title().empty()) {
            const std::string& _s = this_._internal_title();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xion.feeabs.v1beta1.DeleteHostZoneProposal.title");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string description = 2 [json_name = "description"];
          if (!this_._internal_description().empty()) {
            const std::string& _s = this_._internal_description();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xion.feeabs.v1beta1.DeleteHostZoneProposal.description");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string ibc_denom = 3 [json_name = "ibcDenom"];
          if (!this_._internal_ibc_denom().empty()) {
            const std::string& _s = this_._internal_ibc_denom();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xion.feeabs.v1beta1.DeleteHostZoneProposal.ibc_denom");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xion.feeabs.v1beta1.DeleteHostZoneProposal)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DeleteHostZoneProposal::ByteSizeLong(const MessageLite& base) {
          const DeleteHostZoneProposal& this_ = static_cast<const DeleteHostZoneProposal&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DeleteHostZoneProposal::ByteSizeLong() const {
          const DeleteHostZoneProposal& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xion.feeabs.v1beta1.DeleteHostZoneProposal)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string title = 1 [json_name = "title"];
            if (!this_._internal_title().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_title());
            }
            // string description = 2 [json_name = "description"];
            if (!this_._internal_description().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_description());
            }
            // string ibc_denom = 3 [json_name = "ibcDenom"];
            if (!this_._internal_ibc_denom().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ibc_denom());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DeleteHostZoneProposal::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DeleteHostZoneProposal*>(&to_msg);
  auto& from = static_cast<const DeleteHostZoneProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xion.feeabs.v1beta1.DeleteHostZoneProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_ibc_denom().empty()) {
    _this->_internal_set_ibc_denom(from._internal_ibc_denom());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteHostZoneProposal::CopyFrom(const DeleteHostZoneProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xion.feeabs.v1beta1.DeleteHostZoneProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DeleteHostZoneProposal::InternalSwap(DeleteHostZoneProposal* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, &other->_impl_.title_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ibc_denom_, &other->_impl_.ibc_denom_, arena);
}

::google::protobuf::Metadata DeleteHostZoneProposal::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SetHostZoneProposal::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SetHostZoneProposal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SetHostZoneProposal, _impl_._has_bits_);
};

SetHostZoneProposal::SetHostZoneProposal(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xion.feeabs.v1beta1.SetHostZoneProposal)
}
inline PROTOBUF_NDEBUG_INLINE SetHostZoneProposal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::xion::feeabs::v1beta1::SetHostZoneProposal& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        title_(arena, from.title_),
        description_(arena, from.description_) {}

SetHostZoneProposal::SetHostZoneProposal(
    ::google::protobuf::Arena* arena,
    const SetHostZoneProposal& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SetHostZoneProposal* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.host_chain_config_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::xion::feeabs::v1beta1::HostChainFeeAbsConfig>(
                              arena, *from._impl_.host_chain_config_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:xion.feeabs.v1beta1.SetHostZoneProposal)
}
inline PROTOBUF_NDEBUG_INLINE SetHostZoneProposal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        title_(arena),
        description_(arena) {}

inline void SetHostZoneProposal::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.host_chain_config_ = {};
}
SetHostZoneProposal::~SetHostZoneProposal() {
  // @@protoc_insertion_point(destructor:xion.feeabs.v1beta1.SetHostZoneProposal)
  SharedDtor(*this);
}
inline void SetHostZoneProposal::SharedDtor(MessageLite& self) {
  SetHostZoneProposal& this_ = static_cast<SetHostZoneProposal&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.title_.Destroy();
  this_._impl_.description_.Destroy();
  delete this_._impl_.host_chain_config_;
  this_._impl_.~Impl_();
}

inline void* SetHostZoneProposal::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SetHostZoneProposal(arena);
}
constexpr auto SetHostZoneProposal::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SetHostZoneProposal),
                                            alignof(SetHostZoneProposal));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SetHostZoneProposal::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SetHostZoneProposal_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SetHostZoneProposal::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SetHostZoneProposal>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SetHostZoneProposal::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SetHostZoneProposal>(), &SetHostZoneProposal::ByteSizeLong,
            &SetHostZoneProposal::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SetHostZoneProposal, _impl_._cached_size_),
        false,
    },
    &SetHostZoneProposal::kDescriptorMethods,
    &descriptor_table_xion_2ffeeabs_2fv1beta1_2fproposal_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SetHostZoneProposal::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 64, 2> SetHostZoneProposal::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetHostZoneProposal, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xion::feeabs::v1beta1::SetHostZoneProposal>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string title = 1 [json_name = "title"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SetHostZoneProposal, _impl_.title_)}},
    // string description = 2 [json_name = "description"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SetHostZoneProposal, _impl_.description_)}},
    // .xion.feeabs.v1beta1.HostChainFeeAbsConfig host_chain_config = 3 [json_name = "hostChainConfig"];
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(SetHostZoneProposal, _impl_.host_chain_config_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string title = 1 [json_name = "title"];
    {PROTOBUF_FIELD_OFFSET(SetHostZoneProposal, _impl_.title_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string description = 2 [json_name = "description"];
    {PROTOBUF_FIELD_OFFSET(SetHostZoneProposal, _impl_.description_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .xion.feeabs.v1beta1.HostChainFeeAbsConfig host_chain_config = 3 [json_name = "hostChainConfig"];
    {PROTOBUF_FIELD_OFFSET(SetHostZoneProposal, _impl_.host_chain_config_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xion::feeabs::v1beta1::HostChainFeeAbsConfig>()},
  }}, {{
    "\47\5\13\0\0\0\0\0"
    "xion.feeabs.v1beta1.SetHostZoneProposal"
    "title"
    "description"
  }},
};

PROTOBUF_NOINLINE void SetHostZoneProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:xion.feeabs.v1beta1.SetHostZoneProposal)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.host_chain_config_ != nullptr);
    _impl_.host_chain_config_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SetHostZoneProposal::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SetHostZoneProposal& this_ = static_cast<const SetHostZoneProposal&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SetHostZoneProposal::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SetHostZoneProposal& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xion.feeabs.v1beta1.SetHostZoneProposal)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string title = 1 [json_name = "title"];
          if (!this_._internal_title().empty()) {
            const std::string& _s = this_._internal_title();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xion.feeabs.v1beta1.SetHostZoneProposal.title");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string description = 2 [json_name = "description"];
          if (!this_._internal_description().empty()) {
            const std::string& _s = this_._internal_description();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xion.feeabs.v1beta1.SetHostZoneProposal.description");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .xion.feeabs.v1beta1.HostChainFeeAbsConfig host_chain_config = 3 [json_name = "hostChainConfig"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.host_chain_config_, this_._impl_.host_chain_config_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xion.feeabs.v1beta1.SetHostZoneProposal)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SetHostZoneProposal::ByteSizeLong(const MessageLite& base) {
          const SetHostZoneProposal& this_ = static_cast<const SetHostZoneProposal&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SetHostZoneProposal::ByteSizeLong() const {
          const SetHostZoneProposal& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xion.feeabs.v1beta1.SetHostZoneProposal)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string title = 1 [json_name = "title"];
            if (!this_._internal_title().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_title());
            }
            // string description = 2 [json_name = "description"];
            if (!this_._internal_description().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_description());
            }
          }
           {
            // .xion.feeabs.v1beta1.HostChainFeeAbsConfig host_chain_config = 3 [json_name = "hostChainConfig"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.host_chain_config_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SetHostZoneProposal::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SetHostZoneProposal*>(&to_msg);
  auto& from = static_cast<const SetHostZoneProposal&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:xion.feeabs.v1beta1.SetHostZoneProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.host_chain_config_ != nullptr);
    if (_this->_impl_.host_chain_config_ == nullptr) {
      _this->_impl_.host_chain_config_ =
          ::google::protobuf::Message::CopyConstruct<::xion::feeabs::v1beta1::HostChainFeeAbsConfig>(arena, *from._impl_.host_chain_config_);
    } else {
      _this->_impl_.host_chain_config_->MergeFrom(*from._impl_.host_chain_config_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetHostZoneProposal::CopyFrom(const SetHostZoneProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xion.feeabs.v1beta1.SetHostZoneProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SetHostZoneProposal::InternalSwap(SetHostZoneProposal* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, &other->_impl_.title_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
  swap(_impl_.host_chain_config_, other->_impl_.host_chain_config_);
}

::google::protobuf::Metadata SetHostZoneProposal::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace feeabs
}  // namespace xion
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_xion_2ffeeabs_2fv1beta1_2fproposal_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
