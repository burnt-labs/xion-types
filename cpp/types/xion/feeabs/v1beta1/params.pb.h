// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: xion/feeabs/v1beta1/params.proto
// Protobuf C++ Version: 5.29.4

#ifndef xion_2ffeeabs_2fv1beta1_2fparams_2eproto_2epb_2eh
#define xion_2ffeeabs_2fv1beta1_2fparams_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_xion_2ffeeabs_2fv1beta1_2fparams_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_xion_2ffeeabs_2fv1beta1_2fparams_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_xion_2ffeeabs_2fv1beta1_2fparams_2eproto;
namespace xion {
namespace feeabs {
namespace v1beta1 {
class Params;
struct ParamsDefaultTypeInternal;
extern ParamsDefaultTypeInternal _Params_default_instance_;
}  // namespace v1beta1
}  // namespace feeabs
}  // namespace xion
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace xion {
namespace feeabs {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class Params final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:xion.feeabs.v1beta1.Params) */ {
 public:
  inline Params() : Params(nullptr) {}
  ~Params() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Params* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Params));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Params(
      ::google::protobuf::internal::ConstantInitialized);

  inline Params(const Params& from) : Params(nullptr, from) {}
  inline Params(Params&& from) noexcept
      : Params(nullptr, std::move(from)) {}
  inline Params& operator=(const Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params& operator=(Params&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params* internal_default_instance() {
    return reinterpret_cast<const Params*>(
        &_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Params& a, Params& b) { a.Swap(&b); }
  inline void Swap(Params* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Params* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Params>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Params& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Params& from) { Params::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Params* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "xion.feeabs.v1beta1.Params"; }

 protected:
  explicit Params(::google::protobuf::Arena* arena);
  Params(::google::protobuf::Arena* arena, const Params& from);
  Params(::google::protobuf::Arena* arena, Params&& from) noexcept
      : Params(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNativeIbcedInOsmosisFieldNumber = 1,
    kOsmosisQueryTwapPathFieldNumber = 2,
    kChainNameFieldNumber = 3,
    kIbcTransferChannelFieldNumber = 4,
    kIbcQueryIcqChannelFieldNumber = 5,
    kOsmosisCrosschainSwapAddressFieldNumber = 6,
  };
  // string native_ibced_in_osmosis = 1 [json_name = "nativeIbcedInOsmosis"];
  void clear_native_ibced_in_osmosis() ;
  const std::string& native_ibced_in_osmosis() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_native_ibced_in_osmosis(Arg_&& arg, Args_... args);
  std::string* mutable_native_ibced_in_osmosis();
  PROTOBUF_NODISCARD std::string* release_native_ibced_in_osmosis();
  void set_allocated_native_ibced_in_osmosis(std::string* value);

  private:
  const std::string& _internal_native_ibced_in_osmosis() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_native_ibced_in_osmosis(
      const std::string& value);
  std::string* _internal_mutable_native_ibced_in_osmosis();

  public:
  // string osmosis_query_twap_path = 2 [json_name = "osmosisQueryTwapPath"];
  void clear_osmosis_query_twap_path() ;
  const std::string& osmosis_query_twap_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_osmosis_query_twap_path(Arg_&& arg, Args_... args);
  std::string* mutable_osmosis_query_twap_path();
  PROTOBUF_NODISCARD std::string* release_osmosis_query_twap_path();
  void set_allocated_osmosis_query_twap_path(std::string* value);

  private:
  const std::string& _internal_osmosis_query_twap_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_osmosis_query_twap_path(
      const std::string& value);
  std::string* _internal_mutable_osmosis_query_twap_path();

  public:
  // string chain_name = 3 [json_name = "chainName"];
  void clear_chain_name() ;
  const std::string& chain_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chain_name(Arg_&& arg, Args_... args);
  std::string* mutable_chain_name();
  PROTOBUF_NODISCARD std::string* release_chain_name();
  void set_allocated_chain_name(std::string* value);

  private:
  const std::string& _internal_chain_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chain_name(
      const std::string& value);
  std::string* _internal_mutable_chain_name();

  public:
  // string ibc_transfer_channel = 4 [json_name = "ibcTransferChannel"];
  void clear_ibc_transfer_channel() ;
  const std::string& ibc_transfer_channel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ibc_transfer_channel(Arg_&& arg, Args_... args);
  std::string* mutable_ibc_transfer_channel();
  PROTOBUF_NODISCARD std::string* release_ibc_transfer_channel();
  void set_allocated_ibc_transfer_channel(std::string* value);

  private:
  const std::string& _internal_ibc_transfer_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ibc_transfer_channel(
      const std::string& value);
  std::string* _internal_mutable_ibc_transfer_channel();

  public:
  // string ibc_query_icq_channel = 5 [json_name = "ibcQueryIcqChannel"];
  void clear_ibc_query_icq_channel() ;
  const std::string& ibc_query_icq_channel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ibc_query_icq_channel(Arg_&& arg, Args_... args);
  std::string* mutable_ibc_query_icq_channel();
  PROTOBUF_NODISCARD std::string* release_ibc_query_icq_channel();
  void set_allocated_ibc_query_icq_channel(std::string* value);

  private:
  const std::string& _internal_ibc_query_icq_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ibc_query_icq_channel(
      const std::string& value);
  std::string* _internal_mutable_ibc_query_icq_channel();

  public:
  // string osmosis_crosschain_swap_address = 6 [json_name = "osmosisCrosschainSwapAddress"];
  void clear_osmosis_crosschain_swap_address() ;
  const std::string& osmosis_crosschain_swap_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_osmosis_crosschain_swap_address(Arg_&& arg, Args_... args);
  std::string* mutable_osmosis_crosschain_swap_address();
  PROTOBUF_NODISCARD std::string* release_osmosis_crosschain_swap_address();
  void set_allocated_osmosis_crosschain_swap_address(std::string* value);

  private:
  const std::string& _internal_osmosis_crosschain_swap_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_osmosis_crosschain_swap_address(
      const std::string& value);
  std::string* _internal_mutable_osmosis_crosschain_swap_address();

  public:
  // @@protoc_insertion_point(class_scope:xion.feeabs.v1beta1.Params)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      163, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Params& from_msg);
    ::google::protobuf::internal::ArenaStringPtr native_ibced_in_osmosis_;
    ::google::protobuf::internal::ArenaStringPtr osmosis_query_twap_path_;
    ::google::protobuf::internal::ArenaStringPtr chain_name_;
    ::google::protobuf::internal::ArenaStringPtr ibc_transfer_channel_;
    ::google::protobuf::internal::ArenaStringPtr ibc_query_icq_channel_;
    ::google::protobuf::internal::ArenaStringPtr osmosis_crosschain_swap_address_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xion_2ffeeabs_2fv1beta1_2fparams_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Params

// string native_ibced_in_osmosis = 1 [json_name = "nativeIbcedInOsmosis"];
inline void Params::clear_native_ibced_in_osmosis() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.native_ibced_in_osmosis_.ClearToEmpty();
}
inline const std::string& Params::native_ibced_in_osmosis() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xion.feeabs.v1beta1.Params.native_ibced_in_osmosis)
  return _internal_native_ibced_in_osmosis();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_native_ibced_in_osmosis(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.native_ibced_in_osmosis_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xion.feeabs.v1beta1.Params.native_ibced_in_osmosis)
}
inline std::string* Params::mutable_native_ibced_in_osmosis() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_native_ibced_in_osmosis();
  // @@protoc_insertion_point(field_mutable:xion.feeabs.v1beta1.Params.native_ibced_in_osmosis)
  return _s;
}
inline const std::string& Params::_internal_native_ibced_in_osmosis() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.native_ibced_in_osmosis_.Get();
}
inline void Params::_internal_set_native_ibced_in_osmosis(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.native_ibced_in_osmosis_.Set(value, GetArena());
}
inline std::string* Params::_internal_mutable_native_ibced_in_osmosis() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.native_ibced_in_osmosis_.Mutable( GetArena());
}
inline std::string* Params::release_native_ibced_in_osmosis() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xion.feeabs.v1beta1.Params.native_ibced_in_osmosis)
  return _impl_.native_ibced_in_osmosis_.Release();
}
inline void Params::set_allocated_native_ibced_in_osmosis(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.native_ibced_in_osmosis_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.native_ibced_in_osmosis_.IsDefault()) {
    _impl_.native_ibced_in_osmosis_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:xion.feeabs.v1beta1.Params.native_ibced_in_osmosis)
}

// string osmosis_query_twap_path = 2 [json_name = "osmosisQueryTwapPath"];
inline void Params::clear_osmosis_query_twap_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.osmosis_query_twap_path_.ClearToEmpty();
}
inline const std::string& Params::osmosis_query_twap_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xion.feeabs.v1beta1.Params.osmosis_query_twap_path)
  return _internal_osmosis_query_twap_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_osmosis_query_twap_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.osmosis_query_twap_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xion.feeabs.v1beta1.Params.osmosis_query_twap_path)
}
inline std::string* Params::mutable_osmosis_query_twap_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_osmosis_query_twap_path();
  // @@protoc_insertion_point(field_mutable:xion.feeabs.v1beta1.Params.osmosis_query_twap_path)
  return _s;
}
inline const std::string& Params::_internal_osmosis_query_twap_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.osmosis_query_twap_path_.Get();
}
inline void Params::_internal_set_osmosis_query_twap_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.osmosis_query_twap_path_.Set(value, GetArena());
}
inline std::string* Params::_internal_mutable_osmosis_query_twap_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.osmosis_query_twap_path_.Mutable( GetArena());
}
inline std::string* Params::release_osmosis_query_twap_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xion.feeabs.v1beta1.Params.osmosis_query_twap_path)
  return _impl_.osmosis_query_twap_path_.Release();
}
inline void Params::set_allocated_osmosis_query_twap_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.osmosis_query_twap_path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.osmosis_query_twap_path_.IsDefault()) {
    _impl_.osmosis_query_twap_path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:xion.feeabs.v1beta1.Params.osmosis_query_twap_path)
}

// string chain_name = 3 [json_name = "chainName"];
inline void Params::clear_chain_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.ClearToEmpty();
}
inline const std::string& Params::chain_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xion.feeabs.v1beta1.Params.chain_name)
  return _internal_chain_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_chain_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xion.feeabs.v1beta1.Params.chain_name)
}
inline std::string* Params::mutable_chain_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chain_name();
  // @@protoc_insertion_point(field_mutable:xion.feeabs.v1beta1.Params.chain_name)
  return _s;
}
inline const std::string& Params::_internal_chain_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chain_name_.Get();
}
inline void Params::_internal_set_chain_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.Set(value, GetArena());
}
inline std::string* Params::_internal_mutable_chain_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.chain_name_.Mutable( GetArena());
}
inline std::string* Params::release_chain_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xion.feeabs.v1beta1.Params.chain_name)
  return _impl_.chain_name_.Release();
}
inline void Params::set_allocated_chain_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.chain_name_.IsDefault()) {
    _impl_.chain_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:xion.feeabs.v1beta1.Params.chain_name)
}

// string ibc_transfer_channel = 4 [json_name = "ibcTransferChannel"];
inline void Params::clear_ibc_transfer_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ibc_transfer_channel_.ClearToEmpty();
}
inline const std::string& Params::ibc_transfer_channel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xion.feeabs.v1beta1.Params.ibc_transfer_channel)
  return _internal_ibc_transfer_channel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_ibc_transfer_channel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ibc_transfer_channel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xion.feeabs.v1beta1.Params.ibc_transfer_channel)
}
inline std::string* Params::mutable_ibc_transfer_channel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ibc_transfer_channel();
  // @@protoc_insertion_point(field_mutable:xion.feeabs.v1beta1.Params.ibc_transfer_channel)
  return _s;
}
inline const std::string& Params::_internal_ibc_transfer_channel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ibc_transfer_channel_.Get();
}
inline void Params::_internal_set_ibc_transfer_channel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ibc_transfer_channel_.Set(value, GetArena());
}
inline std::string* Params::_internal_mutable_ibc_transfer_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.ibc_transfer_channel_.Mutable( GetArena());
}
inline std::string* Params::release_ibc_transfer_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xion.feeabs.v1beta1.Params.ibc_transfer_channel)
  return _impl_.ibc_transfer_channel_.Release();
}
inline void Params::set_allocated_ibc_transfer_channel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ibc_transfer_channel_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.ibc_transfer_channel_.IsDefault()) {
    _impl_.ibc_transfer_channel_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:xion.feeabs.v1beta1.Params.ibc_transfer_channel)
}

// string ibc_query_icq_channel = 5 [json_name = "ibcQueryIcqChannel"];
inline void Params::clear_ibc_query_icq_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ibc_query_icq_channel_.ClearToEmpty();
}
inline const std::string& Params::ibc_query_icq_channel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xion.feeabs.v1beta1.Params.ibc_query_icq_channel)
  return _internal_ibc_query_icq_channel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_ibc_query_icq_channel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ibc_query_icq_channel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xion.feeabs.v1beta1.Params.ibc_query_icq_channel)
}
inline std::string* Params::mutable_ibc_query_icq_channel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ibc_query_icq_channel();
  // @@protoc_insertion_point(field_mutable:xion.feeabs.v1beta1.Params.ibc_query_icq_channel)
  return _s;
}
inline const std::string& Params::_internal_ibc_query_icq_channel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ibc_query_icq_channel_.Get();
}
inline void Params::_internal_set_ibc_query_icq_channel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ibc_query_icq_channel_.Set(value, GetArena());
}
inline std::string* Params::_internal_mutable_ibc_query_icq_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.ibc_query_icq_channel_.Mutable( GetArena());
}
inline std::string* Params::release_ibc_query_icq_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xion.feeabs.v1beta1.Params.ibc_query_icq_channel)
  return _impl_.ibc_query_icq_channel_.Release();
}
inline void Params::set_allocated_ibc_query_icq_channel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ibc_query_icq_channel_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.ibc_query_icq_channel_.IsDefault()) {
    _impl_.ibc_query_icq_channel_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:xion.feeabs.v1beta1.Params.ibc_query_icq_channel)
}

// string osmosis_crosschain_swap_address = 6 [json_name = "osmosisCrosschainSwapAddress"];
inline void Params::clear_osmosis_crosschain_swap_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.osmosis_crosschain_swap_address_.ClearToEmpty();
}
inline const std::string& Params::osmosis_crosschain_swap_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xion.feeabs.v1beta1.Params.osmosis_crosschain_swap_address)
  return _internal_osmosis_crosschain_swap_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_osmosis_crosschain_swap_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.osmosis_crosschain_swap_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xion.feeabs.v1beta1.Params.osmosis_crosschain_swap_address)
}
inline std::string* Params::mutable_osmosis_crosschain_swap_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_osmosis_crosschain_swap_address();
  // @@protoc_insertion_point(field_mutable:xion.feeabs.v1beta1.Params.osmosis_crosschain_swap_address)
  return _s;
}
inline const std::string& Params::_internal_osmosis_crosschain_swap_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.osmosis_crosschain_swap_address_.Get();
}
inline void Params::_internal_set_osmosis_crosschain_swap_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.osmosis_crosschain_swap_address_.Set(value, GetArena());
}
inline std::string* Params::_internal_mutable_osmosis_crosschain_swap_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.osmosis_crosschain_swap_address_.Mutable( GetArena());
}
inline std::string* Params::release_osmosis_crosschain_swap_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xion.feeabs.v1beta1.Params.osmosis_crosschain_swap_address)
  return _impl_.osmosis_crosschain_swap_address_.Release();
}
inline void Params::set_allocated_osmosis_crosschain_swap_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.osmosis_crosschain_swap_address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.osmosis_crosschain_swap_address_.IsDefault()) {
    _impl_.osmosis_crosschain_swap_address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:xion.feeabs.v1beta1.Params.osmosis_crosschain_swap_address)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace feeabs
}  // namespace xion


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // xion_2ffeeabs_2fv1beta1_2fparams_2eproto_2epb_2eh
