// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: xion/globalfee/v1/genesis.proto
// Protobuf C++ Version: 5.29.4

#include "xion/globalfee/v1/genesis.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xion {
namespace globalfee {
namespace v1 {

inline constexpr Params::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : minimum_gas_prices_{},
        bypass_min_fee_msg_types_{},
        max_total_bypass_min_fee_msg_gas_usage_{::uint64_t{0u}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Params::Params(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParamsDefaultTypeInternal() {}
  union {
    Params _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParamsDefaultTypeInternal _Params_default_instance_;

inline constexpr GenesisState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        params_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GenesisState::GenesisState(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GenesisStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenesisStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenesisStateDefaultTypeInternal() {}
  union {
    GenesisState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
}  // namespace v1
}  // namespace globalfee
}  // namespace xion
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_xion_2fglobalfee_2fv1_2fgenesis_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_xion_2fglobalfee_2fv1_2fgenesis_2eproto = nullptr;
const ::uint32_t
    TableStruct_xion_2fglobalfee_2fv1_2fgenesis_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::xion::globalfee::v1::GenesisState, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::xion::globalfee::v1::GenesisState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xion::globalfee::v1::GenesisState, _impl_.params_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::xion::globalfee::v1::Params, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xion::globalfee::v1::Params, _impl_.minimum_gas_prices_),
        PROTOBUF_FIELD_OFFSET(::xion::globalfee::v1::Params, _impl_.bypass_min_fee_msg_types_),
        PROTOBUF_FIELD_OFFSET(::xion::globalfee::v1::Params, _impl_.max_total_bypass_min_fee_msg_gas_usage_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 9, -1, sizeof(::xion::globalfee::v1::GenesisState)},
        {10, -1, -1, sizeof(::xion::globalfee::v1::Params)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::xion::globalfee::v1::_GenesisState_default_instance_._instance,
    &::xion::globalfee::v1::_Params_default_instance_._instance,
};
const char descriptor_table_protodef_xion_2fglobalfee_2fv1_2fgenesis_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\037xion/globalfee/v1/genesis.proto\022\021xion."
    "globalfee.v1\032\024gogoproto/gogo.proto\032\036cosm"
    "os/base/v1beta1/coin.proto\"[\n\014GenesisSta"
    "te\022K\n\006params\030\001 \001(\0132\031.xion.globalfee.v1.P"
    "aramsB\030\310\336\037\000\352\336\037\020params,omitemptyR\006params\""
    "\234\003\n\006Params\022\274\001\n\022minimum_gas_prices\030\001 \003(\0132"
    "\034.cosmos.base.v1beta1.DecCoinBp\310\336\037\000\352\336\037\034m"
    "inimum_gas_prices,omitempty\362\336\037\031yaml:\"min"
    "imum_gas_prices\"\252\337\037+github.com/cosmos/co"
    "smos-sdk/types.DecCoinsR\020minimumGasPrice"
    "s\022\201\001\n\030bypass_min_fee_msg_types\030\002 \003(\tBI\352\336"
    "\037\"bypass_min_fee_msg_types,omitempty\362\336\037\037"
    "yaml:\"bypass_min_fee_msg_types\"R\024bypassM"
    "inFeeMsgTypes\022O\n&max_total_bypass_min_fe"
    "e_msg_gas_usage\030\003 \001(\004R\037maxTotalBypassMin"
    "FeeMsgGasUsageB.Z,github.com/burnt-labs/"
    "xion/x/globalfee/typesb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_xion_2fglobalfee_2fv1_2fgenesis_2eproto_deps[2] =
    {
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_xion_2fglobalfee_2fv1_2fgenesis_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_xion_2fglobalfee_2fv1_2fgenesis_2eproto = {
    false,
    false,
    670,
    descriptor_table_protodef_xion_2fglobalfee_2fv1_2fgenesis_2eproto,
    "xion/globalfee/v1/genesis.proto",
    &descriptor_table_xion_2fglobalfee_2fv1_2fgenesis_2eproto_once,
    descriptor_table_xion_2fglobalfee_2fv1_2fgenesis_2eproto_deps,
    2,
    2,
    schemas,
    file_default_instances,
    TableStruct_xion_2fglobalfee_2fv1_2fgenesis_2eproto::offsets,
    file_level_enum_descriptors_xion_2fglobalfee_2fv1_2fgenesis_2eproto,
    file_level_service_descriptors_xion_2fglobalfee_2fv1_2fgenesis_2eproto,
};
namespace xion {
namespace globalfee {
namespace v1 {
// ===================================================================

class GenesisState::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GenesisState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GenesisState, _impl_._has_bits_);
};

GenesisState::GenesisState(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xion.globalfee.v1.GenesisState)
}
inline PROTOBUF_NDEBUG_INLINE GenesisState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::xion::globalfee::v1::GenesisState& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GenesisState::GenesisState(
    ::google::protobuf::Arena* arena,
    const GenesisState& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GenesisState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.params_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::xion::globalfee::v1::Params>(
                              arena, *from._impl_.params_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:xion.globalfee.v1.GenesisState)
}
inline PROTOBUF_NDEBUG_INLINE GenesisState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GenesisState::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.params_ = {};
}
GenesisState::~GenesisState() {
  // @@protoc_insertion_point(destructor:xion.globalfee.v1.GenesisState)
  SharedDtor(*this);
}
inline void GenesisState::SharedDtor(MessageLite& self) {
  GenesisState& this_ = static_cast<GenesisState&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.params_;
  this_._impl_.~Impl_();
}

inline void* GenesisState::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GenesisState(arena);
}
constexpr auto GenesisState::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(GenesisState),
                                            alignof(GenesisState));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GenesisState::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GenesisState_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GenesisState::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GenesisState>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GenesisState::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GenesisState>(), &GenesisState::ByteSizeLong,
            &GenesisState::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GenesisState, _impl_._cached_size_),
        false,
    },
    &GenesisState::kDescriptorMethods,
    &descriptor_table_xion_2fglobalfee_2fv1_2fgenesis_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GenesisState::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GenesisState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GenesisState, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xion::globalfee::v1::GenesisState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .xion.globalfee.v1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "params,omitempty"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GenesisState, _impl_.params_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .xion.globalfee.v1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "params,omitempty"];
    {PROTOBUF_FIELD_OFFSET(GenesisState, _impl_.params_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xion::globalfee::v1::Params>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GenesisState::Clear() {
// @@protoc_insertion_point(message_clear_start:xion.globalfee.v1.GenesisState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.params_ != nullptr);
    _impl_.params_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GenesisState::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GenesisState& this_ = static_cast<const GenesisState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GenesisState::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GenesisState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xion.globalfee.v1.GenesisState)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .xion.globalfee.v1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "params,omitempty"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.params_, this_._impl_.params_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xion.globalfee.v1.GenesisState)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GenesisState::ByteSizeLong(const MessageLite& base) {
          const GenesisState& this_ = static_cast<const GenesisState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GenesisState::ByteSizeLong() const {
          const GenesisState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xion.globalfee.v1.GenesisState)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .xion.globalfee.v1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "params,omitempty"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.params_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GenesisState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GenesisState*>(&to_msg);
  auto& from = static_cast<const GenesisState&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:xion.globalfee.v1.GenesisState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.params_ != nullptr);
    if (_this->_impl_.params_ == nullptr) {
      _this->_impl_.params_ =
          ::google::protobuf::Message::CopyConstruct<::xion::globalfee::v1::Params>(arena, *from._impl_.params_);
    } else {
      _this->_impl_.params_->MergeFrom(*from._impl_.params_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisState::CopyFrom(const GenesisState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xion.globalfee.v1.GenesisState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GenesisState::InternalSwap(GenesisState* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.params_, other->_impl_.params_);
}

::google::protobuf::Metadata GenesisState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Params::_Internal {
 public:
};

void Params::clear_minimum_gas_prices() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.minimum_gas_prices_.Clear();
}
Params::Params(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xion.globalfee.v1.Params)
}
inline PROTOBUF_NDEBUG_INLINE Params::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::xion::globalfee::v1::Params& from_msg)
      : minimum_gas_prices_{visibility, arena, from.minimum_gas_prices_},
        bypass_min_fee_msg_types_{visibility, arena, from.bypass_min_fee_msg_types_},
        _cached_size_{0} {}

Params::Params(
    ::google::protobuf::Arena* arena,
    const Params& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Params* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.max_total_bypass_min_fee_msg_gas_usage_ = from._impl_.max_total_bypass_min_fee_msg_gas_usage_;

  // @@protoc_insertion_point(copy_constructor:xion.globalfee.v1.Params)
}
inline PROTOBUF_NDEBUG_INLINE Params::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : minimum_gas_prices_{visibility, arena},
        bypass_min_fee_msg_types_{visibility, arena},
        _cached_size_{0} {}

inline void Params::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.max_total_bypass_min_fee_msg_gas_usage_ = {};
}
Params::~Params() {
  // @@protoc_insertion_point(destructor:xion.globalfee.v1.Params)
  SharedDtor(*this);
}
inline void Params::SharedDtor(MessageLite& self) {
  Params& this_ = static_cast<Params&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Params::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Params(arena);
}
constexpr auto Params::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Params, _impl_.minimum_gas_prices_) +
          decltype(Params::_impl_.minimum_gas_prices_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Params, _impl_.bypass_min_fee_msg_types_) +
          decltype(Params::_impl_.bypass_min_fee_msg_types_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(Params), alignof(Params), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Params::PlacementNew_,
                                 sizeof(Params),
                                 alignof(Params));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Params::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Params_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Params::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Params>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Params::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Params>(), &Params::ByteSizeLong,
            &Params::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Params, _impl_._cached_size_),
        false,
    },
    &Params::kDescriptorMethods,
    &descriptor_table_xion_2fglobalfee_2fv1_2fgenesis_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Params::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 57, 2> Params::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xion::globalfee::v1::Params>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .cosmos.base.v1beta1.DecCoin minimum_gas_prices = 1 [json_name = "minimumGasPrices", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "minimum_gas_prices,omitempty", (.gogoproto.moretags) = "yaml:\"minimum_gas_prices\"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Params, _impl_.minimum_gas_prices_)}},
    // repeated string bypass_min_fee_msg_types = 2 [json_name = "bypassMinFeeMsgTypes", (.gogoproto.jsontag) = "bypass_min_fee_msg_types,omitempty", (.gogoproto.moretags) = "yaml:\"bypass_min_fee_msg_types\""];
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Params, _impl_.bypass_min_fee_msg_types_)}},
    // uint64 max_total_bypass_min_fee_msg_gas_usage = 3 [json_name = "maxTotalBypassMinFeeMsgGasUsage"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Params, _impl_.max_total_bypass_min_fee_msg_gas_usage_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Params, _impl_.max_total_bypass_min_fee_msg_gas_usage_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cosmos.base.v1beta1.DecCoin minimum_gas_prices = 1 [json_name = "minimumGasPrices", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "minimum_gas_prices,omitempty", (.gogoproto.moretags) = "yaml:\"minimum_gas_prices\"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];
    {PROTOBUF_FIELD_OFFSET(Params, _impl_.minimum_gas_prices_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string bypass_min_fee_msg_types = 2 [json_name = "bypassMinFeeMsgTypes", (.gogoproto.jsontag) = "bypass_min_fee_msg_types,omitempty", (.gogoproto.moretags) = "yaml:\"bypass_min_fee_msg_types\""];
    {PROTOBUF_FIELD_OFFSET(Params, _impl_.bypass_min_fee_msg_types_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // uint64 max_total_bypass_min_fee_msg_gas_usage = 3 [json_name = "maxTotalBypassMinFeeMsgGasUsage"];
    {PROTOBUF_FIELD_OFFSET(Params, _impl_.max_total_bypass_min_fee_msg_gas_usage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cosmos::base::v1beta1::DecCoin>()},
  }}, {{
    "\30\0\30\0\0\0\0\0"
    "xion.globalfee.v1.Params"
    "bypass_min_fee_msg_types"
  }},
};

PROTOBUF_NOINLINE void Params::Clear() {
// @@protoc_insertion_point(message_clear_start:xion.globalfee.v1.Params)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.minimum_gas_prices_.Clear();
  _impl_.bypass_min_fee_msg_types_.Clear();
  _impl_.max_total_bypass_min_fee_msg_gas_usage_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Params::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Params& this_ = static_cast<const Params&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Params::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Params& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xion.globalfee.v1.Params)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .cosmos.base.v1beta1.DecCoin minimum_gas_prices = 1 [json_name = "minimumGasPrices", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "minimum_gas_prices,omitempty", (.gogoproto.moretags) = "yaml:\"minimum_gas_prices\"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_minimum_gas_prices_size());
               i < n; i++) {
            const auto& repfield = this_._internal_minimum_gas_prices().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated string bypass_min_fee_msg_types = 2 [json_name = "bypassMinFeeMsgTypes", (.gogoproto.jsontag) = "bypass_min_fee_msg_types,omitempty", (.gogoproto.moretags) = "yaml:\"bypass_min_fee_msg_types\""];
          for (int i = 0, n = this_._internal_bypass_min_fee_msg_types_size(); i < n; ++i) {
            const auto& s = this_._internal_bypass_min_fee_msg_types().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xion.globalfee.v1.Params.bypass_min_fee_msg_types");
            target = stream->WriteString(2, s, target);
          }

          // uint64 max_total_bypass_min_fee_msg_gas_usage = 3 [json_name = "maxTotalBypassMinFeeMsgGasUsage"];
          if (this_._internal_max_total_bypass_min_fee_msg_gas_usage() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                3, this_._internal_max_total_bypass_min_fee_msg_gas_usage(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xion.globalfee.v1.Params)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Params::ByteSizeLong(const MessageLite& base) {
          const Params& this_ = static_cast<const Params&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Params::ByteSizeLong() const {
          const Params& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xion.globalfee.v1.Params)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .cosmos.base.v1beta1.DecCoin minimum_gas_prices = 1 [json_name = "minimumGasPrices", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "minimum_gas_prices,omitempty", (.gogoproto.moretags) = "yaml:\"minimum_gas_prices\"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];
            {
              total_size += 1UL * this_._internal_minimum_gas_prices_size();
              for (const auto& msg : this_._internal_minimum_gas_prices()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated string bypass_min_fee_msg_types = 2 [json_name = "bypassMinFeeMsgTypes", (.gogoproto.jsontag) = "bypass_min_fee_msg_types,omitempty", (.gogoproto.moretags) = "yaml:\"bypass_min_fee_msg_types\""];
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_bypass_min_fee_msg_types().size());
              for (int i = 0, n = this_._internal_bypass_min_fee_msg_types().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_bypass_min_fee_msg_types().Get(i));
              }
            }
          }
           {
            // uint64 max_total_bypass_min_fee_msg_gas_usage = 3 [json_name = "maxTotalBypassMinFeeMsgGasUsage"];
            if (this_._internal_max_total_bypass_min_fee_msg_gas_usage() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_max_total_bypass_min_fee_msg_gas_usage());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Params::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Params*>(&to_msg);
  auto& from = static_cast<const Params&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xion.globalfee.v1.Params)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_minimum_gas_prices()->MergeFrom(
      from._internal_minimum_gas_prices());
  _this->_internal_mutable_bypass_min_fee_msg_types()->MergeFrom(from._internal_bypass_min_fee_msg_types());
  if (from._internal_max_total_bypass_min_fee_msg_gas_usage() != 0) {
    _this->_impl_.max_total_bypass_min_fee_msg_gas_usage_ = from._impl_.max_total_bypass_min_fee_msg_gas_usage_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Params::CopyFrom(const Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xion.globalfee.v1.Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Params::InternalSwap(Params* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.minimum_gas_prices_.InternalSwap(&other->_impl_.minimum_gas_prices_);
  _impl_.bypass_min_fee_msg_types_.InternalSwap(&other->_impl_.bypass_min_fee_msg_types_);
        swap(_impl_.max_total_bypass_min_fee_msg_gas_usage_, other->_impl_.max_total_bypass_min_fee_msg_gas_usage_);
}

::google::protobuf::Metadata Params::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace globalfee
}  // namespace xion
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_xion_2fglobalfee_2fv1_2fgenesis_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
