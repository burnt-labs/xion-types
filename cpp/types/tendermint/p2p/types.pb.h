// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tendermint/p2p/types.proto
// Protobuf C++ Version: 5.29.4

#ifndef tendermint_2fp2p_2ftypes_2eproto_2epb_2eh
#define tendermint_2fp2p_2ftypes_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tendermint_2fp2p_2ftypes_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_tendermint_2fp2p_2ftypes_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tendermint_2fp2p_2ftypes_2eproto;
namespace tendermint {
namespace p2p {
class DefaultNodeInfo;
struct DefaultNodeInfoDefaultTypeInternal;
extern DefaultNodeInfoDefaultTypeInternal _DefaultNodeInfo_default_instance_;
class DefaultNodeInfoOther;
struct DefaultNodeInfoOtherDefaultTypeInternal;
extern DefaultNodeInfoOtherDefaultTypeInternal _DefaultNodeInfoOther_default_instance_;
class NetAddress;
struct NetAddressDefaultTypeInternal;
extern NetAddressDefaultTypeInternal _NetAddress_default_instance_;
class ProtocolVersion;
struct ProtocolVersionDefaultTypeInternal;
extern ProtocolVersionDefaultTypeInternal _ProtocolVersion_default_instance_;
}  // namespace p2p
}  // namespace tendermint
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tendermint {
namespace p2p {

// ===================================================================


// -------------------------------------------------------------------

class ProtocolVersion final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.p2p.ProtocolVersion) */ {
 public:
  inline ProtocolVersion() : ProtocolVersion(nullptr) {}
  ~ProtocolVersion() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ProtocolVersion* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ProtocolVersion));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ProtocolVersion(
      ::google::protobuf::internal::ConstantInitialized);

  inline ProtocolVersion(const ProtocolVersion& from) : ProtocolVersion(nullptr, from) {}
  inline ProtocolVersion(ProtocolVersion&& from) noexcept
      : ProtocolVersion(nullptr, std::move(from)) {}
  inline ProtocolVersion& operator=(const ProtocolVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolVersion& operator=(ProtocolVersion&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtocolVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtocolVersion* internal_default_instance() {
    return reinterpret_cast<const ProtocolVersion*>(
        &_ProtocolVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ProtocolVersion& a, ProtocolVersion& b) { a.Swap(&b); }
  inline void Swap(ProtocolVersion* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtocolVersion* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtocolVersion* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ProtocolVersion>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProtocolVersion& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ProtocolVersion& from) { ProtocolVersion::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ProtocolVersion* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.p2p.ProtocolVersion"; }

 protected:
  explicit ProtocolVersion(::google::protobuf::Arena* arena);
  ProtocolVersion(::google::protobuf::Arena* arena, const ProtocolVersion& from);
  ProtocolVersion(::google::protobuf::Arena* arena, ProtocolVersion&& from) noexcept
      : ProtocolVersion(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kP2PFieldNumber = 1,
    kBlockFieldNumber = 2,
    kAppFieldNumber = 3,
  };
  // uint64 p2p = 1 [json_name = "p2p", (.gogoproto.customname) = "P2P"];
  void clear_p2p() ;
  ::uint64_t p2p() const;
  void set_p2p(::uint64_t value);

  private:
  ::uint64_t _internal_p2p() const;
  void _internal_set_p2p(::uint64_t value);

  public:
  // uint64 block = 2 [json_name = "block"];
  void clear_block() ;
  ::uint64_t block() const;
  void set_block(::uint64_t value);

  private:
  ::uint64_t _internal_block() const;
  void _internal_set_block(::uint64_t value);

  public:
  // uint64 app = 3 [json_name = "app"];
  void clear_app() ;
  ::uint64_t app() const;
  void set_app(::uint64_t value);

  private:
  ::uint64_t _internal_app() const;
  void _internal_set_app(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.p2p.ProtocolVersion)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ProtocolVersion& from_msg);
    ::uint64_t p2p_;
    ::uint64_t block_;
    ::uint64_t app_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fp2p_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class NetAddress final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.p2p.NetAddress) */ {
 public:
  inline NetAddress() : NetAddress(nullptr) {}
  ~NetAddress() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NetAddress* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NetAddress));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NetAddress(
      ::google::protobuf::internal::ConstantInitialized);

  inline NetAddress(const NetAddress& from) : NetAddress(nullptr, from) {}
  inline NetAddress(NetAddress&& from) noexcept
      : NetAddress(nullptr, std::move(from)) {}
  inline NetAddress& operator=(const NetAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetAddress& operator=(NetAddress&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetAddress& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetAddress* internal_default_instance() {
    return reinterpret_cast<const NetAddress*>(
        &_NetAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(NetAddress& a, NetAddress& b) { a.Swap(&b); }
  inline void Swap(NetAddress* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetAddress* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetAddress* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NetAddress>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NetAddress& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NetAddress& from) { NetAddress::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NetAddress* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.p2p.NetAddress"; }

 protected:
  explicit NetAddress(::google::protobuf::Arena* arena);
  NetAddress(::google::protobuf::Arena* arena, const NetAddress& from);
  NetAddress(::google::protobuf::Arena* arena, NetAddress&& from) noexcept
      : NetAddress(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kIpFieldNumber = 2,
    kPortFieldNumber = 3,
  };
  // string id = 1 [json_name = "id", (.gogoproto.customname) = "ID"];
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string ip = 2 [json_name = "ip", (.gogoproto.customname) = "IP"];
  void clear_ip() ;
  const std::string& ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip(Arg_&& arg, Args_... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* value);

  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(
      const std::string& value);
  std::string* _internal_mutable_ip();

  public:
  // uint32 port = 3 [json_name = "port"];
  void clear_port() ;
  ::uint32_t port() const;
  void set_port(::uint32_t value);

  private:
  ::uint32_t _internal_port() const;
  void _internal_set_port(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.p2p.NetAddress)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      38, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NetAddress& from_msg);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr ip_;
    ::uint32_t port_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fp2p_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class DefaultNodeInfoOther final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.p2p.DefaultNodeInfoOther) */ {
 public:
  inline DefaultNodeInfoOther() : DefaultNodeInfoOther(nullptr) {}
  ~DefaultNodeInfoOther() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DefaultNodeInfoOther* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DefaultNodeInfoOther));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DefaultNodeInfoOther(
      ::google::protobuf::internal::ConstantInitialized);

  inline DefaultNodeInfoOther(const DefaultNodeInfoOther& from) : DefaultNodeInfoOther(nullptr, from) {}
  inline DefaultNodeInfoOther(DefaultNodeInfoOther&& from) noexcept
      : DefaultNodeInfoOther(nullptr, std::move(from)) {}
  inline DefaultNodeInfoOther& operator=(const DefaultNodeInfoOther& from) {
    CopyFrom(from);
    return *this;
  }
  inline DefaultNodeInfoOther& operator=(DefaultNodeInfoOther&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DefaultNodeInfoOther& default_instance() {
    return *internal_default_instance();
  }
  static inline const DefaultNodeInfoOther* internal_default_instance() {
    return reinterpret_cast<const DefaultNodeInfoOther*>(
        &_DefaultNodeInfoOther_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(DefaultNodeInfoOther& a, DefaultNodeInfoOther& b) { a.Swap(&b); }
  inline void Swap(DefaultNodeInfoOther* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DefaultNodeInfoOther* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DefaultNodeInfoOther* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DefaultNodeInfoOther>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DefaultNodeInfoOther& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DefaultNodeInfoOther& from) { DefaultNodeInfoOther::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DefaultNodeInfoOther* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.p2p.DefaultNodeInfoOther"; }

 protected:
  explicit DefaultNodeInfoOther(::google::protobuf::Arena* arena);
  DefaultNodeInfoOther(::google::protobuf::Arena* arena, const DefaultNodeInfoOther& from);
  DefaultNodeInfoOther(::google::protobuf::Arena* arena, DefaultNodeInfoOther&& from) noexcept
      : DefaultNodeInfoOther(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTxIndexFieldNumber = 1,
    kRpcAddressFieldNumber = 2,
  };
  // string tx_index = 1 [json_name = "txIndex"];
  void clear_tx_index() ;
  const std::string& tx_index() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tx_index(Arg_&& arg, Args_... args);
  std::string* mutable_tx_index();
  PROTOBUF_NODISCARD std::string* release_tx_index();
  void set_allocated_tx_index(std::string* value);

  private:
  const std::string& _internal_tx_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tx_index(
      const std::string& value);
  std::string* _internal_mutable_tx_index();

  public:
  // string rpc_address = 2 [json_name = "rpcAddress", (.gogoproto.customname) = "RPCAddress"];
  void clear_rpc_address() ;
  const std::string& rpc_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rpc_address(Arg_&& arg, Args_... args);
  std::string* mutable_rpc_address();
  PROTOBUF_NODISCARD std::string* release_rpc_address();
  void set_allocated_rpc_address(std::string* value);

  private:
  const std::string& _internal_rpc_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rpc_address(
      const std::string& value);
  std::string* _internal_mutable_rpc_address();

  public:
  // @@protoc_insertion_point(class_scope:tendermint.p2p.DefaultNodeInfoOther)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      63, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DefaultNodeInfoOther& from_msg);
    ::google::protobuf::internal::ArenaStringPtr tx_index_;
    ::google::protobuf::internal::ArenaStringPtr rpc_address_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fp2p_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class DefaultNodeInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.p2p.DefaultNodeInfo) */ {
 public:
  inline DefaultNodeInfo() : DefaultNodeInfo(nullptr) {}
  ~DefaultNodeInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DefaultNodeInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DefaultNodeInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DefaultNodeInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline DefaultNodeInfo(const DefaultNodeInfo& from) : DefaultNodeInfo(nullptr, from) {}
  inline DefaultNodeInfo(DefaultNodeInfo&& from) noexcept
      : DefaultNodeInfo(nullptr, std::move(from)) {}
  inline DefaultNodeInfo& operator=(const DefaultNodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DefaultNodeInfo& operator=(DefaultNodeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DefaultNodeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DefaultNodeInfo* internal_default_instance() {
    return reinterpret_cast<const DefaultNodeInfo*>(
        &_DefaultNodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(DefaultNodeInfo& a, DefaultNodeInfo& b) { a.Swap(&b); }
  inline void Swap(DefaultNodeInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DefaultNodeInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DefaultNodeInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DefaultNodeInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DefaultNodeInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DefaultNodeInfo& from) { DefaultNodeInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DefaultNodeInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.p2p.DefaultNodeInfo"; }

 protected:
  explicit DefaultNodeInfo(::google::protobuf::Arena* arena);
  DefaultNodeInfo(::google::protobuf::Arena* arena, const DefaultNodeInfo& from);
  DefaultNodeInfo(::google::protobuf::Arena* arena, DefaultNodeInfo&& from) noexcept
      : DefaultNodeInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDefaultNodeIdFieldNumber = 2,
    kListenAddrFieldNumber = 3,
    kNetworkFieldNumber = 4,
    kVersionFieldNumber = 5,
    kChannelsFieldNumber = 6,
    kMonikerFieldNumber = 7,
    kProtocolVersionFieldNumber = 1,
    kOtherFieldNumber = 8,
  };
  // string default_node_id = 2 [json_name = "defaultNodeId", (.gogoproto.customname) = "DefaultNodeID"];
  void clear_default_node_id() ;
  const std::string& default_node_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_default_node_id(Arg_&& arg, Args_... args);
  std::string* mutable_default_node_id();
  PROTOBUF_NODISCARD std::string* release_default_node_id();
  void set_allocated_default_node_id(std::string* value);

  private:
  const std::string& _internal_default_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_node_id(
      const std::string& value);
  std::string* _internal_mutable_default_node_id();

  public:
  // string listen_addr = 3 [json_name = "listenAddr"];
  void clear_listen_addr() ;
  const std::string& listen_addr() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_listen_addr(Arg_&& arg, Args_... args);
  std::string* mutable_listen_addr();
  PROTOBUF_NODISCARD std::string* release_listen_addr();
  void set_allocated_listen_addr(std::string* value);

  private:
  const std::string& _internal_listen_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_listen_addr(
      const std::string& value);
  std::string* _internal_mutable_listen_addr();

  public:
  // string network = 4 [json_name = "network"];
  void clear_network() ;
  const std::string& network() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_network(Arg_&& arg, Args_... args);
  std::string* mutable_network();
  PROTOBUF_NODISCARD std::string* release_network();
  void set_allocated_network(std::string* value);

  private:
  const std::string& _internal_network() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_network(
      const std::string& value);
  std::string* _internal_mutable_network();

  public:
  // string version = 5 [json_name = "version"];
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // bytes channels = 6 [json_name = "channels"];
  void clear_channels() ;
  const std::string& channels() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channels(Arg_&& arg, Args_... args);
  std::string* mutable_channels();
  PROTOBUF_NODISCARD std::string* release_channels();
  void set_allocated_channels(std::string* value);

  private:
  const std::string& _internal_channels() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channels(
      const std::string& value);
  std::string* _internal_mutable_channels();

  public:
  // string moniker = 7 [json_name = "moniker"];
  void clear_moniker() ;
  const std::string& moniker() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_moniker(Arg_&& arg, Args_... args);
  std::string* mutable_moniker();
  PROTOBUF_NODISCARD std::string* release_moniker();
  void set_allocated_moniker(std::string* value);

  private:
  const std::string& _internal_moniker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_moniker(
      const std::string& value);
  std::string* _internal_mutable_moniker();

  public:
  // .tendermint.p2p.ProtocolVersion protocol_version = 1 [json_name = "protocolVersion", (.gogoproto.nullable) = false];
  bool has_protocol_version() const;
  void clear_protocol_version() ;
  const ::tendermint::p2p::ProtocolVersion& protocol_version() const;
  PROTOBUF_NODISCARD ::tendermint::p2p::ProtocolVersion* release_protocol_version();
  ::tendermint::p2p::ProtocolVersion* mutable_protocol_version();
  void set_allocated_protocol_version(::tendermint::p2p::ProtocolVersion* value);
  void unsafe_arena_set_allocated_protocol_version(::tendermint::p2p::ProtocolVersion* value);
  ::tendermint::p2p::ProtocolVersion* unsafe_arena_release_protocol_version();

  private:
  const ::tendermint::p2p::ProtocolVersion& _internal_protocol_version() const;
  ::tendermint::p2p::ProtocolVersion* _internal_mutable_protocol_version();

  public:
  // .tendermint.p2p.DefaultNodeInfoOther other = 8 [json_name = "other", (.gogoproto.nullable) = false];
  bool has_other() const;
  void clear_other() ;
  const ::tendermint::p2p::DefaultNodeInfoOther& other() const;
  PROTOBUF_NODISCARD ::tendermint::p2p::DefaultNodeInfoOther* release_other();
  ::tendermint::p2p::DefaultNodeInfoOther* mutable_other();
  void set_allocated_other(::tendermint::p2p::DefaultNodeInfoOther* value);
  void unsafe_arena_set_allocated_other(::tendermint::p2p::DefaultNodeInfoOther* value);
  ::tendermint::p2p::DefaultNodeInfoOther* unsafe_arena_release_other();

  private:
  const ::tendermint::p2p::DefaultNodeInfoOther& _internal_other() const;
  ::tendermint::p2p::DefaultNodeInfoOther* _internal_mutable_other();

  public:
  // @@protoc_insertion_point(class_scope:tendermint.p2p.DefaultNodeInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 2,
      94, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DefaultNodeInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr default_node_id_;
    ::google::protobuf::internal::ArenaStringPtr listen_addr_;
    ::google::protobuf::internal::ArenaStringPtr network_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::ArenaStringPtr channels_;
    ::google::protobuf::internal::ArenaStringPtr moniker_;
    ::tendermint::p2p::ProtocolVersion* protocol_version_;
    ::tendermint::p2p::DefaultNodeInfoOther* other_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fp2p_2ftypes_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NetAddress

// string id = 1 [json_name = "id", (.gogoproto.customname) = "ID"];
inline void NetAddress::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& NetAddress::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.p2p.NetAddress.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetAddress::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.p2p.NetAddress.id)
}
inline std::string* NetAddress::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.NetAddress.id)
  return _s;
}
inline const std::string& NetAddress::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void NetAddress::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* NetAddress::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* NetAddress::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.p2p.NetAddress.id)
  return _impl_.id_.Release();
}
inline void NetAddress::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.NetAddress.id)
}

// string ip = 2 [json_name = "ip", (.gogoproto.customname) = "IP"];
inline void NetAddress::clear_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& NetAddress::ip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.p2p.NetAddress.ip)
  return _internal_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetAddress::set_ip(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.p2p.NetAddress.ip)
}
inline std::string* NetAddress::mutable_ip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.NetAddress.ip)
  return _s;
}
inline const std::string& NetAddress::_internal_ip() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ip_.Get();
}
inline void NetAddress::_internal_set_ip(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_.Set(value, GetArena());
}
inline std::string* NetAddress::_internal_mutable_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.ip_.Mutable( GetArena());
}
inline std::string* NetAddress::release_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.p2p.NetAddress.ip)
  return _impl_.ip_.Release();
}
inline void NetAddress::set_allocated_ip(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.NetAddress.ip)
}

// uint32 port = 3 [json_name = "port"];
inline void NetAddress::clear_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_ = 0u;
}
inline ::uint32_t NetAddress::port() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.NetAddress.port)
  return _internal_port();
}
inline void NetAddress::set_port(::uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:tendermint.p2p.NetAddress.port)
}
inline ::uint32_t NetAddress::_internal_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.port_;
}
inline void NetAddress::_internal_set_port(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_ = value;
}

// -------------------------------------------------------------------

// ProtocolVersion

// uint64 p2p = 1 [json_name = "p2p", (.gogoproto.customname) = "P2P"];
inline void ProtocolVersion::clear_p2p() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.p2p_ = ::uint64_t{0u};
}
inline ::uint64_t ProtocolVersion::p2p() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.ProtocolVersion.p2p)
  return _internal_p2p();
}
inline void ProtocolVersion::set_p2p(::uint64_t value) {
  _internal_set_p2p(value);
  // @@protoc_insertion_point(field_set:tendermint.p2p.ProtocolVersion.p2p)
}
inline ::uint64_t ProtocolVersion::_internal_p2p() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.p2p_;
}
inline void ProtocolVersion::_internal_set_p2p(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.p2p_ = value;
}

// uint64 block = 2 [json_name = "block"];
inline void ProtocolVersion::clear_block() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_ = ::uint64_t{0u};
}
inline ::uint64_t ProtocolVersion::block() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.ProtocolVersion.block)
  return _internal_block();
}
inline void ProtocolVersion::set_block(::uint64_t value) {
  _internal_set_block(value);
  // @@protoc_insertion_point(field_set:tendermint.p2p.ProtocolVersion.block)
}
inline ::uint64_t ProtocolVersion::_internal_block() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_;
}
inline void ProtocolVersion::_internal_set_block(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_ = value;
}

// uint64 app = 3 [json_name = "app"];
inline void ProtocolVersion::clear_app() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_ = ::uint64_t{0u};
}
inline ::uint64_t ProtocolVersion::app() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.ProtocolVersion.app)
  return _internal_app();
}
inline void ProtocolVersion::set_app(::uint64_t value) {
  _internal_set_app(value);
  // @@protoc_insertion_point(field_set:tendermint.p2p.ProtocolVersion.app)
}
inline ::uint64_t ProtocolVersion::_internal_app() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.app_;
}
inline void ProtocolVersion::_internal_set_app(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_ = value;
}

// -------------------------------------------------------------------

// DefaultNodeInfo

// .tendermint.p2p.ProtocolVersion protocol_version = 1 [json_name = "protocolVersion", (.gogoproto.nullable) = false];
inline bool DefaultNodeInfo::has_protocol_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.protocol_version_ != nullptr);
  return value;
}
inline void DefaultNodeInfo::clear_protocol_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.protocol_version_ != nullptr) _impl_.protocol_version_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tendermint::p2p::ProtocolVersion& DefaultNodeInfo::_internal_protocol_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::p2p::ProtocolVersion* p = _impl_.protocol_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::p2p::ProtocolVersion&>(::tendermint::p2p::_ProtocolVersion_default_instance_);
}
inline const ::tendermint::p2p::ProtocolVersion& DefaultNodeInfo::protocol_version() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.p2p.DefaultNodeInfo.protocol_version)
  return _internal_protocol_version();
}
inline void DefaultNodeInfo::unsafe_arena_set_allocated_protocol_version(::tendermint::p2p::ProtocolVersion* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.protocol_version_);
  }
  _impl_.protocol_version_ = reinterpret_cast<::tendermint::p2p::ProtocolVersion*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.p2p.DefaultNodeInfo.protocol_version)
}
inline ::tendermint::p2p::ProtocolVersion* DefaultNodeInfo::release_protocol_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::p2p::ProtocolVersion* released = _impl_.protocol_version_;
  _impl_.protocol_version_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::p2p::ProtocolVersion* DefaultNodeInfo::unsafe_arena_release_protocol_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.p2p.DefaultNodeInfo.protocol_version)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::p2p::ProtocolVersion* temp = _impl_.protocol_version_;
  _impl_.protocol_version_ = nullptr;
  return temp;
}
inline ::tendermint::p2p::ProtocolVersion* DefaultNodeInfo::_internal_mutable_protocol_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.protocol_version_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::p2p::ProtocolVersion>(GetArena());
    _impl_.protocol_version_ = reinterpret_cast<::tendermint::p2p::ProtocolVersion*>(p);
  }
  return _impl_.protocol_version_;
}
inline ::tendermint::p2p::ProtocolVersion* DefaultNodeInfo::mutable_protocol_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tendermint::p2p::ProtocolVersion* _msg = _internal_mutable_protocol_version();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.DefaultNodeInfo.protocol_version)
  return _msg;
}
inline void DefaultNodeInfo::set_allocated_protocol_version(::tendermint::p2p::ProtocolVersion* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.protocol_version_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.protocol_version_ = reinterpret_cast<::tendermint::p2p::ProtocolVersion*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.DefaultNodeInfo.protocol_version)
}

// string default_node_id = 2 [json_name = "defaultNodeId", (.gogoproto.customname) = "DefaultNodeID"];
inline void DefaultNodeInfo::clear_default_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default_node_id_.ClearToEmpty();
}
inline const std::string& DefaultNodeInfo::default_node_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.p2p.DefaultNodeInfo.default_node_id)
  return _internal_default_node_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DefaultNodeInfo::set_default_node_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default_node_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.p2p.DefaultNodeInfo.default_node_id)
}
inline std::string* DefaultNodeInfo::mutable_default_node_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_default_node_id();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.DefaultNodeInfo.default_node_id)
  return _s;
}
inline const std::string& DefaultNodeInfo::_internal_default_node_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.default_node_id_.Get();
}
inline void DefaultNodeInfo::_internal_set_default_node_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default_node_id_.Set(value, GetArena());
}
inline std::string* DefaultNodeInfo::_internal_mutable_default_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.default_node_id_.Mutable( GetArena());
}
inline std::string* DefaultNodeInfo::release_default_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.p2p.DefaultNodeInfo.default_node_id)
  return _impl_.default_node_id_.Release();
}
inline void DefaultNodeInfo::set_allocated_default_node_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default_node_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.default_node_id_.IsDefault()) {
    _impl_.default_node_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.DefaultNodeInfo.default_node_id)
}

// string listen_addr = 3 [json_name = "listenAddr"];
inline void DefaultNodeInfo::clear_listen_addr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.listen_addr_.ClearToEmpty();
}
inline const std::string& DefaultNodeInfo::listen_addr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.p2p.DefaultNodeInfo.listen_addr)
  return _internal_listen_addr();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DefaultNodeInfo::set_listen_addr(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.listen_addr_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.p2p.DefaultNodeInfo.listen_addr)
}
inline std::string* DefaultNodeInfo::mutable_listen_addr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_listen_addr();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.DefaultNodeInfo.listen_addr)
  return _s;
}
inline const std::string& DefaultNodeInfo::_internal_listen_addr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.listen_addr_.Get();
}
inline void DefaultNodeInfo::_internal_set_listen_addr(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.listen_addr_.Set(value, GetArena());
}
inline std::string* DefaultNodeInfo::_internal_mutable_listen_addr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.listen_addr_.Mutable( GetArena());
}
inline std::string* DefaultNodeInfo::release_listen_addr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.p2p.DefaultNodeInfo.listen_addr)
  return _impl_.listen_addr_.Release();
}
inline void DefaultNodeInfo::set_allocated_listen_addr(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.listen_addr_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.listen_addr_.IsDefault()) {
    _impl_.listen_addr_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.DefaultNodeInfo.listen_addr)
}

// string network = 4 [json_name = "network"];
inline void DefaultNodeInfo::clear_network() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.network_.ClearToEmpty();
}
inline const std::string& DefaultNodeInfo::network() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.p2p.DefaultNodeInfo.network)
  return _internal_network();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DefaultNodeInfo::set_network(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.network_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.p2p.DefaultNodeInfo.network)
}
inline std::string* DefaultNodeInfo::mutable_network() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_network();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.DefaultNodeInfo.network)
  return _s;
}
inline const std::string& DefaultNodeInfo::_internal_network() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.network_.Get();
}
inline void DefaultNodeInfo::_internal_set_network(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.network_.Set(value, GetArena());
}
inline std::string* DefaultNodeInfo::_internal_mutable_network() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.network_.Mutable( GetArena());
}
inline std::string* DefaultNodeInfo::release_network() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.p2p.DefaultNodeInfo.network)
  return _impl_.network_.Release();
}
inline void DefaultNodeInfo::set_allocated_network(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.network_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.network_.IsDefault()) {
    _impl_.network_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.DefaultNodeInfo.network)
}

// string version = 5 [json_name = "version"];
inline void DefaultNodeInfo::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& DefaultNodeInfo::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.p2p.DefaultNodeInfo.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DefaultNodeInfo::set_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.p2p.DefaultNodeInfo.version)
}
inline std::string* DefaultNodeInfo::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.DefaultNodeInfo.version)
  return _s;
}
inline const std::string& DefaultNodeInfo::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_.Get();
}
inline void DefaultNodeInfo::_internal_set_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(value, GetArena());
}
inline std::string* DefaultNodeInfo::_internal_mutable_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* DefaultNodeInfo::release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.p2p.DefaultNodeInfo.version)
  return _impl_.version_.Release();
}
inline void DefaultNodeInfo::set_allocated_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.DefaultNodeInfo.version)
}

// bytes channels = 6 [json_name = "channels"];
inline void DefaultNodeInfo::clear_channels() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channels_.ClearToEmpty();
}
inline const std::string& DefaultNodeInfo::channels() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.p2p.DefaultNodeInfo.channels)
  return _internal_channels();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DefaultNodeInfo::set_channels(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channels_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.p2p.DefaultNodeInfo.channels)
}
inline std::string* DefaultNodeInfo::mutable_channels() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_channels();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.DefaultNodeInfo.channels)
  return _s;
}
inline const std::string& DefaultNodeInfo::_internal_channels() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.channels_.Get();
}
inline void DefaultNodeInfo::_internal_set_channels(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channels_.Set(value, GetArena());
}
inline std::string* DefaultNodeInfo::_internal_mutable_channels() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.channels_.Mutable( GetArena());
}
inline std::string* DefaultNodeInfo::release_channels() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.p2p.DefaultNodeInfo.channels)
  return _impl_.channels_.Release();
}
inline void DefaultNodeInfo::set_allocated_channels(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channels_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.channels_.IsDefault()) {
    _impl_.channels_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.DefaultNodeInfo.channels)
}

// string moniker = 7 [json_name = "moniker"];
inline void DefaultNodeInfo::clear_moniker() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.moniker_.ClearToEmpty();
}
inline const std::string& DefaultNodeInfo::moniker() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.p2p.DefaultNodeInfo.moniker)
  return _internal_moniker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DefaultNodeInfo::set_moniker(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.moniker_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.p2p.DefaultNodeInfo.moniker)
}
inline std::string* DefaultNodeInfo::mutable_moniker() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_moniker();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.DefaultNodeInfo.moniker)
  return _s;
}
inline const std::string& DefaultNodeInfo::_internal_moniker() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.moniker_.Get();
}
inline void DefaultNodeInfo::_internal_set_moniker(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.moniker_.Set(value, GetArena());
}
inline std::string* DefaultNodeInfo::_internal_mutable_moniker() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.moniker_.Mutable( GetArena());
}
inline std::string* DefaultNodeInfo::release_moniker() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.p2p.DefaultNodeInfo.moniker)
  return _impl_.moniker_.Release();
}
inline void DefaultNodeInfo::set_allocated_moniker(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.moniker_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.moniker_.IsDefault()) {
    _impl_.moniker_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.DefaultNodeInfo.moniker)
}

// .tendermint.p2p.DefaultNodeInfoOther other = 8 [json_name = "other", (.gogoproto.nullable) = false];
inline bool DefaultNodeInfo::has_other() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.other_ != nullptr);
  return value;
}
inline void DefaultNodeInfo::clear_other() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.other_ != nullptr) _impl_.other_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::tendermint::p2p::DefaultNodeInfoOther& DefaultNodeInfo::_internal_other() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::p2p::DefaultNodeInfoOther* p = _impl_.other_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::p2p::DefaultNodeInfoOther&>(::tendermint::p2p::_DefaultNodeInfoOther_default_instance_);
}
inline const ::tendermint::p2p::DefaultNodeInfoOther& DefaultNodeInfo::other() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.p2p.DefaultNodeInfo.other)
  return _internal_other();
}
inline void DefaultNodeInfo::unsafe_arena_set_allocated_other(::tendermint::p2p::DefaultNodeInfoOther* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.other_);
  }
  _impl_.other_ = reinterpret_cast<::tendermint::p2p::DefaultNodeInfoOther*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.p2p.DefaultNodeInfo.other)
}
inline ::tendermint::p2p::DefaultNodeInfoOther* DefaultNodeInfo::release_other() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::p2p::DefaultNodeInfoOther* released = _impl_.other_;
  _impl_.other_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::p2p::DefaultNodeInfoOther* DefaultNodeInfo::unsafe_arena_release_other() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.p2p.DefaultNodeInfo.other)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::p2p::DefaultNodeInfoOther* temp = _impl_.other_;
  _impl_.other_ = nullptr;
  return temp;
}
inline ::tendermint::p2p::DefaultNodeInfoOther* DefaultNodeInfo::_internal_mutable_other() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.other_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::p2p::DefaultNodeInfoOther>(GetArena());
    _impl_.other_ = reinterpret_cast<::tendermint::p2p::DefaultNodeInfoOther*>(p);
  }
  return _impl_.other_;
}
inline ::tendermint::p2p::DefaultNodeInfoOther* DefaultNodeInfo::mutable_other() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tendermint::p2p::DefaultNodeInfoOther* _msg = _internal_mutable_other();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.DefaultNodeInfo.other)
  return _msg;
}
inline void DefaultNodeInfo::set_allocated_other(::tendermint::p2p::DefaultNodeInfoOther* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.other_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.other_ = reinterpret_cast<::tendermint::p2p::DefaultNodeInfoOther*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.DefaultNodeInfo.other)
}

// -------------------------------------------------------------------

// DefaultNodeInfoOther

// string tx_index = 1 [json_name = "txIndex"];
inline void DefaultNodeInfoOther::clear_tx_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tx_index_.ClearToEmpty();
}
inline const std::string& DefaultNodeInfoOther::tx_index() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.p2p.DefaultNodeInfoOther.tx_index)
  return _internal_tx_index();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DefaultNodeInfoOther::set_tx_index(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tx_index_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.p2p.DefaultNodeInfoOther.tx_index)
}
inline std::string* DefaultNodeInfoOther::mutable_tx_index() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tx_index();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.DefaultNodeInfoOther.tx_index)
  return _s;
}
inline const std::string& DefaultNodeInfoOther::_internal_tx_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tx_index_.Get();
}
inline void DefaultNodeInfoOther::_internal_set_tx_index(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tx_index_.Set(value, GetArena());
}
inline std::string* DefaultNodeInfoOther::_internal_mutable_tx_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.tx_index_.Mutable( GetArena());
}
inline std::string* DefaultNodeInfoOther::release_tx_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.p2p.DefaultNodeInfoOther.tx_index)
  return _impl_.tx_index_.Release();
}
inline void DefaultNodeInfoOther::set_allocated_tx_index(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tx_index_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.tx_index_.IsDefault()) {
    _impl_.tx_index_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.DefaultNodeInfoOther.tx_index)
}

// string rpc_address = 2 [json_name = "rpcAddress", (.gogoproto.customname) = "RPCAddress"];
inline void DefaultNodeInfoOther::clear_rpc_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpc_address_.ClearToEmpty();
}
inline const std::string& DefaultNodeInfoOther::rpc_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.p2p.DefaultNodeInfoOther.rpc_address)
  return _internal_rpc_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DefaultNodeInfoOther::set_rpc_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpc_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.p2p.DefaultNodeInfoOther.rpc_address)
}
inline std::string* DefaultNodeInfoOther::mutable_rpc_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rpc_address();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.DefaultNodeInfoOther.rpc_address)
  return _s;
}
inline const std::string& DefaultNodeInfoOther::_internal_rpc_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rpc_address_.Get();
}
inline void DefaultNodeInfoOther::_internal_set_rpc_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpc_address_.Set(value, GetArena());
}
inline std::string* DefaultNodeInfoOther::_internal_mutable_rpc_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.rpc_address_.Mutable( GetArena());
}
inline std::string* DefaultNodeInfoOther::release_rpc_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.p2p.DefaultNodeInfoOther.rpc_address)
  return _impl_.rpc_address_.Release();
}
inline void DefaultNodeInfoOther::set_allocated_rpc_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpc_address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.rpc_address_.IsDefault()) {
    _impl_.rpc_address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.DefaultNodeInfoOther.rpc_address)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace p2p
}  // namespace tendermint


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // tendermint_2fp2p_2ftypes_2eproto_2epb_2eh
