// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tendermint/p2p/types.proto
// Protobuf C++ Version: 5.29.4

#include "tendermint/p2p/types.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace tendermint {
namespace p2p {

inline constexpr ProtocolVersion::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : p2p_{::uint64_t{0u}},
        block_{::uint64_t{0u}},
        app_{::uint64_t{0u}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ProtocolVersion::ProtocolVersion(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ProtocolVersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtocolVersionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtocolVersionDefaultTypeInternal() {}
  union {
    ProtocolVersion _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtocolVersionDefaultTypeInternal _ProtocolVersion_default_instance_;

inline constexpr NetAddress::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ip_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        port_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NetAddress::NetAddress(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct NetAddressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetAddressDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetAddressDefaultTypeInternal() {}
  union {
    NetAddress _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetAddressDefaultTypeInternal _NetAddress_default_instance_;

inline constexpr DefaultNodeInfoOther::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : tx_index_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        rpc_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DefaultNodeInfoOther::DefaultNodeInfoOther(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DefaultNodeInfoOtherDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DefaultNodeInfoOtherDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DefaultNodeInfoOtherDefaultTypeInternal() {}
  union {
    DefaultNodeInfoOther _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DefaultNodeInfoOtherDefaultTypeInternal _DefaultNodeInfoOther_default_instance_;

inline constexpr DefaultNodeInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        default_node_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        listen_addr_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        network_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        version_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        channels_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        moniker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        protocol_version_{nullptr},
        other_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR DefaultNodeInfo::DefaultNodeInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DefaultNodeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DefaultNodeInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DefaultNodeInfoDefaultTypeInternal() {}
  union {
    DefaultNodeInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DefaultNodeInfoDefaultTypeInternal _DefaultNodeInfo_default_instance_;
}  // namespace p2p
}  // namespace tendermint
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_tendermint_2fp2p_2ftypes_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tendermint_2fp2p_2ftypes_2eproto = nullptr;
const ::uint32_t
    TableStruct_tendermint_2fp2p_2ftypes_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tendermint::p2p::NetAddress, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tendermint::p2p::NetAddress, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::tendermint::p2p::NetAddress, _impl_.ip_),
        PROTOBUF_FIELD_OFFSET(::tendermint::p2p::NetAddress, _impl_.port_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tendermint::p2p::ProtocolVersion, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tendermint::p2p::ProtocolVersion, _impl_.p2p_),
        PROTOBUF_FIELD_OFFSET(::tendermint::p2p::ProtocolVersion, _impl_.block_),
        PROTOBUF_FIELD_OFFSET(::tendermint::p2p::ProtocolVersion, _impl_.app_),
        PROTOBUF_FIELD_OFFSET(::tendermint::p2p::DefaultNodeInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tendermint::p2p::DefaultNodeInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tendermint::p2p::DefaultNodeInfo, _impl_.protocol_version_),
        PROTOBUF_FIELD_OFFSET(::tendermint::p2p::DefaultNodeInfo, _impl_.default_node_id_),
        PROTOBUF_FIELD_OFFSET(::tendermint::p2p::DefaultNodeInfo, _impl_.listen_addr_),
        PROTOBUF_FIELD_OFFSET(::tendermint::p2p::DefaultNodeInfo, _impl_.network_),
        PROTOBUF_FIELD_OFFSET(::tendermint::p2p::DefaultNodeInfo, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::tendermint::p2p::DefaultNodeInfo, _impl_.channels_),
        PROTOBUF_FIELD_OFFSET(::tendermint::p2p::DefaultNodeInfo, _impl_.moniker_),
        PROTOBUF_FIELD_OFFSET(::tendermint::p2p::DefaultNodeInfo, _impl_.other_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tendermint::p2p::DefaultNodeInfoOther, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tendermint::p2p::DefaultNodeInfoOther, _impl_.tx_index_),
        PROTOBUF_FIELD_OFFSET(::tendermint::p2p::DefaultNodeInfoOther, _impl_.rpc_address_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::tendermint::p2p::NetAddress)},
        {11, -1, -1, sizeof(::tendermint::p2p::ProtocolVersion)},
        {22, 38, -1, sizeof(::tendermint::p2p::DefaultNodeInfo)},
        {46, -1, -1, sizeof(::tendermint::p2p::DefaultNodeInfoOther)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::tendermint::p2p::_NetAddress_default_instance_._instance,
    &::tendermint::p2p::_ProtocolVersion_default_instance_._instance,
    &::tendermint::p2p::_DefaultNodeInfo_default_instance_._instance,
    &::tendermint::p2p::_DefaultNodeInfoOther_default_instance_._instance,
};
const char descriptor_table_protodef_tendermint_2fp2p_2ftypes_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\032tendermint/p2p/types.proto\022\016tendermint"
    ".p2p\032\024gogoproto/gogo.proto\"P\n\nNetAddress"
    "\022\026\n\002id\030\001 \001(\tB\006\342\336\037\002IDR\002id\022\026\n\002ip\030\002 \001(\tB\006\342\336"
    "\037\002IPR\002ip\022\022\n\004port\030\003 \001(\rR\004port\"T\n\017Protocol"
    "Version\022\031\n\003p2p\030\001 \001(\004B\007\342\336\037\003P2PR\003p2p\022\024\n\005bl"
    "ock\030\002 \001(\004R\005block\022\020\n\003app\030\003 \001(\004R\003app\"\353\002\n\017D"
    "efaultNodeInfo\022P\n\020protocol_version\030\001 \001(\013"
    "2\037.tendermint.p2p.ProtocolVersionB\004\310\336\037\000R"
    "\017protocolVersion\0229\n\017default_node_id\030\002 \001("
    "\tB\021\342\336\037\rDefaultNodeIDR\rdefaultNodeId\022\037\n\013l"
    "isten_addr\030\003 \001(\tR\nlistenAddr\022\030\n\007network\030"
    "\004 \001(\tR\007network\022\030\n\007version\030\005 \001(\tR\007version"
    "\022\032\n\010channels\030\006 \001(\014R\010channels\022\030\n\007moniker\030"
    "\007 \001(\tR\007moniker\022@\n\005other\030\010 \001(\0132$.tendermi"
    "nt.p2p.DefaultNodeInfoOtherB\004\310\336\037\000R\005other"
    "\"b\n\024DefaultNodeInfoOther\022\031\n\010tx_index\030\001 \001"
    "(\tR\007txIndex\022/\n\013rpc_address\030\002 \001(\tB\016\342\336\037\nRP"
    "CAddressR\nrpcAddressB3Z1github.com/comet"
    "bft/cometbft/proto/tendermint/p2pb\006proto"
    "3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_tendermint_2fp2p_2ftypes_2eproto_deps[1] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_tendermint_2fp2p_2ftypes_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_tendermint_2fp2p_2ftypes_2eproto = {
    false,
    false,
    761,
    descriptor_table_protodef_tendermint_2fp2p_2ftypes_2eproto,
    "tendermint/p2p/types.proto",
    &descriptor_table_tendermint_2fp2p_2ftypes_2eproto_once,
    descriptor_table_tendermint_2fp2p_2ftypes_2eproto_deps,
    1,
    4,
    schemas,
    file_default_instances,
    TableStruct_tendermint_2fp2p_2ftypes_2eproto::offsets,
    file_level_enum_descriptors_tendermint_2fp2p_2ftypes_2eproto,
    file_level_service_descriptors_tendermint_2fp2p_2ftypes_2eproto,
};
namespace tendermint {
namespace p2p {
// ===================================================================

class NetAddress::_Internal {
 public:
};

NetAddress::NetAddress(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.p2p.NetAddress)
}
inline PROTOBUF_NDEBUG_INLINE NetAddress::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tendermint::p2p::NetAddress& from_msg)
      : id_(arena, from.id_),
        ip_(arena, from.ip_),
        _cached_size_{0} {}

NetAddress::NetAddress(
    ::google::protobuf::Arena* arena,
    const NetAddress& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  NetAddress* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.port_ = from._impl_.port_;

  // @@protoc_insertion_point(copy_constructor:tendermint.p2p.NetAddress)
}
inline PROTOBUF_NDEBUG_INLINE NetAddress::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : id_(arena),
        ip_(arena),
        _cached_size_{0} {}

inline void NetAddress::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.port_ = {};
}
NetAddress::~NetAddress() {
  // @@protoc_insertion_point(destructor:tendermint.p2p.NetAddress)
  SharedDtor(*this);
}
inline void NetAddress::SharedDtor(MessageLite& self) {
  NetAddress& this_ = static_cast<NetAddress&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.ip_.Destroy();
  this_._impl_.~Impl_();
}

inline void* NetAddress::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) NetAddress(arena);
}
constexpr auto NetAddress::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(NetAddress),
                                            alignof(NetAddress));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull NetAddress::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_NetAddress_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &NetAddress::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<NetAddress>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &NetAddress::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<NetAddress>(), &NetAddress::ByteSizeLong,
            &NetAddress::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(NetAddress, _impl_._cached_size_),
        false,
    },
    &NetAddress::kDescriptorMethods,
    &descriptor_table_tendermint_2fp2p_2ftypes_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* NetAddress::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 38, 2> NetAddress::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tendermint::p2p::NetAddress>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string id = 1 [json_name = "id", (.gogoproto.customname) = "ID"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(NetAddress, _impl_.id_)}},
    // string ip = 2 [json_name = "ip", (.gogoproto.customname) = "IP"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(NetAddress, _impl_.ip_)}},
    // uint32 port = 3 [json_name = "port"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NetAddress, _impl_.port_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(NetAddress, _impl_.port_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1 [json_name = "id", (.gogoproto.customname) = "ID"];
    {PROTOBUF_FIELD_OFFSET(NetAddress, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ip = 2 [json_name = "ip", (.gogoproto.customname) = "IP"];
    {PROTOBUF_FIELD_OFFSET(NetAddress, _impl_.ip_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 port = 3 [json_name = "port"];
    {PROTOBUF_FIELD_OFFSET(NetAddress, _impl_.port_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\31\2\2\0\0\0\0\0"
    "tendermint.p2p.NetAddress"
    "id"
    "ip"
  }},
};

PROTOBUF_NOINLINE void NetAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.p2p.NetAddress)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  _impl_.port_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* NetAddress::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const NetAddress& this_ = static_cast<const NetAddress&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* NetAddress::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const NetAddress& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tendermint.p2p.NetAddress)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string id = 1 [json_name = "id", (.gogoproto.customname) = "ID"];
          if (!this_._internal_id().empty()) {
            const std::string& _s = this_._internal_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tendermint.p2p.NetAddress.id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string ip = 2 [json_name = "ip", (.gogoproto.customname) = "IP"];
          if (!this_._internal_ip().empty()) {
            const std::string& _s = this_._internal_ip();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tendermint.p2p.NetAddress.ip");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // uint32 port = 3 [json_name = "port"];
          if (this_._internal_port() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                3, this_._internal_port(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tendermint.p2p.NetAddress)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t NetAddress::ByteSizeLong(const MessageLite& base) {
          const NetAddress& this_ = static_cast<const NetAddress&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t NetAddress::ByteSizeLong() const {
          const NetAddress& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tendermint.p2p.NetAddress)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string id = 1 [json_name = "id", (.gogoproto.customname) = "ID"];
            if (!this_._internal_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_id());
            }
            // string ip = 2 [json_name = "ip", (.gogoproto.customname) = "IP"];
            if (!this_._internal_ip().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ip());
            }
            // uint32 port = 3 [json_name = "port"];
            if (this_._internal_port() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_port());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void NetAddress::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NetAddress*>(&to_msg);
  auto& from = static_cast<const NetAddress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.p2p.NetAddress)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (from._internal_port() != 0) {
    _this->_impl_.port_ = from._impl_.port_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NetAddress::CopyFrom(const NetAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.p2p.NetAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NetAddress::InternalSwap(NetAddress* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_, &other->_impl_.ip_, arena);
        swap(_impl_.port_, other->_impl_.port_);
}

::google::protobuf::Metadata NetAddress::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ProtocolVersion::_Internal {
 public:
};

ProtocolVersion::ProtocolVersion(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.p2p.ProtocolVersion)
}
ProtocolVersion::ProtocolVersion(
    ::google::protobuf::Arena* arena, const ProtocolVersion& from)
    : ProtocolVersion(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE ProtocolVersion::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ProtocolVersion::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, p2p_),
           0,
           offsetof(Impl_, app_) -
               offsetof(Impl_, p2p_) +
               sizeof(Impl_::app_));
}
ProtocolVersion::~ProtocolVersion() {
  // @@protoc_insertion_point(destructor:tendermint.p2p.ProtocolVersion)
  SharedDtor(*this);
}
inline void ProtocolVersion::SharedDtor(MessageLite& self) {
  ProtocolVersion& this_ = static_cast<ProtocolVersion&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* ProtocolVersion::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ProtocolVersion(arena);
}
constexpr auto ProtocolVersion::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ProtocolVersion),
                                            alignof(ProtocolVersion));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ProtocolVersion::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ProtocolVersion_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ProtocolVersion::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ProtocolVersion>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ProtocolVersion::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ProtocolVersion>(), &ProtocolVersion::ByteSizeLong,
            &ProtocolVersion::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ProtocolVersion, _impl_._cached_size_),
        false,
    },
    &ProtocolVersion::kDescriptorMethods,
    &descriptor_table_tendermint_2fp2p_2ftypes_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ProtocolVersion::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> ProtocolVersion::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tendermint::p2p::ProtocolVersion>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint64 p2p = 1 [json_name = "p2p", (.gogoproto.customname) = "P2P"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ProtocolVersion, _impl_.p2p_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ProtocolVersion, _impl_.p2p_)}},
    // uint64 block = 2 [json_name = "block"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ProtocolVersion, _impl_.block_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ProtocolVersion, _impl_.block_)}},
    // uint64 app = 3 [json_name = "app"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ProtocolVersion, _impl_.app_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ProtocolVersion, _impl_.app_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 p2p = 1 [json_name = "p2p", (.gogoproto.customname) = "P2P"];
    {PROTOBUF_FIELD_OFFSET(ProtocolVersion, _impl_.p2p_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 block = 2 [json_name = "block"];
    {PROTOBUF_FIELD_OFFSET(ProtocolVersion, _impl_.block_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 app = 3 [json_name = "app"];
    {PROTOBUF_FIELD_OFFSET(ProtocolVersion, _impl_.app_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void ProtocolVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.p2p.ProtocolVersion)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.p2p_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.app_) -
      reinterpret_cast<char*>(&_impl_.p2p_)) + sizeof(_impl_.app_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ProtocolVersion::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ProtocolVersion& this_ = static_cast<const ProtocolVersion&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ProtocolVersion::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ProtocolVersion& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tendermint.p2p.ProtocolVersion)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint64 p2p = 1 [json_name = "p2p", (.gogoproto.customname) = "P2P"];
          if (this_._internal_p2p() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                1, this_._internal_p2p(), target);
          }

          // uint64 block = 2 [json_name = "block"];
          if (this_._internal_block() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                2, this_._internal_block(), target);
          }

          // uint64 app = 3 [json_name = "app"];
          if (this_._internal_app() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                3, this_._internal_app(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tendermint.p2p.ProtocolVersion)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ProtocolVersion::ByteSizeLong(const MessageLite& base) {
          const ProtocolVersion& this_ = static_cast<const ProtocolVersion&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ProtocolVersion::ByteSizeLong() const {
          const ProtocolVersion& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tendermint.p2p.ProtocolVersion)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // uint64 p2p = 1 [json_name = "p2p", (.gogoproto.customname) = "P2P"];
            if (this_._internal_p2p() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_p2p());
            }
            // uint64 block = 2 [json_name = "block"];
            if (this_._internal_block() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_block());
            }
            // uint64 app = 3 [json_name = "app"];
            if (this_._internal_app() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_app());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ProtocolVersion::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ProtocolVersion*>(&to_msg);
  auto& from = static_cast<const ProtocolVersion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.p2p.ProtocolVersion)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_p2p() != 0) {
    _this->_impl_.p2p_ = from._impl_.p2p_;
  }
  if (from._internal_block() != 0) {
    _this->_impl_.block_ = from._impl_.block_;
  }
  if (from._internal_app() != 0) {
    _this->_impl_.app_ = from._impl_.app_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ProtocolVersion::CopyFrom(const ProtocolVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.p2p.ProtocolVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ProtocolVersion::InternalSwap(ProtocolVersion* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtocolVersion, _impl_.app_)
      + sizeof(ProtocolVersion::_impl_.app_)
      - PROTOBUF_FIELD_OFFSET(ProtocolVersion, _impl_.p2p_)>(
          reinterpret_cast<char*>(&_impl_.p2p_),
          reinterpret_cast<char*>(&other->_impl_.p2p_));
}

::google::protobuf::Metadata ProtocolVersion::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DefaultNodeInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<DefaultNodeInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DefaultNodeInfo, _impl_._has_bits_);
};

DefaultNodeInfo::DefaultNodeInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.p2p.DefaultNodeInfo)
}
inline PROTOBUF_NDEBUG_INLINE DefaultNodeInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tendermint::p2p::DefaultNodeInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        default_node_id_(arena, from.default_node_id_),
        listen_addr_(arena, from.listen_addr_),
        network_(arena, from.network_),
        version_(arena, from.version_),
        channels_(arena, from.channels_),
        moniker_(arena, from.moniker_) {}

DefaultNodeInfo::DefaultNodeInfo(
    ::google::protobuf::Arena* arena,
    const DefaultNodeInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DefaultNodeInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.protocol_version_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tendermint::p2p::ProtocolVersion>(
                              arena, *from._impl_.protocol_version_)
                        : nullptr;
  _impl_.other_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tendermint::p2p::DefaultNodeInfoOther>(
                              arena, *from._impl_.other_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tendermint.p2p.DefaultNodeInfo)
}
inline PROTOBUF_NDEBUG_INLINE DefaultNodeInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        default_node_id_(arena),
        listen_addr_(arena),
        network_(arena),
        version_(arena),
        channels_(arena),
        moniker_(arena) {}

inline void DefaultNodeInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, protocol_version_),
           0,
           offsetof(Impl_, other_) -
               offsetof(Impl_, protocol_version_) +
               sizeof(Impl_::other_));
}
DefaultNodeInfo::~DefaultNodeInfo() {
  // @@protoc_insertion_point(destructor:tendermint.p2p.DefaultNodeInfo)
  SharedDtor(*this);
}
inline void DefaultNodeInfo::SharedDtor(MessageLite& self) {
  DefaultNodeInfo& this_ = static_cast<DefaultNodeInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.default_node_id_.Destroy();
  this_._impl_.listen_addr_.Destroy();
  this_._impl_.network_.Destroy();
  this_._impl_.version_.Destroy();
  this_._impl_.channels_.Destroy();
  this_._impl_.moniker_.Destroy();
  delete this_._impl_.protocol_version_;
  delete this_._impl_.other_;
  this_._impl_.~Impl_();
}

inline void* DefaultNodeInfo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DefaultNodeInfo(arena);
}
constexpr auto DefaultNodeInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(DefaultNodeInfo),
                                            alignof(DefaultNodeInfo));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DefaultNodeInfo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DefaultNodeInfo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DefaultNodeInfo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<DefaultNodeInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DefaultNodeInfo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<DefaultNodeInfo>(), &DefaultNodeInfo::ByteSizeLong,
            &DefaultNodeInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DefaultNodeInfo, _impl_._cached_size_),
        false,
    },
    &DefaultNodeInfo::kDescriptorMethods,
    &descriptor_table_tendermint_2fp2p_2ftypes_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DefaultNodeInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 2, 94, 2> DefaultNodeInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DefaultNodeInfo, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tendermint::p2p::DefaultNodeInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .tendermint.p2p.DefaultNodeInfoOther other = 8 [json_name = "other", (.gogoproto.nullable) = false];
    {::_pbi::TcParser::FastMtS1,
     {66, 1, 1, PROTOBUF_FIELD_OFFSET(DefaultNodeInfo, _impl_.other_)}},
    // .tendermint.p2p.ProtocolVersion protocol_version = 1 [json_name = "protocolVersion", (.gogoproto.nullable) = false];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DefaultNodeInfo, _impl_.protocol_version_)}},
    // string default_node_id = 2 [json_name = "defaultNodeId", (.gogoproto.customname) = "DefaultNodeID"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(DefaultNodeInfo, _impl_.default_node_id_)}},
    // string listen_addr = 3 [json_name = "listenAddr"];
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(DefaultNodeInfo, _impl_.listen_addr_)}},
    // string network = 4 [json_name = "network"];
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(DefaultNodeInfo, _impl_.network_)}},
    // string version = 5 [json_name = "version"];
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(DefaultNodeInfo, _impl_.version_)}},
    // bytes channels = 6 [json_name = "channels"];
    {::_pbi::TcParser::FastBS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(DefaultNodeInfo, _impl_.channels_)}},
    // string moniker = 7 [json_name = "moniker"];
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(DefaultNodeInfo, _impl_.moniker_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tendermint.p2p.ProtocolVersion protocol_version = 1 [json_name = "protocolVersion", (.gogoproto.nullable) = false];
    {PROTOBUF_FIELD_OFFSET(DefaultNodeInfo, _impl_.protocol_version_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string default_node_id = 2 [json_name = "defaultNodeId", (.gogoproto.customname) = "DefaultNodeID"];
    {PROTOBUF_FIELD_OFFSET(DefaultNodeInfo, _impl_.default_node_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string listen_addr = 3 [json_name = "listenAddr"];
    {PROTOBUF_FIELD_OFFSET(DefaultNodeInfo, _impl_.listen_addr_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string network = 4 [json_name = "network"];
    {PROTOBUF_FIELD_OFFSET(DefaultNodeInfo, _impl_.network_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string version = 5 [json_name = "version"];
    {PROTOBUF_FIELD_OFFSET(DefaultNodeInfo, _impl_.version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bytes channels = 6 [json_name = "channels"];
    {PROTOBUF_FIELD_OFFSET(DefaultNodeInfo, _impl_.channels_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // string moniker = 7 [json_name = "moniker"];
    {PROTOBUF_FIELD_OFFSET(DefaultNodeInfo, _impl_.moniker_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tendermint.p2p.DefaultNodeInfoOther other = 8 [json_name = "other", (.gogoproto.nullable) = false];
    {PROTOBUF_FIELD_OFFSET(DefaultNodeInfo, _impl_.other_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tendermint::p2p::ProtocolVersion>()},
    {::_pbi::TcParser::GetTable<::tendermint::p2p::DefaultNodeInfoOther>()},
  }}, {{
    "\36\0\17\13\7\7\0\7\0\0\0\0\0\0\0\0"
    "tendermint.p2p.DefaultNodeInfo"
    "default_node_id"
    "listen_addr"
    "network"
    "version"
    "moniker"
  }},
};

PROTOBUF_NOINLINE void DefaultNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.p2p.DefaultNodeInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.default_node_id_.ClearToEmpty();
  _impl_.listen_addr_.ClearToEmpty();
  _impl_.network_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.channels_.ClearToEmpty();
  _impl_.moniker_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.protocol_version_ != nullptr);
      _impl_.protocol_version_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.other_ != nullptr);
      _impl_.other_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DefaultNodeInfo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DefaultNodeInfo& this_ = static_cast<const DefaultNodeInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DefaultNodeInfo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DefaultNodeInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tendermint.p2p.DefaultNodeInfo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tendermint.p2p.ProtocolVersion protocol_version = 1 [json_name = "protocolVersion", (.gogoproto.nullable) = false];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.protocol_version_, this_._impl_.protocol_version_->GetCachedSize(), target,
                stream);
          }

          // string default_node_id = 2 [json_name = "defaultNodeId", (.gogoproto.customname) = "DefaultNodeID"];
          if (!this_._internal_default_node_id().empty()) {
            const std::string& _s = this_._internal_default_node_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tendermint.p2p.DefaultNodeInfo.default_node_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string listen_addr = 3 [json_name = "listenAddr"];
          if (!this_._internal_listen_addr().empty()) {
            const std::string& _s = this_._internal_listen_addr();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tendermint.p2p.DefaultNodeInfo.listen_addr");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string network = 4 [json_name = "network"];
          if (!this_._internal_network().empty()) {
            const std::string& _s = this_._internal_network();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tendermint.p2p.DefaultNodeInfo.network");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string version = 5 [json_name = "version"];
          if (!this_._internal_version().empty()) {
            const std::string& _s = this_._internal_version();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tendermint.p2p.DefaultNodeInfo.version");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // bytes channels = 6 [json_name = "channels"];
          if (!this_._internal_channels().empty()) {
            const std::string& _s = this_._internal_channels();
            target = stream->WriteBytesMaybeAliased(6, _s, target);
          }

          // string moniker = 7 [json_name = "moniker"];
          if (!this_._internal_moniker().empty()) {
            const std::string& _s = this_._internal_moniker();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tendermint.p2p.DefaultNodeInfo.moniker");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // .tendermint.p2p.DefaultNodeInfoOther other = 8 [json_name = "other", (.gogoproto.nullable) = false];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                8, *this_._impl_.other_, this_._impl_.other_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tendermint.p2p.DefaultNodeInfo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DefaultNodeInfo::ByteSizeLong(const MessageLite& base) {
          const DefaultNodeInfo& this_ = static_cast<const DefaultNodeInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DefaultNodeInfo::ByteSizeLong() const {
          const DefaultNodeInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tendermint.p2p.DefaultNodeInfo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string default_node_id = 2 [json_name = "defaultNodeId", (.gogoproto.customname) = "DefaultNodeID"];
            if (!this_._internal_default_node_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_default_node_id());
            }
            // string listen_addr = 3 [json_name = "listenAddr"];
            if (!this_._internal_listen_addr().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_listen_addr());
            }
            // string network = 4 [json_name = "network"];
            if (!this_._internal_network().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_network());
            }
            // string version = 5 [json_name = "version"];
            if (!this_._internal_version().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_version());
            }
            // bytes channels = 6 [json_name = "channels"];
            if (!this_._internal_channels().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_channels());
            }
            // string moniker = 7 [json_name = "moniker"];
            if (!this_._internal_moniker().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_moniker());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .tendermint.p2p.ProtocolVersion protocol_version = 1 [json_name = "protocolVersion", (.gogoproto.nullable) = false];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.protocol_version_);
            }
            // .tendermint.p2p.DefaultNodeInfoOther other = 8 [json_name = "other", (.gogoproto.nullable) = false];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.other_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DefaultNodeInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DefaultNodeInfo*>(&to_msg);
  auto& from = static_cast<const DefaultNodeInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.p2p.DefaultNodeInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_default_node_id().empty()) {
    _this->_internal_set_default_node_id(from._internal_default_node_id());
  }
  if (!from._internal_listen_addr().empty()) {
    _this->_internal_set_listen_addr(from._internal_listen_addr());
  }
  if (!from._internal_network().empty()) {
    _this->_internal_set_network(from._internal_network());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_channels().empty()) {
    _this->_internal_set_channels(from._internal_channels());
  }
  if (!from._internal_moniker().empty()) {
    _this->_internal_set_moniker(from._internal_moniker());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.protocol_version_ != nullptr);
      if (_this->_impl_.protocol_version_ == nullptr) {
        _this->_impl_.protocol_version_ =
            ::google::protobuf::Message::CopyConstruct<::tendermint::p2p::ProtocolVersion>(arena, *from._impl_.protocol_version_);
      } else {
        _this->_impl_.protocol_version_->MergeFrom(*from._impl_.protocol_version_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.other_ != nullptr);
      if (_this->_impl_.other_ == nullptr) {
        _this->_impl_.other_ =
            ::google::protobuf::Message::CopyConstruct<::tendermint::p2p::DefaultNodeInfoOther>(arena, *from._impl_.other_);
      } else {
        _this->_impl_.other_->MergeFrom(*from._impl_.other_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DefaultNodeInfo::CopyFrom(const DefaultNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.p2p.DefaultNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DefaultNodeInfo::InternalSwap(DefaultNodeInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.default_node_id_, &other->_impl_.default_node_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.listen_addr_, &other->_impl_.listen_addr_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.network_, &other->_impl_.network_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, &other->_impl_.version_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channels_, &other->_impl_.channels_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.moniker_, &other->_impl_.moniker_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DefaultNodeInfo, _impl_.other_)
      + sizeof(DefaultNodeInfo::_impl_.other_)
      - PROTOBUF_FIELD_OFFSET(DefaultNodeInfo, _impl_.protocol_version_)>(
          reinterpret_cast<char*>(&_impl_.protocol_version_),
          reinterpret_cast<char*>(&other->_impl_.protocol_version_));
}

::google::protobuf::Metadata DefaultNodeInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DefaultNodeInfoOther::_Internal {
 public:
};

DefaultNodeInfoOther::DefaultNodeInfoOther(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.p2p.DefaultNodeInfoOther)
}
inline PROTOBUF_NDEBUG_INLINE DefaultNodeInfoOther::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tendermint::p2p::DefaultNodeInfoOther& from_msg)
      : tx_index_(arena, from.tx_index_),
        rpc_address_(arena, from.rpc_address_),
        _cached_size_{0} {}

DefaultNodeInfoOther::DefaultNodeInfoOther(
    ::google::protobuf::Arena* arena,
    const DefaultNodeInfoOther& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DefaultNodeInfoOther* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tendermint.p2p.DefaultNodeInfoOther)
}
inline PROTOBUF_NDEBUG_INLINE DefaultNodeInfoOther::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : tx_index_(arena),
        rpc_address_(arena),
        _cached_size_{0} {}

inline void DefaultNodeInfoOther::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
DefaultNodeInfoOther::~DefaultNodeInfoOther() {
  // @@protoc_insertion_point(destructor:tendermint.p2p.DefaultNodeInfoOther)
  SharedDtor(*this);
}
inline void DefaultNodeInfoOther::SharedDtor(MessageLite& self) {
  DefaultNodeInfoOther& this_ = static_cast<DefaultNodeInfoOther&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.tx_index_.Destroy();
  this_._impl_.rpc_address_.Destroy();
  this_._impl_.~Impl_();
}

inline void* DefaultNodeInfoOther::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DefaultNodeInfoOther(arena);
}
constexpr auto DefaultNodeInfoOther::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(DefaultNodeInfoOther),
                                            alignof(DefaultNodeInfoOther));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DefaultNodeInfoOther::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DefaultNodeInfoOther_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DefaultNodeInfoOther::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<DefaultNodeInfoOther>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DefaultNodeInfoOther::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<DefaultNodeInfoOther>(), &DefaultNodeInfoOther::ByteSizeLong,
            &DefaultNodeInfoOther::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DefaultNodeInfoOther, _impl_._cached_size_),
        false,
    },
    &DefaultNodeInfoOther::kDescriptorMethods,
    &descriptor_table_tendermint_2fp2p_2ftypes_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DefaultNodeInfoOther::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 63, 2> DefaultNodeInfoOther::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tendermint::p2p::DefaultNodeInfoOther>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string rpc_address = 2 [json_name = "rpcAddress", (.gogoproto.customname) = "RPCAddress"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(DefaultNodeInfoOther, _impl_.rpc_address_)}},
    // string tx_index = 1 [json_name = "txIndex"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DefaultNodeInfoOther, _impl_.tx_index_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string tx_index = 1 [json_name = "txIndex"];
    {PROTOBUF_FIELD_OFFSET(DefaultNodeInfoOther, _impl_.tx_index_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string rpc_address = 2 [json_name = "rpcAddress", (.gogoproto.customname) = "RPCAddress"];
    {PROTOBUF_FIELD_OFFSET(DefaultNodeInfoOther, _impl_.rpc_address_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\43\10\13\0\0\0\0\0"
    "tendermint.p2p.DefaultNodeInfoOther"
    "tx_index"
    "rpc_address"
  }},
};

PROTOBUF_NOINLINE void DefaultNodeInfoOther::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.p2p.DefaultNodeInfoOther)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tx_index_.ClearToEmpty();
  _impl_.rpc_address_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DefaultNodeInfoOther::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DefaultNodeInfoOther& this_ = static_cast<const DefaultNodeInfoOther&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DefaultNodeInfoOther::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DefaultNodeInfoOther& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tendermint.p2p.DefaultNodeInfoOther)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string tx_index = 1 [json_name = "txIndex"];
          if (!this_._internal_tx_index().empty()) {
            const std::string& _s = this_._internal_tx_index();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tendermint.p2p.DefaultNodeInfoOther.tx_index");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string rpc_address = 2 [json_name = "rpcAddress", (.gogoproto.customname) = "RPCAddress"];
          if (!this_._internal_rpc_address().empty()) {
            const std::string& _s = this_._internal_rpc_address();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tendermint.p2p.DefaultNodeInfoOther.rpc_address");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tendermint.p2p.DefaultNodeInfoOther)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DefaultNodeInfoOther::ByteSizeLong(const MessageLite& base) {
          const DefaultNodeInfoOther& this_ = static_cast<const DefaultNodeInfoOther&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DefaultNodeInfoOther::ByteSizeLong() const {
          const DefaultNodeInfoOther& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tendermint.p2p.DefaultNodeInfoOther)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string tx_index = 1 [json_name = "txIndex"];
            if (!this_._internal_tx_index().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_tx_index());
            }
            // string rpc_address = 2 [json_name = "rpcAddress", (.gogoproto.customname) = "RPCAddress"];
            if (!this_._internal_rpc_address().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_rpc_address());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DefaultNodeInfoOther::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DefaultNodeInfoOther*>(&to_msg);
  auto& from = static_cast<const DefaultNodeInfoOther&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.p2p.DefaultNodeInfoOther)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tx_index().empty()) {
    _this->_internal_set_tx_index(from._internal_tx_index());
  }
  if (!from._internal_rpc_address().empty()) {
    _this->_internal_set_rpc_address(from._internal_rpc_address());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DefaultNodeInfoOther::CopyFrom(const DefaultNodeInfoOther& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.p2p.DefaultNodeInfoOther)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DefaultNodeInfoOther::InternalSwap(DefaultNodeInfoOther* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tx_index_, &other->_impl_.tx_index_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rpc_address_, &other->_impl_.rpc_address_, arena);
}

::google::protobuf::Metadata DefaultNodeInfoOther::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace p2p
}  // namespace tendermint
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_tendermint_2fp2p_2ftypes_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
