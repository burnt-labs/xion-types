// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tendermint/types/validator.proto
// Protobuf C++ Version: 5.29.4

#ifndef tendermint_2ftypes_2fvalidator_2eproto_2epb_2eh
#define tendermint_2ftypes_2fvalidator_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "tendermint/crypto/keys.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tendermint_2ftypes_2fvalidator_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_tendermint_2ftypes_2fvalidator_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tendermint_2ftypes_2fvalidator_2eproto;
namespace tendermint {
namespace types {
class SimpleValidator;
struct SimpleValidatorDefaultTypeInternal;
extern SimpleValidatorDefaultTypeInternal _SimpleValidator_default_instance_;
class Validator;
struct ValidatorDefaultTypeInternal;
extern ValidatorDefaultTypeInternal _Validator_default_instance_;
class ValidatorSet;
struct ValidatorSetDefaultTypeInternal;
extern ValidatorSetDefaultTypeInternal _ValidatorSet_default_instance_;
}  // namespace types
}  // namespace tendermint
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tendermint {
namespace types {
enum BlockIDFlag : int {
  BLOCK_ID_FLAG_UNKNOWN = 0,
  BLOCK_ID_FLAG_ABSENT = 1,
  BLOCK_ID_FLAG_COMMIT = 2,
  BLOCK_ID_FLAG_NIL = 3,
  BlockIDFlag_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  BlockIDFlag_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool BlockIDFlag_IsValid(int value);
extern const uint32_t BlockIDFlag_internal_data_[];
constexpr BlockIDFlag BlockIDFlag_MIN = static_cast<BlockIDFlag>(0);
constexpr BlockIDFlag BlockIDFlag_MAX = static_cast<BlockIDFlag>(3);
constexpr int BlockIDFlag_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
BlockIDFlag_descriptor();
template <typename T>
const std::string& BlockIDFlag_Name(T value) {
  static_assert(std::is_same<T, BlockIDFlag>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to BlockIDFlag_Name().");
  return BlockIDFlag_Name(static_cast<BlockIDFlag>(value));
}
template <>
inline const std::string& BlockIDFlag_Name(BlockIDFlag value) {
  return ::google::protobuf::internal::NameOfDenseEnum<BlockIDFlag_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool BlockIDFlag_Parse(absl::string_view name, BlockIDFlag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BlockIDFlag>(
      BlockIDFlag_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Validator final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.types.Validator) */ {
 public:
  inline Validator() : Validator(nullptr) {}
  ~Validator() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Validator* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Validator));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Validator(
      ::google::protobuf::internal::ConstantInitialized);

  inline Validator(const Validator& from) : Validator(nullptr, from) {}
  inline Validator(Validator&& from) noexcept
      : Validator(nullptr, std::move(from)) {}
  inline Validator& operator=(const Validator& from) {
    CopyFrom(from);
    return *this;
  }
  inline Validator& operator=(Validator&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Validator& default_instance() {
    return *internal_default_instance();
  }
  static inline const Validator* internal_default_instance() {
    return reinterpret_cast<const Validator*>(
        &_Validator_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Validator& a, Validator& b) { a.Swap(&b); }
  inline void Swap(Validator* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Validator* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Validator* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Validator>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Validator& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Validator& from) { Validator::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Validator* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.types.Validator"; }

 protected:
  explicit Validator(::google::protobuf::Arena* arena);
  Validator(::google::protobuf::Arena* arena, const Validator& from);
  Validator(::google::protobuf::Arena* arena, Validator&& from) noexcept
      : Validator(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAddressFieldNumber = 1,
    kPubKeyFieldNumber = 2,
    kVotingPowerFieldNumber = 3,
    kProposerPriorityFieldNumber = 4,
  };
  // bytes address = 1 [json_name = "address"];
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* value);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // .tendermint.crypto.PublicKey pub_key = 2 [json_name = "pubKey", (.gogoproto.nullable) = false];
  bool has_pub_key() const;
  void clear_pub_key() ;
  const ::tendermint::crypto::PublicKey& pub_key() const;
  PROTOBUF_NODISCARD ::tendermint::crypto::PublicKey* release_pub_key();
  ::tendermint::crypto::PublicKey* mutable_pub_key();
  void set_allocated_pub_key(::tendermint::crypto::PublicKey* value);
  void unsafe_arena_set_allocated_pub_key(::tendermint::crypto::PublicKey* value);
  ::tendermint::crypto::PublicKey* unsafe_arena_release_pub_key();

  private:
  const ::tendermint::crypto::PublicKey& _internal_pub_key() const;
  ::tendermint::crypto::PublicKey* _internal_mutable_pub_key();

  public:
  // int64 voting_power = 3 [json_name = "votingPower"];
  void clear_voting_power() ;
  ::int64_t voting_power() const;
  void set_voting_power(::int64_t value);

  private:
  ::int64_t _internal_voting_power() const;
  void _internal_set_voting_power(::int64_t value);

  public:
  // int64 proposer_priority = 4 [json_name = "proposerPriority"];
  void clear_proposer_priority() ;
  ::int64_t proposer_priority() const;
  void set_proposer_priority(::int64_t value);

  private:
  ::int64_t _internal_proposer_priority() const;
  void _internal_set_proposer_priority(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.types.Validator)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Validator& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::tendermint::crypto::PublicKey* pub_key_;
    ::int64_t voting_power_;
    ::int64_t proposer_priority_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2fvalidator_2eproto;
};
// -------------------------------------------------------------------

class SimpleValidator final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.types.SimpleValidator) */ {
 public:
  inline SimpleValidator() : SimpleValidator(nullptr) {}
  ~SimpleValidator() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SimpleValidator* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SimpleValidator));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SimpleValidator(
      ::google::protobuf::internal::ConstantInitialized);

  inline SimpleValidator(const SimpleValidator& from) : SimpleValidator(nullptr, from) {}
  inline SimpleValidator(SimpleValidator&& from) noexcept
      : SimpleValidator(nullptr, std::move(from)) {}
  inline SimpleValidator& operator=(const SimpleValidator& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleValidator& operator=(SimpleValidator&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleValidator& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleValidator* internal_default_instance() {
    return reinterpret_cast<const SimpleValidator*>(
        &_SimpleValidator_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(SimpleValidator& a, SimpleValidator& b) { a.Swap(&b); }
  inline void Swap(SimpleValidator* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleValidator* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleValidator* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SimpleValidator>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SimpleValidator& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SimpleValidator& from) { SimpleValidator::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SimpleValidator* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.types.SimpleValidator"; }

 protected:
  explicit SimpleValidator(::google::protobuf::Arena* arena);
  SimpleValidator(::google::protobuf::Arena* arena, const SimpleValidator& from);
  SimpleValidator(::google::protobuf::Arena* arena, SimpleValidator&& from) noexcept
      : SimpleValidator(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPubKeyFieldNumber = 1,
    kVotingPowerFieldNumber = 2,
  };
  // .tendermint.crypto.PublicKey pub_key = 1 [json_name = "pubKey"];
  bool has_pub_key() const;
  void clear_pub_key() ;
  const ::tendermint::crypto::PublicKey& pub_key() const;
  PROTOBUF_NODISCARD ::tendermint::crypto::PublicKey* release_pub_key();
  ::tendermint::crypto::PublicKey* mutable_pub_key();
  void set_allocated_pub_key(::tendermint::crypto::PublicKey* value);
  void unsafe_arena_set_allocated_pub_key(::tendermint::crypto::PublicKey* value);
  ::tendermint::crypto::PublicKey* unsafe_arena_release_pub_key();

  private:
  const ::tendermint::crypto::PublicKey& _internal_pub_key() const;
  ::tendermint::crypto::PublicKey* _internal_mutable_pub_key();

  public:
  // int64 voting_power = 2 [json_name = "votingPower"];
  void clear_voting_power() ;
  ::int64_t voting_power() const;
  void set_voting_power(::int64_t value);

  private:
  ::int64_t _internal_voting_power() const;
  void _internal_set_voting_power(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.types.SimpleValidator)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SimpleValidator& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::tendermint::crypto::PublicKey* pub_key_;
    ::int64_t voting_power_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2fvalidator_2eproto;
};
// -------------------------------------------------------------------

class ValidatorSet final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.types.ValidatorSet) */ {
 public:
  inline ValidatorSet() : ValidatorSet(nullptr) {}
  ~ValidatorSet() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ValidatorSet* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ValidatorSet));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ValidatorSet(
      ::google::protobuf::internal::ConstantInitialized);

  inline ValidatorSet(const ValidatorSet& from) : ValidatorSet(nullptr, from) {}
  inline ValidatorSet(ValidatorSet&& from) noexcept
      : ValidatorSet(nullptr, std::move(from)) {}
  inline ValidatorSet& operator=(const ValidatorSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatorSet& operator=(ValidatorSet&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidatorSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidatorSet* internal_default_instance() {
    return reinterpret_cast<const ValidatorSet*>(
        &_ValidatorSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ValidatorSet& a, ValidatorSet& b) { a.Swap(&b); }
  inline void Swap(ValidatorSet* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatorSet* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidatorSet* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ValidatorSet>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ValidatorSet& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ValidatorSet& from) { ValidatorSet::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ValidatorSet* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.types.ValidatorSet"; }

 protected:
  explicit ValidatorSet(::google::protobuf::Arena* arena);
  ValidatorSet(::google::protobuf::Arena* arena, const ValidatorSet& from);
  ValidatorSet(::google::protobuf::Arena* arena, ValidatorSet&& from) noexcept
      : ValidatorSet(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValidatorsFieldNumber = 1,
    kProposerFieldNumber = 2,
    kTotalVotingPowerFieldNumber = 3,
  };
  // repeated .tendermint.types.Validator validators = 1 [json_name = "validators"];
  int validators_size() const;
  private:
  int _internal_validators_size() const;

  public:
  void clear_validators() ;
  ::tendermint::types::Validator* mutable_validators(int index);
  ::google::protobuf::RepeatedPtrField<::tendermint::types::Validator>* mutable_validators();

  private:
  const ::google::protobuf::RepeatedPtrField<::tendermint::types::Validator>& _internal_validators() const;
  ::google::protobuf::RepeatedPtrField<::tendermint::types::Validator>* _internal_mutable_validators();
  public:
  const ::tendermint::types::Validator& validators(int index) const;
  ::tendermint::types::Validator* add_validators();
  const ::google::protobuf::RepeatedPtrField<::tendermint::types::Validator>& validators() const;
  // .tendermint.types.Validator proposer = 2 [json_name = "proposer"];
  bool has_proposer() const;
  void clear_proposer() ;
  const ::tendermint::types::Validator& proposer() const;
  PROTOBUF_NODISCARD ::tendermint::types::Validator* release_proposer();
  ::tendermint::types::Validator* mutable_proposer();
  void set_allocated_proposer(::tendermint::types::Validator* value);
  void unsafe_arena_set_allocated_proposer(::tendermint::types::Validator* value);
  ::tendermint::types::Validator* unsafe_arena_release_proposer();

  private:
  const ::tendermint::types::Validator& _internal_proposer() const;
  ::tendermint::types::Validator* _internal_mutable_proposer();

  public:
  // int64 total_voting_power = 3 [json_name = "totalVotingPower"];
  void clear_total_voting_power() ;
  ::int64_t total_voting_power() const;
  void set_total_voting_power(::int64_t value);

  private:
  ::int64_t _internal_total_voting_power() const;
  void _internal_set_total_voting_power(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.types.ValidatorSet)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ValidatorSet& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tendermint::types::Validator > validators_;
    ::tendermint::types::Validator* proposer_;
    ::int64_t total_voting_power_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2fvalidator_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ValidatorSet

// repeated .tendermint.types.Validator validators = 1 [json_name = "validators"];
inline int ValidatorSet::_internal_validators_size() const {
  return _internal_validators().size();
}
inline int ValidatorSet::validators_size() const {
  return _internal_validators_size();
}
inline void ValidatorSet::clear_validators() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validators_.Clear();
}
inline ::tendermint::types::Validator* ValidatorSet::mutable_validators(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tendermint.types.ValidatorSet.validators)
  return _internal_mutable_validators()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::types::Validator>* ValidatorSet::mutable_validators()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tendermint.types.ValidatorSet.validators)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_validators();
}
inline const ::tendermint::types::Validator& ValidatorSet::validators(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.types.ValidatorSet.validators)
  return _internal_validators().Get(index);
}
inline ::tendermint::types::Validator* ValidatorSet::add_validators() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tendermint::types::Validator* _add = _internal_mutable_validators()->Add();
  // @@protoc_insertion_point(field_add:tendermint.types.ValidatorSet.validators)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::types::Validator>& ValidatorSet::validators() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tendermint.types.ValidatorSet.validators)
  return _internal_validators();
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::types::Validator>&
ValidatorSet::_internal_validators() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.validators_;
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::types::Validator>*
ValidatorSet::_internal_mutable_validators() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.validators_;
}

// .tendermint.types.Validator proposer = 2 [json_name = "proposer"];
inline bool ValidatorSet::has_proposer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proposer_ != nullptr);
  return value;
}
inline void ValidatorSet::clear_proposer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.proposer_ != nullptr) _impl_.proposer_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tendermint::types::Validator& ValidatorSet::_internal_proposer() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::types::Validator* p = _impl_.proposer_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::Validator&>(::tendermint::types::_Validator_default_instance_);
}
inline const ::tendermint::types::Validator& ValidatorSet::proposer() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.types.ValidatorSet.proposer)
  return _internal_proposer();
}
inline void ValidatorSet::unsafe_arena_set_allocated_proposer(::tendermint::types::Validator* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.proposer_);
  }
  _impl_.proposer_ = reinterpret_cast<::tendermint::types::Validator*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.ValidatorSet.proposer)
}
inline ::tendermint::types::Validator* ValidatorSet::release_proposer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::Validator* released = _impl_.proposer_;
  _impl_.proposer_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::types::Validator* ValidatorSet::unsafe_arena_release_proposer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.types.ValidatorSet.proposer)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::Validator* temp = _impl_.proposer_;
  _impl_.proposer_ = nullptr;
  return temp;
}
inline ::tendermint::types::Validator* ValidatorSet::_internal_mutable_proposer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.proposer_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::types::Validator>(GetArena());
    _impl_.proposer_ = reinterpret_cast<::tendermint::types::Validator*>(p);
  }
  return _impl_.proposer_;
}
inline ::tendermint::types::Validator* ValidatorSet::mutable_proposer() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tendermint::types::Validator* _msg = _internal_mutable_proposer();
  // @@protoc_insertion_point(field_mutable:tendermint.types.ValidatorSet.proposer)
  return _msg;
}
inline void ValidatorSet::set_allocated_proposer(::tendermint::types::Validator* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.proposer_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.proposer_ = reinterpret_cast<::tendermint::types::Validator*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.ValidatorSet.proposer)
}

// int64 total_voting_power = 3 [json_name = "totalVotingPower"];
inline void ValidatorSet::clear_total_voting_power() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_voting_power_ = ::int64_t{0};
}
inline ::int64_t ValidatorSet::total_voting_power() const {
  // @@protoc_insertion_point(field_get:tendermint.types.ValidatorSet.total_voting_power)
  return _internal_total_voting_power();
}
inline void ValidatorSet::set_total_voting_power(::int64_t value) {
  _internal_set_total_voting_power(value);
  // @@protoc_insertion_point(field_set:tendermint.types.ValidatorSet.total_voting_power)
}
inline ::int64_t ValidatorSet::_internal_total_voting_power() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_voting_power_;
}
inline void ValidatorSet::_internal_set_total_voting_power(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_voting_power_ = value;
}

// -------------------------------------------------------------------

// Validator

// bytes address = 1 [json_name = "address"];
inline void Validator::clear_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.ClearToEmpty();
}
inline const std::string& Validator::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.types.Validator.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Validator::set_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.types.Validator.address)
}
inline std::string* Validator::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Validator.address)
  return _s;
}
inline const std::string& Validator::_internal_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.address_.Get();
}
inline void Validator::_internal_set_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(value, GetArena());
}
inline std::string* Validator::_internal_mutable_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.address_.Mutable( GetArena());
}
inline std::string* Validator::release_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.types.Validator.address)
  return _impl_.address_.Release();
}
inline void Validator::set_allocated_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Validator.address)
}

// .tendermint.crypto.PublicKey pub_key = 2 [json_name = "pubKey", (.gogoproto.nullable) = false];
inline bool Validator::has_pub_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pub_key_ != nullptr);
  return value;
}
inline const ::tendermint::crypto::PublicKey& Validator::_internal_pub_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::crypto::PublicKey* p = _impl_.pub_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::crypto::PublicKey&>(::tendermint::crypto::_PublicKey_default_instance_);
}
inline const ::tendermint::crypto::PublicKey& Validator::pub_key() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.types.Validator.pub_key)
  return _internal_pub_key();
}
inline void Validator::unsafe_arena_set_allocated_pub_key(::tendermint::crypto::PublicKey* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pub_key_);
  }
  _impl_.pub_key_ = reinterpret_cast<::tendermint::crypto::PublicKey*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.Validator.pub_key)
}
inline ::tendermint::crypto::PublicKey* Validator::release_pub_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::crypto::PublicKey* released = _impl_.pub_key_;
  _impl_.pub_key_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::crypto::PublicKey* Validator::unsafe_arena_release_pub_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.types.Validator.pub_key)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::crypto::PublicKey* temp = _impl_.pub_key_;
  _impl_.pub_key_ = nullptr;
  return temp;
}
inline ::tendermint::crypto::PublicKey* Validator::_internal_mutable_pub_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pub_key_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::crypto::PublicKey>(GetArena());
    _impl_.pub_key_ = reinterpret_cast<::tendermint::crypto::PublicKey*>(p);
  }
  return _impl_.pub_key_;
}
inline ::tendermint::crypto::PublicKey* Validator::mutable_pub_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tendermint::crypto::PublicKey* _msg = _internal_mutable_pub_key();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Validator.pub_key)
  return _msg;
}
inline void Validator::set_allocated_pub_key(::tendermint::crypto::PublicKey* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pub_key_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pub_key_ = reinterpret_cast<::tendermint::crypto::PublicKey*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Validator.pub_key)
}

// int64 voting_power = 3 [json_name = "votingPower"];
inline void Validator::clear_voting_power() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voting_power_ = ::int64_t{0};
}
inline ::int64_t Validator::voting_power() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Validator.voting_power)
  return _internal_voting_power();
}
inline void Validator::set_voting_power(::int64_t value) {
  _internal_set_voting_power(value);
  // @@protoc_insertion_point(field_set:tendermint.types.Validator.voting_power)
}
inline ::int64_t Validator::_internal_voting_power() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.voting_power_;
}
inline void Validator::_internal_set_voting_power(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voting_power_ = value;
}

// int64 proposer_priority = 4 [json_name = "proposerPriority"];
inline void Validator::clear_proposer_priority() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposer_priority_ = ::int64_t{0};
}
inline ::int64_t Validator::proposer_priority() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Validator.proposer_priority)
  return _internal_proposer_priority();
}
inline void Validator::set_proposer_priority(::int64_t value) {
  _internal_set_proposer_priority(value);
  // @@protoc_insertion_point(field_set:tendermint.types.Validator.proposer_priority)
}
inline ::int64_t Validator::_internal_proposer_priority() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proposer_priority_;
}
inline void Validator::_internal_set_proposer_priority(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposer_priority_ = value;
}

// -------------------------------------------------------------------

// SimpleValidator

// .tendermint.crypto.PublicKey pub_key = 1 [json_name = "pubKey"];
inline bool SimpleValidator::has_pub_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pub_key_ != nullptr);
  return value;
}
inline const ::tendermint::crypto::PublicKey& SimpleValidator::_internal_pub_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::crypto::PublicKey* p = _impl_.pub_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::crypto::PublicKey&>(::tendermint::crypto::_PublicKey_default_instance_);
}
inline const ::tendermint::crypto::PublicKey& SimpleValidator::pub_key() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.types.SimpleValidator.pub_key)
  return _internal_pub_key();
}
inline void SimpleValidator::unsafe_arena_set_allocated_pub_key(::tendermint::crypto::PublicKey* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pub_key_);
  }
  _impl_.pub_key_ = reinterpret_cast<::tendermint::crypto::PublicKey*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.SimpleValidator.pub_key)
}
inline ::tendermint::crypto::PublicKey* SimpleValidator::release_pub_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::crypto::PublicKey* released = _impl_.pub_key_;
  _impl_.pub_key_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::crypto::PublicKey* SimpleValidator::unsafe_arena_release_pub_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.types.SimpleValidator.pub_key)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::crypto::PublicKey* temp = _impl_.pub_key_;
  _impl_.pub_key_ = nullptr;
  return temp;
}
inline ::tendermint::crypto::PublicKey* SimpleValidator::_internal_mutable_pub_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pub_key_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::crypto::PublicKey>(GetArena());
    _impl_.pub_key_ = reinterpret_cast<::tendermint::crypto::PublicKey*>(p);
  }
  return _impl_.pub_key_;
}
inline ::tendermint::crypto::PublicKey* SimpleValidator::mutable_pub_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tendermint::crypto::PublicKey* _msg = _internal_mutable_pub_key();
  // @@protoc_insertion_point(field_mutable:tendermint.types.SimpleValidator.pub_key)
  return _msg;
}
inline void SimpleValidator::set_allocated_pub_key(::tendermint::crypto::PublicKey* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pub_key_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pub_key_ = reinterpret_cast<::tendermint::crypto::PublicKey*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.SimpleValidator.pub_key)
}

// int64 voting_power = 2 [json_name = "votingPower"];
inline void SimpleValidator::clear_voting_power() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voting_power_ = ::int64_t{0};
}
inline ::int64_t SimpleValidator::voting_power() const {
  // @@protoc_insertion_point(field_get:tendermint.types.SimpleValidator.voting_power)
  return _internal_voting_power();
}
inline void SimpleValidator::set_voting_power(::int64_t value) {
  _internal_set_voting_power(value);
  // @@protoc_insertion_point(field_set:tendermint.types.SimpleValidator.voting_power)
}
inline ::int64_t SimpleValidator::_internal_voting_power() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.voting_power_;
}
inline void SimpleValidator::_internal_set_voting_power(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voting_power_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace tendermint


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::tendermint::types::BlockIDFlag> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tendermint::types::BlockIDFlag>() {
  return ::tendermint::types::BlockIDFlag_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // tendermint_2ftypes_2fvalidator_2eproto_2epb_2eh
