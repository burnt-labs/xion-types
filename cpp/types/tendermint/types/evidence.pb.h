// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tendermint/types/evidence.proto
// Protobuf C++ Version: 5.29.4

#ifndef tendermint_2ftypes_2fevidence_2eproto_2epb_2eh
#define tendermint_2ftypes_2fevidence_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "tendermint/types/types.pb.h"
#include "tendermint/types/validator.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tendermint_2ftypes_2fevidence_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_tendermint_2ftypes_2fevidence_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tendermint_2ftypes_2fevidence_2eproto;
namespace tendermint {
namespace types {
class DuplicateVoteEvidence;
struct DuplicateVoteEvidenceDefaultTypeInternal;
extern DuplicateVoteEvidenceDefaultTypeInternal _DuplicateVoteEvidence_default_instance_;
class Evidence;
struct EvidenceDefaultTypeInternal;
extern EvidenceDefaultTypeInternal _Evidence_default_instance_;
class EvidenceList;
struct EvidenceListDefaultTypeInternal;
extern EvidenceListDefaultTypeInternal _EvidenceList_default_instance_;
class LightClientAttackEvidence;
struct LightClientAttackEvidenceDefaultTypeInternal;
extern LightClientAttackEvidenceDefaultTypeInternal _LightClientAttackEvidence_default_instance_;
}  // namespace types
}  // namespace tendermint
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tendermint {
namespace types {

// ===================================================================


// -------------------------------------------------------------------

class DuplicateVoteEvidence final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.types.DuplicateVoteEvidence) */ {
 public:
  inline DuplicateVoteEvidence() : DuplicateVoteEvidence(nullptr) {}
  ~DuplicateVoteEvidence() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DuplicateVoteEvidence* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DuplicateVoteEvidence));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DuplicateVoteEvidence(
      ::google::protobuf::internal::ConstantInitialized);

  inline DuplicateVoteEvidence(const DuplicateVoteEvidence& from) : DuplicateVoteEvidence(nullptr, from) {}
  inline DuplicateVoteEvidence(DuplicateVoteEvidence&& from) noexcept
      : DuplicateVoteEvidence(nullptr, std::move(from)) {}
  inline DuplicateVoteEvidence& operator=(const DuplicateVoteEvidence& from) {
    CopyFrom(from);
    return *this;
  }
  inline DuplicateVoteEvidence& operator=(DuplicateVoteEvidence&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DuplicateVoteEvidence& default_instance() {
    return *internal_default_instance();
  }
  static inline const DuplicateVoteEvidence* internal_default_instance() {
    return reinterpret_cast<const DuplicateVoteEvidence*>(
        &_DuplicateVoteEvidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(DuplicateVoteEvidence& a, DuplicateVoteEvidence& b) { a.Swap(&b); }
  inline void Swap(DuplicateVoteEvidence* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DuplicateVoteEvidence* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DuplicateVoteEvidence* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DuplicateVoteEvidence>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DuplicateVoteEvidence& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DuplicateVoteEvidence& from) { DuplicateVoteEvidence::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DuplicateVoteEvidence* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.types.DuplicateVoteEvidence"; }

 protected:
  explicit DuplicateVoteEvidence(::google::protobuf::Arena* arena);
  DuplicateVoteEvidence(::google::protobuf::Arena* arena, const DuplicateVoteEvidence& from);
  DuplicateVoteEvidence(::google::protobuf::Arena* arena, DuplicateVoteEvidence&& from) noexcept
      : DuplicateVoteEvidence(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVoteAFieldNumber = 1,
    kVoteBFieldNumber = 2,
    kTimestampFieldNumber = 5,
    kTotalVotingPowerFieldNumber = 3,
    kValidatorPowerFieldNumber = 4,
  };
  // .tendermint.types.Vote vote_a = 1 [json_name = "voteA"];
  bool has_vote_a() const;
  void clear_vote_a() ;
  const ::tendermint::types::Vote& vote_a() const;
  PROTOBUF_NODISCARD ::tendermint::types::Vote* release_vote_a();
  ::tendermint::types::Vote* mutable_vote_a();
  void set_allocated_vote_a(::tendermint::types::Vote* value);
  void unsafe_arena_set_allocated_vote_a(::tendermint::types::Vote* value);
  ::tendermint::types::Vote* unsafe_arena_release_vote_a();

  private:
  const ::tendermint::types::Vote& _internal_vote_a() const;
  ::tendermint::types::Vote* _internal_mutable_vote_a();

  public:
  // .tendermint.types.Vote vote_b = 2 [json_name = "voteB"];
  bool has_vote_b() const;
  void clear_vote_b() ;
  const ::tendermint::types::Vote& vote_b() const;
  PROTOBUF_NODISCARD ::tendermint::types::Vote* release_vote_b();
  ::tendermint::types::Vote* mutable_vote_b();
  void set_allocated_vote_b(::tendermint::types::Vote* value);
  void unsafe_arena_set_allocated_vote_b(::tendermint::types::Vote* value);
  ::tendermint::types::Vote* unsafe_arena_release_vote_b();

  private:
  const ::tendermint::types::Vote& _internal_vote_b() const;
  ::tendermint::types::Vote* _internal_mutable_vote_b();

  public:
  // .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::google::protobuf::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_timestamp();

  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  ::google::protobuf::Timestamp* _internal_mutable_timestamp();

  public:
  // int64 total_voting_power = 3 [json_name = "totalVotingPower"];
  void clear_total_voting_power() ;
  ::int64_t total_voting_power() const;
  void set_total_voting_power(::int64_t value);

  private:
  ::int64_t _internal_total_voting_power() const;
  void _internal_set_total_voting_power(::int64_t value);

  public:
  // int64 validator_power = 4 [json_name = "validatorPower"];
  void clear_validator_power() ;
  ::int64_t validator_power() const;
  void set_validator_power(::int64_t value);

  private:
  ::int64_t _internal_validator_power() const;
  void _internal_set_validator_power(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.types.DuplicateVoteEvidence)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DuplicateVoteEvidence& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::tendermint::types::Vote* vote_a_;
    ::tendermint::types::Vote* vote_b_;
    ::google::protobuf::Timestamp* timestamp_;
    ::int64_t total_voting_power_;
    ::int64_t validator_power_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2fevidence_2eproto;
};
// -------------------------------------------------------------------

class LightClientAttackEvidence final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.types.LightClientAttackEvidence) */ {
 public:
  inline LightClientAttackEvidence() : LightClientAttackEvidence(nullptr) {}
  ~LightClientAttackEvidence() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LightClientAttackEvidence* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LightClientAttackEvidence));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LightClientAttackEvidence(
      ::google::protobuf::internal::ConstantInitialized);

  inline LightClientAttackEvidence(const LightClientAttackEvidence& from) : LightClientAttackEvidence(nullptr, from) {}
  inline LightClientAttackEvidence(LightClientAttackEvidence&& from) noexcept
      : LightClientAttackEvidence(nullptr, std::move(from)) {}
  inline LightClientAttackEvidence& operator=(const LightClientAttackEvidence& from) {
    CopyFrom(from);
    return *this;
  }
  inline LightClientAttackEvidence& operator=(LightClientAttackEvidence&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LightClientAttackEvidence& default_instance() {
    return *internal_default_instance();
  }
  static inline const LightClientAttackEvidence* internal_default_instance() {
    return reinterpret_cast<const LightClientAttackEvidence*>(
        &_LightClientAttackEvidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(LightClientAttackEvidence& a, LightClientAttackEvidence& b) { a.Swap(&b); }
  inline void Swap(LightClientAttackEvidence* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LightClientAttackEvidence* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LightClientAttackEvidence* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LightClientAttackEvidence>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LightClientAttackEvidence& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LightClientAttackEvidence& from) { LightClientAttackEvidence::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LightClientAttackEvidence* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.types.LightClientAttackEvidence"; }

 protected:
  explicit LightClientAttackEvidence(::google::protobuf::Arena* arena);
  LightClientAttackEvidence(::google::protobuf::Arena* arena, const LightClientAttackEvidence& from);
  LightClientAttackEvidence(::google::protobuf::Arena* arena, LightClientAttackEvidence&& from) noexcept
      : LightClientAttackEvidence(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kByzantineValidatorsFieldNumber = 3,
    kConflictingBlockFieldNumber = 1,
    kTimestampFieldNumber = 5,
    kCommonHeightFieldNumber = 2,
    kTotalVotingPowerFieldNumber = 4,
  };
  // repeated .tendermint.types.Validator byzantine_validators = 3 [json_name = "byzantineValidators"];
  int byzantine_validators_size() const;
  private:
  int _internal_byzantine_validators_size() const;

  public:
  void clear_byzantine_validators() ;
  ::tendermint::types::Validator* mutable_byzantine_validators(int index);
  ::google::protobuf::RepeatedPtrField<::tendermint::types::Validator>* mutable_byzantine_validators();

  private:
  const ::google::protobuf::RepeatedPtrField<::tendermint::types::Validator>& _internal_byzantine_validators() const;
  ::google::protobuf::RepeatedPtrField<::tendermint::types::Validator>* _internal_mutable_byzantine_validators();
  public:
  const ::tendermint::types::Validator& byzantine_validators(int index) const;
  ::tendermint::types::Validator* add_byzantine_validators();
  const ::google::protobuf::RepeatedPtrField<::tendermint::types::Validator>& byzantine_validators() const;
  // .tendermint.types.LightBlock conflicting_block = 1 [json_name = "conflictingBlock"];
  bool has_conflicting_block() const;
  void clear_conflicting_block() ;
  const ::tendermint::types::LightBlock& conflicting_block() const;
  PROTOBUF_NODISCARD ::tendermint::types::LightBlock* release_conflicting_block();
  ::tendermint::types::LightBlock* mutable_conflicting_block();
  void set_allocated_conflicting_block(::tendermint::types::LightBlock* value);
  void unsafe_arena_set_allocated_conflicting_block(::tendermint::types::LightBlock* value);
  ::tendermint::types::LightBlock* unsafe_arena_release_conflicting_block();

  private:
  const ::tendermint::types::LightBlock& _internal_conflicting_block() const;
  ::tendermint::types::LightBlock* _internal_mutable_conflicting_block();

  public:
  // .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::google::protobuf::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_timestamp();

  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  ::google::protobuf::Timestamp* _internal_mutable_timestamp();

  public:
  // int64 common_height = 2 [json_name = "commonHeight"];
  void clear_common_height() ;
  ::int64_t common_height() const;
  void set_common_height(::int64_t value);

  private:
  ::int64_t _internal_common_height() const;
  void _internal_set_common_height(::int64_t value);

  public:
  // int64 total_voting_power = 4 [json_name = "totalVotingPower"];
  void clear_total_voting_power() ;
  ::int64_t total_voting_power() const;
  void set_total_voting_power(::int64_t value);

  private:
  ::int64_t _internal_total_voting_power() const;
  void _internal_set_total_voting_power(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.types.LightClientAttackEvidence)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LightClientAttackEvidence& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tendermint::types::Validator > byzantine_validators_;
    ::tendermint::types::LightBlock* conflicting_block_;
    ::google::protobuf::Timestamp* timestamp_;
    ::int64_t common_height_;
    ::int64_t total_voting_power_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2fevidence_2eproto;
};
// -------------------------------------------------------------------

class Evidence final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.types.Evidence) */ {
 public:
  inline Evidence() : Evidence(nullptr) {}
  ~Evidence() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Evidence* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Evidence));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Evidence(
      ::google::protobuf::internal::ConstantInitialized);

  inline Evidence(const Evidence& from) : Evidence(nullptr, from) {}
  inline Evidence(Evidence&& from) noexcept
      : Evidence(nullptr, std::move(from)) {}
  inline Evidence& operator=(const Evidence& from) {
    CopyFrom(from);
    return *this;
  }
  inline Evidence& operator=(Evidence&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Evidence& default_instance() {
    return *internal_default_instance();
  }
  enum SumCase {
    kDuplicateVoteEvidence = 1,
    kLightClientAttackEvidence = 2,
    SUM_NOT_SET = 0,
  };
  static inline const Evidence* internal_default_instance() {
    return reinterpret_cast<const Evidence*>(
        &_Evidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Evidence& a, Evidence& b) { a.Swap(&b); }
  inline void Swap(Evidence* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Evidence* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Evidence* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Evidence>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Evidence& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Evidence& from) { Evidence::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Evidence* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.types.Evidence"; }

 protected:
  explicit Evidence(::google::protobuf::Arena* arena);
  Evidence(::google::protobuf::Arena* arena, const Evidence& from);
  Evidence(::google::protobuf::Arena* arena, Evidence&& from) noexcept
      : Evidence(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDuplicateVoteEvidenceFieldNumber = 1,
    kLightClientAttackEvidenceFieldNumber = 2,
  };
  // .tendermint.types.DuplicateVoteEvidence duplicate_vote_evidence = 1 [json_name = "duplicateVoteEvidence"];
  bool has_duplicate_vote_evidence() const;
  private:
  bool _internal_has_duplicate_vote_evidence() const;

  public:
  void clear_duplicate_vote_evidence() ;
  const ::tendermint::types::DuplicateVoteEvidence& duplicate_vote_evidence() const;
  PROTOBUF_NODISCARD ::tendermint::types::DuplicateVoteEvidence* release_duplicate_vote_evidence();
  ::tendermint::types::DuplicateVoteEvidence* mutable_duplicate_vote_evidence();
  void set_allocated_duplicate_vote_evidence(::tendermint::types::DuplicateVoteEvidence* value);
  void unsafe_arena_set_allocated_duplicate_vote_evidence(::tendermint::types::DuplicateVoteEvidence* value);
  ::tendermint::types::DuplicateVoteEvidence* unsafe_arena_release_duplicate_vote_evidence();

  private:
  const ::tendermint::types::DuplicateVoteEvidence& _internal_duplicate_vote_evidence() const;
  ::tendermint::types::DuplicateVoteEvidence* _internal_mutable_duplicate_vote_evidence();

  public:
  // .tendermint.types.LightClientAttackEvidence light_client_attack_evidence = 2 [json_name = "lightClientAttackEvidence"];
  bool has_light_client_attack_evidence() const;
  private:
  bool _internal_has_light_client_attack_evidence() const;

  public:
  void clear_light_client_attack_evidence() ;
  const ::tendermint::types::LightClientAttackEvidence& light_client_attack_evidence() const;
  PROTOBUF_NODISCARD ::tendermint::types::LightClientAttackEvidence* release_light_client_attack_evidence();
  ::tendermint::types::LightClientAttackEvidence* mutable_light_client_attack_evidence();
  void set_allocated_light_client_attack_evidence(::tendermint::types::LightClientAttackEvidence* value);
  void unsafe_arena_set_allocated_light_client_attack_evidence(::tendermint::types::LightClientAttackEvidence* value);
  ::tendermint::types::LightClientAttackEvidence* unsafe_arena_release_light_client_attack_evidence();

  private:
  const ::tendermint::types::LightClientAttackEvidence& _internal_light_client_attack_evidence() const;
  ::tendermint::types::LightClientAttackEvidence* _internal_mutable_light_client_attack_evidence();

  public:
  void clear_sum();
  SumCase sum_case() const;
  // @@protoc_insertion_point(class_scope:tendermint.types.Evidence)
 private:
  class _Internal;
  void set_has_duplicate_vote_evidence();
  void set_has_light_client_attack_evidence();
  inline bool has_sum() const;
  inline void clear_has_sum();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Evidence& from_msg);
    union SumUnion {
      constexpr SumUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::tendermint::types::DuplicateVoteEvidence* duplicate_vote_evidence_;
      ::tendermint::types::LightClientAttackEvidence* light_client_attack_evidence_;
    } sum_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2fevidence_2eproto;
};
// -------------------------------------------------------------------

class EvidenceList final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.types.EvidenceList) */ {
 public:
  inline EvidenceList() : EvidenceList(nullptr) {}
  ~EvidenceList() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EvidenceList* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EvidenceList));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EvidenceList(
      ::google::protobuf::internal::ConstantInitialized);

  inline EvidenceList(const EvidenceList& from) : EvidenceList(nullptr, from) {}
  inline EvidenceList(EvidenceList&& from) noexcept
      : EvidenceList(nullptr, std::move(from)) {}
  inline EvidenceList& operator=(const EvidenceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline EvidenceList& operator=(EvidenceList&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EvidenceList& default_instance() {
    return *internal_default_instance();
  }
  static inline const EvidenceList* internal_default_instance() {
    return reinterpret_cast<const EvidenceList*>(
        &_EvidenceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(EvidenceList& a, EvidenceList& b) { a.Swap(&b); }
  inline void Swap(EvidenceList* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EvidenceList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EvidenceList* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EvidenceList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EvidenceList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EvidenceList& from) { EvidenceList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EvidenceList* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.types.EvidenceList"; }

 protected:
  explicit EvidenceList(::google::protobuf::Arena* arena);
  EvidenceList(::google::protobuf::Arena* arena, const EvidenceList& from);
  EvidenceList(::google::protobuf::Arena* arena, EvidenceList&& from) noexcept
      : EvidenceList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEvidenceFieldNumber = 1,
  };
  // repeated .tendermint.types.Evidence evidence = 1 [json_name = "evidence", (.gogoproto.nullable) = false];
  int evidence_size() const;
  private:
  int _internal_evidence_size() const;

  public:
  void clear_evidence() ;
  ::tendermint::types::Evidence* mutable_evidence(int index);
  ::google::protobuf::RepeatedPtrField<::tendermint::types::Evidence>* mutable_evidence();

  private:
  const ::google::protobuf::RepeatedPtrField<::tendermint::types::Evidence>& _internal_evidence() const;
  ::google::protobuf::RepeatedPtrField<::tendermint::types::Evidence>* _internal_mutable_evidence();
  public:
  const ::tendermint::types::Evidence& evidence(int index) const;
  ::tendermint::types::Evidence* add_evidence();
  const ::google::protobuf::RepeatedPtrField<::tendermint::types::Evidence>& evidence() const;
  // @@protoc_insertion_point(class_scope:tendermint.types.EvidenceList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EvidenceList& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tendermint::types::Evidence > evidence_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2fevidence_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Evidence

// .tendermint.types.DuplicateVoteEvidence duplicate_vote_evidence = 1 [json_name = "duplicateVoteEvidence"];
inline bool Evidence::has_duplicate_vote_evidence() const {
  return sum_case() == kDuplicateVoteEvidence;
}
inline bool Evidence::_internal_has_duplicate_vote_evidence() const {
  return sum_case() == kDuplicateVoteEvidence;
}
inline void Evidence::set_has_duplicate_vote_evidence() {
  _impl_._oneof_case_[0] = kDuplicateVoteEvidence;
}
inline void Evidence::clear_duplicate_vote_evidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (sum_case() == kDuplicateVoteEvidence) {
    if (GetArena() == nullptr) {
      delete _impl_.sum_.duplicate_vote_evidence_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.sum_.duplicate_vote_evidence_);
    }
    clear_has_sum();
  }
}
inline ::tendermint::types::DuplicateVoteEvidence* Evidence::release_duplicate_vote_evidence() {
  // @@protoc_insertion_point(field_release:tendermint.types.Evidence.duplicate_vote_evidence)
  if (sum_case() == kDuplicateVoteEvidence) {
    clear_has_sum();
    auto* temp = _impl_.sum_.duplicate_vote_evidence_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.sum_.duplicate_vote_evidence_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::types::DuplicateVoteEvidence& Evidence::_internal_duplicate_vote_evidence() const {
  return sum_case() == kDuplicateVoteEvidence ? *_impl_.sum_.duplicate_vote_evidence_ : reinterpret_cast<::tendermint::types::DuplicateVoteEvidence&>(::tendermint::types::_DuplicateVoteEvidence_default_instance_);
}
inline const ::tendermint::types::DuplicateVoteEvidence& Evidence::duplicate_vote_evidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.types.Evidence.duplicate_vote_evidence)
  return _internal_duplicate_vote_evidence();
}
inline ::tendermint::types::DuplicateVoteEvidence* Evidence::unsafe_arena_release_duplicate_vote_evidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.types.Evidence.duplicate_vote_evidence)
  if (sum_case() == kDuplicateVoteEvidence) {
    clear_has_sum();
    auto* temp = _impl_.sum_.duplicate_vote_evidence_;
    _impl_.sum_.duplicate_vote_evidence_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Evidence::unsafe_arena_set_allocated_duplicate_vote_evidence(::tendermint::types::DuplicateVoteEvidence* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_sum();
  if (value) {
    set_has_duplicate_vote_evidence();
    _impl_.sum_.duplicate_vote_evidence_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.Evidence.duplicate_vote_evidence)
}
inline ::tendermint::types::DuplicateVoteEvidence* Evidence::_internal_mutable_duplicate_vote_evidence() {
  if (sum_case() != kDuplicateVoteEvidence) {
    clear_sum();
    set_has_duplicate_vote_evidence();
    _impl_.sum_.duplicate_vote_evidence_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::types::DuplicateVoteEvidence>(GetArena());
  }
  return _impl_.sum_.duplicate_vote_evidence_;
}
inline ::tendermint::types::DuplicateVoteEvidence* Evidence::mutable_duplicate_vote_evidence() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::types::DuplicateVoteEvidence* _msg = _internal_mutable_duplicate_vote_evidence();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Evidence.duplicate_vote_evidence)
  return _msg;
}

// .tendermint.types.LightClientAttackEvidence light_client_attack_evidence = 2 [json_name = "lightClientAttackEvidence"];
inline bool Evidence::has_light_client_attack_evidence() const {
  return sum_case() == kLightClientAttackEvidence;
}
inline bool Evidence::_internal_has_light_client_attack_evidence() const {
  return sum_case() == kLightClientAttackEvidence;
}
inline void Evidence::set_has_light_client_attack_evidence() {
  _impl_._oneof_case_[0] = kLightClientAttackEvidence;
}
inline void Evidence::clear_light_client_attack_evidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (sum_case() == kLightClientAttackEvidence) {
    if (GetArena() == nullptr) {
      delete _impl_.sum_.light_client_attack_evidence_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.sum_.light_client_attack_evidence_);
    }
    clear_has_sum();
  }
}
inline ::tendermint::types::LightClientAttackEvidence* Evidence::release_light_client_attack_evidence() {
  // @@protoc_insertion_point(field_release:tendermint.types.Evidence.light_client_attack_evidence)
  if (sum_case() == kLightClientAttackEvidence) {
    clear_has_sum();
    auto* temp = _impl_.sum_.light_client_attack_evidence_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.sum_.light_client_attack_evidence_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::types::LightClientAttackEvidence& Evidence::_internal_light_client_attack_evidence() const {
  return sum_case() == kLightClientAttackEvidence ? *_impl_.sum_.light_client_attack_evidence_ : reinterpret_cast<::tendermint::types::LightClientAttackEvidence&>(::tendermint::types::_LightClientAttackEvidence_default_instance_);
}
inline const ::tendermint::types::LightClientAttackEvidence& Evidence::light_client_attack_evidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.types.Evidence.light_client_attack_evidence)
  return _internal_light_client_attack_evidence();
}
inline ::tendermint::types::LightClientAttackEvidence* Evidence::unsafe_arena_release_light_client_attack_evidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.types.Evidence.light_client_attack_evidence)
  if (sum_case() == kLightClientAttackEvidence) {
    clear_has_sum();
    auto* temp = _impl_.sum_.light_client_attack_evidence_;
    _impl_.sum_.light_client_attack_evidence_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Evidence::unsafe_arena_set_allocated_light_client_attack_evidence(::tendermint::types::LightClientAttackEvidence* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_sum();
  if (value) {
    set_has_light_client_attack_evidence();
    _impl_.sum_.light_client_attack_evidence_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.Evidence.light_client_attack_evidence)
}
inline ::tendermint::types::LightClientAttackEvidence* Evidence::_internal_mutable_light_client_attack_evidence() {
  if (sum_case() != kLightClientAttackEvidence) {
    clear_sum();
    set_has_light_client_attack_evidence();
    _impl_.sum_.light_client_attack_evidence_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::types::LightClientAttackEvidence>(GetArena());
  }
  return _impl_.sum_.light_client_attack_evidence_;
}
inline ::tendermint::types::LightClientAttackEvidence* Evidence::mutable_light_client_attack_evidence() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::types::LightClientAttackEvidence* _msg = _internal_mutable_light_client_attack_evidence();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Evidence.light_client_attack_evidence)
  return _msg;
}

inline bool Evidence::has_sum() const {
  return sum_case() != SUM_NOT_SET;
}
inline void Evidence::clear_has_sum() {
  _impl_._oneof_case_[0] = SUM_NOT_SET;
}
inline Evidence::SumCase Evidence::sum_case() const {
  return Evidence::SumCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// DuplicateVoteEvidence

// .tendermint.types.Vote vote_a = 1 [json_name = "voteA"];
inline bool DuplicateVoteEvidence::has_vote_a() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vote_a_ != nullptr);
  return value;
}
inline const ::tendermint::types::Vote& DuplicateVoteEvidence::_internal_vote_a() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::types::Vote* p = _impl_.vote_a_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::Vote&>(::tendermint::types::_Vote_default_instance_);
}
inline const ::tendermint::types::Vote& DuplicateVoteEvidence::vote_a() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.types.DuplicateVoteEvidence.vote_a)
  return _internal_vote_a();
}
inline void DuplicateVoteEvidence::unsafe_arena_set_allocated_vote_a(::tendermint::types::Vote* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vote_a_);
  }
  _impl_.vote_a_ = reinterpret_cast<::tendermint::types::Vote*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.DuplicateVoteEvidence.vote_a)
}
inline ::tendermint::types::Vote* DuplicateVoteEvidence::release_vote_a() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::Vote* released = _impl_.vote_a_;
  _impl_.vote_a_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::types::Vote* DuplicateVoteEvidence::unsafe_arena_release_vote_a() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.types.DuplicateVoteEvidence.vote_a)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::Vote* temp = _impl_.vote_a_;
  _impl_.vote_a_ = nullptr;
  return temp;
}
inline ::tendermint::types::Vote* DuplicateVoteEvidence::_internal_mutable_vote_a() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.vote_a_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::types::Vote>(GetArena());
    _impl_.vote_a_ = reinterpret_cast<::tendermint::types::Vote*>(p);
  }
  return _impl_.vote_a_;
}
inline ::tendermint::types::Vote* DuplicateVoteEvidence::mutable_vote_a() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tendermint::types::Vote* _msg = _internal_mutable_vote_a();
  // @@protoc_insertion_point(field_mutable:tendermint.types.DuplicateVoteEvidence.vote_a)
  return _msg;
}
inline void DuplicateVoteEvidence::set_allocated_vote_a(::tendermint::types::Vote* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vote_a_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.vote_a_ = reinterpret_cast<::tendermint::types::Vote*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.DuplicateVoteEvidence.vote_a)
}

// .tendermint.types.Vote vote_b = 2 [json_name = "voteB"];
inline bool DuplicateVoteEvidence::has_vote_b() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vote_b_ != nullptr);
  return value;
}
inline const ::tendermint::types::Vote& DuplicateVoteEvidence::_internal_vote_b() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::types::Vote* p = _impl_.vote_b_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::Vote&>(::tendermint::types::_Vote_default_instance_);
}
inline const ::tendermint::types::Vote& DuplicateVoteEvidence::vote_b() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.types.DuplicateVoteEvidence.vote_b)
  return _internal_vote_b();
}
inline void DuplicateVoteEvidence::unsafe_arena_set_allocated_vote_b(::tendermint::types::Vote* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vote_b_);
  }
  _impl_.vote_b_ = reinterpret_cast<::tendermint::types::Vote*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.DuplicateVoteEvidence.vote_b)
}
inline ::tendermint::types::Vote* DuplicateVoteEvidence::release_vote_b() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::types::Vote* released = _impl_.vote_b_;
  _impl_.vote_b_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::types::Vote* DuplicateVoteEvidence::unsafe_arena_release_vote_b() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.types.DuplicateVoteEvidence.vote_b)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::types::Vote* temp = _impl_.vote_b_;
  _impl_.vote_b_ = nullptr;
  return temp;
}
inline ::tendermint::types::Vote* DuplicateVoteEvidence::_internal_mutable_vote_b() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.vote_b_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::types::Vote>(GetArena());
    _impl_.vote_b_ = reinterpret_cast<::tendermint::types::Vote*>(p);
  }
  return _impl_.vote_b_;
}
inline ::tendermint::types::Vote* DuplicateVoteEvidence::mutable_vote_b() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tendermint::types::Vote* _msg = _internal_mutable_vote_b();
  // @@protoc_insertion_point(field_mutable:tendermint.types.DuplicateVoteEvidence.vote_b)
  return _msg;
}
inline void DuplicateVoteEvidence::set_allocated_vote_b(::tendermint::types::Vote* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vote_b_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.vote_b_ = reinterpret_cast<::tendermint::types::Vote*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.DuplicateVoteEvidence.vote_b)
}

// int64 total_voting_power = 3 [json_name = "totalVotingPower"];
inline void DuplicateVoteEvidence::clear_total_voting_power() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_voting_power_ = ::int64_t{0};
}
inline ::int64_t DuplicateVoteEvidence::total_voting_power() const {
  // @@protoc_insertion_point(field_get:tendermint.types.DuplicateVoteEvidence.total_voting_power)
  return _internal_total_voting_power();
}
inline void DuplicateVoteEvidence::set_total_voting_power(::int64_t value) {
  _internal_set_total_voting_power(value);
  // @@protoc_insertion_point(field_set:tendermint.types.DuplicateVoteEvidence.total_voting_power)
}
inline ::int64_t DuplicateVoteEvidence::_internal_total_voting_power() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_voting_power_;
}
inline void DuplicateVoteEvidence::_internal_set_total_voting_power(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_voting_power_ = value;
}

// int64 validator_power = 4 [json_name = "validatorPower"];
inline void DuplicateVoteEvidence::clear_validator_power() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validator_power_ = ::int64_t{0};
}
inline ::int64_t DuplicateVoteEvidence::validator_power() const {
  // @@protoc_insertion_point(field_get:tendermint.types.DuplicateVoteEvidence.validator_power)
  return _internal_validator_power();
}
inline void DuplicateVoteEvidence::set_validator_power(::int64_t value) {
  _internal_set_validator_power(value);
  // @@protoc_insertion_point(field_set:tendermint.types.DuplicateVoteEvidence.validator_power)
}
inline ::int64_t DuplicateVoteEvidence::_internal_validator_power() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.validator_power_;
}
inline void DuplicateVoteEvidence::_internal_set_validator_power(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validator_power_ = value;
}

// .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool DuplicateVoteEvidence::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& DuplicateVoteEvidence::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& DuplicateVoteEvidence::timestamp() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.types.DuplicateVoteEvidence.timestamp)
  return _internal_timestamp();
}
inline void DuplicateVoteEvidence::unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.DuplicateVoteEvidence.timestamp)
}
inline ::google::protobuf::Timestamp* DuplicateVoteEvidence::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* released = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* DuplicateVoteEvidence::unsafe_arena_release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.types.DuplicateVoteEvidence.timestamp)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* DuplicateVoteEvidence::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timestamp_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.timestamp_;
}
inline ::google::protobuf::Timestamp* DuplicateVoteEvidence::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:tendermint.types.DuplicateVoteEvidence.timestamp)
  return _msg;
}
inline void DuplicateVoteEvidence::set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.DuplicateVoteEvidence.timestamp)
}

// -------------------------------------------------------------------

// LightClientAttackEvidence

// .tendermint.types.LightBlock conflicting_block = 1 [json_name = "conflictingBlock"];
inline bool LightClientAttackEvidence::has_conflicting_block() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.conflicting_block_ != nullptr);
  return value;
}
inline const ::tendermint::types::LightBlock& LightClientAttackEvidence::_internal_conflicting_block() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::types::LightBlock* p = _impl_.conflicting_block_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::LightBlock&>(::tendermint::types::_LightBlock_default_instance_);
}
inline const ::tendermint::types::LightBlock& LightClientAttackEvidence::conflicting_block() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.types.LightClientAttackEvidence.conflicting_block)
  return _internal_conflicting_block();
}
inline void LightClientAttackEvidence::unsafe_arena_set_allocated_conflicting_block(::tendermint::types::LightBlock* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.conflicting_block_);
  }
  _impl_.conflicting_block_ = reinterpret_cast<::tendermint::types::LightBlock*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.LightClientAttackEvidence.conflicting_block)
}
inline ::tendermint::types::LightBlock* LightClientAttackEvidence::release_conflicting_block() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::LightBlock* released = _impl_.conflicting_block_;
  _impl_.conflicting_block_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::types::LightBlock* LightClientAttackEvidence::unsafe_arena_release_conflicting_block() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.types.LightClientAttackEvidence.conflicting_block)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::LightBlock* temp = _impl_.conflicting_block_;
  _impl_.conflicting_block_ = nullptr;
  return temp;
}
inline ::tendermint::types::LightBlock* LightClientAttackEvidence::_internal_mutable_conflicting_block() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.conflicting_block_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::types::LightBlock>(GetArena());
    _impl_.conflicting_block_ = reinterpret_cast<::tendermint::types::LightBlock*>(p);
  }
  return _impl_.conflicting_block_;
}
inline ::tendermint::types::LightBlock* LightClientAttackEvidence::mutable_conflicting_block() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tendermint::types::LightBlock* _msg = _internal_mutable_conflicting_block();
  // @@protoc_insertion_point(field_mutable:tendermint.types.LightClientAttackEvidence.conflicting_block)
  return _msg;
}
inline void LightClientAttackEvidence::set_allocated_conflicting_block(::tendermint::types::LightBlock* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.conflicting_block_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.conflicting_block_ = reinterpret_cast<::tendermint::types::LightBlock*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.LightClientAttackEvidence.conflicting_block)
}

// int64 common_height = 2 [json_name = "commonHeight"];
inline void LightClientAttackEvidence::clear_common_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.common_height_ = ::int64_t{0};
}
inline ::int64_t LightClientAttackEvidence::common_height() const {
  // @@protoc_insertion_point(field_get:tendermint.types.LightClientAttackEvidence.common_height)
  return _internal_common_height();
}
inline void LightClientAttackEvidence::set_common_height(::int64_t value) {
  _internal_set_common_height(value);
  // @@protoc_insertion_point(field_set:tendermint.types.LightClientAttackEvidence.common_height)
}
inline ::int64_t LightClientAttackEvidence::_internal_common_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.common_height_;
}
inline void LightClientAttackEvidence::_internal_set_common_height(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.common_height_ = value;
}

// repeated .tendermint.types.Validator byzantine_validators = 3 [json_name = "byzantineValidators"];
inline int LightClientAttackEvidence::_internal_byzantine_validators_size() const {
  return _internal_byzantine_validators().size();
}
inline int LightClientAttackEvidence::byzantine_validators_size() const {
  return _internal_byzantine_validators_size();
}
inline ::tendermint::types::Validator* LightClientAttackEvidence::mutable_byzantine_validators(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tendermint.types.LightClientAttackEvidence.byzantine_validators)
  return _internal_mutable_byzantine_validators()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::types::Validator>* LightClientAttackEvidence::mutable_byzantine_validators()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tendermint.types.LightClientAttackEvidence.byzantine_validators)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_byzantine_validators();
}
inline const ::tendermint::types::Validator& LightClientAttackEvidence::byzantine_validators(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.types.LightClientAttackEvidence.byzantine_validators)
  return _internal_byzantine_validators().Get(index);
}
inline ::tendermint::types::Validator* LightClientAttackEvidence::add_byzantine_validators() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tendermint::types::Validator* _add = _internal_mutable_byzantine_validators()->Add();
  // @@protoc_insertion_point(field_add:tendermint.types.LightClientAttackEvidence.byzantine_validators)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::types::Validator>& LightClientAttackEvidence::byzantine_validators() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tendermint.types.LightClientAttackEvidence.byzantine_validators)
  return _internal_byzantine_validators();
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::types::Validator>&
LightClientAttackEvidence::_internal_byzantine_validators() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.byzantine_validators_;
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::types::Validator>*
LightClientAttackEvidence::_internal_mutable_byzantine_validators() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.byzantine_validators_;
}

// int64 total_voting_power = 4 [json_name = "totalVotingPower"];
inline void LightClientAttackEvidence::clear_total_voting_power() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_voting_power_ = ::int64_t{0};
}
inline ::int64_t LightClientAttackEvidence::total_voting_power() const {
  // @@protoc_insertion_point(field_get:tendermint.types.LightClientAttackEvidence.total_voting_power)
  return _internal_total_voting_power();
}
inline void LightClientAttackEvidence::set_total_voting_power(::int64_t value) {
  _internal_set_total_voting_power(value);
  // @@protoc_insertion_point(field_set:tendermint.types.LightClientAttackEvidence.total_voting_power)
}
inline ::int64_t LightClientAttackEvidence::_internal_total_voting_power() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_voting_power_;
}
inline void LightClientAttackEvidence::_internal_set_total_voting_power(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_voting_power_ = value;
}

// .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool LightClientAttackEvidence::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& LightClientAttackEvidence::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& LightClientAttackEvidence::timestamp() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.types.LightClientAttackEvidence.timestamp)
  return _internal_timestamp();
}
inline void LightClientAttackEvidence::unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.LightClientAttackEvidence.timestamp)
}
inline ::google::protobuf::Timestamp* LightClientAttackEvidence::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* LightClientAttackEvidence::unsafe_arena_release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.types.LightClientAttackEvidence.timestamp)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* LightClientAttackEvidence::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timestamp_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.timestamp_;
}
inline ::google::protobuf::Timestamp* LightClientAttackEvidence::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:tendermint.types.LightClientAttackEvidence.timestamp)
  return _msg;
}
inline void LightClientAttackEvidence::set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.LightClientAttackEvidence.timestamp)
}

// -------------------------------------------------------------------

// EvidenceList

// repeated .tendermint.types.Evidence evidence = 1 [json_name = "evidence", (.gogoproto.nullable) = false];
inline int EvidenceList::_internal_evidence_size() const {
  return _internal_evidence().size();
}
inline int EvidenceList::evidence_size() const {
  return _internal_evidence_size();
}
inline void EvidenceList::clear_evidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.evidence_.Clear();
}
inline ::tendermint::types::Evidence* EvidenceList::mutable_evidence(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tendermint.types.EvidenceList.evidence)
  return _internal_mutable_evidence()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::types::Evidence>* EvidenceList::mutable_evidence()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tendermint.types.EvidenceList.evidence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_evidence();
}
inline const ::tendermint::types::Evidence& EvidenceList::evidence(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.types.EvidenceList.evidence)
  return _internal_evidence().Get(index);
}
inline ::tendermint::types::Evidence* EvidenceList::add_evidence() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tendermint::types::Evidence* _add = _internal_mutable_evidence()->Add();
  // @@protoc_insertion_point(field_add:tendermint.types.EvidenceList.evidence)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::types::Evidence>& EvidenceList::evidence() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tendermint.types.EvidenceList.evidence)
  return _internal_evidence();
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::types::Evidence>&
EvidenceList::_internal_evidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.evidence_;
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::types::Evidence>*
EvidenceList::_internal_mutable_evidence() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.evidence_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace tendermint


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // tendermint_2ftypes_2fevidence_2eproto_2epb_2eh
