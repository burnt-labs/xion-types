// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tendermint/types/evidence.proto
// Protobuf C++ Version: 5.29.4

#include "tendermint/types/evidence.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace tendermint {
namespace types {

inline constexpr DuplicateVoteEvidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        vote_a_{nullptr},
        vote_b_{nullptr},
        timestamp_{nullptr},
        total_voting_power_{::int64_t{0}},
        validator_power_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR DuplicateVoteEvidence::DuplicateVoteEvidence(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DuplicateVoteEvidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DuplicateVoteEvidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DuplicateVoteEvidenceDefaultTypeInternal() {}
  union {
    DuplicateVoteEvidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DuplicateVoteEvidenceDefaultTypeInternal _DuplicateVoteEvidence_default_instance_;

inline constexpr LightClientAttackEvidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        byzantine_validators_{},
        conflicting_block_{nullptr},
        timestamp_{nullptr},
        common_height_{::int64_t{0}},
        total_voting_power_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR LightClientAttackEvidence::LightClientAttackEvidence(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LightClientAttackEvidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LightClientAttackEvidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LightClientAttackEvidenceDefaultTypeInternal() {}
  union {
    LightClientAttackEvidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LightClientAttackEvidenceDefaultTypeInternal _LightClientAttackEvidence_default_instance_;

inline constexpr Evidence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : sum_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Evidence::Evidence(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EvidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EvidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EvidenceDefaultTypeInternal() {}
  union {
    Evidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EvidenceDefaultTypeInternal _Evidence_default_instance_;

inline constexpr EvidenceList::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : evidence_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EvidenceList::EvidenceList(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EvidenceListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EvidenceListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EvidenceListDefaultTypeInternal() {}
  union {
    EvidenceList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EvidenceListDefaultTypeInternal _EvidenceList_default_instance_;
}  // namespace types
}  // namespace tendermint
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_tendermint_2ftypes_2fevidence_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tendermint_2ftypes_2fevidence_2eproto = nullptr;
const ::uint32_t
    TableStruct_tendermint_2ftypes_2fevidence_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Evidence, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Evidence, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Evidence, _impl_.sum_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::DuplicateVoteEvidence, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::DuplicateVoteEvidence, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tendermint::types::DuplicateVoteEvidence, _impl_.vote_a_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::DuplicateVoteEvidence, _impl_.vote_b_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::DuplicateVoteEvidence, _impl_.total_voting_power_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::DuplicateVoteEvidence, _impl_.validator_power_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::DuplicateVoteEvidence, _impl_.timestamp_),
        0,
        1,
        ~0u,
        ~0u,
        2,
        PROTOBUF_FIELD_OFFSET(::tendermint::types::LightClientAttackEvidence, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::LightClientAttackEvidence, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tendermint::types::LightClientAttackEvidence, _impl_.conflicting_block_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::LightClientAttackEvidence, _impl_.common_height_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::LightClientAttackEvidence, _impl_.byzantine_validators_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::LightClientAttackEvidence, _impl_.total_voting_power_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::LightClientAttackEvidence, _impl_.timestamp_),
        0,
        ~0u,
        ~0u,
        ~0u,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tendermint::types::EvidenceList, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tendermint::types::EvidenceList, _impl_.evidence_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::tendermint::types::Evidence)},
        {11, 24, -1, sizeof(::tendermint::types::DuplicateVoteEvidence)},
        {29, 42, -1, sizeof(::tendermint::types::LightClientAttackEvidence)},
        {47, -1, -1, sizeof(::tendermint::types::EvidenceList)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::tendermint::types::_Evidence_default_instance_._instance,
    &::tendermint::types::_DuplicateVoteEvidence_default_instance_._instance,
    &::tendermint::types::_LightClientAttackEvidence_default_instance_._instance,
    &::tendermint::types::_EvidenceList_default_instance_._instance,
};
const char descriptor_table_protodef_tendermint_2ftypes_2fevidence_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\037tendermint/types/evidence.proto\022\020tende"
    "rmint.types\032\024gogoproto/gogo.proto\032\037googl"
    "e/protobuf/timestamp.proto\032\034tendermint/t"
    "ypes/types.proto\032 tendermint/types/valid"
    "ator.proto\"\344\001\n\010Evidence\022a\n\027duplicate_vot"
    "e_evidence\030\001 \001(\0132\'.tendermint.types.Dupl"
    "icateVoteEvidenceH\000R\025duplicateVoteEviden"
    "ce\022n\n\034light_client_attack_evidence\030\002 \001(\013"
    "2+.tendermint.types.LightClientAttackEvi"
    "denceH\000R\031lightClientAttackEvidenceB\005\n\003su"
    "m\"\220\002\n\025DuplicateVoteEvidence\022-\n\006vote_a\030\001 "
    "\001(\0132\026.tendermint.types.VoteR\005voteA\022-\n\006vo"
    "te_b\030\002 \001(\0132\026.tendermint.types.VoteR\005vote"
    "B\022,\n\022total_voting_power\030\003 \001(\003R\020totalVoti"
    "ngPower\022\'\n\017validator_power\030\004 \001(\003R\016valida"
    "torPower\022B\n\ttimestamp\030\005 \001(\0132\032.google.pro"
    "tobuf.TimestampB\010\310\336\037\000\220\337\037\001R\ttimestamp\"\315\002\n"
    "\031LightClientAttackEvidence\022I\n\021conflictin"
    "g_block\030\001 \001(\0132\034.tendermint.types.LightBl"
    "ockR\020conflictingBlock\022#\n\rcommon_height\030\002"
    " \001(\003R\014commonHeight\022N\n\024byzantine_validato"
    "rs\030\003 \003(\0132\033.tendermint.types.ValidatorR\023b"
    "yzantineValidators\022,\n\022total_voting_power"
    "\030\004 \001(\003R\020totalVotingPower\022B\n\ttimestamp\030\005 "
    "\001(\0132\032.google.protobuf.TimestampB\010\310\336\037\000\220\337\037"
    "\001R\ttimestamp\"L\n\014EvidenceList\022<\n\010evidence"
    "\030\001 \003(\0132\032.tendermint.types.EvidenceB\004\310\336\037\000"
    "R\010evidenceB5Z3github.com/cometbft/cometb"
    "ft/proto/tendermint/typesb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_tendermint_2ftypes_2fevidence_2eproto_deps[4] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
        &::descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
        &::descriptor_table_tendermint_2ftypes_2fvalidator_2eproto,
};
static ::absl::once_flag descriptor_table_tendermint_2ftypes_2fevidence_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_tendermint_2ftypes_2fevidence_2eproto = {
    false,
    false,
    1153,
    descriptor_table_protodef_tendermint_2ftypes_2fevidence_2eproto,
    "tendermint/types/evidence.proto",
    &descriptor_table_tendermint_2ftypes_2fevidence_2eproto_once,
    descriptor_table_tendermint_2ftypes_2fevidence_2eproto_deps,
    4,
    4,
    schemas,
    file_default_instances,
    TableStruct_tendermint_2ftypes_2fevidence_2eproto::offsets,
    file_level_enum_descriptors_tendermint_2ftypes_2fevidence_2eproto,
    file_level_service_descriptors_tendermint_2ftypes_2fevidence_2eproto,
};
namespace tendermint {
namespace types {
// ===================================================================

class Evidence::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::tendermint::types::Evidence, _impl_._oneof_case_);
};

void Evidence::set_allocated_duplicate_vote_evidence(::tendermint::types::DuplicateVoteEvidence* duplicate_vote_evidence) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_sum();
  if (duplicate_vote_evidence) {
    ::google::protobuf::Arena* submessage_arena = duplicate_vote_evidence->GetArena();
    if (message_arena != submessage_arena) {
      duplicate_vote_evidence = ::google::protobuf::internal::GetOwnedMessage(message_arena, duplicate_vote_evidence, submessage_arena);
    }
    set_has_duplicate_vote_evidence();
    _impl_.sum_.duplicate_vote_evidence_ = duplicate_vote_evidence;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Evidence.duplicate_vote_evidence)
}
void Evidence::set_allocated_light_client_attack_evidence(::tendermint::types::LightClientAttackEvidence* light_client_attack_evidence) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_sum();
  if (light_client_attack_evidence) {
    ::google::protobuf::Arena* submessage_arena = light_client_attack_evidence->GetArena();
    if (message_arena != submessage_arena) {
      light_client_attack_evidence = ::google::protobuf::internal::GetOwnedMessage(message_arena, light_client_attack_evidence, submessage_arena);
    }
    set_has_light_client_attack_evidence();
    _impl_.sum_.light_client_attack_evidence_ = light_client_attack_evidence;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Evidence.light_client_attack_evidence)
}
Evidence::Evidence(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.Evidence)
}
inline PROTOBUF_NDEBUG_INLINE Evidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tendermint::types::Evidence& from_msg)
      : sum_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

Evidence::Evidence(
    ::google::protobuf::Arena* arena,
    const Evidence& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Evidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (sum_case()) {
    case SUM_NOT_SET:
      break;
      case kDuplicateVoteEvidence:
        _impl_.sum_.duplicate_vote_evidence_ = ::google::protobuf::Message::CopyConstruct<::tendermint::types::DuplicateVoteEvidence>(arena, *from._impl_.sum_.duplicate_vote_evidence_);
        break;
      case kLightClientAttackEvidence:
        _impl_.sum_.light_client_attack_evidence_ = ::google::protobuf::Message::CopyConstruct<::tendermint::types::LightClientAttackEvidence>(arena, *from._impl_.sum_.light_client_attack_evidence_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:tendermint.types.Evidence)
}
inline PROTOBUF_NDEBUG_INLINE Evidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : sum_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void Evidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Evidence::~Evidence() {
  // @@protoc_insertion_point(destructor:tendermint.types.Evidence)
  SharedDtor(*this);
}
inline void Evidence::SharedDtor(MessageLite& self) {
  Evidence& this_ = static_cast<Evidence&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_sum()) {
    this_.clear_sum();
  }
  this_._impl_.~Impl_();
}

void Evidence::clear_sum() {
// @@protoc_insertion_point(one_of_clear_start:tendermint.types.Evidence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (sum_case()) {
    case kDuplicateVoteEvidence: {
      if (GetArena() == nullptr) {
        delete _impl_.sum_.duplicate_vote_evidence_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.sum_.duplicate_vote_evidence_);
      }
      break;
    }
    case kLightClientAttackEvidence: {
      if (GetArena() == nullptr) {
        delete _impl_.sum_.light_client_attack_evidence_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.sum_.light_client_attack_evidence_);
      }
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SUM_NOT_SET;
}


inline void* Evidence::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Evidence(arena);
}
constexpr auto Evidence::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Evidence),
                                            alignof(Evidence));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Evidence::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Evidence_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Evidence::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Evidence>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Evidence::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Evidence>(), &Evidence::ByteSizeLong,
            &Evidence::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Evidence, _impl_._cached_size_),
        false,
    },
    &Evidence::kDescriptorMethods,
    &descriptor_table_tendermint_2ftypes_2fevidence_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Evidence::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 2, 0, 2> Evidence::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tendermint::types::Evidence>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .tendermint.types.DuplicateVoteEvidence duplicate_vote_evidence = 1 [json_name = "duplicateVoteEvidence"];
    {PROTOBUF_FIELD_OFFSET(Evidence, _impl_.sum_.duplicate_vote_evidence_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tendermint.types.LightClientAttackEvidence light_client_attack_evidence = 2 [json_name = "lightClientAttackEvidence"];
    {PROTOBUF_FIELD_OFFSET(Evidence, _impl_.sum_.light_client_attack_evidence_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tendermint::types::DuplicateVoteEvidence>()},
    {::_pbi::TcParser::GetTable<::tendermint::types::LightClientAttackEvidence>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Evidence::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.Evidence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_sum();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Evidence::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Evidence& this_ = static_cast<const Evidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Evidence::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Evidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.Evidence)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.sum_case()) {
            case kDuplicateVoteEvidence: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  1, *this_._impl_.sum_.duplicate_vote_evidence_, this_._impl_.sum_.duplicate_vote_evidence_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kLightClientAttackEvidence: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.sum_.light_client_attack_evidence_, this_._impl_.sum_.light_client_attack_evidence_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.Evidence)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Evidence::ByteSizeLong(const MessageLite& base) {
          const Evidence& this_ = static_cast<const Evidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Evidence::ByteSizeLong() const {
          const Evidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tendermint.types.Evidence)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.sum_case()) {
            // .tendermint.types.DuplicateVoteEvidence duplicate_vote_evidence = 1 [json_name = "duplicateVoteEvidence"];
            case kDuplicateVoteEvidence: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.sum_.duplicate_vote_evidence_);
              break;
            }
            // .tendermint.types.LightClientAttackEvidence light_client_attack_evidence = 2 [json_name = "lightClientAttackEvidence"];
            case kLightClientAttackEvidence: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.sum_.light_client_attack_evidence_);
              break;
            }
            case SUM_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Evidence::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Evidence*>(&to_msg);
  auto& from = static_cast<const Evidence&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.Evidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_sum();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kDuplicateVoteEvidence: {
        if (oneof_needs_init) {
          _this->_impl_.sum_.duplicate_vote_evidence_ =
              ::google::protobuf::Message::CopyConstruct<::tendermint::types::DuplicateVoteEvidence>(arena, *from._impl_.sum_.duplicate_vote_evidence_);
        } else {
          _this->_impl_.sum_.duplicate_vote_evidence_->MergeFrom(from._internal_duplicate_vote_evidence());
        }
        break;
      }
      case kLightClientAttackEvidence: {
        if (oneof_needs_init) {
          _this->_impl_.sum_.light_client_attack_evidence_ =
              ::google::protobuf::Message::CopyConstruct<::tendermint::types::LightClientAttackEvidence>(arena, *from._impl_.sum_.light_client_attack_evidence_);
        } else {
          _this->_impl_.sum_.light_client_attack_evidence_->MergeFrom(from._internal_light_client_attack_evidence());
        }
        break;
      }
      case SUM_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Evidence::CopyFrom(const Evidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.Evidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Evidence::InternalSwap(Evidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.sum_, other->_impl_.sum_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Evidence::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DuplicateVoteEvidence::_Internal {
 public:
  using HasBits =
      decltype(std::declval<DuplicateVoteEvidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DuplicateVoteEvidence, _impl_._has_bits_);
};

void DuplicateVoteEvidence::clear_vote_a() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.vote_a_ != nullptr) _impl_.vote_a_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void DuplicateVoteEvidence::clear_vote_b() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.vote_b_ != nullptr) _impl_.vote_b_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void DuplicateVoteEvidence::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
DuplicateVoteEvidence::DuplicateVoteEvidence(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.DuplicateVoteEvidence)
}
inline PROTOBUF_NDEBUG_INLINE DuplicateVoteEvidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tendermint::types::DuplicateVoteEvidence& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

DuplicateVoteEvidence::DuplicateVoteEvidence(
    ::google::protobuf::Arena* arena,
    const DuplicateVoteEvidence& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DuplicateVoteEvidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.vote_a_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tendermint::types::Vote>(
                              arena, *from._impl_.vote_a_)
                        : nullptr;
  _impl_.vote_b_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tendermint::types::Vote>(
                              arena, *from._impl_.vote_b_)
                        : nullptr;
  _impl_.timestamp_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.timestamp_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, total_voting_power_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, total_voting_power_),
           offsetof(Impl_, validator_power_) -
               offsetof(Impl_, total_voting_power_) +
               sizeof(Impl_::validator_power_));

  // @@protoc_insertion_point(copy_constructor:tendermint.types.DuplicateVoteEvidence)
}
inline PROTOBUF_NDEBUG_INLINE DuplicateVoteEvidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DuplicateVoteEvidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, vote_a_),
           0,
           offsetof(Impl_, validator_power_) -
               offsetof(Impl_, vote_a_) +
               sizeof(Impl_::validator_power_));
}
DuplicateVoteEvidence::~DuplicateVoteEvidence() {
  // @@protoc_insertion_point(destructor:tendermint.types.DuplicateVoteEvidence)
  SharedDtor(*this);
}
inline void DuplicateVoteEvidence::SharedDtor(MessageLite& self) {
  DuplicateVoteEvidence& this_ = static_cast<DuplicateVoteEvidence&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.vote_a_;
  delete this_._impl_.vote_b_;
  delete this_._impl_.timestamp_;
  this_._impl_.~Impl_();
}

inline void* DuplicateVoteEvidence::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DuplicateVoteEvidence(arena);
}
constexpr auto DuplicateVoteEvidence::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(DuplicateVoteEvidence),
                                            alignof(DuplicateVoteEvidence));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DuplicateVoteEvidence::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DuplicateVoteEvidence_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DuplicateVoteEvidence::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<DuplicateVoteEvidence>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DuplicateVoteEvidence::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<DuplicateVoteEvidence>(), &DuplicateVoteEvidence::ByteSizeLong,
            &DuplicateVoteEvidence::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DuplicateVoteEvidence, _impl_._cached_size_),
        false,
    },
    &DuplicateVoteEvidence::kDescriptorMethods,
    &descriptor_table_tendermint_2ftypes_2fevidence_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DuplicateVoteEvidence::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 0, 2> DuplicateVoteEvidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DuplicateVoteEvidence, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tendermint::types::DuplicateVoteEvidence>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .tendermint.types.Vote vote_a = 1 [json_name = "voteA"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DuplicateVoteEvidence, _impl_.vote_a_)}},
    // .tendermint.types.Vote vote_b = 2 [json_name = "voteB"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(DuplicateVoteEvidence, _impl_.vote_b_)}},
    // int64 total_voting_power = 3 [json_name = "totalVotingPower"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(DuplicateVoteEvidence, _impl_.total_voting_power_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(DuplicateVoteEvidence, _impl_.total_voting_power_)}},
    // int64 validator_power = 4 [json_name = "validatorPower"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(DuplicateVoteEvidence, _impl_.validator_power_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(DuplicateVoteEvidence, _impl_.validator_power_)}},
    // .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 2, PROTOBUF_FIELD_OFFSET(DuplicateVoteEvidence, _impl_.timestamp_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .tendermint.types.Vote vote_a = 1 [json_name = "voteA"];
    {PROTOBUF_FIELD_OFFSET(DuplicateVoteEvidence, _impl_.vote_a_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tendermint.types.Vote vote_b = 2 [json_name = "voteB"];
    {PROTOBUF_FIELD_OFFSET(DuplicateVoteEvidence, _impl_.vote_b_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 total_voting_power = 3 [json_name = "totalVotingPower"];
    {PROTOBUF_FIELD_OFFSET(DuplicateVoteEvidence, _impl_.total_voting_power_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 validator_power = 4 [json_name = "validatorPower"];
    {PROTOBUF_FIELD_OFFSET(DuplicateVoteEvidence, _impl_.validator_power_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
    {PROTOBUF_FIELD_OFFSET(DuplicateVoteEvidence, _impl_.timestamp_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tendermint::types::Vote>()},
    {::_pbi::TcParser::GetTable<::tendermint::types::Vote>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void DuplicateVoteEvidence::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.DuplicateVoteEvidence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.vote_a_ != nullptr);
      _impl_.vote_a_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.vote_b_ != nullptr);
      _impl_.vote_b_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
  }
  ::memset(&_impl_.total_voting_power_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.validator_power_) -
      reinterpret_cast<char*>(&_impl_.total_voting_power_)) + sizeof(_impl_.validator_power_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DuplicateVoteEvidence::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DuplicateVoteEvidence& this_ = static_cast<const DuplicateVoteEvidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DuplicateVoteEvidence::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DuplicateVoteEvidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.DuplicateVoteEvidence)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tendermint.types.Vote vote_a = 1 [json_name = "voteA"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.vote_a_, this_._impl_.vote_a_->GetCachedSize(), target,
                stream);
          }

          // .tendermint.types.Vote vote_b = 2 [json_name = "voteB"];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.vote_b_, this_._impl_.vote_b_->GetCachedSize(), target,
                stream);
          }

          // int64 total_voting_power = 3 [json_name = "totalVotingPower"];
          if (this_._internal_total_voting_power() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<3>(
                    stream, this_._internal_total_voting_power(), target);
          }

          // int64 validator_power = 4 [json_name = "validatorPower"];
          if (this_._internal_validator_power() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<4>(
                    stream, this_._internal_validator_power(), target);
          }

          // .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.timestamp_, this_._impl_.timestamp_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.DuplicateVoteEvidence)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DuplicateVoteEvidence::ByteSizeLong(const MessageLite& base) {
          const DuplicateVoteEvidence& this_ = static_cast<const DuplicateVoteEvidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DuplicateVoteEvidence::ByteSizeLong() const {
          const DuplicateVoteEvidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tendermint.types.DuplicateVoteEvidence)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .tendermint.types.Vote vote_a = 1 [json_name = "voteA"];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.vote_a_);
            }
            // .tendermint.types.Vote vote_b = 2 [json_name = "voteB"];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.vote_b_);
            }
            // .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.timestamp_);
            }
          }
           {
            // int64 total_voting_power = 3 [json_name = "totalVotingPower"];
            if (this_._internal_total_voting_power() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_total_voting_power());
            }
            // int64 validator_power = 4 [json_name = "validatorPower"];
            if (this_._internal_validator_power() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_validator_power());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DuplicateVoteEvidence::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DuplicateVoteEvidence*>(&to_msg);
  auto& from = static_cast<const DuplicateVoteEvidence&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.DuplicateVoteEvidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.vote_a_ != nullptr);
      if (_this->_impl_.vote_a_ == nullptr) {
        _this->_impl_.vote_a_ =
            ::google::protobuf::Message::CopyConstruct<::tendermint::types::Vote>(arena, *from._impl_.vote_a_);
      } else {
        _this->_impl_.vote_a_->MergeFrom(*from._impl_.vote_a_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.vote_b_ != nullptr);
      if (_this->_impl_.vote_b_ == nullptr) {
        _this->_impl_.vote_b_ =
            ::google::protobuf::Message::CopyConstruct<::tendermint::types::Vote>(arena, *from._impl_.vote_b_);
      } else {
        _this->_impl_.vote_b_->MergeFrom(*from._impl_.vote_b_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.timestamp_ != nullptr);
      if (_this->_impl_.timestamp_ == nullptr) {
        _this->_impl_.timestamp_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_);
      } else {
        _this->_impl_.timestamp_->MergeFrom(*from._impl_.timestamp_);
      }
    }
  }
  if (from._internal_total_voting_power() != 0) {
    _this->_impl_.total_voting_power_ = from._impl_.total_voting_power_;
  }
  if (from._internal_validator_power() != 0) {
    _this->_impl_.validator_power_ = from._impl_.validator_power_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DuplicateVoteEvidence::CopyFrom(const DuplicateVoteEvidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.DuplicateVoteEvidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DuplicateVoteEvidence::InternalSwap(DuplicateVoteEvidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DuplicateVoteEvidence, _impl_.validator_power_)
      + sizeof(DuplicateVoteEvidence::_impl_.validator_power_)
      - PROTOBUF_FIELD_OFFSET(DuplicateVoteEvidence, _impl_.vote_a_)>(
          reinterpret_cast<char*>(&_impl_.vote_a_),
          reinterpret_cast<char*>(&other->_impl_.vote_a_));
}

::google::protobuf::Metadata DuplicateVoteEvidence::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LightClientAttackEvidence::_Internal {
 public:
  using HasBits =
      decltype(std::declval<LightClientAttackEvidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(LightClientAttackEvidence, _impl_._has_bits_);
};

void LightClientAttackEvidence::clear_conflicting_block() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.conflicting_block_ != nullptr) _impl_.conflicting_block_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LightClientAttackEvidence::clear_byzantine_validators() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.byzantine_validators_.Clear();
}
void LightClientAttackEvidence::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
LightClientAttackEvidence::LightClientAttackEvidence(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.LightClientAttackEvidence)
}
inline PROTOBUF_NDEBUG_INLINE LightClientAttackEvidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tendermint::types::LightClientAttackEvidence& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        byzantine_validators_{visibility, arena, from.byzantine_validators_} {}

LightClientAttackEvidence::LightClientAttackEvidence(
    ::google::protobuf::Arena* arena,
    const LightClientAttackEvidence& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LightClientAttackEvidence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.conflicting_block_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tendermint::types::LightBlock>(
                              arena, *from._impl_.conflicting_block_)
                        : nullptr;
  _impl_.timestamp_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.timestamp_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, common_height_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, common_height_),
           offsetof(Impl_, total_voting_power_) -
               offsetof(Impl_, common_height_) +
               sizeof(Impl_::total_voting_power_));

  // @@protoc_insertion_point(copy_constructor:tendermint.types.LightClientAttackEvidence)
}
inline PROTOBUF_NDEBUG_INLINE LightClientAttackEvidence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        byzantine_validators_{visibility, arena} {}

inline void LightClientAttackEvidence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, conflicting_block_),
           0,
           offsetof(Impl_, total_voting_power_) -
               offsetof(Impl_, conflicting_block_) +
               sizeof(Impl_::total_voting_power_));
}
LightClientAttackEvidence::~LightClientAttackEvidence() {
  // @@protoc_insertion_point(destructor:tendermint.types.LightClientAttackEvidence)
  SharedDtor(*this);
}
inline void LightClientAttackEvidence::SharedDtor(MessageLite& self) {
  LightClientAttackEvidence& this_ = static_cast<LightClientAttackEvidence&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.conflicting_block_;
  delete this_._impl_.timestamp_;
  this_._impl_.~Impl_();
}

inline void* LightClientAttackEvidence::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) LightClientAttackEvidence(arena);
}
constexpr auto LightClientAttackEvidence::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(LightClientAttackEvidence, _impl_.byzantine_validators_) +
          decltype(LightClientAttackEvidence::_impl_.byzantine_validators_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(LightClientAttackEvidence), alignof(LightClientAttackEvidence), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&LightClientAttackEvidence::PlacementNew_,
                                 sizeof(LightClientAttackEvidence),
                                 alignof(LightClientAttackEvidence));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull LightClientAttackEvidence::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_LightClientAttackEvidence_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &LightClientAttackEvidence::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<LightClientAttackEvidence>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &LightClientAttackEvidence::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<LightClientAttackEvidence>(), &LightClientAttackEvidence::ByteSizeLong,
            &LightClientAttackEvidence::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(LightClientAttackEvidence, _impl_._cached_size_),
        false,
    },
    &LightClientAttackEvidence::kDescriptorMethods,
    &descriptor_table_tendermint_2ftypes_2fevidence_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* LightClientAttackEvidence::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 0, 2> LightClientAttackEvidence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LightClientAttackEvidence, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tendermint::types::LightClientAttackEvidence>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .tendermint.types.LightBlock conflicting_block = 1 [json_name = "conflictingBlock"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(LightClientAttackEvidence, _impl_.conflicting_block_)}},
    // int64 common_height = 2 [json_name = "commonHeight"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(LightClientAttackEvidence, _impl_.common_height_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(LightClientAttackEvidence, _impl_.common_height_)}},
    // repeated .tendermint.types.Validator byzantine_validators = 3 [json_name = "byzantineValidators"];
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(LightClientAttackEvidence, _impl_.byzantine_validators_)}},
    // int64 total_voting_power = 4 [json_name = "totalVotingPower"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(LightClientAttackEvidence, _impl_.total_voting_power_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(LightClientAttackEvidence, _impl_.total_voting_power_)}},
    // .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 2, PROTOBUF_FIELD_OFFSET(LightClientAttackEvidence, _impl_.timestamp_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .tendermint.types.LightBlock conflicting_block = 1 [json_name = "conflictingBlock"];
    {PROTOBUF_FIELD_OFFSET(LightClientAttackEvidence, _impl_.conflicting_block_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 common_height = 2 [json_name = "commonHeight"];
    {PROTOBUF_FIELD_OFFSET(LightClientAttackEvidence, _impl_.common_height_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // repeated .tendermint.types.Validator byzantine_validators = 3 [json_name = "byzantineValidators"];
    {PROTOBUF_FIELD_OFFSET(LightClientAttackEvidence, _impl_.byzantine_validators_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 total_voting_power = 4 [json_name = "totalVotingPower"];
    {PROTOBUF_FIELD_OFFSET(LightClientAttackEvidence, _impl_.total_voting_power_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
    {PROTOBUF_FIELD_OFFSET(LightClientAttackEvidence, _impl_.timestamp_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tendermint::types::LightBlock>()},
    {::_pbi::TcParser::GetTable<::tendermint::types::Validator>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void LightClientAttackEvidence::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.LightClientAttackEvidence)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.byzantine_validators_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.conflicting_block_ != nullptr);
      _impl_.conflicting_block_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
  }
  ::memset(&_impl_.common_height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.total_voting_power_) -
      reinterpret_cast<char*>(&_impl_.common_height_)) + sizeof(_impl_.total_voting_power_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* LightClientAttackEvidence::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const LightClientAttackEvidence& this_ = static_cast<const LightClientAttackEvidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* LightClientAttackEvidence::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const LightClientAttackEvidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.LightClientAttackEvidence)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tendermint.types.LightBlock conflicting_block = 1 [json_name = "conflictingBlock"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.conflicting_block_, this_._impl_.conflicting_block_->GetCachedSize(), target,
                stream);
          }

          // int64 common_height = 2 [json_name = "commonHeight"];
          if (this_._internal_common_height() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<2>(
                    stream, this_._internal_common_height(), target);
          }

          // repeated .tendermint.types.Validator byzantine_validators = 3 [json_name = "byzantineValidators"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_byzantine_validators_size());
               i < n; i++) {
            const auto& repfield = this_._internal_byzantine_validators().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    3, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // int64 total_voting_power = 4 [json_name = "totalVotingPower"];
          if (this_._internal_total_voting_power() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<4>(
                    stream, this_._internal_total_voting_power(), target);
          }

          // .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.timestamp_, this_._impl_.timestamp_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.LightClientAttackEvidence)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t LightClientAttackEvidence::ByteSizeLong(const MessageLite& base) {
          const LightClientAttackEvidence& this_ = static_cast<const LightClientAttackEvidence&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t LightClientAttackEvidence::ByteSizeLong() const {
          const LightClientAttackEvidence& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tendermint.types.LightClientAttackEvidence)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tendermint.types.Validator byzantine_validators = 3 [json_name = "byzantineValidators"];
            {
              total_size += 1UL * this_._internal_byzantine_validators_size();
              for (const auto& msg : this_._internal_byzantine_validators()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .tendermint.types.LightBlock conflicting_block = 1 [json_name = "conflictingBlock"];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.conflicting_block_);
            }
            // .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.timestamp_);
            }
          }
           {
            // int64 common_height = 2 [json_name = "commonHeight"];
            if (this_._internal_common_height() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_common_height());
            }
            // int64 total_voting_power = 4 [json_name = "totalVotingPower"];
            if (this_._internal_total_voting_power() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_total_voting_power());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void LightClientAttackEvidence::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LightClientAttackEvidence*>(&to_msg);
  auto& from = static_cast<const LightClientAttackEvidence&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.LightClientAttackEvidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_byzantine_validators()->MergeFrom(
      from._internal_byzantine_validators());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.conflicting_block_ != nullptr);
      if (_this->_impl_.conflicting_block_ == nullptr) {
        _this->_impl_.conflicting_block_ =
            ::google::protobuf::Message::CopyConstruct<::tendermint::types::LightBlock>(arena, *from._impl_.conflicting_block_);
      } else {
        _this->_impl_.conflicting_block_->MergeFrom(*from._impl_.conflicting_block_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.timestamp_ != nullptr);
      if (_this->_impl_.timestamp_ == nullptr) {
        _this->_impl_.timestamp_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_);
      } else {
        _this->_impl_.timestamp_->MergeFrom(*from._impl_.timestamp_);
      }
    }
  }
  if (from._internal_common_height() != 0) {
    _this->_impl_.common_height_ = from._impl_.common_height_;
  }
  if (from._internal_total_voting_power() != 0) {
    _this->_impl_.total_voting_power_ = from._impl_.total_voting_power_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LightClientAttackEvidence::CopyFrom(const LightClientAttackEvidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.LightClientAttackEvidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LightClientAttackEvidence::InternalSwap(LightClientAttackEvidence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.byzantine_validators_.InternalSwap(&other->_impl_.byzantine_validators_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LightClientAttackEvidence, _impl_.total_voting_power_)
      + sizeof(LightClientAttackEvidence::_impl_.total_voting_power_)
      - PROTOBUF_FIELD_OFFSET(LightClientAttackEvidence, _impl_.conflicting_block_)>(
          reinterpret_cast<char*>(&_impl_.conflicting_block_),
          reinterpret_cast<char*>(&other->_impl_.conflicting_block_));
}

::google::protobuf::Metadata LightClientAttackEvidence::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class EvidenceList::_Internal {
 public:
};

EvidenceList::EvidenceList(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.EvidenceList)
}
inline PROTOBUF_NDEBUG_INLINE EvidenceList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tendermint::types::EvidenceList& from_msg)
      : evidence_{visibility, arena, from.evidence_},
        _cached_size_{0} {}

EvidenceList::EvidenceList(
    ::google::protobuf::Arena* arena,
    const EvidenceList& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  EvidenceList* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tendermint.types.EvidenceList)
}
inline PROTOBUF_NDEBUG_INLINE EvidenceList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : evidence_{visibility, arena},
        _cached_size_{0} {}

inline void EvidenceList::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
EvidenceList::~EvidenceList() {
  // @@protoc_insertion_point(destructor:tendermint.types.EvidenceList)
  SharedDtor(*this);
}
inline void EvidenceList::SharedDtor(MessageLite& self) {
  EvidenceList& this_ = static_cast<EvidenceList&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* EvidenceList::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) EvidenceList(arena);
}
constexpr auto EvidenceList::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(EvidenceList, _impl_.evidence_) +
          decltype(EvidenceList::_impl_.evidence_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(EvidenceList), alignof(EvidenceList), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&EvidenceList::PlacementNew_,
                                 sizeof(EvidenceList),
                                 alignof(EvidenceList));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull EvidenceList::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_EvidenceList_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &EvidenceList::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<EvidenceList>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &EvidenceList::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<EvidenceList>(), &EvidenceList::ByteSizeLong,
            &EvidenceList::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(EvidenceList, _impl_._cached_size_),
        false,
    },
    &EvidenceList::kDescriptorMethods,
    &descriptor_table_tendermint_2ftypes_2fevidence_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* EvidenceList::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> EvidenceList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tendermint::types::EvidenceList>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .tendermint.types.Evidence evidence = 1 [json_name = "evidence", (.gogoproto.nullable) = false];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(EvidenceList, _impl_.evidence_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tendermint.types.Evidence evidence = 1 [json_name = "evidence", (.gogoproto.nullable) = false];
    {PROTOBUF_FIELD_OFFSET(EvidenceList, _impl_.evidence_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tendermint::types::Evidence>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void EvidenceList::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.EvidenceList)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.evidence_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* EvidenceList::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const EvidenceList& this_ = static_cast<const EvidenceList&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* EvidenceList::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const EvidenceList& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.EvidenceList)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .tendermint.types.Evidence evidence = 1 [json_name = "evidence", (.gogoproto.nullable) = false];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_evidence_size());
               i < n; i++) {
            const auto& repfield = this_._internal_evidence().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.EvidenceList)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t EvidenceList::ByteSizeLong(const MessageLite& base) {
          const EvidenceList& this_ = static_cast<const EvidenceList&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t EvidenceList::ByteSizeLong() const {
          const EvidenceList& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tendermint.types.EvidenceList)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tendermint.types.Evidence evidence = 1 [json_name = "evidence", (.gogoproto.nullable) = false];
            {
              total_size += 1UL * this_._internal_evidence_size();
              for (const auto& msg : this_._internal_evidence()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void EvidenceList::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EvidenceList*>(&to_msg);
  auto& from = static_cast<const EvidenceList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.EvidenceList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_evidence()->MergeFrom(
      from._internal_evidence());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EvidenceList::CopyFrom(const EvidenceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.EvidenceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EvidenceList::InternalSwap(EvidenceList* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.evidence_.InternalSwap(&other->_impl_.evidence_);
}

::google::protobuf::Metadata EvidenceList::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace tendermint
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_tendermint_2ftypes_2fevidence_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
