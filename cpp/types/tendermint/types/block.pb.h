// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tendermint/types/block.proto
// Protobuf C++ Version: 5.29.4

#ifndef tendermint_2ftypes_2fblock_2eproto_2epb_2eh
#define tendermint_2ftypes_2fblock_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "tendermint/types/types.pb.h"
#include "tendermint/types/evidence.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tendermint_2ftypes_2fblock_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_tendermint_2ftypes_2fblock_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tendermint_2ftypes_2fblock_2eproto;
namespace tendermint {
namespace types {
class Block;
struct BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
}  // namespace types
}  // namespace tendermint
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tendermint {
namespace types {

// ===================================================================


// -------------------------------------------------------------------

class Block final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.types.Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  ~Block() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Block* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Block));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Block(
      ::google::protobuf::internal::ConstantInitialized);

  inline Block(const Block& from) : Block(nullptr, from) {}
  inline Block(Block&& from) noexcept
      : Block(nullptr, std::move(from)) {}
  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
        &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Block& a, Block& b) { a.Swap(&b); }
  inline void Swap(Block* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Block* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Block>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Block& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Block& from) { Block::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Block* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.types.Block"; }

 protected:
  explicit Block(::google::protobuf::Arena* arena);
  Block(::google::protobuf::Arena* arena, const Block& from);
  Block(::google::protobuf::Arena* arena, Block&& from) noexcept
      : Block(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderFieldNumber = 1,
    kDataFieldNumber = 2,
    kEvidenceFieldNumber = 3,
    kLastCommitFieldNumber = 4,
  };
  // .tendermint.types.Header header = 1 [json_name = "header", (.gogoproto.nullable) = false];
  bool has_header() const;
  void clear_header() ;
  const ::tendermint::types::Header& header() const;
  PROTOBUF_NODISCARD ::tendermint::types::Header* release_header();
  ::tendermint::types::Header* mutable_header();
  void set_allocated_header(::tendermint::types::Header* value);
  void unsafe_arena_set_allocated_header(::tendermint::types::Header* value);
  ::tendermint::types::Header* unsafe_arena_release_header();

  private:
  const ::tendermint::types::Header& _internal_header() const;
  ::tendermint::types::Header* _internal_mutable_header();

  public:
  // .tendermint.types.Data data = 2 [json_name = "data", (.gogoproto.nullable) = false];
  bool has_data() const;
  void clear_data() ;
  const ::tendermint::types::Data& data() const;
  PROTOBUF_NODISCARD ::tendermint::types::Data* release_data();
  ::tendermint::types::Data* mutable_data();
  void set_allocated_data(::tendermint::types::Data* value);
  void unsafe_arena_set_allocated_data(::tendermint::types::Data* value);
  ::tendermint::types::Data* unsafe_arena_release_data();

  private:
  const ::tendermint::types::Data& _internal_data() const;
  ::tendermint::types::Data* _internal_mutable_data();

  public:
  // .tendermint.types.EvidenceList evidence = 3 [json_name = "evidence", (.gogoproto.nullable) = false];
  bool has_evidence() const;
  void clear_evidence() ;
  const ::tendermint::types::EvidenceList& evidence() const;
  PROTOBUF_NODISCARD ::tendermint::types::EvidenceList* release_evidence();
  ::tendermint::types::EvidenceList* mutable_evidence();
  void set_allocated_evidence(::tendermint::types::EvidenceList* value);
  void unsafe_arena_set_allocated_evidence(::tendermint::types::EvidenceList* value);
  ::tendermint::types::EvidenceList* unsafe_arena_release_evidence();

  private:
  const ::tendermint::types::EvidenceList& _internal_evidence() const;
  ::tendermint::types::EvidenceList* _internal_mutable_evidence();

  public:
  // .tendermint.types.Commit last_commit = 4 [json_name = "lastCommit"];
  bool has_last_commit() const;
  void clear_last_commit() ;
  const ::tendermint::types::Commit& last_commit() const;
  PROTOBUF_NODISCARD ::tendermint::types::Commit* release_last_commit();
  ::tendermint::types::Commit* mutable_last_commit();
  void set_allocated_last_commit(::tendermint::types::Commit* value);
  void unsafe_arena_set_allocated_last_commit(::tendermint::types::Commit* value);
  ::tendermint::types::Commit* unsafe_arena_release_last_commit();

  private:
  const ::tendermint::types::Commit& _internal_last_commit() const;
  ::tendermint::types::Commit* _internal_mutable_last_commit();

  public:
  // @@protoc_insertion_point(class_scope:tendermint.types.Block)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 4,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Block& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::tendermint::types::Header* header_;
    ::tendermint::types::Data* data_;
    ::tendermint::types::EvidenceList* evidence_;
    ::tendermint::types::Commit* last_commit_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2fblock_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Block

// .tendermint.types.Header header = 1 [json_name = "header", (.gogoproto.nullable) = false];
inline bool Block::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline const ::tendermint::types::Header& Block::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::types::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::Header&>(::tendermint::types::_Header_default_instance_);
}
inline const ::tendermint::types::Header& Block::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.types.Block.header)
  return _internal_header();
}
inline void Block::unsafe_arena_set_allocated_header(::tendermint::types::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::tendermint::types::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.Block.header)
}
inline ::tendermint::types::Header* Block::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::types::Header* Block::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.types.Block.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::tendermint::types::Header* Block::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::types::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::tendermint::types::Header*>(p);
  }
  return _impl_.header_;
}
inline ::tendermint::types::Header* Block::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tendermint::types::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Block.header)
  return _msg;
}
inline void Block::set_allocated_header(::tendermint::types::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::tendermint::types::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Block.header)
}

// .tendermint.types.Data data = 2 [json_name = "data", (.gogoproto.nullable) = false];
inline bool Block::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline const ::tendermint::types::Data& Block::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::types::Data* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::Data&>(::tendermint::types::_Data_default_instance_);
}
inline const ::tendermint::types::Data& Block::data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.types.Block.data)
  return _internal_data();
}
inline void Block::unsafe_arena_set_allocated_data(::tendermint::types::Data* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = reinterpret_cast<::tendermint::types::Data*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.Block.data)
}
inline ::tendermint::types::Data* Block::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::types::Data* released = _impl_.data_;
  _impl_.data_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::types::Data* Block::unsafe_arena_release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.types.Block.data)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::types::Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::tendermint::types::Data* Block::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::types::Data>(GetArena());
    _impl_.data_ = reinterpret_cast<::tendermint::types::Data*>(p);
  }
  return _impl_.data_;
}
inline ::tendermint::types::Data* Block::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tendermint::types::Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Block.data)
  return _msg;
}
inline void Block::set_allocated_data(::tendermint::types::Data* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.data_ = reinterpret_cast<::tendermint::types::Data*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Block.data)
}

// .tendermint.types.EvidenceList evidence = 3 [json_name = "evidence", (.gogoproto.nullable) = false];
inline bool Block::has_evidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.evidence_ != nullptr);
  return value;
}
inline const ::tendermint::types::EvidenceList& Block::_internal_evidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::types::EvidenceList* p = _impl_.evidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::EvidenceList&>(::tendermint::types::_EvidenceList_default_instance_);
}
inline const ::tendermint::types::EvidenceList& Block::evidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.types.Block.evidence)
  return _internal_evidence();
}
inline void Block::unsafe_arena_set_allocated_evidence(::tendermint::types::EvidenceList* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.evidence_);
  }
  _impl_.evidence_ = reinterpret_cast<::tendermint::types::EvidenceList*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.Block.evidence)
}
inline ::tendermint::types::EvidenceList* Block::release_evidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tendermint::types::EvidenceList* released = _impl_.evidence_;
  _impl_.evidence_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::types::EvidenceList* Block::unsafe_arena_release_evidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.types.Block.evidence)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tendermint::types::EvidenceList* temp = _impl_.evidence_;
  _impl_.evidence_ = nullptr;
  return temp;
}
inline ::tendermint::types::EvidenceList* Block::_internal_mutable_evidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.evidence_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::types::EvidenceList>(GetArena());
    _impl_.evidence_ = reinterpret_cast<::tendermint::types::EvidenceList*>(p);
  }
  return _impl_.evidence_;
}
inline ::tendermint::types::EvidenceList* Block::mutable_evidence() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::tendermint::types::EvidenceList* _msg = _internal_mutable_evidence();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Block.evidence)
  return _msg;
}
inline void Block::set_allocated_evidence(::tendermint::types::EvidenceList* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.evidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.evidence_ = reinterpret_cast<::tendermint::types::EvidenceList*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Block.evidence)
}

// .tendermint.types.Commit last_commit = 4 [json_name = "lastCommit"];
inline bool Block::has_last_commit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_commit_ != nullptr);
  return value;
}
inline const ::tendermint::types::Commit& Block::_internal_last_commit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::types::Commit* p = _impl_.last_commit_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::Commit&>(::tendermint::types::_Commit_default_instance_);
}
inline const ::tendermint::types::Commit& Block::last_commit() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.types.Block.last_commit)
  return _internal_last_commit();
}
inline void Block::unsafe_arena_set_allocated_last_commit(::tendermint::types::Commit* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_commit_);
  }
  _impl_.last_commit_ = reinterpret_cast<::tendermint::types::Commit*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.Block.last_commit)
}
inline ::tendermint::types::Commit* Block::release_last_commit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tendermint::types::Commit* released = _impl_.last_commit_;
  _impl_.last_commit_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::types::Commit* Block::unsafe_arena_release_last_commit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.types.Block.last_commit)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tendermint::types::Commit* temp = _impl_.last_commit_;
  _impl_.last_commit_ = nullptr;
  return temp;
}
inline ::tendermint::types::Commit* Block::_internal_mutable_last_commit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_commit_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::types::Commit>(GetArena());
    _impl_.last_commit_ = reinterpret_cast<::tendermint::types::Commit*>(p);
  }
  return _impl_.last_commit_;
}
inline ::tendermint::types::Commit* Block::mutable_last_commit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::tendermint::types::Commit* _msg = _internal_mutable_last_commit();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Block.last_commit)
  return _msg;
}
inline void Block::set_allocated_last_commit(::tendermint::types::Commit* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_commit_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.last_commit_ = reinterpret_cast<::tendermint::types::Commit*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Block.last_commit)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace tendermint


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // tendermint_2ftypes_2fblock_2eproto_2epb_2eh
