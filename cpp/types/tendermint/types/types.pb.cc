// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tendermint/types/types.proto
// Protobuf C++ Version: 5.29.4

#include "tendermint/types/types.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace tendermint {
namespace types {

inline constexpr PartSetHeader::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        total_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PartSetHeader::PartSetHeader(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PartSetHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartSetHeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartSetHeaderDefaultTypeInternal() {}
  union {
    PartSetHeader _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartSetHeaderDefaultTypeInternal _PartSetHeader_default_instance_;

inline constexpr Data::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : txs_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Data::Data(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataDefaultTypeInternal() {}
  union {
    Data _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataDefaultTypeInternal _Data_default_instance_;

inline constexpr TxProof::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        root_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        proof_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TxProof::TxProof(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TxProofDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxProofDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxProofDefaultTypeInternal() {}
  union {
    TxProof _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxProofDefaultTypeInternal _TxProof_default_instance_;

inline constexpr Part::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        bytes_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        proof_{nullptr},
        index_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR Part::Part(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartDefaultTypeInternal() {}
  union {
    Part _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartDefaultTypeInternal _Part_default_instance_;

inline constexpr ExtendedCommitSig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        validator_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        signature_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        extension_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        extension_signature_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_{nullptr},
        block_id_flag_{static_cast< ::tendermint::types::BlockIDFlag >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR ExtendedCommitSig::ExtendedCommitSig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ExtendedCommitSigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtendedCommitSigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtendedCommitSigDefaultTypeInternal() {}
  union {
    ExtendedCommitSig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtendedCommitSigDefaultTypeInternal _ExtendedCommitSig_default_instance_;

inline constexpr CommitSig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        validator_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        signature_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_{nullptr},
        block_id_flag_{static_cast< ::tendermint::types::BlockIDFlag >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR CommitSig::CommitSig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CommitSigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommitSigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommitSigDefaultTypeInternal() {}
  union {
    CommitSig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommitSigDefaultTypeInternal _CommitSig_default_instance_;

inline constexpr BlockID::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        part_set_header_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR BlockID::BlockID(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BlockIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockIDDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockIDDefaultTypeInternal() {}
  union {
    BlockID _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockIDDefaultTypeInternal _BlockID_default_instance_;

inline constexpr Vote::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        validator_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        signature_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        extension_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        extension_signature_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        block_id_{nullptr},
        timestamp_{nullptr},
        height_{::int64_t{0}},
        type_{static_cast< ::tendermint::types::SignedMsgType >(0)},
        round_{0},
        validator_index_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Vote::Vote(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoteDefaultTypeInternal() {}
  union {
    Vote _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoteDefaultTypeInternal _Vote_default_instance_;

inline constexpr Proposal::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        signature_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        block_id_{nullptr},
        timestamp_{nullptr},
        height_{::int64_t{0}},
        type_{static_cast< ::tendermint::types::SignedMsgType >(0)},
        round_{0},
        pol_round_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Proposal::Proposal(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProposalDefaultTypeInternal() {}
  union {
    Proposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProposalDefaultTypeInternal _Proposal_default_instance_;

inline constexpr Header::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        chain_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        last_commit_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        data_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        validators_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        next_validators_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        consensus_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        app_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        last_results_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        evidence_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        proposer_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        version_{nullptr},
        time_{nullptr},
        last_block_id_{nullptr},
        height_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR Header::Header(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderDefaultTypeInternal _Header_default_instance_;

inline constexpr ExtendedCommit::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        extended_signatures_{},
        block_id_{nullptr},
        height_{::int64_t{0}},
        round_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ExtendedCommit::ExtendedCommit(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ExtendedCommitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtendedCommitDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtendedCommitDefaultTypeInternal() {}
  union {
    ExtendedCommit _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtendedCommitDefaultTypeInternal _ExtendedCommit_default_instance_;

inline constexpr Commit::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        signatures_{},
        block_id_{nullptr},
        height_{::int64_t{0}},
        round_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Commit::Commit(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CommitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommitDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommitDefaultTypeInternal() {}
  union {
    Commit _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommitDefaultTypeInternal _Commit_default_instance_;

inline constexpr SignedHeader::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        commit_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SignedHeader::SignedHeader(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SignedHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignedHeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignedHeaderDefaultTypeInternal() {}
  union {
    SignedHeader _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignedHeaderDefaultTypeInternal _SignedHeader_default_instance_;

inline constexpr BlockMeta::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        block_id_{nullptr},
        header_{nullptr},
        block_size_{::int64_t{0}},
        num_txs_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR BlockMeta::BlockMeta(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BlockMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockMetaDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockMetaDefaultTypeInternal() {}
  union {
    BlockMeta _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockMetaDefaultTypeInternal _BlockMeta_default_instance_;

inline constexpr LightBlock::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        signed_header_{nullptr},
        validator_set_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR LightBlock::LightBlock(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LightBlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LightBlockDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LightBlockDefaultTypeInternal() {}
  union {
    LightBlock _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LightBlockDefaultTypeInternal _LightBlock_default_instance_;
}  // namespace types
}  // namespace tendermint
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_tendermint_2ftypes_2ftypes_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tendermint_2ftypes_2ftypes_2eproto = nullptr;
const ::uint32_t
    TableStruct_tendermint_2ftypes_2ftypes_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tendermint::types::PartSetHeader, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tendermint::types::PartSetHeader, _impl_.total_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::PartSetHeader, _impl_.hash_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Part, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Part, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Part, _impl_.index_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Part, _impl_.bytes_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Part, _impl_.proof_),
        ~0u,
        ~0u,
        0,
        PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockID, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockID, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockID, _impl_.hash_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockID, _impl_.part_set_header_),
        ~0u,
        0,
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_.chain_id_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_.height_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_.time_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_.last_block_id_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_.last_commit_hash_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_.data_hash_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_.validators_hash_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_.next_validators_hash_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_.consensus_hash_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_.app_hash_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_.last_results_hash_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_.evidence_hash_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_.proposer_address_),
        0,
        ~0u,
        ~0u,
        1,
        2,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Data, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Data, _impl_.txs_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, _impl_.height_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, _impl_.round_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, _impl_.block_id_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, _impl_.validator_address_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, _impl_.validator_index_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, _impl_.signature_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, _impl_.extension_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, _impl_.extension_signature_),
        ~0u,
        ~0u,
        ~0u,
        0,
        1,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Commit, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Commit, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Commit, _impl_.height_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Commit, _impl_.round_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Commit, _impl_.block_id_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Commit, _impl_.signatures_),
        ~0u,
        ~0u,
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::tendermint::types::CommitSig, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::CommitSig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tendermint::types::CommitSig, _impl_.block_id_flag_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::CommitSig, _impl_.validator_address_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::CommitSig, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::CommitSig, _impl_.signature_),
        ~0u,
        ~0u,
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::tendermint::types::ExtendedCommit, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::ExtendedCommit, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tendermint::types::ExtendedCommit, _impl_.height_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::ExtendedCommit, _impl_.round_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::ExtendedCommit, _impl_.block_id_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::ExtendedCommit, _impl_.extended_signatures_),
        ~0u,
        ~0u,
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::tendermint::types::ExtendedCommitSig, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::ExtendedCommitSig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tendermint::types::ExtendedCommitSig, _impl_.block_id_flag_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::ExtendedCommitSig, _impl_.validator_address_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::ExtendedCommitSig, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::ExtendedCommitSig, _impl_.signature_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::ExtendedCommitSig, _impl_.extension_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::ExtendedCommitSig, _impl_.extension_signature_),
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Proposal, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Proposal, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Proposal, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Proposal, _impl_.height_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Proposal, _impl_.round_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Proposal, _impl_.pol_round_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Proposal, _impl_.block_id_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Proposal, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Proposal, _impl_.signature_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        1,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::tendermint::types::SignedHeader, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::SignedHeader, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tendermint::types::SignedHeader, _impl_.header_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::SignedHeader, _impl_.commit_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::tendermint::types::LightBlock, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::LightBlock, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tendermint::types::LightBlock, _impl_.signed_header_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::LightBlock, _impl_.validator_set_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockMeta, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockMeta, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockMeta, _impl_.block_id_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockMeta, _impl_.block_size_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockMeta, _impl_.header_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockMeta, _impl_.num_txs_),
        0,
        ~0u,
        1,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::tendermint::types::TxProof, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::TxProof, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tendermint::types::TxProof, _impl_.root_hash_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::TxProof, _impl_.data_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::TxProof, _impl_.proof_),
        ~0u,
        ~0u,
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::tendermint::types::PartSetHeader)},
        {10, 21, -1, sizeof(::tendermint::types::Part)},
        {24, 34, -1, sizeof(::tendermint::types::BlockID)},
        {36, 58, -1, sizeof(::tendermint::types::Header)},
        {72, -1, -1, sizeof(::tendermint::types::Data)},
        {81, 99, -1, sizeof(::tendermint::types::Vote)},
        {109, 121, -1, sizeof(::tendermint::types::Commit)},
        {125, 137, -1, sizeof(::tendermint::types::CommitSig)},
        {141, 153, -1, sizeof(::tendermint::types::ExtendedCommit)},
        {157, 171, -1, sizeof(::tendermint::types::ExtendedCommitSig)},
        {177, 192, -1, sizeof(::tendermint::types::Proposal)},
        {199, 209, -1, sizeof(::tendermint::types::SignedHeader)},
        {211, 221, -1, sizeof(::tendermint::types::LightBlock)},
        {223, 235, -1, sizeof(::tendermint::types::BlockMeta)},
        {239, 250, -1, sizeof(::tendermint::types::TxProof)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::tendermint::types::_PartSetHeader_default_instance_._instance,
    &::tendermint::types::_Part_default_instance_._instance,
    &::tendermint::types::_BlockID_default_instance_._instance,
    &::tendermint::types::_Header_default_instance_._instance,
    &::tendermint::types::_Data_default_instance_._instance,
    &::tendermint::types::_Vote_default_instance_._instance,
    &::tendermint::types::_Commit_default_instance_._instance,
    &::tendermint::types::_CommitSig_default_instance_._instance,
    &::tendermint::types::_ExtendedCommit_default_instance_._instance,
    &::tendermint::types::_ExtendedCommitSig_default_instance_._instance,
    &::tendermint::types::_Proposal_default_instance_._instance,
    &::tendermint::types::_SignedHeader_default_instance_._instance,
    &::tendermint::types::_LightBlock_default_instance_._instance,
    &::tendermint::types::_BlockMeta_default_instance_._instance,
    &::tendermint::types::_TxProof_default_instance_._instance,
};
const char descriptor_table_protodef_tendermint_2ftypes_2ftypes_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\034tendermint/types/types.proto\022\020tendermi"
    "nt.types\032\024gogoproto/gogo.proto\032\037google/p"
    "rotobuf/timestamp.proto\032\035tendermint/cryp"
    "to/proof.proto\032\036tendermint/version/types"
    ".proto\032 tendermint/types/validator.proto"
    "\"9\n\rPartSetHeader\022\024\n\005total\030\001 \001(\rR\005total\022"
    "\022\n\004hash\030\002 \001(\014R\004hash\"h\n\004Part\022\024\n\005index\030\001 \001"
    "(\rR\005index\022\024\n\005bytes\030\002 \001(\014R\005bytes\0224\n\005proof"
    "\030\003 \001(\0132\030.tendermint.crypto.ProofB\004\310\336\037\000R\005"
    "proof\"l\n\007BlockID\022\022\n\004hash\030\001 \001(\014R\004hash\022M\n\017"
    "part_set_header\030\002 \001(\0132\037.tendermint.types"
    ".PartSetHeaderB\004\310\336\037\000R\rpartSetHeader\"\346\004\n\006"
    "Header\022=\n\007version\030\001 \001(\0132\035.tendermint.ver"
    "sion.ConsensusB\004\310\336\037\000R\007version\022&\n\010chain_i"
    "d\030\002 \001(\tB\013\342\336\037\007ChainIDR\007chainId\022\026\n\006height\030"
    "\003 \001(\003R\006height\0228\n\004time\030\004 \001(\0132\032.google.pro"
    "tobuf.TimestampB\010\310\336\037\000\220\337\037\001R\004time\022C\n\rlast_"
    "block_id\030\005 \001(\0132\031.tendermint.types.BlockI"
    "DB\004\310\336\037\000R\013lastBlockId\022(\n\020last_commit_hash"
    "\030\006 \001(\014R\016lastCommitHash\022\033\n\tdata_hash\030\007 \001("
    "\014R\010dataHash\022\'\n\017validators_hash\030\010 \001(\014R\016va"
    "lidatorsHash\0220\n\024next_validators_hash\030\t \001"
    "(\014R\022nextValidatorsHash\022%\n\016consensus_hash"
    "\030\n \001(\014R\rconsensusHash\022\031\n\010app_hash\030\013 \001(\014R"
    "\007appHash\022*\n\021last_results_hash\030\014 \001(\014R\017las"
    "tResultsHash\022#\n\revidence_hash\030\r \001(\014R\014evi"
    "denceHash\022)\n\020proposer_address\030\016 \001(\014R\017pro"
    "poserAddress\"\030\n\004Data\022\020\n\003txs\030\001 \003(\014R\003txs\"\267"
    "\003\n\004Vote\0223\n\004type\030\001 \001(\0162\037.tendermint.types"
    ".SignedMsgTypeR\004type\022\026\n\006height\030\002 \001(\003R\006he"
    "ight\022\024\n\005round\030\003 \001(\005R\005round\022E\n\010block_id\030\004"
    " \001(\0132\031.tendermint.types.BlockIDB\017\310\336\037\000\342\336\037"
    "\007BlockIDR\007blockId\022B\n\ttimestamp\030\005 \001(\0132\032.g"
    "oogle.protobuf.TimestampB\010\310\336\037\000\220\337\037\001R\ttime"
    "stamp\022+\n\021validator_address\030\006 \001(\014R\020valida"
    "torAddress\022\'\n\017validator_index\030\007 \001(\005R\016val"
    "idatorIndex\022\034\n\tsignature\030\010 \001(\014R\tsignatur"
    "e\022\034\n\textension\030\t \001(\014R\textension\022/\n\023exten"
    "sion_signature\030\n \001(\014R\022extensionSignature"
    "\"\300\001\n\006Commit\022\026\n\006height\030\001 \001(\003R\006height\022\024\n\005r"
    "ound\030\002 \001(\005R\005round\022E\n\010block_id\030\003 \001(\0132\031.te"
    "ndermint.types.BlockIDB\017\310\336\037\000\342\336\037\007BlockIDR"
    "\007blockId\022A\n\nsignatures\030\004 \003(\0132\033.tendermin"
    "t.types.CommitSigB\004\310\336\037\000R\nsignatures\"\335\001\n\t"
    "CommitSig\022A\n\rblock_id_flag\030\001 \001(\0162\035.tende"
    "rmint.types.BlockIDFlagR\013blockIdFlag\022+\n\021"
    "validator_address\030\002 \001(\014R\020validatorAddres"
    "s\022B\n\ttimestamp\030\003 \001(\0132\032.google.protobuf.T"
    "imestampB\010\310\336\037\000\220\337\037\001R\ttimestamp\022\034\n\tsignatu"
    "re\030\004 \001(\014R\tsignature\"\341\001\n\016ExtendedCommit\022\026"
    "\n\006height\030\001 \001(\003R\006height\022\024\n\005round\030\002 \001(\005R\005r"
    "ound\022E\n\010block_id\030\003 \001(\0132\031.tendermint.type"
    "s.BlockIDB\017\310\336\037\000\342\336\037\007BlockIDR\007blockId\022Z\n\023e"
    "xtended_signatures\030\004 \003(\0132#.tendermint.ty"
    "pes.ExtendedCommitSigB\004\310\336\037\000R\022extendedSig"
    "natures\"\264\002\n\021ExtendedCommitSig\022A\n\rblock_i"
    "d_flag\030\001 \001(\0162\035.tendermint.types.BlockIDF"
    "lagR\013blockIdFlag\022+\n\021validator_address\030\002 "
    "\001(\014R\020validatorAddress\022B\n\ttimestamp\030\003 \001(\013"
    "2\032.google.protobuf.TimestampB\010\310\336\037\000\220\337\037\001R\t"
    "timestamp\022\034\n\tsignature\030\004 \001(\014R\tsignature\022"
    "\034\n\textension\030\005 \001(\014R\textension\022/\n\023extensi"
    "on_signature\030\006 \001(\014R\022extensionSignature\"\263"
    "\002\n\010Proposal\0223\n\004type\030\001 \001(\0162\037.tendermint.t"
    "ypes.SignedMsgTypeR\004type\022\026\n\006height\030\002 \001(\003"
    "R\006height\022\024\n\005round\030\003 \001(\005R\005round\022\033\n\tpol_ro"
    "und\030\004 \001(\005R\010polRound\022E\n\010block_id\030\005 \001(\0132\031."
    "tendermint.types.BlockIDB\017\310\336\037\000\342\336\037\007BlockI"
    "DR\007blockId\022B\n\ttimestamp\030\006 \001(\0132\032.google.p"
    "rotobuf.TimestampB\010\310\336\037\000\220\337\037\001R\ttimestamp\022\034"
    "\n\tsignature\030\007 \001(\014R\tsignature\"r\n\014SignedHe"
    "ader\0220\n\006header\030\001 \001(\0132\030.tendermint.types."
    "HeaderR\006header\0220\n\006commit\030\002 \001(\0132\030.tenderm"
    "int.types.CommitR\006commit\"\226\001\n\nLightBlock\022"
    "C\n\rsigned_header\030\001 \001(\0132\036.tendermint.type"
    "s.SignedHeaderR\014signedHeader\022C\n\rvalidato"
    "r_set\030\002 \001(\0132\036.tendermint.types.Validator"
    "SetR\014validatorSet\"\302\001\n\tBlockMeta\022E\n\010block"
    "_id\030\001 \001(\0132\031.tendermint.types.BlockIDB\017\310\336"
    "\037\000\342\336\037\007BlockIDR\007blockId\022\035\n\nblock_size\030\002 \001"
    "(\003R\tblockSize\0226\n\006header\030\003 \001(\0132\030.tendermi"
    "nt.types.HeaderB\004\310\336\037\000R\006header\022\027\n\007num_txs"
    "\030\004 \001(\003R\006numTxs\"j\n\007TxProof\022\033\n\troot_hash\030\001"
    " \001(\014R\010rootHash\022\022\n\004data\030\002 \001(\014R\004data\022.\n\005pr"
    "oof\030\003 \001(\0132\030.tendermint.crypto.ProofR\005pro"
    "of*\327\001\n\rSignedMsgType\022,\n\027SIGNED_MSG_TYPE_"
    "UNKNOWN\020\000\032\017\212\235 \013UnknownType\022,\n\027SIGNED_MSG"
    "_TYPE_PREVOTE\020\001\032\017\212\235 \013PrevoteType\0220\n\031SIGN"
    "ED_MSG_TYPE_PRECOMMIT\020\002\032\021\212\235 \rPrecommitTy"
    "pe\022.\n\030SIGNED_MSG_TYPE_PROPOSAL\020 \032\020\212\235 \014Pr"
    "oposalType\032\010\210\243\036\000\250\244\036\001B5Z3github.com/comet"
    "bft/cometbft/proto/tendermint/typesb\006pro"
    "to3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_tendermint_2ftypes_2ftypes_2eproto_deps[5] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
        &::descriptor_table_tendermint_2fcrypto_2fproof_2eproto,
        &::descriptor_table_tendermint_2ftypes_2fvalidator_2eproto,
        &::descriptor_table_tendermint_2fversion_2ftypes_2eproto,
};
static ::absl::once_flag descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_tendermint_2ftypes_2ftypes_2eproto = {
    false,
    false,
    3683,
    descriptor_table_protodef_tendermint_2ftypes_2ftypes_2eproto,
    "tendermint/types/types.proto",
    &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once,
    descriptor_table_tendermint_2ftypes_2ftypes_2eproto_deps,
    5,
    15,
    schemas,
    file_default_instances,
    TableStruct_tendermint_2ftypes_2ftypes_2eproto::offsets,
    file_level_enum_descriptors_tendermint_2ftypes_2ftypes_2eproto,
    file_level_service_descriptors_tendermint_2ftypes_2ftypes_2eproto,
};
namespace tendermint {
namespace types {
const ::google::protobuf::EnumDescriptor* SignedMsgType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_tendermint_2ftypes_2ftypes_2eproto);
  return file_level_enum_descriptors_tendermint_2ftypes_2ftypes_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t SignedMsgType_internal_data_[] = {
    196608u, 32u, 536870912u, };
bool SignedMsgType_IsValid(int value) {
  return 0 <= value && value <= 32 && ((4294967303u >> value) & 1) != 0;
}
// ===================================================================

class PartSetHeader::_Internal {
 public:
};

PartSetHeader::PartSetHeader(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.PartSetHeader)
}
inline PROTOBUF_NDEBUG_INLINE PartSetHeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tendermint::types::PartSetHeader& from_msg)
      : hash_(arena, from.hash_),
        _cached_size_{0} {}

PartSetHeader::PartSetHeader(
    ::google::protobuf::Arena* arena,
    const PartSetHeader& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PartSetHeader* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.total_ = from._impl_.total_;

  // @@protoc_insertion_point(copy_constructor:tendermint.types.PartSetHeader)
}
inline PROTOBUF_NDEBUG_INLINE PartSetHeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : hash_(arena),
        _cached_size_{0} {}

inline void PartSetHeader::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.total_ = {};
}
PartSetHeader::~PartSetHeader() {
  // @@protoc_insertion_point(destructor:tendermint.types.PartSetHeader)
  SharedDtor(*this);
}
inline void PartSetHeader::SharedDtor(MessageLite& self) {
  PartSetHeader& this_ = static_cast<PartSetHeader&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.hash_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PartSetHeader::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PartSetHeader(arena);
}
constexpr auto PartSetHeader::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(PartSetHeader),
                                            alignof(PartSetHeader));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PartSetHeader::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PartSetHeader_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PartSetHeader::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PartSetHeader>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PartSetHeader::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PartSetHeader>(), &PartSetHeader::ByteSizeLong,
            &PartSetHeader::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PartSetHeader, _impl_._cached_size_),
        false,
    },
    &PartSetHeader::kDescriptorMethods,
    &descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PartSetHeader::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> PartSetHeader::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tendermint::types::PartSetHeader>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bytes hash = 2 [json_name = "hash"];
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PartSetHeader, _impl_.hash_)}},
    // uint32 total = 1 [json_name = "total"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PartSetHeader, _impl_.total_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PartSetHeader, _impl_.total_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 total = 1 [json_name = "total"];
    {PROTOBUF_FIELD_OFFSET(PartSetHeader, _impl_.total_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // bytes hash = 2 [json_name = "hash"];
    {PROTOBUF_FIELD_OFFSET(PartSetHeader, _impl_.hash_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void PartSetHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.PartSetHeader)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hash_.ClearToEmpty();
  _impl_.total_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PartSetHeader::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PartSetHeader& this_ = static_cast<const PartSetHeader&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PartSetHeader::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PartSetHeader& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.PartSetHeader)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 total = 1 [json_name = "total"];
          if (this_._internal_total() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_total(), target);
          }

          // bytes hash = 2 [json_name = "hash"];
          if (!this_._internal_hash().empty()) {
            const std::string& _s = this_._internal_hash();
            target = stream->WriteBytesMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.PartSetHeader)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PartSetHeader::ByteSizeLong(const MessageLite& base) {
          const PartSetHeader& this_ = static_cast<const PartSetHeader&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PartSetHeader::ByteSizeLong() const {
          const PartSetHeader& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tendermint.types.PartSetHeader)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bytes hash = 2 [json_name = "hash"];
            if (!this_._internal_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_hash());
            }
            // uint32 total = 1 [json_name = "total"];
            if (this_._internal_total() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_total());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PartSetHeader::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PartSetHeader*>(&to_msg);
  auto& from = static_cast<const PartSetHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.PartSetHeader)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (from._internal_total() != 0) {
    _this->_impl_.total_ = from._impl_.total_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PartSetHeader::CopyFrom(const PartSetHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.PartSetHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PartSetHeader::InternalSwap(PartSetHeader* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, &other->_impl_.hash_, arena);
        swap(_impl_.total_, other->_impl_.total_);
}

::google::protobuf::Metadata PartSetHeader::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Part::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Part>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Part, _impl_._has_bits_);
};

void Part::clear_proof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.proof_ != nullptr) _impl_.proof_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Part::Part(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.Part)
}
inline PROTOBUF_NDEBUG_INLINE Part::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tendermint::types::Part& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        bytes_(arena, from.bytes_) {}

Part::Part(
    ::google::protobuf::Arena* arena,
    const Part& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Part* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.proof_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tendermint::crypto::Proof>(
                              arena, *from._impl_.proof_)
                        : nullptr;
  _impl_.index_ = from._impl_.index_;

  // @@protoc_insertion_point(copy_constructor:tendermint.types.Part)
}
inline PROTOBUF_NDEBUG_INLINE Part::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        bytes_(arena) {}

inline void Part::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, proof_),
           0,
           offsetof(Impl_, index_) -
               offsetof(Impl_, proof_) +
               sizeof(Impl_::index_));
}
Part::~Part() {
  // @@protoc_insertion_point(destructor:tendermint.types.Part)
  SharedDtor(*this);
}
inline void Part::SharedDtor(MessageLite& self) {
  Part& this_ = static_cast<Part&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.bytes_.Destroy();
  delete this_._impl_.proof_;
  this_._impl_.~Impl_();
}

inline void* Part::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Part(arena);
}
constexpr auto Part::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Part),
                                            alignof(Part));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Part::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Part_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Part::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Part>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Part::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Part>(), &Part::ByteSizeLong,
            &Part::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Part, _impl_._cached_size_),
        false,
    },
    &Part::kDescriptorMethods,
    &descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Part::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> Part::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Part, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tendermint::types::Part>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 index = 1 [json_name = "index"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Part, _impl_.index_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Part, _impl_.index_)}},
    // bytes bytes = 2 [json_name = "bytes"];
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Part, _impl_.bytes_)}},
    // .tendermint.crypto.Proof proof = 3 [json_name = "proof", (.gogoproto.nullable) = false];
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(Part, _impl_.proof_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 index = 1 [json_name = "index"];
    {PROTOBUF_FIELD_OFFSET(Part, _impl_.index_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // bytes bytes = 2 [json_name = "bytes"];
    {PROTOBUF_FIELD_OFFSET(Part, _impl_.bytes_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // .tendermint.crypto.Proof proof = 3 [json_name = "proof", (.gogoproto.nullable) = false];
    {PROTOBUF_FIELD_OFFSET(Part, _impl_.proof_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tendermint::crypto::Proof>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Part::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.Part)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bytes_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.proof_ != nullptr);
    _impl_.proof_->Clear();
  }
  _impl_.index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Part::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Part& this_ = static_cast<const Part&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Part::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Part& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.Part)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 index = 1 [json_name = "index"];
          if (this_._internal_index() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_index(), target);
          }

          // bytes bytes = 2 [json_name = "bytes"];
          if (!this_._internal_bytes().empty()) {
            const std::string& _s = this_._internal_bytes();
            target = stream->WriteBytesMaybeAliased(2, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tendermint.crypto.Proof proof = 3 [json_name = "proof", (.gogoproto.nullable) = false];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.proof_, this_._impl_.proof_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.Part)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Part::ByteSizeLong(const MessageLite& base) {
          const Part& this_ = static_cast<const Part&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Part::ByteSizeLong() const {
          const Part& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tendermint.types.Part)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bytes bytes = 2 [json_name = "bytes"];
            if (!this_._internal_bytes().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_bytes());
            }
          }
           {
            // .tendermint.crypto.Proof proof = 3 [json_name = "proof", (.gogoproto.nullable) = false];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.proof_);
            }
          }
           {
            // uint32 index = 1 [json_name = "index"];
            if (this_._internal_index() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_index());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Part::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Part*>(&to_msg);
  auto& from = static_cast<const Part&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.Part)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bytes().empty()) {
    _this->_internal_set_bytes(from._internal_bytes());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.proof_ != nullptr);
    if (_this->_impl_.proof_ == nullptr) {
      _this->_impl_.proof_ =
          ::google::protobuf::Message::CopyConstruct<::tendermint::crypto::Proof>(arena, *from._impl_.proof_);
    } else {
      _this->_impl_.proof_->MergeFrom(*from._impl_.proof_);
    }
  }
  if (from._internal_index() != 0) {
    _this->_impl_.index_ = from._impl_.index_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Part::CopyFrom(const Part& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.Part)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Part::InternalSwap(Part* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bytes_, &other->_impl_.bytes_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Part, _impl_.index_)
      + sizeof(Part::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(Part, _impl_.proof_)>(
          reinterpret_cast<char*>(&_impl_.proof_),
          reinterpret_cast<char*>(&other->_impl_.proof_));
}

::google::protobuf::Metadata Part::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class BlockID::_Internal {
 public:
  using HasBits =
      decltype(std::declval<BlockID>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(BlockID, _impl_._has_bits_);
};

BlockID::BlockID(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.BlockID)
}
inline PROTOBUF_NDEBUG_INLINE BlockID::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tendermint::types::BlockID& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        hash_(arena, from.hash_) {}

BlockID::BlockID(
    ::google::protobuf::Arena* arena,
    const BlockID& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  BlockID* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.part_set_header_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tendermint::types::PartSetHeader>(
                              arena, *from._impl_.part_set_header_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tendermint.types.BlockID)
}
inline PROTOBUF_NDEBUG_INLINE BlockID::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        hash_(arena) {}

inline void BlockID::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.part_set_header_ = {};
}
BlockID::~BlockID() {
  // @@protoc_insertion_point(destructor:tendermint.types.BlockID)
  SharedDtor(*this);
}
inline void BlockID::SharedDtor(MessageLite& self) {
  BlockID& this_ = static_cast<BlockID&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.hash_.Destroy();
  delete this_._impl_.part_set_header_;
  this_._impl_.~Impl_();
}

inline void* BlockID::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) BlockID(arena);
}
constexpr auto BlockID::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(BlockID),
                                            alignof(BlockID));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull BlockID::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_BlockID_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &BlockID::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<BlockID>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &BlockID::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<BlockID>(), &BlockID::ByteSizeLong,
            &BlockID::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(BlockID, _impl_._cached_size_),
        false,
    },
    &BlockID::kDescriptorMethods,
    &descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* BlockID::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> BlockID::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BlockID, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tendermint::types::BlockID>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .tendermint.types.PartSetHeader part_set_header = 2 [json_name = "partSetHeader", (.gogoproto.nullable) = false];
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(BlockID, _impl_.part_set_header_)}},
    // bytes hash = 1 [json_name = "hash"];
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(BlockID, _impl_.hash_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes hash = 1 [json_name = "hash"];
    {PROTOBUF_FIELD_OFFSET(BlockID, _impl_.hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // .tendermint.types.PartSetHeader part_set_header = 2 [json_name = "partSetHeader", (.gogoproto.nullable) = false];
    {PROTOBUF_FIELD_OFFSET(BlockID, _impl_.part_set_header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tendermint::types::PartSetHeader>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void BlockID::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.BlockID)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hash_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.part_set_header_ != nullptr);
    _impl_.part_set_header_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* BlockID::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const BlockID& this_ = static_cast<const BlockID&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* BlockID::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const BlockID& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.BlockID)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bytes hash = 1 [json_name = "hash"];
          if (!this_._internal_hash().empty()) {
            const std::string& _s = this_._internal_hash();
            target = stream->WriteBytesMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tendermint.types.PartSetHeader part_set_header = 2 [json_name = "partSetHeader", (.gogoproto.nullable) = false];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.part_set_header_, this_._impl_.part_set_header_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.BlockID)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t BlockID::ByteSizeLong(const MessageLite& base) {
          const BlockID& this_ = static_cast<const BlockID&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t BlockID::ByteSizeLong() const {
          const BlockID& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tendermint.types.BlockID)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bytes hash = 1 [json_name = "hash"];
            if (!this_._internal_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_hash());
            }
          }
           {
            // .tendermint.types.PartSetHeader part_set_header = 2 [json_name = "partSetHeader", (.gogoproto.nullable) = false];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.part_set_header_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void BlockID::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BlockID*>(&to_msg);
  auto& from = static_cast<const BlockID&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.BlockID)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.part_set_header_ != nullptr);
    if (_this->_impl_.part_set_header_ == nullptr) {
      _this->_impl_.part_set_header_ =
          ::google::protobuf::Message::CopyConstruct<::tendermint::types::PartSetHeader>(arena, *from._impl_.part_set_header_);
    } else {
      _this->_impl_.part_set_header_->MergeFrom(*from._impl_.part_set_header_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BlockID::CopyFrom(const BlockID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.BlockID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BlockID::InternalSwap(BlockID* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, &other->_impl_.hash_, arena);
  swap(_impl_.part_set_header_, other->_impl_.part_set_header_);
}

::google::protobuf::Metadata BlockID::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Header::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Header>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Header, _impl_._has_bits_);
};

void Header::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.version_ != nullptr) _impl_.version_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Header::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Header::Header(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.Header)
}
inline PROTOBUF_NDEBUG_INLINE Header::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tendermint::types::Header& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        chain_id_(arena, from.chain_id_),
        last_commit_hash_(arena, from.last_commit_hash_),
        data_hash_(arena, from.data_hash_),
        validators_hash_(arena, from.validators_hash_),
        next_validators_hash_(arena, from.next_validators_hash_),
        consensus_hash_(arena, from.consensus_hash_),
        app_hash_(arena, from.app_hash_),
        last_results_hash_(arena, from.last_results_hash_),
        evidence_hash_(arena, from.evidence_hash_),
        proposer_address_(arena, from.proposer_address_) {}

Header::Header(
    ::google::protobuf::Arena* arena,
    const Header& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Header* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.version_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tendermint::version::Consensus>(
                              arena, *from._impl_.version_)
                        : nullptr;
  _impl_.time_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.time_)
                        : nullptr;
  _impl_.last_block_id_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::tendermint::types::BlockID>(
                              arena, *from._impl_.last_block_id_)
                        : nullptr;
  _impl_.height_ = from._impl_.height_;

  // @@protoc_insertion_point(copy_constructor:tendermint.types.Header)
}
inline PROTOBUF_NDEBUG_INLINE Header::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        chain_id_(arena),
        last_commit_hash_(arena),
        data_hash_(arena),
        validators_hash_(arena),
        next_validators_hash_(arena),
        consensus_hash_(arena),
        app_hash_(arena),
        last_results_hash_(arena),
        evidence_hash_(arena),
        proposer_address_(arena) {}

inline void Header::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, version_),
           0,
           offsetof(Impl_, height_) -
               offsetof(Impl_, version_) +
               sizeof(Impl_::height_));
}
Header::~Header() {
  // @@protoc_insertion_point(destructor:tendermint.types.Header)
  SharedDtor(*this);
}
inline void Header::SharedDtor(MessageLite& self) {
  Header& this_ = static_cast<Header&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.chain_id_.Destroy();
  this_._impl_.last_commit_hash_.Destroy();
  this_._impl_.data_hash_.Destroy();
  this_._impl_.validators_hash_.Destroy();
  this_._impl_.next_validators_hash_.Destroy();
  this_._impl_.consensus_hash_.Destroy();
  this_._impl_.app_hash_.Destroy();
  this_._impl_.last_results_hash_.Destroy();
  this_._impl_.evidence_hash_.Destroy();
  this_._impl_.proposer_address_.Destroy();
  delete this_._impl_.version_;
  delete this_._impl_.time_;
  delete this_._impl_.last_block_id_;
  this_._impl_.~Impl_();
}

inline void* Header::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Header(arena);
}
constexpr auto Header::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Header),
                                            alignof(Header));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Header::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Header_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Header::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Header>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Header::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Header>(), &Header::ByteSizeLong,
            &Header::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Header, _impl_._cached_size_),
        false,
    },
    &Header::kDescriptorMethods,
    &descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Header::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 14, 3, 48, 2> Header::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Header, _impl_._has_bits_),
    0, // no _extensions_
    14, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950912,  // skipmap
    offsetof(decltype(_table_), field_entries),
    14,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tendermint::types::Header>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .tendermint.version.Consensus version = 1 [json_name = "version", (.gogoproto.nullable) = false];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.version_)}},
    // string chain_id = 2 [json_name = "chainId", (.gogoproto.customname) = "ChainID"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.chain_id_)}},
    // int64 height = 3 [json_name = "height"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Header, _impl_.height_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.height_)}},
    // .google.protobuf.Timestamp time = 4 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(Header, _impl_.time_)}},
    // .tendermint.types.BlockID last_block_id = 5 [json_name = "lastBlockId", (.gogoproto.nullable) = false];
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 2, PROTOBUF_FIELD_OFFSET(Header, _impl_.last_block_id_)}},
    // bytes last_commit_hash = 6 [json_name = "lastCommitHash"];
    {::_pbi::TcParser::FastBS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.last_commit_hash_)}},
    // bytes data_hash = 7 [json_name = "dataHash"];
    {::_pbi::TcParser::FastBS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.data_hash_)}},
    // bytes validators_hash = 8 [json_name = "validatorsHash"];
    {::_pbi::TcParser::FastBS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.validators_hash_)}},
    // bytes next_validators_hash = 9 [json_name = "nextValidatorsHash"];
    {::_pbi::TcParser::FastBS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.next_validators_hash_)}},
    // bytes consensus_hash = 10 [json_name = "consensusHash"];
    {::_pbi::TcParser::FastBS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.consensus_hash_)}},
    // bytes app_hash = 11 [json_name = "appHash"];
    {::_pbi::TcParser::FastBS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.app_hash_)}},
    // bytes last_results_hash = 12 [json_name = "lastResultsHash"];
    {::_pbi::TcParser::FastBS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.last_results_hash_)}},
    // bytes evidence_hash = 13 [json_name = "evidenceHash"];
    {::_pbi::TcParser::FastBS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.evidence_hash_)}},
    // bytes proposer_address = 14 [json_name = "proposerAddress"];
    {::_pbi::TcParser::FastBS1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.proposer_address_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .tendermint.version.Consensus version = 1 [json_name = "version", (.gogoproto.nullable) = false];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.version_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string chain_id = 2 [json_name = "chainId", (.gogoproto.customname) = "ChainID"];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.chain_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 height = 3 [json_name = "height"];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.height_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .google.protobuf.Timestamp time = 4 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.time_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tendermint.types.BlockID last_block_id = 5 [json_name = "lastBlockId", (.gogoproto.nullable) = false];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.last_block_id_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes last_commit_hash = 6 [json_name = "lastCommitHash"];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.last_commit_hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes data_hash = 7 [json_name = "dataHash"];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.data_hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes validators_hash = 8 [json_name = "validatorsHash"];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.validators_hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes next_validators_hash = 9 [json_name = "nextValidatorsHash"];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.next_validators_hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes consensus_hash = 10 [json_name = "consensusHash"];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.consensus_hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes app_hash = 11 [json_name = "appHash"];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.app_hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes last_results_hash = 12 [json_name = "lastResultsHash"];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.last_results_hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes evidence_hash = 13 [json_name = "evidenceHash"];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.evidence_hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes proposer_address = 14 [json_name = "proposerAddress"];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.proposer_address_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tendermint::version::Consensus>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tendermint::types::BlockID>()},
  }}, {{
    "\27\0\10\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "tendermint.types.Header"
    "chain_id"
  }},
};

PROTOBUF_NOINLINE void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.Header)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chain_id_.ClearToEmpty();
  _impl_.last_commit_hash_.ClearToEmpty();
  _impl_.data_hash_.ClearToEmpty();
  _impl_.validators_hash_.ClearToEmpty();
  _impl_.next_validators_hash_.ClearToEmpty();
  _impl_.consensus_hash_.ClearToEmpty();
  _impl_.app_hash_.ClearToEmpty();
  _impl_.last_results_hash_.ClearToEmpty();
  _impl_.evidence_hash_.ClearToEmpty();
  _impl_.proposer_address_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.version_ != nullptr);
      _impl_.version_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.last_block_id_ != nullptr);
      _impl_.last_block_id_->Clear();
    }
  }
  _impl_.height_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Header::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Header& this_ = static_cast<const Header&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Header::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Header& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.Header)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tendermint.version.Consensus version = 1 [json_name = "version", (.gogoproto.nullable) = false];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.version_, this_._impl_.version_->GetCachedSize(), target,
                stream);
          }

          // string chain_id = 2 [json_name = "chainId", (.gogoproto.customname) = "ChainID"];
          if (!this_._internal_chain_id().empty()) {
            const std::string& _s = this_._internal_chain_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tendermint.types.Header.chain_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // int64 height = 3 [json_name = "height"];
          if (this_._internal_height() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<3>(
                    stream, this_._internal_height(), target);
          }

          // .google.protobuf.Timestamp time = 4 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.time_, this_._impl_.time_->GetCachedSize(), target,
                stream);
          }

          // .tendermint.types.BlockID last_block_id = 5 [json_name = "lastBlockId", (.gogoproto.nullable) = false];
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.last_block_id_, this_._impl_.last_block_id_->GetCachedSize(), target,
                stream);
          }

          // bytes last_commit_hash = 6 [json_name = "lastCommitHash"];
          if (!this_._internal_last_commit_hash().empty()) {
            const std::string& _s = this_._internal_last_commit_hash();
            target = stream->WriteBytesMaybeAliased(6, _s, target);
          }

          // bytes data_hash = 7 [json_name = "dataHash"];
          if (!this_._internal_data_hash().empty()) {
            const std::string& _s = this_._internal_data_hash();
            target = stream->WriteBytesMaybeAliased(7, _s, target);
          }

          // bytes validators_hash = 8 [json_name = "validatorsHash"];
          if (!this_._internal_validators_hash().empty()) {
            const std::string& _s = this_._internal_validators_hash();
            target = stream->WriteBytesMaybeAliased(8, _s, target);
          }

          // bytes next_validators_hash = 9 [json_name = "nextValidatorsHash"];
          if (!this_._internal_next_validators_hash().empty()) {
            const std::string& _s = this_._internal_next_validators_hash();
            target = stream->WriteBytesMaybeAliased(9, _s, target);
          }

          // bytes consensus_hash = 10 [json_name = "consensusHash"];
          if (!this_._internal_consensus_hash().empty()) {
            const std::string& _s = this_._internal_consensus_hash();
            target = stream->WriteBytesMaybeAliased(10, _s, target);
          }

          // bytes app_hash = 11 [json_name = "appHash"];
          if (!this_._internal_app_hash().empty()) {
            const std::string& _s = this_._internal_app_hash();
            target = stream->WriteBytesMaybeAliased(11, _s, target);
          }

          // bytes last_results_hash = 12 [json_name = "lastResultsHash"];
          if (!this_._internal_last_results_hash().empty()) {
            const std::string& _s = this_._internal_last_results_hash();
            target = stream->WriteBytesMaybeAliased(12, _s, target);
          }

          // bytes evidence_hash = 13 [json_name = "evidenceHash"];
          if (!this_._internal_evidence_hash().empty()) {
            const std::string& _s = this_._internal_evidence_hash();
            target = stream->WriteBytesMaybeAliased(13, _s, target);
          }

          // bytes proposer_address = 14 [json_name = "proposerAddress"];
          if (!this_._internal_proposer_address().empty()) {
            const std::string& _s = this_._internal_proposer_address();
            target = stream->WriteBytesMaybeAliased(14, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.Header)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Header::ByteSizeLong(const MessageLite& base) {
          const Header& this_ = static_cast<const Header&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Header::ByteSizeLong() const {
          const Header& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tendermint.types.Header)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string chain_id = 2 [json_name = "chainId", (.gogoproto.customname) = "ChainID"];
            if (!this_._internal_chain_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_chain_id());
            }
            // bytes last_commit_hash = 6 [json_name = "lastCommitHash"];
            if (!this_._internal_last_commit_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_last_commit_hash());
            }
            // bytes data_hash = 7 [json_name = "dataHash"];
            if (!this_._internal_data_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_data_hash());
            }
            // bytes validators_hash = 8 [json_name = "validatorsHash"];
            if (!this_._internal_validators_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_validators_hash());
            }
            // bytes next_validators_hash = 9 [json_name = "nextValidatorsHash"];
            if (!this_._internal_next_validators_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_next_validators_hash());
            }
            // bytes consensus_hash = 10 [json_name = "consensusHash"];
            if (!this_._internal_consensus_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_consensus_hash());
            }
            // bytes app_hash = 11 [json_name = "appHash"];
            if (!this_._internal_app_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_app_hash());
            }
            // bytes last_results_hash = 12 [json_name = "lastResultsHash"];
            if (!this_._internal_last_results_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_last_results_hash());
            }
            // bytes evidence_hash = 13 [json_name = "evidenceHash"];
            if (!this_._internal_evidence_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_evidence_hash());
            }
            // bytes proposer_address = 14 [json_name = "proposerAddress"];
            if (!this_._internal_proposer_address().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_proposer_address());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .tendermint.version.Consensus version = 1 [json_name = "version", (.gogoproto.nullable) = false];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.version_);
            }
            // .google.protobuf.Timestamp time = 4 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.time_);
            }
            // .tendermint.types.BlockID last_block_id = 5 [json_name = "lastBlockId", (.gogoproto.nullable) = false];
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.last_block_id_);
            }
          }
           {
            // int64 height = 3 [json_name = "height"];
            if (this_._internal_height() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_height());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Header::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Header*>(&to_msg);
  auto& from = static_cast<const Header&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.Header)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chain_id().empty()) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  if (!from._internal_last_commit_hash().empty()) {
    _this->_internal_set_last_commit_hash(from._internal_last_commit_hash());
  }
  if (!from._internal_data_hash().empty()) {
    _this->_internal_set_data_hash(from._internal_data_hash());
  }
  if (!from._internal_validators_hash().empty()) {
    _this->_internal_set_validators_hash(from._internal_validators_hash());
  }
  if (!from._internal_next_validators_hash().empty()) {
    _this->_internal_set_next_validators_hash(from._internal_next_validators_hash());
  }
  if (!from._internal_consensus_hash().empty()) {
    _this->_internal_set_consensus_hash(from._internal_consensus_hash());
  }
  if (!from._internal_app_hash().empty()) {
    _this->_internal_set_app_hash(from._internal_app_hash());
  }
  if (!from._internal_last_results_hash().empty()) {
    _this->_internal_set_last_results_hash(from._internal_last_results_hash());
  }
  if (!from._internal_evidence_hash().empty()) {
    _this->_internal_set_evidence_hash(from._internal_evidence_hash());
  }
  if (!from._internal_proposer_address().empty()) {
    _this->_internal_set_proposer_address(from._internal_proposer_address());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.version_ != nullptr);
      if (_this->_impl_.version_ == nullptr) {
        _this->_impl_.version_ =
            ::google::protobuf::Message::CopyConstruct<::tendermint::version::Consensus>(arena, *from._impl_.version_);
      } else {
        _this->_impl_.version_->MergeFrom(*from._impl_.version_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.time_ != nullptr);
      if (_this->_impl_.time_ == nullptr) {
        _this->_impl_.time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.time_);
      } else {
        _this->_impl_.time_->MergeFrom(*from._impl_.time_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.last_block_id_ != nullptr);
      if (_this->_impl_.last_block_id_ == nullptr) {
        _this->_impl_.last_block_id_ =
            ::google::protobuf::Message::CopyConstruct<::tendermint::types::BlockID>(arena, *from._impl_.last_block_id_);
      } else {
        _this->_impl_.last_block_id_->MergeFrom(*from._impl_.last_block_id_);
      }
    }
  }
  if (from._internal_height() != 0) {
    _this->_impl_.height_ = from._impl_.height_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Header::InternalSwap(Header* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.chain_id_, &other->_impl_.chain_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.last_commit_hash_, &other->_impl_.last_commit_hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_hash_, &other->_impl_.data_hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.validators_hash_, &other->_impl_.validators_hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.next_validators_hash_, &other->_impl_.next_validators_hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.consensus_hash_, &other->_impl_.consensus_hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.app_hash_, &other->_impl_.app_hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.last_results_hash_, &other->_impl_.last_results_hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.evidence_hash_, &other->_impl_.evidence_hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proposer_address_, &other->_impl_.proposer_address_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, _impl_.height_)
      + sizeof(Header::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(Header, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::google::protobuf::Metadata Header::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Data::_Internal {
 public:
};

Data::Data(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.Data)
}
inline PROTOBUF_NDEBUG_INLINE Data::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tendermint::types::Data& from_msg)
      : txs_{visibility, arena, from.txs_},
        _cached_size_{0} {}

Data::Data(
    ::google::protobuf::Arena* arena,
    const Data& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Data* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tendermint.types.Data)
}
inline PROTOBUF_NDEBUG_INLINE Data::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : txs_{visibility, arena},
        _cached_size_{0} {}

inline void Data::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Data::~Data() {
  // @@protoc_insertion_point(destructor:tendermint.types.Data)
  SharedDtor(*this);
}
inline void Data::SharedDtor(MessageLite& self) {
  Data& this_ = static_cast<Data&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Data::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Data(arena);
}
constexpr auto Data::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Data, _impl_.txs_) +
          decltype(Data::_impl_.txs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(Data), alignof(Data), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Data::PlacementNew_,
                                 sizeof(Data),
                                 alignof(Data));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Data::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Data_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Data::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Data>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Data::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Data>(), &Data::ByteSizeLong,
            &Data::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Data, _impl_._cached_size_),
        false,
    },
    &Data::kDescriptorMethods,
    &descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Data::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Data::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tendermint::types::Data>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated bytes txs = 1 [json_name = "txs"];
    {::_pbi::TcParser::FastBR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Data, _impl_.txs_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated bytes txs = 1 [json_name = "txs"];
    {PROTOBUF_FIELD_OFFSET(Data, _impl_.txs_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.Data)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.txs_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Data::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Data& this_ = static_cast<const Data&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Data::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Data& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.Data)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated bytes txs = 1 [json_name = "txs"];
          for (int i = 0, n = this_._internal_txs_size(); i < n; ++i) {
            const auto& s = this_._internal_txs().Get(i);
            target = stream->WriteBytes(1, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.Data)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Data::ByteSizeLong(const MessageLite& base) {
          const Data& this_ = static_cast<const Data&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Data::ByteSizeLong() const {
          const Data& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tendermint.types.Data)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated bytes txs = 1 [json_name = "txs"];
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_txs().size());
              for (int i = 0, n = this_._internal_txs().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
                    this_._internal_txs().Get(i));
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Data::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Data*>(&to_msg);
  auto& from = static_cast<const Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.Data)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_txs()->MergeFrom(from._internal_txs());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Data::InternalSwap(Data* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.txs_.InternalSwap(&other->_impl_.txs_);
}

::google::protobuf::Metadata Data::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Vote::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Vote>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Vote, _impl_._has_bits_);
};

void Vote::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Vote::Vote(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.Vote)
}
inline PROTOBUF_NDEBUG_INLINE Vote::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tendermint::types::Vote& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        validator_address_(arena, from.validator_address_),
        signature_(arena, from.signature_),
        extension_(arena, from.extension_),
        extension_signature_(arena, from.extension_signature_) {}

Vote::Vote(
    ::google::protobuf::Arena* arena,
    const Vote& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Vote* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.block_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tendermint::types::BlockID>(
                              arena, *from._impl_.block_id_)
                        : nullptr;
  _impl_.timestamp_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.timestamp_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, height_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, height_),
           offsetof(Impl_, validator_index_) -
               offsetof(Impl_, height_) +
               sizeof(Impl_::validator_index_));

  // @@protoc_insertion_point(copy_constructor:tendermint.types.Vote)
}
inline PROTOBUF_NDEBUG_INLINE Vote::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        validator_address_(arena),
        signature_(arena),
        extension_(arena),
        extension_signature_(arena) {}

inline void Vote::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, block_id_),
           0,
           offsetof(Impl_, validator_index_) -
               offsetof(Impl_, block_id_) +
               sizeof(Impl_::validator_index_));
}
Vote::~Vote() {
  // @@protoc_insertion_point(destructor:tendermint.types.Vote)
  SharedDtor(*this);
}
inline void Vote::SharedDtor(MessageLite& self) {
  Vote& this_ = static_cast<Vote&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.validator_address_.Destroy();
  this_._impl_.signature_.Destroy();
  this_._impl_.extension_.Destroy();
  this_._impl_.extension_signature_.Destroy();
  delete this_._impl_.block_id_;
  delete this_._impl_.timestamp_;
  this_._impl_.~Impl_();
}

inline void* Vote::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Vote(arena);
}
constexpr auto Vote::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Vote),
                                            alignof(Vote));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Vote::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Vote_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Vote::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Vote>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Vote::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Vote>(), &Vote::ByteSizeLong,
            &Vote::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Vote, _impl_._cached_size_),
        false,
    },
    &Vote::kDescriptorMethods,
    &descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Vote::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 2, 0, 2> Vote::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Vote, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tendermint::types::Vote>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .tendermint.types.SignedMsgType type = 1 [json_name = "type"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Vote, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Vote, _impl_.type_)}},
    // int64 height = 2 [json_name = "height"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Vote, _impl_.height_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Vote, _impl_.height_)}},
    // int32 round = 3 [json_name = "round"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Vote, _impl_.round_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Vote, _impl_.round_)}},
    // .tendermint.types.BlockID block_id = 4 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(Vote, _impl_.block_id_)}},
    // .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 1, PROTOBUF_FIELD_OFFSET(Vote, _impl_.timestamp_)}},
    // bytes validator_address = 6 [json_name = "validatorAddress"];
    {::_pbi::TcParser::FastBS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Vote, _impl_.validator_address_)}},
    // int32 validator_index = 7 [json_name = "validatorIndex"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Vote, _impl_.validator_index_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(Vote, _impl_.validator_index_)}},
    // bytes signature = 8 [json_name = "signature"];
    {::_pbi::TcParser::FastBS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(Vote, _impl_.signature_)}},
    // bytes extension = 9 [json_name = "extension"];
    {::_pbi::TcParser::FastBS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(Vote, _impl_.extension_)}},
    // bytes extension_signature = 10 [json_name = "extensionSignature"];
    {::_pbi::TcParser::FastBS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(Vote, _impl_.extension_signature_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .tendermint.types.SignedMsgType type = 1 [json_name = "type"];
    {PROTOBUF_FIELD_OFFSET(Vote, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int64 height = 2 [json_name = "height"];
    {PROTOBUF_FIELD_OFFSET(Vote, _impl_.height_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int32 round = 3 [json_name = "round"];
    {PROTOBUF_FIELD_OFFSET(Vote, _impl_.round_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .tendermint.types.BlockID block_id = 4 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
    {PROTOBUF_FIELD_OFFSET(Vote, _impl_.block_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
    {PROTOBUF_FIELD_OFFSET(Vote, _impl_.timestamp_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes validator_address = 6 [json_name = "validatorAddress"];
    {PROTOBUF_FIELD_OFFSET(Vote, _impl_.validator_address_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // int32 validator_index = 7 [json_name = "validatorIndex"];
    {PROTOBUF_FIELD_OFFSET(Vote, _impl_.validator_index_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bytes signature = 8 [json_name = "signature"];
    {PROTOBUF_FIELD_OFFSET(Vote, _impl_.signature_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes extension = 9 [json_name = "extension"];
    {PROTOBUF_FIELD_OFFSET(Vote, _impl_.extension_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes extension_signature = 10 [json_name = "extensionSignature"];
    {PROTOBUF_FIELD_OFFSET(Vote, _impl_.extension_signature_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tendermint::types::BlockID>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Vote::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.Vote)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.validator_address_.ClearToEmpty();
  _impl_.signature_.ClearToEmpty();
  _impl_.extension_.ClearToEmpty();
  _impl_.extension_signature_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.block_id_ != nullptr);
      _impl_.block_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
  }
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.validator_index_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.validator_index_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Vote::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Vote& this_ = static_cast<const Vote&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Vote::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Vote& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.Vote)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .tendermint.types.SignedMsgType type = 1 [json_name = "type"];
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_type(), target);
          }

          // int64 height = 2 [json_name = "height"];
          if (this_._internal_height() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<2>(
                    stream, this_._internal_height(), target);
          }

          // int32 round = 3 [json_name = "round"];
          if (this_._internal_round() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_round(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tendermint.types.BlockID block_id = 4 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.block_id_, this_._impl_.block_id_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.timestamp_, this_._impl_.timestamp_->GetCachedSize(), target,
                stream);
          }

          // bytes validator_address = 6 [json_name = "validatorAddress"];
          if (!this_._internal_validator_address().empty()) {
            const std::string& _s = this_._internal_validator_address();
            target = stream->WriteBytesMaybeAliased(6, _s, target);
          }

          // int32 validator_index = 7 [json_name = "validatorIndex"];
          if (this_._internal_validator_index() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<7>(
                    stream, this_._internal_validator_index(), target);
          }

          // bytes signature = 8 [json_name = "signature"];
          if (!this_._internal_signature().empty()) {
            const std::string& _s = this_._internal_signature();
            target = stream->WriteBytesMaybeAliased(8, _s, target);
          }

          // bytes extension = 9 [json_name = "extension"];
          if (!this_._internal_extension().empty()) {
            const std::string& _s = this_._internal_extension();
            target = stream->WriteBytesMaybeAliased(9, _s, target);
          }

          // bytes extension_signature = 10 [json_name = "extensionSignature"];
          if (!this_._internal_extension_signature().empty()) {
            const std::string& _s = this_._internal_extension_signature();
            target = stream->WriteBytesMaybeAliased(10, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.Vote)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Vote::ByteSizeLong(const MessageLite& base) {
          const Vote& this_ = static_cast<const Vote&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Vote::ByteSizeLong() const {
          const Vote& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tendermint.types.Vote)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bytes validator_address = 6 [json_name = "validatorAddress"];
            if (!this_._internal_validator_address().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_validator_address());
            }
            // bytes signature = 8 [json_name = "signature"];
            if (!this_._internal_signature().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_signature());
            }
            // bytes extension = 9 [json_name = "extension"];
            if (!this_._internal_extension().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_extension());
            }
            // bytes extension_signature = 10 [json_name = "extensionSignature"];
            if (!this_._internal_extension_signature().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_extension_signature());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .tendermint.types.BlockID block_id = 4 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.block_id_);
            }
            // .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.timestamp_);
            }
          }
           {
            // int64 height = 2 [json_name = "height"];
            if (this_._internal_height() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_height());
            }
            // .tendermint.types.SignedMsgType type = 1 [json_name = "type"];
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
            // int32 round = 3 [json_name = "round"];
            if (this_._internal_round() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_round());
            }
            // int32 validator_index = 7 [json_name = "validatorIndex"];
            if (this_._internal_validator_index() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_validator_index());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Vote::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Vote*>(&to_msg);
  auto& from = static_cast<const Vote&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.Vote)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_validator_address().empty()) {
    _this->_internal_set_validator_address(from._internal_validator_address());
  }
  if (!from._internal_signature().empty()) {
    _this->_internal_set_signature(from._internal_signature());
  }
  if (!from._internal_extension().empty()) {
    _this->_internal_set_extension(from._internal_extension());
  }
  if (!from._internal_extension_signature().empty()) {
    _this->_internal_set_extension_signature(from._internal_extension_signature());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.block_id_ != nullptr);
      if (_this->_impl_.block_id_ == nullptr) {
        _this->_impl_.block_id_ =
            ::google::protobuf::Message::CopyConstruct<::tendermint::types::BlockID>(arena, *from._impl_.block_id_);
      } else {
        _this->_impl_.block_id_->MergeFrom(*from._impl_.block_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.timestamp_ != nullptr);
      if (_this->_impl_.timestamp_ == nullptr) {
        _this->_impl_.timestamp_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_);
      } else {
        _this->_impl_.timestamp_->MergeFrom(*from._impl_.timestamp_);
      }
    }
  }
  if (from._internal_height() != 0) {
    _this->_impl_.height_ = from._impl_.height_;
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  if (from._internal_round() != 0) {
    _this->_impl_.round_ = from._impl_.round_;
  }
  if (from._internal_validator_index() != 0) {
    _this->_impl_.validator_index_ = from._impl_.validator_index_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Vote::CopyFrom(const Vote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Vote::InternalSwap(Vote* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.validator_address_, &other->_impl_.validator_address_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signature_, &other->_impl_.signature_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.extension_, &other->_impl_.extension_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.extension_signature_, &other->_impl_.extension_signature_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vote, _impl_.validator_index_)
      + sizeof(Vote::_impl_.validator_index_)
      - PROTOBUF_FIELD_OFFSET(Vote, _impl_.block_id_)>(
          reinterpret_cast<char*>(&_impl_.block_id_),
          reinterpret_cast<char*>(&other->_impl_.block_id_));
}

::google::protobuf::Metadata Vote::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Commit::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Commit>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Commit, _impl_._has_bits_);
};

Commit::Commit(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.Commit)
}
inline PROTOBUF_NDEBUG_INLINE Commit::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tendermint::types::Commit& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        signatures_{visibility, arena, from.signatures_} {}

Commit::Commit(
    ::google::protobuf::Arena* arena,
    const Commit& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Commit* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.block_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tendermint::types::BlockID>(
                              arena, *from._impl_.block_id_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, height_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, height_),
           offsetof(Impl_, round_) -
               offsetof(Impl_, height_) +
               sizeof(Impl_::round_));

  // @@protoc_insertion_point(copy_constructor:tendermint.types.Commit)
}
inline PROTOBUF_NDEBUG_INLINE Commit::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        signatures_{visibility, arena} {}

inline void Commit::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, block_id_),
           0,
           offsetof(Impl_, round_) -
               offsetof(Impl_, block_id_) +
               sizeof(Impl_::round_));
}
Commit::~Commit() {
  // @@protoc_insertion_point(destructor:tendermint.types.Commit)
  SharedDtor(*this);
}
inline void Commit::SharedDtor(MessageLite& self) {
  Commit& this_ = static_cast<Commit&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.block_id_;
  this_._impl_.~Impl_();
}

inline void* Commit::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Commit(arena);
}
constexpr auto Commit::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Commit, _impl_.signatures_) +
          decltype(Commit::_impl_.signatures_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(Commit), alignof(Commit), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Commit::PlacementNew_,
                                 sizeof(Commit),
                                 alignof(Commit));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Commit::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Commit_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Commit::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Commit>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Commit::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Commit>(), &Commit::ByteSizeLong,
            &Commit::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Commit, _impl_._cached_size_),
        false,
    },
    &Commit::kDescriptorMethods,
    &descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Commit::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 0, 2> Commit::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Commit, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tendermint::types::Commit>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .tendermint.types.CommitSig signatures = 4 [json_name = "signatures", (.gogoproto.nullable) = false];
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(Commit, _impl_.signatures_)}},
    // int64 height = 1 [json_name = "height"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Commit, _impl_.height_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Commit, _impl_.height_)}},
    // int32 round = 2 [json_name = "round"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Commit, _impl_.round_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Commit, _impl_.round_)}},
    // .tendermint.types.BlockID block_id = 3 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(Commit, _impl_.block_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 height = 1 [json_name = "height"];
    {PROTOBUF_FIELD_OFFSET(Commit, _impl_.height_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int32 round = 2 [json_name = "round"];
    {PROTOBUF_FIELD_OFFSET(Commit, _impl_.round_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .tendermint.types.BlockID block_id = 3 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
    {PROTOBUF_FIELD_OFFSET(Commit, _impl_.block_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .tendermint.types.CommitSig signatures = 4 [json_name = "signatures", (.gogoproto.nullable) = false];
    {PROTOBUF_FIELD_OFFSET(Commit, _impl_.signatures_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tendermint::types::BlockID>()},
    {::_pbi::TcParser::GetTable<::tendermint::types::CommitSig>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Commit::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.Commit)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signatures_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.block_id_ != nullptr);
    _impl_.block_id_->Clear();
  }
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.round_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.round_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Commit::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Commit& this_ = static_cast<const Commit&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Commit::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Commit& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.Commit)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int64 height = 1 [json_name = "height"];
          if (this_._internal_height() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<1>(
                    stream, this_._internal_height(), target);
          }

          // int32 round = 2 [json_name = "round"];
          if (this_._internal_round() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_round(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tendermint.types.BlockID block_id = 3 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.block_id_, this_._impl_.block_id_->GetCachedSize(), target,
                stream);
          }

          // repeated .tendermint.types.CommitSig signatures = 4 [json_name = "signatures", (.gogoproto.nullable) = false];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_signatures_size());
               i < n; i++) {
            const auto& repfield = this_._internal_signatures().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    4, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.Commit)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Commit::ByteSizeLong(const MessageLite& base) {
          const Commit& this_ = static_cast<const Commit&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Commit::ByteSizeLong() const {
          const Commit& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tendermint.types.Commit)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tendermint.types.CommitSig signatures = 4 [json_name = "signatures", (.gogoproto.nullable) = false];
            {
              total_size += 1UL * this_._internal_signatures_size();
              for (const auto& msg : this_._internal_signatures()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // .tendermint.types.BlockID block_id = 3 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.block_id_);
            }
          }
           {
            // int64 height = 1 [json_name = "height"];
            if (this_._internal_height() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_height());
            }
            // int32 round = 2 [json_name = "round"];
            if (this_._internal_round() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_round());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Commit::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Commit*>(&to_msg);
  auto& from = static_cast<const Commit&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.Commit)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_signatures()->MergeFrom(
      from._internal_signatures());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.block_id_ != nullptr);
    if (_this->_impl_.block_id_ == nullptr) {
      _this->_impl_.block_id_ =
          ::google::protobuf::Message::CopyConstruct<::tendermint::types::BlockID>(arena, *from._impl_.block_id_);
    } else {
      _this->_impl_.block_id_->MergeFrom(*from._impl_.block_id_);
    }
  }
  if (from._internal_height() != 0) {
    _this->_impl_.height_ = from._impl_.height_;
  }
  if (from._internal_round() != 0) {
    _this->_impl_.round_ = from._impl_.round_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Commit::CopyFrom(const Commit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.Commit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Commit::InternalSwap(Commit* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.signatures_.InternalSwap(&other->_impl_.signatures_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Commit, _impl_.round_)
      + sizeof(Commit::_impl_.round_)
      - PROTOBUF_FIELD_OFFSET(Commit, _impl_.block_id_)>(
          reinterpret_cast<char*>(&_impl_.block_id_),
          reinterpret_cast<char*>(&other->_impl_.block_id_));
}

::google::protobuf::Metadata Commit::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CommitSig::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CommitSig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CommitSig, _impl_._has_bits_);
};

void CommitSig::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CommitSig::CommitSig(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.CommitSig)
}
inline PROTOBUF_NDEBUG_INLINE CommitSig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tendermint::types::CommitSig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        validator_address_(arena, from.validator_address_),
        signature_(arena, from.signature_) {}

CommitSig::CommitSig(
    ::google::protobuf::Arena* arena,
    const CommitSig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CommitSig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timestamp_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.timestamp_)
                        : nullptr;
  _impl_.block_id_flag_ = from._impl_.block_id_flag_;

  // @@protoc_insertion_point(copy_constructor:tendermint.types.CommitSig)
}
inline PROTOBUF_NDEBUG_INLINE CommitSig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        validator_address_(arena),
        signature_(arena) {}

inline void CommitSig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, block_id_flag_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::block_id_flag_));
}
CommitSig::~CommitSig() {
  // @@protoc_insertion_point(destructor:tendermint.types.CommitSig)
  SharedDtor(*this);
}
inline void CommitSig::SharedDtor(MessageLite& self) {
  CommitSig& this_ = static_cast<CommitSig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.validator_address_.Destroy();
  this_._impl_.signature_.Destroy();
  delete this_._impl_.timestamp_;
  this_._impl_.~Impl_();
}

inline void* CommitSig::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CommitSig(arena);
}
constexpr auto CommitSig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CommitSig),
                                            alignof(CommitSig));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CommitSig::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CommitSig_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CommitSig::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CommitSig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CommitSig::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CommitSig>(), &CommitSig::ByteSizeLong,
            &CommitSig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CommitSig, _impl_._cached_size_),
        false,
    },
    &CommitSig::kDescriptorMethods,
    &descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CommitSig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> CommitSig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CommitSig, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tendermint::types::CommitSig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bytes signature = 4 [json_name = "signature"];
    {::_pbi::TcParser::FastBS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(CommitSig, _impl_.signature_)}},
    // .tendermint.types.BlockIDFlag block_id_flag = 1 [json_name = "blockIdFlag"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CommitSig, _impl_.block_id_flag_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CommitSig, _impl_.block_id_flag_)}},
    // bytes validator_address = 2 [json_name = "validatorAddress"];
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CommitSig, _impl_.validator_address_)}},
    // .google.protobuf.Timestamp timestamp = 3 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(CommitSig, _impl_.timestamp_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tendermint.types.BlockIDFlag block_id_flag = 1 [json_name = "blockIdFlag"];
    {PROTOBUF_FIELD_OFFSET(CommitSig, _impl_.block_id_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bytes validator_address = 2 [json_name = "validatorAddress"];
    {PROTOBUF_FIELD_OFFSET(CommitSig, _impl_.validator_address_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp timestamp = 3 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
    {PROTOBUF_FIELD_OFFSET(CommitSig, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes signature = 4 [json_name = "signature"];
    {PROTOBUF_FIELD_OFFSET(CommitSig, _impl_.signature_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void CommitSig::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.CommitSig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.validator_address_.ClearToEmpty();
  _impl_.signature_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timestamp_ != nullptr);
    _impl_.timestamp_->Clear();
  }
  _impl_.block_id_flag_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CommitSig::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CommitSig& this_ = static_cast<const CommitSig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CommitSig::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CommitSig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.CommitSig)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .tendermint.types.BlockIDFlag block_id_flag = 1 [json_name = "blockIdFlag"];
          if (this_._internal_block_id_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_block_id_flag(), target);
          }

          // bytes validator_address = 2 [json_name = "validatorAddress"];
          if (!this_._internal_validator_address().empty()) {
            const std::string& _s = this_._internal_validator_address();
            target = stream->WriteBytesMaybeAliased(2, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp timestamp = 3 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.timestamp_, this_._impl_.timestamp_->GetCachedSize(), target,
                stream);
          }

          // bytes signature = 4 [json_name = "signature"];
          if (!this_._internal_signature().empty()) {
            const std::string& _s = this_._internal_signature();
            target = stream->WriteBytesMaybeAliased(4, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.CommitSig)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CommitSig::ByteSizeLong(const MessageLite& base) {
          const CommitSig& this_ = static_cast<const CommitSig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CommitSig::ByteSizeLong() const {
          const CommitSig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tendermint.types.CommitSig)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bytes validator_address = 2 [json_name = "validatorAddress"];
            if (!this_._internal_validator_address().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_validator_address());
            }
            // bytes signature = 4 [json_name = "signature"];
            if (!this_._internal_signature().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_signature());
            }
          }
           {
            // .google.protobuf.Timestamp timestamp = 3 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.timestamp_);
            }
          }
           {
            // .tendermint.types.BlockIDFlag block_id_flag = 1 [json_name = "blockIdFlag"];
            if (this_._internal_block_id_flag() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_block_id_flag());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CommitSig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CommitSig*>(&to_msg);
  auto& from = static_cast<const CommitSig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.CommitSig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_validator_address().empty()) {
    _this->_internal_set_validator_address(from._internal_validator_address());
  }
  if (!from._internal_signature().empty()) {
    _this->_internal_set_signature(from._internal_signature());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.timestamp_ != nullptr);
    if (_this->_impl_.timestamp_ == nullptr) {
      _this->_impl_.timestamp_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_);
    } else {
      _this->_impl_.timestamp_->MergeFrom(*from._impl_.timestamp_);
    }
  }
  if (from._internal_block_id_flag() != 0) {
    _this->_impl_.block_id_flag_ = from._impl_.block_id_flag_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CommitSig::CopyFrom(const CommitSig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.CommitSig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CommitSig::InternalSwap(CommitSig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.validator_address_, &other->_impl_.validator_address_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signature_, &other->_impl_.signature_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommitSig, _impl_.block_id_flag_)
      + sizeof(CommitSig::_impl_.block_id_flag_)
      - PROTOBUF_FIELD_OFFSET(CommitSig, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata CommitSig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ExtendedCommit::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ExtendedCommit>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ExtendedCommit, _impl_._has_bits_);
};

ExtendedCommit::ExtendedCommit(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.ExtendedCommit)
}
inline PROTOBUF_NDEBUG_INLINE ExtendedCommit::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tendermint::types::ExtendedCommit& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        extended_signatures_{visibility, arena, from.extended_signatures_} {}

ExtendedCommit::ExtendedCommit(
    ::google::protobuf::Arena* arena,
    const ExtendedCommit& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ExtendedCommit* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.block_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tendermint::types::BlockID>(
                              arena, *from._impl_.block_id_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, height_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, height_),
           offsetof(Impl_, round_) -
               offsetof(Impl_, height_) +
               sizeof(Impl_::round_));

  // @@protoc_insertion_point(copy_constructor:tendermint.types.ExtendedCommit)
}
inline PROTOBUF_NDEBUG_INLINE ExtendedCommit::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        extended_signatures_{visibility, arena} {}

inline void ExtendedCommit::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, block_id_),
           0,
           offsetof(Impl_, round_) -
               offsetof(Impl_, block_id_) +
               sizeof(Impl_::round_));
}
ExtendedCommit::~ExtendedCommit() {
  // @@protoc_insertion_point(destructor:tendermint.types.ExtendedCommit)
  SharedDtor(*this);
}
inline void ExtendedCommit::SharedDtor(MessageLite& self) {
  ExtendedCommit& this_ = static_cast<ExtendedCommit&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.block_id_;
  this_._impl_.~Impl_();
}

inline void* ExtendedCommit::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ExtendedCommit(arena);
}
constexpr auto ExtendedCommit::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ExtendedCommit, _impl_.extended_signatures_) +
          decltype(ExtendedCommit::_impl_.extended_signatures_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ExtendedCommit), alignof(ExtendedCommit), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ExtendedCommit::PlacementNew_,
                                 sizeof(ExtendedCommit),
                                 alignof(ExtendedCommit));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ExtendedCommit::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ExtendedCommit_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ExtendedCommit::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ExtendedCommit>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ExtendedCommit::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ExtendedCommit>(), &ExtendedCommit::ByteSizeLong,
            &ExtendedCommit::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ExtendedCommit, _impl_._cached_size_),
        false,
    },
    &ExtendedCommit::kDescriptorMethods,
    &descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ExtendedCommit::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 0, 2> ExtendedCommit::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ExtendedCommit, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tendermint::types::ExtendedCommit>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .tendermint.types.ExtendedCommitSig extended_signatures = 4 [json_name = "extendedSignatures", (.gogoproto.nullable) = false];
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(ExtendedCommit, _impl_.extended_signatures_)}},
    // int64 height = 1 [json_name = "height"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ExtendedCommit, _impl_.height_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ExtendedCommit, _impl_.height_)}},
    // int32 round = 2 [json_name = "round"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ExtendedCommit, _impl_.round_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ExtendedCommit, _impl_.round_)}},
    // .tendermint.types.BlockID block_id = 3 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(ExtendedCommit, _impl_.block_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 height = 1 [json_name = "height"];
    {PROTOBUF_FIELD_OFFSET(ExtendedCommit, _impl_.height_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int32 round = 2 [json_name = "round"];
    {PROTOBUF_FIELD_OFFSET(ExtendedCommit, _impl_.round_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .tendermint.types.BlockID block_id = 3 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
    {PROTOBUF_FIELD_OFFSET(ExtendedCommit, _impl_.block_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .tendermint.types.ExtendedCommitSig extended_signatures = 4 [json_name = "extendedSignatures", (.gogoproto.nullable) = false];
    {PROTOBUF_FIELD_OFFSET(ExtendedCommit, _impl_.extended_signatures_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tendermint::types::BlockID>()},
    {::_pbi::TcParser::GetTable<::tendermint::types::ExtendedCommitSig>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ExtendedCommit::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.ExtendedCommit)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extended_signatures_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.block_id_ != nullptr);
    _impl_.block_id_->Clear();
  }
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.round_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.round_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ExtendedCommit::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ExtendedCommit& this_ = static_cast<const ExtendedCommit&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ExtendedCommit::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ExtendedCommit& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.ExtendedCommit)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int64 height = 1 [json_name = "height"];
          if (this_._internal_height() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<1>(
                    stream, this_._internal_height(), target);
          }

          // int32 round = 2 [json_name = "round"];
          if (this_._internal_round() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_round(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tendermint.types.BlockID block_id = 3 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.block_id_, this_._impl_.block_id_->GetCachedSize(), target,
                stream);
          }

          // repeated .tendermint.types.ExtendedCommitSig extended_signatures = 4 [json_name = "extendedSignatures", (.gogoproto.nullable) = false];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_extended_signatures_size());
               i < n; i++) {
            const auto& repfield = this_._internal_extended_signatures().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    4, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.ExtendedCommit)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ExtendedCommit::ByteSizeLong(const MessageLite& base) {
          const ExtendedCommit& this_ = static_cast<const ExtendedCommit&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ExtendedCommit::ByteSizeLong() const {
          const ExtendedCommit& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tendermint.types.ExtendedCommit)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tendermint.types.ExtendedCommitSig extended_signatures = 4 [json_name = "extendedSignatures", (.gogoproto.nullable) = false];
            {
              total_size += 1UL * this_._internal_extended_signatures_size();
              for (const auto& msg : this_._internal_extended_signatures()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // .tendermint.types.BlockID block_id = 3 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.block_id_);
            }
          }
           {
            // int64 height = 1 [json_name = "height"];
            if (this_._internal_height() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_height());
            }
            // int32 round = 2 [json_name = "round"];
            if (this_._internal_round() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_round());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ExtendedCommit::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ExtendedCommit*>(&to_msg);
  auto& from = static_cast<const ExtendedCommit&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.ExtendedCommit)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_extended_signatures()->MergeFrom(
      from._internal_extended_signatures());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.block_id_ != nullptr);
    if (_this->_impl_.block_id_ == nullptr) {
      _this->_impl_.block_id_ =
          ::google::protobuf::Message::CopyConstruct<::tendermint::types::BlockID>(arena, *from._impl_.block_id_);
    } else {
      _this->_impl_.block_id_->MergeFrom(*from._impl_.block_id_);
    }
  }
  if (from._internal_height() != 0) {
    _this->_impl_.height_ = from._impl_.height_;
  }
  if (from._internal_round() != 0) {
    _this->_impl_.round_ = from._impl_.round_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ExtendedCommit::CopyFrom(const ExtendedCommit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.ExtendedCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ExtendedCommit::InternalSwap(ExtendedCommit* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.extended_signatures_.InternalSwap(&other->_impl_.extended_signatures_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExtendedCommit, _impl_.round_)
      + sizeof(ExtendedCommit::_impl_.round_)
      - PROTOBUF_FIELD_OFFSET(ExtendedCommit, _impl_.block_id_)>(
          reinterpret_cast<char*>(&_impl_.block_id_),
          reinterpret_cast<char*>(&other->_impl_.block_id_));
}

::google::protobuf::Metadata ExtendedCommit::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ExtendedCommitSig::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ExtendedCommitSig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ExtendedCommitSig, _impl_._has_bits_);
};

void ExtendedCommitSig::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ExtendedCommitSig::ExtendedCommitSig(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.ExtendedCommitSig)
}
inline PROTOBUF_NDEBUG_INLINE ExtendedCommitSig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tendermint::types::ExtendedCommitSig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        validator_address_(arena, from.validator_address_),
        signature_(arena, from.signature_),
        extension_(arena, from.extension_),
        extension_signature_(arena, from.extension_signature_) {}

ExtendedCommitSig::ExtendedCommitSig(
    ::google::protobuf::Arena* arena,
    const ExtendedCommitSig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ExtendedCommitSig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timestamp_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.timestamp_)
                        : nullptr;
  _impl_.block_id_flag_ = from._impl_.block_id_flag_;

  // @@protoc_insertion_point(copy_constructor:tendermint.types.ExtendedCommitSig)
}
inline PROTOBUF_NDEBUG_INLINE ExtendedCommitSig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        validator_address_(arena),
        signature_(arena),
        extension_(arena),
        extension_signature_(arena) {}

inline void ExtendedCommitSig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, block_id_flag_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::block_id_flag_));
}
ExtendedCommitSig::~ExtendedCommitSig() {
  // @@protoc_insertion_point(destructor:tendermint.types.ExtendedCommitSig)
  SharedDtor(*this);
}
inline void ExtendedCommitSig::SharedDtor(MessageLite& self) {
  ExtendedCommitSig& this_ = static_cast<ExtendedCommitSig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.validator_address_.Destroy();
  this_._impl_.signature_.Destroy();
  this_._impl_.extension_.Destroy();
  this_._impl_.extension_signature_.Destroy();
  delete this_._impl_.timestamp_;
  this_._impl_.~Impl_();
}

inline void* ExtendedCommitSig::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ExtendedCommitSig(arena);
}
constexpr auto ExtendedCommitSig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ExtendedCommitSig),
                                            alignof(ExtendedCommitSig));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ExtendedCommitSig::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ExtendedCommitSig_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ExtendedCommitSig::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ExtendedCommitSig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ExtendedCommitSig::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ExtendedCommitSig>(), &ExtendedCommitSig::ByteSizeLong,
            &ExtendedCommitSig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ExtendedCommitSig, _impl_._cached_size_),
        false,
    },
    &ExtendedCommitSig::kDescriptorMethods,
    &descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ExtendedCommitSig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 0, 2> ExtendedCommitSig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ExtendedCommitSig, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tendermint::types::ExtendedCommitSig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .tendermint.types.BlockIDFlag block_id_flag = 1 [json_name = "blockIdFlag"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ExtendedCommitSig, _impl_.block_id_flag_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ExtendedCommitSig, _impl_.block_id_flag_)}},
    // bytes validator_address = 2 [json_name = "validatorAddress"];
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ExtendedCommitSig, _impl_.validator_address_)}},
    // .google.protobuf.Timestamp timestamp = 3 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(ExtendedCommitSig, _impl_.timestamp_)}},
    // bytes signature = 4 [json_name = "signature"];
    {::_pbi::TcParser::FastBS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ExtendedCommitSig, _impl_.signature_)}},
    // bytes extension = 5 [json_name = "extension"];
    {::_pbi::TcParser::FastBS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ExtendedCommitSig, _impl_.extension_)}},
    // bytes extension_signature = 6 [json_name = "extensionSignature"];
    {::_pbi::TcParser::FastBS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(ExtendedCommitSig, _impl_.extension_signature_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .tendermint.types.BlockIDFlag block_id_flag = 1 [json_name = "blockIdFlag"];
    {PROTOBUF_FIELD_OFFSET(ExtendedCommitSig, _impl_.block_id_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bytes validator_address = 2 [json_name = "validatorAddress"];
    {PROTOBUF_FIELD_OFFSET(ExtendedCommitSig, _impl_.validator_address_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp timestamp = 3 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
    {PROTOBUF_FIELD_OFFSET(ExtendedCommitSig, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes signature = 4 [json_name = "signature"];
    {PROTOBUF_FIELD_OFFSET(ExtendedCommitSig, _impl_.signature_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes extension = 5 [json_name = "extension"];
    {PROTOBUF_FIELD_OFFSET(ExtendedCommitSig, _impl_.extension_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes extension_signature = 6 [json_name = "extensionSignature"];
    {PROTOBUF_FIELD_OFFSET(ExtendedCommitSig, _impl_.extension_signature_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ExtendedCommitSig::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.ExtendedCommitSig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.validator_address_.ClearToEmpty();
  _impl_.signature_.ClearToEmpty();
  _impl_.extension_.ClearToEmpty();
  _impl_.extension_signature_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timestamp_ != nullptr);
    _impl_.timestamp_->Clear();
  }
  _impl_.block_id_flag_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ExtendedCommitSig::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ExtendedCommitSig& this_ = static_cast<const ExtendedCommitSig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ExtendedCommitSig::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ExtendedCommitSig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.ExtendedCommitSig)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .tendermint.types.BlockIDFlag block_id_flag = 1 [json_name = "blockIdFlag"];
          if (this_._internal_block_id_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_block_id_flag(), target);
          }

          // bytes validator_address = 2 [json_name = "validatorAddress"];
          if (!this_._internal_validator_address().empty()) {
            const std::string& _s = this_._internal_validator_address();
            target = stream->WriteBytesMaybeAliased(2, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp timestamp = 3 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.timestamp_, this_._impl_.timestamp_->GetCachedSize(), target,
                stream);
          }

          // bytes signature = 4 [json_name = "signature"];
          if (!this_._internal_signature().empty()) {
            const std::string& _s = this_._internal_signature();
            target = stream->WriteBytesMaybeAliased(4, _s, target);
          }

          // bytes extension = 5 [json_name = "extension"];
          if (!this_._internal_extension().empty()) {
            const std::string& _s = this_._internal_extension();
            target = stream->WriteBytesMaybeAliased(5, _s, target);
          }

          // bytes extension_signature = 6 [json_name = "extensionSignature"];
          if (!this_._internal_extension_signature().empty()) {
            const std::string& _s = this_._internal_extension_signature();
            target = stream->WriteBytesMaybeAliased(6, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.ExtendedCommitSig)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ExtendedCommitSig::ByteSizeLong(const MessageLite& base) {
          const ExtendedCommitSig& this_ = static_cast<const ExtendedCommitSig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ExtendedCommitSig::ByteSizeLong() const {
          const ExtendedCommitSig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tendermint.types.ExtendedCommitSig)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bytes validator_address = 2 [json_name = "validatorAddress"];
            if (!this_._internal_validator_address().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_validator_address());
            }
            // bytes signature = 4 [json_name = "signature"];
            if (!this_._internal_signature().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_signature());
            }
            // bytes extension = 5 [json_name = "extension"];
            if (!this_._internal_extension().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_extension());
            }
            // bytes extension_signature = 6 [json_name = "extensionSignature"];
            if (!this_._internal_extension_signature().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_extension_signature());
            }
          }
           {
            // .google.protobuf.Timestamp timestamp = 3 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.timestamp_);
            }
          }
           {
            // .tendermint.types.BlockIDFlag block_id_flag = 1 [json_name = "blockIdFlag"];
            if (this_._internal_block_id_flag() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_block_id_flag());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ExtendedCommitSig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ExtendedCommitSig*>(&to_msg);
  auto& from = static_cast<const ExtendedCommitSig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.ExtendedCommitSig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_validator_address().empty()) {
    _this->_internal_set_validator_address(from._internal_validator_address());
  }
  if (!from._internal_signature().empty()) {
    _this->_internal_set_signature(from._internal_signature());
  }
  if (!from._internal_extension().empty()) {
    _this->_internal_set_extension(from._internal_extension());
  }
  if (!from._internal_extension_signature().empty()) {
    _this->_internal_set_extension_signature(from._internal_extension_signature());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.timestamp_ != nullptr);
    if (_this->_impl_.timestamp_ == nullptr) {
      _this->_impl_.timestamp_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_);
    } else {
      _this->_impl_.timestamp_->MergeFrom(*from._impl_.timestamp_);
    }
  }
  if (from._internal_block_id_flag() != 0) {
    _this->_impl_.block_id_flag_ = from._impl_.block_id_flag_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ExtendedCommitSig::CopyFrom(const ExtendedCommitSig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.ExtendedCommitSig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ExtendedCommitSig::InternalSwap(ExtendedCommitSig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.validator_address_, &other->_impl_.validator_address_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signature_, &other->_impl_.signature_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.extension_, &other->_impl_.extension_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.extension_signature_, &other->_impl_.extension_signature_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExtendedCommitSig, _impl_.block_id_flag_)
      + sizeof(ExtendedCommitSig::_impl_.block_id_flag_)
      - PROTOBUF_FIELD_OFFSET(ExtendedCommitSig, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata ExtendedCommitSig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Proposal::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Proposal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Proposal, _impl_._has_bits_);
};

void Proposal::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Proposal::Proposal(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.Proposal)
}
inline PROTOBUF_NDEBUG_INLINE Proposal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tendermint::types::Proposal& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        signature_(arena, from.signature_) {}

Proposal::Proposal(
    ::google::protobuf::Arena* arena,
    const Proposal& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Proposal* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.block_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tendermint::types::BlockID>(
                              arena, *from._impl_.block_id_)
                        : nullptr;
  _impl_.timestamp_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.timestamp_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, height_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, height_),
           offsetof(Impl_, pol_round_) -
               offsetof(Impl_, height_) +
               sizeof(Impl_::pol_round_));

  // @@protoc_insertion_point(copy_constructor:tendermint.types.Proposal)
}
inline PROTOBUF_NDEBUG_INLINE Proposal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        signature_(arena) {}

inline void Proposal::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, block_id_),
           0,
           offsetof(Impl_, pol_round_) -
               offsetof(Impl_, block_id_) +
               sizeof(Impl_::pol_round_));
}
Proposal::~Proposal() {
  // @@protoc_insertion_point(destructor:tendermint.types.Proposal)
  SharedDtor(*this);
}
inline void Proposal::SharedDtor(MessageLite& self) {
  Proposal& this_ = static_cast<Proposal&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.signature_.Destroy();
  delete this_._impl_.block_id_;
  delete this_._impl_.timestamp_;
  this_._impl_.~Impl_();
}

inline void* Proposal::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Proposal(arena);
}
constexpr auto Proposal::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Proposal),
                                            alignof(Proposal));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Proposal::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Proposal_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Proposal::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Proposal>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Proposal::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Proposal>(), &Proposal::ByteSizeLong,
            &Proposal::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Proposal, _impl_._cached_size_),
        false,
    },
    &Proposal::kDescriptorMethods,
    &descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Proposal::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 0, 2> Proposal::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Proposal, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tendermint::types::Proposal>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .tendermint.types.SignedMsgType type = 1 [json_name = "type"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Proposal, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Proposal, _impl_.type_)}},
    // int64 height = 2 [json_name = "height"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Proposal, _impl_.height_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Proposal, _impl_.height_)}},
    // int32 round = 3 [json_name = "round"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Proposal, _impl_.round_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Proposal, _impl_.round_)}},
    // int32 pol_round = 4 [json_name = "polRound"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Proposal, _impl_.pol_round_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Proposal, _impl_.pol_round_)}},
    // .tendermint.types.BlockID block_id = 5 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(Proposal, _impl_.block_id_)}},
    // .google.protobuf.Timestamp timestamp = 6 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
    {::_pbi::TcParser::FastMtS1,
     {50, 1, 1, PROTOBUF_FIELD_OFFSET(Proposal, _impl_.timestamp_)}},
    // bytes signature = 7 [json_name = "signature"];
    {::_pbi::TcParser::FastBS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(Proposal, _impl_.signature_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tendermint.types.SignedMsgType type = 1 [json_name = "type"];
    {PROTOBUF_FIELD_OFFSET(Proposal, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int64 height = 2 [json_name = "height"];
    {PROTOBUF_FIELD_OFFSET(Proposal, _impl_.height_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int32 round = 3 [json_name = "round"];
    {PROTOBUF_FIELD_OFFSET(Proposal, _impl_.round_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 pol_round = 4 [json_name = "polRound"];
    {PROTOBUF_FIELD_OFFSET(Proposal, _impl_.pol_round_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .tendermint.types.BlockID block_id = 5 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
    {PROTOBUF_FIELD_OFFSET(Proposal, _impl_.block_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp timestamp = 6 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
    {PROTOBUF_FIELD_OFFSET(Proposal, _impl_.timestamp_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes signature = 7 [json_name = "signature"];
    {PROTOBUF_FIELD_OFFSET(Proposal, _impl_.signature_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tendermint::types::BlockID>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Proposal::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.Proposal)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signature_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.block_id_ != nullptr);
      _impl_.block_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
  }
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.pol_round_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.pol_round_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Proposal::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Proposal& this_ = static_cast<const Proposal&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Proposal::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Proposal& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.Proposal)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .tendermint.types.SignedMsgType type = 1 [json_name = "type"];
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_type(), target);
          }

          // int64 height = 2 [json_name = "height"];
          if (this_._internal_height() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<2>(
                    stream, this_._internal_height(), target);
          }

          // int32 round = 3 [json_name = "round"];
          if (this_._internal_round() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_round(), target);
          }

          // int32 pol_round = 4 [json_name = "polRound"];
          if (this_._internal_pol_round() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_pol_round(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tendermint.types.BlockID block_id = 5 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.block_id_, this_._impl_.block_id_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp timestamp = 6 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.timestamp_, this_._impl_.timestamp_->GetCachedSize(), target,
                stream);
          }

          // bytes signature = 7 [json_name = "signature"];
          if (!this_._internal_signature().empty()) {
            const std::string& _s = this_._internal_signature();
            target = stream->WriteBytesMaybeAliased(7, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.Proposal)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Proposal::ByteSizeLong(const MessageLite& base) {
          const Proposal& this_ = static_cast<const Proposal&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Proposal::ByteSizeLong() const {
          const Proposal& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tendermint.types.Proposal)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bytes signature = 7 [json_name = "signature"];
            if (!this_._internal_signature().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_signature());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .tendermint.types.BlockID block_id = 5 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.block_id_);
            }
            // .google.protobuf.Timestamp timestamp = 6 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.timestamp_);
            }
          }
           {
            // int64 height = 2 [json_name = "height"];
            if (this_._internal_height() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_height());
            }
            // .tendermint.types.SignedMsgType type = 1 [json_name = "type"];
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
            // int32 round = 3 [json_name = "round"];
            if (this_._internal_round() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_round());
            }
            // int32 pol_round = 4 [json_name = "polRound"];
            if (this_._internal_pol_round() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_pol_round());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Proposal::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Proposal*>(&to_msg);
  auto& from = static_cast<const Proposal&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.Proposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signature().empty()) {
    _this->_internal_set_signature(from._internal_signature());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.block_id_ != nullptr);
      if (_this->_impl_.block_id_ == nullptr) {
        _this->_impl_.block_id_ =
            ::google::protobuf::Message::CopyConstruct<::tendermint::types::BlockID>(arena, *from._impl_.block_id_);
      } else {
        _this->_impl_.block_id_->MergeFrom(*from._impl_.block_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.timestamp_ != nullptr);
      if (_this->_impl_.timestamp_ == nullptr) {
        _this->_impl_.timestamp_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_);
      } else {
        _this->_impl_.timestamp_->MergeFrom(*from._impl_.timestamp_);
      }
    }
  }
  if (from._internal_height() != 0) {
    _this->_impl_.height_ = from._impl_.height_;
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  if (from._internal_round() != 0) {
    _this->_impl_.round_ = from._impl_.round_;
  }
  if (from._internal_pol_round() != 0) {
    _this->_impl_.pol_round_ = from._impl_.pol_round_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Proposal::CopyFrom(const Proposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.Proposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Proposal::InternalSwap(Proposal* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signature_, &other->_impl_.signature_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Proposal, _impl_.pol_round_)
      + sizeof(Proposal::_impl_.pol_round_)
      - PROTOBUF_FIELD_OFFSET(Proposal, _impl_.block_id_)>(
          reinterpret_cast<char*>(&_impl_.block_id_),
          reinterpret_cast<char*>(&other->_impl_.block_id_));
}

::google::protobuf::Metadata Proposal::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SignedHeader::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SignedHeader>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SignedHeader, _impl_._has_bits_);
};

SignedHeader::SignedHeader(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.SignedHeader)
}
inline PROTOBUF_NDEBUG_INLINE SignedHeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tendermint::types::SignedHeader& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SignedHeader::SignedHeader(
    ::google::protobuf::Arena* arena,
    const SignedHeader& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SignedHeader* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tendermint::types::Header>(
                              arena, *from._impl_.header_)
                        : nullptr;
  _impl_.commit_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tendermint::types::Commit>(
                              arena, *from._impl_.commit_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tendermint.types.SignedHeader)
}
inline PROTOBUF_NDEBUG_INLINE SignedHeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SignedHeader::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, commit_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::commit_));
}
SignedHeader::~SignedHeader() {
  // @@protoc_insertion_point(destructor:tendermint.types.SignedHeader)
  SharedDtor(*this);
}
inline void SignedHeader::SharedDtor(MessageLite& self) {
  SignedHeader& this_ = static_cast<SignedHeader&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.header_;
  delete this_._impl_.commit_;
  this_._impl_.~Impl_();
}

inline void* SignedHeader::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SignedHeader(arena);
}
constexpr auto SignedHeader::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SignedHeader),
                                            alignof(SignedHeader));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SignedHeader::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SignedHeader_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SignedHeader::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SignedHeader>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SignedHeader::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SignedHeader>(), &SignedHeader::ByteSizeLong,
            &SignedHeader::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SignedHeader, _impl_._cached_size_),
        false,
    },
    &SignedHeader::kDescriptorMethods,
    &descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SignedHeader::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> SignedHeader::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SignedHeader, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tendermint::types::SignedHeader>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .tendermint.types.Commit commit = 2 [json_name = "commit"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SignedHeader, _impl_.commit_)}},
    // .tendermint.types.Header header = 1 [json_name = "header"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SignedHeader, _impl_.header_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tendermint.types.Header header = 1 [json_name = "header"];
    {PROTOBUF_FIELD_OFFSET(SignedHeader, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tendermint.types.Commit commit = 2 [json_name = "commit"];
    {PROTOBUF_FIELD_OFFSET(SignedHeader, _impl_.commit_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tendermint::types::Header>()},
    {::_pbi::TcParser::GetTable<::tendermint::types::Commit>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SignedHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.SignedHeader)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.commit_ != nullptr);
      _impl_.commit_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SignedHeader::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SignedHeader& this_ = static_cast<const SignedHeader&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SignedHeader::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SignedHeader& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.SignedHeader)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tendermint.types.Header header = 1 [json_name = "header"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.header_, this_._impl_.header_->GetCachedSize(), target,
                stream);
          }

          // .tendermint.types.Commit commit = 2 [json_name = "commit"];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.commit_, this_._impl_.commit_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.SignedHeader)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SignedHeader::ByteSizeLong(const MessageLite& base) {
          const SignedHeader& this_ = static_cast<const SignedHeader&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SignedHeader::ByteSizeLong() const {
          const SignedHeader& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tendermint.types.SignedHeader)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .tendermint.types.Header header = 1 [json_name = "header"];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.header_);
            }
            // .tendermint.types.Commit commit = 2 [json_name = "commit"];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.commit_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SignedHeader::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SignedHeader*>(&to_msg);
  auto& from = static_cast<const SignedHeader&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.SignedHeader)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.header_ != nullptr);
      if (_this->_impl_.header_ == nullptr) {
        _this->_impl_.header_ =
            ::google::protobuf::Message::CopyConstruct<::tendermint::types::Header>(arena, *from._impl_.header_);
      } else {
        _this->_impl_.header_->MergeFrom(*from._impl_.header_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.commit_ != nullptr);
      if (_this->_impl_.commit_ == nullptr) {
        _this->_impl_.commit_ =
            ::google::protobuf::Message::CopyConstruct<::tendermint::types::Commit>(arena, *from._impl_.commit_);
      } else {
        _this->_impl_.commit_->MergeFrom(*from._impl_.commit_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SignedHeader::CopyFrom(const SignedHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.SignedHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SignedHeader::InternalSwap(SignedHeader* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignedHeader, _impl_.commit_)
      + sizeof(SignedHeader::_impl_.commit_)
      - PROTOBUF_FIELD_OFFSET(SignedHeader, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata SignedHeader::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LightBlock::_Internal {
 public:
  using HasBits =
      decltype(std::declval<LightBlock>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(LightBlock, _impl_._has_bits_);
};

void LightBlock::clear_validator_set() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.validator_set_ != nullptr) _impl_.validator_set_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
LightBlock::LightBlock(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.LightBlock)
}
inline PROTOBUF_NDEBUG_INLINE LightBlock::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tendermint::types::LightBlock& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

LightBlock::LightBlock(
    ::google::protobuf::Arena* arena,
    const LightBlock& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LightBlock* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.signed_header_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tendermint::types::SignedHeader>(
                              arena, *from._impl_.signed_header_)
                        : nullptr;
  _impl_.validator_set_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tendermint::types::ValidatorSet>(
                              arena, *from._impl_.validator_set_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tendermint.types.LightBlock)
}
inline PROTOBUF_NDEBUG_INLINE LightBlock::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void LightBlock::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, signed_header_),
           0,
           offsetof(Impl_, validator_set_) -
               offsetof(Impl_, signed_header_) +
               sizeof(Impl_::validator_set_));
}
LightBlock::~LightBlock() {
  // @@protoc_insertion_point(destructor:tendermint.types.LightBlock)
  SharedDtor(*this);
}
inline void LightBlock::SharedDtor(MessageLite& self) {
  LightBlock& this_ = static_cast<LightBlock&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.signed_header_;
  delete this_._impl_.validator_set_;
  this_._impl_.~Impl_();
}

inline void* LightBlock::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) LightBlock(arena);
}
constexpr auto LightBlock::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(LightBlock),
                                            alignof(LightBlock));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull LightBlock::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_LightBlock_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &LightBlock::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<LightBlock>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &LightBlock::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<LightBlock>(), &LightBlock::ByteSizeLong,
            &LightBlock::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(LightBlock, _impl_._cached_size_),
        false,
    },
    &LightBlock::kDescriptorMethods,
    &descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* LightBlock::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> LightBlock::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LightBlock, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tendermint::types::LightBlock>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .tendermint.types.ValidatorSet validator_set = 2 [json_name = "validatorSet"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(LightBlock, _impl_.validator_set_)}},
    // .tendermint.types.SignedHeader signed_header = 1 [json_name = "signedHeader"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(LightBlock, _impl_.signed_header_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tendermint.types.SignedHeader signed_header = 1 [json_name = "signedHeader"];
    {PROTOBUF_FIELD_OFFSET(LightBlock, _impl_.signed_header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tendermint.types.ValidatorSet validator_set = 2 [json_name = "validatorSet"];
    {PROTOBUF_FIELD_OFFSET(LightBlock, _impl_.validator_set_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tendermint::types::SignedHeader>()},
    {::_pbi::TcParser::GetTable<::tendermint::types::ValidatorSet>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void LightBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.LightBlock)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.signed_header_ != nullptr);
      _impl_.signed_header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.validator_set_ != nullptr);
      _impl_.validator_set_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* LightBlock::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const LightBlock& this_ = static_cast<const LightBlock&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* LightBlock::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const LightBlock& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.LightBlock)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tendermint.types.SignedHeader signed_header = 1 [json_name = "signedHeader"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.signed_header_, this_._impl_.signed_header_->GetCachedSize(), target,
                stream);
          }

          // .tendermint.types.ValidatorSet validator_set = 2 [json_name = "validatorSet"];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.validator_set_, this_._impl_.validator_set_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.LightBlock)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t LightBlock::ByteSizeLong(const MessageLite& base) {
          const LightBlock& this_ = static_cast<const LightBlock&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t LightBlock::ByteSizeLong() const {
          const LightBlock& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tendermint.types.LightBlock)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .tendermint.types.SignedHeader signed_header = 1 [json_name = "signedHeader"];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.signed_header_);
            }
            // .tendermint.types.ValidatorSet validator_set = 2 [json_name = "validatorSet"];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.validator_set_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void LightBlock::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LightBlock*>(&to_msg);
  auto& from = static_cast<const LightBlock&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.LightBlock)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.signed_header_ != nullptr);
      if (_this->_impl_.signed_header_ == nullptr) {
        _this->_impl_.signed_header_ =
            ::google::protobuf::Message::CopyConstruct<::tendermint::types::SignedHeader>(arena, *from._impl_.signed_header_);
      } else {
        _this->_impl_.signed_header_->MergeFrom(*from._impl_.signed_header_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.validator_set_ != nullptr);
      if (_this->_impl_.validator_set_ == nullptr) {
        _this->_impl_.validator_set_ =
            ::google::protobuf::Message::CopyConstruct<::tendermint::types::ValidatorSet>(arena, *from._impl_.validator_set_);
      } else {
        _this->_impl_.validator_set_->MergeFrom(*from._impl_.validator_set_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LightBlock::CopyFrom(const LightBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.LightBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LightBlock::InternalSwap(LightBlock* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LightBlock, _impl_.validator_set_)
      + sizeof(LightBlock::_impl_.validator_set_)
      - PROTOBUF_FIELD_OFFSET(LightBlock, _impl_.signed_header_)>(
          reinterpret_cast<char*>(&_impl_.signed_header_),
          reinterpret_cast<char*>(&other->_impl_.signed_header_));
}

::google::protobuf::Metadata LightBlock::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class BlockMeta::_Internal {
 public:
  using HasBits =
      decltype(std::declval<BlockMeta>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(BlockMeta, _impl_._has_bits_);
};

BlockMeta::BlockMeta(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.BlockMeta)
}
inline PROTOBUF_NDEBUG_INLINE BlockMeta::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tendermint::types::BlockMeta& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

BlockMeta::BlockMeta(
    ::google::protobuf::Arena* arena,
    const BlockMeta& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  BlockMeta* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.block_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tendermint::types::BlockID>(
                              arena, *from._impl_.block_id_)
                        : nullptr;
  _impl_.header_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tendermint::types::Header>(
                              arena, *from._impl_.header_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, block_size_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, block_size_),
           offsetof(Impl_, num_txs_) -
               offsetof(Impl_, block_size_) +
               sizeof(Impl_::num_txs_));

  // @@protoc_insertion_point(copy_constructor:tendermint.types.BlockMeta)
}
inline PROTOBUF_NDEBUG_INLINE BlockMeta::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void BlockMeta::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, block_id_),
           0,
           offsetof(Impl_, num_txs_) -
               offsetof(Impl_, block_id_) +
               sizeof(Impl_::num_txs_));
}
BlockMeta::~BlockMeta() {
  // @@protoc_insertion_point(destructor:tendermint.types.BlockMeta)
  SharedDtor(*this);
}
inline void BlockMeta::SharedDtor(MessageLite& self) {
  BlockMeta& this_ = static_cast<BlockMeta&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.block_id_;
  delete this_._impl_.header_;
  this_._impl_.~Impl_();
}

inline void* BlockMeta::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) BlockMeta(arena);
}
constexpr auto BlockMeta::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(BlockMeta),
                                            alignof(BlockMeta));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull BlockMeta::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_BlockMeta_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &BlockMeta::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<BlockMeta>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &BlockMeta::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<BlockMeta>(), &BlockMeta::ByteSizeLong,
            &BlockMeta::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(BlockMeta, _impl_._cached_size_),
        false,
    },
    &BlockMeta::kDescriptorMethods,
    &descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* BlockMeta::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 0, 2> BlockMeta::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BlockMeta, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tendermint::types::BlockMeta>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int64 num_txs = 4 [json_name = "numTxs"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(BlockMeta, _impl_.num_txs_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(BlockMeta, _impl_.num_txs_)}},
    // .tendermint.types.BlockID block_id = 1 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(BlockMeta, _impl_.block_id_)}},
    // int64 block_size = 2 [json_name = "blockSize"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(BlockMeta, _impl_.block_size_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(BlockMeta, _impl_.block_size_)}},
    // .tendermint.types.Header header = 3 [json_name = "header", (.gogoproto.nullable) = false];
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(BlockMeta, _impl_.header_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tendermint.types.BlockID block_id = 1 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
    {PROTOBUF_FIELD_OFFSET(BlockMeta, _impl_.block_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 block_size = 2 [json_name = "blockSize"];
    {PROTOBUF_FIELD_OFFSET(BlockMeta, _impl_.block_size_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .tendermint.types.Header header = 3 [json_name = "header", (.gogoproto.nullable) = false];
    {PROTOBUF_FIELD_OFFSET(BlockMeta, _impl_.header_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 num_txs = 4 [json_name = "numTxs"];
    {PROTOBUF_FIELD_OFFSET(BlockMeta, _impl_.num_txs_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tendermint::types::BlockID>()},
    {::_pbi::TcParser::GetTable<::tendermint::types::Header>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void BlockMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.BlockMeta)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.block_id_ != nullptr);
      _impl_.block_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
  }
  ::memset(&_impl_.block_size_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.num_txs_) -
      reinterpret_cast<char*>(&_impl_.block_size_)) + sizeof(_impl_.num_txs_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* BlockMeta::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const BlockMeta& this_ = static_cast<const BlockMeta&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* BlockMeta::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const BlockMeta& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.BlockMeta)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tendermint.types.BlockID block_id = 1 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.block_id_, this_._impl_.block_id_->GetCachedSize(), target,
                stream);
          }

          // int64 block_size = 2 [json_name = "blockSize"];
          if (this_._internal_block_size() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<2>(
                    stream, this_._internal_block_size(), target);
          }

          // .tendermint.types.Header header = 3 [json_name = "header", (.gogoproto.nullable) = false];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.header_, this_._impl_.header_->GetCachedSize(), target,
                stream);
          }

          // int64 num_txs = 4 [json_name = "numTxs"];
          if (this_._internal_num_txs() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<4>(
                    stream, this_._internal_num_txs(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.BlockMeta)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t BlockMeta::ByteSizeLong(const MessageLite& base) {
          const BlockMeta& this_ = static_cast<const BlockMeta&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t BlockMeta::ByteSizeLong() const {
          const BlockMeta& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tendermint.types.BlockMeta)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .tendermint.types.BlockID block_id = 1 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.block_id_);
            }
            // .tendermint.types.Header header = 3 [json_name = "header", (.gogoproto.nullable) = false];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.header_);
            }
          }
           {
            // int64 block_size = 2 [json_name = "blockSize"];
            if (this_._internal_block_size() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_block_size());
            }
            // int64 num_txs = 4 [json_name = "numTxs"];
            if (this_._internal_num_txs() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_num_txs());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void BlockMeta::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BlockMeta*>(&to_msg);
  auto& from = static_cast<const BlockMeta&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.BlockMeta)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.block_id_ != nullptr);
      if (_this->_impl_.block_id_ == nullptr) {
        _this->_impl_.block_id_ =
            ::google::protobuf::Message::CopyConstruct<::tendermint::types::BlockID>(arena, *from._impl_.block_id_);
      } else {
        _this->_impl_.block_id_->MergeFrom(*from._impl_.block_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.header_ != nullptr);
      if (_this->_impl_.header_ == nullptr) {
        _this->_impl_.header_ =
            ::google::protobuf::Message::CopyConstruct<::tendermint::types::Header>(arena, *from._impl_.header_);
      } else {
        _this->_impl_.header_->MergeFrom(*from._impl_.header_);
      }
    }
  }
  if (from._internal_block_size() != 0) {
    _this->_impl_.block_size_ = from._impl_.block_size_;
  }
  if (from._internal_num_txs() != 0) {
    _this->_impl_.num_txs_ = from._impl_.num_txs_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BlockMeta::CopyFrom(const BlockMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.BlockMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BlockMeta::InternalSwap(BlockMeta* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockMeta, _impl_.num_txs_)
      + sizeof(BlockMeta::_impl_.num_txs_)
      - PROTOBUF_FIELD_OFFSET(BlockMeta, _impl_.block_id_)>(
          reinterpret_cast<char*>(&_impl_.block_id_),
          reinterpret_cast<char*>(&other->_impl_.block_id_));
}

::google::protobuf::Metadata BlockMeta::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TxProof::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TxProof>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TxProof, _impl_._has_bits_);
};

void TxProof::clear_proof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.proof_ != nullptr) _impl_.proof_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TxProof::TxProof(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.TxProof)
}
inline PROTOBUF_NDEBUG_INLINE TxProof::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tendermint::types::TxProof& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        root_hash_(arena, from.root_hash_),
        data_(arena, from.data_) {}

TxProof::TxProof(
    ::google::protobuf::Arena* arena,
    const TxProof& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TxProof* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.proof_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tendermint::crypto::Proof>(
                              arena, *from._impl_.proof_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tendermint.types.TxProof)
}
inline PROTOBUF_NDEBUG_INLINE TxProof::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        root_hash_(arena),
        data_(arena) {}

inline void TxProof::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.proof_ = {};
}
TxProof::~TxProof() {
  // @@protoc_insertion_point(destructor:tendermint.types.TxProof)
  SharedDtor(*this);
}
inline void TxProof::SharedDtor(MessageLite& self) {
  TxProof& this_ = static_cast<TxProof&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.root_hash_.Destroy();
  this_._impl_.data_.Destroy();
  delete this_._impl_.proof_;
  this_._impl_.~Impl_();
}

inline void* TxProof::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TxProof(arena);
}
constexpr auto TxProof::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TxProof),
                                            alignof(TxProof));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TxProof::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TxProof_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TxProof::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TxProof>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TxProof::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TxProof>(), &TxProof::ByteSizeLong,
            &TxProof::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TxProof, _impl_._cached_size_),
        false,
    },
    &TxProof::kDescriptorMethods,
    &descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TxProof::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> TxProof::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TxProof, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tendermint::types::TxProof>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bytes root_hash = 1 [json_name = "rootHash"];
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TxProof, _impl_.root_hash_)}},
    // bytes data = 2 [json_name = "data"];
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TxProof, _impl_.data_)}},
    // .tendermint.crypto.Proof proof = 3 [json_name = "proof"];
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(TxProof, _impl_.proof_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes root_hash = 1 [json_name = "rootHash"];
    {PROTOBUF_FIELD_OFFSET(TxProof, _impl_.root_hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes data = 2 [json_name = "data"];
    {PROTOBUF_FIELD_OFFSET(TxProof, _impl_.data_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // .tendermint.crypto.Proof proof = 3 [json_name = "proof"];
    {PROTOBUF_FIELD_OFFSET(TxProof, _impl_.proof_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tendermint::crypto::Proof>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TxProof::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.TxProof)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.root_hash_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.proof_ != nullptr);
    _impl_.proof_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TxProof::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TxProof& this_ = static_cast<const TxProof&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TxProof::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TxProof& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.TxProof)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bytes root_hash = 1 [json_name = "rootHash"];
          if (!this_._internal_root_hash().empty()) {
            const std::string& _s = this_._internal_root_hash();
            target = stream->WriteBytesMaybeAliased(1, _s, target);
          }

          // bytes data = 2 [json_name = "data"];
          if (!this_._internal_data().empty()) {
            const std::string& _s = this_._internal_data();
            target = stream->WriteBytesMaybeAliased(2, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tendermint.crypto.Proof proof = 3 [json_name = "proof"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.proof_, this_._impl_.proof_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.TxProof)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TxProof::ByteSizeLong(const MessageLite& base) {
          const TxProof& this_ = static_cast<const TxProof&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TxProof::ByteSizeLong() const {
          const TxProof& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tendermint.types.TxProof)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bytes root_hash = 1 [json_name = "rootHash"];
            if (!this_._internal_root_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_root_hash());
            }
            // bytes data = 2 [json_name = "data"];
            if (!this_._internal_data().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_data());
            }
          }
           {
            // .tendermint.crypto.Proof proof = 3 [json_name = "proof"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.proof_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TxProof::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TxProof*>(&to_msg);
  auto& from = static_cast<const TxProof&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.TxProof)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_root_hash().empty()) {
    _this->_internal_set_root_hash(from._internal_root_hash());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.proof_ != nullptr);
    if (_this->_impl_.proof_ == nullptr) {
      _this->_impl_.proof_ =
          ::google::protobuf::Message::CopyConstruct<::tendermint::crypto::Proof>(arena, *from._impl_.proof_);
    } else {
      _this->_impl_.proof_->MergeFrom(*from._impl_.proof_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TxProof::CopyFrom(const TxProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.TxProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TxProof::InternalSwap(TxProof* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.root_hash_, &other->_impl_.root_hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, &other->_impl_.data_, arena);
  swap(_impl_.proof_, other->_impl_.proof_);
}

::google::protobuf::Metadata TxProof::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace tendermint
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_tendermint_2ftypes_2ftypes_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
