// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tendermint/types/validator.proto
// Protobuf C++ Version: 5.29.4

#include "tendermint/types/validator.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace tendermint {
namespace types {

inline constexpr Validator::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        pub_key_{nullptr},
        voting_power_{::int64_t{0}},
        proposer_priority_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR Validator::Validator(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ValidatorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidatorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidatorDefaultTypeInternal() {}
  union {
    Validator _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidatorDefaultTypeInternal _Validator_default_instance_;

inline constexpr SimpleValidator::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        pub_key_{nullptr},
        voting_power_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR SimpleValidator::SimpleValidator(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SimpleValidatorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleValidatorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleValidatorDefaultTypeInternal() {}
  union {
    SimpleValidator _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleValidatorDefaultTypeInternal _SimpleValidator_default_instance_;

inline constexpr ValidatorSet::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        validators_{},
        proposer_{nullptr},
        total_voting_power_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR ValidatorSet::ValidatorSet(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ValidatorSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidatorSetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidatorSetDefaultTypeInternal() {}
  union {
    ValidatorSet _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidatorSetDefaultTypeInternal _ValidatorSet_default_instance_;
}  // namespace types
}  // namespace tendermint
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_tendermint_2ftypes_2fvalidator_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tendermint_2ftypes_2fvalidator_2eproto = nullptr;
const ::uint32_t
    TableStruct_tendermint_2ftypes_2fvalidator_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::tendermint::types::ValidatorSet, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::ValidatorSet, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tendermint::types::ValidatorSet, _impl_.validators_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::ValidatorSet, _impl_.proposer_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::ValidatorSet, _impl_.total_voting_power_),
        ~0u,
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Validator, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Validator, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Validator, _impl_.address_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Validator, _impl_.pub_key_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Validator, _impl_.voting_power_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::Validator, _impl_.proposer_priority_),
        ~0u,
        0,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::tendermint::types::SimpleValidator, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::SimpleValidator, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tendermint::types::SimpleValidator, _impl_.pub_key_),
        PROTOBUF_FIELD_OFFSET(::tendermint::types::SimpleValidator, _impl_.voting_power_),
        0,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::tendermint::types::ValidatorSet)},
        {14, 26, -1, sizeof(::tendermint::types::Validator)},
        {30, 40, -1, sizeof(::tendermint::types::SimpleValidator)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::tendermint::types::_ValidatorSet_default_instance_._instance,
    &::tendermint::types::_Validator_default_instance_._instance,
    &::tendermint::types::_SimpleValidator_default_instance_._instance,
};
const char descriptor_table_protodef_tendermint_2ftypes_2fvalidator_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n tendermint/types/validator.proto\022\020tend"
    "ermint.types\032\024gogoproto/gogo.proto\032\034tend"
    "ermint/crypto/keys.proto\"\262\001\n\014ValidatorSe"
    "t\022;\n\nvalidators\030\001 \003(\0132\033.tendermint.types"
    ".ValidatorR\nvalidators\0227\n\010proposer\030\002 \001(\013"
    "2\033.tendermint.types.ValidatorR\010proposer\022"
    ",\n\022total_voting_power\030\003 \001(\003R\020totalVoting"
    "Power\"\262\001\n\tValidator\022\030\n\007address\030\001 \001(\014R\007ad"
    "dress\022;\n\007pub_key\030\002 \001(\0132\034.tendermint.cryp"
    "to.PublicKeyB\004\310\336\037\000R\006pubKey\022!\n\014voting_pow"
    "er\030\003 \001(\003R\013votingPower\022+\n\021proposer_priori"
    "ty\030\004 \001(\003R\020proposerPriority\"k\n\017SimpleVali"
    "dator\0225\n\007pub_key\030\001 \001(\0132\034.tendermint.cryp"
    "to.PublicKeyR\006pubKey\022!\n\014voting_power\030\002 \001"
    "(\003R\013votingPower*\327\001\n\013BlockIDFlag\0221\n\025BLOCK"
    "_ID_FLAG_UNKNOWN\020\000\032\026\212\235 \022BlockIDFlagUnkno"
    "wn\022/\n\024BLOCK_ID_FLAG_ABSENT\020\001\032\025\212\235 \021BlockI"
    "DFlagAbsent\022/\n\024BLOCK_ID_FLAG_COMMIT\020\002\032\025\212"
    "\235 \021BlockIDFlagCommit\022)\n\021BLOCK_ID_FLAG_NI"
    "L\020\003\032\022\212\235 \016BlockIDFlagNil\032\010\210\243\036\000\250\244\036\001B5Z3git"
    "hub.com/cometbft/cometbft/proto/tendermi"
    "nt/typesb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_tendermint_2ftypes_2fvalidator_2eproto_deps[2] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_tendermint_2fcrypto_2fkeys_2eproto,
};
static ::absl::once_flag descriptor_table_tendermint_2ftypes_2fvalidator_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_tendermint_2ftypes_2fvalidator_2eproto = {
    false,
    false,
    856,
    descriptor_table_protodef_tendermint_2ftypes_2fvalidator_2eproto,
    "tendermint/types/validator.proto",
    &descriptor_table_tendermint_2ftypes_2fvalidator_2eproto_once,
    descriptor_table_tendermint_2ftypes_2fvalidator_2eproto_deps,
    2,
    3,
    schemas,
    file_default_instances,
    TableStruct_tendermint_2ftypes_2fvalidator_2eproto::offsets,
    file_level_enum_descriptors_tendermint_2ftypes_2fvalidator_2eproto,
    file_level_service_descriptors_tendermint_2ftypes_2fvalidator_2eproto,
};
namespace tendermint {
namespace types {
const ::google::protobuf::EnumDescriptor* BlockIDFlag_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_tendermint_2ftypes_2fvalidator_2eproto);
  return file_level_enum_descriptors_tendermint_2ftypes_2fvalidator_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t BlockIDFlag_internal_data_[] = {
    262144u, 0u, };
bool BlockIDFlag_IsValid(int value) {
  return 0 <= value && value <= 3;
}
// ===================================================================

class ValidatorSet::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ValidatorSet>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ValidatorSet, _impl_._has_bits_);
};

ValidatorSet::ValidatorSet(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.ValidatorSet)
}
inline PROTOBUF_NDEBUG_INLINE ValidatorSet::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tendermint::types::ValidatorSet& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        validators_{visibility, arena, from.validators_} {}

ValidatorSet::ValidatorSet(
    ::google::protobuf::Arena* arena,
    const ValidatorSet& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ValidatorSet* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.proposer_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tendermint::types::Validator>(
                              arena, *from._impl_.proposer_)
                        : nullptr;
  _impl_.total_voting_power_ = from._impl_.total_voting_power_;

  // @@protoc_insertion_point(copy_constructor:tendermint.types.ValidatorSet)
}
inline PROTOBUF_NDEBUG_INLINE ValidatorSet::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        validators_{visibility, arena} {}

inline void ValidatorSet::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, proposer_),
           0,
           offsetof(Impl_, total_voting_power_) -
               offsetof(Impl_, proposer_) +
               sizeof(Impl_::total_voting_power_));
}
ValidatorSet::~ValidatorSet() {
  // @@protoc_insertion_point(destructor:tendermint.types.ValidatorSet)
  SharedDtor(*this);
}
inline void ValidatorSet::SharedDtor(MessageLite& self) {
  ValidatorSet& this_ = static_cast<ValidatorSet&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.proposer_;
  this_._impl_.~Impl_();
}

inline void* ValidatorSet::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ValidatorSet(arena);
}
constexpr auto ValidatorSet::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ValidatorSet, _impl_.validators_) +
          decltype(ValidatorSet::_impl_.validators_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ValidatorSet), alignof(ValidatorSet), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ValidatorSet::PlacementNew_,
                                 sizeof(ValidatorSet),
                                 alignof(ValidatorSet));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ValidatorSet::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ValidatorSet_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ValidatorSet::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ValidatorSet>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ValidatorSet::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ValidatorSet>(), &ValidatorSet::ByteSizeLong,
            &ValidatorSet::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ValidatorSet, _impl_._cached_size_),
        false,
    },
    &ValidatorSet::kDescriptorMethods,
    &descriptor_table_tendermint_2ftypes_2fvalidator_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ValidatorSet::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> ValidatorSet::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ValidatorSet, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tendermint::types::ValidatorSet>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .tendermint.types.Validator validators = 1 [json_name = "validators"];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ValidatorSet, _impl_.validators_)}},
    // .tendermint.types.Validator proposer = 2 [json_name = "proposer"];
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 1, PROTOBUF_FIELD_OFFSET(ValidatorSet, _impl_.proposer_)}},
    // int64 total_voting_power = 3 [json_name = "totalVotingPower"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ValidatorSet, _impl_.total_voting_power_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ValidatorSet, _impl_.total_voting_power_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tendermint.types.Validator validators = 1 [json_name = "validators"];
    {PROTOBUF_FIELD_OFFSET(ValidatorSet, _impl_.validators_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tendermint.types.Validator proposer = 2 [json_name = "proposer"];
    {PROTOBUF_FIELD_OFFSET(ValidatorSet, _impl_.proposer_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 total_voting_power = 3 [json_name = "totalVotingPower"];
    {PROTOBUF_FIELD_OFFSET(ValidatorSet, _impl_.total_voting_power_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tendermint::types::Validator>()},
    {::_pbi::TcParser::GetTable<::tendermint::types::Validator>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ValidatorSet::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.ValidatorSet)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.validators_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.proposer_ != nullptr);
    _impl_.proposer_->Clear();
  }
  _impl_.total_voting_power_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ValidatorSet::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ValidatorSet& this_ = static_cast<const ValidatorSet&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ValidatorSet::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ValidatorSet& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.ValidatorSet)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .tendermint.types.Validator validators = 1 [json_name = "validators"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_validators_size());
               i < n; i++) {
            const auto& repfield = this_._internal_validators().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tendermint.types.Validator proposer = 2 [json_name = "proposer"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.proposer_, this_._impl_.proposer_->GetCachedSize(), target,
                stream);
          }

          // int64 total_voting_power = 3 [json_name = "totalVotingPower"];
          if (this_._internal_total_voting_power() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<3>(
                    stream, this_._internal_total_voting_power(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.ValidatorSet)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ValidatorSet::ByteSizeLong(const MessageLite& base) {
          const ValidatorSet& this_ = static_cast<const ValidatorSet&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ValidatorSet::ByteSizeLong() const {
          const ValidatorSet& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tendermint.types.ValidatorSet)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tendermint.types.Validator validators = 1 [json_name = "validators"];
            {
              total_size += 1UL * this_._internal_validators_size();
              for (const auto& msg : this_._internal_validators()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // .tendermint.types.Validator proposer = 2 [json_name = "proposer"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.proposer_);
            }
          }
           {
            // int64 total_voting_power = 3 [json_name = "totalVotingPower"];
            if (this_._internal_total_voting_power() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_total_voting_power());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ValidatorSet::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ValidatorSet*>(&to_msg);
  auto& from = static_cast<const ValidatorSet&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.ValidatorSet)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_validators()->MergeFrom(
      from._internal_validators());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.proposer_ != nullptr);
    if (_this->_impl_.proposer_ == nullptr) {
      _this->_impl_.proposer_ =
          ::google::protobuf::Message::CopyConstruct<::tendermint::types::Validator>(arena, *from._impl_.proposer_);
    } else {
      _this->_impl_.proposer_->MergeFrom(*from._impl_.proposer_);
    }
  }
  if (from._internal_total_voting_power() != 0) {
    _this->_impl_.total_voting_power_ = from._impl_.total_voting_power_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ValidatorSet::CopyFrom(const ValidatorSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.ValidatorSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ValidatorSet::InternalSwap(ValidatorSet* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.validators_.InternalSwap(&other->_impl_.validators_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidatorSet, _impl_.total_voting_power_)
      + sizeof(ValidatorSet::_impl_.total_voting_power_)
      - PROTOBUF_FIELD_OFFSET(ValidatorSet, _impl_.proposer_)>(
          reinterpret_cast<char*>(&_impl_.proposer_),
          reinterpret_cast<char*>(&other->_impl_.proposer_));
}

::google::protobuf::Metadata ValidatorSet::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Validator::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Validator>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Validator, _impl_._has_bits_);
};

void Validator::clear_pub_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pub_key_ != nullptr) _impl_.pub_key_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Validator::Validator(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.Validator)
}
inline PROTOBUF_NDEBUG_INLINE Validator::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tendermint::types::Validator& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        address_(arena, from.address_) {}

Validator::Validator(
    ::google::protobuf::Arena* arena,
    const Validator& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Validator* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.pub_key_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tendermint::crypto::PublicKey>(
                              arena, *from._impl_.pub_key_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, voting_power_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, voting_power_),
           offsetof(Impl_, proposer_priority_) -
               offsetof(Impl_, voting_power_) +
               sizeof(Impl_::proposer_priority_));

  // @@protoc_insertion_point(copy_constructor:tendermint.types.Validator)
}
inline PROTOBUF_NDEBUG_INLINE Validator::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        address_(arena) {}

inline void Validator::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pub_key_),
           0,
           offsetof(Impl_, proposer_priority_) -
               offsetof(Impl_, pub_key_) +
               sizeof(Impl_::proposer_priority_));
}
Validator::~Validator() {
  // @@protoc_insertion_point(destructor:tendermint.types.Validator)
  SharedDtor(*this);
}
inline void Validator::SharedDtor(MessageLite& self) {
  Validator& this_ = static_cast<Validator&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.address_.Destroy();
  delete this_._impl_.pub_key_;
  this_._impl_.~Impl_();
}

inline void* Validator::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Validator(arena);
}
constexpr auto Validator::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Validator),
                                            alignof(Validator));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Validator::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Validator_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Validator::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Validator>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Validator::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Validator>(), &Validator::ByteSizeLong,
            &Validator::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Validator, _impl_._cached_size_),
        false,
    },
    &Validator::kDescriptorMethods,
    &descriptor_table_tendermint_2ftypes_2fvalidator_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Validator::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> Validator::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Validator, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tendermint::types::Validator>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int64 proposer_priority = 4 [json_name = "proposerPriority"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Validator, _impl_.proposer_priority_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Validator, _impl_.proposer_priority_)}},
    // bytes address = 1 [json_name = "address"];
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Validator, _impl_.address_)}},
    // .tendermint.crypto.PublicKey pub_key = 2 [json_name = "pubKey", (.gogoproto.nullable) = false];
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Validator, _impl_.pub_key_)}},
    // int64 voting_power = 3 [json_name = "votingPower"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Validator, _impl_.voting_power_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Validator, _impl_.voting_power_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes address = 1 [json_name = "address"];
    {PROTOBUF_FIELD_OFFSET(Validator, _impl_.address_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // .tendermint.crypto.PublicKey pub_key = 2 [json_name = "pubKey", (.gogoproto.nullable) = false];
    {PROTOBUF_FIELD_OFFSET(Validator, _impl_.pub_key_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 voting_power = 3 [json_name = "votingPower"];
    {PROTOBUF_FIELD_OFFSET(Validator, _impl_.voting_power_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 proposer_priority = 4 [json_name = "proposerPriority"];
    {PROTOBUF_FIELD_OFFSET(Validator, _impl_.proposer_priority_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tendermint::crypto::PublicKey>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Validator::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.Validator)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pub_key_ != nullptr);
    _impl_.pub_key_->Clear();
  }
  ::memset(&_impl_.voting_power_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.proposer_priority_) -
      reinterpret_cast<char*>(&_impl_.voting_power_)) + sizeof(_impl_.proposer_priority_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Validator::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Validator& this_ = static_cast<const Validator&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Validator::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Validator& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.Validator)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bytes address = 1 [json_name = "address"];
          if (!this_._internal_address().empty()) {
            const std::string& _s = this_._internal_address();
            target = stream->WriteBytesMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tendermint.crypto.PublicKey pub_key = 2 [json_name = "pubKey", (.gogoproto.nullable) = false];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.pub_key_, this_._impl_.pub_key_->GetCachedSize(), target,
                stream);
          }

          // int64 voting_power = 3 [json_name = "votingPower"];
          if (this_._internal_voting_power() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<3>(
                    stream, this_._internal_voting_power(), target);
          }

          // int64 proposer_priority = 4 [json_name = "proposerPriority"];
          if (this_._internal_proposer_priority() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<4>(
                    stream, this_._internal_proposer_priority(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.Validator)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Validator::ByteSizeLong(const MessageLite& base) {
          const Validator& this_ = static_cast<const Validator&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Validator::ByteSizeLong() const {
          const Validator& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tendermint.types.Validator)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bytes address = 1 [json_name = "address"];
            if (!this_._internal_address().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_address());
            }
          }
           {
            // .tendermint.crypto.PublicKey pub_key = 2 [json_name = "pubKey", (.gogoproto.nullable) = false];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pub_key_);
            }
          }
           {
            // int64 voting_power = 3 [json_name = "votingPower"];
            if (this_._internal_voting_power() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_voting_power());
            }
            // int64 proposer_priority = 4 [json_name = "proposerPriority"];
            if (this_._internal_proposer_priority() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_proposer_priority());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Validator::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Validator*>(&to_msg);
  auto& from = static_cast<const Validator&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.Validator)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.pub_key_ != nullptr);
    if (_this->_impl_.pub_key_ == nullptr) {
      _this->_impl_.pub_key_ =
          ::google::protobuf::Message::CopyConstruct<::tendermint::crypto::PublicKey>(arena, *from._impl_.pub_key_);
    } else {
      _this->_impl_.pub_key_->MergeFrom(*from._impl_.pub_key_);
    }
  }
  if (from._internal_voting_power() != 0) {
    _this->_impl_.voting_power_ = from._impl_.voting_power_;
  }
  if (from._internal_proposer_priority() != 0) {
    _this->_impl_.proposer_priority_ = from._impl_.proposer_priority_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Validator::CopyFrom(const Validator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.Validator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Validator::InternalSwap(Validator* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, &other->_impl_.address_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Validator, _impl_.proposer_priority_)
      + sizeof(Validator::_impl_.proposer_priority_)
      - PROTOBUF_FIELD_OFFSET(Validator, _impl_.pub_key_)>(
          reinterpret_cast<char*>(&_impl_.pub_key_),
          reinterpret_cast<char*>(&other->_impl_.pub_key_));
}

::google::protobuf::Metadata Validator::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SimpleValidator::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SimpleValidator>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SimpleValidator, _impl_._has_bits_);
};

void SimpleValidator::clear_pub_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pub_key_ != nullptr) _impl_.pub_key_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SimpleValidator::SimpleValidator(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.SimpleValidator)
}
inline PROTOBUF_NDEBUG_INLINE SimpleValidator::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tendermint::types::SimpleValidator& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SimpleValidator::SimpleValidator(
    ::google::protobuf::Arena* arena,
    const SimpleValidator& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SimpleValidator* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.pub_key_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tendermint::crypto::PublicKey>(
                              arena, *from._impl_.pub_key_)
                        : nullptr;
  _impl_.voting_power_ = from._impl_.voting_power_;

  // @@protoc_insertion_point(copy_constructor:tendermint.types.SimpleValidator)
}
inline PROTOBUF_NDEBUG_INLINE SimpleValidator::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SimpleValidator::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pub_key_),
           0,
           offsetof(Impl_, voting_power_) -
               offsetof(Impl_, pub_key_) +
               sizeof(Impl_::voting_power_));
}
SimpleValidator::~SimpleValidator() {
  // @@protoc_insertion_point(destructor:tendermint.types.SimpleValidator)
  SharedDtor(*this);
}
inline void SimpleValidator::SharedDtor(MessageLite& self) {
  SimpleValidator& this_ = static_cast<SimpleValidator&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.pub_key_;
  this_._impl_.~Impl_();
}

inline void* SimpleValidator::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SimpleValidator(arena);
}
constexpr auto SimpleValidator::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SimpleValidator),
                                            alignof(SimpleValidator));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SimpleValidator::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SimpleValidator_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SimpleValidator::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SimpleValidator>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SimpleValidator::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SimpleValidator>(), &SimpleValidator::ByteSizeLong,
            &SimpleValidator::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SimpleValidator, _impl_._cached_size_),
        false,
    },
    &SimpleValidator::kDescriptorMethods,
    &descriptor_table_tendermint_2ftypes_2fvalidator_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SimpleValidator::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> SimpleValidator::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SimpleValidator, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tendermint::types::SimpleValidator>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int64 voting_power = 2 [json_name = "votingPower"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SimpleValidator, _impl_.voting_power_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SimpleValidator, _impl_.voting_power_)}},
    // .tendermint.crypto.PublicKey pub_key = 1 [json_name = "pubKey"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SimpleValidator, _impl_.pub_key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tendermint.crypto.PublicKey pub_key = 1 [json_name = "pubKey"];
    {PROTOBUF_FIELD_OFFSET(SimpleValidator, _impl_.pub_key_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 voting_power = 2 [json_name = "votingPower"];
    {PROTOBUF_FIELD_OFFSET(SimpleValidator, _impl_.voting_power_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tendermint::crypto::PublicKey>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SimpleValidator::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.SimpleValidator)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pub_key_ != nullptr);
    _impl_.pub_key_->Clear();
  }
  _impl_.voting_power_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SimpleValidator::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SimpleValidator& this_ = static_cast<const SimpleValidator&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SimpleValidator::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SimpleValidator& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.SimpleValidator)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tendermint.crypto.PublicKey pub_key = 1 [json_name = "pubKey"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.pub_key_, this_._impl_.pub_key_->GetCachedSize(), target,
                stream);
          }

          // int64 voting_power = 2 [json_name = "votingPower"];
          if (this_._internal_voting_power() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<2>(
                    stream, this_._internal_voting_power(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.SimpleValidator)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SimpleValidator::ByteSizeLong(const MessageLite& base) {
          const SimpleValidator& this_ = static_cast<const SimpleValidator&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SimpleValidator::ByteSizeLong() const {
          const SimpleValidator& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tendermint.types.SimpleValidator)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .tendermint.crypto.PublicKey pub_key = 1 [json_name = "pubKey"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pub_key_);
            }
          }
           {
            // int64 voting_power = 2 [json_name = "votingPower"];
            if (this_._internal_voting_power() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_voting_power());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SimpleValidator::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SimpleValidator*>(&to_msg);
  auto& from = static_cast<const SimpleValidator&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.SimpleValidator)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.pub_key_ != nullptr);
    if (_this->_impl_.pub_key_ == nullptr) {
      _this->_impl_.pub_key_ =
          ::google::protobuf::Message::CopyConstruct<::tendermint::crypto::PublicKey>(arena, *from._impl_.pub_key_);
    } else {
      _this->_impl_.pub_key_->MergeFrom(*from._impl_.pub_key_);
    }
  }
  if (from._internal_voting_power() != 0) {
    _this->_impl_.voting_power_ = from._impl_.voting_power_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleValidator::CopyFrom(const SimpleValidator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.SimpleValidator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SimpleValidator::InternalSwap(SimpleValidator* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleValidator, _impl_.voting_power_)
      + sizeof(SimpleValidator::_impl_.voting_power_)
      - PROTOBUF_FIELD_OFFSET(SimpleValidator, _impl_.pub_key_)>(
          reinterpret_cast<char*>(&_impl_.pub_key_),
          reinterpret_cast<char*>(&other->_impl_.pub_key_));
}

::google::protobuf::Metadata SimpleValidator::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace tendermint
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_tendermint_2ftypes_2fvalidator_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
