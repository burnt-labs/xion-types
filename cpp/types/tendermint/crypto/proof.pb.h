// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tendermint/crypto/proof.proto
// Protobuf C++ Version: 5.29.4

#ifndef tendermint_2fcrypto_2fproof_2eproto_2epb_2eh
#define tendermint_2fcrypto_2fproof_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tendermint_2fcrypto_2fproof_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_tendermint_2fcrypto_2fproof_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tendermint_2fcrypto_2fproof_2eproto;
namespace tendermint {
namespace crypto {
class DominoOp;
struct DominoOpDefaultTypeInternal;
extern DominoOpDefaultTypeInternal _DominoOp_default_instance_;
class Proof;
struct ProofDefaultTypeInternal;
extern ProofDefaultTypeInternal _Proof_default_instance_;
class ProofOp;
struct ProofOpDefaultTypeInternal;
extern ProofOpDefaultTypeInternal _ProofOp_default_instance_;
class ProofOps;
struct ProofOpsDefaultTypeInternal;
extern ProofOpsDefaultTypeInternal _ProofOps_default_instance_;
class ValueOp;
struct ValueOpDefaultTypeInternal;
extern ValueOpDefaultTypeInternal _ValueOp_default_instance_;
}  // namespace crypto
}  // namespace tendermint
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tendermint {
namespace crypto {

// ===================================================================


// -------------------------------------------------------------------

class ProofOp final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.crypto.ProofOp) */ {
 public:
  inline ProofOp() : ProofOp(nullptr) {}
  ~ProofOp() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ProofOp* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ProofOp));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ProofOp(
      ::google::protobuf::internal::ConstantInitialized);

  inline ProofOp(const ProofOp& from) : ProofOp(nullptr, from) {}
  inline ProofOp(ProofOp&& from) noexcept
      : ProofOp(nullptr, std::move(from)) {}
  inline ProofOp& operator=(const ProofOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProofOp& operator=(ProofOp&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProofOp& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProofOp* internal_default_instance() {
    return reinterpret_cast<const ProofOp*>(
        &_ProofOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(ProofOp& a, ProofOp& b) { a.Swap(&b); }
  inline void Swap(ProofOp* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProofOp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProofOp* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ProofOp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProofOp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ProofOp& from) { ProofOp::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ProofOp* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.crypto.ProofOp"; }

 protected:
  explicit ProofOp(::google::protobuf::Arena* arena);
  ProofOp(::google::protobuf::Arena* arena, const ProofOp& from);
  ProofOp(::google::protobuf::Arena* arena, ProofOp&& from) noexcept
      : ProofOp(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTypeFieldNumber = 1,
    kKeyFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // string type = 1 [json_name = "type"];
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // bytes key = 2 [json_name = "key"];
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // bytes data = 3 [json_name = "data"];
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:tendermint.crypto.ProofOp)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      38, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ProofOp& from_msg);
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fcrypto_2fproof_2eproto;
};
// -------------------------------------------------------------------

class Proof final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.crypto.Proof) */ {
 public:
  inline Proof() : Proof(nullptr) {}
  ~Proof() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Proof* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Proof));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Proof(
      ::google::protobuf::internal::ConstantInitialized);

  inline Proof(const Proof& from) : Proof(nullptr, from) {}
  inline Proof(Proof&& from) noexcept
      : Proof(nullptr, std::move(from)) {}
  inline Proof& operator=(const Proof& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proof& operator=(Proof&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Proof& default_instance() {
    return *internal_default_instance();
  }
  static inline const Proof* internal_default_instance() {
    return reinterpret_cast<const Proof*>(
        &_Proof_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Proof& a, Proof& b) { a.Swap(&b); }
  inline void Swap(Proof* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Proof* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Proof* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Proof>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Proof& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Proof& from) { Proof::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Proof* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.crypto.Proof"; }

 protected:
  explicit Proof(::google::protobuf::Arena* arena);
  Proof(::google::protobuf::Arena* arena, const Proof& from);
  Proof(::google::protobuf::Arena* arena, Proof&& from) noexcept
      : Proof(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAuntsFieldNumber = 4,
    kLeafHashFieldNumber = 3,
    kTotalFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // repeated bytes aunts = 4 [json_name = "aunts"];
  int aunts_size() const;
  private:
  int _internal_aunts_size() const;

  public:
  void clear_aunts() ;
  const std::string& aunts(int index) const;
  std::string* mutable_aunts(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_aunts(int index, Arg_&& value, Args_... args);
  std::string* add_aunts();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_aunts(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& aunts() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_aunts();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_aunts() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_aunts();

  public:
  // bytes leaf_hash = 3 [json_name = "leafHash"];
  void clear_leaf_hash() ;
  const std::string& leaf_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_leaf_hash(Arg_&& arg, Args_... args);
  std::string* mutable_leaf_hash();
  PROTOBUF_NODISCARD std::string* release_leaf_hash();
  void set_allocated_leaf_hash(std::string* value);

  private:
  const std::string& _internal_leaf_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leaf_hash(
      const std::string& value);
  std::string* _internal_mutable_leaf_hash();

  public:
  // int64 total = 1 [json_name = "total"];
  void clear_total() ;
  ::int64_t total() const;
  void set_total(::int64_t value);

  private:
  ::int64_t _internal_total() const;
  void _internal_set_total(::int64_t value);

  public:
  // int64 index = 2 [json_name = "index"];
  void clear_index() ;
  ::int64_t index() const;
  void set_index(::int64_t value);

  private:
  ::int64_t _internal_index() const;
  void _internal_set_index(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.crypto.Proof)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Proof& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> aunts_;
    ::google::protobuf::internal::ArenaStringPtr leaf_hash_;
    ::int64_t total_;
    ::int64_t index_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fcrypto_2fproof_2eproto;
};
// -------------------------------------------------------------------

class DominoOp final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.crypto.DominoOp) */ {
 public:
  inline DominoOp() : DominoOp(nullptr) {}
  ~DominoOp() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DominoOp* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DominoOp));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DominoOp(
      ::google::protobuf::internal::ConstantInitialized);

  inline DominoOp(const DominoOp& from) : DominoOp(nullptr, from) {}
  inline DominoOp(DominoOp&& from) noexcept
      : DominoOp(nullptr, std::move(from)) {}
  inline DominoOp& operator=(const DominoOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DominoOp& operator=(DominoOp&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DominoOp& default_instance() {
    return *internal_default_instance();
  }
  static inline const DominoOp* internal_default_instance() {
    return reinterpret_cast<const DominoOp*>(
        &_DominoOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(DominoOp& a, DominoOp& b) { a.Swap(&b); }
  inline void Swap(DominoOp* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DominoOp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DominoOp* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DominoOp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DominoOp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DominoOp& from) { DominoOp::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DominoOp* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.crypto.DominoOp"; }

 protected:
  explicit DominoOp(::google::protobuf::Arena* arena);
  DominoOp(::google::protobuf::Arena* arena, const DominoOp& from);
  DominoOp(::google::protobuf::Arena* arena, DominoOp&& from) noexcept
      : DominoOp(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeyFieldNumber = 1,
    kInputFieldNumber = 2,
    kOutputFieldNumber = 3,
  };
  // string key = 1 [json_name = "key"];
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // string input = 2 [json_name = "input"];
  void clear_input() ;
  const std::string& input() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_input(Arg_&& arg, Args_... args);
  std::string* mutable_input();
  PROTOBUF_NODISCARD std::string* release_input();
  void set_allocated_input(std::string* value);

  private:
  const std::string& _internal_input() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input(
      const std::string& value);
  std::string* _internal_mutable_input();

  public:
  // string output = 3 [json_name = "output"];
  void clear_output() ;
  const std::string& output() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_output(Arg_&& arg, Args_... args);
  std::string* mutable_output();
  PROTOBUF_NODISCARD std::string* release_output();
  void set_allocated_output(std::string* value);

  private:
  const std::string& _internal_output() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output(
      const std::string& value);
  std::string* _internal_mutable_output();

  public:
  // @@protoc_insertion_point(class_scope:tendermint.crypto.DominoOp)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DominoOp& from_msg);
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr input_;
    ::google::protobuf::internal::ArenaStringPtr output_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fcrypto_2fproof_2eproto;
};
// -------------------------------------------------------------------

class ValueOp final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.crypto.ValueOp) */ {
 public:
  inline ValueOp() : ValueOp(nullptr) {}
  ~ValueOp() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ValueOp* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ValueOp));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ValueOp(
      ::google::protobuf::internal::ConstantInitialized);

  inline ValueOp(const ValueOp& from) : ValueOp(nullptr, from) {}
  inline ValueOp(ValueOp&& from) noexcept
      : ValueOp(nullptr, std::move(from)) {}
  inline ValueOp& operator=(const ValueOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValueOp& operator=(ValueOp&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValueOp& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValueOp* internal_default_instance() {
    return reinterpret_cast<const ValueOp*>(
        &_ValueOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ValueOp& a, ValueOp& b) { a.Swap(&b); }
  inline void Swap(ValueOp* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValueOp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValueOp* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ValueOp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ValueOp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ValueOp& from) { ValueOp::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ValueOp* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.crypto.ValueOp"; }

 protected:
  explicit ValueOp(::google::protobuf::Arena* arena);
  ValueOp(::google::protobuf::Arena* arena, const ValueOp& from);
  ValueOp(::google::protobuf::Arena* arena, ValueOp&& from) noexcept
      : ValueOp(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeyFieldNumber = 1,
    kProofFieldNumber = 2,
  };
  // bytes key = 1 [json_name = "key"];
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // .tendermint.crypto.Proof proof = 2 [json_name = "proof"];
  bool has_proof() const;
  void clear_proof() ;
  const ::tendermint::crypto::Proof& proof() const;
  PROTOBUF_NODISCARD ::tendermint::crypto::Proof* release_proof();
  ::tendermint::crypto::Proof* mutable_proof();
  void set_allocated_proof(::tendermint::crypto::Proof* value);
  void unsafe_arena_set_allocated_proof(::tendermint::crypto::Proof* value);
  ::tendermint::crypto::Proof* unsafe_arena_release_proof();

  private:
  const ::tendermint::crypto::Proof& _internal_proof() const;
  ::tendermint::crypto::Proof* _internal_mutable_proof();

  public:
  // @@protoc_insertion_point(class_scope:tendermint.crypto.ValueOp)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ValueOp& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::tendermint::crypto::Proof* proof_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fcrypto_2fproof_2eproto;
};
// -------------------------------------------------------------------

class ProofOps final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.crypto.ProofOps) */ {
 public:
  inline ProofOps() : ProofOps(nullptr) {}
  ~ProofOps() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ProofOps* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ProofOps));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ProofOps(
      ::google::protobuf::internal::ConstantInitialized);

  inline ProofOps(const ProofOps& from) : ProofOps(nullptr, from) {}
  inline ProofOps(ProofOps&& from) noexcept
      : ProofOps(nullptr, std::move(from)) {}
  inline ProofOps& operator=(const ProofOps& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProofOps& operator=(ProofOps&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProofOps& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProofOps* internal_default_instance() {
    return reinterpret_cast<const ProofOps*>(
        &_ProofOps_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(ProofOps& a, ProofOps& b) { a.Swap(&b); }
  inline void Swap(ProofOps* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProofOps* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProofOps* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ProofOps>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProofOps& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ProofOps& from) { ProofOps::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ProofOps* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.crypto.ProofOps"; }

 protected:
  explicit ProofOps(::google::protobuf::Arena* arena);
  ProofOps(::google::protobuf::Arena* arena, const ProofOps& from);
  ProofOps(::google::protobuf::Arena* arena, ProofOps&& from) noexcept
      : ProofOps(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOpsFieldNumber = 1,
  };
  // repeated .tendermint.crypto.ProofOp ops = 1 [json_name = "ops", (.gogoproto.nullable) = false];
  int ops_size() const;
  private:
  int _internal_ops_size() const;

  public:
  void clear_ops() ;
  ::tendermint::crypto::ProofOp* mutable_ops(int index);
  ::google::protobuf::RepeatedPtrField<::tendermint::crypto::ProofOp>* mutable_ops();

  private:
  const ::google::protobuf::RepeatedPtrField<::tendermint::crypto::ProofOp>& _internal_ops() const;
  ::google::protobuf::RepeatedPtrField<::tendermint::crypto::ProofOp>* _internal_mutable_ops();
  public:
  const ::tendermint::crypto::ProofOp& ops(int index) const;
  ::tendermint::crypto::ProofOp* add_ops();
  const ::google::protobuf::RepeatedPtrField<::tendermint::crypto::ProofOp>& ops() const;
  // @@protoc_insertion_point(class_scope:tendermint.crypto.ProofOps)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ProofOps& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tendermint::crypto::ProofOp > ops_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fcrypto_2fproof_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Proof

// int64 total = 1 [json_name = "total"];
inline void Proof::clear_total() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_ = ::int64_t{0};
}
inline ::int64_t Proof::total() const {
  // @@protoc_insertion_point(field_get:tendermint.crypto.Proof.total)
  return _internal_total();
}
inline void Proof::set_total(::int64_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:tendermint.crypto.Proof.total)
}
inline ::int64_t Proof::_internal_total() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_;
}
inline void Proof::_internal_set_total(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_ = value;
}

// int64 index = 2 [json_name = "index"];
inline void Proof::clear_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = ::int64_t{0};
}
inline ::int64_t Proof::index() const {
  // @@protoc_insertion_point(field_get:tendermint.crypto.Proof.index)
  return _internal_index();
}
inline void Proof::set_index(::int64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:tendermint.crypto.Proof.index)
}
inline ::int64_t Proof::_internal_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.index_;
}
inline void Proof::_internal_set_index(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = value;
}

// bytes leaf_hash = 3 [json_name = "leafHash"];
inline void Proof::clear_leaf_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leaf_hash_.ClearToEmpty();
}
inline const std::string& Proof::leaf_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.crypto.Proof.leaf_hash)
  return _internal_leaf_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Proof::set_leaf_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leaf_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.crypto.Proof.leaf_hash)
}
inline std::string* Proof::mutable_leaf_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_leaf_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.crypto.Proof.leaf_hash)
  return _s;
}
inline const std::string& Proof::_internal_leaf_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.leaf_hash_.Get();
}
inline void Proof::_internal_set_leaf_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leaf_hash_.Set(value, GetArena());
}
inline std::string* Proof::_internal_mutable_leaf_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.leaf_hash_.Mutable( GetArena());
}
inline std::string* Proof::release_leaf_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.crypto.Proof.leaf_hash)
  return _impl_.leaf_hash_.Release();
}
inline void Proof::set_allocated_leaf_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leaf_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.leaf_hash_.IsDefault()) {
    _impl_.leaf_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.crypto.Proof.leaf_hash)
}

// repeated bytes aunts = 4 [json_name = "aunts"];
inline int Proof::_internal_aunts_size() const {
  return _internal_aunts().size();
}
inline int Proof::aunts_size() const {
  return _internal_aunts_size();
}
inline void Proof::clear_aunts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.aunts_.Clear();
}
inline std::string* Proof::add_aunts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_aunts()->Add();
  // @@protoc_insertion_point(field_add_mutable:tendermint.crypto.Proof.aunts)
  return _s;
}
inline const std::string& Proof::aunts(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.crypto.Proof.aunts)
  return _internal_aunts().Get(index);
}
inline std::string* Proof::mutable_aunts(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tendermint.crypto.Proof.aunts)
  return _internal_mutable_aunts()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void Proof::set_aunts(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_aunts()->Mutable(index),
      std::forward<Arg_>(value), args... , ::google::protobuf::internal::BytesTag{});
  // @@protoc_insertion_point(field_set:tendermint.crypto.Proof.aunts)
}
template <typename Arg_, typename... Args_>
inline void Proof::add_aunts(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_aunts(),
                               std::forward<Arg_>(value),
                               args... , ::google::protobuf::internal::BytesTag{});
  // @@protoc_insertion_point(field_add:tendermint.crypto.Proof.aunts)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Proof::aunts() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tendermint.crypto.Proof.aunts)
  return _internal_aunts();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Proof::mutable_aunts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tendermint.crypto.Proof.aunts)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_aunts();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Proof::_internal_aunts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.aunts_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Proof::_internal_mutable_aunts() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.aunts_;
}

// -------------------------------------------------------------------

// ValueOp

// bytes key = 1 [json_name = "key"];
inline void ValueOp::clear_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& ValueOp::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.crypto.ValueOp.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ValueOp::set_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.crypto.ValueOp.key)
}
inline std::string* ValueOp::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:tendermint.crypto.ValueOp.key)
  return _s;
}
inline const std::string& ValueOp::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_.Get();
}
inline void ValueOp::_internal_set_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(value, GetArena());
}
inline std::string* ValueOp::_internal_mutable_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* ValueOp::release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.crypto.ValueOp.key)
  return _impl_.key_.Release();
}
inline void ValueOp::set_allocated_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.crypto.ValueOp.key)
}

// .tendermint.crypto.Proof proof = 2 [json_name = "proof"];
inline bool ValueOp::has_proof() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proof_ != nullptr);
  return value;
}
inline void ValueOp::clear_proof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.proof_ != nullptr) _impl_.proof_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tendermint::crypto::Proof& ValueOp::_internal_proof() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::crypto::Proof* p = _impl_.proof_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::crypto::Proof&>(::tendermint::crypto::_Proof_default_instance_);
}
inline const ::tendermint::crypto::Proof& ValueOp::proof() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.crypto.ValueOp.proof)
  return _internal_proof();
}
inline void ValueOp::unsafe_arena_set_allocated_proof(::tendermint::crypto::Proof* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.proof_);
  }
  _impl_.proof_ = reinterpret_cast<::tendermint::crypto::Proof*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.crypto.ValueOp.proof)
}
inline ::tendermint::crypto::Proof* ValueOp::release_proof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::crypto::Proof* released = _impl_.proof_;
  _impl_.proof_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::crypto::Proof* ValueOp::unsafe_arena_release_proof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.crypto.ValueOp.proof)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::crypto::Proof* temp = _impl_.proof_;
  _impl_.proof_ = nullptr;
  return temp;
}
inline ::tendermint::crypto::Proof* ValueOp::_internal_mutable_proof() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.proof_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::crypto::Proof>(GetArena());
    _impl_.proof_ = reinterpret_cast<::tendermint::crypto::Proof*>(p);
  }
  return _impl_.proof_;
}
inline ::tendermint::crypto::Proof* ValueOp::mutable_proof() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tendermint::crypto::Proof* _msg = _internal_mutable_proof();
  // @@protoc_insertion_point(field_mutable:tendermint.crypto.ValueOp.proof)
  return _msg;
}
inline void ValueOp::set_allocated_proof(::tendermint::crypto::Proof* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.proof_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.proof_ = reinterpret_cast<::tendermint::crypto::Proof*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.crypto.ValueOp.proof)
}

// -------------------------------------------------------------------

// DominoOp

// string key = 1 [json_name = "key"];
inline void DominoOp::clear_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& DominoOp::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.crypto.DominoOp.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DominoOp::set_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.crypto.DominoOp.key)
}
inline std::string* DominoOp::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:tendermint.crypto.DominoOp.key)
  return _s;
}
inline const std::string& DominoOp::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_.Get();
}
inline void DominoOp::_internal_set_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(value, GetArena());
}
inline std::string* DominoOp::_internal_mutable_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* DominoOp::release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.crypto.DominoOp.key)
  return _impl_.key_.Release();
}
inline void DominoOp::set_allocated_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.crypto.DominoOp.key)
}

// string input = 2 [json_name = "input"];
inline void DominoOp::clear_input() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.input_.ClearToEmpty();
}
inline const std::string& DominoOp::input() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.crypto.DominoOp.input)
  return _internal_input();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DominoOp::set_input(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.input_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.crypto.DominoOp.input)
}
inline std::string* DominoOp::mutable_input() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:tendermint.crypto.DominoOp.input)
  return _s;
}
inline const std::string& DominoOp::_internal_input() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.input_.Get();
}
inline void DominoOp::_internal_set_input(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.input_.Set(value, GetArena());
}
inline std::string* DominoOp::_internal_mutable_input() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.input_.Mutable( GetArena());
}
inline std::string* DominoOp::release_input() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.crypto.DominoOp.input)
  return _impl_.input_.Release();
}
inline void DominoOp::set_allocated_input(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.input_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.input_.IsDefault()) {
    _impl_.input_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.crypto.DominoOp.input)
}

// string output = 3 [json_name = "output"];
inline void DominoOp::clear_output() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.output_.ClearToEmpty();
}
inline const std::string& DominoOp::output() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.crypto.DominoOp.output)
  return _internal_output();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DominoOp::set_output(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.output_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.crypto.DominoOp.output)
}
inline std::string* DominoOp::mutable_output() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_output();
  // @@protoc_insertion_point(field_mutable:tendermint.crypto.DominoOp.output)
  return _s;
}
inline const std::string& DominoOp::_internal_output() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.output_.Get();
}
inline void DominoOp::_internal_set_output(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.output_.Set(value, GetArena());
}
inline std::string* DominoOp::_internal_mutable_output() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.output_.Mutable( GetArena());
}
inline std::string* DominoOp::release_output() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.crypto.DominoOp.output)
  return _impl_.output_.Release();
}
inline void DominoOp::set_allocated_output(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.output_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.output_.IsDefault()) {
    _impl_.output_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.crypto.DominoOp.output)
}

// -------------------------------------------------------------------

// ProofOp

// string type = 1 [json_name = "type"];
inline void ProofOp::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& ProofOp::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.crypto.ProofOp.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProofOp::set_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.crypto.ProofOp.type)
}
inline std::string* ProofOp::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:tendermint.crypto.ProofOp.type)
  return _s;
}
inline const std::string& ProofOp::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.type_.Get();
}
inline void ProofOp::_internal_set_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.Set(value, GetArena());
}
inline std::string* ProofOp::_internal_mutable_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* ProofOp::release_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.crypto.ProofOp.type)
  return _impl_.type_.Release();
}
inline void ProofOp::set_allocated_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.crypto.ProofOp.type)
}

// bytes key = 2 [json_name = "key"];
inline void ProofOp::clear_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& ProofOp::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.crypto.ProofOp.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProofOp::set_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.crypto.ProofOp.key)
}
inline std::string* ProofOp::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:tendermint.crypto.ProofOp.key)
  return _s;
}
inline const std::string& ProofOp::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_.Get();
}
inline void ProofOp::_internal_set_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(value, GetArena());
}
inline std::string* ProofOp::_internal_mutable_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* ProofOp::release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.crypto.ProofOp.key)
  return _impl_.key_.Release();
}
inline void ProofOp::set_allocated_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.crypto.ProofOp.key)
}

// bytes data = 3 [json_name = "data"];
inline void ProofOp::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ProofOp::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.crypto.ProofOp.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProofOp::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.crypto.ProofOp.data)
}
inline std::string* ProofOp::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:tendermint.crypto.ProofOp.data)
  return _s;
}
inline const std::string& ProofOp::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void ProofOp::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* ProofOp::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* ProofOp::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.crypto.ProofOp.data)
  return _impl_.data_.Release();
}
inline void ProofOp::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.crypto.ProofOp.data)
}

// -------------------------------------------------------------------

// ProofOps

// repeated .tendermint.crypto.ProofOp ops = 1 [json_name = "ops", (.gogoproto.nullable) = false];
inline int ProofOps::_internal_ops_size() const {
  return _internal_ops().size();
}
inline int ProofOps::ops_size() const {
  return _internal_ops_size();
}
inline void ProofOps::clear_ops() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ops_.Clear();
}
inline ::tendermint::crypto::ProofOp* ProofOps::mutable_ops(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tendermint.crypto.ProofOps.ops)
  return _internal_mutable_ops()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::crypto::ProofOp>* ProofOps::mutable_ops()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tendermint.crypto.ProofOps.ops)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_ops();
}
inline const ::tendermint::crypto::ProofOp& ProofOps::ops(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.crypto.ProofOps.ops)
  return _internal_ops().Get(index);
}
inline ::tendermint::crypto::ProofOp* ProofOps::add_ops() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tendermint::crypto::ProofOp* _add = _internal_mutable_ops()->Add();
  // @@protoc_insertion_point(field_add:tendermint.crypto.ProofOps.ops)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::crypto::ProofOp>& ProofOps::ops() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tendermint.crypto.ProofOps.ops)
  return _internal_ops();
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::crypto::ProofOp>&
ProofOps::_internal_ops() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ops_;
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::crypto::ProofOp>*
ProofOps::_internal_mutable_ops() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.ops_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace crypto
}  // namespace tendermint


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // tendermint_2fcrypto_2fproof_2eproto_2epb_2eh
