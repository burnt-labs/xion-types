// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tendermint/crypto/keys.proto
// Protobuf C++ Version: 5.29.4

#include "tendermint/crypto/keys.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace tendermint {
namespace crypto {

inline constexpr PublicKey::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : sum_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR PublicKey::PublicKey(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublicKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublicKeyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublicKeyDefaultTypeInternal() {}
  union {
    PublicKey _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublicKeyDefaultTypeInternal _PublicKey_default_instance_;
}  // namespace crypto
}  // namespace tendermint
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_tendermint_2fcrypto_2fkeys_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tendermint_2fcrypto_2fkeys_2eproto = nullptr;
const ::uint32_t
    TableStruct_tendermint_2fcrypto_2fkeys_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tendermint::crypto::PublicKey, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::tendermint::crypto::PublicKey, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::tendermint::crypto::PublicKey, _impl_.sum_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::tendermint::crypto::PublicKey)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::tendermint::crypto::_PublicKey_default_instance_._instance,
};
const char descriptor_table_protodef_tendermint_2fcrypto_2fkeys_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\034tendermint/crypto/keys.proto\022\021tendermi"
    "nt.crypto\032\024gogoproto/gogo.proto\"X\n\tPubli"
    "cKey\022\032\n\007ed25519\030\001 \001(\014H\000R\007ed25519\022\036\n\tsecp"
    "256k1\030\002 \001(\014H\000R\tsecp256k1:\010\350\240\037\001\350\241\037\001B\005\n\003su"
    "mB6Z4github.com/cometbft/cometbft/proto/"
    "tendermint/cryptob\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_tendermint_2fcrypto_2fkeys_2eproto_deps[1] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_tendermint_2fcrypto_2fkeys_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_tendermint_2fcrypto_2fkeys_2eproto = {
    false,
    false,
    225,
    descriptor_table_protodef_tendermint_2fcrypto_2fkeys_2eproto,
    "tendermint/crypto/keys.proto",
    &descriptor_table_tendermint_2fcrypto_2fkeys_2eproto_once,
    descriptor_table_tendermint_2fcrypto_2fkeys_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_tendermint_2fcrypto_2fkeys_2eproto::offsets,
    file_level_enum_descriptors_tendermint_2fcrypto_2fkeys_2eproto,
    file_level_service_descriptors_tendermint_2fcrypto_2fkeys_2eproto,
};
namespace tendermint {
namespace crypto {
// ===================================================================

class PublicKey::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::tendermint::crypto::PublicKey, _impl_._oneof_case_);
};

PublicKey::PublicKey(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.crypto.PublicKey)
}
inline PROTOBUF_NDEBUG_INLINE PublicKey::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tendermint::crypto::PublicKey& from_msg)
      : sum_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

PublicKey::PublicKey(
    ::google::protobuf::Arena* arena,
    const PublicKey& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublicKey* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (sum_case()) {
    case SUM_NOT_SET:
      break;
      case kEd25519:
        new (&_impl_.sum_.ed25519_) decltype(_impl_.sum_.ed25519_){arena, from._impl_.sum_.ed25519_};
        break;
      case kSecp256K1:
        new (&_impl_.sum_.secp256k1_) decltype(_impl_.sum_.secp256k1_){arena, from._impl_.sum_.secp256k1_};
        break;
  }

  // @@protoc_insertion_point(copy_constructor:tendermint.crypto.PublicKey)
}
inline PROTOBUF_NDEBUG_INLINE PublicKey::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : sum_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void PublicKey::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
PublicKey::~PublicKey() {
  // @@protoc_insertion_point(destructor:tendermint.crypto.PublicKey)
  SharedDtor(*this);
}
inline void PublicKey::SharedDtor(MessageLite& self) {
  PublicKey& this_ = static_cast<PublicKey&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_sum()) {
    this_.clear_sum();
  }
  this_._impl_.~Impl_();
}

void PublicKey::clear_sum() {
// @@protoc_insertion_point(one_of_clear_start:tendermint.crypto.PublicKey)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (sum_case()) {
    case kEd25519: {
      _impl_.sum_.ed25519_.Destroy();
      break;
    }
    case kSecp256K1: {
      _impl_.sum_.secp256k1_.Destroy();
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SUM_NOT_SET;
}


inline void* PublicKey::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublicKey(arena);
}
constexpr auto PublicKey::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublicKey),
                                            alignof(PublicKey));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublicKey::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublicKey_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublicKey::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublicKey>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublicKey::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublicKey>(), &PublicKey::ByteSizeLong,
            &PublicKey::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublicKey, _impl_._cached_size_),
        false,
    },
    &PublicKey::kDescriptorMethods,
    &descriptor_table_tendermint_2fcrypto_2fkeys_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublicKey::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 0, 0, 2> PublicKey::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tendermint::crypto::PublicKey>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes ed25519 = 1 [json_name = "ed25519"];
    {PROTOBUF_FIELD_OFFSET(PublicKey, _impl_.sum_.ed25519_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes secp256k1 = 2 [json_name = "secp256k1"];
    {PROTOBUF_FIELD_OFFSET(PublicKey, _impl_.sum_.secp256k1_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void PublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.crypto.PublicKey)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_sum();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublicKey::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublicKey& this_ = static_cast<const PublicKey&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublicKey::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublicKey& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tendermint.crypto.PublicKey)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.sum_case()) {
            case kEd25519: {
              const std::string& _s = this_._internal_ed25519();
              target = stream->WriteBytesMaybeAliased(1, _s, target);
              break;
            }
            case kSecp256K1: {
              const std::string& _s = this_._internal_secp256k1();
              target = stream->WriteBytesMaybeAliased(2, _s, target);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tendermint.crypto.PublicKey)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublicKey::ByteSizeLong(const MessageLite& base) {
          const PublicKey& this_ = static_cast<const PublicKey&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublicKey::ByteSizeLong() const {
          const PublicKey& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tendermint.crypto.PublicKey)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.sum_case()) {
            // bytes ed25519 = 1 [json_name = "ed25519"];
            case kEd25519: {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_ed25519());
              break;
            }
            // bytes secp256k1 = 2 [json_name = "secp256k1"];
            case kSecp256K1: {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_secp256k1());
              break;
            }
            case SUM_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublicKey::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublicKey*>(&to_msg);
  auto& from = static_cast<const PublicKey&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.crypto.PublicKey)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_sum();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kEd25519: {
        if (oneof_needs_init) {
          _this->_impl_.sum_.ed25519_.InitDefault();
        }
        _this->_impl_.sum_.ed25519_.Set(from._internal_ed25519(), arena);
        break;
      }
      case kSecp256K1: {
        if (oneof_needs_init) {
          _this->_impl_.sum_.secp256k1_.InitDefault();
        }
        _this->_impl_.sum_.secp256k1_.Set(from._internal_secp256k1(), arena);
        break;
      }
      case SUM_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublicKey::CopyFrom(const PublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.crypto.PublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublicKey::InternalSwap(PublicKey* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.sum_, other->_impl_.sum_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata PublicKey::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace crypto
}  // namespace tendermint
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_tendermint_2fcrypto_2fkeys_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
