// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tendermint/crypto/keys.proto
// Protobuf C++ Version: 5.29.4

#ifndef tendermint_2fcrypto_2fkeys_2eproto_2epb_2eh
#define tendermint_2fcrypto_2fkeys_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tendermint_2fcrypto_2fkeys_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_tendermint_2fcrypto_2fkeys_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tendermint_2fcrypto_2fkeys_2eproto;
namespace tendermint {
namespace crypto {
class PublicKey;
struct PublicKeyDefaultTypeInternal;
extern PublicKeyDefaultTypeInternal _PublicKey_default_instance_;
}  // namespace crypto
}  // namespace tendermint
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tendermint {
namespace crypto {

// ===================================================================


// -------------------------------------------------------------------

class PublicKey final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.crypto.PublicKey) */ {
 public:
  inline PublicKey() : PublicKey(nullptr) {}
  ~PublicKey() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublicKey* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublicKey));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublicKey(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublicKey(const PublicKey& from) : PublicKey(nullptr, from) {}
  inline PublicKey(PublicKey&& from) noexcept
      : PublicKey(nullptr, std::move(from)) {}
  inline PublicKey& operator=(const PublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublicKey& operator=(PublicKey&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublicKey& default_instance() {
    return *internal_default_instance();
  }
  enum SumCase {
    kEd25519 = 1,
    kSecp256K1 = 2,
    SUM_NOT_SET = 0,
  };
  static inline const PublicKey* internal_default_instance() {
    return reinterpret_cast<const PublicKey*>(
        &_PublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(PublicKey& a, PublicKey& b) { a.Swap(&b); }
  inline void Swap(PublicKey* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublicKey* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublicKey* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublicKey>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublicKey& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublicKey& from) { PublicKey::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublicKey* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.crypto.PublicKey"; }

 protected:
  explicit PublicKey(::google::protobuf::Arena* arena);
  PublicKey(::google::protobuf::Arena* arena, const PublicKey& from);
  PublicKey(::google::protobuf::Arena* arena, PublicKey&& from) noexcept
      : PublicKey(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEd25519FieldNumber = 1,
    kSecp256K1FieldNumber = 2,
  };
  // bytes ed25519 = 1 [json_name = "ed25519"];
  bool has_ed25519() const;
  void clear_ed25519() ;
  const std::string& ed25519() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ed25519(Arg_&& arg, Args_... args);
  std::string* mutable_ed25519();
  PROTOBUF_NODISCARD std::string* release_ed25519();
  void set_allocated_ed25519(std::string* value);

  private:
  const std::string& _internal_ed25519() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ed25519(
      const std::string& value);
  std::string* _internal_mutable_ed25519();

  public:
  // bytes secp256k1 = 2 [json_name = "secp256k1"];
  bool has_secp256k1() const;
  void clear_secp256k1() ;
  const std::string& secp256k1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_secp256k1(Arg_&& arg, Args_... args);
  std::string* mutable_secp256k1();
  PROTOBUF_NODISCARD std::string* release_secp256k1();
  void set_allocated_secp256k1(std::string* value);

  private:
  const std::string& _internal_secp256k1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secp256k1(
      const std::string& value);
  std::string* _internal_mutable_secp256k1();

  public:
  void clear_sum();
  SumCase sum_case() const;
  // @@protoc_insertion_point(class_scope:tendermint.crypto.PublicKey)
 private:
  class _Internal;
  void set_has_ed25519();
  void set_has_secp256k1();
  inline bool has_sum() const;
  inline void clear_has_sum();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublicKey& from_msg);
    union SumUnion {
      constexpr SumUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr ed25519_;
      ::google::protobuf::internal::ArenaStringPtr secp256k1_;
    } sum_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fcrypto_2fkeys_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PublicKey

// bytes ed25519 = 1 [json_name = "ed25519"];
inline bool PublicKey::has_ed25519() const {
  return sum_case() == kEd25519;
}
inline void PublicKey::set_has_ed25519() {
  _impl_._oneof_case_[0] = kEd25519;
}
inline void PublicKey::clear_ed25519() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (sum_case() == kEd25519) {
    _impl_.sum_.ed25519_.Destroy();
    clear_has_sum();
  }
}
inline const std::string& PublicKey::ed25519() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.crypto.PublicKey.ed25519)
  return _internal_ed25519();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PublicKey::set_ed25519(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (sum_case() != kEd25519) {
    clear_sum();

    set_has_ed25519();
    _impl_.sum_.ed25519_.InitDefault();
  }
  _impl_.sum_.ed25519_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.crypto.PublicKey.ed25519)
}
inline std::string* PublicKey::mutable_ed25519() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ed25519();
  // @@protoc_insertion_point(field_mutable:tendermint.crypto.PublicKey.ed25519)
  return _s;
}
inline const std::string& PublicKey::_internal_ed25519() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (sum_case() != kEd25519) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.sum_.ed25519_.Get();
}
inline void PublicKey::_internal_set_ed25519(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (sum_case() != kEd25519) {
    clear_sum();

    set_has_ed25519();
    _impl_.sum_.ed25519_.InitDefault();
  }
  _impl_.sum_.ed25519_.Set(value, GetArena());
}
inline std::string* PublicKey::_internal_mutable_ed25519() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (sum_case() != kEd25519) {
    clear_sum();

    set_has_ed25519();
    _impl_.sum_.ed25519_.InitDefault();
  }
  return _impl_.sum_.ed25519_.Mutable( GetArena());
}
inline std::string* PublicKey::release_ed25519() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.crypto.PublicKey.ed25519)
  if (sum_case() != kEd25519) {
    return nullptr;
  }
  clear_has_sum();
  return _impl_.sum_.ed25519_.Release();
}
inline void PublicKey::set_allocated_ed25519(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_sum()) {
    clear_sum();
  }
  if (value != nullptr) {
    set_has_ed25519();
    _impl_.sum_.ed25519_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.crypto.PublicKey.ed25519)
}

// bytes secp256k1 = 2 [json_name = "secp256k1"];
inline bool PublicKey::has_secp256k1() const {
  return sum_case() == kSecp256K1;
}
inline void PublicKey::set_has_secp256k1() {
  _impl_._oneof_case_[0] = kSecp256K1;
}
inline void PublicKey::clear_secp256k1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (sum_case() == kSecp256K1) {
    _impl_.sum_.secp256k1_.Destroy();
    clear_has_sum();
  }
}
inline const std::string& PublicKey::secp256k1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.crypto.PublicKey.secp256k1)
  return _internal_secp256k1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PublicKey::set_secp256k1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (sum_case() != kSecp256K1) {
    clear_sum();

    set_has_secp256k1();
    _impl_.sum_.secp256k1_.InitDefault();
  }
  _impl_.sum_.secp256k1_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.crypto.PublicKey.secp256k1)
}
inline std::string* PublicKey::mutable_secp256k1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_secp256k1();
  // @@protoc_insertion_point(field_mutable:tendermint.crypto.PublicKey.secp256k1)
  return _s;
}
inline const std::string& PublicKey::_internal_secp256k1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (sum_case() != kSecp256K1) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.sum_.secp256k1_.Get();
}
inline void PublicKey::_internal_set_secp256k1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (sum_case() != kSecp256K1) {
    clear_sum();

    set_has_secp256k1();
    _impl_.sum_.secp256k1_.InitDefault();
  }
  _impl_.sum_.secp256k1_.Set(value, GetArena());
}
inline std::string* PublicKey::_internal_mutable_secp256k1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (sum_case() != kSecp256K1) {
    clear_sum();

    set_has_secp256k1();
    _impl_.sum_.secp256k1_.InitDefault();
  }
  return _impl_.sum_.secp256k1_.Mutable( GetArena());
}
inline std::string* PublicKey::release_secp256k1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.crypto.PublicKey.secp256k1)
  if (sum_case() != kSecp256K1) {
    return nullptr;
  }
  clear_has_sum();
  return _impl_.sum_.secp256k1_.Release();
}
inline void PublicKey::set_allocated_secp256k1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_sum()) {
    clear_sum();
  }
  if (value != nullptr) {
    set_has_secp256k1();
    _impl_.sum_.secp256k1_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.crypto.PublicKey.secp256k1)
}

inline bool PublicKey::has_sum() const {
  return sum_case() != SUM_NOT_SET;
}
inline void PublicKey::clear_has_sum() {
  _impl_._oneof_case_[0] = SUM_NOT_SET;
}
inline PublicKey::SumCase PublicKey::sum_case() const {
  return PublicKey::SumCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace crypto
}  // namespace tendermint


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // tendermint_2fcrypto_2fkeys_2eproto_2epb_2eh
