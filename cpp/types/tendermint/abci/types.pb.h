// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tendermint/abci/types.proto
// Protobuf C++ Version: 5.29.4

#ifndef tendermint_2fabci_2ftypes_2eproto_2epb_2eh
#define tendermint_2fabci_2ftypes_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "tendermint/crypto/proof.pb.h"
#include "tendermint/crypto/keys.pb.h"
#include "tendermint/types/params.pb.h"
#include "tendermint/types/validator.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tendermint_2fabci_2ftypes_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_tendermint_2fabci_2ftypes_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tendermint_2fabci_2ftypes_2eproto;
namespace tendermint {
namespace abci {
class CommitInfo;
struct CommitInfoDefaultTypeInternal;
extern CommitInfoDefaultTypeInternal _CommitInfo_default_instance_;
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class EventAttribute;
struct EventAttributeDefaultTypeInternal;
extern EventAttributeDefaultTypeInternal _EventAttribute_default_instance_;
class ExecTxResult;
struct ExecTxResultDefaultTypeInternal;
extern ExecTxResultDefaultTypeInternal _ExecTxResult_default_instance_;
class ExtendedCommitInfo;
struct ExtendedCommitInfoDefaultTypeInternal;
extern ExtendedCommitInfoDefaultTypeInternal _ExtendedCommitInfo_default_instance_;
class ExtendedVoteInfo;
struct ExtendedVoteInfoDefaultTypeInternal;
extern ExtendedVoteInfoDefaultTypeInternal _ExtendedVoteInfo_default_instance_;
class Misbehavior;
struct MisbehaviorDefaultTypeInternal;
extern MisbehaviorDefaultTypeInternal _Misbehavior_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class RequestApplySnapshotChunk;
struct RequestApplySnapshotChunkDefaultTypeInternal;
extern RequestApplySnapshotChunkDefaultTypeInternal _RequestApplySnapshotChunk_default_instance_;
class RequestCheckTx;
struct RequestCheckTxDefaultTypeInternal;
extern RequestCheckTxDefaultTypeInternal _RequestCheckTx_default_instance_;
class RequestCommit;
struct RequestCommitDefaultTypeInternal;
extern RequestCommitDefaultTypeInternal _RequestCommit_default_instance_;
class RequestEcho;
struct RequestEchoDefaultTypeInternal;
extern RequestEchoDefaultTypeInternal _RequestEcho_default_instance_;
class RequestExtendVote;
struct RequestExtendVoteDefaultTypeInternal;
extern RequestExtendVoteDefaultTypeInternal _RequestExtendVote_default_instance_;
class RequestFinalizeBlock;
struct RequestFinalizeBlockDefaultTypeInternal;
extern RequestFinalizeBlockDefaultTypeInternal _RequestFinalizeBlock_default_instance_;
class RequestFlush;
struct RequestFlushDefaultTypeInternal;
extern RequestFlushDefaultTypeInternal _RequestFlush_default_instance_;
class RequestInfo;
struct RequestInfoDefaultTypeInternal;
extern RequestInfoDefaultTypeInternal _RequestInfo_default_instance_;
class RequestInitChain;
struct RequestInitChainDefaultTypeInternal;
extern RequestInitChainDefaultTypeInternal _RequestInitChain_default_instance_;
class RequestListSnapshots;
struct RequestListSnapshotsDefaultTypeInternal;
extern RequestListSnapshotsDefaultTypeInternal _RequestListSnapshots_default_instance_;
class RequestLoadSnapshotChunk;
struct RequestLoadSnapshotChunkDefaultTypeInternal;
extern RequestLoadSnapshotChunkDefaultTypeInternal _RequestLoadSnapshotChunk_default_instance_;
class RequestOfferSnapshot;
struct RequestOfferSnapshotDefaultTypeInternal;
extern RequestOfferSnapshotDefaultTypeInternal _RequestOfferSnapshot_default_instance_;
class RequestPrepareProposal;
struct RequestPrepareProposalDefaultTypeInternal;
extern RequestPrepareProposalDefaultTypeInternal _RequestPrepareProposal_default_instance_;
class RequestProcessProposal;
struct RequestProcessProposalDefaultTypeInternal;
extern RequestProcessProposalDefaultTypeInternal _RequestProcessProposal_default_instance_;
class RequestQuery;
struct RequestQueryDefaultTypeInternal;
extern RequestQueryDefaultTypeInternal _RequestQuery_default_instance_;
class RequestVerifyVoteExtension;
struct RequestVerifyVoteExtensionDefaultTypeInternal;
extern RequestVerifyVoteExtensionDefaultTypeInternal _RequestVerifyVoteExtension_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class ResponseApplySnapshotChunk;
struct ResponseApplySnapshotChunkDefaultTypeInternal;
extern ResponseApplySnapshotChunkDefaultTypeInternal _ResponseApplySnapshotChunk_default_instance_;
class ResponseCheckTx;
struct ResponseCheckTxDefaultTypeInternal;
extern ResponseCheckTxDefaultTypeInternal _ResponseCheckTx_default_instance_;
class ResponseCommit;
struct ResponseCommitDefaultTypeInternal;
extern ResponseCommitDefaultTypeInternal _ResponseCommit_default_instance_;
class ResponseEcho;
struct ResponseEchoDefaultTypeInternal;
extern ResponseEchoDefaultTypeInternal _ResponseEcho_default_instance_;
class ResponseException;
struct ResponseExceptionDefaultTypeInternal;
extern ResponseExceptionDefaultTypeInternal _ResponseException_default_instance_;
class ResponseExtendVote;
struct ResponseExtendVoteDefaultTypeInternal;
extern ResponseExtendVoteDefaultTypeInternal _ResponseExtendVote_default_instance_;
class ResponseFinalizeBlock;
struct ResponseFinalizeBlockDefaultTypeInternal;
extern ResponseFinalizeBlockDefaultTypeInternal _ResponseFinalizeBlock_default_instance_;
class ResponseFlush;
struct ResponseFlushDefaultTypeInternal;
extern ResponseFlushDefaultTypeInternal _ResponseFlush_default_instance_;
class ResponseInfo;
struct ResponseInfoDefaultTypeInternal;
extern ResponseInfoDefaultTypeInternal _ResponseInfo_default_instance_;
class ResponseInitChain;
struct ResponseInitChainDefaultTypeInternal;
extern ResponseInitChainDefaultTypeInternal _ResponseInitChain_default_instance_;
class ResponseListSnapshots;
struct ResponseListSnapshotsDefaultTypeInternal;
extern ResponseListSnapshotsDefaultTypeInternal _ResponseListSnapshots_default_instance_;
class ResponseLoadSnapshotChunk;
struct ResponseLoadSnapshotChunkDefaultTypeInternal;
extern ResponseLoadSnapshotChunkDefaultTypeInternal _ResponseLoadSnapshotChunk_default_instance_;
class ResponseOfferSnapshot;
struct ResponseOfferSnapshotDefaultTypeInternal;
extern ResponseOfferSnapshotDefaultTypeInternal _ResponseOfferSnapshot_default_instance_;
class ResponsePrepareProposal;
struct ResponsePrepareProposalDefaultTypeInternal;
extern ResponsePrepareProposalDefaultTypeInternal _ResponsePrepareProposal_default_instance_;
class ResponseProcessProposal;
struct ResponseProcessProposalDefaultTypeInternal;
extern ResponseProcessProposalDefaultTypeInternal _ResponseProcessProposal_default_instance_;
class ResponseQuery;
struct ResponseQueryDefaultTypeInternal;
extern ResponseQueryDefaultTypeInternal _ResponseQuery_default_instance_;
class ResponseVerifyVoteExtension;
struct ResponseVerifyVoteExtensionDefaultTypeInternal;
extern ResponseVerifyVoteExtensionDefaultTypeInternal _ResponseVerifyVoteExtension_default_instance_;
class Snapshot;
struct SnapshotDefaultTypeInternal;
extern SnapshotDefaultTypeInternal _Snapshot_default_instance_;
class TxResult;
struct TxResultDefaultTypeInternal;
extern TxResultDefaultTypeInternal _TxResult_default_instance_;
class Validator;
struct ValidatorDefaultTypeInternal;
extern ValidatorDefaultTypeInternal _Validator_default_instance_;
class ValidatorUpdate;
struct ValidatorUpdateDefaultTypeInternal;
extern ValidatorUpdateDefaultTypeInternal _ValidatorUpdate_default_instance_;
class VoteInfo;
struct VoteInfoDefaultTypeInternal;
extern VoteInfoDefaultTypeInternal _VoteInfo_default_instance_;
}  // namespace abci
}  // namespace tendermint
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tendermint {
namespace abci {
enum ResponseOfferSnapshot_Result : int {
  ResponseOfferSnapshot_Result_UNKNOWN = 0,
  ResponseOfferSnapshot_Result_ACCEPT = 1,
  ResponseOfferSnapshot_Result_ABORT = 2,
  ResponseOfferSnapshot_Result_REJECT = 3,
  ResponseOfferSnapshot_Result_REJECT_FORMAT = 4,
  ResponseOfferSnapshot_Result_REJECT_SENDER = 5,
  ResponseOfferSnapshot_Result_ResponseOfferSnapshot_Result_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ResponseOfferSnapshot_Result_ResponseOfferSnapshot_Result_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ResponseOfferSnapshot_Result_IsValid(int value);
extern const uint32_t ResponseOfferSnapshot_Result_internal_data_[];
constexpr ResponseOfferSnapshot_Result ResponseOfferSnapshot_Result_Result_MIN = static_cast<ResponseOfferSnapshot_Result>(0);
constexpr ResponseOfferSnapshot_Result ResponseOfferSnapshot_Result_Result_MAX = static_cast<ResponseOfferSnapshot_Result>(5);
constexpr int ResponseOfferSnapshot_Result_Result_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
ResponseOfferSnapshot_Result_descriptor();
template <typename T>
const std::string& ResponseOfferSnapshot_Result_Name(T value) {
  static_assert(std::is_same<T, ResponseOfferSnapshot_Result>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Result_Name().");
  return ResponseOfferSnapshot_Result_Name(static_cast<ResponseOfferSnapshot_Result>(value));
}
template <>
inline const std::string& ResponseOfferSnapshot_Result_Name(ResponseOfferSnapshot_Result value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ResponseOfferSnapshot_Result_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool ResponseOfferSnapshot_Result_Parse(absl::string_view name, ResponseOfferSnapshot_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseOfferSnapshot_Result>(
      ResponseOfferSnapshot_Result_descriptor(), name, value);
}
enum ResponseApplySnapshotChunk_Result : int {
  ResponseApplySnapshotChunk_Result_UNKNOWN = 0,
  ResponseApplySnapshotChunk_Result_ACCEPT = 1,
  ResponseApplySnapshotChunk_Result_ABORT = 2,
  ResponseApplySnapshotChunk_Result_RETRY = 3,
  ResponseApplySnapshotChunk_Result_RETRY_SNAPSHOT = 4,
  ResponseApplySnapshotChunk_Result_REJECT_SNAPSHOT = 5,
  ResponseApplySnapshotChunk_Result_ResponseApplySnapshotChunk_Result_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ResponseApplySnapshotChunk_Result_ResponseApplySnapshotChunk_Result_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ResponseApplySnapshotChunk_Result_IsValid(int value);
extern const uint32_t ResponseApplySnapshotChunk_Result_internal_data_[];
constexpr ResponseApplySnapshotChunk_Result ResponseApplySnapshotChunk_Result_Result_MIN = static_cast<ResponseApplySnapshotChunk_Result>(0);
constexpr ResponseApplySnapshotChunk_Result ResponseApplySnapshotChunk_Result_Result_MAX = static_cast<ResponseApplySnapshotChunk_Result>(5);
constexpr int ResponseApplySnapshotChunk_Result_Result_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
ResponseApplySnapshotChunk_Result_descriptor();
template <typename T>
const std::string& ResponseApplySnapshotChunk_Result_Name(T value) {
  static_assert(std::is_same<T, ResponseApplySnapshotChunk_Result>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Result_Name().");
  return ResponseApplySnapshotChunk_Result_Name(static_cast<ResponseApplySnapshotChunk_Result>(value));
}
template <>
inline const std::string& ResponseApplySnapshotChunk_Result_Name(ResponseApplySnapshotChunk_Result value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ResponseApplySnapshotChunk_Result_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool ResponseApplySnapshotChunk_Result_Parse(absl::string_view name, ResponseApplySnapshotChunk_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseApplySnapshotChunk_Result>(
      ResponseApplySnapshotChunk_Result_descriptor(), name, value);
}
enum ResponseProcessProposal_ProposalStatus : int {
  ResponseProcessProposal_ProposalStatus_UNKNOWN = 0,
  ResponseProcessProposal_ProposalStatus_ACCEPT = 1,
  ResponseProcessProposal_ProposalStatus_REJECT = 2,
  ResponseProcessProposal_ProposalStatus_ResponseProcessProposal_ProposalStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ResponseProcessProposal_ProposalStatus_ResponseProcessProposal_ProposalStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ResponseProcessProposal_ProposalStatus_IsValid(int value);
extern const uint32_t ResponseProcessProposal_ProposalStatus_internal_data_[];
constexpr ResponseProcessProposal_ProposalStatus ResponseProcessProposal_ProposalStatus_ProposalStatus_MIN = static_cast<ResponseProcessProposal_ProposalStatus>(0);
constexpr ResponseProcessProposal_ProposalStatus ResponseProcessProposal_ProposalStatus_ProposalStatus_MAX = static_cast<ResponseProcessProposal_ProposalStatus>(2);
constexpr int ResponseProcessProposal_ProposalStatus_ProposalStatus_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
ResponseProcessProposal_ProposalStatus_descriptor();
template <typename T>
const std::string& ResponseProcessProposal_ProposalStatus_Name(T value) {
  static_assert(std::is_same<T, ResponseProcessProposal_ProposalStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ProposalStatus_Name().");
  return ResponseProcessProposal_ProposalStatus_Name(static_cast<ResponseProcessProposal_ProposalStatus>(value));
}
template <>
inline const std::string& ResponseProcessProposal_ProposalStatus_Name(ResponseProcessProposal_ProposalStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ResponseProcessProposal_ProposalStatus_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool ResponseProcessProposal_ProposalStatus_Parse(absl::string_view name, ResponseProcessProposal_ProposalStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseProcessProposal_ProposalStatus>(
      ResponseProcessProposal_ProposalStatus_descriptor(), name, value);
}
enum ResponseVerifyVoteExtension_VerifyStatus : int {
  ResponseVerifyVoteExtension_VerifyStatus_UNKNOWN = 0,
  ResponseVerifyVoteExtension_VerifyStatus_ACCEPT = 1,
  ResponseVerifyVoteExtension_VerifyStatus_REJECT = 2,
  ResponseVerifyVoteExtension_VerifyStatus_ResponseVerifyVoteExtension_VerifyStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ResponseVerifyVoteExtension_VerifyStatus_ResponseVerifyVoteExtension_VerifyStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ResponseVerifyVoteExtension_VerifyStatus_IsValid(int value);
extern const uint32_t ResponseVerifyVoteExtension_VerifyStatus_internal_data_[];
constexpr ResponseVerifyVoteExtension_VerifyStatus ResponseVerifyVoteExtension_VerifyStatus_VerifyStatus_MIN = static_cast<ResponseVerifyVoteExtension_VerifyStatus>(0);
constexpr ResponseVerifyVoteExtension_VerifyStatus ResponseVerifyVoteExtension_VerifyStatus_VerifyStatus_MAX = static_cast<ResponseVerifyVoteExtension_VerifyStatus>(2);
constexpr int ResponseVerifyVoteExtension_VerifyStatus_VerifyStatus_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
ResponseVerifyVoteExtension_VerifyStatus_descriptor();
template <typename T>
const std::string& ResponseVerifyVoteExtension_VerifyStatus_Name(T value) {
  static_assert(std::is_same<T, ResponseVerifyVoteExtension_VerifyStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to VerifyStatus_Name().");
  return ResponseVerifyVoteExtension_VerifyStatus_Name(static_cast<ResponseVerifyVoteExtension_VerifyStatus>(value));
}
template <>
inline const std::string& ResponseVerifyVoteExtension_VerifyStatus_Name(ResponseVerifyVoteExtension_VerifyStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ResponseVerifyVoteExtension_VerifyStatus_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool ResponseVerifyVoteExtension_VerifyStatus_Parse(absl::string_view name, ResponseVerifyVoteExtension_VerifyStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseVerifyVoteExtension_VerifyStatus>(
      ResponseVerifyVoteExtension_VerifyStatus_descriptor(), name, value);
}
enum CheckTxType : int {
  NEW = 0,
  RECHECK = 1,
  CheckTxType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CheckTxType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CheckTxType_IsValid(int value);
extern const uint32_t CheckTxType_internal_data_[];
constexpr CheckTxType CheckTxType_MIN = static_cast<CheckTxType>(0);
constexpr CheckTxType CheckTxType_MAX = static_cast<CheckTxType>(1);
constexpr int CheckTxType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
CheckTxType_descriptor();
template <typename T>
const std::string& CheckTxType_Name(T value) {
  static_assert(std::is_same<T, CheckTxType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CheckTxType_Name().");
  return CheckTxType_Name(static_cast<CheckTxType>(value));
}
template <>
inline const std::string& CheckTxType_Name(CheckTxType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CheckTxType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool CheckTxType_Parse(absl::string_view name, CheckTxType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CheckTxType>(
      CheckTxType_descriptor(), name, value);
}
enum MisbehaviorType : int {
  UNKNOWN = 0,
  DUPLICATE_VOTE = 1,
  LIGHT_CLIENT_ATTACK = 2,
  MisbehaviorType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MisbehaviorType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MisbehaviorType_IsValid(int value);
extern const uint32_t MisbehaviorType_internal_data_[];
constexpr MisbehaviorType MisbehaviorType_MIN = static_cast<MisbehaviorType>(0);
constexpr MisbehaviorType MisbehaviorType_MAX = static_cast<MisbehaviorType>(2);
constexpr int MisbehaviorType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
MisbehaviorType_descriptor();
template <typename T>
const std::string& MisbehaviorType_Name(T value) {
  static_assert(std::is_same<T, MisbehaviorType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MisbehaviorType_Name().");
  return MisbehaviorType_Name(static_cast<MisbehaviorType>(value));
}
template <>
inline const std::string& MisbehaviorType_Name(MisbehaviorType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MisbehaviorType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool MisbehaviorType_Parse(absl::string_view name, MisbehaviorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MisbehaviorType>(
      MisbehaviorType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Validator final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.Validator) */ {
 public:
  inline Validator() : Validator(nullptr) {}
  ~Validator() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Validator* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Validator));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Validator(
      ::google::protobuf::internal::ConstantInitialized);

  inline Validator(const Validator& from) : Validator(nullptr, from) {}
  inline Validator(Validator&& from) noexcept
      : Validator(nullptr, std::move(from)) {}
  inline Validator& operator=(const Validator& from) {
    CopyFrom(from);
    return *this;
  }
  inline Validator& operator=(Validator&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Validator& default_instance() {
    return *internal_default_instance();
  }
  static inline const Validator* internal_default_instance() {
    return reinterpret_cast<const Validator*>(
        &_Validator_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 41;
  friend void swap(Validator& a, Validator& b) { a.Swap(&b); }
  inline void Swap(Validator* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Validator* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Validator* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Validator>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Validator& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Validator& from) { Validator::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Validator* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.Validator"; }

 protected:
  explicit Validator(::google::protobuf::Arena* arena);
  Validator(::google::protobuf::Arena* arena, const Validator& from);
  Validator(::google::protobuf::Arena* arena, Validator&& from) noexcept
      : Validator(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAddressFieldNumber = 1,
    kPowerFieldNumber = 3,
  };
  // bytes address = 1 [json_name = "address"];
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* value);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // int64 power = 3 [json_name = "power"];
  void clear_power() ;
  ::int64_t power() const;
  void set_power(::int64_t value);

  private:
  ::int64_t _internal_power() const;
  void _internal_set_power(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.Validator)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Validator& from_msg);
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::int64_t power_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Snapshot final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.Snapshot) */ {
 public:
  inline Snapshot() : Snapshot(nullptr) {}
  ~Snapshot() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Snapshot* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Snapshot));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Snapshot(
      ::google::protobuf::internal::ConstantInitialized);

  inline Snapshot(const Snapshot& from) : Snapshot(nullptr, from) {}
  inline Snapshot(Snapshot&& from) noexcept
      : Snapshot(nullptr, std::move(from)) {}
  inline Snapshot& operator=(const Snapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snapshot& operator=(Snapshot&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Snapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const Snapshot* internal_default_instance() {
    return reinterpret_cast<const Snapshot*>(
        &_Snapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 46;
  friend void swap(Snapshot& a, Snapshot& b) { a.Swap(&b); }
  inline void Swap(Snapshot* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Snapshot* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Snapshot* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Snapshot>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Snapshot& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Snapshot& from) { Snapshot::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Snapshot* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.Snapshot"; }

 protected:
  explicit Snapshot(::google::protobuf::Arena* arena);
  Snapshot(::google::protobuf::Arena* arena, const Snapshot& from);
  Snapshot(::google::protobuf::Arena* arena, Snapshot&& from) noexcept
      : Snapshot(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHashFieldNumber = 4,
    kMetadataFieldNumber = 5,
    kHeightFieldNumber = 1,
    kFormatFieldNumber = 2,
    kChunksFieldNumber = 3,
  };
  // bytes hash = 4 [json_name = "hash"];
  void clear_hash() ;
  const std::string& hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hash(Arg_&& arg, Args_... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* value);

  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(
      const std::string& value);
  std::string* _internal_mutable_hash();

  public:
  // bytes metadata = 5 [json_name = "metadata"];
  void clear_metadata() ;
  const std::string& metadata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* value);

  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(
      const std::string& value);
  std::string* _internal_mutable_metadata();

  public:
  // uint64 height = 1 [json_name = "height"];
  void clear_height() ;
  ::uint64_t height() const;
  void set_height(::uint64_t value);

  private:
  ::uint64_t _internal_height() const;
  void _internal_set_height(::uint64_t value);

  public:
  // uint32 format = 2 [json_name = "format"];
  void clear_format() ;
  ::uint32_t format() const;
  void set_format(::uint32_t value);

  private:
  ::uint32_t _internal_format() const;
  void _internal_set_format(::uint32_t value);

  public:
  // uint32 chunks = 3 [json_name = "chunks"];
  void clear_chunks() ;
  ::uint32_t chunks() const;
  void set_chunks(::uint32_t value);

  private:
  ::uint32_t _internal_chunks() const;
  void _internal_set_chunks(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.Snapshot)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Snapshot& from_msg);
    ::google::protobuf::internal::ArenaStringPtr hash_;
    ::google::protobuf::internal::ArenaStringPtr metadata_;
    ::uint64_t height_;
    ::uint32_t format_;
    ::uint32_t chunks_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ResponseVerifyVoteExtension final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.ResponseVerifyVoteExtension) */ {
 public:
  inline ResponseVerifyVoteExtension() : ResponseVerifyVoteExtension(nullptr) {}
  ~ResponseVerifyVoteExtension() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResponseVerifyVoteExtension* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResponseVerifyVoteExtension));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseVerifyVoteExtension(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResponseVerifyVoteExtension(const ResponseVerifyVoteExtension& from) : ResponseVerifyVoteExtension(nullptr, from) {}
  inline ResponseVerifyVoteExtension(ResponseVerifyVoteExtension&& from) noexcept
      : ResponseVerifyVoteExtension(nullptr, std::move(from)) {}
  inline ResponseVerifyVoteExtension& operator=(const ResponseVerifyVoteExtension& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseVerifyVoteExtension& operator=(ResponseVerifyVoteExtension&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseVerifyVoteExtension& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseVerifyVoteExtension* internal_default_instance() {
    return reinterpret_cast<const ResponseVerifyVoteExtension*>(
        &_ResponseVerifyVoteExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 33;
  friend void swap(ResponseVerifyVoteExtension& a, ResponseVerifyVoteExtension& b) { a.Swap(&b); }
  inline void Swap(ResponseVerifyVoteExtension* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseVerifyVoteExtension* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseVerifyVoteExtension* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResponseVerifyVoteExtension>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResponseVerifyVoteExtension& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResponseVerifyVoteExtension& from) { ResponseVerifyVoteExtension::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResponseVerifyVoteExtension* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.ResponseVerifyVoteExtension"; }

 protected:
  explicit ResponseVerifyVoteExtension(::google::protobuf::Arena* arena);
  ResponseVerifyVoteExtension(::google::protobuf::Arena* arena, const ResponseVerifyVoteExtension& from);
  ResponseVerifyVoteExtension(::google::protobuf::Arena* arena, ResponseVerifyVoteExtension&& from) noexcept
      : ResponseVerifyVoteExtension(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using VerifyStatus = ResponseVerifyVoteExtension_VerifyStatus;
  static constexpr VerifyStatus UNKNOWN = ResponseVerifyVoteExtension_VerifyStatus_UNKNOWN;
  static constexpr VerifyStatus ACCEPT = ResponseVerifyVoteExtension_VerifyStatus_ACCEPT;
  static constexpr VerifyStatus REJECT = ResponseVerifyVoteExtension_VerifyStatus_REJECT;
  static inline bool VerifyStatus_IsValid(int value) {
    return ResponseVerifyVoteExtension_VerifyStatus_IsValid(value);
  }
  static constexpr VerifyStatus VerifyStatus_MIN = ResponseVerifyVoteExtension_VerifyStatus_VerifyStatus_MIN;
  static constexpr VerifyStatus VerifyStatus_MAX = ResponseVerifyVoteExtension_VerifyStatus_VerifyStatus_MAX;
  static constexpr int VerifyStatus_ARRAYSIZE = ResponseVerifyVoteExtension_VerifyStatus_VerifyStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* VerifyStatus_descriptor() {
    return ResponseVerifyVoteExtension_VerifyStatus_descriptor();
  }
  template <typename T>
  static inline const std::string& VerifyStatus_Name(T value) {
    return ResponseVerifyVoteExtension_VerifyStatus_Name(value);
  }
  static inline bool VerifyStatus_Parse(absl::string_view name, VerifyStatus* value) {
    return ResponseVerifyVoteExtension_VerifyStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kStatusFieldNumber = 1,
  };
  // .tendermint.abci.ResponseVerifyVoteExtension.VerifyStatus status = 1 [json_name = "status"];
  void clear_status() ;
  ::tendermint::abci::ResponseVerifyVoteExtension_VerifyStatus status() const;
  void set_status(::tendermint::abci::ResponseVerifyVoteExtension_VerifyStatus value);

  private:
  ::tendermint::abci::ResponseVerifyVoteExtension_VerifyStatus _internal_status() const;
  void _internal_set_status(::tendermint::abci::ResponseVerifyVoteExtension_VerifyStatus value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.ResponseVerifyVoteExtension)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResponseVerifyVoteExtension& from_msg);
    int status_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ResponseProcessProposal final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.ResponseProcessProposal) */ {
 public:
  inline ResponseProcessProposal() : ResponseProcessProposal(nullptr) {}
  ~ResponseProcessProposal() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResponseProcessProposal* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResponseProcessProposal));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseProcessProposal(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResponseProcessProposal(const ResponseProcessProposal& from) : ResponseProcessProposal(nullptr, from) {}
  inline ResponseProcessProposal(ResponseProcessProposal&& from) noexcept
      : ResponseProcessProposal(nullptr, std::move(from)) {}
  inline ResponseProcessProposal& operator=(const ResponseProcessProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseProcessProposal& operator=(ResponseProcessProposal&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseProcessProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseProcessProposal* internal_default_instance() {
    return reinterpret_cast<const ResponseProcessProposal*>(
        &_ResponseProcessProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 31;
  friend void swap(ResponseProcessProposal& a, ResponseProcessProposal& b) { a.Swap(&b); }
  inline void Swap(ResponseProcessProposal* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseProcessProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseProcessProposal* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResponseProcessProposal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResponseProcessProposal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResponseProcessProposal& from) { ResponseProcessProposal::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResponseProcessProposal* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.ResponseProcessProposal"; }

 protected:
  explicit ResponseProcessProposal(::google::protobuf::Arena* arena);
  ResponseProcessProposal(::google::protobuf::Arena* arena, const ResponseProcessProposal& from);
  ResponseProcessProposal(::google::protobuf::Arena* arena, ResponseProcessProposal&& from) noexcept
      : ResponseProcessProposal(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using ProposalStatus = ResponseProcessProposal_ProposalStatus;
  static constexpr ProposalStatus UNKNOWN = ResponseProcessProposal_ProposalStatus_UNKNOWN;
  static constexpr ProposalStatus ACCEPT = ResponseProcessProposal_ProposalStatus_ACCEPT;
  static constexpr ProposalStatus REJECT = ResponseProcessProposal_ProposalStatus_REJECT;
  static inline bool ProposalStatus_IsValid(int value) {
    return ResponseProcessProposal_ProposalStatus_IsValid(value);
  }
  static constexpr ProposalStatus ProposalStatus_MIN = ResponseProcessProposal_ProposalStatus_ProposalStatus_MIN;
  static constexpr ProposalStatus ProposalStatus_MAX = ResponseProcessProposal_ProposalStatus_ProposalStatus_MAX;
  static constexpr int ProposalStatus_ARRAYSIZE = ResponseProcessProposal_ProposalStatus_ProposalStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ProposalStatus_descriptor() {
    return ResponseProcessProposal_ProposalStatus_descriptor();
  }
  template <typename T>
  static inline const std::string& ProposalStatus_Name(T value) {
    return ResponseProcessProposal_ProposalStatus_Name(value);
  }
  static inline bool ProposalStatus_Parse(absl::string_view name, ProposalStatus* value) {
    return ResponseProcessProposal_ProposalStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kStatusFieldNumber = 1,
  };
  // .tendermint.abci.ResponseProcessProposal.ProposalStatus status = 1 [json_name = "status"];
  void clear_status() ;
  ::tendermint::abci::ResponseProcessProposal_ProposalStatus status() const;
  void set_status(::tendermint::abci::ResponseProcessProposal_ProposalStatus value);

  private:
  ::tendermint::abci::ResponseProcessProposal_ProposalStatus _internal_status() const;
  void _internal_set_status(::tendermint::abci::ResponseProcessProposal_ProposalStatus value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.ResponseProcessProposal)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResponseProcessProposal& from_msg);
    int status_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ResponsePrepareProposal final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.ResponsePrepareProposal) */ {
 public:
  inline ResponsePrepareProposal() : ResponsePrepareProposal(nullptr) {}
  ~ResponsePrepareProposal() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResponsePrepareProposal* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResponsePrepareProposal));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResponsePrepareProposal(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResponsePrepareProposal(const ResponsePrepareProposal& from) : ResponsePrepareProposal(nullptr, from) {}
  inline ResponsePrepareProposal(ResponsePrepareProposal&& from) noexcept
      : ResponsePrepareProposal(nullptr, std::move(from)) {}
  inline ResponsePrepareProposal& operator=(const ResponsePrepareProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponsePrepareProposal& operator=(ResponsePrepareProposal&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponsePrepareProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponsePrepareProposal* internal_default_instance() {
    return reinterpret_cast<const ResponsePrepareProposal*>(
        &_ResponsePrepareProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 30;
  friend void swap(ResponsePrepareProposal& a, ResponsePrepareProposal& b) { a.Swap(&b); }
  inline void Swap(ResponsePrepareProposal* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponsePrepareProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponsePrepareProposal* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResponsePrepareProposal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResponsePrepareProposal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResponsePrepareProposal& from) { ResponsePrepareProposal::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResponsePrepareProposal* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.ResponsePrepareProposal"; }

 protected:
  explicit ResponsePrepareProposal(::google::protobuf::Arena* arena);
  ResponsePrepareProposal(::google::protobuf::Arena* arena, const ResponsePrepareProposal& from);
  ResponsePrepareProposal(::google::protobuf::Arena* arena, ResponsePrepareProposal&& from) noexcept
      : ResponsePrepareProposal(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTxsFieldNumber = 1,
  };
  // repeated bytes txs = 1 [json_name = "txs"];
  int txs_size() const;
  private:
  int _internal_txs_size() const;

  public:
  void clear_txs() ;
  const std::string& txs(int index) const;
  std::string* mutable_txs(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_txs(int index, Arg_&& value, Args_... args);
  std::string* add_txs();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_txs(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& txs() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_txs();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_txs() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_txs();

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.ResponsePrepareProposal)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResponsePrepareProposal& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> txs_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ResponseOfferSnapshot final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.ResponseOfferSnapshot) */ {
 public:
  inline ResponseOfferSnapshot() : ResponseOfferSnapshot(nullptr) {}
  ~ResponseOfferSnapshot() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResponseOfferSnapshot* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResponseOfferSnapshot));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseOfferSnapshot(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResponseOfferSnapshot(const ResponseOfferSnapshot& from) : ResponseOfferSnapshot(nullptr, from) {}
  inline ResponseOfferSnapshot(ResponseOfferSnapshot&& from) noexcept
      : ResponseOfferSnapshot(nullptr, std::move(from)) {}
  inline ResponseOfferSnapshot& operator=(const ResponseOfferSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseOfferSnapshot& operator=(ResponseOfferSnapshot&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseOfferSnapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseOfferSnapshot* internal_default_instance() {
    return reinterpret_cast<const ResponseOfferSnapshot*>(
        &_ResponseOfferSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 27;
  friend void swap(ResponseOfferSnapshot& a, ResponseOfferSnapshot& b) { a.Swap(&b); }
  inline void Swap(ResponseOfferSnapshot* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseOfferSnapshot* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseOfferSnapshot* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResponseOfferSnapshot>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResponseOfferSnapshot& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResponseOfferSnapshot& from) { ResponseOfferSnapshot::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResponseOfferSnapshot* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.ResponseOfferSnapshot"; }

 protected:
  explicit ResponseOfferSnapshot(::google::protobuf::Arena* arena);
  ResponseOfferSnapshot(::google::protobuf::Arena* arena, const ResponseOfferSnapshot& from);
  ResponseOfferSnapshot(::google::protobuf::Arena* arena, ResponseOfferSnapshot&& from) noexcept
      : ResponseOfferSnapshot(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Result = ResponseOfferSnapshot_Result;
  static constexpr Result UNKNOWN = ResponseOfferSnapshot_Result_UNKNOWN;
  static constexpr Result ACCEPT = ResponseOfferSnapshot_Result_ACCEPT;
  static constexpr Result ABORT = ResponseOfferSnapshot_Result_ABORT;
  static constexpr Result REJECT = ResponseOfferSnapshot_Result_REJECT;
  static constexpr Result REJECT_FORMAT = ResponseOfferSnapshot_Result_REJECT_FORMAT;
  static constexpr Result REJECT_SENDER = ResponseOfferSnapshot_Result_REJECT_SENDER;
  static inline bool Result_IsValid(int value) {
    return ResponseOfferSnapshot_Result_IsValid(value);
  }
  static constexpr Result Result_MIN = ResponseOfferSnapshot_Result_Result_MIN;
  static constexpr Result Result_MAX = ResponseOfferSnapshot_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE = ResponseOfferSnapshot_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Result_descriptor() {
    return ResponseOfferSnapshot_Result_descriptor();
  }
  template <typename T>
  static inline const std::string& Result_Name(T value) {
    return ResponseOfferSnapshot_Result_Name(value);
  }
  static inline bool Result_Parse(absl::string_view name, Result* value) {
    return ResponseOfferSnapshot_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kResultFieldNumber = 1,
  };
  // .tendermint.abci.ResponseOfferSnapshot.Result result = 1 [json_name = "result"];
  void clear_result() ;
  ::tendermint::abci::ResponseOfferSnapshot_Result result() const;
  void set_result(::tendermint::abci::ResponseOfferSnapshot_Result value);

  private:
  ::tendermint::abci::ResponseOfferSnapshot_Result _internal_result() const;
  void _internal_set_result(::tendermint::abci::ResponseOfferSnapshot_Result value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.ResponseOfferSnapshot)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResponseOfferSnapshot& from_msg);
    int result_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ResponseLoadSnapshotChunk final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.ResponseLoadSnapshotChunk) */ {
 public:
  inline ResponseLoadSnapshotChunk() : ResponseLoadSnapshotChunk(nullptr) {}
  ~ResponseLoadSnapshotChunk() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResponseLoadSnapshotChunk* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResponseLoadSnapshotChunk));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseLoadSnapshotChunk(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResponseLoadSnapshotChunk(const ResponseLoadSnapshotChunk& from) : ResponseLoadSnapshotChunk(nullptr, from) {}
  inline ResponseLoadSnapshotChunk(ResponseLoadSnapshotChunk&& from) noexcept
      : ResponseLoadSnapshotChunk(nullptr, std::move(from)) {}
  inline ResponseLoadSnapshotChunk& operator=(const ResponseLoadSnapshotChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseLoadSnapshotChunk& operator=(ResponseLoadSnapshotChunk&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseLoadSnapshotChunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseLoadSnapshotChunk* internal_default_instance() {
    return reinterpret_cast<const ResponseLoadSnapshotChunk*>(
        &_ResponseLoadSnapshotChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 28;
  friend void swap(ResponseLoadSnapshotChunk& a, ResponseLoadSnapshotChunk& b) { a.Swap(&b); }
  inline void Swap(ResponseLoadSnapshotChunk* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseLoadSnapshotChunk* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseLoadSnapshotChunk* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResponseLoadSnapshotChunk>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResponseLoadSnapshotChunk& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResponseLoadSnapshotChunk& from) { ResponseLoadSnapshotChunk::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResponseLoadSnapshotChunk* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.ResponseLoadSnapshotChunk"; }

 protected:
  explicit ResponseLoadSnapshotChunk(::google::protobuf::Arena* arena);
  ResponseLoadSnapshotChunk(::google::protobuf::Arena* arena, const ResponseLoadSnapshotChunk& from);
  ResponseLoadSnapshotChunk(::google::protobuf::Arena* arena, ResponseLoadSnapshotChunk&& from) noexcept
      : ResponseLoadSnapshotChunk(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChunkFieldNumber = 1,
  };
  // bytes chunk = 1 [json_name = "chunk"];
  void clear_chunk() ;
  const std::string& chunk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chunk(Arg_&& arg, Args_... args);
  std::string* mutable_chunk();
  PROTOBUF_NODISCARD std::string* release_chunk();
  void set_allocated_chunk(std::string* value);

  private:
  const std::string& _internal_chunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chunk(
      const std::string& value);
  std::string* _internal_mutable_chunk();

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.ResponseLoadSnapshotChunk)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResponseLoadSnapshotChunk& from_msg);
    ::google::protobuf::internal::ArenaStringPtr chunk_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ResponseInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.ResponseInfo) */ {
 public:
  inline ResponseInfo() : ResponseInfo(nullptr) {}
  ~ResponseInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResponseInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResponseInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResponseInfo(const ResponseInfo& from) : ResponseInfo(nullptr, from) {}
  inline ResponseInfo(ResponseInfo&& from) noexcept
      : ResponseInfo(nullptr, std::move(from)) {}
  inline ResponseInfo& operator=(const ResponseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseInfo& operator=(ResponseInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseInfo* internal_default_instance() {
    return reinterpret_cast<const ResponseInfo*>(
        &_ResponseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(ResponseInfo& a, ResponseInfo& b) { a.Swap(&b); }
  inline void Swap(ResponseInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResponseInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResponseInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResponseInfo& from) { ResponseInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResponseInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.ResponseInfo"; }

 protected:
  explicit ResponseInfo(::google::protobuf::Arena* arena);
  ResponseInfo(::google::protobuf::Arena* arena, const ResponseInfo& from);
  ResponseInfo(::google::protobuf::Arena* arena, ResponseInfo&& from) noexcept
      : ResponseInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
    kVersionFieldNumber = 2,
    kLastBlockAppHashFieldNumber = 5,
    kAppVersionFieldNumber = 3,
    kLastBlockHeightFieldNumber = 4,
  };
  // string data = 1 [json_name = "data"];
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // string version = 2 [json_name = "version"];
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // bytes last_block_app_hash = 5 [json_name = "lastBlockAppHash"];
  void clear_last_block_app_hash() ;
  const std::string& last_block_app_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_block_app_hash(Arg_&& arg, Args_... args);
  std::string* mutable_last_block_app_hash();
  PROTOBUF_NODISCARD std::string* release_last_block_app_hash();
  void set_allocated_last_block_app_hash(std::string* value);

  private:
  const std::string& _internal_last_block_app_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_block_app_hash(
      const std::string& value);
  std::string* _internal_mutable_last_block_app_hash();

  public:
  // uint64 app_version = 3 [json_name = "appVersion"];
  void clear_app_version() ;
  ::uint64_t app_version() const;
  void set_app_version(::uint64_t value);

  private:
  ::uint64_t _internal_app_version() const;
  void _internal_set_app_version(::uint64_t value);

  public:
  // int64 last_block_height = 4 [json_name = "lastBlockHeight"];
  void clear_last_block_height() ;
  ::int64_t last_block_height() const;
  void set_last_block_height(::int64_t value);

  private:
  ::int64_t _internal_last_block_height() const;
  void _internal_set_last_block_height(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.ResponseInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      48, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResponseInfo& from_msg);
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::ArenaStringPtr last_block_app_hash_;
    ::uint64_t app_version_;
    ::int64_t last_block_height_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ResponseFlush final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:tendermint.abci.ResponseFlush) */ {
 public:
  inline ResponseFlush() : ResponseFlush(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResponseFlush* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResponseFlush));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseFlush(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResponseFlush(const ResponseFlush& from) : ResponseFlush(nullptr, from) {}
  inline ResponseFlush(ResponseFlush&& from) noexcept
      : ResponseFlush(nullptr, std::move(from)) {}
  inline ResponseFlush& operator=(const ResponseFlush& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseFlush& operator=(ResponseFlush&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseFlush& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseFlush* internal_default_instance() {
    return reinterpret_cast<const ResponseFlush*>(
        &_ResponseFlush_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(ResponseFlush& a, ResponseFlush& b) { a.Swap(&b); }
  inline void Swap(ResponseFlush* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseFlush* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseFlush* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<ResponseFlush>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ResponseFlush& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ResponseFlush& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.ResponseFlush"; }

 protected:
  explicit ResponseFlush(::google::protobuf::Arena* arena);
  ResponseFlush(::google::protobuf::Arena* arena, const ResponseFlush& from);
  ResponseFlush(::google::protobuf::Arena* arena, ResponseFlush&& from) noexcept
      : ResponseFlush(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:tendermint.abci.ResponseFlush)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResponseFlush& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ResponseExtendVote final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.ResponseExtendVote) */ {
 public:
  inline ResponseExtendVote() : ResponseExtendVote(nullptr) {}
  ~ResponseExtendVote() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResponseExtendVote* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResponseExtendVote));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseExtendVote(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResponseExtendVote(const ResponseExtendVote& from) : ResponseExtendVote(nullptr, from) {}
  inline ResponseExtendVote(ResponseExtendVote&& from) noexcept
      : ResponseExtendVote(nullptr, std::move(from)) {}
  inline ResponseExtendVote& operator=(const ResponseExtendVote& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseExtendVote& operator=(ResponseExtendVote&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseExtendVote& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseExtendVote* internal_default_instance() {
    return reinterpret_cast<const ResponseExtendVote*>(
        &_ResponseExtendVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 32;
  friend void swap(ResponseExtendVote& a, ResponseExtendVote& b) { a.Swap(&b); }
  inline void Swap(ResponseExtendVote* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseExtendVote* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseExtendVote* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResponseExtendVote>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResponseExtendVote& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResponseExtendVote& from) { ResponseExtendVote::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResponseExtendVote* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.ResponseExtendVote"; }

 protected:
  explicit ResponseExtendVote(::google::protobuf::Arena* arena);
  ResponseExtendVote(::google::protobuf::Arena* arena, const ResponseExtendVote& from);
  ResponseExtendVote(::google::protobuf::Arena* arena, ResponseExtendVote&& from) noexcept
      : ResponseExtendVote(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVoteExtensionFieldNumber = 1,
  };
  // bytes vote_extension = 1 [json_name = "voteExtension"];
  void clear_vote_extension() ;
  const std::string& vote_extension() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_vote_extension(Arg_&& arg, Args_... args);
  std::string* mutable_vote_extension();
  PROTOBUF_NODISCARD std::string* release_vote_extension();
  void set_allocated_vote_extension(std::string* value);

  private:
  const std::string& _internal_vote_extension() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vote_extension(
      const std::string& value);
  std::string* _internal_mutable_vote_extension();

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.ResponseExtendVote)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResponseExtendVote& from_msg);
    ::google::protobuf::internal::ArenaStringPtr vote_extension_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ResponseException final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.ResponseException) */ {
 public:
  inline ResponseException() : ResponseException(nullptr) {}
  ~ResponseException() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResponseException* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResponseException));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseException(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResponseException(const ResponseException& from) : ResponseException(nullptr, from) {}
  inline ResponseException(ResponseException&& from) noexcept
      : ResponseException(nullptr, std::move(from)) {}
  inline ResponseException& operator=(const ResponseException& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseException& operator=(ResponseException&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseException& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseException* internal_default_instance() {
    return reinterpret_cast<const ResponseException*>(
        &_ResponseException_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(ResponseException& a, ResponseException& b) { a.Swap(&b); }
  inline void Swap(ResponseException* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseException* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseException* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResponseException>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResponseException& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResponseException& from) { ResponseException::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResponseException* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.ResponseException"; }

 protected:
  explicit ResponseException(::google::protobuf::Arena* arena);
  ResponseException(::google::protobuf::Arena* arena, const ResponseException& from);
  ResponseException(::google::protobuf::Arena* arena, ResponseException&& from) noexcept
      : ResponseException(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorFieldNumber = 1,
  };
  // string error = 1 [json_name = "error"];
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* value);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.ResponseException)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      47, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResponseException& from_msg);
    ::google::protobuf::internal::ArenaStringPtr error_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ResponseEcho final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.ResponseEcho) */ {
 public:
  inline ResponseEcho() : ResponseEcho(nullptr) {}
  ~ResponseEcho() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResponseEcho* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResponseEcho));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseEcho(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResponseEcho(const ResponseEcho& from) : ResponseEcho(nullptr, from) {}
  inline ResponseEcho(ResponseEcho&& from) noexcept
      : ResponseEcho(nullptr, std::move(from)) {}
  inline ResponseEcho& operator=(const ResponseEcho& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseEcho& operator=(ResponseEcho&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseEcho& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseEcho* internal_default_instance() {
    return reinterpret_cast<const ResponseEcho*>(
        &_ResponseEcho_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(ResponseEcho& a, ResponseEcho& b) { a.Swap(&b); }
  inline void Swap(ResponseEcho* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseEcho* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseEcho* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResponseEcho>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResponseEcho& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResponseEcho& from) { ResponseEcho::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResponseEcho* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.ResponseEcho"; }

 protected:
  explicit ResponseEcho(::google::protobuf::Arena* arena);
  ResponseEcho(::google::protobuf::Arena* arena, const ResponseEcho& from);
  ResponseEcho(::google::protobuf::Arena* arena, ResponseEcho&& from) noexcept
      : ResponseEcho(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1 [json_name = "message"];
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.ResponseEcho)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      44, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResponseEcho& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ResponseCommit final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.ResponseCommit) */ {
 public:
  inline ResponseCommit() : ResponseCommit(nullptr) {}
  ~ResponseCommit() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResponseCommit* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResponseCommit));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseCommit(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResponseCommit(const ResponseCommit& from) : ResponseCommit(nullptr, from) {}
  inline ResponseCommit(ResponseCommit&& from) noexcept
      : ResponseCommit(nullptr, std::move(from)) {}
  inline ResponseCommit& operator=(const ResponseCommit& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseCommit& operator=(ResponseCommit&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseCommit& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseCommit* internal_default_instance() {
    return reinterpret_cast<const ResponseCommit*>(
        &_ResponseCommit_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 25;
  friend void swap(ResponseCommit& a, ResponseCommit& b) { a.Swap(&b); }
  inline void Swap(ResponseCommit* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseCommit* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseCommit* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResponseCommit>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResponseCommit& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResponseCommit& from) { ResponseCommit::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResponseCommit* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.ResponseCommit"; }

 protected:
  explicit ResponseCommit(::google::protobuf::Arena* arena);
  ResponseCommit(::google::protobuf::Arena* arena, const ResponseCommit& from);
  ResponseCommit(::google::protobuf::Arena* arena, ResponseCommit&& from) noexcept
      : ResponseCommit(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRetainHeightFieldNumber = 3,
  };
  // int64 retain_height = 3 [json_name = "retainHeight"];
  void clear_retain_height() ;
  ::int64_t retain_height() const;
  void set_retain_height(::int64_t value);

  private:
  ::int64_t _internal_retain_height() const;
  void _internal_set_retain_height(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.ResponseCommit)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResponseCommit& from_msg);
    ::int64_t retain_height_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ResponseApplySnapshotChunk final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.ResponseApplySnapshotChunk) */ {
 public:
  inline ResponseApplySnapshotChunk() : ResponseApplySnapshotChunk(nullptr) {}
  ~ResponseApplySnapshotChunk() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResponseApplySnapshotChunk* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResponseApplySnapshotChunk));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseApplySnapshotChunk(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResponseApplySnapshotChunk(const ResponseApplySnapshotChunk& from) : ResponseApplySnapshotChunk(nullptr, from) {}
  inline ResponseApplySnapshotChunk(ResponseApplySnapshotChunk&& from) noexcept
      : ResponseApplySnapshotChunk(nullptr, std::move(from)) {}
  inline ResponseApplySnapshotChunk& operator=(const ResponseApplySnapshotChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseApplySnapshotChunk& operator=(ResponseApplySnapshotChunk&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseApplySnapshotChunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseApplySnapshotChunk* internal_default_instance() {
    return reinterpret_cast<const ResponseApplySnapshotChunk*>(
        &_ResponseApplySnapshotChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 29;
  friend void swap(ResponseApplySnapshotChunk& a, ResponseApplySnapshotChunk& b) { a.Swap(&b); }
  inline void Swap(ResponseApplySnapshotChunk* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseApplySnapshotChunk* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseApplySnapshotChunk* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResponseApplySnapshotChunk>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResponseApplySnapshotChunk& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResponseApplySnapshotChunk& from) { ResponseApplySnapshotChunk::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResponseApplySnapshotChunk* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.ResponseApplySnapshotChunk"; }

 protected:
  explicit ResponseApplySnapshotChunk(::google::protobuf::Arena* arena);
  ResponseApplySnapshotChunk(::google::protobuf::Arena* arena, const ResponseApplySnapshotChunk& from);
  ResponseApplySnapshotChunk(::google::protobuf::Arena* arena, ResponseApplySnapshotChunk&& from) noexcept
      : ResponseApplySnapshotChunk(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Result = ResponseApplySnapshotChunk_Result;
  static constexpr Result UNKNOWN = ResponseApplySnapshotChunk_Result_UNKNOWN;
  static constexpr Result ACCEPT = ResponseApplySnapshotChunk_Result_ACCEPT;
  static constexpr Result ABORT = ResponseApplySnapshotChunk_Result_ABORT;
  static constexpr Result RETRY = ResponseApplySnapshotChunk_Result_RETRY;
  static constexpr Result RETRY_SNAPSHOT = ResponseApplySnapshotChunk_Result_RETRY_SNAPSHOT;
  static constexpr Result REJECT_SNAPSHOT = ResponseApplySnapshotChunk_Result_REJECT_SNAPSHOT;
  static inline bool Result_IsValid(int value) {
    return ResponseApplySnapshotChunk_Result_IsValid(value);
  }
  static constexpr Result Result_MIN = ResponseApplySnapshotChunk_Result_Result_MIN;
  static constexpr Result Result_MAX = ResponseApplySnapshotChunk_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE = ResponseApplySnapshotChunk_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Result_descriptor() {
    return ResponseApplySnapshotChunk_Result_descriptor();
  }
  template <typename T>
  static inline const std::string& Result_Name(T value) {
    return ResponseApplySnapshotChunk_Result_Name(value);
  }
  static inline bool Result_Parse(absl::string_view name, Result* value) {
    return ResponseApplySnapshotChunk_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kRefetchChunksFieldNumber = 2,
    kRejectSendersFieldNumber = 3,
    kResultFieldNumber = 1,
  };
  // repeated uint32 refetch_chunks = 2 [json_name = "refetchChunks"];
  int refetch_chunks_size() const;
  private:
  int _internal_refetch_chunks_size() const;

  public:
  void clear_refetch_chunks() ;
  ::uint32_t refetch_chunks(int index) const;
  void set_refetch_chunks(int index, ::uint32_t value);
  void add_refetch_chunks(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& refetch_chunks() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_refetch_chunks();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_refetch_chunks() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_refetch_chunks();

  public:
  // repeated string reject_senders = 3 [json_name = "rejectSenders"];
  int reject_senders_size() const;
  private:
  int _internal_reject_senders_size() const;

  public:
  void clear_reject_senders() ;
  const std::string& reject_senders(int index) const;
  std::string* mutable_reject_senders(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reject_senders(int index, Arg_&& value, Args_... args);
  std::string* add_reject_senders();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_reject_senders(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& reject_senders() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_reject_senders();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_reject_senders() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_reject_senders();

  public:
  // .tendermint.abci.ResponseApplySnapshotChunk.Result result = 1 [json_name = "result"];
  void clear_result() ;
  ::tendermint::abci::ResponseApplySnapshotChunk_Result result() const;
  void set_result(::tendermint::abci::ResponseApplySnapshotChunk_Result value);

  private:
  ::tendermint::abci::ResponseApplySnapshotChunk_Result _internal_result() const;
  void _internal_set_result(::tendermint::abci::ResponseApplySnapshotChunk_Result value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.ResponseApplySnapshotChunk)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      65, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResponseApplySnapshotChunk& from_msg);
    ::google::protobuf::RepeatedField<::uint32_t> refetch_chunks_;
    ::google::protobuf::internal::CachedSize _refetch_chunks_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField<std::string> reject_senders_;
    int result_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class RequestVerifyVoteExtension final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.RequestVerifyVoteExtension) */ {
 public:
  inline RequestVerifyVoteExtension() : RequestVerifyVoteExtension(nullptr) {}
  ~RequestVerifyVoteExtension() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RequestVerifyVoteExtension* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RequestVerifyVoteExtension));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RequestVerifyVoteExtension(
      ::google::protobuf::internal::ConstantInitialized);

  inline RequestVerifyVoteExtension(const RequestVerifyVoteExtension& from) : RequestVerifyVoteExtension(nullptr, from) {}
  inline RequestVerifyVoteExtension(RequestVerifyVoteExtension&& from) noexcept
      : RequestVerifyVoteExtension(nullptr, std::move(from)) {}
  inline RequestVerifyVoteExtension& operator=(const RequestVerifyVoteExtension& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVerifyVoteExtension& operator=(RequestVerifyVoteExtension&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestVerifyVoteExtension& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestVerifyVoteExtension* internal_default_instance() {
    return reinterpret_cast<const RequestVerifyVoteExtension*>(
        &_RequestVerifyVoteExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(RequestVerifyVoteExtension& a, RequestVerifyVoteExtension& b) { a.Swap(&b); }
  inline void Swap(RequestVerifyVoteExtension* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVerifyVoteExtension* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestVerifyVoteExtension* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RequestVerifyVoteExtension>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestVerifyVoteExtension& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RequestVerifyVoteExtension& from) { RequestVerifyVoteExtension::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RequestVerifyVoteExtension* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.RequestVerifyVoteExtension"; }

 protected:
  explicit RequestVerifyVoteExtension(::google::protobuf::Arena* arena);
  RequestVerifyVoteExtension(::google::protobuf::Arena* arena, const RequestVerifyVoteExtension& from);
  RequestVerifyVoteExtension(::google::protobuf::Arena* arena, RequestVerifyVoteExtension&& from) noexcept
      : RequestVerifyVoteExtension(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHashFieldNumber = 1,
    kValidatorAddressFieldNumber = 2,
    kVoteExtensionFieldNumber = 4,
    kHeightFieldNumber = 3,
  };
  // bytes hash = 1 [json_name = "hash"];
  void clear_hash() ;
  const std::string& hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hash(Arg_&& arg, Args_... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* value);

  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(
      const std::string& value);
  std::string* _internal_mutable_hash();

  public:
  // bytes validator_address = 2 [json_name = "validatorAddress"];
  void clear_validator_address() ;
  const std::string& validator_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_validator_address(Arg_&& arg, Args_... args);
  std::string* mutable_validator_address();
  PROTOBUF_NODISCARD std::string* release_validator_address();
  void set_allocated_validator_address(std::string* value);

  private:
  const std::string& _internal_validator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validator_address(
      const std::string& value);
  std::string* _internal_mutable_validator_address();

  public:
  // bytes vote_extension = 4 [json_name = "voteExtension"];
  void clear_vote_extension() ;
  const std::string& vote_extension() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_vote_extension(Arg_&& arg, Args_... args);
  std::string* mutable_vote_extension();
  PROTOBUF_NODISCARD std::string* release_vote_extension();
  void set_allocated_vote_extension(std::string* value);

  private:
  const std::string& _internal_vote_extension() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vote_extension(
      const std::string& value);
  std::string* _internal_mutable_vote_extension();

  public:
  // int64 height = 3 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.RequestVerifyVoteExtension)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RequestVerifyVoteExtension& from_msg);
    ::google::protobuf::internal::ArenaStringPtr hash_;
    ::google::protobuf::internal::ArenaStringPtr validator_address_;
    ::google::protobuf::internal::ArenaStringPtr vote_extension_;
    ::int64_t height_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class RequestQuery final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.RequestQuery) */ {
 public:
  inline RequestQuery() : RequestQuery(nullptr) {}
  ~RequestQuery() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RequestQuery* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RequestQuery));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RequestQuery(
      ::google::protobuf::internal::ConstantInitialized);

  inline RequestQuery(const RequestQuery& from) : RequestQuery(nullptr, from) {}
  inline RequestQuery(RequestQuery&& from) noexcept
      : RequestQuery(nullptr, std::move(from)) {}
  inline RequestQuery& operator=(const RequestQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestQuery& operator=(RequestQuery&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestQuery* internal_default_instance() {
    return reinterpret_cast<const RequestQuery*>(
        &_RequestQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(RequestQuery& a, RequestQuery& b) { a.Swap(&b); }
  inline void Swap(RequestQuery* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestQuery* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestQuery* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RequestQuery>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestQuery& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RequestQuery& from) { RequestQuery::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RequestQuery* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.RequestQuery"; }

 protected:
  explicit RequestQuery(::google::protobuf::Arena* arena);
  RequestQuery(::google::protobuf::Arena* arena, const RequestQuery& from);
  RequestQuery(::google::protobuf::Arena* arena, RequestQuery&& from) noexcept
      : RequestQuery(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
    kPathFieldNumber = 2,
    kHeightFieldNumber = 3,
    kProveFieldNumber = 4,
  };
  // bytes data = 1 [json_name = "data"];
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // string path = 2 [json_name = "path"];
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* value);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // int64 height = 3 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // bool prove = 4 [json_name = "prove"];
  void clear_prove() ;
  bool prove() const;
  void set_prove(bool value);

  private:
  bool _internal_prove() const;
  void _internal_set_prove(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.RequestQuery)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      41, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RequestQuery& from_msg);
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::int64_t height_;
    bool prove_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class RequestLoadSnapshotChunk final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.RequestLoadSnapshotChunk) */ {
 public:
  inline RequestLoadSnapshotChunk() : RequestLoadSnapshotChunk(nullptr) {}
  ~RequestLoadSnapshotChunk() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RequestLoadSnapshotChunk* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RequestLoadSnapshotChunk));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RequestLoadSnapshotChunk(
      ::google::protobuf::internal::ConstantInitialized);

  inline RequestLoadSnapshotChunk(const RequestLoadSnapshotChunk& from) : RequestLoadSnapshotChunk(nullptr, from) {}
  inline RequestLoadSnapshotChunk(RequestLoadSnapshotChunk&& from) noexcept
      : RequestLoadSnapshotChunk(nullptr, std::move(from)) {}
  inline RequestLoadSnapshotChunk& operator=(const RequestLoadSnapshotChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestLoadSnapshotChunk& operator=(RequestLoadSnapshotChunk&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestLoadSnapshotChunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestLoadSnapshotChunk* internal_default_instance() {
    return reinterpret_cast<const RequestLoadSnapshotChunk*>(
        &_RequestLoadSnapshotChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(RequestLoadSnapshotChunk& a, RequestLoadSnapshotChunk& b) { a.Swap(&b); }
  inline void Swap(RequestLoadSnapshotChunk* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestLoadSnapshotChunk* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestLoadSnapshotChunk* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RequestLoadSnapshotChunk>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestLoadSnapshotChunk& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RequestLoadSnapshotChunk& from) { RequestLoadSnapshotChunk::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RequestLoadSnapshotChunk* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.RequestLoadSnapshotChunk"; }

 protected:
  explicit RequestLoadSnapshotChunk(::google::protobuf::Arena* arena);
  RequestLoadSnapshotChunk(::google::protobuf::Arena* arena, const RequestLoadSnapshotChunk& from);
  RequestLoadSnapshotChunk(::google::protobuf::Arena* arena, RequestLoadSnapshotChunk&& from) noexcept
      : RequestLoadSnapshotChunk(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeightFieldNumber = 1,
    kFormatFieldNumber = 2,
    kChunkFieldNumber = 3,
  };
  // uint64 height = 1 [json_name = "height"];
  void clear_height() ;
  ::uint64_t height() const;
  void set_height(::uint64_t value);

  private:
  ::uint64_t _internal_height() const;
  void _internal_set_height(::uint64_t value);

  public:
  // uint32 format = 2 [json_name = "format"];
  void clear_format() ;
  ::uint32_t format() const;
  void set_format(::uint32_t value);

  private:
  ::uint32_t _internal_format() const;
  void _internal_set_format(::uint32_t value);

  public:
  // uint32 chunk = 3 [json_name = "chunk"];
  void clear_chunk() ;
  ::uint32_t chunk() const;
  void set_chunk(::uint32_t value);

  private:
  ::uint32_t _internal_chunk() const;
  void _internal_set_chunk(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.RequestLoadSnapshotChunk)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RequestLoadSnapshotChunk& from_msg);
    ::uint64_t height_;
    ::uint32_t format_;
    ::uint32_t chunk_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class RequestListSnapshots final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:tendermint.abci.RequestListSnapshots) */ {
 public:
  inline RequestListSnapshots() : RequestListSnapshots(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RequestListSnapshots* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RequestListSnapshots));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RequestListSnapshots(
      ::google::protobuf::internal::ConstantInitialized);

  inline RequestListSnapshots(const RequestListSnapshots& from) : RequestListSnapshots(nullptr, from) {}
  inline RequestListSnapshots(RequestListSnapshots&& from) noexcept
      : RequestListSnapshots(nullptr, std::move(from)) {}
  inline RequestListSnapshots& operator=(const RequestListSnapshots& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestListSnapshots& operator=(RequestListSnapshots&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestListSnapshots& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestListSnapshots* internal_default_instance() {
    return reinterpret_cast<const RequestListSnapshots*>(
        &_RequestListSnapshots_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(RequestListSnapshots& a, RequestListSnapshots& b) { a.Swap(&b); }
  inline void Swap(RequestListSnapshots* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestListSnapshots* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestListSnapshots* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<RequestListSnapshots>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RequestListSnapshots& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RequestListSnapshots& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.RequestListSnapshots"; }

 protected:
  explicit RequestListSnapshots(::google::protobuf::Arena* arena);
  RequestListSnapshots(::google::protobuf::Arena* arena, const RequestListSnapshots& from);
  RequestListSnapshots(::google::protobuf::Arena* arena, RequestListSnapshots&& from) noexcept
      : RequestListSnapshots(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:tendermint.abci.RequestListSnapshots)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RequestListSnapshots& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class RequestInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.RequestInfo) */ {
 public:
  inline RequestInfo() : RequestInfo(nullptr) {}
  ~RequestInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RequestInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RequestInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RequestInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline RequestInfo(const RequestInfo& from) : RequestInfo(nullptr, from) {}
  inline RequestInfo(RequestInfo&& from) noexcept
      : RequestInfo(nullptr, std::move(from)) {}
  inline RequestInfo& operator=(const RequestInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestInfo& operator=(RequestInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestInfo* internal_default_instance() {
    return reinterpret_cast<const RequestInfo*>(
        &_RequestInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(RequestInfo& a, RequestInfo& b) { a.Swap(&b); }
  inline void Swap(RequestInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RequestInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RequestInfo& from) { RequestInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RequestInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.RequestInfo"; }

 protected:
  explicit RequestInfo(::google::protobuf::Arena* arena);
  RequestInfo(::google::protobuf::Arena* arena, const RequestInfo& from);
  RequestInfo(::google::protobuf::Arena* arena, RequestInfo&& from) noexcept
      : RequestInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVersionFieldNumber = 1,
    kAbciVersionFieldNumber = 4,
    kBlockVersionFieldNumber = 2,
    kP2PVersionFieldNumber = 3,
  };
  // string version = 1 [json_name = "version"];
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // string abci_version = 4 [json_name = "abciVersion"];
  void clear_abci_version() ;
  const std::string& abci_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_abci_version(Arg_&& arg, Args_... args);
  std::string* mutable_abci_version();
  PROTOBUF_NODISCARD std::string* release_abci_version();
  void set_allocated_abci_version(std::string* value);

  private:
  const std::string& _internal_abci_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_abci_version(
      const std::string& value);
  std::string* _internal_mutable_abci_version();

  public:
  // uint64 block_version = 2 [json_name = "blockVersion"];
  void clear_block_version() ;
  ::uint64_t block_version() const;
  void set_block_version(::uint64_t value);

  private:
  ::uint64_t _internal_block_version() const;
  void _internal_set_block_version(::uint64_t value);

  public:
  // uint64 p2p_version = 3 [json_name = "p2pVersion"];
  void clear_p2p_version() ;
  ::uint64_t p2p_version() const;
  void set_p2p_version(::uint64_t value);

  private:
  ::uint64_t _internal_p2p_version() const;
  void _internal_set_p2p_version(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.RequestInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      55, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RequestInfo& from_msg);
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::ArenaStringPtr abci_version_;
    ::uint64_t block_version_;
    ::uint64_t p2p_version_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class RequestFlush final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:tendermint.abci.RequestFlush) */ {
 public:
  inline RequestFlush() : RequestFlush(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RequestFlush* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RequestFlush));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RequestFlush(
      ::google::protobuf::internal::ConstantInitialized);

  inline RequestFlush(const RequestFlush& from) : RequestFlush(nullptr, from) {}
  inline RequestFlush(RequestFlush&& from) noexcept
      : RequestFlush(nullptr, std::move(from)) {}
  inline RequestFlush& operator=(const RequestFlush& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestFlush& operator=(RequestFlush&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestFlush& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestFlush* internal_default_instance() {
    return reinterpret_cast<const RequestFlush*>(
        &_RequestFlush_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(RequestFlush& a, RequestFlush& b) { a.Swap(&b); }
  inline void Swap(RequestFlush* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestFlush* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestFlush* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<RequestFlush>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RequestFlush& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RequestFlush& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.RequestFlush"; }

 protected:
  explicit RequestFlush(::google::protobuf::Arena* arena);
  RequestFlush(::google::protobuf::Arena* arena, const RequestFlush& from);
  RequestFlush(::google::protobuf::Arena* arena, RequestFlush&& from) noexcept
      : RequestFlush(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:tendermint.abci.RequestFlush)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RequestFlush& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class RequestEcho final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.RequestEcho) */ {
 public:
  inline RequestEcho() : RequestEcho(nullptr) {}
  ~RequestEcho() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RequestEcho* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RequestEcho));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RequestEcho(
      ::google::protobuf::internal::ConstantInitialized);

  inline RequestEcho(const RequestEcho& from) : RequestEcho(nullptr, from) {}
  inline RequestEcho(RequestEcho&& from) noexcept
      : RequestEcho(nullptr, std::move(from)) {}
  inline RequestEcho& operator=(const RequestEcho& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestEcho& operator=(RequestEcho&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestEcho& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestEcho* internal_default_instance() {
    return reinterpret_cast<const RequestEcho*>(
        &_RequestEcho_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(RequestEcho& a, RequestEcho& b) { a.Swap(&b); }
  inline void Swap(RequestEcho* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestEcho* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestEcho* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RequestEcho>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestEcho& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RequestEcho& from) { RequestEcho::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RequestEcho* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.RequestEcho"; }

 protected:
  explicit RequestEcho(::google::protobuf::Arena* arena);
  RequestEcho(::google::protobuf::Arena* arena, const RequestEcho& from);
  RequestEcho(::google::protobuf::Arena* arena, RequestEcho&& from) noexcept
      : RequestEcho(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1 [json_name = "message"];
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.RequestEcho)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      43, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RequestEcho& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class RequestCommit final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:tendermint.abci.RequestCommit) */ {
 public:
  inline RequestCommit() : RequestCommit(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RequestCommit* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RequestCommit));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RequestCommit(
      ::google::protobuf::internal::ConstantInitialized);

  inline RequestCommit(const RequestCommit& from) : RequestCommit(nullptr, from) {}
  inline RequestCommit(RequestCommit&& from) noexcept
      : RequestCommit(nullptr, std::move(from)) {}
  inline RequestCommit& operator=(const RequestCommit& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestCommit& operator=(RequestCommit&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestCommit& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestCommit* internal_default_instance() {
    return reinterpret_cast<const RequestCommit*>(
        &_RequestCommit_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(RequestCommit& a, RequestCommit& b) { a.Swap(&b); }
  inline void Swap(RequestCommit* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestCommit* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestCommit* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<RequestCommit>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RequestCommit& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RequestCommit& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.RequestCommit"; }

 protected:
  explicit RequestCommit(::google::protobuf::Arena* arena);
  RequestCommit(::google::protobuf::Arena* arena, const RequestCommit& from);
  RequestCommit(::google::protobuf::Arena* arena, RequestCommit&& from) noexcept
      : RequestCommit(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:tendermint.abci.RequestCommit)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RequestCommit& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class RequestCheckTx final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.RequestCheckTx) */ {
 public:
  inline RequestCheckTx() : RequestCheckTx(nullptr) {}
  ~RequestCheckTx() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RequestCheckTx* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RequestCheckTx));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RequestCheckTx(
      ::google::protobuf::internal::ConstantInitialized);

  inline RequestCheckTx(const RequestCheckTx& from) : RequestCheckTx(nullptr, from) {}
  inline RequestCheckTx(RequestCheckTx&& from) noexcept
      : RequestCheckTx(nullptr, std::move(from)) {}
  inline RequestCheckTx& operator=(const RequestCheckTx& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestCheckTx& operator=(RequestCheckTx&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestCheckTx& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestCheckTx* internal_default_instance() {
    return reinterpret_cast<const RequestCheckTx*>(
        &_RequestCheckTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(RequestCheckTx& a, RequestCheckTx& b) { a.Swap(&b); }
  inline void Swap(RequestCheckTx* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestCheckTx* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestCheckTx* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RequestCheckTx>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestCheckTx& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RequestCheckTx& from) { RequestCheckTx::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RequestCheckTx* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.RequestCheckTx"; }

 protected:
  explicit RequestCheckTx(::google::protobuf::Arena* arena);
  RequestCheckTx(::google::protobuf::Arena* arena, const RequestCheckTx& from);
  RequestCheckTx(::google::protobuf::Arena* arena, RequestCheckTx&& from) noexcept
      : RequestCheckTx(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTxFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // bytes tx = 1 [json_name = "tx"];
  void clear_tx() ;
  const std::string& tx() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tx(Arg_&& arg, Args_... args);
  std::string* mutable_tx();
  PROTOBUF_NODISCARD std::string* release_tx();
  void set_allocated_tx(std::string* value);

  private:
  const std::string& _internal_tx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tx(
      const std::string& value);
  std::string* _internal_mutable_tx();

  public:
  // .tendermint.abci.CheckTxType type = 2 [json_name = "type"];
  void clear_type() ;
  ::tendermint::abci::CheckTxType type() const;
  void set_type(::tendermint::abci::CheckTxType value);

  private:
  ::tendermint::abci::CheckTxType _internal_type() const;
  void _internal_set_type(::tendermint::abci::CheckTxType value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.RequestCheckTx)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RequestCheckTx& from_msg);
    ::google::protobuf::internal::ArenaStringPtr tx_;
    int type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class RequestApplySnapshotChunk final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.RequestApplySnapshotChunk) */ {
 public:
  inline RequestApplySnapshotChunk() : RequestApplySnapshotChunk(nullptr) {}
  ~RequestApplySnapshotChunk() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RequestApplySnapshotChunk* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RequestApplySnapshotChunk));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RequestApplySnapshotChunk(
      ::google::protobuf::internal::ConstantInitialized);

  inline RequestApplySnapshotChunk(const RequestApplySnapshotChunk& from) : RequestApplySnapshotChunk(nullptr, from) {}
  inline RequestApplySnapshotChunk(RequestApplySnapshotChunk&& from) noexcept
      : RequestApplySnapshotChunk(nullptr, std::move(from)) {}
  inline RequestApplySnapshotChunk& operator=(const RequestApplySnapshotChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestApplySnapshotChunk& operator=(RequestApplySnapshotChunk&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestApplySnapshotChunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestApplySnapshotChunk* internal_default_instance() {
    return reinterpret_cast<const RequestApplySnapshotChunk*>(
        &_RequestApplySnapshotChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(RequestApplySnapshotChunk& a, RequestApplySnapshotChunk& b) { a.Swap(&b); }
  inline void Swap(RequestApplySnapshotChunk* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestApplySnapshotChunk* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestApplySnapshotChunk* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RequestApplySnapshotChunk>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestApplySnapshotChunk& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RequestApplySnapshotChunk& from) { RequestApplySnapshotChunk::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RequestApplySnapshotChunk* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.RequestApplySnapshotChunk"; }

 protected:
  explicit RequestApplySnapshotChunk(::google::protobuf::Arena* arena);
  RequestApplySnapshotChunk(::google::protobuf::Arena* arena, const RequestApplySnapshotChunk& from);
  RequestApplySnapshotChunk(::google::protobuf::Arena* arena, RequestApplySnapshotChunk&& from) noexcept
      : RequestApplySnapshotChunk(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChunkFieldNumber = 2,
    kSenderFieldNumber = 3,
    kIndexFieldNumber = 1,
  };
  // bytes chunk = 2 [json_name = "chunk"];
  void clear_chunk() ;
  const std::string& chunk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chunk(Arg_&& arg, Args_... args);
  std::string* mutable_chunk();
  PROTOBUF_NODISCARD std::string* release_chunk();
  void set_allocated_chunk(std::string* value);

  private:
  const std::string& _internal_chunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chunk(
      const std::string& value);
  std::string* _internal_mutable_chunk();

  public:
  // string sender = 3 [json_name = "sender"];
  void clear_sender() ;
  const std::string& sender() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* value);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // uint32 index = 1 [json_name = "index"];
  void clear_index() ;
  ::uint32_t index() const;
  void set_index(::uint32_t value);

  private:
  ::uint32_t _internal_index() const;
  void _internal_set_index(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.RequestApplySnapshotChunk)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      56, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RequestApplySnapshotChunk& from_msg);
    ::google::protobuf::internal::ArenaStringPtr chunk_;
    ::google::protobuf::internal::ArenaStringPtr sender_;
    ::uint32_t index_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class EventAttribute final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.EventAttribute) */ {
 public:
  inline EventAttribute() : EventAttribute(nullptr) {}
  ~EventAttribute() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EventAttribute* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EventAttribute));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EventAttribute(
      ::google::protobuf::internal::ConstantInitialized);

  inline EventAttribute(const EventAttribute& from) : EventAttribute(nullptr, from) {}
  inline EventAttribute(EventAttribute&& from) noexcept
      : EventAttribute(nullptr, std::move(from)) {}
  inline EventAttribute& operator=(const EventAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventAttribute& operator=(EventAttribute&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventAttribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventAttribute* internal_default_instance() {
    return reinterpret_cast<const EventAttribute*>(
        &_EventAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 38;
  friend void swap(EventAttribute& a, EventAttribute& b) { a.Swap(&b); }
  inline void Swap(EventAttribute* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventAttribute* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventAttribute* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EventAttribute>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EventAttribute& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EventAttribute& from) { EventAttribute::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EventAttribute* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.EventAttribute"; }

 protected:
  explicit EventAttribute(::google::protobuf::Arena* arena);
  EventAttribute(::google::protobuf::Arena* arena, const EventAttribute& from);
  EventAttribute(::google::protobuf::Arena* arena, EventAttribute&& from) noexcept
      : EventAttribute(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kIndexFieldNumber = 3,
  };
  // string key = 1 [json_name = "key"];
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // string value = 2 [json_name = "value"];
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // bool index = 3 [json_name = "index"];
  void clear_index() ;
  bool index() const;
  void set_index(bool value);

  private:
  bool _internal_index() const;
  void _internal_set_index(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.EventAttribute)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      47, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EventAttribute& from_msg);
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    bool index_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class VoteInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.VoteInfo) */ {
 public:
  inline VoteInfo() : VoteInfo(nullptr) {}
  ~VoteInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(VoteInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(VoteInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VoteInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline VoteInfo(const VoteInfo& from) : VoteInfo(nullptr, from) {}
  inline VoteInfo(VoteInfo&& from) noexcept
      : VoteInfo(nullptr, std::move(from)) {}
  inline VoteInfo& operator=(const VoteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoteInfo& operator=(VoteInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VoteInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoteInfo* internal_default_instance() {
    return reinterpret_cast<const VoteInfo*>(
        &_VoteInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 43;
  friend void swap(VoteInfo& a, VoteInfo& b) { a.Swap(&b); }
  inline void Swap(VoteInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoteInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VoteInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<VoteInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VoteInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VoteInfo& from) { VoteInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(VoteInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.VoteInfo"; }

 protected:
  explicit VoteInfo(::google::protobuf::Arena* arena);
  VoteInfo(::google::protobuf::Arena* arena, const VoteInfo& from);
  VoteInfo(::google::protobuf::Arena* arena, VoteInfo&& from) noexcept
      : VoteInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValidatorFieldNumber = 1,
    kBlockIdFlagFieldNumber = 3,
  };
  // .tendermint.abci.Validator validator = 1 [json_name = "validator", (.gogoproto.nullable) = false];
  bool has_validator() const;
  void clear_validator() ;
  const ::tendermint::abci::Validator& validator() const;
  PROTOBUF_NODISCARD ::tendermint::abci::Validator* release_validator();
  ::tendermint::abci::Validator* mutable_validator();
  void set_allocated_validator(::tendermint::abci::Validator* value);
  void unsafe_arena_set_allocated_validator(::tendermint::abci::Validator* value);
  ::tendermint::abci::Validator* unsafe_arena_release_validator();

  private:
  const ::tendermint::abci::Validator& _internal_validator() const;
  ::tendermint::abci::Validator* _internal_mutable_validator();

  public:
  // .tendermint.types.BlockIDFlag block_id_flag = 3 [json_name = "blockIdFlag"];
  void clear_block_id_flag() ;
  ::tendermint::types::BlockIDFlag block_id_flag() const;
  void set_block_id_flag(::tendermint::types::BlockIDFlag value);

  private:
  ::tendermint::types::BlockIDFlag _internal_block_id_flag() const;
  void _internal_set_block_id_flag(::tendermint::types::BlockIDFlag value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.VoteInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VoteInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::tendermint::abci::Validator* validator_;
    int block_id_flag_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ValidatorUpdate final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.ValidatorUpdate) */ {
 public:
  inline ValidatorUpdate() : ValidatorUpdate(nullptr) {}
  ~ValidatorUpdate() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ValidatorUpdate* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ValidatorUpdate));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ValidatorUpdate(
      ::google::protobuf::internal::ConstantInitialized);

  inline ValidatorUpdate(const ValidatorUpdate& from) : ValidatorUpdate(nullptr, from) {}
  inline ValidatorUpdate(ValidatorUpdate&& from) noexcept
      : ValidatorUpdate(nullptr, std::move(from)) {}
  inline ValidatorUpdate& operator=(const ValidatorUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatorUpdate& operator=(ValidatorUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidatorUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidatorUpdate* internal_default_instance() {
    return reinterpret_cast<const ValidatorUpdate*>(
        &_ValidatorUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 42;
  friend void swap(ValidatorUpdate& a, ValidatorUpdate& b) { a.Swap(&b); }
  inline void Swap(ValidatorUpdate* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatorUpdate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidatorUpdate* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ValidatorUpdate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ValidatorUpdate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ValidatorUpdate& from) { ValidatorUpdate::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ValidatorUpdate* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.ValidatorUpdate"; }

 protected:
  explicit ValidatorUpdate(::google::protobuf::Arena* arena);
  ValidatorUpdate(::google::protobuf::Arena* arena, const ValidatorUpdate& from);
  ValidatorUpdate(::google::protobuf::Arena* arena, ValidatorUpdate&& from) noexcept
      : ValidatorUpdate(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPubKeyFieldNumber = 1,
    kPowerFieldNumber = 2,
  };
  // .tendermint.crypto.PublicKey pub_key = 1 [json_name = "pubKey", (.gogoproto.nullable) = false];
  bool has_pub_key() const;
  void clear_pub_key() ;
  const ::tendermint::crypto::PublicKey& pub_key() const;
  PROTOBUF_NODISCARD ::tendermint::crypto::PublicKey* release_pub_key();
  ::tendermint::crypto::PublicKey* mutable_pub_key();
  void set_allocated_pub_key(::tendermint::crypto::PublicKey* value);
  void unsafe_arena_set_allocated_pub_key(::tendermint::crypto::PublicKey* value);
  ::tendermint::crypto::PublicKey* unsafe_arena_release_pub_key();

  private:
  const ::tendermint::crypto::PublicKey& _internal_pub_key() const;
  ::tendermint::crypto::PublicKey* _internal_mutable_pub_key();

  public:
  // int64 power = 2 [json_name = "power"];
  void clear_power() ;
  ::int64_t power() const;
  void set_power(::int64_t value);

  private:
  ::int64_t _internal_power() const;
  void _internal_set_power(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.ValidatorUpdate)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ValidatorUpdate& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::tendermint::crypto::PublicKey* pub_key_;
    ::int64_t power_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ResponseListSnapshots final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.ResponseListSnapshots) */ {
 public:
  inline ResponseListSnapshots() : ResponseListSnapshots(nullptr) {}
  ~ResponseListSnapshots() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResponseListSnapshots* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResponseListSnapshots));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseListSnapshots(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResponseListSnapshots(const ResponseListSnapshots& from) : ResponseListSnapshots(nullptr, from) {}
  inline ResponseListSnapshots(ResponseListSnapshots&& from) noexcept
      : ResponseListSnapshots(nullptr, std::move(from)) {}
  inline ResponseListSnapshots& operator=(const ResponseListSnapshots& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseListSnapshots& operator=(ResponseListSnapshots&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseListSnapshots& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseListSnapshots* internal_default_instance() {
    return reinterpret_cast<const ResponseListSnapshots*>(
        &_ResponseListSnapshots_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 26;
  friend void swap(ResponseListSnapshots& a, ResponseListSnapshots& b) { a.Swap(&b); }
  inline void Swap(ResponseListSnapshots* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseListSnapshots* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseListSnapshots* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResponseListSnapshots>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResponseListSnapshots& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResponseListSnapshots& from) { ResponseListSnapshots::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResponseListSnapshots* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.ResponseListSnapshots"; }

 protected:
  explicit ResponseListSnapshots(::google::protobuf::Arena* arena);
  ResponseListSnapshots(::google::protobuf::Arena* arena, const ResponseListSnapshots& from);
  ResponseListSnapshots(::google::protobuf::Arena* arena, ResponseListSnapshots&& from) noexcept
      : ResponseListSnapshots(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSnapshotsFieldNumber = 1,
  };
  // repeated .tendermint.abci.Snapshot snapshots = 1 [json_name = "snapshots"];
  int snapshots_size() const;
  private:
  int _internal_snapshots_size() const;

  public:
  void clear_snapshots() ;
  ::tendermint::abci::Snapshot* mutable_snapshots(int index);
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::Snapshot>* mutable_snapshots();

  private:
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Snapshot>& _internal_snapshots() const;
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::Snapshot>* _internal_mutable_snapshots();
  public:
  const ::tendermint::abci::Snapshot& snapshots(int index) const;
  ::tendermint::abci::Snapshot* add_snapshots();
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Snapshot>& snapshots() const;
  // @@protoc_insertion_point(class_scope:tendermint.abci.ResponseListSnapshots)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResponseListSnapshots& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tendermint::abci::Snapshot > snapshots_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class RequestOfferSnapshot final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.RequestOfferSnapshot) */ {
 public:
  inline RequestOfferSnapshot() : RequestOfferSnapshot(nullptr) {}
  ~RequestOfferSnapshot() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RequestOfferSnapshot* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RequestOfferSnapshot));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RequestOfferSnapshot(
      ::google::protobuf::internal::ConstantInitialized);

  inline RequestOfferSnapshot(const RequestOfferSnapshot& from) : RequestOfferSnapshot(nullptr, from) {}
  inline RequestOfferSnapshot(RequestOfferSnapshot&& from) noexcept
      : RequestOfferSnapshot(nullptr, std::move(from)) {}
  inline RequestOfferSnapshot& operator=(const RequestOfferSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestOfferSnapshot& operator=(RequestOfferSnapshot&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestOfferSnapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestOfferSnapshot* internal_default_instance() {
    return reinterpret_cast<const RequestOfferSnapshot*>(
        &_RequestOfferSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(RequestOfferSnapshot& a, RequestOfferSnapshot& b) { a.Swap(&b); }
  inline void Swap(RequestOfferSnapshot* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestOfferSnapshot* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestOfferSnapshot* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RequestOfferSnapshot>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestOfferSnapshot& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RequestOfferSnapshot& from) { RequestOfferSnapshot::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RequestOfferSnapshot* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.RequestOfferSnapshot"; }

 protected:
  explicit RequestOfferSnapshot(::google::protobuf::Arena* arena);
  RequestOfferSnapshot(::google::protobuf::Arena* arena, const RequestOfferSnapshot& from);
  RequestOfferSnapshot(::google::protobuf::Arena* arena, RequestOfferSnapshot&& from) noexcept
      : RequestOfferSnapshot(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAppHashFieldNumber = 2,
    kSnapshotFieldNumber = 1,
  };
  // bytes app_hash = 2 [json_name = "appHash"];
  void clear_app_hash() ;
  const std::string& app_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_hash(Arg_&& arg, Args_... args);
  std::string* mutable_app_hash();
  PROTOBUF_NODISCARD std::string* release_app_hash();
  void set_allocated_app_hash(std::string* value);

  private:
  const std::string& _internal_app_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_hash(
      const std::string& value);
  std::string* _internal_mutable_app_hash();

  public:
  // .tendermint.abci.Snapshot snapshot = 1 [json_name = "snapshot"];
  bool has_snapshot() const;
  void clear_snapshot() ;
  const ::tendermint::abci::Snapshot& snapshot() const;
  PROTOBUF_NODISCARD ::tendermint::abci::Snapshot* release_snapshot();
  ::tendermint::abci::Snapshot* mutable_snapshot();
  void set_allocated_snapshot(::tendermint::abci::Snapshot* value);
  void unsafe_arena_set_allocated_snapshot(::tendermint::abci::Snapshot* value);
  ::tendermint::abci::Snapshot* unsafe_arena_release_snapshot();

  private:
  const ::tendermint::abci::Snapshot& _internal_snapshot() const;
  ::tendermint::abci::Snapshot* _internal_mutable_snapshot();

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.RequestOfferSnapshot)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RequestOfferSnapshot& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr app_hash_;
    ::tendermint::abci::Snapshot* snapshot_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Misbehavior final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.Misbehavior) */ {
 public:
  inline Misbehavior() : Misbehavior(nullptr) {}
  ~Misbehavior() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Misbehavior* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Misbehavior));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Misbehavior(
      ::google::protobuf::internal::ConstantInitialized);

  inline Misbehavior(const Misbehavior& from) : Misbehavior(nullptr, from) {}
  inline Misbehavior(Misbehavior&& from) noexcept
      : Misbehavior(nullptr, std::move(from)) {}
  inline Misbehavior& operator=(const Misbehavior& from) {
    CopyFrom(from);
    return *this;
  }
  inline Misbehavior& operator=(Misbehavior&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Misbehavior& default_instance() {
    return *internal_default_instance();
  }
  static inline const Misbehavior* internal_default_instance() {
    return reinterpret_cast<const Misbehavior*>(
        &_Misbehavior_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 45;
  friend void swap(Misbehavior& a, Misbehavior& b) { a.Swap(&b); }
  inline void Swap(Misbehavior* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Misbehavior* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Misbehavior* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Misbehavior>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Misbehavior& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Misbehavior& from) { Misbehavior::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Misbehavior* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.Misbehavior"; }

 protected:
  explicit Misbehavior(::google::protobuf::Arena* arena);
  Misbehavior(::google::protobuf::Arena* arena, const Misbehavior& from);
  Misbehavior(::google::protobuf::Arena* arena, Misbehavior&& from) noexcept
      : Misbehavior(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValidatorFieldNumber = 2,
    kTimeFieldNumber = 4,
    kHeightFieldNumber = 3,
    kTotalVotingPowerFieldNumber = 5,
    kTypeFieldNumber = 1,
  };
  // .tendermint.abci.Validator validator = 2 [json_name = "validator", (.gogoproto.nullable) = false];
  bool has_validator() const;
  void clear_validator() ;
  const ::tendermint::abci::Validator& validator() const;
  PROTOBUF_NODISCARD ::tendermint::abci::Validator* release_validator();
  ::tendermint::abci::Validator* mutable_validator();
  void set_allocated_validator(::tendermint::abci::Validator* value);
  void unsafe_arena_set_allocated_validator(::tendermint::abci::Validator* value);
  ::tendermint::abci::Validator* unsafe_arena_release_validator();

  private:
  const ::tendermint::abci::Validator& _internal_validator() const;
  ::tendermint::abci::Validator* _internal_mutable_validator();

  public:
  // .google.protobuf.Timestamp time = 4 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_time() const;
  void clear_time() ;
  const ::google::protobuf::Timestamp& time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_time();

  private:
  const ::google::protobuf::Timestamp& _internal_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_time();

  public:
  // int64 height = 3 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // int64 total_voting_power = 5 [json_name = "totalVotingPower"];
  void clear_total_voting_power() ;
  ::int64_t total_voting_power() const;
  void set_total_voting_power(::int64_t value);

  private:
  ::int64_t _internal_total_voting_power() const;
  void _internal_set_total_voting_power(::int64_t value);

  public:
  // .tendermint.abci.MisbehaviorType type = 1 [json_name = "type"];
  void clear_type() ;
  ::tendermint::abci::MisbehaviorType type() const;
  void set_type(::tendermint::abci::MisbehaviorType value);

  private:
  ::tendermint::abci::MisbehaviorType _internal_type() const;
  void _internal_set_type(::tendermint::abci::MisbehaviorType value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.Misbehavior)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Misbehavior& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::tendermint::abci::Validator* validator_;
    ::google::protobuf::Timestamp* time_;
    ::int64_t height_;
    ::int64_t total_voting_power_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ExtendedVoteInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.ExtendedVoteInfo) */ {
 public:
  inline ExtendedVoteInfo() : ExtendedVoteInfo(nullptr) {}
  ~ExtendedVoteInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ExtendedVoteInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ExtendedVoteInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ExtendedVoteInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline ExtendedVoteInfo(const ExtendedVoteInfo& from) : ExtendedVoteInfo(nullptr, from) {}
  inline ExtendedVoteInfo(ExtendedVoteInfo&& from) noexcept
      : ExtendedVoteInfo(nullptr, std::move(from)) {}
  inline ExtendedVoteInfo& operator=(const ExtendedVoteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtendedVoteInfo& operator=(ExtendedVoteInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtendedVoteInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtendedVoteInfo* internal_default_instance() {
    return reinterpret_cast<const ExtendedVoteInfo*>(
        &_ExtendedVoteInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 44;
  friend void swap(ExtendedVoteInfo& a, ExtendedVoteInfo& b) { a.Swap(&b); }
  inline void Swap(ExtendedVoteInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtendedVoteInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtendedVoteInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ExtendedVoteInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ExtendedVoteInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ExtendedVoteInfo& from) { ExtendedVoteInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ExtendedVoteInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.ExtendedVoteInfo"; }

 protected:
  explicit ExtendedVoteInfo(::google::protobuf::Arena* arena);
  ExtendedVoteInfo(::google::protobuf::Arena* arena, const ExtendedVoteInfo& from);
  ExtendedVoteInfo(::google::protobuf::Arena* arena, ExtendedVoteInfo&& from) noexcept
      : ExtendedVoteInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVoteExtensionFieldNumber = 3,
    kExtensionSignatureFieldNumber = 4,
    kValidatorFieldNumber = 1,
    kBlockIdFlagFieldNumber = 5,
  };
  // bytes vote_extension = 3 [json_name = "voteExtension"];
  void clear_vote_extension() ;
  const std::string& vote_extension() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_vote_extension(Arg_&& arg, Args_... args);
  std::string* mutable_vote_extension();
  PROTOBUF_NODISCARD std::string* release_vote_extension();
  void set_allocated_vote_extension(std::string* value);

  private:
  const std::string& _internal_vote_extension() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vote_extension(
      const std::string& value);
  std::string* _internal_mutable_vote_extension();

  public:
  // bytes extension_signature = 4 [json_name = "extensionSignature"];
  void clear_extension_signature() ;
  const std::string& extension_signature() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_extension_signature(Arg_&& arg, Args_... args);
  std::string* mutable_extension_signature();
  PROTOBUF_NODISCARD std::string* release_extension_signature();
  void set_allocated_extension_signature(std::string* value);

  private:
  const std::string& _internal_extension_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extension_signature(
      const std::string& value);
  std::string* _internal_mutable_extension_signature();

  public:
  // .tendermint.abci.Validator validator = 1 [json_name = "validator", (.gogoproto.nullable) = false];
  bool has_validator() const;
  void clear_validator() ;
  const ::tendermint::abci::Validator& validator() const;
  PROTOBUF_NODISCARD ::tendermint::abci::Validator* release_validator();
  ::tendermint::abci::Validator* mutable_validator();
  void set_allocated_validator(::tendermint::abci::Validator* value);
  void unsafe_arena_set_allocated_validator(::tendermint::abci::Validator* value);
  ::tendermint::abci::Validator* unsafe_arena_release_validator();

  private:
  const ::tendermint::abci::Validator& _internal_validator() const;
  ::tendermint::abci::Validator* _internal_mutable_validator();

  public:
  // .tendermint.types.BlockIDFlag block_id_flag = 5 [json_name = "blockIdFlag"];
  void clear_block_id_flag() ;
  ::tendermint::types::BlockIDFlag block_id_flag() const;
  void set_block_id_flag(::tendermint::types::BlockIDFlag value);

  private:
  ::tendermint::types::BlockIDFlag _internal_block_id_flag() const;
  void _internal_set_block_id_flag(::tendermint::types::BlockIDFlag value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.ExtendedVoteInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 4, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ExtendedVoteInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr vote_extension_;
    ::google::protobuf::internal::ArenaStringPtr extension_signature_;
    ::tendermint::abci::Validator* validator_;
    int block_id_flag_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Event final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Event* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Event));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Event(
      ::google::protobuf::internal::ConstantInitialized);

  inline Event(const Event& from) : Event(nullptr, from) {}
  inline Event(Event&& from) noexcept
      : Event(nullptr, std::move(from)) {}
  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
        &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 37;
  friend void swap(Event& a, Event& b) { a.Swap(&b); }
  inline void Swap(Event* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Event* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Event>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Event& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Event& from) { Event::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Event* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.Event"; }

 protected:
  explicit Event(::google::protobuf::Arena* arena);
  Event(::google::protobuf::Arena* arena, const Event& from);
  Event(::google::protobuf::Arena* arena, Event&& from) noexcept
      : Event(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAttributesFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .tendermint.abci.EventAttribute attributes = 2 [json_name = "attributes", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "attributes,omitempty"];
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;

  public:
  void clear_attributes() ;
  ::tendermint::abci::EventAttribute* mutable_attributes(int index);
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::EventAttribute>* mutable_attributes();

  private:
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::EventAttribute>& _internal_attributes() const;
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::EventAttribute>* _internal_mutable_attributes();
  public:
  const ::tendermint::abci::EventAttribute& attributes(int index) const;
  ::tendermint::abci::EventAttribute* add_attributes();
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::EventAttribute>& attributes() const;
  // string type = 1 [json_name = "type"];
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.Event)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      34, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Event& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tendermint::abci::EventAttribute > attributes_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ResponseQuery final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.ResponseQuery) */ {
 public:
  inline ResponseQuery() : ResponseQuery(nullptr) {}
  ~ResponseQuery() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResponseQuery* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResponseQuery));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseQuery(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResponseQuery(const ResponseQuery& from) : ResponseQuery(nullptr, from) {}
  inline ResponseQuery(ResponseQuery&& from) noexcept
      : ResponseQuery(nullptr, std::move(from)) {}
  inline ResponseQuery& operator=(const ResponseQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseQuery& operator=(ResponseQuery&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseQuery* internal_default_instance() {
    return reinterpret_cast<const ResponseQuery*>(
        &_ResponseQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(ResponseQuery& a, ResponseQuery& b) { a.Swap(&b); }
  inline void Swap(ResponseQuery* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseQuery* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseQuery* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResponseQuery>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResponseQuery& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResponseQuery& from) { ResponseQuery::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResponseQuery* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.ResponseQuery"; }

 protected:
  explicit ResponseQuery(::google::protobuf::Arena* arena);
  ResponseQuery(::google::protobuf::Arena* arena, const ResponseQuery& from);
  ResponseQuery(::google::protobuf::Arena* arena, ResponseQuery&& from) noexcept
      : ResponseQuery(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLogFieldNumber = 3,
    kInfoFieldNumber = 4,
    kKeyFieldNumber = 6,
    kValueFieldNumber = 7,
    kCodespaceFieldNumber = 10,
    kProofOpsFieldNumber = 8,
    kIndexFieldNumber = 5,
    kHeightFieldNumber = 9,
    kCodeFieldNumber = 1,
  };
  // string log = 3 [json_name = "log"];
  void clear_log() ;
  const std::string& log() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_log(Arg_&& arg, Args_... args);
  std::string* mutable_log();
  PROTOBUF_NODISCARD std::string* release_log();
  void set_allocated_log(std::string* value);

  private:
  const std::string& _internal_log() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log(
      const std::string& value);
  std::string* _internal_mutable_log();

  public:
  // string info = 4 [json_name = "info"];
  void clear_info() ;
  const std::string& info() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_info(Arg_&& arg, Args_... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* value);

  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(
      const std::string& value);
  std::string* _internal_mutable_info();

  public:
  // bytes key = 6 [json_name = "key"];
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // bytes value = 7 [json_name = "value"];
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // string codespace = 10 [json_name = "codespace"];
  void clear_codespace() ;
  const std::string& codespace() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_codespace(Arg_&& arg, Args_... args);
  std::string* mutable_codespace();
  PROTOBUF_NODISCARD std::string* release_codespace();
  void set_allocated_codespace(std::string* value);

  private:
  const std::string& _internal_codespace() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_codespace(
      const std::string& value);
  std::string* _internal_mutable_codespace();

  public:
  // .tendermint.crypto.ProofOps proof_ops = 8 [json_name = "proofOps"];
  bool has_proof_ops() const;
  void clear_proof_ops() ;
  const ::tendermint::crypto::ProofOps& proof_ops() const;
  PROTOBUF_NODISCARD ::tendermint::crypto::ProofOps* release_proof_ops();
  ::tendermint::crypto::ProofOps* mutable_proof_ops();
  void set_allocated_proof_ops(::tendermint::crypto::ProofOps* value);
  void unsafe_arena_set_allocated_proof_ops(::tendermint::crypto::ProofOps* value);
  ::tendermint::crypto::ProofOps* unsafe_arena_release_proof_ops();

  private:
  const ::tendermint::crypto::ProofOps& _internal_proof_ops() const;
  ::tendermint::crypto::ProofOps* _internal_mutable_proof_ops();

  public:
  // int64 index = 5 [json_name = "index"];
  void clear_index() ;
  ::int64_t index() const;
  void set_index(::int64_t value);

  private:
  ::int64_t _internal_index() const;
  void _internal_set_index(::int64_t value);

  public:
  // int64 height = 9 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // uint32 code = 1 [json_name = "code"];
  void clear_code() ;
  ::uint32_t code() const;
  void set_code(::uint32_t value);

  private:
  ::uint32_t _internal_code() const;
  void _internal_set_code(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.ResponseQuery)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 1,
      62, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResponseQuery& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr log_;
    ::google::protobuf::internal::ArenaStringPtr info_;
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    ::google::protobuf::internal::ArenaStringPtr codespace_;
    ::tendermint::crypto::ProofOps* proof_ops_;
    ::int64_t index_;
    ::int64_t height_;
    ::uint32_t code_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ResponseCheckTx final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.ResponseCheckTx) */ {
 public:
  inline ResponseCheckTx() : ResponseCheckTx(nullptr) {}
  ~ResponseCheckTx() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResponseCheckTx* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResponseCheckTx));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseCheckTx(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResponseCheckTx(const ResponseCheckTx& from) : ResponseCheckTx(nullptr, from) {}
  inline ResponseCheckTx(ResponseCheckTx&& from) noexcept
      : ResponseCheckTx(nullptr, std::move(from)) {}
  inline ResponseCheckTx& operator=(const ResponseCheckTx& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseCheckTx& operator=(ResponseCheckTx&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseCheckTx& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseCheckTx* internal_default_instance() {
    return reinterpret_cast<const ResponseCheckTx*>(
        &_ResponseCheckTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 24;
  friend void swap(ResponseCheckTx& a, ResponseCheckTx& b) { a.Swap(&b); }
  inline void Swap(ResponseCheckTx* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseCheckTx* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseCheckTx* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResponseCheckTx>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResponseCheckTx& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResponseCheckTx& from) { ResponseCheckTx::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResponseCheckTx* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.ResponseCheckTx"; }

 protected:
  explicit ResponseCheckTx(::google::protobuf::Arena* arena);
  ResponseCheckTx(::google::protobuf::Arena* arena, const ResponseCheckTx& from);
  ResponseCheckTx(::google::protobuf::Arena* arena, ResponseCheckTx&& from) noexcept
      : ResponseCheckTx(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEventsFieldNumber = 7,
    kDataFieldNumber = 2,
    kLogFieldNumber = 3,
    kInfoFieldNumber = 4,
    kCodespaceFieldNumber = 8,
    kGasWantedFieldNumber = 5,
    kGasUsedFieldNumber = 6,
    kCodeFieldNumber = 1,
  };
  // repeated .tendermint.abci.Event events = 7 [json_name = "events", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
  int events_size() const;
  private:
  int _internal_events_size() const;

  public:
  void clear_events() ;
  ::tendermint::abci::Event* mutable_events(int index);
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>* mutable_events();

  private:
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>& _internal_events() const;
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>* _internal_mutable_events();
  public:
  const ::tendermint::abci::Event& events(int index) const;
  ::tendermint::abci::Event* add_events();
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>& events() const;
  // bytes data = 2 [json_name = "data"];
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // string log = 3 [json_name = "log"];
  void clear_log() ;
  const std::string& log() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_log(Arg_&& arg, Args_... args);
  std::string* mutable_log();
  PROTOBUF_NODISCARD std::string* release_log();
  void set_allocated_log(std::string* value);

  private:
  const std::string& _internal_log() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log(
      const std::string& value);
  std::string* _internal_mutable_log();

  public:
  // string info = 4 [json_name = "info"];
  void clear_info() ;
  const std::string& info() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_info(Arg_&& arg, Args_... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* value);

  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(
      const std::string& value);
  std::string* _internal_mutable_info();

  public:
  // string codespace = 8 [json_name = "codespace"];
  void clear_codespace() ;
  const std::string& codespace() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_codespace(Arg_&& arg, Args_... args);
  std::string* mutable_codespace();
  PROTOBUF_NODISCARD std::string* release_codespace();
  void set_allocated_codespace(std::string* value);

  private:
  const std::string& _internal_codespace() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_codespace(
      const std::string& value);
  std::string* _internal_mutable_codespace();

  public:
  // int64 gas_wanted = 5 [json_name = "gas_wanted"];
  void clear_gas_wanted() ;
  ::int64_t gas_wanted() const;
  void set_gas_wanted(::int64_t value);

  private:
  ::int64_t _internal_gas_wanted() const;
  void _internal_set_gas_wanted(::int64_t value);

  public:
  // int64 gas_used = 6 [json_name = "gas_used"];
  void clear_gas_used() ;
  ::int64_t gas_used() const;
  void set_gas_used(::int64_t value);

  private:
  ::int64_t _internal_gas_used() const;
  void _internal_set_gas_used(::int64_t value);

  public:
  // uint32 code = 1 [json_name = "code"];
  void clear_code() ;
  ::uint32_t code() const;
  void set_code(::uint32_t value);

  private:
  ::uint32_t _internal_code() const;
  void _internal_set_code(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.ResponseCheckTx)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 1,
      64, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResponseCheckTx& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tendermint::abci::Event > events_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::ArenaStringPtr log_;
    ::google::protobuf::internal::ArenaStringPtr info_;
    ::google::protobuf::internal::ArenaStringPtr codespace_;
    ::int64_t gas_wanted_;
    ::int64_t gas_used_;
    ::uint32_t code_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ExtendedCommitInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.ExtendedCommitInfo) */ {
 public:
  inline ExtendedCommitInfo() : ExtendedCommitInfo(nullptr) {}
  ~ExtendedCommitInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ExtendedCommitInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ExtendedCommitInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ExtendedCommitInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline ExtendedCommitInfo(const ExtendedCommitInfo& from) : ExtendedCommitInfo(nullptr, from) {}
  inline ExtendedCommitInfo(ExtendedCommitInfo&& from) noexcept
      : ExtendedCommitInfo(nullptr, std::move(from)) {}
  inline ExtendedCommitInfo& operator=(const ExtendedCommitInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtendedCommitInfo& operator=(ExtendedCommitInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtendedCommitInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtendedCommitInfo* internal_default_instance() {
    return reinterpret_cast<const ExtendedCommitInfo*>(
        &_ExtendedCommitInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 36;
  friend void swap(ExtendedCommitInfo& a, ExtendedCommitInfo& b) { a.Swap(&b); }
  inline void Swap(ExtendedCommitInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtendedCommitInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtendedCommitInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ExtendedCommitInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ExtendedCommitInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ExtendedCommitInfo& from) { ExtendedCommitInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ExtendedCommitInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.ExtendedCommitInfo"; }

 protected:
  explicit ExtendedCommitInfo(::google::protobuf::Arena* arena);
  ExtendedCommitInfo(::google::protobuf::Arena* arena, const ExtendedCommitInfo& from);
  ExtendedCommitInfo(::google::protobuf::Arena* arena, ExtendedCommitInfo&& from) noexcept
      : ExtendedCommitInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVotesFieldNumber = 2,
    kRoundFieldNumber = 1,
  };
  // repeated .tendermint.abci.ExtendedVoteInfo votes = 2 [json_name = "votes", (.gogoproto.nullable) = false];
  int votes_size() const;
  private:
  int _internal_votes_size() const;

  public:
  void clear_votes() ;
  ::tendermint::abci::ExtendedVoteInfo* mutable_votes(int index);
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::ExtendedVoteInfo>* mutable_votes();

  private:
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::ExtendedVoteInfo>& _internal_votes() const;
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::ExtendedVoteInfo>* _internal_mutable_votes();
  public:
  const ::tendermint::abci::ExtendedVoteInfo& votes(int index) const;
  ::tendermint::abci::ExtendedVoteInfo* add_votes();
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::ExtendedVoteInfo>& votes() const;
  // int32 round = 1 [json_name = "round"];
  void clear_round() ;
  ::int32_t round() const;
  void set_round(::int32_t value);

  private:
  ::int32_t _internal_round() const;
  void _internal_set_round(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.ExtendedCommitInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ExtendedCommitInfo& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tendermint::abci::ExtendedVoteInfo > votes_;
    ::int32_t round_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ExecTxResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.ExecTxResult) */ {
 public:
  inline ExecTxResult() : ExecTxResult(nullptr) {}
  ~ExecTxResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ExecTxResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ExecTxResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ExecTxResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline ExecTxResult(const ExecTxResult& from) : ExecTxResult(nullptr, from) {}
  inline ExecTxResult(ExecTxResult&& from) noexcept
      : ExecTxResult(nullptr, std::move(from)) {}
  inline ExecTxResult& operator=(const ExecTxResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecTxResult& operator=(ExecTxResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecTxResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecTxResult* internal_default_instance() {
    return reinterpret_cast<const ExecTxResult*>(
        &_ExecTxResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 39;
  friend void swap(ExecTxResult& a, ExecTxResult& b) { a.Swap(&b); }
  inline void Swap(ExecTxResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecTxResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExecTxResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ExecTxResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ExecTxResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ExecTxResult& from) { ExecTxResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ExecTxResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.ExecTxResult"; }

 protected:
  explicit ExecTxResult(::google::protobuf::Arena* arena);
  ExecTxResult(::google::protobuf::Arena* arena, const ExecTxResult& from);
  ExecTxResult(::google::protobuf::Arena* arena, ExecTxResult&& from) noexcept
      : ExecTxResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEventsFieldNumber = 7,
    kDataFieldNumber = 2,
    kLogFieldNumber = 3,
    kInfoFieldNumber = 4,
    kCodespaceFieldNumber = 8,
    kGasWantedFieldNumber = 5,
    kGasUsedFieldNumber = 6,
    kCodeFieldNumber = 1,
  };
  // repeated .tendermint.abci.Event events = 7 [json_name = "events", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
  int events_size() const;
  private:
  int _internal_events_size() const;

  public:
  void clear_events() ;
  ::tendermint::abci::Event* mutable_events(int index);
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>* mutable_events();

  private:
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>& _internal_events() const;
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>* _internal_mutable_events();
  public:
  const ::tendermint::abci::Event& events(int index) const;
  ::tendermint::abci::Event* add_events();
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>& events() const;
  // bytes data = 2 [json_name = "data"];
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // string log = 3 [json_name = "log"];
  void clear_log() ;
  const std::string& log() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_log(Arg_&& arg, Args_... args);
  std::string* mutable_log();
  PROTOBUF_NODISCARD std::string* release_log();
  void set_allocated_log(std::string* value);

  private:
  const std::string& _internal_log() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log(
      const std::string& value);
  std::string* _internal_mutable_log();

  public:
  // string info = 4 [json_name = "info"];
  void clear_info() ;
  const std::string& info() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_info(Arg_&& arg, Args_... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* value);

  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(
      const std::string& value);
  std::string* _internal_mutable_info();

  public:
  // string codespace = 8 [json_name = "codespace"];
  void clear_codespace() ;
  const std::string& codespace() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_codespace(Arg_&& arg, Args_... args);
  std::string* mutable_codespace();
  PROTOBUF_NODISCARD std::string* release_codespace();
  void set_allocated_codespace(std::string* value);

  private:
  const std::string& _internal_codespace() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_codespace(
      const std::string& value);
  std::string* _internal_mutable_codespace();

  public:
  // int64 gas_wanted = 5 [json_name = "gas_wanted"];
  void clear_gas_wanted() ;
  ::int64_t gas_wanted() const;
  void set_gas_wanted(::int64_t value);

  private:
  ::int64_t _internal_gas_wanted() const;
  void _internal_set_gas_wanted(::int64_t value);

  public:
  // int64 gas_used = 6 [json_name = "gas_used"];
  void clear_gas_used() ;
  ::int64_t gas_used() const;
  void set_gas_used(::int64_t value);

  private:
  ::int64_t _internal_gas_used() const;
  void _internal_set_gas_used(::int64_t value);

  public:
  // uint32 code = 1 [json_name = "code"];
  void clear_code() ;
  ::uint32_t code() const;
  void set_code(::uint32_t value);

  private:
  ::uint32_t _internal_code() const;
  void _internal_set_code(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.ExecTxResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 1,
      61, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ExecTxResult& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tendermint::abci::Event > events_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::ArenaStringPtr log_;
    ::google::protobuf::internal::ArenaStringPtr info_;
    ::google::protobuf::internal::ArenaStringPtr codespace_;
    ::int64_t gas_wanted_;
    ::int64_t gas_used_;
    ::uint32_t code_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class CommitInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.CommitInfo) */ {
 public:
  inline CommitInfo() : CommitInfo(nullptr) {}
  ~CommitInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CommitInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CommitInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CommitInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline CommitInfo(const CommitInfo& from) : CommitInfo(nullptr, from) {}
  inline CommitInfo(CommitInfo&& from) noexcept
      : CommitInfo(nullptr, std::move(from)) {}
  inline CommitInfo& operator=(const CommitInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommitInfo& operator=(CommitInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommitInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommitInfo* internal_default_instance() {
    return reinterpret_cast<const CommitInfo*>(
        &_CommitInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 35;
  friend void swap(CommitInfo& a, CommitInfo& b) { a.Swap(&b); }
  inline void Swap(CommitInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommitInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommitInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CommitInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CommitInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CommitInfo& from) { CommitInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CommitInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.CommitInfo"; }

 protected:
  explicit CommitInfo(::google::protobuf::Arena* arena);
  CommitInfo(::google::protobuf::Arena* arena, const CommitInfo& from);
  CommitInfo(::google::protobuf::Arena* arena, CommitInfo&& from) noexcept
      : CommitInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVotesFieldNumber = 2,
    kRoundFieldNumber = 1,
  };
  // repeated .tendermint.abci.VoteInfo votes = 2 [json_name = "votes", (.gogoproto.nullable) = false];
  int votes_size() const;
  private:
  int _internal_votes_size() const;

  public:
  void clear_votes() ;
  ::tendermint::abci::VoteInfo* mutable_votes(int index);
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::VoteInfo>* mutable_votes();

  private:
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::VoteInfo>& _internal_votes() const;
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::VoteInfo>* _internal_mutable_votes();
  public:
  const ::tendermint::abci::VoteInfo& votes(int index) const;
  ::tendermint::abci::VoteInfo* add_votes();
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::VoteInfo>& votes() const;
  // int32 round = 1 [json_name = "round"];
  void clear_round() ;
  ::int32_t round() const;
  void set_round(::int32_t value);

  private:
  ::int32_t _internal_round() const;
  void _internal_set_round(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.CommitInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CommitInfo& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tendermint::abci::VoteInfo > votes_;
    ::int32_t round_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class TxResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.TxResult) */ {
 public:
  inline TxResult() : TxResult(nullptr) {}
  ~TxResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TxResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TxResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TxResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline TxResult(const TxResult& from) : TxResult(nullptr, from) {}
  inline TxResult(TxResult&& from) noexcept
      : TxResult(nullptr, std::move(from)) {}
  inline TxResult& operator=(const TxResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxResult& operator=(TxResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxResult* internal_default_instance() {
    return reinterpret_cast<const TxResult*>(
        &_TxResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 40;
  friend void swap(TxResult& a, TxResult& b) { a.Swap(&b); }
  inline void Swap(TxResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TxResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TxResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TxResult& from) { TxResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TxResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.TxResult"; }

 protected:
  explicit TxResult(::google::protobuf::Arena* arena);
  TxResult(::google::protobuf::Arena* arena, const TxResult& from);
  TxResult(::google::protobuf::Arena* arena, TxResult&& from) noexcept
      : TxResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTxFieldNumber = 3,
    kResultFieldNumber = 4,
    kHeightFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // bytes tx = 3 [json_name = "tx"];
  void clear_tx() ;
  const std::string& tx() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tx(Arg_&& arg, Args_... args);
  std::string* mutable_tx();
  PROTOBUF_NODISCARD std::string* release_tx();
  void set_allocated_tx(std::string* value);

  private:
  const std::string& _internal_tx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tx(
      const std::string& value);
  std::string* _internal_mutable_tx();

  public:
  // .tendermint.abci.ExecTxResult result = 4 [json_name = "result", (.gogoproto.nullable) = false];
  bool has_result() const;
  void clear_result() ;
  const ::tendermint::abci::ExecTxResult& result() const;
  PROTOBUF_NODISCARD ::tendermint::abci::ExecTxResult* release_result();
  ::tendermint::abci::ExecTxResult* mutable_result();
  void set_allocated_result(::tendermint::abci::ExecTxResult* value);
  void unsafe_arena_set_allocated_result(::tendermint::abci::ExecTxResult* value);
  ::tendermint::abci::ExecTxResult* unsafe_arena_release_result();

  private:
  const ::tendermint::abci::ExecTxResult& _internal_result() const;
  ::tendermint::abci::ExecTxResult* _internal_mutable_result();

  public:
  // int64 height = 1 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // uint32 index = 2 [json_name = "index"];
  void clear_index() ;
  ::uint32_t index() const;
  void set_index(::uint32_t value);

  private:
  ::uint32_t _internal_index() const;
  void _internal_set_index(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.TxResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TxResult& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr tx_;
    ::tendermint::abci::ExecTxResult* result_;
    ::int64_t height_;
    ::uint32_t index_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ResponseInitChain final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.ResponseInitChain) */ {
 public:
  inline ResponseInitChain() : ResponseInitChain(nullptr) {}
  ~ResponseInitChain() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResponseInitChain* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResponseInitChain));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseInitChain(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResponseInitChain(const ResponseInitChain& from) : ResponseInitChain(nullptr, from) {}
  inline ResponseInitChain(ResponseInitChain&& from) noexcept
      : ResponseInitChain(nullptr, std::move(from)) {}
  inline ResponseInitChain& operator=(const ResponseInitChain& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseInitChain& operator=(ResponseInitChain&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseInitChain& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseInitChain* internal_default_instance() {
    return reinterpret_cast<const ResponseInitChain*>(
        &_ResponseInitChain_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(ResponseInitChain& a, ResponseInitChain& b) { a.Swap(&b); }
  inline void Swap(ResponseInitChain* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseInitChain* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseInitChain* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResponseInitChain>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResponseInitChain& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResponseInitChain& from) { ResponseInitChain::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResponseInitChain* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.ResponseInitChain"; }

 protected:
  explicit ResponseInitChain(::google::protobuf::Arena* arena);
  ResponseInitChain(::google::protobuf::Arena* arena, const ResponseInitChain& from);
  ResponseInitChain(::google::protobuf::Arena* arena, ResponseInitChain&& from) noexcept
      : ResponseInitChain(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValidatorsFieldNumber = 2,
    kAppHashFieldNumber = 3,
    kConsensusParamsFieldNumber = 1,
  };
  // repeated .tendermint.abci.ValidatorUpdate validators = 2 [json_name = "validators", (.gogoproto.nullable) = false];
  int validators_size() const;
  private:
  int _internal_validators_size() const;

  public:
  void clear_validators() ;
  ::tendermint::abci::ValidatorUpdate* mutable_validators(int index);
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::ValidatorUpdate>* mutable_validators();

  private:
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::ValidatorUpdate>& _internal_validators() const;
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::ValidatorUpdate>* _internal_mutable_validators();
  public:
  const ::tendermint::abci::ValidatorUpdate& validators(int index) const;
  ::tendermint::abci::ValidatorUpdate* add_validators();
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::ValidatorUpdate>& validators() const;
  // bytes app_hash = 3 [json_name = "appHash"];
  void clear_app_hash() ;
  const std::string& app_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_hash(Arg_&& arg, Args_... args);
  std::string* mutable_app_hash();
  PROTOBUF_NODISCARD std::string* release_app_hash();
  void set_allocated_app_hash(std::string* value);

  private:
  const std::string& _internal_app_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_hash(
      const std::string& value);
  std::string* _internal_mutable_app_hash();

  public:
  // .tendermint.types.ConsensusParams consensus_params = 1 [json_name = "consensusParams"];
  bool has_consensus_params() const;
  void clear_consensus_params() ;
  const ::tendermint::types::ConsensusParams& consensus_params() const;
  PROTOBUF_NODISCARD ::tendermint::types::ConsensusParams* release_consensus_params();
  ::tendermint::types::ConsensusParams* mutable_consensus_params();
  void set_allocated_consensus_params(::tendermint::types::ConsensusParams* value);
  void unsafe_arena_set_allocated_consensus_params(::tendermint::types::ConsensusParams* value);
  ::tendermint::types::ConsensusParams* unsafe_arena_release_consensus_params();

  private:
  const ::tendermint::types::ConsensusParams& _internal_consensus_params() const;
  ::tendermint::types::ConsensusParams* _internal_mutable_consensus_params();

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.ResponseInitChain)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResponseInitChain& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tendermint::abci::ValidatorUpdate > validators_;
    ::google::protobuf::internal::ArenaStringPtr app_hash_;
    ::tendermint::types::ConsensusParams* consensus_params_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ResponseFinalizeBlock final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.ResponseFinalizeBlock) */ {
 public:
  inline ResponseFinalizeBlock() : ResponseFinalizeBlock(nullptr) {}
  ~ResponseFinalizeBlock() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResponseFinalizeBlock* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResponseFinalizeBlock));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseFinalizeBlock(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResponseFinalizeBlock(const ResponseFinalizeBlock& from) : ResponseFinalizeBlock(nullptr, from) {}
  inline ResponseFinalizeBlock(ResponseFinalizeBlock&& from) noexcept
      : ResponseFinalizeBlock(nullptr, std::move(from)) {}
  inline ResponseFinalizeBlock& operator=(const ResponseFinalizeBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseFinalizeBlock& operator=(ResponseFinalizeBlock&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseFinalizeBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseFinalizeBlock* internal_default_instance() {
    return reinterpret_cast<const ResponseFinalizeBlock*>(
        &_ResponseFinalizeBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 34;
  friend void swap(ResponseFinalizeBlock& a, ResponseFinalizeBlock& b) { a.Swap(&b); }
  inline void Swap(ResponseFinalizeBlock* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseFinalizeBlock* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseFinalizeBlock* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResponseFinalizeBlock>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResponseFinalizeBlock& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResponseFinalizeBlock& from) { ResponseFinalizeBlock::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResponseFinalizeBlock* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.ResponseFinalizeBlock"; }

 protected:
  explicit ResponseFinalizeBlock(::google::protobuf::Arena* arena);
  ResponseFinalizeBlock(::google::protobuf::Arena* arena, const ResponseFinalizeBlock& from);
  ResponseFinalizeBlock(::google::protobuf::Arena* arena, ResponseFinalizeBlock&& from) noexcept
      : ResponseFinalizeBlock(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEventsFieldNumber = 1,
    kTxResultsFieldNumber = 2,
    kValidatorUpdatesFieldNumber = 3,
    kAppHashFieldNumber = 5,
    kConsensusParamUpdatesFieldNumber = 4,
  };
  // repeated .tendermint.abci.Event events = 1 [json_name = "events", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
  int events_size() const;
  private:
  int _internal_events_size() const;

  public:
  void clear_events() ;
  ::tendermint::abci::Event* mutable_events(int index);
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>* mutable_events();

  private:
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>& _internal_events() const;
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>* _internal_mutable_events();
  public:
  const ::tendermint::abci::Event& events(int index) const;
  ::tendermint::abci::Event* add_events();
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>& events() const;
  // repeated .tendermint.abci.ExecTxResult tx_results = 2 [json_name = "txResults"];
  int tx_results_size() const;
  private:
  int _internal_tx_results_size() const;

  public:
  void clear_tx_results() ;
  ::tendermint::abci::ExecTxResult* mutable_tx_results(int index);
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::ExecTxResult>* mutable_tx_results();

  private:
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::ExecTxResult>& _internal_tx_results() const;
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::ExecTxResult>* _internal_mutable_tx_results();
  public:
  const ::tendermint::abci::ExecTxResult& tx_results(int index) const;
  ::tendermint::abci::ExecTxResult* add_tx_results();
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::ExecTxResult>& tx_results() const;
  // repeated .tendermint.abci.ValidatorUpdate validator_updates = 3 [json_name = "validatorUpdates", (.gogoproto.nullable) = false];
  int validator_updates_size() const;
  private:
  int _internal_validator_updates_size() const;

  public:
  void clear_validator_updates() ;
  ::tendermint::abci::ValidatorUpdate* mutable_validator_updates(int index);
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::ValidatorUpdate>* mutable_validator_updates();

  private:
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::ValidatorUpdate>& _internal_validator_updates() const;
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::ValidatorUpdate>* _internal_mutable_validator_updates();
  public:
  const ::tendermint::abci::ValidatorUpdate& validator_updates(int index) const;
  ::tendermint::abci::ValidatorUpdate* add_validator_updates();
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::ValidatorUpdate>& validator_updates() const;
  // bytes app_hash = 5 [json_name = "appHash"];
  void clear_app_hash() ;
  const std::string& app_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_hash(Arg_&& arg, Args_... args);
  std::string* mutable_app_hash();
  PROTOBUF_NODISCARD std::string* release_app_hash();
  void set_allocated_app_hash(std::string* value);

  private:
  const std::string& _internal_app_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_hash(
      const std::string& value);
  std::string* _internal_mutable_app_hash();

  public:
  // .tendermint.types.ConsensusParams consensus_param_updates = 4 [json_name = "consensusParamUpdates"];
  bool has_consensus_param_updates() const;
  void clear_consensus_param_updates() ;
  const ::tendermint::types::ConsensusParams& consensus_param_updates() const;
  PROTOBUF_NODISCARD ::tendermint::types::ConsensusParams* release_consensus_param_updates();
  ::tendermint::types::ConsensusParams* mutable_consensus_param_updates();
  void set_allocated_consensus_param_updates(::tendermint::types::ConsensusParams* value);
  void unsafe_arena_set_allocated_consensus_param_updates(::tendermint::types::ConsensusParams* value);
  ::tendermint::types::ConsensusParams* unsafe_arena_release_consensus_param_updates();

  private:
  const ::tendermint::types::ConsensusParams& _internal_consensus_param_updates() const;
  ::tendermint::types::ConsensusParams* _internal_mutable_consensus_param_updates();

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.ResponseFinalizeBlock)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 4,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResponseFinalizeBlock& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tendermint::abci::Event > events_;
    ::google::protobuf::RepeatedPtrField< ::tendermint::abci::ExecTxResult > tx_results_;
    ::google::protobuf::RepeatedPtrField< ::tendermint::abci::ValidatorUpdate > validator_updates_;
    ::google::protobuf::internal::ArenaStringPtr app_hash_;
    ::tendermint::types::ConsensusParams* consensus_param_updates_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class RequestProcessProposal final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.RequestProcessProposal) */ {
 public:
  inline RequestProcessProposal() : RequestProcessProposal(nullptr) {}
  ~RequestProcessProposal() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RequestProcessProposal* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RequestProcessProposal));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RequestProcessProposal(
      ::google::protobuf::internal::ConstantInitialized);

  inline RequestProcessProposal(const RequestProcessProposal& from) : RequestProcessProposal(nullptr, from) {}
  inline RequestProcessProposal(RequestProcessProposal&& from) noexcept
      : RequestProcessProposal(nullptr, std::move(from)) {}
  inline RequestProcessProposal& operator=(const RequestProcessProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestProcessProposal& operator=(RequestProcessProposal&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestProcessProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestProcessProposal* internal_default_instance() {
    return reinterpret_cast<const RequestProcessProposal*>(
        &_RequestProcessProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(RequestProcessProposal& a, RequestProcessProposal& b) { a.Swap(&b); }
  inline void Swap(RequestProcessProposal* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestProcessProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestProcessProposal* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RequestProcessProposal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestProcessProposal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RequestProcessProposal& from) { RequestProcessProposal::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RequestProcessProposal* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.RequestProcessProposal"; }

 protected:
  explicit RequestProcessProposal(::google::protobuf::Arena* arena);
  RequestProcessProposal(::google::protobuf::Arena* arena, const RequestProcessProposal& from);
  RequestProcessProposal(::google::protobuf::Arena* arena, RequestProcessProposal&& from) noexcept
      : RequestProcessProposal(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTxsFieldNumber = 1,
    kMisbehaviorFieldNumber = 3,
    kHashFieldNumber = 4,
    kNextValidatorsHashFieldNumber = 7,
    kProposerAddressFieldNumber = 8,
    kProposedLastCommitFieldNumber = 2,
    kTimeFieldNumber = 6,
    kHeightFieldNumber = 5,
  };
  // repeated bytes txs = 1 [json_name = "txs"];
  int txs_size() const;
  private:
  int _internal_txs_size() const;

  public:
  void clear_txs() ;
  const std::string& txs(int index) const;
  std::string* mutable_txs(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_txs(int index, Arg_&& value, Args_... args);
  std::string* add_txs();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_txs(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& txs() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_txs();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_txs() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_txs();

  public:
  // repeated .tendermint.abci.Misbehavior misbehavior = 3 [json_name = "misbehavior", (.gogoproto.nullable) = false];
  int misbehavior_size() const;
  private:
  int _internal_misbehavior_size() const;

  public:
  void clear_misbehavior() ;
  ::tendermint::abci::Misbehavior* mutable_misbehavior(int index);
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>* mutable_misbehavior();

  private:
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>& _internal_misbehavior() const;
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>* _internal_mutable_misbehavior();
  public:
  const ::tendermint::abci::Misbehavior& misbehavior(int index) const;
  ::tendermint::abci::Misbehavior* add_misbehavior();
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>& misbehavior() const;
  // bytes hash = 4 [json_name = "hash"];
  void clear_hash() ;
  const std::string& hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hash(Arg_&& arg, Args_... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* value);

  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(
      const std::string& value);
  std::string* _internal_mutable_hash();

  public:
  // bytes next_validators_hash = 7 [json_name = "nextValidatorsHash"];
  void clear_next_validators_hash() ;
  const std::string& next_validators_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_next_validators_hash(Arg_&& arg, Args_... args);
  std::string* mutable_next_validators_hash();
  PROTOBUF_NODISCARD std::string* release_next_validators_hash();
  void set_allocated_next_validators_hash(std::string* value);

  private:
  const std::string& _internal_next_validators_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_validators_hash(
      const std::string& value);
  std::string* _internal_mutable_next_validators_hash();

  public:
  // bytes proposer_address = 8 [json_name = "proposerAddress"];
  void clear_proposer_address() ;
  const std::string& proposer_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proposer_address(Arg_&& arg, Args_... args);
  std::string* mutable_proposer_address();
  PROTOBUF_NODISCARD std::string* release_proposer_address();
  void set_allocated_proposer_address(std::string* value);

  private:
  const std::string& _internal_proposer_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proposer_address(
      const std::string& value);
  std::string* _internal_mutable_proposer_address();

  public:
  // .tendermint.abci.CommitInfo proposed_last_commit = 2 [json_name = "proposedLastCommit", (.gogoproto.nullable) = false];
  bool has_proposed_last_commit() const;
  void clear_proposed_last_commit() ;
  const ::tendermint::abci::CommitInfo& proposed_last_commit() const;
  PROTOBUF_NODISCARD ::tendermint::abci::CommitInfo* release_proposed_last_commit();
  ::tendermint::abci::CommitInfo* mutable_proposed_last_commit();
  void set_allocated_proposed_last_commit(::tendermint::abci::CommitInfo* value);
  void unsafe_arena_set_allocated_proposed_last_commit(::tendermint::abci::CommitInfo* value);
  ::tendermint::abci::CommitInfo* unsafe_arena_release_proposed_last_commit();

  private:
  const ::tendermint::abci::CommitInfo& _internal_proposed_last_commit() const;
  ::tendermint::abci::CommitInfo* _internal_mutable_proposed_last_commit();

  public:
  // .google.protobuf.Timestamp time = 6 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_time() const;
  void clear_time() ;
  const ::google::protobuf::Timestamp& time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_time();

  private:
  const ::google::protobuf::Timestamp& _internal_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_time();

  public:
  // int64 height = 5 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.RequestProcessProposal)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RequestProcessProposal& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> txs_;
    ::google::protobuf::RepeatedPtrField< ::tendermint::abci::Misbehavior > misbehavior_;
    ::google::protobuf::internal::ArenaStringPtr hash_;
    ::google::protobuf::internal::ArenaStringPtr next_validators_hash_;
    ::google::protobuf::internal::ArenaStringPtr proposer_address_;
    ::tendermint::abci::CommitInfo* proposed_last_commit_;
    ::google::protobuf::Timestamp* time_;
    ::int64_t height_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class RequestPrepareProposal final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.RequestPrepareProposal) */ {
 public:
  inline RequestPrepareProposal() : RequestPrepareProposal(nullptr) {}
  ~RequestPrepareProposal() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RequestPrepareProposal* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RequestPrepareProposal));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RequestPrepareProposal(
      ::google::protobuf::internal::ConstantInitialized);

  inline RequestPrepareProposal(const RequestPrepareProposal& from) : RequestPrepareProposal(nullptr, from) {}
  inline RequestPrepareProposal(RequestPrepareProposal&& from) noexcept
      : RequestPrepareProposal(nullptr, std::move(from)) {}
  inline RequestPrepareProposal& operator=(const RequestPrepareProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestPrepareProposal& operator=(RequestPrepareProposal&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestPrepareProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestPrepareProposal* internal_default_instance() {
    return reinterpret_cast<const RequestPrepareProposal*>(
        &_RequestPrepareProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(RequestPrepareProposal& a, RequestPrepareProposal& b) { a.Swap(&b); }
  inline void Swap(RequestPrepareProposal* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestPrepareProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestPrepareProposal* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RequestPrepareProposal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestPrepareProposal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RequestPrepareProposal& from) { RequestPrepareProposal::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RequestPrepareProposal* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.RequestPrepareProposal"; }

 protected:
  explicit RequestPrepareProposal(::google::protobuf::Arena* arena);
  RequestPrepareProposal(::google::protobuf::Arena* arena, const RequestPrepareProposal& from);
  RequestPrepareProposal(::google::protobuf::Arena* arena, RequestPrepareProposal&& from) noexcept
      : RequestPrepareProposal(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTxsFieldNumber = 2,
    kMisbehaviorFieldNumber = 4,
    kNextValidatorsHashFieldNumber = 7,
    kProposerAddressFieldNumber = 8,
    kLocalLastCommitFieldNumber = 3,
    kTimeFieldNumber = 6,
    kMaxTxBytesFieldNumber = 1,
    kHeightFieldNumber = 5,
  };
  // repeated bytes txs = 2 [json_name = "txs"];
  int txs_size() const;
  private:
  int _internal_txs_size() const;

  public:
  void clear_txs() ;
  const std::string& txs(int index) const;
  std::string* mutable_txs(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_txs(int index, Arg_&& value, Args_... args);
  std::string* add_txs();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_txs(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& txs() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_txs();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_txs() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_txs();

  public:
  // repeated .tendermint.abci.Misbehavior misbehavior = 4 [json_name = "misbehavior", (.gogoproto.nullable) = false];
  int misbehavior_size() const;
  private:
  int _internal_misbehavior_size() const;

  public:
  void clear_misbehavior() ;
  ::tendermint::abci::Misbehavior* mutable_misbehavior(int index);
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>* mutable_misbehavior();

  private:
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>& _internal_misbehavior() const;
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>* _internal_mutable_misbehavior();
  public:
  const ::tendermint::abci::Misbehavior& misbehavior(int index) const;
  ::tendermint::abci::Misbehavior* add_misbehavior();
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>& misbehavior() const;
  // bytes next_validators_hash = 7 [json_name = "nextValidatorsHash"];
  void clear_next_validators_hash() ;
  const std::string& next_validators_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_next_validators_hash(Arg_&& arg, Args_... args);
  std::string* mutable_next_validators_hash();
  PROTOBUF_NODISCARD std::string* release_next_validators_hash();
  void set_allocated_next_validators_hash(std::string* value);

  private:
  const std::string& _internal_next_validators_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_validators_hash(
      const std::string& value);
  std::string* _internal_mutable_next_validators_hash();

  public:
  // bytes proposer_address = 8 [json_name = "proposerAddress"];
  void clear_proposer_address() ;
  const std::string& proposer_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proposer_address(Arg_&& arg, Args_... args);
  std::string* mutable_proposer_address();
  PROTOBUF_NODISCARD std::string* release_proposer_address();
  void set_allocated_proposer_address(std::string* value);

  private:
  const std::string& _internal_proposer_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proposer_address(
      const std::string& value);
  std::string* _internal_mutable_proposer_address();

  public:
  // .tendermint.abci.ExtendedCommitInfo local_last_commit = 3 [json_name = "localLastCommit", (.gogoproto.nullable) = false];
  bool has_local_last_commit() const;
  void clear_local_last_commit() ;
  const ::tendermint::abci::ExtendedCommitInfo& local_last_commit() const;
  PROTOBUF_NODISCARD ::tendermint::abci::ExtendedCommitInfo* release_local_last_commit();
  ::tendermint::abci::ExtendedCommitInfo* mutable_local_last_commit();
  void set_allocated_local_last_commit(::tendermint::abci::ExtendedCommitInfo* value);
  void unsafe_arena_set_allocated_local_last_commit(::tendermint::abci::ExtendedCommitInfo* value);
  ::tendermint::abci::ExtendedCommitInfo* unsafe_arena_release_local_last_commit();

  private:
  const ::tendermint::abci::ExtendedCommitInfo& _internal_local_last_commit() const;
  ::tendermint::abci::ExtendedCommitInfo* _internal_mutable_local_last_commit();

  public:
  // .google.protobuf.Timestamp time = 6 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_time() const;
  void clear_time() ;
  const ::google::protobuf::Timestamp& time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_time();

  private:
  const ::google::protobuf::Timestamp& _internal_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_time();

  public:
  // int64 max_tx_bytes = 1 [json_name = "maxTxBytes"];
  void clear_max_tx_bytes() ;
  ::int64_t max_tx_bytes() const;
  void set_max_tx_bytes(::int64_t value);

  private:
  ::int64_t _internal_max_tx_bytes() const;
  void _internal_set_max_tx_bytes(::int64_t value);

  public:
  // int64 height = 5 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.RequestPrepareProposal)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RequestPrepareProposal& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> txs_;
    ::google::protobuf::RepeatedPtrField< ::tendermint::abci::Misbehavior > misbehavior_;
    ::google::protobuf::internal::ArenaStringPtr next_validators_hash_;
    ::google::protobuf::internal::ArenaStringPtr proposer_address_;
    ::tendermint::abci::ExtendedCommitInfo* local_last_commit_;
    ::google::protobuf::Timestamp* time_;
    ::int64_t max_tx_bytes_;
    ::int64_t height_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class RequestInitChain final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.RequestInitChain) */ {
 public:
  inline RequestInitChain() : RequestInitChain(nullptr) {}
  ~RequestInitChain() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RequestInitChain* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RequestInitChain));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RequestInitChain(
      ::google::protobuf::internal::ConstantInitialized);

  inline RequestInitChain(const RequestInitChain& from) : RequestInitChain(nullptr, from) {}
  inline RequestInitChain(RequestInitChain&& from) noexcept
      : RequestInitChain(nullptr, std::move(from)) {}
  inline RequestInitChain& operator=(const RequestInitChain& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestInitChain& operator=(RequestInitChain&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestInitChain& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestInitChain* internal_default_instance() {
    return reinterpret_cast<const RequestInitChain*>(
        &_RequestInitChain_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(RequestInitChain& a, RequestInitChain& b) { a.Swap(&b); }
  inline void Swap(RequestInitChain* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestInitChain* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestInitChain* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RequestInitChain>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestInitChain& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RequestInitChain& from) { RequestInitChain::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RequestInitChain* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.RequestInitChain"; }

 protected:
  explicit RequestInitChain(::google::protobuf::Arena* arena);
  RequestInitChain(::google::protobuf::Arena* arena, const RequestInitChain& from);
  RequestInitChain(::google::protobuf::Arena* arena, RequestInitChain&& from) noexcept
      : RequestInitChain(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValidatorsFieldNumber = 4,
    kChainIdFieldNumber = 2,
    kAppStateBytesFieldNumber = 5,
    kTimeFieldNumber = 1,
    kConsensusParamsFieldNumber = 3,
    kInitialHeightFieldNumber = 6,
  };
  // repeated .tendermint.abci.ValidatorUpdate validators = 4 [json_name = "validators", (.gogoproto.nullable) = false];
  int validators_size() const;
  private:
  int _internal_validators_size() const;

  public:
  void clear_validators() ;
  ::tendermint::abci::ValidatorUpdate* mutable_validators(int index);
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::ValidatorUpdate>* mutable_validators();

  private:
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::ValidatorUpdate>& _internal_validators() const;
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::ValidatorUpdate>* _internal_mutable_validators();
  public:
  const ::tendermint::abci::ValidatorUpdate& validators(int index) const;
  ::tendermint::abci::ValidatorUpdate* add_validators();
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::ValidatorUpdate>& validators() const;
  // string chain_id = 2 [json_name = "chainId"];
  void clear_chain_id() ;
  const std::string& chain_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chain_id(Arg_&& arg, Args_... args);
  std::string* mutable_chain_id();
  PROTOBUF_NODISCARD std::string* release_chain_id();
  void set_allocated_chain_id(std::string* value);

  private:
  const std::string& _internal_chain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chain_id(
      const std::string& value);
  std::string* _internal_mutable_chain_id();

  public:
  // bytes app_state_bytes = 5 [json_name = "appStateBytes"];
  void clear_app_state_bytes() ;
  const std::string& app_state_bytes() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_state_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_app_state_bytes();
  PROTOBUF_NODISCARD std::string* release_app_state_bytes();
  void set_allocated_app_state_bytes(std::string* value);

  private:
  const std::string& _internal_app_state_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_state_bytes(
      const std::string& value);
  std::string* _internal_mutable_app_state_bytes();

  public:
  // .google.protobuf.Timestamp time = 1 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_time() const;
  void clear_time() ;
  const ::google::protobuf::Timestamp& time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_time();

  private:
  const ::google::protobuf::Timestamp& _internal_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_time();

  public:
  // .tendermint.types.ConsensusParams consensus_params = 3 [json_name = "consensusParams"];
  bool has_consensus_params() const;
  void clear_consensus_params() ;
  const ::tendermint::types::ConsensusParams& consensus_params() const;
  PROTOBUF_NODISCARD ::tendermint::types::ConsensusParams* release_consensus_params();
  ::tendermint::types::ConsensusParams* mutable_consensus_params();
  void set_allocated_consensus_params(::tendermint::types::ConsensusParams* value);
  void unsafe_arena_set_allocated_consensus_params(::tendermint::types::ConsensusParams* value);
  ::tendermint::types::ConsensusParams* unsafe_arena_release_consensus_params();

  private:
  const ::tendermint::types::ConsensusParams& _internal_consensus_params() const;
  ::tendermint::types::ConsensusParams* _internal_mutable_consensus_params();

  public:
  // int64 initial_height = 6 [json_name = "initialHeight"];
  void clear_initial_height() ;
  ::int64_t initial_height() const;
  void set_initial_height(::int64_t value);

  private:
  ::int64_t _internal_initial_height() const;
  void _internal_set_initial_height(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.RequestInitChain)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 3,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RequestInitChain& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tendermint::abci::ValidatorUpdate > validators_;
    ::google::protobuf::internal::ArenaStringPtr chain_id_;
    ::google::protobuf::internal::ArenaStringPtr app_state_bytes_;
    ::google::protobuf::Timestamp* time_;
    ::tendermint::types::ConsensusParams* consensus_params_;
    ::int64_t initial_height_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class RequestFinalizeBlock final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.RequestFinalizeBlock) */ {
 public:
  inline RequestFinalizeBlock() : RequestFinalizeBlock(nullptr) {}
  ~RequestFinalizeBlock() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RequestFinalizeBlock* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RequestFinalizeBlock));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RequestFinalizeBlock(
      ::google::protobuf::internal::ConstantInitialized);

  inline RequestFinalizeBlock(const RequestFinalizeBlock& from) : RequestFinalizeBlock(nullptr, from) {}
  inline RequestFinalizeBlock(RequestFinalizeBlock&& from) noexcept
      : RequestFinalizeBlock(nullptr, std::move(from)) {}
  inline RequestFinalizeBlock& operator=(const RequestFinalizeBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestFinalizeBlock& operator=(RequestFinalizeBlock&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestFinalizeBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestFinalizeBlock* internal_default_instance() {
    return reinterpret_cast<const RequestFinalizeBlock*>(
        &_RequestFinalizeBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(RequestFinalizeBlock& a, RequestFinalizeBlock& b) { a.Swap(&b); }
  inline void Swap(RequestFinalizeBlock* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestFinalizeBlock* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestFinalizeBlock* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RequestFinalizeBlock>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestFinalizeBlock& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RequestFinalizeBlock& from) { RequestFinalizeBlock::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RequestFinalizeBlock* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.RequestFinalizeBlock"; }

 protected:
  explicit RequestFinalizeBlock(::google::protobuf::Arena* arena);
  RequestFinalizeBlock(::google::protobuf::Arena* arena, const RequestFinalizeBlock& from);
  RequestFinalizeBlock(::google::protobuf::Arena* arena, RequestFinalizeBlock&& from) noexcept
      : RequestFinalizeBlock(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTxsFieldNumber = 1,
    kMisbehaviorFieldNumber = 3,
    kHashFieldNumber = 4,
    kNextValidatorsHashFieldNumber = 7,
    kProposerAddressFieldNumber = 8,
    kDecidedLastCommitFieldNumber = 2,
    kTimeFieldNumber = 6,
    kHeightFieldNumber = 5,
  };
  // repeated bytes txs = 1 [json_name = "txs"];
  int txs_size() const;
  private:
  int _internal_txs_size() const;

  public:
  void clear_txs() ;
  const std::string& txs(int index) const;
  std::string* mutable_txs(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_txs(int index, Arg_&& value, Args_... args);
  std::string* add_txs();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_txs(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& txs() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_txs();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_txs() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_txs();

  public:
  // repeated .tendermint.abci.Misbehavior misbehavior = 3 [json_name = "misbehavior", (.gogoproto.nullable) = false];
  int misbehavior_size() const;
  private:
  int _internal_misbehavior_size() const;

  public:
  void clear_misbehavior() ;
  ::tendermint::abci::Misbehavior* mutable_misbehavior(int index);
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>* mutable_misbehavior();

  private:
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>& _internal_misbehavior() const;
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>* _internal_mutable_misbehavior();
  public:
  const ::tendermint::abci::Misbehavior& misbehavior(int index) const;
  ::tendermint::abci::Misbehavior* add_misbehavior();
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>& misbehavior() const;
  // bytes hash = 4 [json_name = "hash"];
  void clear_hash() ;
  const std::string& hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hash(Arg_&& arg, Args_... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* value);

  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(
      const std::string& value);
  std::string* _internal_mutable_hash();

  public:
  // bytes next_validators_hash = 7 [json_name = "nextValidatorsHash"];
  void clear_next_validators_hash() ;
  const std::string& next_validators_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_next_validators_hash(Arg_&& arg, Args_... args);
  std::string* mutable_next_validators_hash();
  PROTOBUF_NODISCARD std::string* release_next_validators_hash();
  void set_allocated_next_validators_hash(std::string* value);

  private:
  const std::string& _internal_next_validators_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_validators_hash(
      const std::string& value);
  std::string* _internal_mutable_next_validators_hash();

  public:
  // bytes proposer_address = 8 [json_name = "proposerAddress"];
  void clear_proposer_address() ;
  const std::string& proposer_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proposer_address(Arg_&& arg, Args_... args);
  std::string* mutable_proposer_address();
  PROTOBUF_NODISCARD std::string* release_proposer_address();
  void set_allocated_proposer_address(std::string* value);

  private:
  const std::string& _internal_proposer_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proposer_address(
      const std::string& value);
  std::string* _internal_mutable_proposer_address();

  public:
  // .tendermint.abci.CommitInfo decided_last_commit = 2 [json_name = "decidedLastCommit", (.gogoproto.nullable) = false];
  bool has_decided_last_commit() const;
  void clear_decided_last_commit() ;
  const ::tendermint::abci::CommitInfo& decided_last_commit() const;
  PROTOBUF_NODISCARD ::tendermint::abci::CommitInfo* release_decided_last_commit();
  ::tendermint::abci::CommitInfo* mutable_decided_last_commit();
  void set_allocated_decided_last_commit(::tendermint::abci::CommitInfo* value);
  void unsafe_arena_set_allocated_decided_last_commit(::tendermint::abci::CommitInfo* value);
  ::tendermint::abci::CommitInfo* unsafe_arena_release_decided_last_commit();

  private:
  const ::tendermint::abci::CommitInfo& _internal_decided_last_commit() const;
  ::tendermint::abci::CommitInfo* _internal_mutable_decided_last_commit();

  public:
  // .google.protobuf.Timestamp time = 6 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_time() const;
  void clear_time() ;
  const ::google::protobuf::Timestamp& time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_time();

  private:
  const ::google::protobuf::Timestamp& _internal_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_time();

  public:
  // int64 height = 5 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.RequestFinalizeBlock)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RequestFinalizeBlock& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> txs_;
    ::google::protobuf::RepeatedPtrField< ::tendermint::abci::Misbehavior > misbehavior_;
    ::google::protobuf::internal::ArenaStringPtr hash_;
    ::google::protobuf::internal::ArenaStringPtr next_validators_hash_;
    ::google::protobuf::internal::ArenaStringPtr proposer_address_;
    ::tendermint::abci::CommitInfo* decided_last_commit_;
    ::google::protobuf::Timestamp* time_;
    ::int64_t height_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class RequestExtendVote final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.RequestExtendVote) */ {
 public:
  inline RequestExtendVote() : RequestExtendVote(nullptr) {}
  ~RequestExtendVote() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RequestExtendVote* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RequestExtendVote));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RequestExtendVote(
      ::google::protobuf::internal::ConstantInitialized);

  inline RequestExtendVote(const RequestExtendVote& from) : RequestExtendVote(nullptr, from) {}
  inline RequestExtendVote(RequestExtendVote&& from) noexcept
      : RequestExtendVote(nullptr, std::move(from)) {}
  inline RequestExtendVote& operator=(const RequestExtendVote& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestExtendVote& operator=(RequestExtendVote&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestExtendVote& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestExtendVote* internal_default_instance() {
    return reinterpret_cast<const RequestExtendVote*>(
        &_RequestExtendVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(RequestExtendVote& a, RequestExtendVote& b) { a.Swap(&b); }
  inline void Swap(RequestExtendVote* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestExtendVote* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestExtendVote* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RequestExtendVote>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestExtendVote& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RequestExtendVote& from) { RequestExtendVote::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RequestExtendVote* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.RequestExtendVote"; }

 protected:
  explicit RequestExtendVote(::google::protobuf::Arena* arena);
  RequestExtendVote(::google::protobuf::Arena* arena, const RequestExtendVote& from);
  RequestExtendVote(::google::protobuf::Arena* arena, RequestExtendVote&& from) noexcept
      : RequestExtendVote(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTxsFieldNumber = 4,
    kMisbehaviorFieldNumber = 6,
    kHashFieldNumber = 1,
    kNextValidatorsHashFieldNumber = 7,
    kProposerAddressFieldNumber = 8,
    kTimeFieldNumber = 3,
    kProposedLastCommitFieldNumber = 5,
    kHeightFieldNumber = 2,
  };
  // repeated bytes txs = 4 [json_name = "txs"];
  int txs_size() const;
  private:
  int _internal_txs_size() const;

  public:
  void clear_txs() ;
  const std::string& txs(int index) const;
  std::string* mutable_txs(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_txs(int index, Arg_&& value, Args_... args);
  std::string* add_txs();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_txs(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& txs() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_txs();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_txs() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_txs();

  public:
  // repeated .tendermint.abci.Misbehavior misbehavior = 6 [json_name = "misbehavior", (.gogoproto.nullable) = false];
  int misbehavior_size() const;
  private:
  int _internal_misbehavior_size() const;

  public:
  void clear_misbehavior() ;
  ::tendermint::abci::Misbehavior* mutable_misbehavior(int index);
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>* mutable_misbehavior();

  private:
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>& _internal_misbehavior() const;
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>* _internal_mutable_misbehavior();
  public:
  const ::tendermint::abci::Misbehavior& misbehavior(int index) const;
  ::tendermint::abci::Misbehavior* add_misbehavior();
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>& misbehavior() const;
  // bytes hash = 1 [json_name = "hash"];
  void clear_hash() ;
  const std::string& hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hash(Arg_&& arg, Args_... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* value);

  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(
      const std::string& value);
  std::string* _internal_mutable_hash();

  public:
  // bytes next_validators_hash = 7 [json_name = "nextValidatorsHash"];
  void clear_next_validators_hash() ;
  const std::string& next_validators_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_next_validators_hash(Arg_&& arg, Args_... args);
  std::string* mutable_next_validators_hash();
  PROTOBUF_NODISCARD std::string* release_next_validators_hash();
  void set_allocated_next_validators_hash(std::string* value);

  private:
  const std::string& _internal_next_validators_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_validators_hash(
      const std::string& value);
  std::string* _internal_mutable_next_validators_hash();

  public:
  // bytes proposer_address = 8 [json_name = "proposerAddress"];
  void clear_proposer_address() ;
  const std::string& proposer_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proposer_address(Arg_&& arg, Args_... args);
  std::string* mutable_proposer_address();
  PROTOBUF_NODISCARD std::string* release_proposer_address();
  void set_allocated_proposer_address(std::string* value);

  private:
  const std::string& _internal_proposer_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proposer_address(
      const std::string& value);
  std::string* _internal_mutable_proposer_address();

  public:
  // .google.protobuf.Timestamp time = 3 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_time() const;
  void clear_time() ;
  const ::google::protobuf::Timestamp& time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_time();

  private:
  const ::google::protobuf::Timestamp& _internal_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_time();

  public:
  // .tendermint.abci.CommitInfo proposed_last_commit = 5 [json_name = "proposedLastCommit", (.gogoproto.nullable) = false];
  bool has_proposed_last_commit() const;
  void clear_proposed_last_commit() ;
  const ::tendermint::abci::CommitInfo& proposed_last_commit() const;
  PROTOBUF_NODISCARD ::tendermint::abci::CommitInfo* release_proposed_last_commit();
  ::tendermint::abci::CommitInfo* mutable_proposed_last_commit();
  void set_allocated_proposed_last_commit(::tendermint::abci::CommitInfo* value);
  void unsafe_arena_set_allocated_proposed_last_commit(::tendermint::abci::CommitInfo* value);
  ::tendermint::abci::CommitInfo* unsafe_arena_release_proposed_last_commit();

  private:
  const ::tendermint::abci::CommitInfo& _internal_proposed_last_commit() const;
  ::tendermint::abci::CommitInfo* _internal_mutable_proposed_last_commit();

  public:
  // int64 height = 2 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.abci.RequestExtendVote)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RequestExtendVote& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> txs_;
    ::google::protobuf::RepeatedPtrField< ::tendermint::abci::Misbehavior > misbehavior_;
    ::google::protobuf::internal::ArenaStringPtr hash_;
    ::google::protobuf::internal::ArenaStringPtr next_validators_hash_;
    ::google::protobuf::internal::ArenaStringPtr proposer_address_;
    ::google::protobuf::Timestamp* time_;
    ::tendermint::abci::CommitInfo* proposed_last_commit_;
    ::int64_t height_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Response final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Response* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Response));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Response(
      ::google::protobuf::internal::ConstantInitialized);

  inline Response(const Response& from) : Response(nullptr, from) {}
  inline Response(Response&& from) noexcept
      : Response(nullptr, std::move(from)) {}
  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kException = 1,
    kEcho = 2,
    kFlush = 3,
    kInfo = 4,
    kInitChain = 6,
    kQuery = 7,
    kCheckTx = 9,
    kCommit = 12,
    kListSnapshots = 13,
    kOfferSnapshot = 14,
    kLoadSnapshotChunk = 15,
    kApplySnapshotChunk = 16,
    kPrepareProposal = 17,
    kProcessProposal = 18,
    kExtendVote = 19,
    kVerifyVoteExtension = 20,
    kFinalizeBlock = 21,
    VALUE_NOT_SET = 0,
  };
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
        &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(Response& a, Response& b) { a.Swap(&b); }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Response>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Response& from) { Response::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Response* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.Response"; }

 protected:
  explicit Response(::google::protobuf::Arena* arena);
  Response(::google::protobuf::Arena* arena, const Response& from);
  Response(::google::protobuf::Arena* arena, Response&& from) noexcept
      : Response(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kExceptionFieldNumber = 1,
    kEchoFieldNumber = 2,
    kFlushFieldNumber = 3,
    kInfoFieldNumber = 4,
    kInitChainFieldNumber = 6,
    kQueryFieldNumber = 7,
    kCheckTxFieldNumber = 9,
    kCommitFieldNumber = 12,
    kListSnapshotsFieldNumber = 13,
    kOfferSnapshotFieldNumber = 14,
    kLoadSnapshotChunkFieldNumber = 15,
    kApplySnapshotChunkFieldNumber = 16,
    kPrepareProposalFieldNumber = 17,
    kProcessProposalFieldNumber = 18,
    kExtendVoteFieldNumber = 19,
    kVerifyVoteExtensionFieldNumber = 20,
    kFinalizeBlockFieldNumber = 21,
  };
  // .tendermint.abci.ResponseException exception = 1 [json_name = "exception"];
  bool has_exception() const;
  private:
  bool _internal_has_exception() const;

  public:
  void clear_exception() ;
  const ::tendermint::abci::ResponseException& exception() const;
  PROTOBUF_NODISCARD ::tendermint::abci::ResponseException* release_exception();
  ::tendermint::abci::ResponseException* mutable_exception();
  void set_allocated_exception(::tendermint::abci::ResponseException* value);
  void unsafe_arena_set_allocated_exception(::tendermint::abci::ResponseException* value);
  ::tendermint::abci::ResponseException* unsafe_arena_release_exception();

  private:
  const ::tendermint::abci::ResponseException& _internal_exception() const;
  ::tendermint::abci::ResponseException* _internal_mutable_exception();

  public:
  // .tendermint.abci.ResponseEcho echo = 2 [json_name = "echo"];
  bool has_echo() const;
  private:
  bool _internal_has_echo() const;

  public:
  void clear_echo() ;
  const ::tendermint::abci::ResponseEcho& echo() const;
  PROTOBUF_NODISCARD ::tendermint::abci::ResponseEcho* release_echo();
  ::tendermint::abci::ResponseEcho* mutable_echo();
  void set_allocated_echo(::tendermint::abci::ResponseEcho* value);
  void unsafe_arena_set_allocated_echo(::tendermint::abci::ResponseEcho* value);
  ::tendermint::abci::ResponseEcho* unsafe_arena_release_echo();

  private:
  const ::tendermint::abci::ResponseEcho& _internal_echo() const;
  ::tendermint::abci::ResponseEcho* _internal_mutable_echo();

  public:
  // .tendermint.abci.ResponseFlush flush = 3 [json_name = "flush"];
  bool has_flush() const;
  private:
  bool _internal_has_flush() const;

  public:
  void clear_flush() ;
  const ::tendermint::abci::ResponseFlush& flush() const;
  PROTOBUF_NODISCARD ::tendermint::abci::ResponseFlush* release_flush();
  ::tendermint::abci::ResponseFlush* mutable_flush();
  void set_allocated_flush(::tendermint::abci::ResponseFlush* value);
  void unsafe_arena_set_allocated_flush(::tendermint::abci::ResponseFlush* value);
  ::tendermint::abci::ResponseFlush* unsafe_arena_release_flush();

  private:
  const ::tendermint::abci::ResponseFlush& _internal_flush() const;
  ::tendermint::abci::ResponseFlush* _internal_mutable_flush();

  public:
  // .tendermint.abci.ResponseInfo info = 4 [json_name = "info"];
  bool has_info() const;
  private:
  bool _internal_has_info() const;

  public:
  void clear_info() ;
  const ::tendermint::abci::ResponseInfo& info() const;
  PROTOBUF_NODISCARD ::tendermint::abci::ResponseInfo* release_info();
  ::tendermint::abci::ResponseInfo* mutable_info();
  void set_allocated_info(::tendermint::abci::ResponseInfo* value);
  void unsafe_arena_set_allocated_info(::tendermint::abci::ResponseInfo* value);
  ::tendermint::abci::ResponseInfo* unsafe_arena_release_info();

  private:
  const ::tendermint::abci::ResponseInfo& _internal_info() const;
  ::tendermint::abci::ResponseInfo* _internal_mutable_info();

  public:
  // .tendermint.abci.ResponseInitChain init_chain = 6 [json_name = "initChain"];
  bool has_init_chain() const;
  private:
  bool _internal_has_init_chain() const;

  public:
  void clear_init_chain() ;
  const ::tendermint::abci::ResponseInitChain& init_chain() const;
  PROTOBUF_NODISCARD ::tendermint::abci::ResponseInitChain* release_init_chain();
  ::tendermint::abci::ResponseInitChain* mutable_init_chain();
  void set_allocated_init_chain(::tendermint::abci::ResponseInitChain* value);
  void unsafe_arena_set_allocated_init_chain(::tendermint::abci::ResponseInitChain* value);
  ::tendermint::abci::ResponseInitChain* unsafe_arena_release_init_chain();

  private:
  const ::tendermint::abci::ResponseInitChain& _internal_init_chain() const;
  ::tendermint::abci::ResponseInitChain* _internal_mutable_init_chain();

  public:
  // .tendermint.abci.ResponseQuery query = 7 [json_name = "query"];
  bool has_query() const;
  private:
  bool _internal_has_query() const;

  public:
  void clear_query() ;
  const ::tendermint::abci::ResponseQuery& query() const;
  PROTOBUF_NODISCARD ::tendermint::abci::ResponseQuery* release_query();
  ::tendermint::abci::ResponseQuery* mutable_query();
  void set_allocated_query(::tendermint::abci::ResponseQuery* value);
  void unsafe_arena_set_allocated_query(::tendermint::abci::ResponseQuery* value);
  ::tendermint::abci::ResponseQuery* unsafe_arena_release_query();

  private:
  const ::tendermint::abci::ResponseQuery& _internal_query() const;
  ::tendermint::abci::ResponseQuery* _internal_mutable_query();

  public:
  // .tendermint.abci.ResponseCheckTx check_tx = 9 [json_name = "checkTx"];
  bool has_check_tx() const;
  private:
  bool _internal_has_check_tx() const;

  public:
  void clear_check_tx() ;
  const ::tendermint::abci::ResponseCheckTx& check_tx() const;
  PROTOBUF_NODISCARD ::tendermint::abci::ResponseCheckTx* release_check_tx();
  ::tendermint::abci::ResponseCheckTx* mutable_check_tx();
  void set_allocated_check_tx(::tendermint::abci::ResponseCheckTx* value);
  void unsafe_arena_set_allocated_check_tx(::tendermint::abci::ResponseCheckTx* value);
  ::tendermint::abci::ResponseCheckTx* unsafe_arena_release_check_tx();

  private:
  const ::tendermint::abci::ResponseCheckTx& _internal_check_tx() const;
  ::tendermint::abci::ResponseCheckTx* _internal_mutable_check_tx();

  public:
  // .tendermint.abci.ResponseCommit commit = 12 [json_name = "commit"];
  bool has_commit() const;
  private:
  bool _internal_has_commit() const;

  public:
  void clear_commit() ;
  const ::tendermint::abci::ResponseCommit& commit() const;
  PROTOBUF_NODISCARD ::tendermint::abci::ResponseCommit* release_commit();
  ::tendermint::abci::ResponseCommit* mutable_commit();
  void set_allocated_commit(::tendermint::abci::ResponseCommit* value);
  void unsafe_arena_set_allocated_commit(::tendermint::abci::ResponseCommit* value);
  ::tendermint::abci::ResponseCommit* unsafe_arena_release_commit();

  private:
  const ::tendermint::abci::ResponseCommit& _internal_commit() const;
  ::tendermint::abci::ResponseCommit* _internal_mutable_commit();

  public:
  // .tendermint.abci.ResponseListSnapshots list_snapshots = 13 [json_name = "listSnapshots"];
  bool has_list_snapshots() const;
  private:
  bool _internal_has_list_snapshots() const;

  public:
  void clear_list_snapshots() ;
  const ::tendermint::abci::ResponseListSnapshots& list_snapshots() const;
  PROTOBUF_NODISCARD ::tendermint::abci::ResponseListSnapshots* release_list_snapshots();
  ::tendermint::abci::ResponseListSnapshots* mutable_list_snapshots();
  void set_allocated_list_snapshots(::tendermint::abci::ResponseListSnapshots* value);
  void unsafe_arena_set_allocated_list_snapshots(::tendermint::abci::ResponseListSnapshots* value);
  ::tendermint::abci::ResponseListSnapshots* unsafe_arena_release_list_snapshots();

  private:
  const ::tendermint::abci::ResponseListSnapshots& _internal_list_snapshots() const;
  ::tendermint::abci::ResponseListSnapshots* _internal_mutable_list_snapshots();

  public:
  // .tendermint.abci.ResponseOfferSnapshot offer_snapshot = 14 [json_name = "offerSnapshot"];
  bool has_offer_snapshot() const;
  private:
  bool _internal_has_offer_snapshot() const;

  public:
  void clear_offer_snapshot() ;
  const ::tendermint::abci::ResponseOfferSnapshot& offer_snapshot() const;
  PROTOBUF_NODISCARD ::tendermint::abci::ResponseOfferSnapshot* release_offer_snapshot();
  ::tendermint::abci::ResponseOfferSnapshot* mutable_offer_snapshot();
  void set_allocated_offer_snapshot(::tendermint::abci::ResponseOfferSnapshot* value);
  void unsafe_arena_set_allocated_offer_snapshot(::tendermint::abci::ResponseOfferSnapshot* value);
  ::tendermint::abci::ResponseOfferSnapshot* unsafe_arena_release_offer_snapshot();

  private:
  const ::tendermint::abci::ResponseOfferSnapshot& _internal_offer_snapshot() const;
  ::tendermint::abci::ResponseOfferSnapshot* _internal_mutable_offer_snapshot();

  public:
  // .tendermint.abci.ResponseLoadSnapshotChunk load_snapshot_chunk = 15 [json_name = "loadSnapshotChunk"];
  bool has_load_snapshot_chunk() const;
  private:
  bool _internal_has_load_snapshot_chunk() const;

  public:
  void clear_load_snapshot_chunk() ;
  const ::tendermint::abci::ResponseLoadSnapshotChunk& load_snapshot_chunk() const;
  PROTOBUF_NODISCARD ::tendermint::abci::ResponseLoadSnapshotChunk* release_load_snapshot_chunk();
  ::tendermint::abci::ResponseLoadSnapshotChunk* mutable_load_snapshot_chunk();
  void set_allocated_load_snapshot_chunk(::tendermint::abci::ResponseLoadSnapshotChunk* value);
  void unsafe_arena_set_allocated_load_snapshot_chunk(::tendermint::abci::ResponseLoadSnapshotChunk* value);
  ::tendermint::abci::ResponseLoadSnapshotChunk* unsafe_arena_release_load_snapshot_chunk();

  private:
  const ::tendermint::abci::ResponseLoadSnapshotChunk& _internal_load_snapshot_chunk() const;
  ::tendermint::abci::ResponseLoadSnapshotChunk* _internal_mutable_load_snapshot_chunk();

  public:
  // .tendermint.abci.ResponseApplySnapshotChunk apply_snapshot_chunk = 16 [json_name = "applySnapshotChunk"];
  bool has_apply_snapshot_chunk() const;
  private:
  bool _internal_has_apply_snapshot_chunk() const;

  public:
  void clear_apply_snapshot_chunk() ;
  const ::tendermint::abci::ResponseApplySnapshotChunk& apply_snapshot_chunk() const;
  PROTOBUF_NODISCARD ::tendermint::abci::ResponseApplySnapshotChunk* release_apply_snapshot_chunk();
  ::tendermint::abci::ResponseApplySnapshotChunk* mutable_apply_snapshot_chunk();
  void set_allocated_apply_snapshot_chunk(::tendermint::abci::ResponseApplySnapshotChunk* value);
  void unsafe_arena_set_allocated_apply_snapshot_chunk(::tendermint::abci::ResponseApplySnapshotChunk* value);
  ::tendermint::abci::ResponseApplySnapshotChunk* unsafe_arena_release_apply_snapshot_chunk();

  private:
  const ::tendermint::abci::ResponseApplySnapshotChunk& _internal_apply_snapshot_chunk() const;
  ::tendermint::abci::ResponseApplySnapshotChunk* _internal_mutable_apply_snapshot_chunk();

  public:
  // .tendermint.abci.ResponsePrepareProposal prepare_proposal = 17 [json_name = "prepareProposal"];
  bool has_prepare_proposal() const;
  private:
  bool _internal_has_prepare_proposal() const;

  public:
  void clear_prepare_proposal() ;
  const ::tendermint::abci::ResponsePrepareProposal& prepare_proposal() const;
  PROTOBUF_NODISCARD ::tendermint::abci::ResponsePrepareProposal* release_prepare_proposal();
  ::tendermint::abci::ResponsePrepareProposal* mutable_prepare_proposal();
  void set_allocated_prepare_proposal(::tendermint::abci::ResponsePrepareProposal* value);
  void unsafe_arena_set_allocated_prepare_proposal(::tendermint::abci::ResponsePrepareProposal* value);
  ::tendermint::abci::ResponsePrepareProposal* unsafe_arena_release_prepare_proposal();

  private:
  const ::tendermint::abci::ResponsePrepareProposal& _internal_prepare_proposal() const;
  ::tendermint::abci::ResponsePrepareProposal* _internal_mutable_prepare_proposal();

  public:
  // .tendermint.abci.ResponseProcessProposal process_proposal = 18 [json_name = "processProposal"];
  bool has_process_proposal() const;
  private:
  bool _internal_has_process_proposal() const;

  public:
  void clear_process_proposal() ;
  const ::tendermint::abci::ResponseProcessProposal& process_proposal() const;
  PROTOBUF_NODISCARD ::tendermint::abci::ResponseProcessProposal* release_process_proposal();
  ::tendermint::abci::ResponseProcessProposal* mutable_process_proposal();
  void set_allocated_process_proposal(::tendermint::abci::ResponseProcessProposal* value);
  void unsafe_arena_set_allocated_process_proposal(::tendermint::abci::ResponseProcessProposal* value);
  ::tendermint::abci::ResponseProcessProposal* unsafe_arena_release_process_proposal();

  private:
  const ::tendermint::abci::ResponseProcessProposal& _internal_process_proposal() const;
  ::tendermint::abci::ResponseProcessProposal* _internal_mutable_process_proposal();

  public:
  // .tendermint.abci.ResponseExtendVote extend_vote = 19 [json_name = "extendVote"];
  bool has_extend_vote() const;
  private:
  bool _internal_has_extend_vote() const;

  public:
  void clear_extend_vote() ;
  const ::tendermint::abci::ResponseExtendVote& extend_vote() const;
  PROTOBUF_NODISCARD ::tendermint::abci::ResponseExtendVote* release_extend_vote();
  ::tendermint::abci::ResponseExtendVote* mutable_extend_vote();
  void set_allocated_extend_vote(::tendermint::abci::ResponseExtendVote* value);
  void unsafe_arena_set_allocated_extend_vote(::tendermint::abci::ResponseExtendVote* value);
  ::tendermint::abci::ResponseExtendVote* unsafe_arena_release_extend_vote();

  private:
  const ::tendermint::abci::ResponseExtendVote& _internal_extend_vote() const;
  ::tendermint::abci::ResponseExtendVote* _internal_mutable_extend_vote();

  public:
  // .tendermint.abci.ResponseVerifyVoteExtension verify_vote_extension = 20 [json_name = "verifyVoteExtension"];
  bool has_verify_vote_extension() const;
  private:
  bool _internal_has_verify_vote_extension() const;

  public:
  void clear_verify_vote_extension() ;
  const ::tendermint::abci::ResponseVerifyVoteExtension& verify_vote_extension() const;
  PROTOBUF_NODISCARD ::tendermint::abci::ResponseVerifyVoteExtension* release_verify_vote_extension();
  ::tendermint::abci::ResponseVerifyVoteExtension* mutable_verify_vote_extension();
  void set_allocated_verify_vote_extension(::tendermint::abci::ResponseVerifyVoteExtension* value);
  void unsafe_arena_set_allocated_verify_vote_extension(::tendermint::abci::ResponseVerifyVoteExtension* value);
  ::tendermint::abci::ResponseVerifyVoteExtension* unsafe_arena_release_verify_vote_extension();

  private:
  const ::tendermint::abci::ResponseVerifyVoteExtension& _internal_verify_vote_extension() const;
  ::tendermint::abci::ResponseVerifyVoteExtension* _internal_mutable_verify_vote_extension();

  public:
  // .tendermint.abci.ResponseFinalizeBlock finalize_block = 21 [json_name = "finalizeBlock"];
  bool has_finalize_block() const;
  private:
  bool _internal_has_finalize_block() const;

  public:
  void clear_finalize_block() ;
  const ::tendermint::abci::ResponseFinalizeBlock& finalize_block() const;
  PROTOBUF_NODISCARD ::tendermint::abci::ResponseFinalizeBlock* release_finalize_block();
  ::tendermint::abci::ResponseFinalizeBlock* mutable_finalize_block();
  void set_allocated_finalize_block(::tendermint::abci::ResponseFinalizeBlock* value);
  void unsafe_arena_set_allocated_finalize_block(::tendermint::abci::ResponseFinalizeBlock* value);
  ::tendermint::abci::ResponseFinalizeBlock* unsafe_arena_release_finalize_block();

  private:
  const ::tendermint::abci::ResponseFinalizeBlock& _internal_finalize_block() const;
  ::tendermint::abci::ResponseFinalizeBlock* _internal_mutable_finalize_block();

  public:
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:tendermint.abci.Response)
 private:
  class _Internal;
  void set_has_exception();
  void set_has_echo();
  void set_has_flush();
  void set_has_info();
  void set_has_init_chain();
  void set_has_query();
  void set_has_check_tx();
  void set_has_commit();
  void set_has_list_snapshots();
  void set_has_offer_snapshot();
  void set_has_load_snapshot_chunk();
  void set_has_apply_snapshot_chunk();
  void set_has_prepare_proposal();
  void set_has_process_proposal();
  void set_has_extend_vote();
  void set_has_verify_vote_extension();
  void set_has_finalize_block();
  inline bool has_value() const;
  inline void clear_has_value();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 17, 17,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Response& from_msg);
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::tendermint::abci::ResponseException* exception_;
      ::tendermint::abci::ResponseEcho* echo_;
      ::tendermint::abci::ResponseFlush* flush_;
      ::tendermint::abci::ResponseInfo* info_;
      ::tendermint::abci::ResponseInitChain* init_chain_;
      ::tendermint::abci::ResponseQuery* query_;
      ::tendermint::abci::ResponseCheckTx* check_tx_;
      ::tendermint::abci::ResponseCommit* commit_;
      ::tendermint::abci::ResponseListSnapshots* list_snapshots_;
      ::tendermint::abci::ResponseOfferSnapshot* offer_snapshot_;
      ::tendermint::abci::ResponseLoadSnapshotChunk* load_snapshot_chunk_;
      ::tendermint::abci::ResponseApplySnapshotChunk* apply_snapshot_chunk_;
      ::tendermint::abci::ResponsePrepareProposal* prepare_proposal_;
      ::tendermint::abci::ResponseProcessProposal* process_proposal_;
      ::tendermint::abci::ResponseExtendVote* extend_vote_;
      ::tendermint::abci::ResponseVerifyVoteExtension* verify_vote_extension_;
      ::tendermint::abci::ResponseFinalizeBlock* finalize_block_;
    } value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Request final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tendermint.abci.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Request* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Request));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Request(
      ::google::protobuf::internal::ConstantInitialized);

  inline Request(const Request& from) : Request(nullptr, from) {}
  inline Request(Request&& from) noexcept
      : Request(nullptr, std::move(from)) {}
  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kEcho = 1,
    kFlush = 2,
    kInfo = 3,
    kInitChain = 5,
    kQuery = 6,
    kCheckTx = 8,
    kCommit = 11,
    kListSnapshots = 12,
    kOfferSnapshot = 13,
    kLoadSnapshotChunk = 14,
    kApplySnapshotChunk = 15,
    kPrepareProposal = 16,
    kProcessProposal = 17,
    kExtendVote = 18,
    kVerifyVoteExtension = 19,
    kFinalizeBlock = 20,
    VALUE_NOT_SET = 0,
  };
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
        &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Request& a, Request& b) { a.Swap(&b); }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Request>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Request& from) { Request::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Request* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tendermint.abci.Request"; }

 protected:
  explicit Request(::google::protobuf::Arena* arena);
  Request(::google::protobuf::Arena* arena, const Request& from);
  Request(::google::protobuf::Arena* arena, Request&& from) noexcept
      : Request(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEchoFieldNumber = 1,
    kFlushFieldNumber = 2,
    kInfoFieldNumber = 3,
    kInitChainFieldNumber = 5,
    kQueryFieldNumber = 6,
    kCheckTxFieldNumber = 8,
    kCommitFieldNumber = 11,
    kListSnapshotsFieldNumber = 12,
    kOfferSnapshotFieldNumber = 13,
    kLoadSnapshotChunkFieldNumber = 14,
    kApplySnapshotChunkFieldNumber = 15,
    kPrepareProposalFieldNumber = 16,
    kProcessProposalFieldNumber = 17,
    kExtendVoteFieldNumber = 18,
    kVerifyVoteExtensionFieldNumber = 19,
    kFinalizeBlockFieldNumber = 20,
  };
  // .tendermint.abci.RequestEcho echo = 1 [json_name = "echo"];
  bool has_echo() const;
  private:
  bool _internal_has_echo() const;

  public:
  void clear_echo() ;
  const ::tendermint::abci::RequestEcho& echo() const;
  PROTOBUF_NODISCARD ::tendermint::abci::RequestEcho* release_echo();
  ::tendermint::abci::RequestEcho* mutable_echo();
  void set_allocated_echo(::tendermint::abci::RequestEcho* value);
  void unsafe_arena_set_allocated_echo(::tendermint::abci::RequestEcho* value);
  ::tendermint::abci::RequestEcho* unsafe_arena_release_echo();

  private:
  const ::tendermint::abci::RequestEcho& _internal_echo() const;
  ::tendermint::abci::RequestEcho* _internal_mutable_echo();

  public:
  // .tendermint.abci.RequestFlush flush = 2 [json_name = "flush"];
  bool has_flush() const;
  private:
  bool _internal_has_flush() const;

  public:
  void clear_flush() ;
  const ::tendermint::abci::RequestFlush& flush() const;
  PROTOBUF_NODISCARD ::tendermint::abci::RequestFlush* release_flush();
  ::tendermint::abci::RequestFlush* mutable_flush();
  void set_allocated_flush(::tendermint::abci::RequestFlush* value);
  void unsafe_arena_set_allocated_flush(::tendermint::abci::RequestFlush* value);
  ::tendermint::abci::RequestFlush* unsafe_arena_release_flush();

  private:
  const ::tendermint::abci::RequestFlush& _internal_flush() const;
  ::tendermint::abci::RequestFlush* _internal_mutable_flush();

  public:
  // .tendermint.abci.RequestInfo info = 3 [json_name = "info"];
  bool has_info() const;
  private:
  bool _internal_has_info() const;

  public:
  void clear_info() ;
  const ::tendermint::abci::RequestInfo& info() const;
  PROTOBUF_NODISCARD ::tendermint::abci::RequestInfo* release_info();
  ::tendermint::abci::RequestInfo* mutable_info();
  void set_allocated_info(::tendermint::abci::RequestInfo* value);
  void unsafe_arena_set_allocated_info(::tendermint::abci::RequestInfo* value);
  ::tendermint::abci::RequestInfo* unsafe_arena_release_info();

  private:
  const ::tendermint::abci::RequestInfo& _internal_info() const;
  ::tendermint::abci::RequestInfo* _internal_mutable_info();

  public:
  // .tendermint.abci.RequestInitChain init_chain = 5 [json_name = "initChain"];
  bool has_init_chain() const;
  private:
  bool _internal_has_init_chain() const;

  public:
  void clear_init_chain() ;
  const ::tendermint::abci::RequestInitChain& init_chain() const;
  PROTOBUF_NODISCARD ::tendermint::abci::RequestInitChain* release_init_chain();
  ::tendermint::abci::RequestInitChain* mutable_init_chain();
  void set_allocated_init_chain(::tendermint::abci::RequestInitChain* value);
  void unsafe_arena_set_allocated_init_chain(::tendermint::abci::RequestInitChain* value);
  ::tendermint::abci::RequestInitChain* unsafe_arena_release_init_chain();

  private:
  const ::tendermint::abci::RequestInitChain& _internal_init_chain() const;
  ::tendermint::abci::RequestInitChain* _internal_mutable_init_chain();

  public:
  // .tendermint.abci.RequestQuery query = 6 [json_name = "query"];
  bool has_query() const;
  private:
  bool _internal_has_query() const;

  public:
  void clear_query() ;
  const ::tendermint::abci::RequestQuery& query() const;
  PROTOBUF_NODISCARD ::tendermint::abci::RequestQuery* release_query();
  ::tendermint::abci::RequestQuery* mutable_query();
  void set_allocated_query(::tendermint::abci::RequestQuery* value);
  void unsafe_arena_set_allocated_query(::tendermint::abci::RequestQuery* value);
  ::tendermint::abci::RequestQuery* unsafe_arena_release_query();

  private:
  const ::tendermint::abci::RequestQuery& _internal_query() const;
  ::tendermint::abci::RequestQuery* _internal_mutable_query();

  public:
  // .tendermint.abci.RequestCheckTx check_tx = 8 [json_name = "checkTx"];
  bool has_check_tx() const;
  private:
  bool _internal_has_check_tx() const;

  public:
  void clear_check_tx() ;
  const ::tendermint::abci::RequestCheckTx& check_tx() const;
  PROTOBUF_NODISCARD ::tendermint::abci::RequestCheckTx* release_check_tx();
  ::tendermint::abci::RequestCheckTx* mutable_check_tx();
  void set_allocated_check_tx(::tendermint::abci::RequestCheckTx* value);
  void unsafe_arena_set_allocated_check_tx(::tendermint::abci::RequestCheckTx* value);
  ::tendermint::abci::RequestCheckTx* unsafe_arena_release_check_tx();

  private:
  const ::tendermint::abci::RequestCheckTx& _internal_check_tx() const;
  ::tendermint::abci::RequestCheckTx* _internal_mutable_check_tx();

  public:
  // .tendermint.abci.RequestCommit commit = 11 [json_name = "commit"];
  bool has_commit() const;
  private:
  bool _internal_has_commit() const;

  public:
  void clear_commit() ;
  const ::tendermint::abci::RequestCommit& commit() const;
  PROTOBUF_NODISCARD ::tendermint::abci::RequestCommit* release_commit();
  ::tendermint::abci::RequestCommit* mutable_commit();
  void set_allocated_commit(::tendermint::abci::RequestCommit* value);
  void unsafe_arena_set_allocated_commit(::tendermint::abci::RequestCommit* value);
  ::tendermint::abci::RequestCommit* unsafe_arena_release_commit();

  private:
  const ::tendermint::abci::RequestCommit& _internal_commit() const;
  ::tendermint::abci::RequestCommit* _internal_mutable_commit();

  public:
  // .tendermint.abci.RequestListSnapshots list_snapshots = 12 [json_name = "listSnapshots"];
  bool has_list_snapshots() const;
  private:
  bool _internal_has_list_snapshots() const;

  public:
  void clear_list_snapshots() ;
  const ::tendermint::abci::RequestListSnapshots& list_snapshots() const;
  PROTOBUF_NODISCARD ::tendermint::abci::RequestListSnapshots* release_list_snapshots();
  ::tendermint::abci::RequestListSnapshots* mutable_list_snapshots();
  void set_allocated_list_snapshots(::tendermint::abci::RequestListSnapshots* value);
  void unsafe_arena_set_allocated_list_snapshots(::tendermint::abci::RequestListSnapshots* value);
  ::tendermint::abci::RequestListSnapshots* unsafe_arena_release_list_snapshots();

  private:
  const ::tendermint::abci::RequestListSnapshots& _internal_list_snapshots() const;
  ::tendermint::abci::RequestListSnapshots* _internal_mutable_list_snapshots();

  public:
  // .tendermint.abci.RequestOfferSnapshot offer_snapshot = 13 [json_name = "offerSnapshot"];
  bool has_offer_snapshot() const;
  private:
  bool _internal_has_offer_snapshot() const;

  public:
  void clear_offer_snapshot() ;
  const ::tendermint::abci::RequestOfferSnapshot& offer_snapshot() const;
  PROTOBUF_NODISCARD ::tendermint::abci::RequestOfferSnapshot* release_offer_snapshot();
  ::tendermint::abci::RequestOfferSnapshot* mutable_offer_snapshot();
  void set_allocated_offer_snapshot(::tendermint::abci::RequestOfferSnapshot* value);
  void unsafe_arena_set_allocated_offer_snapshot(::tendermint::abci::RequestOfferSnapshot* value);
  ::tendermint::abci::RequestOfferSnapshot* unsafe_arena_release_offer_snapshot();

  private:
  const ::tendermint::abci::RequestOfferSnapshot& _internal_offer_snapshot() const;
  ::tendermint::abci::RequestOfferSnapshot* _internal_mutable_offer_snapshot();

  public:
  // .tendermint.abci.RequestLoadSnapshotChunk load_snapshot_chunk = 14 [json_name = "loadSnapshotChunk"];
  bool has_load_snapshot_chunk() const;
  private:
  bool _internal_has_load_snapshot_chunk() const;

  public:
  void clear_load_snapshot_chunk() ;
  const ::tendermint::abci::RequestLoadSnapshotChunk& load_snapshot_chunk() const;
  PROTOBUF_NODISCARD ::tendermint::abci::RequestLoadSnapshotChunk* release_load_snapshot_chunk();
  ::tendermint::abci::RequestLoadSnapshotChunk* mutable_load_snapshot_chunk();
  void set_allocated_load_snapshot_chunk(::tendermint::abci::RequestLoadSnapshotChunk* value);
  void unsafe_arena_set_allocated_load_snapshot_chunk(::tendermint::abci::RequestLoadSnapshotChunk* value);
  ::tendermint::abci::RequestLoadSnapshotChunk* unsafe_arena_release_load_snapshot_chunk();

  private:
  const ::tendermint::abci::RequestLoadSnapshotChunk& _internal_load_snapshot_chunk() const;
  ::tendermint::abci::RequestLoadSnapshotChunk* _internal_mutable_load_snapshot_chunk();

  public:
  // .tendermint.abci.RequestApplySnapshotChunk apply_snapshot_chunk = 15 [json_name = "applySnapshotChunk"];
  bool has_apply_snapshot_chunk() const;
  private:
  bool _internal_has_apply_snapshot_chunk() const;

  public:
  void clear_apply_snapshot_chunk() ;
  const ::tendermint::abci::RequestApplySnapshotChunk& apply_snapshot_chunk() const;
  PROTOBUF_NODISCARD ::tendermint::abci::RequestApplySnapshotChunk* release_apply_snapshot_chunk();
  ::tendermint::abci::RequestApplySnapshotChunk* mutable_apply_snapshot_chunk();
  void set_allocated_apply_snapshot_chunk(::tendermint::abci::RequestApplySnapshotChunk* value);
  void unsafe_arena_set_allocated_apply_snapshot_chunk(::tendermint::abci::RequestApplySnapshotChunk* value);
  ::tendermint::abci::RequestApplySnapshotChunk* unsafe_arena_release_apply_snapshot_chunk();

  private:
  const ::tendermint::abci::RequestApplySnapshotChunk& _internal_apply_snapshot_chunk() const;
  ::tendermint::abci::RequestApplySnapshotChunk* _internal_mutable_apply_snapshot_chunk();

  public:
  // .tendermint.abci.RequestPrepareProposal prepare_proposal = 16 [json_name = "prepareProposal"];
  bool has_prepare_proposal() const;
  private:
  bool _internal_has_prepare_proposal() const;

  public:
  void clear_prepare_proposal() ;
  const ::tendermint::abci::RequestPrepareProposal& prepare_proposal() const;
  PROTOBUF_NODISCARD ::tendermint::abci::RequestPrepareProposal* release_prepare_proposal();
  ::tendermint::abci::RequestPrepareProposal* mutable_prepare_proposal();
  void set_allocated_prepare_proposal(::tendermint::abci::RequestPrepareProposal* value);
  void unsafe_arena_set_allocated_prepare_proposal(::tendermint::abci::RequestPrepareProposal* value);
  ::tendermint::abci::RequestPrepareProposal* unsafe_arena_release_prepare_proposal();

  private:
  const ::tendermint::abci::RequestPrepareProposal& _internal_prepare_proposal() const;
  ::tendermint::abci::RequestPrepareProposal* _internal_mutable_prepare_proposal();

  public:
  // .tendermint.abci.RequestProcessProposal process_proposal = 17 [json_name = "processProposal"];
  bool has_process_proposal() const;
  private:
  bool _internal_has_process_proposal() const;

  public:
  void clear_process_proposal() ;
  const ::tendermint::abci::RequestProcessProposal& process_proposal() const;
  PROTOBUF_NODISCARD ::tendermint::abci::RequestProcessProposal* release_process_proposal();
  ::tendermint::abci::RequestProcessProposal* mutable_process_proposal();
  void set_allocated_process_proposal(::tendermint::abci::RequestProcessProposal* value);
  void unsafe_arena_set_allocated_process_proposal(::tendermint::abci::RequestProcessProposal* value);
  ::tendermint::abci::RequestProcessProposal* unsafe_arena_release_process_proposal();

  private:
  const ::tendermint::abci::RequestProcessProposal& _internal_process_proposal() const;
  ::tendermint::abci::RequestProcessProposal* _internal_mutable_process_proposal();

  public:
  // .tendermint.abci.RequestExtendVote extend_vote = 18 [json_name = "extendVote"];
  bool has_extend_vote() const;
  private:
  bool _internal_has_extend_vote() const;

  public:
  void clear_extend_vote() ;
  const ::tendermint::abci::RequestExtendVote& extend_vote() const;
  PROTOBUF_NODISCARD ::tendermint::abci::RequestExtendVote* release_extend_vote();
  ::tendermint::abci::RequestExtendVote* mutable_extend_vote();
  void set_allocated_extend_vote(::tendermint::abci::RequestExtendVote* value);
  void unsafe_arena_set_allocated_extend_vote(::tendermint::abci::RequestExtendVote* value);
  ::tendermint::abci::RequestExtendVote* unsafe_arena_release_extend_vote();

  private:
  const ::tendermint::abci::RequestExtendVote& _internal_extend_vote() const;
  ::tendermint::abci::RequestExtendVote* _internal_mutable_extend_vote();

  public:
  // .tendermint.abci.RequestVerifyVoteExtension verify_vote_extension = 19 [json_name = "verifyVoteExtension"];
  bool has_verify_vote_extension() const;
  private:
  bool _internal_has_verify_vote_extension() const;

  public:
  void clear_verify_vote_extension() ;
  const ::tendermint::abci::RequestVerifyVoteExtension& verify_vote_extension() const;
  PROTOBUF_NODISCARD ::tendermint::abci::RequestVerifyVoteExtension* release_verify_vote_extension();
  ::tendermint::abci::RequestVerifyVoteExtension* mutable_verify_vote_extension();
  void set_allocated_verify_vote_extension(::tendermint::abci::RequestVerifyVoteExtension* value);
  void unsafe_arena_set_allocated_verify_vote_extension(::tendermint::abci::RequestVerifyVoteExtension* value);
  ::tendermint::abci::RequestVerifyVoteExtension* unsafe_arena_release_verify_vote_extension();

  private:
  const ::tendermint::abci::RequestVerifyVoteExtension& _internal_verify_vote_extension() const;
  ::tendermint::abci::RequestVerifyVoteExtension* _internal_mutable_verify_vote_extension();

  public:
  // .tendermint.abci.RequestFinalizeBlock finalize_block = 20 [json_name = "finalizeBlock"];
  bool has_finalize_block() const;
  private:
  bool _internal_has_finalize_block() const;

  public:
  void clear_finalize_block() ;
  const ::tendermint::abci::RequestFinalizeBlock& finalize_block() const;
  PROTOBUF_NODISCARD ::tendermint::abci::RequestFinalizeBlock* release_finalize_block();
  ::tendermint::abci::RequestFinalizeBlock* mutable_finalize_block();
  void set_allocated_finalize_block(::tendermint::abci::RequestFinalizeBlock* value);
  void unsafe_arena_set_allocated_finalize_block(::tendermint::abci::RequestFinalizeBlock* value);
  ::tendermint::abci::RequestFinalizeBlock* unsafe_arena_release_finalize_block();

  private:
  const ::tendermint::abci::RequestFinalizeBlock& _internal_finalize_block() const;
  ::tendermint::abci::RequestFinalizeBlock* _internal_mutable_finalize_block();

  public:
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:tendermint.abci.Request)
 private:
  class _Internal;
  void set_has_echo();
  void set_has_flush();
  void set_has_info();
  void set_has_init_chain();
  void set_has_query();
  void set_has_check_tx();
  void set_has_commit();
  void set_has_list_snapshots();
  void set_has_offer_snapshot();
  void set_has_load_snapshot_chunk();
  void set_has_apply_snapshot_chunk();
  void set_has_prepare_proposal();
  void set_has_process_proposal();
  void set_has_extend_vote();
  void set_has_verify_vote_extension();
  void set_has_finalize_block();
  inline bool has_value() const;
  inline void clear_has_value();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 16, 16,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Request& from_msg);
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::tendermint::abci::RequestEcho* echo_;
      ::tendermint::abci::RequestFlush* flush_;
      ::tendermint::abci::RequestInfo* info_;
      ::tendermint::abci::RequestInitChain* init_chain_;
      ::tendermint::abci::RequestQuery* query_;
      ::tendermint::abci::RequestCheckTx* check_tx_;
      ::tendermint::abci::RequestCommit* commit_;
      ::tendermint::abci::RequestListSnapshots* list_snapshots_;
      ::tendermint::abci::RequestOfferSnapshot* offer_snapshot_;
      ::tendermint::abci::RequestLoadSnapshotChunk* load_snapshot_chunk_;
      ::tendermint::abci::RequestApplySnapshotChunk* apply_snapshot_chunk_;
      ::tendermint::abci::RequestPrepareProposal* prepare_proposal_;
      ::tendermint::abci::RequestProcessProposal* process_proposal_;
      ::tendermint::abci::RequestExtendVote* extend_vote_;
      ::tendermint::abci::RequestVerifyVoteExtension* verify_vote_extension_;
      ::tendermint::abci::RequestFinalizeBlock* finalize_block_;
    } value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fabci_2ftypes_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Request

// .tendermint.abci.RequestEcho echo = 1 [json_name = "echo"];
inline bool Request::has_echo() const {
  return value_case() == kEcho;
}
inline bool Request::_internal_has_echo() const {
  return value_case() == kEcho;
}
inline void Request::set_has_echo() {
  _impl_._oneof_case_[0] = kEcho;
}
inline void Request::clear_echo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kEcho) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.echo_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.echo_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::RequestEcho* Request::release_echo() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Request.echo)
  if (value_case() == kEcho) {
    clear_has_value();
    auto* temp = _impl_.value_.echo_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.echo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::RequestEcho& Request::_internal_echo() const {
  return value_case() == kEcho ? *_impl_.value_.echo_ : reinterpret_cast<::tendermint::abci::RequestEcho&>(::tendermint::abci::_RequestEcho_default_instance_);
}
inline const ::tendermint::abci::RequestEcho& Request::echo() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Request.echo)
  return _internal_echo();
}
inline ::tendermint::abci::RequestEcho* Request::unsafe_arena_release_echo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Request.echo)
  if (value_case() == kEcho) {
    clear_has_value();
    auto* temp = _impl_.value_.echo_;
    _impl_.value_.echo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_echo(::tendermint::abci::RequestEcho* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_echo();
    _impl_.value_.echo_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Request.echo)
}
inline ::tendermint::abci::RequestEcho* Request::_internal_mutable_echo() {
  if (value_case() != kEcho) {
    clear_value();
    set_has_echo();
    _impl_.value_.echo_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::RequestEcho>(GetArena());
  }
  return _impl_.value_.echo_;
}
inline ::tendermint::abci::RequestEcho* Request::mutable_echo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::RequestEcho* _msg = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Request.echo)
  return _msg;
}

// .tendermint.abci.RequestFlush flush = 2 [json_name = "flush"];
inline bool Request::has_flush() const {
  return value_case() == kFlush;
}
inline bool Request::_internal_has_flush() const {
  return value_case() == kFlush;
}
inline void Request::set_has_flush() {
  _impl_._oneof_case_[0] = kFlush;
}
inline void Request::clear_flush() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kFlush) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.flush_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.flush_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::RequestFlush* Request::release_flush() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Request.flush)
  if (value_case() == kFlush) {
    clear_has_value();
    auto* temp = _impl_.value_.flush_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.flush_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::RequestFlush& Request::_internal_flush() const {
  return value_case() == kFlush ? *_impl_.value_.flush_ : reinterpret_cast<::tendermint::abci::RequestFlush&>(::tendermint::abci::_RequestFlush_default_instance_);
}
inline const ::tendermint::abci::RequestFlush& Request::flush() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Request.flush)
  return _internal_flush();
}
inline ::tendermint::abci::RequestFlush* Request::unsafe_arena_release_flush() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Request.flush)
  if (value_case() == kFlush) {
    clear_has_value();
    auto* temp = _impl_.value_.flush_;
    _impl_.value_.flush_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_flush(::tendermint::abci::RequestFlush* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_flush();
    _impl_.value_.flush_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Request.flush)
}
inline ::tendermint::abci::RequestFlush* Request::_internal_mutable_flush() {
  if (value_case() != kFlush) {
    clear_value();
    set_has_flush();
    _impl_.value_.flush_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::RequestFlush>(GetArena());
  }
  return _impl_.value_.flush_;
}
inline ::tendermint::abci::RequestFlush* Request::mutable_flush() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::RequestFlush* _msg = _internal_mutable_flush();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Request.flush)
  return _msg;
}

// .tendermint.abci.RequestInfo info = 3 [json_name = "info"];
inline bool Request::has_info() const {
  return value_case() == kInfo;
}
inline bool Request::_internal_has_info() const {
  return value_case() == kInfo;
}
inline void Request::set_has_info() {
  _impl_._oneof_case_[0] = kInfo;
}
inline void Request::clear_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kInfo) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.info_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.info_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::RequestInfo* Request::release_info() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Request.info)
  if (value_case() == kInfo) {
    clear_has_value();
    auto* temp = _impl_.value_.info_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::RequestInfo& Request::_internal_info() const {
  return value_case() == kInfo ? *_impl_.value_.info_ : reinterpret_cast<::tendermint::abci::RequestInfo&>(::tendermint::abci::_RequestInfo_default_instance_);
}
inline const ::tendermint::abci::RequestInfo& Request::info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Request.info)
  return _internal_info();
}
inline ::tendermint::abci::RequestInfo* Request::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Request.info)
  if (value_case() == kInfo) {
    clear_has_value();
    auto* temp = _impl_.value_.info_;
    _impl_.value_.info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_info(::tendermint::abci::RequestInfo* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_info();
    _impl_.value_.info_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Request.info)
}
inline ::tendermint::abci::RequestInfo* Request::_internal_mutable_info() {
  if (value_case() != kInfo) {
    clear_value();
    set_has_info();
    _impl_.value_.info_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::RequestInfo>(GetArena());
  }
  return _impl_.value_.info_;
}
inline ::tendermint::abci::RequestInfo* Request::mutable_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::RequestInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Request.info)
  return _msg;
}

// .tendermint.abci.RequestInitChain init_chain = 5 [json_name = "initChain"];
inline bool Request::has_init_chain() const {
  return value_case() == kInitChain;
}
inline bool Request::_internal_has_init_chain() const {
  return value_case() == kInitChain;
}
inline void Request::set_has_init_chain() {
  _impl_._oneof_case_[0] = kInitChain;
}
inline void Request::clear_init_chain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kInitChain) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.init_chain_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.init_chain_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::RequestInitChain* Request::release_init_chain() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Request.init_chain)
  if (value_case() == kInitChain) {
    clear_has_value();
    auto* temp = _impl_.value_.init_chain_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.init_chain_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::RequestInitChain& Request::_internal_init_chain() const {
  return value_case() == kInitChain ? *_impl_.value_.init_chain_ : reinterpret_cast<::tendermint::abci::RequestInitChain&>(::tendermint::abci::_RequestInitChain_default_instance_);
}
inline const ::tendermint::abci::RequestInitChain& Request::init_chain() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Request.init_chain)
  return _internal_init_chain();
}
inline ::tendermint::abci::RequestInitChain* Request::unsafe_arena_release_init_chain() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Request.init_chain)
  if (value_case() == kInitChain) {
    clear_has_value();
    auto* temp = _impl_.value_.init_chain_;
    _impl_.value_.init_chain_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_init_chain(::tendermint::abci::RequestInitChain* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_init_chain();
    _impl_.value_.init_chain_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Request.init_chain)
}
inline ::tendermint::abci::RequestInitChain* Request::_internal_mutable_init_chain() {
  if (value_case() != kInitChain) {
    clear_value();
    set_has_init_chain();
    _impl_.value_.init_chain_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::RequestInitChain>(GetArena());
  }
  return _impl_.value_.init_chain_;
}
inline ::tendermint::abci::RequestInitChain* Request::mutable_init_chain() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::RequestInitChain* _msg = _internal_mutable_init_chain();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Request.init_chain)
  return _msg;
}

// .tendermint.abci.RequestQuery query = 6 [json_name = "query"];
inline bool Request::has_query() const {
  return value_case() == kQuery;
}
inline bool Request::_internal_has_query() const {
  return value_case() == kQuery;
}
inline void Request::set_has_query() {
  _impl_._oneof_case_[0] = kQuery;
}
inline void Request::clear_query() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kQuery) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.query_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.query_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::RequestQuery* Request::release_query() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Request.query)
  if (value_case() == kQuery) {
    clear_has_value();
    auto* temp = _impl_.value_.query_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.query_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::RequestQuery& Request::_internal_query() const {
  return value_case() == kQuery ? *_impl_.value_.query_ : reinterpret_cast<::tendermint::abci::RequestQuery&>(::tendermint::abci::_RequestQuery_default_instance_);
}
inline const ::tendermint::abci::RequestQuery& Request::query() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Request.query)
  return _internal_query();
}
inline ::tendermint::abci::RequestQuery* Request::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Request.query)
  if (value_case() == kQuery) {
    clear_has_value();
    auto* temp = _impl_.value_.query_;
    _impl_.value_.query_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_query(::tendermint::abci::RequestQuery* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_query();
    _impl_.value_.query_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Request.query)
}
inline ::tendermint::abci::RequestQuery* Request::_internal_mutable_query() {
  if (value_case() != kQuery) {
    clear_value();
    set_has_query();
    _impl_.value_.query_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::RequestQuery>(GetArena());
  }
  return _impl_.value_.query_;
}
inline ::tendermint::abci::RequestQuery* Request::mutable_query() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::RequestQuery* _msg = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Request.query)
  return _msg;
}

// .tendermint.abci.RequestCheckTx check_tx = 8 [json_name = "checkTx"];
inline bool Request::has_check_tx() const {
  return value_case() == kCheckTx;
}
inline bool Request::_internal_has_check_tx() const {
  return value_case() == kCheckTx;
}
inline void Request::set_has_check_tx() {
  _impl_._oneof_case_[0] = kCheckTx;
}
inline void Request::clear_check_tx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kCheckTx) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.check_tx_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.check_tx_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::RequestCheckTx* Request::release_check_tx() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Request.check_tx)
  if (value_case() == kCheckTx) {
    clear_has_value();
    auto* temp = _impl_.value_.check_tx_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.check_tx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::RequestCheckTx& Request::_internal_check_tx() const {
  return value_case() == kCheckTx ? *_impl_.value_.check_tx_ : reinterpret_cast<::tendermint::abci::RequestCheckTx&>(::tendermint::abci::_RequestCheckTx_default_instance_);
}
inline const ::tendermint::abci::RequestCheckTx& Request::check_tx() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Request.check_tx)
  return _internal_check_tx();
}
inline ::tendermint::abci::RequestCheckTx* Request::unsafe_arena_release_check_tx() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Request.check_tx)
  if (value_case() == kCheckTx) {
    clear_has_value();
    auto* temp = _impl_.value_.check_tx_;
    _impl_.value_.check_tx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_check_tx(::tendermint::abci::RequestCheckTx* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_check_tx();
    _impl_.value_.check_tx_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Request.check_tx)
}
inline ::tendermint::abci::RequestCheckTx* Request::_internal_mutable_check_tx() {
  if (value_case() != kCheckTx) {
    clear_value();
    set_has_check_tx();
    _impl_.value_.check_tx_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::RequestCheckTx>(GetArena());
  }
  return _impl_.value_.check_tx_;
}
inline ::tendermint::abci::RequestCheckTx* Request::mutable_check_tx() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::RequestCheckTx* _msg = _internal_mutable_check_tx();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Request.check_tx)
  return _msg;
}

// .tendermint.abci.RequestCommit commit = 11 [json_name = "commit"];
inline bool Request::has_commit() const {
  return value_case() == kCommit;
}
inline bool Request::_internal_has_commit() const {
  return value_case() == kCommit;
}
inline void Request::set_has_commit() {
  _impl_._oneof_case_[0] = kCommit;
}
inline void Request::clear_commit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kCommit) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.commit_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.commit_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::RequestCommit* Request::release_commit() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Request.commit)
  if (value_case() == kCommit) {
    clear_has_value();
    auto* temp = _impl_.value_.commit_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.commit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::RequestCommit& Request::_internal_commit() const {
  return value_case() == kCommit ? *_impl_.value_.commit_ : reinterpret_cast<::tendermint::abci::RequestCommit&>(::tendermint::abci::_RequestCommit_default_instance_);
}
inline const ::tendermint::abci::RequestCommit& Request::commit() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Request.commit)
  return _internal_commit();
}
inline ::tendermint::abci::RequestCommit* Request::unsafe_arena_release_commit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Request.commit)
  if (value_case() == kCommit) {
    clear_has_value();
    auto* temp = _impl_.value_.commit_;
    _impl_.value_.commit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_commit(::tendermint::abci::RequestCommit* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_commit();
    _impl_.value_.commit_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Request.commit)
}
inline ::tendermint::abci::RequestCommit* Request::_internal_mutable_commit() {
  if (value_case() != kCommit) {
    clear_value();
    set_has_commit();
    _impl_.value_.commit_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::RequestCommit>(GetArena());
  }
  return _impl_.value_.commit_;
}
inline ::tendermint::abci::RequestCommit* Request::mutable_commit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::RequestCommit* _msg = _internal_mutable_commit();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Request.commit)
  return _msg;
}

// .tendermint.abci.RequestListSnapshots list_snapshots = 12 [json_name = "listSnapshots"];
inline bool Request::has_list_snapshots() const {
  return value_case() == kListSnapshots;
}
inline bool Request::_internal_has_list_snapshots() const {
  return value_case() == kListSnapshots;
}
inline void Request::set_has_list_snapshots() {
  _impl_._oneof_case_[0] = kListSnapshots;
}
inline void Request::clear_list_snapshots() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kListSnapshots) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.list_snapshots_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.list_snapshots_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::RequestListSnapshots* Request::release_list_snapshots() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Request.list_snapshots)
  if (value_case() == kListSnapshots) {
    clear_has_value();
    auto* temp = _impl_.value_.list_snapshots_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.list_snapshots_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::RequestListSnapshots& Request::_internal_list_snapshots() const {
  return value_case() == kListSnapshots ? *_impl_.value_.list_snapshots_ : reinterpret_cast<::tendermint::abci::RequestListSnapshots&>(::tendermint::abci::_RequestListSnapshots_default_instance_);
}
inline const ::tendermint::abci::RequestListSnapshots& Request::list_snapshots() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Request.list_snapshots)
  return _internal_list_snapshots();
}
inline ::tendermint::abci::RequestListSnapshots* Request::unsafe_arena_release_list_snapshots() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Request.list_snapshots)
  if (value_case() == kListSnapshots) {
    clear_has_value();
    auto* temp = _impl_.value_.list_snapshots_;
    _impl_.value_.list_snapshots_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_list_snapshots(::tendermint::abci::RequestListSnapshots* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_list_snapshots();
    _impl_.value_.list_snapshots_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Request.list_snapshots)
}
inline ::tendermint::abci::RequestListSnapshots* Request::_internal_mutable_list_snapshots() {
  if (value_case() != kListSnapshots) {
    clear_value();
    set_has_list_snapshots();
    _impl_.value_.list_snapshots_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::RequestListSnapshots>(GetArena());
  }
  return _impl_.value_.list_snapshots_;
}
inline ::tendermint::abci::RequestListSnapshots* Request::mutable_list_snapshots() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::RequestListSnapshots* _msg = _internal_mutable_list_snapshots();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Request.list_snapshots)
  return _msg;
}

// .tendermint.abci.RequestOfferSnapshot offer_snapshot = 13 [json_name = "offerSnapshot"];
inline bool Request::has_offer_snapshot() const {
  return value_case() == kOfferSnapshot;
}
inline bool Request::_internal_has_offer_snapshot() const {
  return value_case() == kOfferSnapshot;
}
inline void Request::set_has_offer_snapshot() {
  _impl_._oneof_case_[0] = kOfferSnapshot;
}
inline void Request::clear_offer_snapshot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kOfferSnapshot) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.offer_snapshot_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.offer_snapshot_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::RequestOfferSnapshot* Request::release_offer_snapshot() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Request.offer_snapshot)
  if (value_case() == kOfferSnapshot) {
    clear_has_value();
    auto* temp = _impl_.value_.offer_snapshot_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.offer_snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::RequestOfferSnapshot& Request::_internal_offer_snapshot() const {
  return value_case() == kOfferSnapshot ? *_impl_.value_.offer_snapshot_ : reinterpret_cast<::tendermint::abci::RequestOfferSnapshot&>(::tendermint::abci::_RequestOfferSnapshot_default_instance_);
}
inline const ::tendermint::abci::RequestOfferSnapshot& Request::offer_snapshot() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Request.offer_snapshot)
  return _internal_offer_snapshot();
}
inline ::tendermint::abci::RequestOfferSnapshot* Request::unsafe_arena_release_offer_snapshot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Request.offer_snapshot)
  if (value_case() == kOfferSnapshot) {
    clear_has_value();
    auto* temp = _impl_.value_.offer_snapshot_;
    _impl_.value_.offer_snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_offer_snapshot(::tendermint::abci::RequestOfferSnapshot* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_offer_snapshot();
    _impl_.value_.offer_snapshot_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Request.offer_snapshot)
}
inline ::tendermint::abci::RequestOfferSnapshot* Request::_internal_mutable_offer_snapshot() {
  if (value_case() != kOfferSnapshot) {
    clear_value();
    set_has_offer_snapshot();
    _impl_.value_.offer_snapshot_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::RequestOfferSnapshot>(GetArena());
  }
  return _impl_.value_.offer_snapshot_;
}
inline ::tendermint::abci::RequestOfferSnapshot* Request::mutable_offer_snapshot() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::RequestOfferSnapshot* _msg = _internal_mutable_offer_snapshot();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Request.offer_snapshot)
  return _msg;
}

// .tendermint.abci.RequestLoadSnapshotChunk load_snapshot_chunk = 14 [json_name = "loadSnapshotChunk"];
inline bool Request::has_load_snapshot_chunk() const {
  return value_case() == kLoadSnapshotChunk;
}
inline bool Request::_internal_has_load_snapshot_chunk() const {
  return value_case() == kLoadSnapshotChunk;
}
inline void Request::set_has_load_snapshot_chunk() {
  _impl_._oneof_case_[0] = kLoadSnapshotChunk;
}
inline void Request::clear_load_snapshot_chunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kLoadSnapshotChunk) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.load_snapshot_chunk_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.load_snapshot_chunk_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::RequestLoadSnapshotChunk* Request::release_load_snapshot_chunk() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Request.load_snapshot_chunk)
  if (value_case() == kLoadSnapshotChunk) {
    clear_has_value();
    auto* temp = _impl_.value_.load_snapshot_chunk_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.load_snapshot_chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::RequestLoadSnapshotChunk& Request::_internal_load_snapshot_chunk() const {
  return value_case() == kLoadSnapshotChunk ? *_impl_.value_.load_snapshot_chunk_ : reinterpret_cast<::tendermint::abci::RequestLoadSnapshotChunk&>(::tendermint::abci::_RequestLoadSnapshotChunk_default_instance_);
}
inline const ::tendermint::abci::RequestLoadSnapshotChunk& Request::load_snapshot_chunk() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Request.load_snapshot_chunk)
  return _internal_load_snapshot_chunk();
}
inline ::tendermint::abci::RequestLoadSnapshotChunk* Request::unsafe_arena_release_load_snapshot_chunk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Request.load_snapshot_chunk)
  if (value_case() == kLoadSnapshotChunk) {
    clear_has_value();
    auto* temp = _impl_.value_.load_snapshot_chunk_;
    _impl_.value_.load_snapshot_chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_load_snapshot_chunk(::tendermint::abci::RequestLoadSnapshotChunk* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_load_snapshot_chunk();
    _impl_.value_.load_snapshot_chunk_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Request.load_snapshot_chunk)
}
inline ::tendermint::abci::RequestLoadSnapshotChunk* Request::_internal_mutable_load_snapshot_chunk() {
  if (value_case() != kLoadSnapshotChunk) {
    clear_value();
    set_has_load_snapshot_chunk();
    _impl_.value_.load_snapshot_chunk_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::RequestLoadSnapshotChunk>(GetArena());
  }
  return _impl_.value_.load_snapshot_chunk_;
}
inline ::tendermint::abci::RequestLoadSnapshotChunk* Request::mutable_load_snapshot_chunk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::RequestLoadSnapshotChunk* _msg = _internal_mutable_load_snapshot_chunk();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Request.load_snapshot_chunk)
  return _msg;
}

// .tendermint.abci.RequestApplySnapshotChunk apply_snapshot_chunk = 15 [json_name = "applySnapshotChunk"];
inline bool Request::has_apply_snapshot_chunk() const {
  return value_case() == kApplySnapshotChunk;
}
inline bool Request::_internal_has_apply_snapshot_chunk() const {
  return value_case() == kApplySnapshotChunk;
}
inline void Request::set_has_apply_snapshot_chunk() {
  _impl_._oneof_case_[0] = kApplySnapshotChunk;
}
inline void Request::clear_apply_snapshot_chunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kApplySnapshotChunk) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.apply_snapshot_chunk_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.apply_snapshot_chunk_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::RequestApplySnapshotChunk* Request::release_apply_snapshot_chunk() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Request.apply_snapshot_chunk)
  if (value_case() == kApplySnapshotChunk) {
    clear_has_value();
    auto* temp = _impl_.value_.apply_snapshot_chunk_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.apply_snapshot_chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::RequestApplySnapshotChunk& Request::_internal_apply_snapshot_chunk() const {
  return value_case() == kApplySnapshotChunk ? *_impl_.value_.apply_snapshot_chunk_ : reinterpret_cast<::tendermint::abci::RequestApplySnapshotChunk&>(::tendermint::abci::_RequestApplySnapshotChunk_default_instance_);
}
inline const ::tendermint::abci::RequestApplySnapshotChunk& Request::apply_snapshot_chunk() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Request.apply_snapshot_chunk)
  return _internal_apply_snapshot_chunk();
}
inline ::tendermint::abci::RequestApplySnapshotChunk* Request::unsafe_arena_release_apply_snapshot_chunk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Request.apply_snapshot_chunk)
  if (value_case() == kApplySnapshotChunk) {
    clear_has_value();
    auto* temp = _impl_.value_.apply_snapshot_chunk_;
    _impl_.value_.apply_snapshot_chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_apply_snapshot_chunk(::tendermint::abci::RequestApplySnapshotChunk* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_apply_snapshot_chunk();
    _impl_.value_.apply_snapshot_chunk_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Request.apply_snapshot_chunk)
}
inline ::tendermint::abci::RequestApplySnapshotChunk* Request::_internal_mutable_apply_snapshot_chunk() {
  if (value_case() != kApplySnapshotChunk) {
    clear_value();
    set_has_apply_snapshot_chunk();
    _impl_.value_.apply_snapshot_chunk_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::RequestApplySnapshotChunk>(GetArena());
  }
  return _impl_.value_.apply_snapshot_chunk_;
}
inline ::tendermint::abci::RequestApplySnapshotChunk* Request::mutable_apply_snapshot_chunk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::RequestApplySnapshotChunk* _msg = _internal_mutable_apply_snapshot_chunk();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Request.apply_snapshot_chunk)
  return _msg;
}

// .tendermint.abci.RequestPrepareProposal prepare_proposal = 16 [json_name = "prepareProposal"];
inline bool Request::has_prepare_proposal() const {
  return value_case() == kPrepareProposal;
}
inline bool Request::_internal_has_prepare_proposal() const {
  return value_case() == kPrepareProposal;
}
inline void Request::set_has_prepare_proposal() {
  _impl_._oneof_case_[0] = kPrepareProposal;
}
inline void Request::clear_prepare_proposal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kPrepareProposal) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.prepare_proposal_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.prepare_proposal_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::RequestPrepareProposal* Request::release_prepare_proposal() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Request.prepare_proposal)
  if (value_case() == kPrepareProposal) {
    clear_has_value();
    auto* temp = _impl_.value_.prepare_proposal_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.prepare_proposal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::RequestPrepareProposal& Request::_internal_prepare_proposal() const {
  return value_case() == kPrepareProposal ? *_impl_.value_.prepare_proposal_ : reinterpret_cast<::tendermint::abci::RequestPrepareProposal&>(::tendermint::abci::_RequestPrepareProposal_default_instance_);
}
inline const ::tendermint::abci::RequestPrepareProposal& Request::prepare_proposal() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Request.prepare_proposal)
  return _internal_prepare_proposal();
}
inline ::tendermint::abci::RequestPrepareProposal* Request::unsafe_arena_release_prepare_proposal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Request.prepare_proposal)
  if (value_case() == kPrepareProposal) {
    clear_has_value();
    auto* temp = _impl_.value_.prepare_proposal_;
    _impl_.value_.prepare_proposal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_prepare_proposal(::tendermint::abci::RequestPrepareProposal* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_prepare_proposal();
    _impl_.value_.prepare_proposal_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Request.prepare_proposal)
}
inline ::tendermint::abci::RequestPrepareProposal* Request::_internal_mutable_prepare_proposal() {
  if (value_case() != kPrepareProposal) {
    clear_value();
    set_has_prepare_proposal();
    _impl_.value_.prepare_proposal_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::RequestPrepareProposal>(GetArena());
  }
  return _impl_.value_.prepare_proposal_;
}
inline ::tendermint::abci::RequestPrepareProposal* Request::mutable_prepare_proposal() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::RequestPrepareProposal* _msg = _internal_mutable_prepare_proposal();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Request.prepare_proposal)
  return _msg;
}

// .tendermint.abci.RequestProcessProposal process_proposal = 17 [json_name = "processProposal"];
inline bool Request::has_process_proposal() const {
  return value_case() == kProcessProposal;
}
inline bool Request::_internal_has_process_proposal() const {
  return value_case() == kProcessProposal;
}
inline void Request::set_has_process_proposal() {
  _impl_._oneof_case_[0] = kProcessProposal;
}
inline void Request::clear_process_proposal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kProcessProposal) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.process_proposal_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.process_proposal_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::RequestProcessProposal* Request::release_process_proposal() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Request.process_proposal)
  if (value_case() == kProcessProposal) {
    clear_has_value();
    auto* temp = _impl_.value_.process_proposal_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.process_proposal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::RequestProcessProposal& Request::_internal_process_proposal() const {
  return value_case() == kProcessProposal ? *_impl_.value_.process_proposal_ : reinterpret_cast<::tendermint::abci::RequestProcessProposal&>(::tendermint::abci::_RequestProcessProposal_default_instance_);
}
inline const ::tendermint::abci::RequestProcessProposal& Request::process_proposal() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Request.process_proposal)
  return _internal_process_proposal();
}
inline ::tendermint::abci::RequestProcessProposal* Request::unsafe_arena_release_process_proposal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Request.process_proposal)
  if (value_case() == kProcessProposal) {
    clear_has_value();
    auto* temp = _impl_.value_.process_proposal_;
    _impl_.value_.process_proposal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_process_proposal(::tendermint::abci::RequestProcessProposal* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_process_proposal();
    _impl_.value_.process_proposal_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Request.process_proposal)
}
inline ::tendermint::abci::RequestProcessProposal* Request::_internal_mutable_process_proposal() {
  if (value_case() != kProcessProposal) {
    clear_value();
    set_has_process_proposal();
    _impl_.value_.process_proposal_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::RequestProcessProposal>(GetArena());
  }
  return _impl_.value_.process_proposal_;
}
inline ::tendermint::abci::RequestProcessProposal* Request::mutable_process_proposal() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::RequestProcessProposal* _msg = _internal_mutable_process_proposal();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Request.process_proposal)
  return _msg;
}

// .tendermint.abci.RequestExtendVote extend_vote = 18 [json_name = "extendVote"];
inline bool Request::has_extend_vote() const {
  return value_case() == kExtendVote;
}
inline bool Request::_internal_has_extend_vote() const {
  return value_case() == kExtendVote;
}
inline void Request::set_has_extend_vote() {
  _impl_._oneof_case_[0] = kExtendVote;
}
inline void Request::clear_extend_vote() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kExtendVote) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.extend_vote_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.extend_vote_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::RequestExtendVote* Request::release_extend_vote() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Request.extend_vote)
  if (value_case() == kExtendVote) {
    clear_has_value();
    auto* temp = _impl_.value_.extend_vote_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.extend_vote_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::RequestExtendVote& Request::_internal_extend_vote() const {
  return value_case() == kExtendVote ? *_impl_.value_.extend_vote_ : reinterpret_cast<::tendermint::abci::RequestExtendVote&>(::tendermint::abci::_RequestExtendVote_default_instance_);
}
inline const ::tendermint::abci::RequestExtendVote& Request::extend_vote() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Request.extend_vote)
  return _internal_extend_vote();
}
inline ::tendermint::abci::RequestExtendVote* Request::unsafe_arena_release_extend_vote() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Request.extend_vote)
  if (value_case() == kExtendVote) {
    clear_has_value();
    auto* temp = _impl_.value_.extend_vote_;
    _impl_.value_.extend_vote_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_extend_vote(::tendermint::abci::RequestExtendVote* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_extend_vote();
    _impl_.value_.extend_vote_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Request.extend_vote)
}
inline ::tendermint::abci::RequestExtendVote* Request::_internal_mutable_extend_vote() {
  if (value_case() != kExtendVote) {
    clear_value();
    set_has_extend_vote();
    _impl_.value_.extend_vote_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::RequestExtendVote>(GetArena());
  }
  return _impl_.value_.extend_vote_;
}
inline ::tendermint::abci::RequestExtendVote* Request::mutable_extend_vote() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::RequestExtendVote* _msg = _internal_mutable_extend_vote();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Request.extend_vote)
  return _msg;
}

// .tendermint.abci.RequestVerifyVoteExtension verify_vote_extension = 19 [json_name = "verifyVoteExtension"];
inline bool Request::has_verify_vote_extension() const {
  return value_case() == kVerifyVoteExtension;
}
inline bool Request::_internal_has_verify_vote_extension() const {
  return value_case() == kVerifyVoteExtension;
}
inline void Request::set_has_verify_vote_extension() {
  _impl_._oneof_case_[0] = kVerifyVoteExtension;
}
inline void Request::clear_verify_vote_extension() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kVerifyVoteExtension) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.verify_vote_extension_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.verify_vote_extension_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::RequestVerifyVoteExtension* Request::release_verify_vote_extension() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Request.verify_vote_extension)
  if (value_case() == kVerifyVoteExtension) {
    clear_has_value();
    auto* temp = _impl_.value_.verify_vote_extension_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.verify_vote_extension_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::RequestVerifyVoteExtension& Request::_internal_verify_vote_extension() const {
  return value_case() == kVerifyVoteExtension ? *_impl_.value_.verify_vote_extension_ : reinterpret_cast<::tendermint::abci::RequestVerifyVoteExtension&>(::tendermint::abci::_RequestVerifyVoteExtension_default_instance_);
}
inline const ::tendermint::abci::RequestVerifyVoteExtension& Request::verify_vote_extension() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Request.verify_vote_extension)
  return _internal_verify_vote_extension();
}
inline ::tendermint::abci::RequestVerifyVoteExtension* Request::unsafe_arena_release_verify_vote_extension() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Request.verify_vote_extension)
  if (value_case() == kVerifyVoteExtension) {
    clear_has_value();
    auto* temp = _impl_.value_.verify_vote_extension_;
    _impl_.value_.verify_vote_extension_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_verify_vote_extension(::tendermint::abci::RequestVerifyVoteExtension* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_verify_vote_extension();
    _impl_.value_.verify_vote_extension_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Request.verify_vote_extension)
}
inline ::tendermint::abci::RequestVerifyVoteExtension* Request::_internal_mutable_verify_vote_extension() {
  if (value_case() != kVerifyVoteExtension) {
    clear_value();
    set_has_verify_vote_extension();
    _impl_.value_.verify_vote_extension_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::RequestVerifyVoteExtension>(GetArena());
  }
  return _impl_.value_.verify_vote_extension_;
}
inline ::tendermint::abci::RequestVerifyVoteExtension* Request::mutable_verify_vote_extension() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::RequestVerifyVoteExtension* _msg = _internal_mutable_verify_vote_extension();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Request.verify_vote_extension)
  return _msg;
}

// .tendermint.abci.RequestFinalizeBlock finalize_block = 20 [json_name = "finalizeBlock"];
inline bool Request::has_finalize_block() const {
  return value_case() == kFinalizeBlock;
}
inline bool Request::_internal_has_finalize_block() const {
  return value_case() == kFinalizeBlock;
}
inline void Request::set_has_finalize_block() {
  _impl_._oneof_case_[0] = kFinalizeBlock;
}
inline void Request::clear_finalize_block() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kFinalizeBlock) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.finalize_block_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.finalize_block_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::RequestFinalizeBlock* Request::release_finalize_block() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Request.finalize_block)
  if (value_case() == kFinalizeBlock) {
    clear_has_value();
    auto* temp = _impl_.value_.finalize_block_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.finalize_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::RequestFinalizeBlock& Request::_internal_finalize_block() const {
  return value_case() == kFinalizeBlock ? *_impl_.value_.finalize_block_ : reinterpret_cast<::tendermint::abci::RequestFinalizeBlock&>(::tendermint::abci::_RequestFinalizeBlock_default_instance_);
}
inline const ::tendermint::abci::RequestFinalizeBlock& Request::finalize_block() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Request.finalize_block)
  return _internal_finalize_block();
}
inline ::tendermint::abci::RequestFinalizeBlock* Request::unsafe_arena_release_finalize_block() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Request.finalize_block)
  if (value_case() == kFinalizeBlock) {
    clear_has_value();
    auto* temp = _impl_.value_.finalize_block_;
    _impl_.value_.finalize_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_finalize_block(::tendermint::abci::RequestFinalizeBlock* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_finalize_block();
    _impl_.value_.finalize_block_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Request.finalize_block)
}
inline ::tendermint::abci::RequestFinalizeBlock* Request::_internal_mutable_finalize_block() {
  if (value_case() != kFinalizeBlock) {
    clear_value();
    set_has_finalize_block();
    _impl_.value_.finalize_block_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::RequestFinalizeBlock>(GetArena());
  }
  return _impl_.value_.finalize_block_;
}
inline ::tendermint::abci::RequestFinalizeBlock* Request::mutable_finalize_block() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::RequestFinalizeBlock* _msg = _internal_mutable_finalize_block();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Request.finalize_block)
  return _msg;
}

inline bool Request::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Request::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline Request::ValueCase Request::value_case() const {
  return Request::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// RequestEcho

// string message = 1 [json_name = "message"];
inline void RequestEcho::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& RequestEcho::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestEcho.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestEcho::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestEcho.message)
}
inline std::string* RequestEcho::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestEcho.message)
  return _s;
}
inline const std::string& RequestEcho::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void RequestEcho::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* RequestEcho::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* RequestEcho::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestEcho.message)
  return _impl_.message_.Release();
}
inline void RequestEcho::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestEcho.message)
}

// -------------------------------------------------------------------

// RequestFlush

// -------------------------------------------------------------------

// RequestInfo

// string version = 1 [json_name = "version"];
inline void RequestInfo::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& RequestInfo::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestInfo.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestInfo::set_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestInfo.version)
}
inline std::string* RequestInfo::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestInfo.version)
  return _s;
}
inline const std::string& RequestInfo::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_.Get();
}
inline void RequestInfo::_internal_set_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(value, GetArena());
}
inline std::string* RequestInfo::_internal_mutable_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* RequestInfo::release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestInfo.version)
  return _impl_.version_.Release();
}
inline void RequestInfo::set_allocated_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestInfo.version)
}

// uint64 block_version = 2 [json_name = "blockVersion"];
inline void RequestInfo::clear_block_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_version_ = ::uint64_t{0u};
}
inline ::uint64_t RequestInfo::block_version() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestInfo.block_version)
  return _internal_block_version();
}
inline void RequestInfo::set_block_version(::uint64_t value) {
  _internal_set_block_version(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestInfo.block_version)
}
inline ::uint64_t RequestInfo::_internal_block_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_version_;
}
inline void RequestInfo::_internal_set_block_version(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_version_ = value;
}

// uint64 p2p_version = 3 [json_name = "p2pVersion"];
inline void RequestInfo::clear_p2p_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.p2p_version_ = ::uint64_t{0u};
}
inline ::uint64_t RequestInfo::p2p_version() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestInfo.p2p_version)
  return _internal_p2p_version();
}
inline void RequestInfo::set_p2p_version(::uint64_t value) {
  _internal_set_p2p_version(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestInfo.p2p_version)
}
inline ::uint64_t RequestInfo::_internal_p2p_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.p2p_version_;
}
inline void RequestInfo::_internal_set_p2p_version(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.p2p_version_ = value;
}

// string abci_version = 4 [json_name = "abciVersion"];
inline void RequestInfo::clear_abci_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.abci_version_.ClearToEmpty();
}
inline const std::string& RequestInfo::abci_version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestInfo.abci_version)
  return _internal_abci_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestInfo::set_abci_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.abci_version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestInfo.abci_version)
}
inline std::string* RequestInfo::mutable_abci_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_abci_version();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestInfo.abci_version)
  return _s;
}
inline const std::string& RequestInfo::_internal_abci_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.abci_version_.Get();
}
inline void RequestInfo::_internal_set_abci_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.abci_version_.Set(value, GetArena());
}
inline std::string* RequestInfo::_internal_mutable_abci_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.abci_version_.Mutable( GetArena());
}
inline std::string* RequestInfo::release_abci_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestInfo.abci_version)
  return _impl_.abci_version_.Release();
}
inline void RequestInfo::set_allocated_abci_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.abci_version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.abci_version_.IsDefault()) {
    _impl_.abci_version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestInfo.abci_version)
}

// -------------------------------------------------------------------

// RequestInitChain

// .google.protobuf.Timestamp time = 1 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool RequestInitChain::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& RequestInitChain::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& RequestInitChain::time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestInitChain.time)
  return _internal_time();
}
inline void RequestInitChain::unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.RequestInitChain.time)
}
inline ::google::protobuf::Timestamp* RequestInitChain::release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.time_;
  _impl_.time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* RequestInitChain::unsafe_arena_release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestInitChain.time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* RequestInitChain::_internal_mutable_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.time_;
}
inline ::google::protobuf::Timestamp* RequestInitChain::mutable_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestInitChain.time)
  return _msg;
}
inline void RequestInitChain::set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestInitChain.time)
}

// string chain_id = 2 [json_name = "chainId"];
inline void RequestInitChain::clear_chain_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_id_.ClearToEmpty();
}
inline const std::string& RequestInitChain::chain_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestInitChain.chain_id)
  return _internal_chain_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestInitChain::set_chain_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestInitChain.chain_id)
}
inline std::string* RequestInitChain::mutable_chain_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chain_id();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestInitChain.chain_id)
  return _s;
}
inline const std::string& RequestInitChain::_internal_chain_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chain_id_.Get();
}
inline void RequestInitChain::_internal_set_chain_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_id_.Set(value, GetArena());
}
inline std::string* RequestInitChain::_internal_mutable_chain_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.chain_id_.Mutable( GetArena());
}
inline std::string* RequestInitChain::release_chain_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestInitChain.chain_id)
  return _impl_.chain_id_.Release();
}
inline void RequestInitChain::set_allocated_chain_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.chain_id_.IsDefault()) {
    _impl_.chain_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestInitChain.chain_id)
}

// .tendermint.types.ConsensusParams consensus_params = 3 [json_name = "consensusParams"];
inline bool RequestInitChain::has_consensus_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.consensus_params_ != nullptr);
  return value;
}
inline const ::tendermint::types::ConsensusParams& RequestInitChain::_internal_consensus_params() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::types::ConsensusParams* p = _impl_.consensus_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::ConsensusParams&>(::tendermint::types::_ConsensusParams_default_instance_);
}
inline const ::tendermint::types::ConsensusParams& RequestInitChain::consensus_params() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestInitChain.consensus_params)
  return _internal_consensus_params();
}
inline void RequestInitChain::unsafe_arena_set_allocated_consensus_params(::tendermint::types::ConsensusParams* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.consensus_params_);
  }
  _impl_.consensus_params_ = reinterpret_cast<::tendermint::types::ConsensusParams*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.RequestInitChain.consensus_params)
}
inline ::tendermint::types::ConsensusParams* RequestInitChain::release_consensus_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::types::ConsensusParams* released = _impl_.consensus_params_;
  _impl_.consensus_params_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::types::ConsensusParams* RequestInitChain::unsafe_arena_release_consensus_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestInitChain.consensus_params)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::types::ConsensusParams* temp = _impl_.consensus_params_;
  _impl_.consensus_params_ = nullptr;
  return temp;
}
inline ::tendermint::types::ConsensusParams* RequestInitChain::_internal_mutable_consensus_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.consensus_params_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::types::ConsensusParams>(GetArena());
    _impl_.consensus_params_ = reinterpret_cast<::tendermint::types::ConsensusParams*>(p);
  }
  return _impl_.consensus_params_;
}
inline ::tendermint::types::ConsensusParams* RequestInitChain::mutable_consensus_params() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tendermint::types::ConsensusParams* _msg = _internal_mutable_consensus_params();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestInitChain.consensus_params)
  return _msg;
}
inline void RequestInitChain::set_allocated_consensus_params(::tendermint::types::ConsensusParams* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.consensus_params_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.consensus_params_ = reinterpret_cast<::tendermint::types::ConsensusParams*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestInitChain.consensus_params)
}

// repeated .tendermint.abci.ValidatorUpdate validators = 4 [json_name = "validators", (.gogoproto.nullable) = false];
inline int RequestInitChain::_internal_validators_size() const {
  return _internal_validators().size();
}
inline int RequestInitChain::validators_size() const {
  return _internal_validators_size();
}
inline void RequestInitChain::clear_validators() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validators_.Clear();
}
inline ::tendermint::abci::ValidatorUpdate* RequestInitChain::mutable_validators(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestInitChain.validators)
  return _internal_mutable_validators()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::ValidatorUpdate>* RequestInitChain::mutable_validators()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tendermint.abci.RequestInitChain.validators)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_validators();
}
inline const ::tendermint::abci::ValidatorUpdate& RequestInitChain::validators(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestInitChain.validators)
  return _internal_validators().Get(index);
}
inline ::tendermint::abci::ValidatorUpdate* RequestInitChain::add_validators() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tendermint::abci::ValidatorUpdate* _add = _internal_mutable_validators()->Add();
  // @@protoc_insertion_point(field_add:tendermint.abci.RequestInitChain.validators)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::ValidatorUpdate>& RequestInitChain::validators() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tendermint.abci.RequestInitChain.validators)
  return _internal_validators();
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::ValidatorUpdate>&
RequestInitChain::_internal_validators() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.validators_;
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::ValidatorUpdate>*
RequestInitChain::_internal_mutable_validators() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.validators_;
}

// bytes app_state_bytes = 5 [json_name = "appStateBytes"];
inline void RequestInitChain::clear_app_state_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_state_bytes_.ClearToEmpty();
}
inline const std::string& RequestInitChain::app_state_bytes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestInitChain.app_state_bytes)
  return _internal_app_state_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestInitChain::set_app_state_bytes(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_state_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestInitChain.app_state_bytes)
}
inline std::string* RequestInitChain::mutable_app_state_bytes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_app_state_bytes();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestInitChain.app_state_bytes)
  return _s;
}
inline const std::string& RequestInitChain::_internal_app_state_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.app_state_bytes_.Get();
}
inline void RequestInitChain::_internal_set_app_state_bytes(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_state_bytes_.Set(value, GetArena());
}
inline std::string* RequestInitChain::_internal_mutable_app_state_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.app_state_bytes_.Mutable( GetArena());
}
inline std::string* RequestInitChain::release_app_state_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestInitChain.app_state_bytes)
  return _impl_.app_state_bytes_.Release();
}
inline void RequestInitChain::set_allocated_app_state_bytes(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_state_bytes_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.app_state_bytes_.IsDefault()) {
    _impl_.app_state_bytes_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestInitChain.app_state_bytes)
}

// int64 initial_height = 6 [json_name = "initialHeight"];
inline void RequestInitChain::clear_initial_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initial_height_ = ::int64_t{0};
}
inline ::int64_t RequestInitChain::initial_height() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestInitChain.initial_height)
  return _internal_initial_height();
}
inline void RequestInitChain::set_initial_height(::int64_t value) {
  _internal_set_initial_height(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestInitChain.initial_height)
}
inline ::int64_t RequestInitChain::_internal_initial_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.initial_height_;
}
inline void RequestInitChain::_internal_set_initial_height(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initial_height_ = value;
}

// -------------------------------------------------------------------

// RequestQuery

// bytes data = 1 [json_name = "data"];
inline void RequestQuery::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& RequestQuery::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestQuery.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestQuery::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestQuery.data)
}
inline std::string* RequestQuery::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestQuery.data)
  return _s;
}
inline const std::string& RequestQuery::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void RequestQuery::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* RequestQuery::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* RequestQuery::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestQuery.data)
  return _impl_.data_.Release();
}
inline void RequestQuery::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestQuery.data)
}

// string path = 2 [json_name = "path"];
inline void RequestQuery::clear_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.ClearToEmpty();
}
inline const std::string& RequestQuery::path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestQuery.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestQuery::set_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestQuery.path)
}
inline std::string* RequestQuery::mutable_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestQuery.path)
  return _s;
}
inline const std::string& RequestQuery::_internal_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.path_.Get();
}
inline void RequestQuery::_internal_set_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(value, GetArena());
}
inline std::string* RequestQuery::_internal_mutable_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.path_.Mutable( GetArena());
}
inline std::string* RequestQuery::release_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestQuery.path)
  return _impl_.path_.Release();
}
inline void RequestQuery::set_allocated_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestQuery.path)
}

// int64 height = 3 [json_name = "height"];
inline void RequestQuery::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t RequestQuery::height() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestQuery.height)
  return _internal_height();
}
inline void RequestQuery::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestQuery.height)
}
inline ::int64_t RequestQuery::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void RequestQuery::_internal_set_height(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// bool prove = 4 [json_name = "prove"];
inline void RequestQuery::clear_prove() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prove_ = false;
}
inline bool RequestQuery::prove() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestQuery.prove)
  return _internal_prove();
}
inline void RequestQuery::set_prove(bool value) {
  _internal_set_prove(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestQuery.prove)
}
inline bool RequestQuery::_internal_prove() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.prove_;
}
inline void RequestQuery::_internal_set_prove(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prove_ = value;
}

// -------------------------------------------------------------------

// RequestCheckTx

// bytes tx = 1 [json_name = "tx"];
inline void RequestCheckTx::clear_tx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tx_.ClearToEmpty();
}
inline const std::string& RequestCheckTx::tx() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestCheckTx.tx)
  return _internal_tx();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestCheckTx::set_tx(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tx_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestCheckTx.tx)
}
inline std::string* RequestCheckTx::mutable_tx() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tx();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestCheckTx.tx)
  return _s;
}
inline const std::string& RequestCheckTx::_internal_tx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tx_.Get();
}
inline void RequestCheckTx::_internal_set_tx(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tx_.Set(value, GetArena());
}
inline std::string* RequestCheckTx::_internal_mutable_tx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.tx_.Mutable( GetArena());
}
inline std::string* RequestCheckTx::release_tx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestCheckTx.tx)
  return _impl_.tx_.Release();
}
inline void RequestCheckTx::set_allocated_tx(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tx_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.tx_.IsDefault()) {
    _impl_.tx_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestCheckTx.tx)
}

// .tendermint.abci.CheckTxType type = 2 [json_name = "type"];
inline void RequestCheckTx::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::tendermint::abci::CheckTxType RequestCheckTx::type() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestCheckTx.type)
  return _internal_type();
}
inline void RequestCheckTx::set_type(::tendermint::abci::CheckTxType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestCheckTx.type)
}
inline ::tendermint::abci::CheckTxType RequestCheckTx::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tendermint::abci::CheckTxType>(_impl_.type_);
}
inline void RequestCheckTx::_internal_set_type(::tendermint::abci::CheckTxType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// RequestCommit

// -------------------------------------------------------------------

// RequestListSnapshots

// -------------------------------------------------------------------

// RequestOfferSnapshot

// .tendermint.abci.Snapshot snapshot = 1 [json_name = "snapshot"];
inline bool RequestOfferSnapshot::has_snapshot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.snapshot_ != nullptr);
  return value;
}
inline void RequestOfferSnapshot::clear_snapshot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.snapshot_ != nullptr) _impl_.snapshot_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tendermint::abci::Snapshot& RequestOfferSnapshot::_internal_snapshot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::abci::Snapshot* p = _impl_.snapshot_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::abci::Snapshot&>(::tendermint::abci::_Snapshot_default_instance_);
}
inline const ::tendermint::abci::Snapshot& RequestOfferSnapshot::snapshot() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestOfferSnapshot.snapshot)
  return _internal_snapshot();
}
inline void RequestOfferSnapshot::unsafe_arena_set_allocated_snapshot(::tendermint::abci::Snapshot* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.snapshot_);
  }
  _impl_.snapshot_ = reinterpret_cast<::tendermint::abci::Snapshot*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.RequestOfferSnapshot.snapshot)
}
inline ::tendermint::abci::Snapshot* RequestOfferSnapshot::release_snapshot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::abci::Snapshot* released = _impl_.snapshot_;
  _impl_.snapshot_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::abci::Snapshot* RequestOfferSnapshot::unsafe_arena_release_snapshot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestOfferSnapshot.snapshot)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::abci::Snapshot* temp = _impl_.snapshot_;
  _impl_.snapshot_ = nullptr;
  return temp;
}
inline ::tendermint::abci::Snapshot* RequestOfferSnapshot::_internal_mutable_snapshot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.snapshot_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::Snapshot>(GetArena());
    _impl_.snapshot_ = reinterpret_cast<::tendermint::abci::Snapshot*>(p);
  }
  return _impl_.snapshot_;
}
inline ::tendermint::abci::Snapshot* RequestOfferSnapshot::mutable_snapshot() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tendermint::abci::Snapshot* _msg = _internal_mutable_snapshot();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestOfferSnapshot.snapshot)
  return _msg;
}
inline void RequestOfferSnapshot::set_allocated_snapshot(::tendermint::abci::Snapshot* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.snapshot_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.snapshot_ = reinterpret_cast<::tendermint::abci::Snapshot*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestOfferSnapshot.snapshot)
}

// bytes app_hash = 2 [json_name = "appHash"];
inline void RequestOfferSnapshot::clear_app_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_hash_.ClearToEmpty();
}
inline const std::string& RequestOfferSnapshot::app_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestOfferSnapshot.app_hash)
  return _internal_app_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestOfferSnapshot::set_app_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestOfferSnapshot.app_hash)
}
inline std::string* RequestOfferSnapshot::mutable_app_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_app_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestOfferSnapshot.app_hash)
  return _s;
}
inline const std::string& RequestOfferSnapshot::_internal_app_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.app_hash_.Get();
}
inline void RequestOfferSnapshot::_internal_set_app_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_hash_.Set(value, GetArena());
}
inline std::string* RequestOfferSnapshot::_internal_mutable_app_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.app_hash_.Mutable( GetArena());
}
inline std::string* RequestOfferSnapshot::release_app_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestOfferSnapshot.app_hash)
  return _impl_.app_hash_.Release();
}
inline void RequestOfferSnapshot::set_allocated_app_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.app_hash_.IsDefault()) {
    _impl_.app_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestOfferSnapshot.app_hash)
}

// -------------------------------------------------------------------

// RequestLoadSnapshotChunk

// uint64 height = 1 [json_name = "height"];
inline void RequestLoadSnapshotChunk::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = ::uint64_t{0u};
}
inline ::uint64_t RequestLoadSnapshotChunk::height() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestLoadSnapshotChunk.height)
  return _internal_height();
}
inline void RequestLoadSnapshotChunk::set_height(::uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestLoadSnapshotChunk.height)
}
inline ::uint64_t RequestLoadSnapshotChunk::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void RequestLoadSnapshotChunk::_internal_set_height(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// uint32 format = 2 [json_name = "format"];
inline void RequestLoadSnapshotChunk::clear_format() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_ = 0u;
}
inline ::uint32_t RequestLoadSnapshotChunk::format() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestLoadSnapshotChunk.format)
  return _internal_format();
}
inline void RequestLoadSnapshotChunk::set_format(::uint32_t value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestLoadSnapshotChunk.format)
}
inline ::uint32_t RequestLoadSnapshotChunk::_internal_format() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.format_;
}
inline void RequestLoadSnapshotChunk::_internal_set_format(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_ = value;
}

// uint32 chunk = 3 [json_name = "chunk"];
inline void RequestLoadSnapshotChunk::clear_chunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunk_ = 0u;
}
inline ::uint32_t RequestLoadSnapshotChunk::chunk() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestLoadSnapshotChunk.chunk)
  return _internal_chunk();
}
inline void RequestLoadSnapshotChunk::set_chunk(::uint32_t value) {
  _internal_set_chunk(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestLoadSnapshotChunk.chunk)
}
inline ::uint32_t RequestLoadSnapshotChunk::_internal_chunk() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chunk_;
}
inline void RequestLoadSnapshotChunk::_internal_set_chunk(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunk_ = value;
}

// -------------------------------------------------------------------

// RequestApplySnapshotChunk

// uint32 index = 1 [json_name = "index"];
inline void RequestApplySnapshotChunk::clear_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = 0u;
}
inline ::uint32_t RequestApplySnapshotChunk::index() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestApplySnapshotChunk.index)
  return _internal_index();
}
inline void RequestApplySnapshotChunk::set_index(::uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestApplySnapshotChunk.index)
}
inline ::uint32_t RequestApplySnapshotChunk::_internal_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.index_;
}
inline void RequestApplySnapshotChunk::_internal_set_index(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = value;
}

// bytes chunk = 2 [json_name = "chunk"];
inline void RequestApplySnapshotChunk::clear_chunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunk_.ClearToEmpty();
}
inline const std::string& RequestApplySnapshotChunk::chunk() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestApplySnapshotChunk.chunk)
  return _internal_chunk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestApplySnapshotChunk::set_chunk(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunk_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestApplySnapshotChunk.chunk)
}
inline std::string* RequestApplySnapshotChunk::mutable_chunk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chunk();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestApplySnapshotChunk.chunk)
  return _s;
}
inline const std::string& RequestApplySnapshotChunk::_internal_chunk() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chunk_.Get();
}
inline void RequestApplySnapshotChunk::_internal_set_chunk(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunk_.Set(value, GetArena());
}
inline std::string* RequestApplySnapshotChunk::_internal_mutable_chunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.chunk_.Mutable( GetArena());
}
inline std::string* RequestApplySnapshotChunk::release_chunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestApplySnapshotChunk.chunk)
  return _impl_.chunk_.Release();
}
inline void RequestApplySnapshotChunk::set_allocated_chunk(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunk_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.chunk_.IsDefault()) {
    _impl_.chunk_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestApplySnapshotChunk.chunk)
}

// string sender = 3 [json_name = "sender"];
inline void RequestApplySnapshotChunk::clear_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& RequestApplySnapshotChunk::sender() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestApplySnapshotChunk.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestApplySnapshotChunk::set_sender(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestApplySnapshotChunk.sender)
}
inline std::string* RequestApplySnapshotChunk::mutable_sender() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestApplySnapshotChunk.sender)
  return _s;
}
inline const std::string& RequestApplySnapshotChunk::_internal_sender() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sender_.Get();
}
inline void RequestApplySnapshotChunk::_internal_set_sender(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.Set(value, GetArena());
}
inline std::string* RequestApplySnapshotChunk::_internal_mutable_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sender_.Mutable( GetArena());
}
inline std::string* RequestApplySnapshotChunk::release_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestApplySnapshotChunk.sender)
  return _impl_.sender_.Release();
}
inline void RequestApplySnapshotChunk::set_allocated_sender(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sender_.IsDefault()) {
    _impl_.sender_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestApplySnapshotChunk.sender)
}

// -------------------------------------------------------------------

// RequestPrepareProposal

// int64 max_tx_bytes = 1 [json_name = "maxTxBytes"];
inline void RequestPrepareProposal::clear_max_tx_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_tx_bytes_ = ::int64_t{0};
}
inline ::int64_t RequestPrepareProposal::max_tx_bytes() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestPrepareProposal.max_tx_bytes)
  return _internal_max_tx_bytes();
}
inline void RequestPrepareProposal::set_max_tx_bytes(::int64_t value) {
  _internal_set_max_tx_bytes(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestPrepareProposal.max_tx_bytes)
}
inline ::int64_t RequestPrepareProposal::_internal_max_tx_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_tx_bytes_;
}
inline void RequestPrepareProposal::_internal_set_max_tx_bytes(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_tx_bytes_ = value;
}

// repeated bytes txs = 2 [json_name = "txs"];
inline int RequestPrepareProposal::_internal_txs_size() const {
  return _internal_txs().size();
}
inline int RequestPrepareProposal::txs_size() const {
  return _internal_txs_size();
}
inline void RequestPrepareProposal::clear_txs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.txs_.Clear();
}
inline std::string* RequestPrepareProposal::add_txs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_txs()->Add();
  // @@protoc_insertion_point(field_add_mutable:tendermint.abci.RequestPrepareProposal.txs)
  return _s;
}
inline const std::string& RequestPrepareProposal::txs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestPrepareProposal.txs)
  return _internal_txs().Get(index);
}
inline std::string* RequestPrepareProposal::mutable_txs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestPrepareProposal.txs)
  return _internal_mutable_txs()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void RequestPrepareProposal::set_txs(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_txs()->Mutable(index),
      std::forward<Arg_>(value), args... , ::google::protobuf::internal::BytesTag{});
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestPrepareProposal.txs)
}
template <typename Arg_, typename... Args_>
inline void RequestPrepareProposal::add_txs(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_txs(),
                               std::forward<Arg_>(value),
                               args... , ::google::protobuf::internal::BytesTag{});
  // @@protoc_insertion_point(field_add:tendermint.abci.RequestPrepareProposal.txs)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RequestPrepareProposal::txs() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tendermint.abci.RequestPrepareProposal.txs)
  return _internal_txs();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RequestPrepareProposal::mutable_txs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tendermint.abci.RequestPrepareProposal.txs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_txs();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RequestPrepareProposal::_internal_txs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.txs_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RequestPrepareProposal::_internal_mutable_txs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.txs_;
}

// .tendermint.abci.ExtendedCommitInfo local_last_commit = 3 [json_name = "localLastCommit", (.gogoproto.nullable) = false];
inline bool RequestPrepareProposal::has_local_last_commit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.local_last_commit_ != nullptr);
  return value;
}
inline void RequestPrepareProposal::clear_local_last_commit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.local_last_commit_ != nullptr) _impl_.local_last_commit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tendermint::abci::ExtendedCommitInfo& RequestPrepareProposal::_internal_local_last_commit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::abci::ExtendedCommitInfo* p = _impl_.local_last_commit_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::abci::ExtendedCommitInfo&>(::tendermint::abci::_ExtendedCommitInfo_default_instance_);
}
inline const ::tendermint::abci::ExtendedCommitInfo& RequestPrepareProposal::local_last_commit() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestPrepareProposal.local_last_commit)
  return _internal_local_last_commit();
}
inline void RequestPrepareProposal::unsafe_arena_set_allocated_local_last_commit(::tendermint::abci::ExtendedCommitInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.local_last_commit_);
  }
  _impl_.local_last_commit_ = reinterpret_cast<::tendermint::abci::ExtendedCommitInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.RequestPrepareProposal.local_last_commit)
}
inline ::tendermint::abci::ExtendedCommitInfo* RequestPrepareProposal::release_local_last_commit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::abci::ExtendedCommitInfo* released = _impl_.local_last_commit_;
  _impl_.local_last_commit_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::abci::ExtendedCommitInfo* RequestPrepareProposal::unsafe_arena_release_local_last_commit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestPrepareProposal.local_last_commit)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::abci::ExtendedCommitInfo* temp = _impl_.local_last_commit_;
  _impl_.local_last_commit_ = nullptr;
  return temp;
}
inline ::tendermint::abci::ExtendedCommitInfo* RequestPrepareProposal::_internal_mutable_local_last_commit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.local_last_commit_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::ExtendedCommitInfo>(GetArena());
    _impl_.local_last_commit_ = reinterpret_cast<::tendermint::abci::ExtendedCommitInfo*>(p);
  }
  return _impl_.local_last_commit_;
}
inline ::tendermint::abci::ExtendedCommitInfo* RequestPrepareProposal::mutable_local_last_commit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tendermint::abci::ExtendedCommitInfo* _msg = _internal_mutable_local_last_commit();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestPrepareProposal.local_last_commit)
  return _msg;
}
inline void RequestPrepareProposal::set_allocated_local_last_commit(::tendermint::abci::ExtendedCommitInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.local_last_commit_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.local_last_commit_ = reinterpret_cast<::tendermint::abci::ExtendedCommitInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestPrepareProposal.local_last_commit)
}

// repeated .tendermint.abci.Misbehavior misbehavior = 4 [json_name = "misbehavior", (.gogoproto.nullable) = false];
inline int RequestPrepareProposal::_internal_misbehavior_size() const {
  return _internal_misbehavior().size();
}
inline int RequestPrepareProposal::misbehavior_size() const {
  return _internal_misbehavior_size();
}
inline void RequestPrepareProposal::clear_misbehavior() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.misbehavior_.Clear();
}
inline ::tendermint::abci::Misbehavior* RequestPrepareProposal::mutable_misbehavior(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestPrepareProposal.misbehavior)
  return _internal_mutable_misbehavior()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>* RequestPrepareProposal::mutable_misbehavior()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tendermint.abci.RequestPrepareProposal.misbehavior)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_misbehavior();
}
inline const ::tendermint::abci::Misbehavior& RequestPrepareProposal::misbehavior(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestPrepareProposal.misbehavior)
  return _internal_misbehavior().Get(index);
}
inline ::tendermint::abci::Misbehavior* RequestPrepareProposal::add_misbehavior() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tendermint::abci::Misbehavior* _add = _internal_mutable_misbehavior()->Add();
  // @@protoc_insertion_point(field_add:tendermint.abci.RequestPrepareProposal.misbehavior)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>& RequestPrepareProposal::misbehavior() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tendermint.abci.RequestPrepareProposal.misbehavior)
  return _internal_misbehavior();
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>&
RequestPrepareProposal::_internal_misbehavior() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.misbehavior_;
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>*
RequestPrepareProposal::_internal_mutable_misbehavior() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.misbehavior_;
}

// int64 height = 5 [json_name = "height"];
inline void RequestPrepareProposal::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t RequestPrepareProposal::height() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestPrepareProposal.height)
  return _internal_height();
}
inline void RequestPrepareProposal::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestPrepareProposal.height)
}
inline ::int64_t RequestPrepareProposal::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void RequestPrepareProposal::_internal_set_height(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// .google.protobuf.Timestamp time = 6 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool RequestPrepareProposal::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& RequestPrepareProposal::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& RequestPrepareProposal::time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestPrepareProposal.time)
  return _internal_time();
}
inline void RequestPrepareProposal::unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.RequestPrepareProposal.time)
}
inline ::google::protobuf::Timestamp* RequestPrepareProposal::release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.time_;
  _impl_.time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* RequestPrepareProposal::unsafe_arena_release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestPrepareProposal.time)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* RequestPrepareProposal::_internal_mutable_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.time_;
}
inline ::google::protobuf::Timestamp* RequestPrepareProposal::mutable_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestPrepareProposal.time)
  return _msg;
}
inline void RequestPrepareProposal::set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestPrepareProposal.time)
}

// bytes next_validators_hash = 7 [json_name = "nextValidatorsHash"];
inline void RequestPrepareProposal::clear_next_validators_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_validators_hash_.ClearToEmpty();
}
inline const std::string& RequestPrepareProposal::next_validators_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestPrepareProposal.next_validators_hash)
  return _internal_next_validators_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestPrepareProposal::set_next_validators_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_validators_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestPrepareProposal.next_validators_hash)
}
inline std::string* RequestPrepareProposal::mutable_next_validators_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_next_validators_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestPrepareProposal.next_validators_hash)
  return _s;
}
inline const std::string& RequestPrepareProposal::_internal_next_validators_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.next_validators_hash_.Get();
}
inline void RequestPrepareProposal::_internal_set_next_validators_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_validators_hash_.Set(value, GetArena());
}
inline std::string* RequestPrepareProposal::_internal_mutable_next_validators_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.next_validators_hash_.Mutable( GetArena());
}
inline std::string* RequestPrepareProposal::release_next_validators_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestPrepareProposal.next_validators_hash)
  return _impl_.next_validators_hash_.Release();
}
inline void RequestPrepareProposal::set_allocated_next_validators_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_validators_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.next_validators_hash_.IsDefault()) {
    _impl_.next_validators_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestPrepareProposal.next_validators_hash)
}

// bytes proposer_address = 8 [json_name = "proposerAddress"];
inline void RequestPrepareProposal::clear_proposer_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposer_address_.ClearToEmpty();
}
inline const std::string& RequestPrepareProposal::proposer_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestPrepareProposal.proposer_address)
  return _internal_proposer_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestPrepareProposal::set_proposer_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposer_address_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestPrepareProposal.proposer_address)
}
inline std::string* RequestPrepareProposal::mutable_proposer_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_proposer_address();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestPrepareProposal.proposer_address)
  return _s;
}
inline const std::string& RequestPrepareProposal::_internal_proposer_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proposer_address_.Get();
}
inline void RequestPrepareProposal::_internal_set_proposer_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposer_address_.Set(value, GetArena());
}
inline std::string* RequestPrepareProposal::_internal_mutable_proposer_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.proposer_address_.Mutable( GetArena());
}
inline std::string* RequestPrepareProposal::release_proposer_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestPrepareProposal.proposer_address)
  return _impl_.proposer_address_.Release();
}
inline void RequestPrepareProposal::set_allocated_proposer_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposer_address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.proposer_address_.IsDefault()) {
    _impl_.proposer_address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestPrepareProposal.proposer_address)
}

// -------------------------------------------------------------------

// RequestProcessProposal

// repeated bytes txs = 1 [json_name = "txs"];
inline int RequestProcessProposal::_internal_txs_size() const {
  return _internal_txs().size();
}
inline int RequestProcessProposal::txs_size() const {
  return _internal_txs_size();
}
inline void RequestProcessProposal::clear_txs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.txs_.Clear();
}
inline std::string* RequestProcessProposal::add_txs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_txs()->Add();
  // @@protoc_insertion_point(field_add_mutable:tendermint.abci.RequestProcessProposal.txs)
  return _s;
}
inline const std::string& RequestProcessProposal::txs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestProcessProposal.txs)
  return _internal_txs().Get(index);
}
inline std::string* RequestProcessProposal::mutable_txs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestProcessProposal.txs)
  return _internal_mutable_txs()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void RequestProcessProposal::set_txs(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_txs()->Mutable(index),
      std::forward<Arg_>(value), args... , ::google::protobuf::internal::BytesTag{});
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestProcessProposal.txs)
}
template <typename Arg_, typename... Args_>
inline void RequestProcessProposal::add_txs(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_txs(),
                               std::forward<Arg_>(value),
                               args... , ::google::protobuf::internal::BytesTag{});
  // @@protoc_insertion_point(field_add:tendermint.abci.RequestProcessProposal.txs)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RequestProcessProposal::txs() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tendermint.abci.RequestProcessProposal.txs)
  return _internal_txs();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RequestProcessProposal::mutable_txs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tendermint.abci.RequestProcessProposal.txs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_txs();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RequestProcessProposal::_internal_txs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.txs_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RequestProcessProposal::_internal_mutable_txs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.txs_;
}

// .tendermint.abci.CommitInfo proposed_last_commit = 2 [json_name = "proposedLastCommit", (.gogoproto.nullable) = false];
inline bool RequestProcessProposal::has_proposed_last_commit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proposed_last_commit_ != nullptr);
  return value;
}
inline void RequestProcessProposal::clear_proposed_last_commit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.proposed_last_commit_ != nullptr) _impl_.proposed_last_commit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tendermint::abci::CommitInfo& RequestProcessProposal::_internal_proposed_last_commit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::abci::CommitInfo* p = _impl_.proposed_last_commit_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::abci::CommitInfo&>(::tendermint::abci::_CommitInfo_default_instance_);
}
inline const ::tendermint::abci::CommitInfo& RequestProcessProposal::proposed_last_commit() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestProcessProposal.proposed_last_commit)
  return _internal_proposed_last_commit();
}
inline void RequestProcessProposal::unsafe_arena_set_allocated_proposed_last_commit(::tendermint::abci::CommitInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.proposed_last_commit_);
  }
  _impl_.proposed_last_commit_ = reinterpret_cast<::tendermint::abci::CommitInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.RequestProcessProposal.proposed_last_commit)
}
inline ::tendermint::abci::CommitInfo* RequestProcessProposal::release_proposed_last_commit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::abci::CommitInfo* released = _impl_.proposed_last_commit_;
  _impl_.proposed_last_commit_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::abci::CommitInfo* RequestProcessProposal::unsafe_arena_release_proposed_last_commit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestProcessProposal.proposed_last_commit)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::abci::CommitInfo* temp = _impl_.proposed_last_commit_;
  _impl_.proposed_last_commit_ = nullptr;
  return temp;
}
inline ::tendermint::abci::CommitInfo* RequestProcessProposal::_internal_mutable_proposed_last_commit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.proposed_last_commit_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::CommitInfo>(GetArena());
    _impl_.proposed_last_commit_ = reinterpret_cast<::tendermint::abci::CommitInfo*>(p);
  }
  return _impl_.proposed_last_commit_;
}
inline ::tendermint::abci::CommitInfo* RequestProcessProposal::mutable_proposed_last_commit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tendermint::abci::CommitInfo* _msg = _internal_mutable_proposed_last_commit();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestProcessProposal.proposed_last_commit)
  return _msg;
}
inline void RequestProcessProposal::set_allocated_proposed_last_commit(::tendermint::abci::CommitInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.proposed_last_commit_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.proposed_last_commit_ = reinterpret_cast<::tendermint::abci::CommitInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestProcessProposal.proposed_last_commit)
}

// repeated .tendermint.abci.Misbehavior misbehavior = 3 [json_name = "misbehavior", (.gogoproto.nullable) = false];
inline int RequestProcessProposal::_internal_misbehavior_size() const {
  return _internal_misbehavior().size();
}
inline int RequestProcessProposal::misbehavior_size() const {
  return _internal_misbehavior_size();
}
inline void RequestProcessProposal::clear_misbehavior() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.misbehavior_.Clear();
}
inline ::tendermint::abci::Misbehavior* RequestProcessProposal::mutable_misbehavior(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestProcessProposal.misbehavior)
  return _internal_mutable_misbehavior()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>* RequestProcessProposal::mutable_misbehavior()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tendermint.abci.RequestProcessProposal.misbehavior)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_misbehavior();
}
inline const ::tendermint::abci::Misbehavior& RequestProcessProposal::misbehavior(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestProcessProposal.misbehavior)
  return _internal_misbehavior().Get(index);
}
inline ::tendermint::abci::Misbehavior* RequestProcessProposal::add_misbehavior() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tendermint::abci::Misbehavior* _add = _internal_mutable_misbehavior()->Add();
  // @@protoc_insertion_point(field_add:tendermint.abci.RequestProcessProposal.misbehavior)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>& RequestProcessProposal::misbehavior() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tendermint.abci.RequestProcessProposal.misbehavior)
  return _internal_misbehavior();
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>&
RequestProcessProposal::_internal_misbehavior() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.misbehavior_;
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>*
RequestProcessProposal::_internal_mutable_misbehavior() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.misbehavior_;
}

// bytes hash = 4 [json_name = "hash"];
inline void RequestProcessProposal::clear_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& RequestProcessProposal::hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestProcessProposal.hash)
  return _internal_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestProcessProposal::set_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestProcessProposal.hash)
}
inline std::string* RequestProcessProposal::mutable_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestProcessProposal.hash)
  return _s;
}
inline const std::string& RequestProcessProposal::_internal_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hash_.Get();
}
inline void RequestProcessProposal::_internal_set_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.Set(value, GetArena());
}
inline std::string* RequestProcessProposal::_internal_mutable_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hash_.Mutable( GetArena());
}
inline std::string* RequestProcessProposal::release_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestProcessProposal.hash)
  return _impl_.hash_.Release();
}
inline void RequestProcessProposal::set_allocated_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestProcessProposal.hash)
}

// int64 height = 5 [json_name = "height"];
inline void RequestProcessProposal::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t RequestProcessProposal::height() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestProcessProposal.height)
  return _internal_height();
}
inline void RequestProcessProposal::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestProcessProposal.height)
}
inline ::int64_t RequestProcessProposal::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void RequestProcessProposal::_internal_set_height(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// .google.protobuf.Timestamp time = 6 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool RequestProcessProposal::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& RequestProcessProposal::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& RequestProcessProposal::time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestProcessProposal.time)
  return _internal_time();
}
inline void RequestProcessProposal::unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.RequestProcessProposal.time)
}
inline ::google::protobuf::Timestamp* RequestProcessProposal::release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.time_;
  _impl_.time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* RequestProcessProposal::unsafe_arena_release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestProcessProposal.time)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* RequestProcessProposal::_internal_mutable_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.time_;
}
inline ::google::protobuf::Timestamp* RequestProcessProposal::mutable_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestProcessProposal.time)
  return _msg;
}
inline void RequestProcessProposal::set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestProcessProposal.time)
}

// bytes next_validators_hash = 7 [json_name = "nextValidatorsHash"];
inline void RequestProcessProposal::clear_next_validators_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_validators_hash_.ClearToEmpty();
}
inline const std::string& RequestProcessProposal::next_validators_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestProcessProposal.next_validators_hash)
  return _internal_next_validators_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestProcessProposal::set_next_validators_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_validators_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestProcessProposal.next_validators_hash)
}
inline std::string* RequestProcessProposal::mutable_next_validators_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_next_validators_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestProcessProposal.next_validators_hash)
  return _s;
}
inline const std::string& RequestProcessProposal::_internal_next_validators_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.next_validators_hash_.Get();
}
inline void RequestProcessProposal::_internal_set_next_validators_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_validators_hash_.Set(value, GetArena());
}
inline std::string* RequestProcessProposal::_internal_mutable_next_validators_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.next_validators_hash_.Mutable( GetArena());
}
inline std::string* RequestProcessProposal::release_next_validators_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestProcessProposal.next_validators_hash)
  return _impl_.next_validators_hash_.Release();
}
inline void RequestProcessProposal::set_allocated_next_validators_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_validators_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.next_validators_hash_.IsDefault()) {
    _impl_.next_validators_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestProcessProposal.next_validators_hash)
}

// bytes proposer_address = 8 [json_name = "proposerAddress"];
inline void RequestProcessProposal::clear_proposer_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposer_address_.ClearToEmpty();
}
inline const std::string& RequestProcessProposal::proposer_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestProcessProposal.proposer_address)
  return _internal_proposer_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestProcessProposal::set_proposer_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposer_address_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestProcessProposal.proposer_address)
}
inline std::string* RequestProcessProposal::mutable_proposer_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_proposer_address();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestProcessProposal.proposer_address)
  return _s;
}
inline const std::string& RequestProcessProposal::_internal_proposer_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proposer_address_.Get();
}
inline void RequestProcessProposal::_internal_set_proposer_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposer_address_.Set(value, GetArena());
}
inline std::string* RequestProcessProposal::_internal_mutable_proposer_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.proposer_address_.Mutable( GetArena());
}
inline std::string* RequestProcessProposal::release_proposer_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestProcessProposal.proposer_address)
  return _impl_.proposer_address_.Release();
}
inline void RequestProcessProposal::set_allocated_proposer_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposer_address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.proposer_address_.IsDefault()) {
    _impl_.proposer_address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestProcessProposal.proposer_address)
}

// -------------------------------------------------------------------

// RequestExtendVote

// bytes hash = 1 [json_name = "hash"];
inline void RequestExtendVote::clear_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& RequestExtendVote::hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestExtendVote.hash)
  return _internal_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestExtendVote::set_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestExtendVote.hash)
}
inline std::string* RequestExtendVote::mutable_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestExtendVote.hash)
  return _s;
}
inline const std::string& RequestExtendVote::_internal_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hash_.Get();
}
inline void RequestExtendVote::_internal_set_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.Set(value, GetArena());
}
inline std::string* RequestExtendVote::_internal_mutable_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hash_.Mutable( GetArena());
}
inline std::string* RequestExtendVote::release_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestExtendVote.hash)
  return _impl_.hash_.Release();
}
inline void RequestExtendVote::set_allocated_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestExtendVote.hash)
}

// int64 height = 2 [json_name = "height"];
inline void RequestExtendVote::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t RequestExtendVote::height() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestExtendVote.height)
  return _internal_height();
}
inline void RequestExtendVote::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestExtendVote.height)
}
inline ::int64_t RequestExtendVote::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void RequestExtendVote::_internal_set_height(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// .google.protobuf.Timestamp time = 3 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool RequestExtendVote::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& RequestExtendVote::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& RequestExtendVote::time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestExtendVote.time)
  return _internal_time();
}
inline void RequestExtendVote::unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.RequestExtendVote.time)
}
inline ::google::protobuf::Timestamp* RequestExtendVote::release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.time_;
  _impl_.time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* RequestExtendVote::unsafe_arena_release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestExtendVote.time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* RequestExtendVote::_internal_mutable_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.time_;
}
inline ::google::protobuf::Timestamp* RequestExtendVote::mutable_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestExtendVote.time)
  return _msg;
}
inline void RequestExtendVote::set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestExtendVote.time)
}

// repeated bytes txs = 4 [json_name = "txs"];
inline int RequestExtendVote::_internal_txs_size() const {
  return _internal_txs().size();
}
inline int RequestExtendVote::txs_size() const {
  return _internal_txs_size();
}
inline void RequestExtendVote::clear_txs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.txs_.Clear();
}
inline std::string* RequestExtendVote::add_txs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_txs()->Add();
  // @@protoc_insertion_point(field_add_mutable:tendermint.abci.RequestExtendVote.txs)
  return _s;
}
inline const std::string& RequestExtendVote::txs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestExtendVote.txs)
  return _internal_txs().Get(index);
}
inline std::string* RequestExtendVote::mutable_txs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestExtendVote.txs)
  return _internal_mutable_txs()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void RequestExtendVote::set_txs(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_txs()->Mutable(index),
      std::forward<Arg_>(value), args... , ::google::protobuf::internal::BytesTag{});
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestExtendVote.txs)
}
template <typename Arg_, typename... Args_>
inline void RequestExtendVote::add_txs(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_txs(),
                               std::forward<Arg_>(value),
                               args... , ::google::protobuf::internal::BytesTag{});
  // @@protoc_insertion_point(field_add:tendermint.abci.RequestExtendVote.txs)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RequestExtendVote::txs() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tendermint.abci.RequestExtendVote.txs)
  return _internal_txs();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RequestExtendVote::mutable_txs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tendermint.abci.RequestExtendVote.txs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_txs();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RequestExtendVote::_internal_txs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.txs_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RequestExtendVote::_internal_mutable_txs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.txs_;
}

// .tendermint.abci.CommitInfo proposed_last_commit = 5 [json_name = "proposedLastCommit", (.gogoproto.nullable) = false];
inline bool RequestExtendVote::has_proposed_last_commit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proposed_last_commit_ != nullptr);
  return value;
}
inline void RequestExtendVote::clear_proposed_last_commit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.proposed_last_commit_ != nullptr) _impl_.proposed_last_commit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::tendermint::abci::CommitInfo& RequestExtendVote::_internal_proposed_last_commit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::abci::CommitInfo* p = _impl_.proposed_last_commit_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::abci::CommitInfo&>(::tendermint::abci::_CommitInfo_default_instance_);
}
inline const ::tendermint::abci::CommitInfo& RequestExtendVote::proposed_last_commit() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestExtendVote.proposed_last_commit)
  return _internal_proposed_last_commit();
}
inline void RequestExtendVote::unsafe_arena_set_allocated_proposed_last_commit(::tendermint::abci::CommitInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.proposed_last_commit_);
  }
  _impl_.proposed_last_commit_ = reinterpret_cast<::tendermint::abci::CommitInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.RequestExtendVote.proposed_last_commit)
}
inline ::tendermint::abci::CommitInfo* RequestExtendVote::release_proposed_last_commit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::abci::CommitInfo* released = _impl_.proposed_last_commit_;
  _impl_.proposed_last_commit_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::abci::CommitInfo* RequestExtendVote::unsafe_arena_release_proposed_last_commit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestExtendVote.proposed_last_commit)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::abci::CommitInfo* temp = _impl_.proposed_last_commit_;
  _impl_.proposed_last_commit_ = nullptr;
  return temp;
}
inline ::tendermint::abci::CommitInfo* RequestExtendVote::_internal_mutable_proposed_last_commit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.proposed_last_commit_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::CommitInfo>(GetArena());
    _impl_.proposed_last_commit_ = reinterpret_cast<::tendermint::abci::CommitInfo*>(p);
  }
  return _impl_.proposed_last_commit_;
}
inline ::tendermint::abci::CommitInfo* RequestExtendVote::mutable_proposed_last_commit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tendermint::abci::CommitInfo* _msg = _internal_mutable_proposed_last_commit();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestExtendVote.proposed_last_commit)
  return _msg;
}
inline void RequestExtendVote::set_allocated_proposed_last_commit(::tendermint::abci::CommitInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.proposed_last_commit_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.proposed_last_commit_ = reinterpret_cast<::tendermint::abci::CommitInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestExtendVote.proposed_last_commit)
}

// repeated .tendermint.abci.Misbehavior misbehavior = 6 [json_name = "misbehavior", (.gogoproto.nullable) = false];
inline int RequestExtendVote::_internal_misbehavior_size() const {
  return _internal_misbehavior().size();
}
inline int RequestExtendVote::misbehavior_size() const {
  return _internal_misbehavior_size();
}
inline void RequestExtendVote::clear_misbehavior() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.misbehavior_.Clear();
}
inline ::tendermint::abci::Misbehavior* RequestExtendVote::mutable_misbehavior(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestExtendVote.misbehavior)
  return _internal_mutable_misbehavior()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>* RequestExtendVote::mutable_misbehavior()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tendermint.abci.RequestExtendVote.misbehavior)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_misbehavior();
}
inline const ::tendermint::abci::Misbehavior& RequestExtendVote::misbehavior(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestExtendVote.misbehavior)
  return _internal_misbehavior().Get(index);
}
inline ::tendermint::abci::Misbehavior* RequestExtendVote::add_misbehavior() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tendermint::abci::Misbehavior* _add = _internal_mutable_misbehavior()->Add();
  // @@protoc_insertion_point(field_add:tendermint.abci.RequestExtendVote.misbehavior)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>& RequestExtendVote::misbehavior() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tendermint.abci.RequestExtendVote.misbehavior)
  return _internal_misbehavior();
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>&
RequestExtendVote::_internal_misbehavior() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.misbehavior_;
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>*
RequestExtendVote::_internal_mutable_misbehavior() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.misbehavior_;
}

// bytes next_validators_hash = 7 [json_name = "nextValidatorsHash"];
inline void RequestExtendVote::clear_next_validators_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_validators_hash_.ClearToEmpty();
}
inline const std::string& RequestExtendVote::next_validators_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestExtendVote.next_validators_hash)
  return _internal_next_validators_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestExtendVote::set_next_validators_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_validators_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestExtendVote.next_validators_hash)
}
inline std::string* RequestExtendVote::mutable_next_validators_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_next_validators_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestExtendVote.next_validators_hash)
  return _s;
}
inline const std::string& RequestExtendVote::_internal_next_validators_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.next_validators_hash_.Get();
}
inline void RequestExtendVote::_internal_set_next_validators_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_validators_hash_.Set(value, GetArena());
}
inline std::string* RequestExtendVote::_internal_mutable_next_validators_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.next_validators_hash_.Mutable( GetArena());
}
inline std::string* RequestExtendVote::release_next_validators_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestExtendVote.next_validators_hash)
  return _impl_.next_validators_hash_.Release();
}
inline void RequestExtendVote::set_allocated_next_validators_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_validators_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.next_validators_hash_.IsDefault()) {
    _impl_.next_validators_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestExtendVote.next_validators_hash)
}

// bytes proposer_address = 8 [json_name = "proposerAddress"];
inline void RequestExtendVote::clear_proposer_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposer_address_.ClearToEmpty();
}
inline const std::string& RequestExtendVote::proposer_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestExtendVote.proposer_address)
  return _internal_proposer_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestExtendVote::set_proposer_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposer_address_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestExtendVote.proposer_address)
}
inline std::string* RequestExtendVote::mutable_proposer_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_proposer_address();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestExtendVote.proposer_address)
  return _s;
}
inline const std::string& RequestExtendVote::_internal_proposer_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proposer_address_.Get();
}
inline void RequestExtendVote::_internal_set_proposer_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposer_address_.Set(value, GetArena());
}
inline std::string* RequestExtendVote::_internal_mutable_proposer_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.proposer_address_.Mutable( GetArena());
}
inline std::string* RequestExtendVote::release_proposer_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestExtendVote.proposer_address)
  return _impl_.proposer_address_.Release();
}
inline void RequestExtendVote::set_allocated_proposer_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposer_address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.proposer_address_.IsDefault()) {
    _impl_.proposer_address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestExtendVote.proposer_address)
}

// -------------------------------------------------------------------

// RequestVerifyVoteExtension

// bytes hash = 1 [json_name = "hash"];
inline void RequestVerifyVoteExtension::clear_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& RequestVerifyVoteExtension::hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestVerifyVoteExtension.hash)
  return _internal_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestVerifyVoteExtension::set_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestVerifyVoteExtension.hash)
}
inline std::string* RequestVerifyVoteExtension::mutable_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestVerifyVoteExtension.hash)
  return _s;
}
inline const std::string& RequestVerifyVoteExtension::_internal_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hash_.Get();
}
inline void RequestVerifyVoteExtension::_internal_set_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.Set(value, GetArena());
}
inline std::string* RequestVerifyVoteExtension::_internal_mutable_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hash_.Mutable( GetArena());
}
inline std::string* RequestVerifyVoteExtension::release_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestVerifyVoteExtension.hash)
  return _impl_.hash_.Release();
}
inline void RequestVerifyVoteExtension::set_allocated_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestVerifyVoteExtension.hash)
}

// bytes validator_address = 2 [json_name = "validatorAddress"];
inline void RequestVerifyVoteExtension::clear_validator_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validator_address_.ClearToEmpty();
}
inline const std::string& RequestVerifyVoteExtension::validator_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestVerifyVoteExtension.validator_address)
  return _internal_validator_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestVerifyVoteExtension::set_validator_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validator_address_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestVerifyVoteExtension.validator_address)
}
inline std::string* RequestVerifyVoteExtension::mutable_validator_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_validator_address();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestVerifyVoteExtension.validator_address)
  return _s;
}
inline const std::string& RequestVerifyVoteExtension::_internal_validator_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.validator_address_.Get();
}
inline void RequestVerifyVoteExtension::_internal_set_validator_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validator_address_.Set(value, GetArena());
}
inline std::string* RequestVerifyVoteExtension::_internal_mutable_validator_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.validator_address_.Mutable( GetArena());
}
inline std::string* RequestVerifyVoteExtension::release_validator_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestVerifyVoteExtension.validator_address)
  return _impl_.validator_address_.Release();
}
inline void RequestVerifyVoteExtension::set_allocated_validator_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validator_address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.validator_address_.IsDefault()) {
    _impl_.validator_address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestVerifyVoteExtension.validator_address)
}

// int64 height = 3 [json_name = "height"];
inline void RequestVerifyVoteExtension::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t RequestVerifyVoteExtension::height() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestVerifyVoteExtension.height)
  return _internal_height();
}
inline void RequestVerifyVoteExtension::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestVerifyVoteExtension.height)
}
inline ::int64_t RequestVerifyVoteExtension::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void RequestVerifyVoteExtension::_internal_set_height(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// bytes vote_extension = 4 [json_name = "voteExtension"];
inline void RequestVerifyVoteExtension::clear_vote_extension() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vote_extension_.ClearToEmpty();
}
inline const std::string& RequestVerifyVoteExtension::vote_extension() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestVerifyVoteExtension.vote_extension)
  return _internal_vote_extension();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestVerifyVoteExtension::set_vote_extension(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vote_extension_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestVerifyVoteExtension.vote_extension)
}
inline std::string* RequestVerifyVoteExtension::mutable_vote_extension() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_vote_extension();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestVerifyVoteExtension.vote_extension)
  return _s;
}
inline const std::string& RequestVerifyVoteExtension::_internal_vote_extension() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vote_extension_.Get();
}
inline void RequestVerifyVoteExtension::_internal_set_vote_extension(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vote_extension_.Set(value, GetArena());
}
inline std::string* RequestVerifyVoteExtension::_internal_mutable_vote_extension() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.vote_extension_.Mutable( GetArena());
}
inline std::string* RequestVerifyVoteExtension::release_vote_extension() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestVerifyVoteExtension.vote_extension)
  return _impl_.vote_extension_.Release();
}
inline void RequestVerifyVoteExtension::set_allocated_vote_extension(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vote_extension_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.vote_extension_.IsDefault()) {
    _impl_.vote_extension_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestVerifyVoteExtension.vote_extension)
}

// -------------------------------------------------------------------

// RequestFinalizeBlock

// repeated bytes txs = 1 [json_name = "txs"];
inline int RequestFinalizeBlock::_internal_txs_size() const {
  return _internal_txs().size();
}
inline int RequestFinalizeBlock::txs_size() const {
  return _internal_txs_size();
}
inline void RequestFinalizeBlock::clear_txs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.txs_.Clear();
}
inline std::string* RequestFinalizeBlock::add_txs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_txs()->Add();
  // @@protoc_insertion_point(field_add_mutable:tendermint.abci.RequestFinalizeBlock.txs)
  return _s;
}
inline const std::string& RequestFinalizeBlock::txs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestFinalizeBlock.txs)
  return _internal_txs().Get(index);
}
inline std::string* RequestFinalizeBlock::mutable_txs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestFinalizeBlock.txs)
  return _internal_mutable_txs()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void RequestFinalizeBlock::set_txs(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_txs()->Mutable(index),
      std::forward<Arg_>(value), args... , ::google::protobuf::internal::BytesTag{});
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestFinalizeBlock.txs)
}
template <typename Arg_, typename... Args_>
inline void RequestFinalizeBlock::add_txs(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_txs(),
                               std::forward<Arg_>(value),
                               args... , ::google::protobuf::internal::BytesTag{});
  // @@protoc_insertion_point(field_add:tendermint.abci.RequestFinalizeBlock.txs)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RequestFinalizeBlock::txs() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tendermint.abci.RequestFinalizeBlock.txs)
  return _internal_txs();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RequestFinalizeBlock::mutable_txs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tendermint.abci.RequestFinalizeBlock.txs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_txs();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RequestFinalizeBlock::_internal_txs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.txs_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RequestFinalizeBlock::_internal_mutable_txs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.txs_;
}

// .tendermint.abci.CommitInfo decided_last_commit = 2 [json_name = "decidedLastCommit", (.gogoproto.nullable) = false];
inline bool RequestFinalizeBlock::has_decided_last_commit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.decided_last_commit_ != nullptr);
  return value;
}
inline void RequestFinalizeBlock::clear_decided_last_commit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.decided_last_commit_ != nullptr) _impl_.decided_last_commit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tendermint::abci::CommitInfo& RequestFinalizeBlock::_internal_decided_last_commit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::abci::CommitInfo* p = _impl_.decided_last_commit_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::abci::CommitInfo&>(::tendermint::abci::_CommitInfo_default_instance_);
}
inline const ::tendermint::abci::CommitInfo& RequestFinalizeBlock::decided_last_commit() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestFinalizeBlock.decided_last_commit)
  return _internal_decided_last_commit();
}
inline void RequestFinalizeBlock::unsafe_arena_set_allocated_decided_last_commit(::tendermint::abci::CommitInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.decided_last_commit_);
  }
  _impl_.decided_last_commit_ = reinterpret_cast<::tendermint::abci::CommitInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.RequestFinalizeBlock.decided_last_commit)
}
inline ::tendermint::abci::CommitInfo* RequestFinalizeBlock::release_decided_last_commit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::abci::CommitInfo* released = _impl_.decided_last_commit_;
  _impl_.decided_last_commit_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::abci::CommitInfo* RequestFinalizeBlock::unsafe_arena_release_decided_last_commit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestFinalizeBlock.decided_last_commit)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::abci::CommitInfo* temp = _impl_.decided_last_commit_;
  _impl_.decided_last_commit_ = nullptr;
  return temp;
}
inline ::tendermint::abci::CommitInfo* RequestFinalizeBlock::_internal_mutable_decided_last_commit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.decided_last_commit_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::CommitInfo>(GetArena());
    _impl_.decided_last_commit_ = reinterpret_cast<::tendermint::abci::CommitInfo*>(p);
  }
  return _impl_.decided_last_commit_;
}
inline ::tendermint::abci::CommitInfo* RequestFinalizeBlock::mutable_decided_last_commit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tendermint::abci::CommitInfo* _msg = _internal_mutable_decided_last_commit();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestFinalizeBlock.decided_last_commit)
  return _msg;
}
inline void RequestFinalizeBlock::set_allocated_decided_last_commit(::tendermint::abci::CommitInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.decided_last_commit_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.decided_last_commit_ = reinterpret_cast<::tendermint::abci::CommitInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestFinalizeBlock.decided_last_commit)
}

// repeated .tendermint.abci.Misbehavior misbehavior = 3 [json_name = "misbehavior", (.gogoproto.nullable) = false];
inline int RequestFinalizeBlock::_internal_misbehavior_size() const {
  return _internal_misbehavior().size();
}
inline int RequestFinalizeBlock::misbehavior_size() const {
  return _internal_misbehavior_size();
}
inline void RequestFinalizeBlock::clear_misbehavior() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.misbehavior_.Clear();
}
inline ::tendermint::abci::Misbehavior* RequestFinalizeBlock::mutable_misbehavior(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestFinalizeBlock.misbehavior)
  return _internal_mutable_misbehavior()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>* RequestFinalizeBlock::mutable_misbehavior()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tendermint.abci.RequestFinalizeBlock.misbehavior)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_misbehavior();
}
inline const ::tendermint::abci::Misbehavior& RequestFinalizeBlock::misbehavior(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestFinalizeBlock.misbehavior)
  return _internal_misbehavior().Get(index);
}
inline ::tendermint::abci::Misbehavior* RequestFinalizeBlock::add_misbehavior() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tendermint::abci::Misbehavior* _add = _internal_mutable_misbehavior()->Add();
  // @@protoc_insertion_point(field_add:tendermint.abci.RequestFinalizeBlock.misbehavior)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>& RequestFinalizeBlock::misbehavior() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tendermint.abci.RequestFinalizeBlock.misbehavior)
  return _internal_misbehavior();
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>&
RequestFinalizeBlock::_internal_misbehavior() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.misbehavior_;
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::Misbehavior>*
RequestFinalizeBlock::_internal_mutable_misbehavior() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.misbehavior_;
}

// bytes hash = 4 [json_name = "hash"];
inline void RequestFinalizeBlock::clear_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& RequestFinalizeBlock::hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestFinalizeBlock.hash)
  return _internal_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestFinalizeBlock::set_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestFinalizeBlock.hash)
}
inline std::string* RequestFinalizeBlock::mutable_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestFinalizeBlock.hash)
  return _s;
}
inline const std::string& RequestFinalizeBlock::_internal_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hash_.Get();
}
inline void RequestFinalizeBlock::_internal_set_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.Set(value, GetArena());
}
inline std::string* RequestFinalizeBlock::_internal_mutable_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hash_.Mutable( GetArena());
}
inline std::string* RequestFinalizeBlock::release_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestFinalizeBlock.hash)
  return _impl_.hash_.Release();
}
inline void RequestFinalizeBlock::set_allocated_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestFinalizeBlock.hash)
}

// int64 height = 5 [json_name = "height"];
inline void RequestFinalizeBlock::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t RequestFinalizeBlock::height() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestFinalizeBlock.height)
  return _internal_height();
}
inline void RequestFinalizeBlock::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestFinalizeBlock.height)
}
inline ::int64_t RequestFinalizeBlock::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void RequestFinalizeBlock::_internal_set_height(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// .google.protobuf.Timestamp time = 6 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool RequestFinalizeBlock::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& RequestFinalizeBlock::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& RequestFinalizeBlock::time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestFinalizeBlock.time)
  return _internal_time();
}
inline void RequestFinalizeBlock::unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.RequestFinalizeBlock.time)
}
inline ::google::protobuf::Timestamp* RequestFinalizeBlock::release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.time_;
  _impl_.time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* RequestFinalizeBlock::unsafe_arena_release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestFinalizeBlock.time)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* RequestFinalizeBlock::_internal_mutable_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.time_;
}
inline ::google::protobuf::Timestamp* RequestFinalizeBlock::mutable_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestFinalizeBlock.time)
  return _msg;
}
inline void RequestFinalizeBlock::set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestFinalizeBlock.time)
}

// bytes next_validators_hash = 7 [json_name = "nextValidatorsHash"];
inline void RequestFinalizeBlock::clear_next_validators_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_validators_hash_.ClearToEmpty();
}
inline const std::string& RequestFinalizeBlock::next_validators_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestFinalizeBlock.next_validators_hash)
  return _internal_next_validators_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestFinalizeBlock::set_next_validators_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_validators_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestFinalizeBlock.next_validators_hash)
}
inline std::string* RequestFinalizeBlock::mutable_next_validators_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_next_validators_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestFinalizeBlock.next_validators_hash)
  return _s;
}
inline const std::string& RequestFinalizeBlock::_internal_next_validators_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.next_validators_hash_.Get();
}
inline void RequestFinalizeBlock::_internal_set_next_validators_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_validators_hash_.Set(value, GetArena());
}
inline std::string* RequestFinalizeBlock::_internal_mutable_next_validators_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.next_validators_hash_.Mutable( GetArena());
}
inline std::string* RequestFinalizeBlock::release_next_validators_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestFinalizeBlock.next_validators_hash)
  return _impl_.next_validators_hash_.Release();
}
inline void RequestFinalizeBlock::set_allocated_next_validators_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_validators_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.next_validators_hash_.IsDefault()) {
    _impl_.next_validators_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestFinalizeBlock.next_validators_hash)
}

// bytes proposer_address = 8 [json_name = "proposerAddress"];
inline void RequestFinalizeBlock::clear_proposer_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposer_address_.ClearToEmpty();
}
inline const std::string& RequestFinalizeBlock::proposer_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.RequestFinalizeBlock.proposer_address)
  return _internal_proposer_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestFinalizeBlock::set_proposer_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposer_address_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.RequestFinalizeBlock.proposer_address)
}
inline std::string* RequestFinalizeBlock::mutable_proposer_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_proposer_address();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.RequestFinalizeBlock.proposer_address)
  return _s;
}
inline const std::string& RequestFinalizeBlock::_internal_proposer_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proposer_address_.Get();
}
inline void RequestFinalizeBlock::_internal_set_proposer_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposer_address_.Set(value, GetArena());
}
inline std::string* RequestFinalizeBlock::_internal_mutable_proposer_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.proposer_address_.Mutable( GetArena());
}
inline std::string* RequestFinalizeBlock::release_proposer_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.RequestFinalizeBlock.proposer_address)
  return _impl_.proposer_address_.Release();
}
inline void RequestFinalizeBlock::set_allocated_proposer_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposer_address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.proposer_address_.IsDefault()) {
    _impl_.proposer_address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.RequestFinalizeBlock.proposer_address)
}

// -------------------------------------------------------------------

// Response

// .tendermint.abci.ResponseException exception = 1 [json_name = "exception"];
inline bool Response::has_exception() const {
  return value_case() == kException;
}
inline bool Response::_internal_has_exception() const {
  return value_case() == kException;
}
inline void Response::set_has_exception() {
  _impl_._oneof_case_[0] = kException;
}
inline void Response::clear_exception() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kException) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.exception_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.exception_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::ResponseException* Response::release_exception() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Response.exception)
  if (value_case() == kException) {
    clear_has_value();
    auto* temp = _impl_.value_.exception_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.exception_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::ResponseException& Response::_internal_exception() const {
  return value_case() == kException ? *_impl_.value_.exception_ : reinterpret_cast<::tendermint::abci::ResponseException&>(::tendermint::abci::_ResponseException_default_instance_);
}
inline const ::tendermint::abci::ResponseException& Response::exception() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Response.exception)
  return _internal_exception();
}
inline ::tendermint::abci::ResponseException* Response::unsafe_arena_release_exception() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Response.exception)
  if (value_case() == kException) {
    clear_has_value();
    auto* temp = _impl_.value_.exception_;
    _impl_.value_.exception_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_exception(::tendermint::abci::ResponseException* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_exception();
    _impl_.value_.exception_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Response.exception)
}
inline ::tendermint::abci::ResponseException* Response::_internal_mutable_exception() {
  if (value_case() != kException) {
    clear_value();
    set_has_exception();
    _impl_.value_.exception_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::ResponseException>(GetArena());
  }
  return _impl_.value_.exception_;
}
inline ::tendermint::abci::ResponseException* Response::mutable_exception() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::ResponseException* _msg = _internal_mutable_exception();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Response.exception)
  return _msg;
}

// .tendermint.abci.ResponseEcho echo = 2 [json_name = "echo"];
inline bool Response::has_echo() const {
  return value_case() == kEcho;
}
inline bool Response::_internal_has_echo() const {
  return value_case() == kEcho;
}
inline void Response::set_has_echo() {
  _impl_._oneof_case_[0] = kEcho;
}
inline void Response::clear_echo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kEcho) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.echo_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.echo_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::ResponseEcho* Response::release_echo() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Response.echo)
  if (value_case() == kEcho) {
    clear_has_value();
    auto* temp = _impl_.value_.echo_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.echo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::ResponseEcho& Response::_internal_echo() const {
  return value_case() == kEcho ? *_impl_.value_.echo_ : reinterpret_cast<::tendermint::abci::ResponseEcho&>(::tendermint::abci::_ResponseEcho_default_instance_);
}
inline const ::tendermint::abci::ResponseEcho& Response::echo() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Response.echo)
  return _internal_echo();
}
inline ::tendermint::abci::ResponseEcho* Response::unsafe_arena_release_echo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Response.echo)
  if (value_case() == kEcho) {
    clear_has_value();
    auto* temp = _impl_.value_.echo_;
    _impl_.value_.echo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_echo(::tendermint::abci::ResponseEcho* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_echo();
    _impl_.value_.echo_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Response.echo)
}
inline ::tendermint::abci::ResponseEcho* Response::_internal_mutable_echo() {
  if (value_case() != kEcho) {
    clear_value();
    set_has_echo();
    _impl_.value_.echo_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::ResponseEcho>(GetArena());
  }
  return _impl_.value_.echo_;
}
inline ::tendermint::abci::ResponseEcho* Response::mutable_echo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::ResponseEcho* _msg = _internal_mutable_echo();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Response.echo)
  return _msg;
}

// .tendermint.abci.ResponseFlush flush = 3 [json_name = "flush"];
inline bool Response::has_flush() const {
  return value_case() == kFlush;
}
inline bool Response::_internal_has_flush() const {
  return value_case() == kFlush;
}
inline void Response::set_has_flush() {
  _impl_._oneof_case_[0] = kFlush;
}
inline void Response::clear_flush() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kFlush) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.flush_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.flush_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::ResponseFlush* Response::release_flush() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Response.flush)
  if (value_case() == kFlush) {
    clear_has_value();
    auto* temp = _impl_.value_.flush_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.flush_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::ResponseFlush& Response::_internal_flush() const {
  return value_case() == kFlush ? *_impl_.value_.flush_ : reinterpret_cast<::tendermint::abci::ResponseFlush&>(::tendermint::abci::_ResponseFlush_default_instance_);
}
inline const ::tendermint::abci::ResponseFlush& Response::flush() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Response.flush)
  return _internal_flush();
}
inline ::tendermint::abci::ResponseFlush* Response::unsafe_arena_release_flush() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Response.flush)
  if (value_case() == kFlush) {
    clear_has_value();
    auto* temp = _impl_.value_.flush_;
    _impl_.value_.flush_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_flush(::tendermint::abci::ResponseFlush* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_flush();
    _impl_.value_.flush_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Response.flush)
}
inline ::tendermint::abci::ResponseFlush* Response::_internal_mutable_flush() {
  if (value_case() != kFlush) {
    clear_value();
    set_has_flush();
    _impl_.value_.flush_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::ResponseFlush>(GetArena());
  }
  return _impl_.value_.flush_;
}
inline ::tendermint::abci::ResponseFlush* Response::mutable_flush() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::ResponseFlush* _msg = _internal_mutable_flush();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Response.flush)
  return _msg;
}

// .tendermint.abci.ResponseInfo info = 4 [json_name = "info"];
inline bool Response::has_info() const {
  return value_case() == kInfo;
}
inline bool Response::_internal_has_info() const {
  return value_case() == kInfo;
}
inline void Response::set_has_info() {
  _impl_._oneof_case_[0] = kInfo;
}
inline void Response::clear_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kInfo) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.info_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.info_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::ResponseInfo* Response::release_info() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Response.info)
  if (value_case() == kInfo) {
    clear_has_value();
    auto* temp = _impl_.value_.info_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::ResponseInfo& Response::_internal_info() const {
  return value_case() == kInfo ? *_impl_.value_.info_ : reinterpret_cast<::tendermint::abci::ResponseInfo&>(::tendermint::abci::_ResponseInfo_default_instance_);
}
inline const ::tendermint::abci::ResponseInfo& Response::info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Response.info)
  return _internal_info();
}
inline ::tendermint::abci::ResponseInfo* Response::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Response.info)
  if (value_case() == kInfo) {
    clear_has_value();
    auto* temp = _impl_.value_.info_;
    _impl_.value_.info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_info(::tendermint::abci::ResponseInfo* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_info();
    _impl_.value_.info_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Response.info)
}
inline ::tendermint::abci::ResponseInfo* Response::_internal_mutable_info() {
  if (value_case() != kInfo) {
    clear_value();
    set_has_info();
    _impl_.value_.info_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::ResponseInfo>(GetArena());
  }
  return _impl_.value_.info_;
}
inline ::tendermint::abci::ResponseInfo* Response::mutable_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::ResponseInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Response.info)
  return _msg;
}

// .tendermint.abci.ResponseInitChain init_chain = 6 [json_name = "initChain"];
inline bool Response::has_init_chain() const {
  return value_case() == kInitChain;
}
inline bool Response::_internal_has_init_chain() const {
  return value_case() == kInitChain;
}
inline void Response::set_has_init_chain() {
  _impl_._oneof_case_[0] = kInitChain;
}
inline void Response::clear_init_chain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kInitChain) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.init_chain_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.init_chain_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::ResponseInitChain* Response::release_init_chain() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Response.init_chain)
  if (value_case() == kInitChain) {
    clear_has_value();
    auto* temp = _impl_.value_.init_chain_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.init_chain_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::ResponseInitChain& Response::_internal_init_chain() const {
  return value_case() == kInitChain ? *_impl_.value_.init_chain_ : reinterpret_cast<::tendermint::abci::ResponseInitChain&>(::tendermint::abci::_ResponseInitChain_default_instance_);
}
inline const ::tendermint::abci::ResponseInitChain& Response::init_chain() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Response.init_chain)
  return _internal_init_chain();
}
inline ::tendermint::abci::ResponseInitChain* Response::unsafe_arena_release_init_chain() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Response.init_chain)
  if (value_case() == kInitChain) {
    clear_has_value();
    auto* temp = _impl_.value_.init_chain_;
    _impl_.value_.init_chain_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_init_chain(::tendermint::abci::ResponseInitChain* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_init_chain();
    _impl_.value_.init_chain_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Response.init_chain)
}
inline ::tendermint::abci::ResponseInitChain* Response::_internal_mutable_init_chain() {
  if (value_case() != kInitChain) {
    clear_value();
    set_has_init_chain();
    _impl_.value_.init_chain_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::ResponseInitChain>(GetArena());
  }
  return _impl_.value_.init_chain_;
}
inline ::tendermint::abci::ResponseInitChain* Response::mutable_init_chain() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::ResponseInitChain* _msg = _internal_mutable_init_chain();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Response.init_chain)
  return _msg;
}

// .tendermint.abci.ResponseQuery query = 7 [json_name = "query"];
inline bool Response::has_query() const {
  return value_case() == kQuery;
}
inline bool Response::_internal_has_query() const {
  return value_case() == kQuery;
}
inline void Response::set_has_query() {
  _impl_._oneof_case_[0] = kQuery;
}
inline void Response::clear_query() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kQuery) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.query_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.query_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::ResponseQuery* Response::release_query() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Response.query)
  if (value_case() == kQuery) {
    clear_has_value();
    auto* temp = _impl_.value_.query_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.query_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::ResponseQuery& Response::_internal_query() const {
  return value_case() == kQuery ? *_impl_.value_.query_ : reinterpret_cast<::tendermint::abci::ResponseQuery&>(::tendermint::abci::_ResponseQuery_default_instance_);
}
inline const ::tendermint::abci::ResponseQuery& Response::query() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Response.query)
  return _internal_query();
}
inline ::tendermint::abci::ResponseQuery* Response::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Response.query)
  if (value_case() == kQuery) {
    clear_has_value();
    auto* temp = _impl_.value_.query_;
    _impl_.value_.query_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_query(::tendermint::abci::ResponseQuery* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_query();
    _impl_.value_.query_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Response.query)
}
inline ::tendermint::abci::ResponseQuery* Response::_internal_mutable_query() {
  if (value_case() != kQuery) {
    clear_value();
    set_has_query();
    _impl_.value_.query_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::ResponseQuery>(GetArena());
  }
  return _impl_.value_.query_;
}
inline ::tendermint::abci::ResponseQuery* Response::mutable_query() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::ResponseQuery* _msg = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Response.query)
  return _msg;
}

// .tendermint.abci.ResponseCheckTx check_tx = 9 [json_name = "checkTx"];
inline bool Response::has_check_tx() const {
  return value_case() == kCheckTx;
}
inline bool Response::_internal_has_check_tx() const {
  return value_case() == kCheckTx;
}
inline void Response::set_has_check_tx() {
  _impl_._oneof_case_[0] = kCheckTx;
}
inline void Response::clear_check_tx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kCheckTx) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.check_tx_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.check_tx_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::ResponseCheckTx* Response::release_check_tx() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Response.check_tx)
  if (value_case() == kCheckTx) {
    clear_has_value();
    auto* temp = _impl_.value_.check_tx_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.check_tx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::ResponseCheckTx& Response::_internal_check_tx() const {
  return value_case() == kCheckTx ? *_impl_.value_.check_tx_ : reinterpret_cast<::tendermint::abci::ResponseCheckTx&>(::tendermint::abci::_ResponseCheckTx_default_instance_);
}
inline const ::tendermint::abci::ResponseCheckTx& Response::check_tx() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Response.check_tx)
  return _internal_check_tx();
}
inline ::tendermint::abci::ResponseCheckTx* Response::unsafe_arena_release_check_tx() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Response.check_tx)
  if (value_case() == kCheckTx) {
    clear_has_value();
    auto* temp = _impl_.value_.check_tx_;
    _impl_.value_.check_tx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_check_tx(::tendermint::abci::ResponseCheckTx* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_check_tx();
    _impl_.value_.check_tx_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Response.check_tx)
}
inline ::tendermint::abci::ResponseCheckTx* Response::_internal_mutable_check_tx() {
  if (value_case() != kCheckTx) {
    clear_value();
    set_has_check_tx();
    _impl_.value_.check_tx_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::ResponseCheckTx>(GetArena());
  }
  return _impl_.value_.check_tx_;
}
inline ::tendermint::abci::ResponseCheckTx* Response::mutable_check_tx() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::ResponseCheckTx* _msg = _internal_mutable_check_tx();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Response.check_tx)
  return _msg;
}

// .tendermint.abci.ResponseCommit commit = 12 [json_name = "commit"];
inline bool Response::has_commit() const {
  return value_case() == kCommit;
}
inline bool Response::_internal_has_commit() const {
  return value_case() == kCommit;
}
inline void Response::set_has_commit() {
  _impl_._oneof_case_[0] = kCommit;
}
inline void Response::clear_commit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kCommit) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.commit_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.commit_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::ResponseCommit* Response::release_commit() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Response.commit)
  if (value_case() == kCommit) {
    clear_has_value();
    auto* temp = _impl_.value_.commit_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.commit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::ResponseCommit& Response::_internal_commit() const {
  return value_case() == kCommit ? *_impl_.value_.commit_ : reinterpret_cast<::tendermint::abci::ResponseCommit&>(::tendermint::abci::_ResponseCommit_default_instance_);
}
inline const ::tendermint::abci::ResponseCommit& Response::commit() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Response.commit)
  return _internal_commit();
}
inline ::tendermint::abci::ResponseCommit* Response::unsafe_arena_release_commit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Response.commit)
  if (value_case() == kCommit) {
    clear_has_value();
    auto* temp = _impl_.value_.commit_;
    _impl_.value_.commit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_commit(::tendermint::abci::ResponseCommit* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_commit();
    _impl_.value_.commit_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Response.commit)
}
inline ::tendermint::abci::ResponseCommit* Response::_internal_mutable_commit() {
  if (value_case() != kCommit) {
    clear_value();
    set_has_commit();
    _impl_.value_.commit_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::ResponseCommit>(GetArena());
  }
  return _impl_.value_.commit_;
}
inline ::tendermint::abci::ResponseCommit* Response::mutable_commit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::ResponseCommit* _msg = _internal_mutable_commit();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Response.commit)
  return _msg;
}

// .tendermint.abci.ResponseListSnapshots list_snapshots = 13 [json_name = "listSnapshots"];
inline bool Response::has_list_snapshots() const {
  return value_case() == kListSnapshots;
}
inline bool Response::_internal_has_list_snapshots() const {
  return value_case() == kListSnapshots;
}
inline void Response::set_has_list_snapshots() {
  _impl_._oneof_case_[0] = kListSnapshots;
}
inline void Response::clear_list_snapshots() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kListSnapshots) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.list_snapshots_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.list_snapshots_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::ResponseListSnapshots* Response::release_list_snapshots() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Response.list_snapshots)
  if (value_case() == kListSnapshots) {
    clear_has_value();
    auto* temp = _impl_.value_.list_snapshots_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.list_snapshots_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::ResponseListSnapshots& Response::_internal_list_snapshots() const {
  return value_case() == kListSnapshots ? *_impl_.value_.list_snapshots_ : reinterpret_cast<::tendermint::abci::ResponseListSnapshots&>(::tendermint::abci::_ResponseListSnapshots_default_instance_);
}
inline const ::tendermint::abci::ResponseListSnapshots& Response::list_snapshots() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Response.list_snapshots)
  return _internal_list_snapshots();
}
inline ::tendermint::abci::ResponseListSnapshots* Response::unsafe_arena_release_list_snapshots() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Response.list_snapshots)
  if (value_case() == kListSnapshots) {
    clear_has_value();
    auto* temp = _impl_.value_.list_snapshots_;
    _impl_.value_.list_snapshots_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_list_snapshots(::tendermint::abci::ResponseListSnapshots* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_list_snapshots();
    _impl_.value_.list_snapshots_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Response.list_snapshots)
}
inline ::tendermint::abci::ResponseListSnapshots* Response::_internal_mutable_list_snapshots() {
  if (value_case() != kListSnapshots) {
    clear_value();
    set_has_list_snapshots();
    _impl_.value_.list_snapshots_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::ResponseListSnapshots>(GetArena());
  }
  return _impl_.value_.list_snapshots_;
}
inline ::tendermint::abci::ResponseListSnapshots* Response::mutable_list_snapshots() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::ResponseListSnapshots* _msg = _internal_mutable_list_snapshots();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Response.list_snapshots)
  return _msg;
}

// .tendermint.abci.ResponseOfferSnapshot offer_snapshot = 14 [json_name = "offerSnapshot"];
inline bool Response::has_offer_snapshot() const {
  return value_case() == kOfferSnapshot;
}
inline bool Response::_internal_has_offer_snapshot() const {
  return value_case() == kOfferSnapshot;
}
inline void Response::set_has_offer_snapshot() {
  _impl_._oneof_case_[0] = kOfferSnapshot;
}
inline void Response::clear_offer_snapshot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kOfferSnapshot) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.offer_snapshot_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.offer_snapshot_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::ResponseOfferSnapshot* Response::release_offer_snapshot() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Response.offer_snapshot)
  if (value_case() == kOfferSnapshot) {
    clear_has_value();
    auto* temp = _impl_.value_.offer_snapshot_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.offer_snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::ResponseOfferSnapshot& Response::_internal_offer_snapshot() const {
  return value_case() == kOfferSnapshot ? *_impl_.value_.offer_snapshot_ : reinterpret_cast<::tendermint::abci::ResponseOfferSnapshot&>(::tendermint::abci::_ResponseOfferSnapshot_default_instance_);
}
inline const ::tendermint::abci::ResponseOfferSnapshot& Response::offer_snapshot() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Response.offer_snapshot)
  return _internal_offer_snapshot();
}
inline ::tendermint::abci::ResponseOfferSnapshot* Response::unsafe_arena_release_offer_snapshot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Response.offer_snapshot)
  if (value_case() == kOfferSnapshot) {
    clear_has_value();
    auto* temp = _impl_.value_.offer_snapshot_;
    _impl_.value_.offer_snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_offer_snapshot(::tendermint::abci::ResponseOfferSnapshot* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_offer_snapshot();
    _impl_.value_.offer_snapshot_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Response.offer_snapshot)
}
inline ::tendermint::abci::ResponseOfferSnapshot* Response::_internal_mutable_offer_snapshot() {
  if (value_case() != kOfferSnapshot) {
    clear_value();
    set_has_offer_snapshot();
    _impl_.value_.offer_snapshot_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::ResponseOfferSnapshot>(GetArena());
  }
  return _impl_.value_.offer_snapshot_;
}
inline ::tendermint::abci::ResponseOfferSnapshot* Response::mutable_offer_snapshot() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::ResponseOfferSnapshot* _msg = _internal_mutable_offer_snapshot();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Response.offer_snapshot)
  return _msg;
}

// .tendermint.abci.ResponseLoadSnapshotChunk load_snapshot_chunk = 15 [json_name = "loadSnapshotChunk"];
inline bool Response::has_load_snapshot_chunk() const {
  return value_case() == kLoadSnapshotChunk;
}
inline bool Response::_internal_has_load_snapshot_chunk() const {
  return value_case() == kLoadSnapshotChunk;
}
inline void Response::set_has_load_snapshot_chunk() {
  _impl_._oneof_case_[0] = kLoadSnapshotChunk;
}
inline void Response::clear_load_snapshot_chunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kLoadSnapshotChunk) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.load_snapshot_chunk_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.load_snapshot_chunk_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::ResponseLoadSnapshotChunk* Response::release_load_snapshot_chunk() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Response.load_snapshot_chunk)
  if (value_case() == kLoadSnapshotChunk) {
    clear_has_value();
    auto* temp = _impl_.value_.load_snapshot_chunk_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.load_snapshot_chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::ResponseLoadSnapshotChunk& Response::_internal_load_snapshot_chunk() const {
  return value_case() == kLoadSnapshotChunk ? *_impl_.value_.load_snapshot_chunk_ : reinterpret_cast<::tendermint::abci::ResponseLoadSnapshotChunk&>(::tendermint::abci::_ResponseLoadSnapshotChunk_default_instance_);
}
inline const ::tendermint::abci::ResponseLoadSnapshotChunk& Response::load_snapshot_chunk() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Response.load_snapshot_chunk)
  return _internal_load_snapshot_chunk();
}
inline ::tendermint::abci::ResponseLoadSnapshotChunk* Response::unsafe_arena_release_load_snapshot_chunk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Response.load_snapshot_chunk)
  if (value_case() == kLoadSnapshotChunk) {
    clear_has_value();
    auto* temp = _impl_.value_.load_snapshot_chunk_;
    _impl_.value_.load_snapshot_chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_load_snapshot_chunk(::tendermint::abci::ResponseLoadSnapshotChunk* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_load_snapshot_chunk();
    _impl_.value_.load_snapshot_chunk_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Response.load_snapshot_chunk)
}
inline ::tendermint::abci::ResponseLoadSnapshotChunk* Response::_internal_mutable_load_snapshot_chunk() {
  if (value_case() != kLoadSnapshotChunk) {
    clear_value();
    set_has_load_snapshot_chunk();
    _impl_.value_.load_snapshot_chunk_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::ResponseLoadSnapshotChunk>(GetArena());
  }
  return _impl_.value_.load_snapshot_chunk_;
}
inline ::tendermint::abci::ResponseLoadSnapshotChunk* Response::mutable_load_snapshot_chunk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::ResponseLoadSnapshotChunk* _msg = _internal_mutable_load_snapshot_chunk();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Response.load_snapshot_chunk)
  return _msg;
}

// .tendermint.abci.ResponseApplySnapshotChunk apply_snapshot_chunk = 16 [json_name = "applySnapshotChunk"];
inline bool Response::has_apply_snapshot_chunk() const {
  return value_case() == kApplySnapshotChunk;
}
inline bool Response::_internal_has_apply_snapshot_chunk() const {
  return value_case() == kApplySnapshotChunk;
}
inline void Response::set_has_apply_snapshot_chunk() {
  _impl_._oneof_case_[0] = kApplySnapshotChunk;
}
inline void Response::clear_apply_snapshot_chunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kApplySnapshotChunk) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.apply_snapshot_chunk_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.apply_snapshot_chunk_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::ResponseApplySnapshotChunk* Response::release_apply_snapshot_chunk() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Response.apply_snapshot_chunk)
  if (value_case() == kApplySnapshotChunk) {
    clear_has_value();
    auto* temp = _impl_.value_.apply_snapshot_chunk_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.apply_snapshot_chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::ResponseApplySnapshotChunk& Response::_internal_apply_snapshot_chunk() const {
  return value_case() == kApplySnapshotChunk ? *_impl_.value_.apply_snapshot_chunk_ : reinterpret_cast<::tendermint::abci::ResponseApplySnapshotChunk&>(::tendermint::abci::_ResponseApplySnapshotChunk_default_instance_);
}
inline const ::tendermint::abci::ResponseApplySnapshotChunk& Response::apply_snapshot_chunk() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Response.apply_snapshot_chunk)
  return _internal_apply_snapshot_chunk();
}
inline ::tendermint::abci::ResponseApplySnapshotChunk* Response::unsafe_arena_release_apply_snapshot_chunk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Response.apply_snapshot_chunk)
  if (value_case() == kApplySnapshotChunk) {
    clear_has_value();
    auto* temp = _impl_.value_.apply_snapshot_chunk_;
    _impl_.value_.apply_snapshot_chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_apply_snapshot_chunk(::tendermint::abci::ResponseApplySnapshotChunk* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_apply_snapshot_chunk();
    _impl_.value_.apply_snapshot_chunk_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Response.apply_snapshot_chunk)
}
inline ::tendermint::abci::ResponseApplySnapshotChunk* Response::_internal_mutable_apply_snapshot_chunk() {
  if (value_case() != kApplySnapshotChunk) {
    clear_value();
    set_has_apply_snapshot_chunk();
    _impl_.value_.apply_snapshot_chunk_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::ResponseApplySnapshotChunk>(GetArena());
  }
  return _impl_.value_.apply_snapshot_chunk_;
}
inline ::tendermint::abci::ResponseApplySnapshotChunk* Response::mutable_apply_snapshot_chunk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::ResponseApplySnapshotChunk* _msg = _internal_mutable_apply_snapshot_chunk();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Response.apply_snapshot_chunk)
  return _msg;
}

// .tendermint.abci.ResponsePrepareProposal prepare_proposal = 17 [json_name = "prepareProposal"];
inline bool Response::has_prepare_proposal() const {
  return value_case() == kPrepareProposal;
}
inline bool Response::_internal_has_prepare_proposal() const {
  return value_case() == kPrepareProposal;
}
inline void Response::set_has_prepare_proposal() {
  _impl_._oneof_case_[0] = kPrepareProposal;
}
inline void Response::clear_prepare_proposal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kPrepareProposal) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.prepare_proposal_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.prepare_proposal_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::ResponsePrepareProposal* Response::release_prepare_proposal() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Response.prepare_proposal)
  if (value_case() == kPrepareProposal) {
    clear_has_value();
    auto* temp = _impl_.value_.prepare_proposal_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.prepare_proposal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::ResponsePrepareProposal& Response::_internal_prepare_proposal() const {
  return value_case() == kPrepareProposal ? *_impl_.value_.prepare_proposal_ : reinterpret_cast<::tendermint::abci::ResponsePrepareProposal&>(::tendermint::abci::_ResponsePrepareProposal_default_instance_);
}
inline const ::tendermint::abci::ResponsePrepareProposal& Response::prepare_proposal() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Response.prepare_proposal)
  return _internal_prepare_proposal();
}
inline ::tendermint::abci::ResponsePrepareProposal* Response::unsafe_arena_release_prepare_proposal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Response.prepare_proposal)
  if (value_case() == kPrepareProposal) {
    clear_has_value();
    auto* temp = _impl_.value_.prepare_proposal_;
    _impl_.value_.prepare_proposal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_prepare_proposal(::tendermint::abci::ResponsePrepareProposal* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_prepare_proposal();
    _impl_.value_.prepare_proposal_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Response.prepare_proposal)
}
inline ::tendermint::abci::ResponsePrepareProposal* Response::_internal_mutable_prepare_proposal() {
  if (value_case() != kPrepareProposal) {
    clear_value();
    set_has_prepare_proposal();
    _impl_.value_.prepare_proposal_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::ResponsePrepareProposal>(GetArena());
  }
  return _impl_.value_.prepare_proposal_;
}
inline ::tendermint::abci::ResponsePrepareProposal* Response::mutable_prepare_proposal() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::ResponsePrepareProposal* _msg = _internal_mutable_prepare_proposal();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Response.prepare_proposal)
  return _msg;
}

// .tendermint.abci.ResponseProcessProposal process_proposal = 18 [json_name = "processProposal"];
inline bool Response::has_process_proposal() const {
  return value_case() == kProcessProposal;
}
inline bool Response::_internal_has_process_proposal() const {
  return value_case() == kProcessProposal;
}
inline void Response::set_has_process_proposal() {
  _impl_._oneof_case_[0] = kProcessProposal;
}
inline void Response::clear_process_proposal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kProcessProposal) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.process_proposal_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.process_proposal_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::ResponseProcessProposal* Response::release_process_proposal() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Response.process_proposal)
  if (value_case() == kProcessProposal) {
    clear_has_value();
    auto* temp = _impl_.value_.process_proposal_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.process_proposal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::ResponseProcessProposal& Response::_internal_process_proposal() const {
  return value_case() == kProcessProposal ? *_impl_.value_.process_proposal_ : reinterpret_cast<::tendermint::abci::ResponseProcessProposal&>(::tendermint::abci::_ResponseProcessProposal_default_instance_);
}
inline const ::tendermint::abci::ResponseProcessProposal& Response::process_proposal() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Response.process_proposal)
  return _internal_process_proposal();
}
inline ::tendermint::abci::ResponseProcessProposal* Response::unsafe_arena_release_process_proposal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Response.process_proposal)
  if (value_case() == kProcessProposal) {
    clear_has_value();
    auto* temp = _impl_.value_.process_proposal_;
    _impl_.value_.process_proposal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_process_proposal(::tendermint::abci::ResponseProcessProposal* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_process_proposal();
    _impl_.value_.process_proposal_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Response.process_proposal)
}
inline ::tendermint::abci::ResponseProcessProposal* Response::_internal_mutable_process_proposal() {
  if (value_case() != kProcessProposal) {
    clear_value();
    set_has_process_proposal();
    _impl_.value_.process_proposal_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::ResponseProcessProposal>(GetArena());
  }
  return _impl_.value_.process_proposal_;
}
inline ::tendermint::abci::ResponseProcessProposal* Response::mutable_process_proposal() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::ResponseProcessProposal* _msg = _internal_mutable_process_proposal();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Response.process_proposal)
  return _msg;
}

// .tendermint.abci.ResponseExtendVote extend_vote = 19 [json_name = "extendVote"];
inline bool Response::has_extend_vote() const {
  return value_case() == kExtendVote;
}
inline bool Response::_internal_has_extend_vote() const {
  return value_case() == kExtendVote;
}
inline void Response::set_has_extend_vote() {
  _impl_._oneof_case_[0] = kExtendVote;
}
inline void Response::clear_extend_vote() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kExtendVote) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.extend_vote_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.extend_vote_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::ResponseExtendVote* Response::release_extend_vote() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Response.extend_vote)
  if (value_case() == kExtendVote) {
    clear_has_value();
    auto* temp = _impl_.value_.extend_vote_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.extend_vote_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::ResponseExtendVote& Response::_internal_extend_vote() const {
  return value_case() == kExtendVote ? *_impl_.value_.extend_vote_ : reinterpret_cast<::tendermint::abci::ResponseExtendVote&>(::tendermint::abci::_ResponseExtendVote_default_instance_);
}
inline const ::tendermint::abci::ResponseExtendVote& Response::extend_vote() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Response.extend_vote)
  return _internal_extend_vote();
}
inline ::tendermint::abci::ResponseExtendVote* Response::unsafe_arena_release_extend_vote() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Response.extend_vote)
  if (value_case() == kExtendVote) {
    clear_has_value();
    auto* temp = _impl_.value_.extend_vote_;
    _impl_.value_.extend_vote_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_extend_vote(::tendermint::abci::ResponseExtendVote* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_extend_vote();
    _impl_.value_.extend_vote_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Response.extend_vote)
}
inline ::tendermint::abci::ResponseExtendVote* Response::_internal_mutable_extend_vote() {
  if (value_case() != kExtendVote) {
    clear_value();
    set_has_extend_vote();
    _impl_.value_.extend_vote_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::ResponseExtendVote>(GetArena());
  }
  return _impl_.value_.extend_vote_;
}
inline ::tendermint::abci::ResponseExtendVote* Response::mutable_extend_vote() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::ResponseExtendVote* _msg = _internal_mutable_extend_vote();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Response.extend_vote)
  return _msg;
}

// .tendermint.abci.ResponseVerifyVoteExtension verify_vote_extension = 20 [json_name = "verifyVoteExtension"];
inline bool Response::has_verify_vote_extension() const {
  return value_case() == kVerifyVoteExtension;
}
inline bool Response::_internal_has_verify_vote_extension() const {
  return value_case() == kVerifyVoteExtension;
}
inline void Response::set_has_verify_vote_extension() {
  _impl_._oneof_case_[0] = kVerifyVoteExtension;
}
inline void Response::clear_verify_vote_extension() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kVerifyVoteExtension) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.verify_vote_extension_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.verify_vote_extension_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::ResponseVerifyVoteExtension* Response::release_verify_vote_extension() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Response.verify_vote_extension)
  if (value_case() == kVerifyVoteExtension) {
    clear_has_value();
    auto* temp = _impl_.value_.verify_vote_extension_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.verify_vote_extension_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::ResponseVerifyVoteExtension& Response::_internal_verify_vote_extension() const {
  return value_case() == kVerifyVoteExtension ? *_impl_.value_.verify_vote_extension_ : reinterpret_cast<::tendermint::abci::ResponseVerifyVoteExtension&>(::tendermint::abci::_ResponseVerifyVoteExtension_default_instance_);
}
inline const ::tendermint::abci::ResponseVerifyVoteExtension& Response::verify_vote_extension() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Response.verify_vote_extension)
  return _internal_verify_vote_extension();
}
inline ::tendermint::abci::ResponseVerifyVoteExtension* Response::unsafe_arena_release_verify_vote_extension() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Response.verify_vote_extension)
  if (value_case() == kVerifyVoteExtension) {
    clear_has_value();
    auto* temp = _impl_.value_.verify_vote_extension_;
    _impl_.value_.verify_vote_extension_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_verify_vote_extension(::tendermint::abci::ResponseVerifyVoteExtension* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_verify_vote_extension();
    _impl_.value_.verify_vote_extension_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Response.verify_vote_extension)
}
inline ::tendermint::abci::ResponseVerifyVoteExtension* Response::_internal_mutable_verify_vote_extension() {
  if (value_case() != kVerifyVoteExtension) {
    clear_value();
    set_has_verify_vote_extension();
    _impl_.value_.verify_vote_extension_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::ResponseVerifyVoteExtension>(GetArena());
  }
  return _impl_.value_.verify_vote_extension_;
}
inline ::tendermint::abci::ResponseVerifyVoteExtension* Response::mutable_verify_vote_extension() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::ResponseVerifyVoteExtension* _msg = _internal_mutable_verify_vote_extension();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Response.verify_vote_extension)
  return _msg;
}

// .tendermint.abci.ResponseFinalizeBlock finalize_block = 21 [json_name = "finalizeBlock"];
inline bool Response::has_finalize_block() const {
  return value_case() == kFinalizeBlock;
}
inline bool Response::_internal_has_finalize_block() const {
  return value_case() == kFinalizeBlock;
}
inline void Response::set_has_finalize_block() {
  _impl_._oneof_case_[0] = kFinalizeBlock;
}
inline void Response::clear_finalize_block() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kFinalizeBlock) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.finalize_block_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.finalize_block_);
    }
    clear_has_value();
  }
}
inline ::tendermint::abci::ResponseFinalizeBlock* Response::release_finalize_block() {
  // @@protoc_insertion_point(field_release:tendermint.abci.Response.finalize_block)
  if (value_case() == kFinalizeBlock) {
    clear_has_value();
    auto* temp = _impl_.value_.finalize_block_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.finalize_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::abci::ResponseFinalizeBlock& Response::_internal_finalize_block() const {
  return value_case() == kFinalizeBlock ? *_impl_.value_.finalize_block_ : reinterpret_cast<::tendermint::abci::ResponseFinalizeBlock&>(::tendermint::abci::_ResponseFinalizeBlock_default_instance_);
}
inline const ::tendermint::abci::ResponseFinalizeBlock& Response::finalize_block() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Response.finalize_block)
  return _internal_finalize_block();
}
inline ::tendermint::abci::ResponseFinalizeBlock* Response::unsafe_arena_release_finalize_block() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.abci.Response.finalize_block)
  if (value_case() == kFinalizeBlock) {
    clear_has_value();
    auto* temp = _impl_.value_.finalize_block_;
    _impl_.value_.finalize_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_finalize_block(::tendermint::abci::ResponseFinalizeBlock* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_finalize_block();
    _impl_.value_.finalize_block_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Response.finalize_block)
}
inline ::tendermint::abci::ResponseFinalizeBlock* Response::_internal_mutable_finalize_block() {
  if (value_case() != kFinalizeBlock) {
    clear_value();
    set_has_finalize_block();
    _impl_.value_.finalize_block_ =
        ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::ResponseFinalizeBlock>(GetArena());
  }
  return _impl_.value_.finalize_block_;
}
inline ::tendermint::abci::ResponseFinalizeBlock* Response::mutable_finalize_block() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tendermint::abci::ResponseFinalizeBlock* _msg = _internal_mutable_finalize_block();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Response.finalize_block)
  return _msg;
}

inline bool Response::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Response::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline Response::ValueCase Response::value_case() const {
  return Response::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResponseException

// string error = 1 [json_name = "error"];
inline void ResponseException::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_.ClearToEmpty();
}
inline const std::string& ResponseException::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseException.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseException::set_error(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseException.error)
}
inline std::string* ResponseException::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ResponseException.error)
  return _s;
}
inline const std::string& ResponseException::_internal_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_.Get();
}
inline void ResponseException::_internal_set_error(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_.Set(value, GetArena());
}
inline std::string* ResponseException::_internal_mutable_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_.Mutable( GetArena());
}
inline std::string* ResponseException::release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.ResponseException.error)
  return _impl_.error_.Release();
}
inline void ResponseException::set_allocated_error(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.ResponseException.error)
}

// -------------------------------------------------------------------

// ResponseEcho

// string message = 1 [json_name = "message"];
inline void ResponseEcho::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ResponseEcho::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseEcho.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseEcho::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseEcho.message)
}
inline std::string* ResponseEcho::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ResponseEcho.message)
  return _s;
}
inline const std::string& ResponseEcho::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void ResponseEcho::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* ResponseEcho::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* ResponseEcho::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.ResponseEcho.message)
  return _impl_.message_.Release();
}
inline void ResponseEcho::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.ResponseEcho.message)
}

// -------------------------------------------------------------------

// ResponseFlush

// -------------------------------------------------------------------

// ResponseInfo

// string data = 1 [json_name = "data"];
inline void ResponseInfo::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ResponseInfo::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseInfo.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseInfo::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseInfo.data)
}
inline std::string* ResponseInfo::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ResponseInfo.data)
  return _s;
}
inline const std::string& ResponseInfo::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void ResponseInfo::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* ResponseInfo::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* ResponseInfo::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.ResponseInfo.data)
  return _impl_.data_.Release();
}
inline void ResponseInfo::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.ResponseInfo.data)
}

// string version = 2 [json_name = "version"];
inline void ResponseInfo::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& ResponseInfo::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseInfo.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseInfo::set_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseInfo.version)
}
inline std::string* ResponseInfo::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ResponseInfo.version)
  return _s;
}
inline const std::string& ResponseInfo::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_.Get();
}
inline void ResponseInfo::_internal_set_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(value, GetArena());
}
inline std::string* ResponseInfo::_internal_mutable_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* ResponseInfo::release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.ResponseInfo.version)
  return _impl_.version_.Release();
}
inline void ResponseInfo::set_allocated_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.ResponseInfo.version)
}

// uint64 app_version = 3 [json_name = "appVersion"];
inline void ResponseInfo::clear_app_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_version_ = ::uint64_t{0u};
}
inline ::uint64_t ResponseInfo::app_version() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseInfo.app_version)
  return _internal_app_version();
}
inline void ResponseInfo::set_app_version(::uint64_t value) {
  _internal_set_app_version(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseInfo.app_version)
}
inline ::uint64_t ResponseInfo::_internal_app_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.app_version_;
}
inline void ResponseInfo::_internal_set_app_version(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_version_ = value;
}

// int64 last_block_height = 4 [json_name = "lastBlockHeight"];
inline void ResponseInfo::clear_last_block_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_block_height_ = ::int64_t{0};
}
inline ::int64_t ResponseInfo::last_block_height() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseInfo.last_block_height)
  return _internal_last_block_height();
}
inline void ResponseInfo::set_last_block_height(::int64_t value) {
  _internal_set_last_block_height(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseInfo.last_block_height)
}
inline ::int64_t ResponseInfo::_internal_last_block_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_block_height_;
}
inline void ResponseInfo::_internal_set_last_block_height(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_block_height_ = value;
}

// bytes last_block_app_hash = 5 [json_name = "lastBlockAppHash"];
inline void ResponseInfo::clear_last_block_app_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_block_app_hash_.ClearToEmpty();
}
inline const std::string& ResponseInfo::last_block_app_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseInfo.last_block_app_hash)
  return _internal_last_block_app_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseInfo::set_last_block_app_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_block_app_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseInfo.last_block_app_hash)
}
inline std::string* ResponseInfo::mutable_last_block_app_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_block_app_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ResponseInfo.last_block_app_hash)
  return _s;
}
inline const std::string& ResponseInfo::_internal_last_block_app_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_block_app_hash_.Get();
}
inline void ResponseInfo::_internal_set_last_block_app_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_block_app_hash_.Set(value, GetArena());
}
inline std::string* ResponseInfo::_internal_mutable_last_block_app_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_block_app_hash_.Mutable( GetArena());
}
inline std::string* ResponseInfo::release_last_block_app_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.ResponseInfo.last_block_app_hash)
  return _impl_.last_block_app_hash_.Release();
}
inline void ResponseInfo::set_allocated_last_block_app_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_block_app_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_block_app_hash_.IsDefault()) {
    _impl_.last_block_app_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.ResponseInfo.last_block_app_hash)
}

// -------------------------------------------------------------------

// ResponseInitChain

// .tendermint.types.ConsensusParams consensus_params = 1 [json_name = "consensusParams"];
inline bool ResponseInitChain::has_consensus_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.consensus_params_ != nullptr);
  return value;
}
inline const ::tendermint::types::ConsensusParams& ResponseInitChain::_internal_consensus_params() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::types::ConsensusParams* p = _impl_.consensus_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::ConsensusParams&>(::tendermint::types::_ConsensusParams_default_instance_);
}
inline const ::tendermint::types::ConsensusParams& ResponseInitChain::consensus_params() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseInitChain.consensus_params)
  return _internal_consensus_params();
}
inline void ResponseInitChain::unsafe_arena_set_allocated_consensus_params(::tendermint::types::ConsensusParams* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.consensus_params_);
  }
  _impl_.consensus_params_ = reinterpret_cast<::tendermint::types::ConsensusParams*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.ResponseInitChain.consensus_params)
}
inline ::tendermint::types::ConsensusParams* ResponseInitChain::release_consensus_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::ConsensusParams* released = _impl_.consensus_params_;
  _impl_.consensus_params_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::types::ConsensusParams* ResponseInitChain::unsafe_arena_release_consensus_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.ResponseInitChain.consensus_params)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::ConsensusParams* temp = _impl_.consensus_params_;
  _impl_.consensus_params_ = nullptr;
  return temp;
}
inline ::tendermint::types::ConsensusParams* ResponseInitChain::_internal_mutable_consensus_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.consensus_params_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::types::ConsensusParams>(GetArena());
    _impl_.consensus_params_ = reinterpret_cast<::tendermint::types::ConsensusParams*>(p);
  }
  return _impl_.consensus_params_;
}
inline ::tendermint::types::ConsensusParams* ResponseInitChain::mutable_consensus_params() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tendermint::types::ConsensusParams* _msg = _internal_mutable_consensus_params();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ResponseInitChain.consensus_params)
  return _msg;
}
inline void ResponseInitChain::set_allocated_consensus_params(::tendermint::types::ConsensusParams* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.consensus_params_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.consensus_params_ = reinterpret_cast<::tendermint::types::ConsensusParams*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.ResponseInitChain.consensus_params)
}

// repeated .tendermint.abci.ValidatorUpdate validators = 2 [json_name = "validators", (.gogoproto.nullable) = false];
inline int ResponseInitChain::_internal_validators_size() const {
  return _internal_validators().size();
}
inline int ResponseInitChain::validators_size() const {
  return _internal_validators_size();
}
inline void ResponseInitChain::clear_validators() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validators_.Clear();
}
inline ::tendermint::abci::ValidatorUpdate* ResponseInitChain::mutable_validators(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ResponseInitChain.validators)
  return _internal_mutable_validators()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::ValidatorUpdate>* ResponseInitChain::mutable_validators()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tendermint.abci.ResponseInitChain.validators)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_validators();
}
inline const ::tendermint::abci::ValidatorUpdate& ResponseInitChain::validators(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseInitChain.validators)
  return _internal_validators().Get(index);
}
inline ::tendermint::abci::ValidatorUpdate* ResponseInitChain::add_validators() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tendermint::abci::ValidatorUpdate* _add = _internal_mutable_validators()->Add();
  // @@protoc_insertion_point(field_add:tendermint.abci.ResponseInitChain.validators)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::ValidatorUpdate>& ResponseInitChain::validators() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tendermint.abci.ResponseInitChain.validators)
  return _internal_validators();
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::ValidatorUpdate>&
ResponseInitChain::_internal_validators() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.validators_;
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::ValidatorUpdate>*
ResponseInitChain::_internal_mutable_validators() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.validators_;
}

// bytes app_hash = 3 [json_name = "appHash"];
inline void ResponseInitChain::clear_app_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_hash_.ClearToEmpty();
}
inline const std::string& ResponseInitChain::app_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseInitChain.app_hash)
  return _internal_app_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseInitChain::set_app_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseInitChain.app_hash)
}
inline std::string* ResponseInitChain::mutable_app_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_app_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ResponseInitChain.app_hash)
  return _s;
}
inline const std::string& ResponseInitChain::_internal_app_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.app_hash_.Get();
}
inline void ResponseInitChain::_internal_set_app_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_hash_.Set(value, GetArena());
}
inline std::string* ResponseInitChain::_internal_mutable_app_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.app_hash_.Mutable( GetArena());
}
inline std::string* ResponseInitChain::release_app_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.ResponseInitChain.app_hash)
  return _impl_.app_hash_.Release();
}
inline void ResponseInitChain::set_allocated_app_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.app_hash_.IsDefault()) {
    _impl_.app_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.ResponseInitChain.app_hash)
}

// -------------------------------------------------------------------

// ResponseQuery

// uint32 code = 1 [json_name = "code"];
inline void ResponseQuery::clear_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = 0u;
}
inline ::uint32_t ResponseQuery::code() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseQuery.code)
  return _internal_code();
}
inline void ResponseQuery::set_code(::uint32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseQuery.code)
}
inline ::uint32_t ResponseQuery::_internal_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.code_;
}
inline void ResponseQuery::_internal_set_code(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = value;
}

// string log = 3 [json_name = "log"];
inline void ResponseQuery::clear_log() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_.ClearToEmpty();
}
inline const std::string& ResponseQuery::log() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseQuery.log)
  return _internal_log();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseQuery::set_log(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseQuery.log)
}
inline std::string* ResponseQuery::mutable_log() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_log();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ResponseQuery.log)
  return _s;
}
inline const std::string& ResponseQuery::_internal_log() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_.Get();
}
inline void ResponseQuery::_internal_set_log(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_.Set(value, GetArena());
}
inline std::string* ResponseQuery::_internal_mutable_log() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.log_.Mutable( GetArena());
}
inline std::string* ResponseQuery::release_log() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.ResponseQuery.log)
  return _impl_.log_.Release();
}
inline void ResponseQuery::set_allocated_log(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.log_.IsDefault()) {
    _impl_.log_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.ResponseQuery.log)
}

// string info = 4 [json_name = "info"];
inline void ResponseQuery::clear_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.info_.ClearToEmpty();
}
inline const std::string& ResponseQuery::info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseQuery.info)
  return _internal_info();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseQuery::set_info(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.info_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseQuery.info)
}
inline std::string* ResponseQuery::mutable_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ResponseQuery.info)
  return _s;
}
inline const std::string& ResponseQuery::_internal_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.info_.Get();
}
inline void ResponseQuery::_internal_set_info(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.info_.Set(value, GetArena());
}
inline std::string* ResponseQuery::_internal_mutable_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.info_.Mutable( GetArena());
}
inline std::string* ResponseQuery::release_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.ResponseQuery.info)
  return _impl_.info_.Release();
}
inline void ResponseQuery::set_allocated_info(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.info_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.info_.IsDefault()) {
    _impl_.info_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.ResponseQuery.info)
}

// int64 index = 5 [json_name = "index"];
inline void ResponseQuery::clear_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = ::int64_t{0};
}
inline ::int64_t ResponseQuery::index() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseQuery.index)
  return _internal_index();
}
inline void ResponseQuery::set_index(::int64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseQuery.index)
}
inline ::int64_t ResponseQuery::_internal_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.index_;
}
inline void ResponseQuery::_internal_set_index(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = value;
}

// bytes key = 6 [json_name = "key"];
inline void ResponseQuery::clear_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& ResponseQuery::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseQuery.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseQuery::set_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseQuery.key)
}
inline std::string* ResponseQuery::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ResponseQuery.key)
  return _s;
}
inline const std::string& ResponseQuery::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_.Get();
}
inline void ResponseQuery::_internal_set_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(value, GetArena());
}
inline std::string* ResponseQuery::_internal_mutable_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* ResponseQuery::release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.ResponseQuery.key)
  return _impl_.key_.Release();
}
inline void ResponseQuery::set_allocated_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.ResponseQuery.key)
}

// bytes value = 7 [json_name = "value"];
inline void ResponseQuery::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& ResponseQuery::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseQuery.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseQuery::set_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseQuery.value)
}
inline std::string* ResponseQuery::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ResponseQuery.value)
  return _s;
}
inline const std::string& ResponseQuery::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_.Get();
}
inline void ResponseQuery::_internal_set_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(value, GetArena());
}
inline std::string* ResponseQuery::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* ResponseQuery::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.ResponseQuery.value)
  return _impl_.value_.Release();
}
inline void ResponseQuery::set_allocated_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.ResponseQuery.value)
}

// .tendermint.crypto.ProofOps proof_ops = 8 [json_name = "proofOps"];
inline bool ResponseQuery::has_proof_ops() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proof_ops_ != nullptr);
  return value;
}
inline const ::tendermint::crypto::ProofOps& ResponseQuery::_internal_proof_ops() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::crypto::ProofOps* p = _impl_.proof_ops_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::crypto::ProofOps&>(::tendermint::crypto::_ProofOps_default_instance_);
}
inline const ::tendermint::crypto::ProofOps& ResponseQuery::proof_ops() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseQuery.proof_ops)
  return _internal_proof_ops();
}
inline void ResponseQuery::unsafe_arena_set_allocated_proof_ops(::tendermint::crypto::ProofOps* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.proof_ops_);
  }
  _impl_.proof_ops_ = reinterpret_cast<::tendermint::crypto::ProofOps*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.ResponseQuery.proof_ops)
}
inline ::tendermint::crypto::ProofOps* ResponseQuery::release_proof_ops() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::crypto::ProofOps* released = _impl_.proof_ops_;
  _impl_.proof_ops_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::crypto::ProofOps* ResponseQuery::unsafe_arena_release_proof_ops() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.ResponseQuery.proof_ops)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::crypto::ProofOps* temp = _impl_.proof_ops_;
  _impl_.proof_ops_ = nullptr;
  return temp;
}
inline ::tendermint::crypto::ProofOps* ResponseQuery::_internal_mutable_proof_ops() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.proof_ops_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::crypto::ProofOps>(GetArena());
    _impl_.proof_ops_ = reinterpret_cast<::tendermint::crypto::ProofOps*>(p);
  }
  return _impl_.proof_ops_;
}
inline ::tendermint::crypto::ProofOps* ResponseQuery::mutable_proof_ops() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tendermint::crypto::ProofOps* _msg = _internal_mutable_proof_ops();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ResponseQuery.proof_ops)
  return _msg;
}
inline void ResponseQuery::set_allocated_proof_ops(::tendermint::crypto::ProofOps* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.proof_ops_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.proof_ops_ = reinterpret_cast<::tendermint::crypto::ProofOps*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.ResponseQuery.proof_ops)
}

// int64 height = 9 [json_name = "height"];
inline void ResponseQuery::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t ResponseQuery::height() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseQuery.height)
  return _internal_height();
}
inline void ResponseQuery::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseQuery.height)
}
inline ::int64_t ResponseQuery::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void ResponseQuery::_internal_set_height(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// string codespace = 10 [json_name = "codespace"];
inline void ResponseQuery::clear_codespace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.codespace_.ClearToEmpty();
}
inline const std::string& ResponseQuery::codespace() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseQuery.codespace)
  return _internal_codespace();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseQuery::set_codespace(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.codespace_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseQuery.codespace)
}
inline std::string* ResponseQuery::mutable_codespace() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_codespace();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ResponseQuery.codespace)
  return _s;
}
inline const std::string& ResponseQuery::_internal_codespace() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.codespace_.Get();
}
inline void ResponseQuery::_internal_set_codespace(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.codespace_.Set(value, GetArena());
}
inline std::string* ResponseQuery::_internal_mutable_codespace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.codespace_.Mutable( GetArena());
}
inline std::string* ResponseQuery::release_codespace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.ResponseQuery.codespace)
  return _impl_.codespace_.Release();
}
inline void ResponseQuery::set_allocated_codespace(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.codespace_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.codespace_.IsDefault()) {
    _impl_.codespace_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.ResponseQuery.codespace)
}

// -------------------------------------------------------------------

// ResponseCheckTx

// uint32 code = 1 [json_name = "code"];
inline void ResponseCheckTx::clear_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = 0u;
}
inline ::uint32_t ResponseCheckTx::code() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseCheckTx.code)
  return _internal_code();
}
inline void ResponseCheckTx::set_code(::uint32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseCheckTx.code)
}
inline ::uint32_t ResponseCheckTx::_internal_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.code_;
}
inline void ResponseCheckTx::_internal_set_code(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = value;
}

// bytes data = 2 [json_name = "data"];
inline void ResponseCheckTx::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ResponseCheckTx::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseCheckTx.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseCheckTx::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseCheckTx.data)
}
inline std::string* ResponseCheckTx::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ResponseCheckTx.data)
  return _s;
}
inline const std::string& ResponseCheckTx::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void ResponseCheckTx::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* ResponseCheckTx::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* ResponseCheckTx::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.ResponseCheckTx.data)
  return _impl_.data_.Release();
}
inline void ResponseCheckTx::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.ResponseCheckTx.data)
}

// string log = 3 [json_name = "log"];
inline void ResponseCheckTx::clear_log() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_.ClearToEmpty();
}
inline const std::string& ResponseCheckTx::log() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseCheckTx.log)
  return _internal_log();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseCheckTx::set_log(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseCheckTx.log)
}
inline std::string* ResponseCheckTx::mutable_log() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_log();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ResponseCheckTx.log)
  return _s;
}
inline const std::string& ResponseCheckTx::_internal_log() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_.Get();
}
inline void ResponseCheckTx::_internal_set_log(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_.Set(value, GetArena());
}
inline std::string* ResponseCheckTx::_internal_mutable_log() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.log_.Mutable( GetArena());
}
inline std::string* ResponseCheckTx::release_log() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.ResponseCheckTx.log)
  return _impl_.log_.Release();
}
inline void ResponseCheckTx::set_allocated_log(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.log_.IsDefault()) {
    _impl_.log_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.ResponseCheckTx.log)
}

// string info = 4 [json_name = "info"];
inline void ResponseCheckTx::clear_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.info_.ClearToEmpty();
}
inline const std::string& ResponseCheckTx::info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseCheckTx.info)
  return _internal_info();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseCheckTx::set_info(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.info_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseCheckTx.info)
}
inline std::string* ResponseCheckTx::mutable_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ResponseCheckTx.info)
  return _s;
}
inline const std::string& ResponseCheckTx::_internal_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.info_.Get();
}
inline void ResponseCheckTx::_internal_set_info(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.info_.Set(value, GetArena());
}
inline std::string* ResponseCheckTx::_internal_mutable_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.info_.Mutable( GetArena());
}
inline std::string* ResponseCheckTx::release_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.ResponseCheckTx.info)
  return _impl_.info_.Release();
}
inline void ResponseCheckTx::set_allocated_info(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.info_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.info_.IsDefault()) {
    _impl_.info_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.ResponseCheckTx.info)
}

// int64 gas_wanted = 5 [json_name = "gas_wanted"];
inline void ResponseCheckTx::clear_gas_wanted() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gas_wanted_ = ::int64_t{0};
}
inline ::int64_t ResponseCheckTx::gas_wanted() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseCheckTx.gas_wanted)
  return _internal_gas_wanted();
}
inline void ResponseCheckTx::set_gas_wanted(::int64_t value) {
  _internal_set_gas_wanted(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseCheckTx.gas_wanted)
}
inline ::int64_t ResponseCheckTx::_internal_gas_wanted() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gas_wanted_;
}
inline void ResponseCheckTx::_internal_set_gas_wanted(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gas_wanted_ = value;
}

// int64 gas_used = 6 [json_name = "gas_used"];
inline void ResponseCheckTx::clear_gas_used() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gas_used_ = ::int64_t{0};
}
inline ::int64_t ResponseCheckTx::gas_used() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseCheckTx.gas_used)
  return _internal_gas_used();
}
inline void ResponseCheckTx::set_gas_used(::int64_t value) {
  _internal_set_gas_used(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseCheckTx.gas_used)
}
inline ::int64_t ResponseCheckTx::_internal_gas_used() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gas_used_;
}
inline void ResponseCheckTx::_internal_set_gas_used(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gas_used_ = value;
}

// repeated .tendermint.abci.Event events = 7 [json_name = "events", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
inline int ResponseCheckTx::_internal_events_size() const {
  return _internal_events().size();
}
inline int ResponseCheckTx::events_size() const {
  return _internal_events_size();
}
inline void ResponseCheckTx::clear_events() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.events_.Clear();
}
inline ::tendermint::abci::Event* ResponseCheckTx::mutable_events(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ResponseCheckTx.events)
  return _internal_mutable_events()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>* ResponseCheckTx::mutable_events()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tendermint.abci.ResponseCheckTx.events)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_events();
}
inline const ::tendermint::abci::Event& ResponseCheckTx::events(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseCheckTx.events)
  return _internal_events().Get(index);
}
inline ::tendermint::abci::Event* ResponseCheckTx::add_events() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tendermint::abci::Event* _add = _internal_mutable_events()->Add();
  // @@protoc_insertion_point(field_add:tendermint.abci.ResponseCheckTx.events)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>& ResponseCheckTx::events() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tendermint.abci.ResponseCheckTx.events)
  return _internal_events();
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>&
ResponseCheckTx::_internal_events() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.events_;
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>*
ResponseCheckTx::_internal_mutable_events() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.events_;
}

// string codespace = 8 [json_name = "codespace"];
inline void ResponseCheckTx::clear_codespace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.codespace_.ClearToEmpty();
}
inline const std::string& ResponseCheckTx::codespace() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseCheckTx.codespace)
  return _internal_codespace();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseCheckTx::set_codespace(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.codespace_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseCheckTx.codespace)
}
inline std::string* ResponseCheckTx::mutable_codespace() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_codespace();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ResponseCheckTx.codespace)
  return _s;
}
inline const std::string& ResponseCheckTx::_internal_codespace() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.codespace_.Get();
}
inline void ResponseCheckTx::_internal_set_codespace(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.codespace_.Set(value, GetArena());
}
inline std::string* ResponseCheckTx::_internal_mutable_codespace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.codespace_.Mutable( GetArena());
}
inline std::string* ResponseCheckTx::release_codespace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.ResponseCheckTx.codespace)
  return _impl_.codespace_.Release();
}
inline void ResponseCheckTx::set_allocated_codespace(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.codespace_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.codespace_.IsDefault()) {
    _impl_.codespace_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.ResponseCheckTx.codespace)
}

// -------------------------------------------------------------------

// ResponseCommit

// int64 retain_height = 3 [json_name = "retainHeight"];
inline void ResponseCommit::clear_retain_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retain_height_ = ::int64_t{0};
}
inline ::int64_t ResponseCommit::retain_height() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseCommit.retain_height)
  return _internal_retain_height();
}
inline void ResponseCommit::set_retain_height(::int64_t value) {
  _internal_set_retain_height(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseCommit.retain_height)
}
inline ::int64_t ResponseCommit::_internal_retain_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.retain_height_;
}
inline void ResponseCommit::_internal_set_retain_height(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retain_height_ = value;
}

// -------------------------------------------------------------------

// ResponseListSnapshots

// repeated .tendermint.abci.Snapshot snapshots = 1 [json_name = "snapshots"];
inline int ResponseListSnapshots::_internal_snapshots_size() const {
  return _internal_snapshots().size();
}
inline int ResponseListSnapshots::snapshots_size() const {
  return _internal_snapshots_size();
}
inline void ResponseListSnapshots::clear_snapshots() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.snapshots_.Clear();
}
inline ::tendermint::abci::Snapshot* ResponseListSnapshots::mutable_snapshots(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ResponseListSnapshots.snapshots)
  return _internal_mutable_snapshots()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::Snapshot>* ResponseListSnapshots::mutable_snapshots()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tendermint.abci.ResponseListSnapshots.snapshots)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_snapshots();
}
inline const ::tendermint::abci::Snapshot& ResponseListSnapshots::snapshots(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseListSnapshots.snapshots)
  return _internal_snapshots().Get(index);
}
inline ::tendermint::abci::Snapshot* ResponseListSnapshots::add_snapshots() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tendermint::abci::Snapshot* _add = _internal_mutable_snapshots()->Add();
  // @@protoc_insertion_point(field_add:tendermint.abci.ResponseListSnapshots.snapshots)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Snapshot>& ResponseListSnapshots::snapshots() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tendermint.abci.ResponseListSnapshots.snapshots)
  return _internal_snapshots();
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Snapshot>&
ResponseListSnapshots::_internal_snapshots() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.snapshots_;
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::Snapshot>*
ResponseListSnapshots::_internal_mutable_snapshots() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.snapshots_;
}

// -------------------------------------------------------------------

// ResponseOfferSnapshot

// .tendermint.abci.ResponseOfferSnapshot.Result result = 1 [json_name = "result"];
inline void ResponseOfferSnapshot::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = 0;
}
inline ::tendermint::abci::ResponseOfferSnapshot_Result ResponseOfferSnapshot::result() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseOfferSnapshot.result)
  return _internal_result();
}
inline void ResponseOfferSnapshot::set_result(::tendermint::abci::ResponseOfferSnapshot_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseOfferSnapshot.result)
}
inline ::tendermint::abci::ResponseOfferSnapshot_Result ResponseOfferSnapshot::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tendermint::abci::ResponseOfferSnapshot_Result>(_impl_.result_);
}
inline void ResponseOfferSnapshot::_internal_set_result(::tendermint::abci::ResponseOfferSnapshot_Result value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = value;
}

// -------------------------------------------------------------------

// ResponseLoadSnapshotChunk

// bytes chunk = 1 [json_name = "chunk"];
inline void ResponseLoadSnapshotChunk::clear_chunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunk_.ClearToEmpty();
}
inline const std::string& ResponseLoadSnapshotChunk::chunk() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseLoadSnapshotChunk.chunk)
  return _internal_chunk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseLoadSnapshotChunk::set_chunk(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunk_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseLoadSnapshotChunk.chunk)
}
inline std::string* ResponseLoadSnapshotChunk::mutable_chunk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chunk();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ResponseLoadSnapshotChunk.chunk)
  return _s;
}
inline const std::string& ResponseLoadSnapshotChunk::_internal_chunk() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chunk_.Get();
}
inline void ResponseLoadSnapshotChunk::_internal_set_chunk(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunk_.Set(value, GetArena());
}
inline std::string* ResponseLoadSnapshotChunk::_internal_mutable_chunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.chunk_.Mutable( GetArena());
}
inline std::string* ResponseLoadSnapshotChunk::release_chunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.ResponseLoadSnapshotChunk.chunk)
  return _impl_.chunk_.Release();
}
inline void ResponseLoadSnapshotChunk::set_allocated_chunk(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunk_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.chunk_.IsDefault()) {
    _impl_.chunk_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.ResponseLoadSnapshotChunk.chunk)
}

// -------------------------------------------------------------------

// ResponseApplySnapshotChunk

// .tendermint.abci.ResponseApplySnapshotChunk.Result result = 1 [json_name = "result"];
inline void ResponseApplySnapshotChunk::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = 0;
}
inline ::tendermint::abci::ResponseApplySnapshotChunk_Result ResponseApplySnapshotChunk::result() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseApplySnapshotChunk.result)
  return _internal_result();
}
inline void ResponseApplySnapshotChunk::set_result(::tendermint::abci::ResponseApplySnapshotChunk_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseApplySnapshotChunk.result)
}
inline ::tendermint::abci::ResponseApplySnapshotChunk_Result ResponseApplySnapshotChunk::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tendermint::abci::ResponseApplySnapshotChunk_Result>(_impl_.result_);
}
inline void ResponseApplySnapshotChunk::_internal_set_result(::tendermint::abci::ResponseApplySnapshotChunk_Result value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = value;
}

// repeated uint32 refetch_chunks = 2 [json_name = "refetchChunks"];
inline int ResponseApplySnapshotChunk::_internal_refetch_chunks_size() const {
  return _internal_refetch_chunks().size();
}
inline int ResponseApplySnapshotChunk::refetch_chunks_size() const {
  return _internal_refetch_chunks_size();
}
inline void ResponseApplySnapshotChunk::clear_refetch_chunks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.refetch_chunks_.Clear();
}
inline ::uint32_t ResponseApplySnapshotChunk::refetch_chunks(int index) const {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseApplySnapshotChunk.refetch_chunks)
  return _internal_refetch_chunks().Get(index);
}
inline void ResponseApplySnapshotChunk::set_refetch_chunks(int index, ::uint32_t value) {
  _internal_mutable_refetch_chunks()->Set(index, value);
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseApplySnapshotChunk.refetch_chunks)
}
inline void ResponseApplySnapshotChunk::add_refetch_chunks(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_refetch_chunks()->Add(value);
  // @@protoc_insertion_point(field_add:tendermint.abci.ResponseApplySnapshotChunk.refetch_chunks)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& ResponseApplySnapshotChunk::refetch_chunks() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tendermint.abci.ResponseApplySnapshotChunk.refetch_chunks)
  return _internal_refetch_chunks();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* ResponseApplySnapshotChunk::mutable_refetch_chunks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tendermint.abci.ResponseApplySnapshotChunk.refetch_chunks)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_refetch_chunks();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>&
ResponseApplySnapshotChunk::_internal_refetch_chunks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.refetch_chunks_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* ResponseApplySnapshotChunk::_internal_mutable_refetch_chunks() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.refetch_chunks_;
}

// repeated string reject_senders = 3 [json_name = "rejectSenders"];
inline int ResponseApplySnapshotChunk::_internal_reject_senders_size() const {
  return _internal_reject_senders().size();
}
inline int ResponseApplySnapshotChunk::reject_senders_size() const {
  return _internal_reject_senders_size();
}
inline void ResponseApplySnapshotChunk::clear_reject_senders() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reject_senders_.Clear();
}
inline std::string* ResponseApplySnapshotChunk::add_reject_senders() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_reject_senders()->Add();
  // @@protoc_insertion_point(field_add_mutable:tendermint.abci.ResponseApplySnapshotChunk.reject_senders)
  return _s;
}
inline const std::string& ResponseApplySnapshotChunk::reject_senders(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseApplySnapshotChunk.reject_senders)
  return _internal_reject_senders().Get(index);
}
inline std::string* ResponseApplySnapshotChunk::mutable_reject_senders(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ResponseApplySnapshotChunk.reject_senders)
  return _internal_mutable_reject_senders()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ResponseApplySnapshotChunk::set_reject_senders(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_reject_senders()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseApplySnapshotChunk.reject_senders)
}
template <typename Arg_, typename... Args_>
inline void ResponseApplySnapshotChunk::add_reject_senders(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_reject_senders(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:tendermint.abci.ResponseApplySnapshotChunk.reject_senders)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ResponseApplySnapshotChunk::reject_senders() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tendermint.abci.ResponseApplySnapshotChunk.reject_senders)
  return _internal_reject_senders();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ResponseApplySnapshotChunk::mutable_reject_senders() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tendermint.abci.ResponseApplySnapshotChunk.reject_senders)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_reject_senders();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ResponseApplySnapshotChunk::_internal_reject_senders() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reject_senders_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ResponseApplySnapshotChunk::_internal_mutable_reject_senders() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.reject_senders_;
}

// -------------------------------------------------------------------

// ResponsePrepareProposal

// repeated bytes txs = 1 [json_name = "txs"];
inline int ResponsePrepareProposal::_internal_txs_size() const {
  return _internal_txs().size();
}
inline int ResponsePrepareProposal::txs_size() const {
  return _internal_txs_size();
}
inline void ResponsePrepareProposal::clear_txs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.txs_.Clear();
}
inline std::string* ResponsePrepareProposal::add_txs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_txs()->Add();
  // @@protoc_insertion_point(field_add_mutable:tendermint.abci.ResponsePrepareProposal.txs)
  return _s;
}
inline const std::string& ResponsePrepareProposal::txs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponsePrepareProposal.txs)
  return _internal_txs().Get(index);
}
inline std::string* ResponsePrepareProposal::mutable_txs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ResponsePrepareProposal.txs)
  return _internal_mutable_txs()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ResponsePrepareProposal::set_txs(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_txs()->Mutable(index),
      std::forward<Arg_>(value), args... , ::google::protobuf::internal::BytesTag{});
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponsePrepareProposal.txs)
}
template <typename Arg_, typename... Args_>
inline void ResponsePrepareProposal::add_txs(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_txs(),
                               std::forward<Arg_>(value),
                               args... , ::google::protobuf::internal::BytesTag{});
  // @@protoc_insertion_point(field_add:tendermint.abci.ResponsePrepareProposal.txs)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ResponsePrepareProposal::txs() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tendermint.abci.ResponsePrepareProposal.txs)
  return _internal_txs();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ResponsePrepareProposal::mutable_txs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tendermint.abci.ResponsePrepareProposal.txs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_txs();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ResponsePrepareProposal::_internal_txs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.txs_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ResponsePrepareProposal::_internal_mutable_txs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.txs_;
}

// -------------------------------------------------------------------

// ResponseProcessProposal

// .tendermint.abci.ResponseProcessProposal.ProposalStatus status = 1 [json_name = "status"];
inline void ResponseProcessProposal::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::tendermint::abci::ResponseProcessProposal_ProposalStatus ResponseProcessProposal::status() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseProcessProposal.status)
  return _internal_status();
}
inline void ResponseProcessProposal::set_status(::tendermint::abci::ResponseProcessProposal_ProposalStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseProcessProposal.status)
}
inline ::tendermint::abci::ResponseProcessProposal_ProposalStatus ResponseProcessProposal::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tendermint::abci::ResponseProcessProposal_ProposalStatus>(_impl_.status_);
}
inline void ResponseProcessProposal::_internal_set_status(::tendermint::abci::ResponseProcessProposal_ProposalStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// -------------------------------------------------------------------

// ResponseExtendVote

// bytes vote_extension = 1 [json_name = "voteExtension"];
inline void ResponseExtendVote::clear_vote_extension() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vote_extension_.ClearToEmpty();
}
inline const std::string& ResponseExtendVote::vote_extension() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseExtendVote.vote_extension)
  return _internal_vote_extension();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseExtendVote::set_vote_extension(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vote_extension_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseExtendVote.vote_extension)
}
inline std::string* ResponseExtendVote::mutable_vote_extension() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_vote_extension();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ResponseExtendVote.vote_extension)
  return _s;
}
inline const std::string& ResponseExtendVote::_internal_vote_extension() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vote_extension_.Get();
}
inline void ResponseExtendVote::_internal_set_vote_extension(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vote_extension_.Set(value, GetArena());
}
inline std::string* ResponseExtendVote::_internal_mutable_vote_extension() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.vote_extension_.Mutable( GetArena());
}
inline std::string* ResponseExtendVote::release_vote_extension() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.ResponseExtendVote.vote_extension)
  return _impl_.vote_extension_.Release();
}
inline void ResponseExtendVote::set_allocated_vote_extension(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vote_extension_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.vote_extension_.IsDefault()) {
    _impl_.vote_extension_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.ResponseExtendVote.vote_extension)
}

// -------------------------------------------------------------------

// ResponseVerifyVoteExtension

// .tendermint.abci.ResponseVerifyVoteExtension.VerifyStatus status = 1 [json_name = "status"];
inline void ResponseVerifyVoteExtension::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::tendermint::abci::ResponseVerifyVoteExtension_VerifyStatus ResponseVerifyVoteExtension::status() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseVerifyVoteExtension.status)
  return _internal_status();
}
inline void ResponseVerifyVoteExtension::set_status(::tendermint::abci::ResponseVerifyVoteExtension_VerifyStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseVerifyVoteExtension.status)
}
inline ::tendermint::abci::ResponseVerifyVoteExtension_VerifyStatus ResponseVerifyVoteExtension::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tendermint::abci::ResponseVerifyVoteExtension_VerifyStatus>(_impl_.status_);
}
inline void ResponseVerifyVoteExtension::_internal_set_status(::tendermint::abci::ResponseVerifyVoteExtension_VerifyStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// -------------------------------------------------------------------

// ResponseFinalizeBlock

// repeated .tendermint.abci.Event events = 1 [json_name = "events", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
inline int ResponseFinalizeBlock::_internal_events_size() const {
  return _internal_events().size();
}
inline int ResponseFinalizeBlock::events_size() const {
  return _internal_events_size();
}
inline void ResponseFinalizeBlock::clear_events() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.events_.Clear();
}
inline ::tendermint::abci::Event* ResponseFinalizeBlock::mutable_events(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ResponseFinalizeBlock.events)
  return _internal_mutable_events()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>* ResponseFinalizeBlock::mutable_events()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tendermint.abci.ResponseFinalizeBlock.events)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_events();
}
inline const ::tendermint::abci::Event& ResponseFinalizeBlock::events(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseFinalizeBlock.events)
  return _internal_events().Get(index);
}
inline ::tendermint::abci::Event* ResponseFinalizeBlock::add_events() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tendermint::abci::Event* _add = _internal_mutable_events()->Add();
  // @@protoc_insertion_point(field_add:tendermint.abci.ResponseFinalizeBlock.events)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>& ResponseFinalizeBlock::events() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tendermint.abci.ResponseFinalizeBlock.events)
  return _internal_events();
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>&
ResponseFinalizeBlock::_internal_events() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.events_;
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>*
ResponseFinalizeBlock::_internal_mutable_events() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.events_;
}

// repeated .tendermint.abci.ExecTxResult tx_results = 2 [json_name = "txResults"];
inline int ResponseFinalizeBlock::_internal_tx_results_size() const {
  return _internal_tx_results().size();
}
inline int ResponseFinalizeBlock::tx_results_size() const {
  return _internal_tx_results_size();
}
inline void ResponseFinalizeBlock::clear_tx_results() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tx_results_.Clear();
}
inline ::tendermint::abci::ExecTxResult* ResponseFinalizeBlock::mutable_tx_results(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ResponseFinalizeBlock.tx_results)
  return _internal_mutable_tx_results()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::ExecTxResult>* ResponseFinalizeBlock::mutable_tx_results()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tendermint.abci.ResponseFinalizeBlock.tx_results)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_tx_results();
}
inline const ::tendermint::abci::ExecTxResult& ResponseFinalizeBlock::tx_results(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseFinalizeBlock.tx_results)
  return _internal_tx_results().Get(index);
}
inline ::tendermint::abci::ExecTxResult* ResponseFinalizeBlock::add_tx_results() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tendermint::abci::ExecTxResult* _add = _internal_mutable_tx_results()->Add();
  // @@protoc_insertion_point(field_add:tendermint.abci.ResponseFinalizeBlock.tx_results)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::ExecTxResult>& ResponseFinalizeBlock::tx_results() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tendermint.abci.ResponseFinalizeBlock.tx_results)
  return _internal_tx_results();
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::ExecTxResult>&
ResponseFinalizeBlock::_internal_tx_results() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tx_results_;
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::ExecTxResult>*
ResponseFinalizeBlock::_internal_mutable_tx_results() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.tx_results_;
}

// repeated .tendermint.abci.ValidatorUpdate validator_updates = 3 [json_name = "validatorUpdates", (.gogoproto.nullable) = false];
inline int ResponseFinalizeBlock::_internal_validator_updates_size() const {
  return _internal_validator_updates().size();
}
inline int ResponseFinalizeBlock::validator_updates_size() const {
  return _internal_validator_updates_size();
}
inline void ResponseFinalizeBlock::clear_validator_updates() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validator_updates_.Clear();
}
inline ::tendermint::abci::ValidatorUpdate* ResponseFinalizeBlock::mutable_validator_updates(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ResponseFinalizeBlock.validator_updates)
  return _internal_mutable_validator_updates()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::ValidatorUpdate>* ResponseFinalizeBlock::mutable_validator_updates()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tendermint.abci.ResponseFinalizeBlock.validator_updates)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_validator_updates();
}
inline const ::tendermint::abci::ValidatorUpdate& ResponseFinalizeBlock::validator_updates(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseFinalizeBlock.validator_updates)
  return _internal_validator_updates().Get(index);
}
inline ::tendermint::abci::ValidatorUpdate* ResponseFinalizeBlock::add_validator_updates() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tendermint::abci::ValidatorUpdate* _add = _internal_mutable_validator_updates()->Add();
  // @@protoc_insertion_point(field_add:tendermint.abci.ResponseFinalizeBlock.validator_updates)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::ValidatorUpdate>& ResponseFinalizeBlock::validator_updates() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tendermint.abci.ResponseFinalizeBlock.validator_updates)
  return _internal_validator_updates();
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::ValidatorUpdate>&
ResponseFinalizeBlock::_internal_validator_updates() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.validator_updates_;
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::ValidatorUpdate>*
ResponseFinalizeBlock::_internal_mutable_validator_updates() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.validator_updates_;
}

// .tendermint.types.ConsensusParams consensus_param_updates = 4 [json_name = "consensusParamUpdates"];
inline bool ResponseFinalizeBlock::has_consensus_param_updates() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.consensus_param_updates_ != nullptr);
  return value;
}
inline const ::tendermint::types::ConsensusParams& ResponseFinalizeBlock::_internal_consensus_param_updates() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::types::ConsensusParams* p = _impl_.consensus_param_updates_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::ConsensusParams&>(::tendermint::types::_ConsensusParams_default_instance_);
}
inline const ::tendermint::types::ConsensusParams& ResponseFinalizeBlock::consensus_param_updates() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseFinalizeBlock.consensus_param_updates)
  return _internal_consensus_param_updates();
}
inline void ResponseFinalizeBlock::unsafe_arena_set_allocated_consensus_param_updates(::tendermint::types::ConsensusParams* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.consensus_param_updates_);
  }
  _impl_.consensus_param_updates_ = reinterpret_cast<::tendermint::types::ConsensusParams*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.ResponseFinalizeBlock.consensus_param_updates)
}
inline ::tendermint::types::ConsensusParams* ResponseFinalizeBlock::release_consensus_param_updates() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::ConsensusParams* released = _impl_.consensus_param_updates_;
  _impl_.consensus_param_updates_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::types::ConsensusParams* ResponseFinalizeBlock::unsafe_arena_release_consensus_param_updates() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.ResponseFinalizeBlock.consensus_param_updates)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::ConsensusParams* temp = _impl_.consensus_param_updates_;
  _impl_.consensus_param_updates_ = nullptr;
  return temp;
}
inline ::tendermint::types::ConsensusParams* ResponseFinalizeBlock::_internal_mutable_consensus_param_updates() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.consensus_param_updates_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::types::ConsensusParams>(GetArena());
    _impl_.consensus_param_updates_ = reinterpret_cast<::tendermint::types::ConsensusParams*>(p);
  }
  return _impl_.consensus_param_updates_;
}
inline ::tendermint::types::ConsensusParams* ResponseFinalizeBlock::mutable_consensus_param_updates() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tendermint::types::ConsensusParams* _msg = _internal_mutable_consensus_param_updates();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ResponseFinalizeBlock.consensus_param_updates)
  return _msg;
}
inline void ResponseFinalizeBlock::set_allocated_consensus_param_updates(::tendermint::types::ConsensusParams* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.consensus_param_updates_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.consensus_param_updates_ = reinterpret_cast<::tendermint::types::ConsensusParams*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.ResponseFinalizeBlock.consensus_param_updates)
}

// bytes app_hash = 5 [json_name = "appHash"];
inline void ResponseFinalizeBlock::clear_app_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_hash_.ClearToEmpty();
}
inline const std::string& ResponseFinalizeBlock::app_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ResponseFinalizeBlock.app_hash)
  return _internal_app_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseFinalizeBlock::set_app_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.ResponseFinalizeBlock.app_hash)
}
inline std::string* ResponseFinalizeBlock::mutable_app_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_app_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ResponseFinalizeBlock.app_hash)
  return _s;
}
inline const std::string& ResponseFinalizeBlock::_internal_app_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.app_hash_.Get();
}
inline void ResponseFinalizeBlock::_internal_set_app_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_hash_.Set(value, GetArena());
}
inline std::string* ResponseFinalizeBlock::_internal_mutable_app_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.app_hash_.Mutable( GetArena());
}
inline std::string* ResponseFinalizeBlock::release_app_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.ResponseFinalizeBlock.app_hash)
  return _impl_.app_hash_.Release();
}
inline void ResponseFinalizeBlock::set_allocated_app_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.app_hash_.IsDefault()) {
    _impl_.app_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.ResponseFinalizeBlock.app_hash)
}

// -------------------------------------------------------------------

// CommitInfo

// int32 round = 1 [json_name = "round"];
inline void CommitInfo::clear_round() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.round_ = 0;
}
inline ::int32_t CommitInfo::round() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.CommitInfo.round)
  return _internal_round();
}
inline void CommitInfo::set_round(::int32_t value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.CommitInfo.round)
}
inline ::int32_t CommitInfo::_internal_round() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.round_;
}
inline void CommitInfo::_internal_set_round(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.round_ = value;
}

// repeated .tendermint.abci.VoteInfo votes = 2 [json_name = "votes", (.gogoproto.nullable) = false];
inline int CommitInfo::_internal_votes_size() const {
  return _internal_votes().size();
}
inline int CommitInfo::votes_size() const {
  return _internal_votes_size();
}
inline void CommitInfo::clear_votes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.votes_.Clear();
}
inline ::tendermint::abci::VoteInfo* CommitInfo::mutable_votes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tendermint.abci.CommitInfo.votes)
  return _internal_mutable_votes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::VoteInfo>* CommitInfo::mutable_votes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tendermint.abci.CommitInfo.votes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_votes();
}
inline const ::tendermint::abci::VoteInfo& CommitInfo::votes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.CommitInfo.votes)
  return _internal_votes().Get(index);
}
inline ::tendermint::abci::VoteInfo* CommitInfo::add_votes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tendermint::abci::VoteInfo* _add = _internal_mutable_votes()->Add();
  // @@protoc_insertion_point(field_add:tendermint.abci.CommitInfo.votes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::VoteInfo>& CommitInfo::votes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tendermint.abci.CommitInfo.votes)
  return _internal_votes();
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::VoteInfo>&
CommitInfo::_internal_votes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.votes_;
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::VoteInfo>*
CommitInfo::_internal_mutable_votes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.votes_;
}

// -------------------------------------------------------------------

// ExtendedCommitInfo

// int32 round = 1 [json_name = "round"];
inline void ExtendedCommitInfo::clear_round() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.round_ = 0;
}
inline ::int32_t ExtendedCommitInfo::round() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.ExtendedCommitInfo.round)
  return _internal_round();
}
inline void ExtendedCommitInfo::set_round(::int32_t value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.ExtendedCommitInfo.round)
}
inline ::int32_t ExtendedCommitInfo::_internal_round() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.round_;
}
inline void ExtendedCommitInfo::_internal_set_round(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.round_ = value;
}

// repeated .tendermint.abci.ExtendedVoteInfo votes = 2 [json_name = "votes", (.gogoproto.nullable) = false];
inline int ExtendedCommitInfo::_internal_votes_size() const {
  return _internal_votes().size();
}
inline int ExtendedCommitInfo::votes_size() const {
  return _internal_votes_size();
}
inline void ExtendedCommitInfo::clear_votes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.votes_.Clear();
}
inline ::tendermint::abci::ExtendedVoteInfo* ExtendedCommitInfo::mutable_votes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ExtendedCommitInfo.votes)
  return _internal_mutable_votes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::ExtendedVoteInfo>* ExtendedCommitInfo::mutable_votes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tendermint.abci.ExtendedCommitInfo.votes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_votes();
}
inline const ::tendermint::abci::ExtendedVoteInfo& ExtendedCommitInfo::votes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ExtendedCommitInfo.votes)
  return _internal_votes().Get(index);
}
inline ::tendermint::abci::ExtendedVoteInfo* ExtendedCommitInfo::add_votes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tendermint::abci::ExtendedVoteInfo* _add = _internal_mutable_votes()->Add();
  // @@protoc_insertion_point(field_add:tendermint.abci.ExtendedCommitInfo.votes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::ExtendedVoteInfo>& ExtendedCommitInfo::votes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tendermint.abci.ExtendedCommitInfo.votes)
  return _internal_votes();
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::ExtendedVoteInfo>&
ExtendedCommitInfo::_internal_votes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.votes_;
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::ExtendedVoteInfo>*
ExtendedCommitInfo::_internal_mutable_votes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.votes_;
}

// -------------------------------------------------------------------

// Event

// string type = 1 [json_name = "type"];
inline void Event::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& Event::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Event.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Event::set_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.Event.type)
}
inline std::string* Event::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Event.type)
  return _s;
}
inline const std::string& Event::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.type_.Get();
}
inline void Event::_internal_set_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.Set(value, GetArena());
}
inline std::string* Event::_internal_mutable_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* Event::release_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.Event.type)
  return _impl_.type_.Release();
}
inline void Event::set_allocated_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Event.type)
}

// repeated .tendermint.abci.EventAttribute attributes = 2 [json_name = "attributes", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "attributes,omitempty"];
inline int Event::_internal_attributes_size() const {
  return _internal_attributes().size();
}
inline int Event::attributes_size() const {
  return _internal_attributes_size();
}
inline void Event::clear_attributes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attributes_.Clear();
}
inline ::tendermint::abci::EventAttribute* Event::mutable_attributes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Event.attributes)
  return _internal_mutable_attributes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::EventAttribute>* Event::mutable_attributes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tendermint.abci.Event.attributes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_attributes();
}
inline const ::tendermint::abci::EventAttribute& Event::attributes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Event.attributes)
  return _internal_attributes().Get(index);
}
inline ::tendermint::abci::EventAttribute* Event::add_attributes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tendermint::abci::EventAttribute* _add = _internal_mutable_attributes()->Add();
  // @@protoc_insertion_point(field_add:tendermint.abci.Event.attributes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::EventAttribute>& Event::attributes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tendermint.abci.Event.attributes)
  return _internal_attributes();
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::EventAttribute>&
Event::_internal_attributes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attributes_;
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::EventAttribute>*
Event::_internal_mutable_attributes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.attributes_;
}

// -------------------------------------------------------------------

// EventAttribute

// string key = 1 [json_name = "key"];
inline void EventAttribute::clear_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& EventAttribute::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.EventAttribute.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventAttribute::set_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.EventAttribute.key)
}
inline std::string* EventAttribute::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.EventAttribute.key)
  return _s;
}
inline const std::string& EventAttribute::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_.Get();
}
inline void EventAttribute::_internal_set_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(value, GetArena());
}
inline std::string* EventAttribute::_internal_mutable_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* EventAttribute::release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.EventAttribute.key)
  return _impl_.key_.Release();
}
inline void EventAttribute::set_allocated_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.EventAttribute.key)
}

// string value = 2 [json_name = "value"];
inline void EventAttribute::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& EventAttribute::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.EventAttribute.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventAttribute::set_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.EventAttribute.value)
}
inline std::string* EventAttribute::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.EventAttribute.value)
  return _s;
}
inline const std::string& EventAttribute::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_.Get();
}
inline void EventAttribute::_internal_set_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(value, GetArena());
}
inline std::string* EventAttribute::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* EventAttribute::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.EventAttribute.value)
  return _impl_.value_.Release();
}
inline void EventAttribute::set_allocated_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.EventAttribute.value)
}

// bool index = 3 [json_name = "index"];
inline void EventAttribute::clear_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = false;
}
inline bool EventAttribute::index() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.EventAttribute.index)
  return _internal_index();
}
inline void EventAttribute::set_index(bool value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.EventAttribute.index)
}
inline bool EventAttribute::_internal_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.index_;
}
inline void EventAttribute::_internal_set_index(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = value;
}

// -------------------------------------------------------------------

// ExecTxResult

// uint32 code = 1 [json_name = "code"];
inline void ExecTxResult::clear_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = 0u;
}
inline ::uint32_t ExecTxResult::code() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.ExecTxResult.code)
  return _internal_code();
}
inline void ExecTxResult::set_code(::uint32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.ExecTxResult.code)
}
inline ::uint32_t ExecTxResult::_internal_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.code_;
}
inline void ExecTxResult::_internal_set_code(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = value;
}

// bytes data = 2 [json_name = "data"];
inline void ExecTxResult::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ExecTxResult::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ExecTxResult.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExecTxResult::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.ExecTxResult.data)
}
inline std::string* ExecTxResult::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ExecTxResult.data)
  return _s;
}
inline const std::string& ExecTxResult::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void ExecTxResult::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* ExecTxResult::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* ExecTxResult::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.ExecTxResult.data)
  return _impl_.data_.Release();
}
inline void ExecTxResult::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.ExecTxResult.data)
}

// string log = 3 [json_name = "log"];
inline void ExecTxResult::clear_log() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_.ClearToEmpty();
}
inline const std::string& ExecTxResult::log() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ExecTxResult.log)
  return _internal_log();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExecTxResult::set_log(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.ExecTxResult.log)
}
inline std::string* ExecTxResult::mutable_log() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_log();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ExecTxResult.log)
  return _s;
}
inline const std::string& ExecTxResult::_internal_log() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_.Get();
}
inline void ExecTxResult::_internal_set_log(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_.Set(value, GetArena());
}
inline std::string* ExecTxResult::_internal_mutable_log() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.log_.Mutable( GetArena());
}
inline std::string* ExecTxResult::release_log() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.ExecTxResult.log)
  return _impl_.log_.Release();
}
inline void ExecTxResult::set_allocated_log(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.log_.IsDefault()) {
    _impl_.log_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.ExecTxResult.log)
}

// string info = 4 [json_name = "info"];
inline void ExecTxResult::clear_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.info_.ClearToEmpty();
}
inline const std::string& ExecTxResult::info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ExecTxResult.info)
  return _internal_info();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExecTxResult::set_info(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.info_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.ExecTxResult.info)
}
inline std::string* ExecTxResult::mutable_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ExecTxResult.info)
  return _s;
}
inline const std::string& ExecTxResult::_internal_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.info_.Get();
}
inline void ExecTxResult::_internal_set_info(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.info_.Set(value, GetArena());
}
inline std::string* ExecTxResult::_internal_mutable_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.info_.Mutable( GetArena());
}
inline std::string* ExecTxResult::release_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.ExecTxResult.info)
  return _impl_.info_.Release();
}
inline void ExecTxResult::set_allocated_info(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.info_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.info_.IsDefault()) {
    _impl_.info_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.ExecTxResult.info)
}

// int64 gas_wanted = 5 [json_name = "gas_wanted"];
inline void ExecTxResult::clear_gas_wanted() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gas_wanted_ = ::int64_t{0};
}
inline ::int64_t ExecTxResult::gas_wanted() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.ExecTxResult.gas_wanted)
  return _internal_gas_wanted();
}
inline void ExecTxResult::set_gas_wanted(::int64_t value) {
  _internal_set_gas_wanted(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.ExecTxResult.gas_wanted)
}
inline ::int64_t ExecTxResult::_internal_gas_wanted() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gas_wanted_;
}
inline void ExecTxResult::_internal_set_gas_wanted(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gas_wanted_ = value;
}

// int64 gas_used = 6 [json_name = "gas_used"];
inline void ExecTxResult::clear_gas_used() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gas_used_ = ::int64_t{0};
}
inline ::int64_t ExecTxResult::gas_used() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.ExecTxResult.gas_used)
  return _internal_gas_used();
}
inline void ExecTxResult::set_gas_used(::int64_t value) {
  _internal_set_gas_used(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.ExecTxResult.gas_used)
}
inline ::int64_t ExecTxResult::_internal_gas_used() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gas_used_;
}
inline void ExecTxResult::_internal_set_gas_used(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gas_used_ = value;
}

// repeated .tendermint.abci.Event events = 7 [json_name = "events", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
inline int ExecTxResult::_internal_events_size() const {
  return _internal_events().size();
}
inline int ExecTxResult::events_size() const {
  return _internal_events_size();
}
inline void ExecTxResult::clear_events() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.events_.Clear();
}
inline ::tendermint::abci::Event* ExecTxResult::mutable_events(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ExecTxResult.events)
  return _internal_mutable_events()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>* ExecTxResult::mutable_events()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tendermint.abci.ExecTxResult.events)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_events();
}
inline const ::tendermint::abci::Event& ExecTxResult::events(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ExecTxResult.events)
  return _internal_events().Get(index);
}
inline ::tendermint::abci::Event* ExecTxResult::add_events() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tendermint::abci::Event* _add = _internal_mutable_events()->Add();
  // @@protoc_insertion_point(field_add:tendermint.abci.ExecTxResult.events)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>& ExecTxResult::events() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tendermint.abci.ExecTxResult.events)
  return _internal_events();
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>&
ExecTxResult::_internal_events() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.events_;
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>*
ExecTxResult::_internal_mutable_events() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.events_;
}

// string codespace = 8 [json_name = "codespace"];
inline void ExecTxResult::clear_codespace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.codespace_.ClearToEmpty();
}
inline const std::string& ExecTxResult::codespace() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ExecTxResult.codespace)
  return _internal_codespace();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExecTxResult::set_codespace(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.codespace_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.ExecTxResult.codespace)
}
inline std::string* ExecTxResult::mutable_codespace() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_codespace();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ExecTxResult.codespace)
  return _s;
}
inline const std::string& ExecTxResult::_internal_codespace() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.codespace_.Get();
}
inline void ExecTxResult::_internal_set_codespace(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.codespace_.Set(value, GetArena());
}
inline std::string* ExecTxResult::_internal_mutable_codespace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.codespace_.Mutable( GetArena());
}
inline std::string* ExecTxResult::release_codespace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.ExecTxResult.codespace)
  return _impl_.codespace_.Release();
}
inline void ExecTxResult::set_allocated_codespace(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.codespace_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.codespace_.IsDefault()) {
    _impl_.codespace_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.ExecTxResult.codespace)
}

// -------------------------------------------------------------------

// TxResult

// int64 height = 1 [json_name = "height"];
inline void TxResult::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t TxResult::height() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.TxResult.height)
  return _internal_height();
}
inline void TxResult::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.TxResult.height)
}
inline ::int64_t TxResult::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void TxResult::_internal_set_height(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// uint32 index = 2 [json_name = "index"];
inline void TxResult::clear_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = 0u;
}
inline ::uint32_t TxResult::index() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.TxResult.index)
  return _internal_index();
}
inline void TxResult::set_index(::uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.TxResult.index)
}
inline ::uint32_t TxResult::_internal_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.index_;
}
inline void TxResult::_internal_set_index(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = value;
}

// bytes tx = 3 [json_name = "tx"];
inline void TxResult::clear_tx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tx_.ClearToEmpty();
}
inline const std::string& TxResult::tx() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.TxResult.tx)
  return _internal_tx();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TxResult::set_tx(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tx_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.TxResult.tx)
}
inline std::string* TxResult::mutable_tx() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tx();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.TxResult.tx)
  return _s;
}
inline const std::string& TxResult::_internal_tx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tx_.Get();
}
inline void TxResult::_internal_set_tx(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tx_.Set(value, GetArena());
}
inline std::string* TxResult::_internal_mutable_tx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.tx_.Mutable( GetArena());
}
inline std::string* TxResult::release_tx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.TxResult.tx)
  return _impl_.tx_.Release();
}
inline void TxResult::set_allocated_tx(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tx_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.tx_.IsDefault()) {
    _impl_.tx_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.TxResult.tx)
}

// .tendermint.abci.ExecTxResult result = 4 [json_name = "result", (.gogoproto.nullable) = false];
inline bool TxResult::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline void TxResult::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tendermint::abci::ExecTxResult& TxResult::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::abci::ExecTxResult* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::abci::ExecTxResult&>(::tendermint::abci::_ExecTxResult_default_instance_);
}
inline const ::tendermint::abci::ExecTxResult& TxResult::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.TxResult.result)
  return _internal_result();
}
inline void TxResult::unsafe_arena_set_allocated_result(::tendermint::abci::ExecTxResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::tendermint::abci::ExecTxResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.TxResult.result)
}
inline ::tendermint::abci::ExecTxResult* TxResult::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::abci::ExecTxResult* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::abci::ExecTxResult* TxResult::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.TxResult.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::abci::ExecTxResult* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::tendermint::abci::ExecTxResult* TxResult::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::ExecTxResult>(GetArena());
    _impl_.result_ = reinterpret_cast<::tendermint::abci::ExecTxResult*>(p);
  }
  return _impl_.result_;
}
inline ::tendermint::abci::ExecTxResult* TxResult::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tendermint::abci::ExecTxResult* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.TxResult.result)
  return _msg;
}
inline void TxResult::set_allocated_result(::tendermint::abci::ExecTxResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::tendermint::abci::ExecTxResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.TxResult.result)
}

// -------------------------------------------------------------------

// Validator

// bytes address = 1 [json_name = "address"];
inline void Validator::clear_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.ClearToEmpty();
}
inline const std::string& Validator::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Validator.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Validator::set_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.Validator.address)
}
inline std::string* Validator::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Validator.address)
  return _s;
}
inline const std::string& Validator::_internal_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.address_.Get();
}
inline void Validator::_internal_set_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(value, GetArena());
}
inline std::string* Validator::_internal_mutable_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.address_.Mutable( GetArena());
}
inline std::string* Validator::release_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.Validator.address)
  return _impl_.address_.Release();
}
inline void Validator::set_allocated_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Validator.address)
}

// int64 power = 3 [json_name = "power"];
inline void Validator::clear_power() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.power_ = ::int64_t{0};
}
inline ::int64_t Validator::power() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.Validator.power)
  return _internal_power();
}
inline void Validator::set_power(::int64_t value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.Validator.power)
}
inline ::int64_t Validator::_internal_power() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.power_;
}
inline void Validator::_internal_set_power(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.power_ = value;
}

// -------------------------------------------------------------------

// ValidatorUpdate

// .tendermint.crypto.PublicKey pub_key = 1 [json_name = "pubKey", (.gogoproto.nullable) = false];
inline bool ValidatorUpdate::has_pub_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pub_key_ != nullptr);
  return value;
}
inline const ::tendermint::crypto::PublicKey& ValidatorUpdate::_internal_pub_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::crypto::PublicKey* p = _impl_.pub_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::crypto::PublicKey&>(::tendermint::crypto::_PublicKey_default_instance_);
}
inline const ::tendermint::crypto::PublicKey& ValidatorUpdate::pub_key() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ValidatorUpdate.pub_key)
  return _internal_pub_key();
}
inline void ValidatorUpdate::unsafe_arena_set_allocated_pub_key(::tendermint::crypto::PublicKey* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pub_key_);
  }
  _impl_.pub_key_ = reinterpret_cast<::tendermint::crypto::PublicKey*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.ValidatorUpdate.pub_key)
}
inline ::tendermint::crypto::PublicKey* ValidatorUpdate::release_pub_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::crypto::PublicKey* released = _impl_.pub_key_;
  _impl_.pub_key_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::crypto::PublicKey* ValidatorUpdate::unsafe_arena_release_pub_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.ValidatorUpdate.pub_key)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::crypto::PublicKey* temp = _impl_.pub_key_;
  _impl_.pub_key_ = nullptr;
  return temp;
}
inline ::tendermint::crypto::PublicKey* ValidatorUpdate::_internal_mutable_pub_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pub_key_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::crypto::PublicKey>(GetArena());
    _impl_.pub_key_ = reinterpret_cast<::tendermint::crypto::PublicKey*>(p);
  }
  return _impl_.pub_key_;
}
inline ::tendermint::crypto::PublicKey* ValidatorUpdate::mutable_pub_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tendermint::crypto::PublicKey* _msg = _internal_mutable_pub_key();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ValidatorUpdate.pub_key)
  return _msg;
}
inline void ValidatorUpdate::set_allocated_pub_key(::tendermint::crypto::PublicKey* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pub_key_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pub_key_ = reinterpret_cast<::tendermint::crypto::PublicKey*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.ValidatorUpdate.pub_key)
}

// int64 power = 2 [json_name = "power"];
inline void ValidatorUpdate::clear_power() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.power_ = ::int64_t{0};
}
inline ::int64_t ValidatorUpdate::power() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.ValidatorUpdate.power)
  return _internal_power();
}
inline void ValidatorUpdate::set_power(::int64_t value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.ValidatorUpdate.power)
}
inline ::int64_t ValidatorUpdate::_internal_power() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.power_;
}
inline void ValidatorUpdate::_internal_set_power(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.power_ = value;
}

// -------------------------------------------------------------------

// VoteInfo

// .tendermint.abci.Validator validator = 1 [json_name = "validator", (.gogoproto.nullable) = false];
inline bool VoteInfo::has_validator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.validator_ != nullptr);
  return value;
}
inline void VoteInfo::clear_validator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.validator_ != nullptr) _impl_.validator_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tendermint::abci::Validator& VoteInfo::_internal_validator() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::abci::Validator* p = _impl_.validator_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::abci::Validator&>(::tendermint::abci::_Validator_default_instance_);
}
inline const ::tendermint::abci::Validator& VoteInfo::validator() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.VoteInfo.validator)
  return _internal_validator();
}
inline void VoteInfo::unsafe_arena_set_allocated_validator(::tendermint::abci::Validator* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.validator_);
  }
  _impl_.validator_ = reinterpret_cast<::tendermint::abci::Validator*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.VoteInfo.validator)
}
inline ::tendermint::abci::Validator* VoteInfo::release_validator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::abci::Validator* released = _impl_.validator_;
  _impl_.validator_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::abci::Validator* VoteInfo::unsafe_arena_release_validator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.VoteInfo.validator)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::abci::Validator* temp = _impl_.validator_;
  _impl_.validator_ = nullptr;
  return temp;
}
inline ::tendermint::abci::Validator* VoteInfo::_internal_mutable_validator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.validator_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::Validator>(GetArena());
    _impl_.validator_ = reinterpret_cast<::tendermint::abci::Validator*>(p);
  }
  return _impl_.validator_;
}
inline ::tendermint::abci::Validator* VoteInfo::mutable_validator() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tendermint::abci::Validator* _msg = _internal_mutable_validator();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.VoteInfo.validator)
  return _msg;
}
inline void VoteInfo::set_allocated_validator(::tendermint::abci::Validator* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.validator_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.validator_ = reinterpret_cast<::tendermint::abci::Validator*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.VoteInfo.validator)
}

// .tendermint.types.BlockIDFlag block_id_flag = 3 [json_name = "blockIdFlag"];
inline void VoteInfo::clear_block_id_flag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_id_flag_ = 0;
}
inline ::tendermint::types::BlockIDFlag VoteInfo::block_id_flag() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.VoteInfo.block_id_flag)
  return _internal_block_id_flag();
}
inline void VoteInfo::set_block_id_flag(::tendermint::types::BlockIDFlag value) {
  _internal_set_block_id_flag(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.VoteInfo.block_id_flag)
}
inline ::tendermint::types::BlockIDFlag VoteInfo::_internal_block_id_flag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tendermint::types::BlockIDFlag>(_impl_.block_id_flag_);
}
inline void VoteInfo::_internal_set_block_id_flag(::tendermint::types::BlockIDFlag value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_id_flag_ = value;
}

// -------------------------------------------------------------------

// ExtendedVoteInfo

// .tendermint.abci.Validator validator = 1 [json_name = "validator", (.gogoproto.nullable) = false];
inline bool ExtendedVoteInfo::has_validator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.validator_ != nullptr);
  return value;
}
inline void ExtendedVoteInfo::clear_validator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.validator_ != nullptr) _impl_.validator_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tendermint::abci::Validator& ExtendedVoteInfo::_internal_validator() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::abci::Validator* p = _impl_.validator_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::abci::Validator&>(::tendermint::abci::_Validator_default_instance_);
}
inline const ::tendermint::abci::Validator& ExtendedVoteInfo::validator() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ExtendedVoteInfo.validator)
  return _internal_validator();
}
inline void ExtendedVoteInfo::unsafe_arena_set_allocated_validator(::tendermint::abci::Validator* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.validator_);
  }
  _impl_.validator_ = reinterpret_cast<::tendermint::abci::Validator*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.ExtendedVoteInfo.validator)
}
inline ::tendermint::abci::Validator* ExtendedVoteInfo::release_validator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::abci::Validator* released = _impl_.validator_;
  _impl_.validator_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::abci::Validator* ExtendedVoteInfo::unsafe_arena_release_validator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.ExtendedVoteInfo.validator)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::abci::Validator* temp = _impl_.validator_;
  _impl_.validator_ = nullptr;
  return temp;
}
inline ::tendermint::abci::Validator* ExtendedVoteInfo::_internal_mutable_validator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.validator_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::Validator>(GetArena());
    _impl_.validator_ = reinterpret_cast<::tendermint::abci::Validator*>(p);
  }
  return _impl_.validator_;
}
inline ::tendermint::abci::Validator* ExtendedVoteInfo::mutable_validator() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tendermint::abci::Validator* _msg = _internal_mutable_validator();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ExtendedVoteInfo.validator)
  return _msg;
}
inline void ExtendedVoteInfo::set_allocated_validator(::tendermint::abci::Validator* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.validator_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.validator_ = reinterpret_cast<::tendermint::abci::Validator*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.ExtendedVoteInfo.validator)
}

// bytes vote_extension = 3 [json_name = "voteExtension"];
inline void ExtendedVoteInfo::clear_vote_extension() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vote_extension_.ClearToEmpty();
}
inline const std::string& ExtendedVoteInfo::vote_extension() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ExtendedVoteInfo.vote_extension)
  return _internal_vote_extension();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExtendedVoteInfo::set_vote_extension(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vote_extension_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.ExtendedVoteInfo.vote_extension)
}
inline std::string* ExtendedVoteInfo::mutable_vote_extension() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_vote_extension();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ExtendedVoteInfo.vote_extension)
  return _s;
}
inline const std::string& ExtendedVoteInfo::_internal_vote_extension() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vote_extension_.Get();
}
inline void ExtendedVoteInfo::_internal_set_vote_extension(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vote_extension_.Set(value, GetArena());
}
inline std::string* ExtendedVoteInfo::_internal_mutable_vote_extension() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.vote_extension_.Mutable( GetArena());
}
inline std::string* ExtendedVoteInfo::release_vote_extension() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.ExtendedVoteInfo.vote_extension)
  return _impl_.vote_extension_.Release();
}
inline void ExtendedVoteInfo::set_allocated_vote_extension(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vote_extension_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.vote_extension_.IsDefault()) {
    _impl_.vote_extension_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.ExtendedVoteInfo.vote_extension)
}

// bytes extension_signature = 4 [json_name = "extensionSignature"];
inline void ExtendedVoteInfo::clear_extension_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extension_signature_.ClearToEmpty();
}
inline const std::string& ExtendedVoteInfo::extension_signature() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.ExtendedVoteInfo.extension_signature)
  return _internal_extension_signature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExtendedVoteInfo::set_extension_signature(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extension_signature_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.ExtendedVoteInfo.extension_signature)
}
inline std::string* ExtendedVoteInfo::mutable_extension_signature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_extension_signature();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.ExtendedVoteInfo.extension_signature)
  return _s;
}
inline const std::string& ExtendedVoteInfo::_internal_extension_signature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.extension_signature_.Get();
}
inline void ExtendedVoteInfo::_internal_set_extension_signature(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extension_signature_.Set(value, GetArena());
}
inline std::string* ExtendedVoteInfo::_internal_mutable_extension_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.extension_signature_.Mutable( GetArena());
}
inline std::string* ExtendedVoteInfo::release_extension_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.ExtendedVoteInfo.extension_signature)
  return _impl_.extension_signature_.Release();
}
inline void ExtendedVoteInfo::set_allocated_extension_signature(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extension_signature_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.extension_signature_.IsDefault()) {
    _impl_.extension_signature_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.ExtendedVoteInfo.extension_signature)
}

// .tendermint.types.BlockIDFlag block_id_flag = 5 [json_name = "blockIdFlag"];
inline void ExtendedVoteInfo::clear_block_id_flag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_id_flag_ = 0;
}
inline ::tendermint::types::BlockIDFlag ExtendedVoteInfo::block_id_flag() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.ExtendedVoteInfo.block_id_flag)
  return _internal_block_id_flag();
}
inline void ExtendedVoteInfo::set_block_id_flag(::tendermint::types::BlockIDFlag value) {
  _internal_set_block_id_flag(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.ExtendedVoteInfo.block_id_flag)
}
inline ::tendermint::types::BlockIDFlag ExtendedVoteInfo::_internal_block_id_flag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tendermint::types::BlockIDFlag>(_impl_.block_id_flag_);
}
inline void ExtendedVoteInfo::_internal_set_block_id_flag(::tendermint::types::BlockIDFlag value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_id_flag_ = value;
}

// -------------------------------------------------------------------

// Misbehavior

// .tendermint.abci.MisbehaviorType type = 1 [json_name = "type"];
inline void Misbehavior::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::tendermint::abci::MisbehaviorType Misbehavior::type() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.Misbehavior.type)
  return _internal_type();
}
inline void Misbehavior::set_type(::tendermint::abci::MisbehaviorType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.Misbehavior.type)
}
inline ::tendermint::abci::MisbehaviorType Misbehavior::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tendermint::abci::MisbehaviorType>(_impl_.type_);
}
inline void Misbehavior::_internal_set_type(::tendermint::abci::MisbehaviorType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// .tendermint.abci.Validator validator = 2 [json_name = "validator", (.gogoproto.nullable) = false];
inline bool Misbehavior::has_validator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.validator_ != nullptr);
  return value;
}
inline void Misbehavior::clear_validator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.validator_ != nullptr) _impl_.validator_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tendermint::abci::Validator& Misbehavior::_internal_validator() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::abci::Validator* p = _impl_.validator_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::abci::Validator&>(::tendermint::abci::_Validator_default_instance_);
}
inline const ::tendermint::abci::Validator& Misbehavior::validator() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Misbehavior.validator)
  return _internal_validator();
}
inline void Misbehavior::unsafe_arena_set_allocated_validator(::tendermint::abci::Validator* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.validator_);
  }
  _impl_.validator_ = reinterpret_cast<::tendermint::abci::Validator*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Misbehavior.validator)
}
inline ::tendermint::abci::Validator* Misbehavior::release_validator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::abci::Validator* released = _impl_.validator_;
  _impl_.validator_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::abci::Validator* Misbehavior::unsafe_arena_release_validator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.Misbehavior.validator)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::abci::Validator* temp = _impl_.validator_;
  _impl_.validator_ = nullptr;
  return temp;
}
inline ::tendermint::abci::Validator* Misbehavior::_internal_mutable_validator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.validator_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::abci::Validator>(GetArena());
    _impl_.validator_ = reinterpret_cast<::tendermint::abci::Validator*>(p);
  }
  return _impl_.validator_;
}
inline ::tendermint::abci::Validator* Misbehavior::mutable_validator() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tendermint::abci::Validator* _msg = _internal_mutable_validator();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Misbehavior.validator)
  return _msg;
}
inline void Misbehavior::set_allocated_validator(::tendermint::abci::Validator* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.validator_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.validator_ = reinterpret_cast<::tendermint::abci::Validator*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Misbehavior.validator)
}

// int64 height = 3 [json_name = "height"];
inline void Misbehavior::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t Misbehavior::height() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.Misbehavior.height)
  return _internal_height();
}
inline void Misbehavior::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.Misbehavior.height)
}
inline ::int64_t Misbehavior::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void Misbehavior::_internal_set_height(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// .google.protobuf.Timestamp time = 4 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool Misbehavior::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Misbehavior::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Misbehavior::time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Misbehavior.time)
  return _internal_time();
}
inline void Misbehavior::unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.abci.Misbehavior.time)
}
inline ::google::protobuf::Timestamp* Misbehavior::release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.time_;
  _impl_.time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* Misbehavior::unsafe_arena_release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.Misbehavior.time)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Misbehavior::_internal_mutable_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.time_;
}
inline ::google::protobuf::Timestamp* Misbehavior::mutable_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Misbehavior.time)
  return _msg;
}
inline void Misbehavior::set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Misbehavior.time)
}

// int64 total_voting_power = 5 [json_name = "totalVotingPower"];
inline void Misbehavior::clear_total_voting_power() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_voting_power_ = ::int64_t{0};
}
inline ::int64_t Misbehavior::total_voting_power() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.Misbehavior.total_voting_power)
  return _internal_total_voting_power();
}
inline void Misbehavior::set_total_voting_power(::int64_t value) {
  _internal_set_total_voting_power(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.Misbehavior.total_voting_power)
}
inline ::int64_t Misbehavior::_internal_total_voting_power() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_voting_power_;
}
inline void Misbehavior::_internal_set_total_voting_power(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_voting_power_ = value;
}

// -------------------------------------------------------------------

// Snapshot

// uint64 height = 1 [json_name = "height"];
inline void Snapshot::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = ::uint64_t{0u};
}
inline ::uint64_t Snapshot::height() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.Snapshot.height)
  return _internal_height();
}
inline void Snapshot::set_height(::uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.Snapshot.height)
}
inline ::uint64_t Snapshot::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void Snapshot::_internal_set_height(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// uint32 format = 2 [json_name = "format"];
inline void Snapshot::clear_format() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_ = 0u;
}
inline ::uint32_t Snapshot::format() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.Snapshot.format)
  return _internal_format();
}
inline void Snapshot::set_format(::uint32_t value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.Snapshot.format)
}
inline ::uint32_t Snapshot::_internal_format() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.format_;
}
inline void Snapshot::_internal_set_format(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_ = value;
}

// uint32 chunks = 3 [json_name = "chunks"];
inline void Snapshot::clear_chunks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunks_ = 0u;
}
inline ::uint32_t Snapshot::chunks() const {
  // @@protoc_insertion_point(field_get:tendermint.abci.Snapshot.chunks)
  return _internal_chunks();
}
inline void Snapshot::set_chunks(::uint32_t value) {
  _internal_set_chunks(value);
  // @@protoc_insertion_point(field_set:tendermint.abci.Snapshot.chunks)
}
inline ::uint32_t Snapshot::_internal_chunks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chunks_;
}
inline void Snapshot::_internal_set_chunks(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunks_ = value;
}

// bytes hash = 4 [json_name = "hash"];
inline void Snapshot::clear_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& Snapshot::hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Snapshot.hash)
  return _internal_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Snapshot::set_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.Snapshot.hash)
}
inline std::string* Snapshot::mutable_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Snapshot.hash)
  return _s;
}
inline const std::string& Snapshot::_internal_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hash_.Get();
}
inline void Snapshot::_internal_set_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.Set(value, GetArena());
}
inline std::string* Snapshot::_internal_mutable_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hash_.Mutable( GetArena());
}
inline std::string* Snapshot::release_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.Snapshot.hash)
  return _impl_.hash_.Release();
}
inline void Snapshot::set_allocated_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Snapshot.hash)
}

// bytes metadata = 5 [json_name = "metadata"];
inline void Snapshot::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& Snapshot::metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tendermint.abci.Snapshot.metadata)
  return _internal_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Snapshot::set_metadata(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tendermint.abci.Snapshot.metadata)
}
inline std::string* Snapshot::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:tendermint.abci.Snapshot.metadata)
  return _s;
}
inline const std::string& Snapshot::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.Get();
}
inline void Snapshot::_internal_set_metadata(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Set(value, GetArena());
}
inline std::string* Snapshot::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.Mutable( GetArena());
}
inline std::string* Snapshot::release_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tendermint.abci.Snapshot.metadata)
  return _impl_.metadata_.Release();
}
inline void Snapshot::set_allocated_metadata(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Snapshot.metadata)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace abci
}  // namespace tendermint


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::tendermint::abci::ResponseOfferSnapshot_Result> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tendermint::abci::ResponseOfferSnapshot_Result>() {
  return ::tendermint::abci::ResponseOfferSnapshot_Result_descriptor();
}
template <>
struct is_proto_enum<::tendermint::abci::ResponseApplySnapshotChunk_Result> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tendermint::abci::ResponseApplySnapshotChunk_Result>() {
  return ::tendermint::abci::ResponseApplySnapshotChunk_Result_descriptor();
}
template <>
struct is_proto_enum<::tendermint::abci::ResponseProcessProposal_ProposalStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tendermint::abci::ResponseProcessProposal_ProposalStatus>() {
  return ::tendermint::abci::ResponseProcessProposal_ProposalStatus_descriptor();
}
template <>
struct is_proto_enum<::tendermint::abci::ResponseVerifyVoteExtension_VerifyStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tendermint::abci::ResponseVerifyVoteExtension_VerifyStatus>() {
  return ::tendermint::abci::ResponseVerifyVoteExtension_VerifyStatus_descriptor();
}
template <>
struct is_proto_enum<::tendermint::abci::CheckTxType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tendermint::abci::CheckTxType>() {
  return ::tendermint::abci::CheckTxType_descriptor();
}
template <>
struct is_proto_enum<::tendermint::abci::MisbehaviorType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tendermint::abci::MisbehaviorType>() {
  return ::tendermint::abci::MisbehaviorType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // tendermint_2fabci_2ftypes_2eproto_2epb_2eh
