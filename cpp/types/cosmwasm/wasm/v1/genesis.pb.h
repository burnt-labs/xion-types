// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmwasm/wasm/v1/genesis.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmwasm_2fwasm_2fv1_2fgenesis_2eproto_2epb_2eh
#define cosmwasm_2fwasm_2fv1_2fgenesis_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmwasm/wasm/v1/types.pb.h"
#include "amino/amino.pb.h"
#include "cosmos_proto/cosmos.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto;
namespace cosmwasm {
namespace wasm {
namespace v1 {
class Code;
struct CodeDefaultTypeInternal;
extern CodeDefaultTypeInternal _Code_default_instance_;
class Contract;
struct ContractDefaultTypeInternal;
extern ContractDefaultTypeInternal _Contract_default_instance_;
class GenesisState;
struct GenesisStateDefaultTypeInternal;
extern GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
class Sequence;
struct SequenceDefaultTypeInternal;
extern SequenceDefaultTypeInternal _Sequence_default_instance_;
}  // namespace v1
}  // namespace wasm
}  // namespace cosmwasm
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmwasm {
namespace wasm {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class Sequence final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.Sequence) */ {
 public:
  inline Sequence() : Sequence(nullptr) {}
  ~Sequence() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Sequence* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Sequence));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Sequence(
      ::google::protobuf::internal::ConstantInitialized);

  inline Sequence(const Sequence& from) : Sequence(nullptr, from) {}
  inline Sequence(Sequence&& from) noexcept
      : Sequence(nullptr, std::move(from)) {}
  inline Sequence& operator=(const Sequence& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sequence& operator=(Sequence&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sequence& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sequence* internal_default_instance() {
    return reinterpret_cast<const Sequence*>(
        &_Sequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Sequence& a, Sequence& b) { a.Swap(&b); }
  inline void Swap(Sequence* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sequence* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sequence* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Sequence>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Sequence& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Sequence& from) { Sequence::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Sequence* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmwasm.wasm.v1.Sequence"; }

 protected:
  explicit Sequence(::google::protobuf::Arena* arena);
  Sequence(::google::protobuf::Arena* arena, const Sequence& from);
  Sequence(::google::protobuf::Arena* arena, Sequence&& from) noexcept
      : Sequence(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes id_key = 1 [json_name = "idKey", (.gogoproto.customname) = "IDKey"];
  void clear_id_key() ;
  const std::string& id_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id_key(Arg_&& arg, Args_... args);
  std::string* mutable_id_key();
  PROTOBUF_NODISCARD std::string* release_id_key();
  void set_allocated_id_key(std::string* value);

  private:
  const std::string& _internal_id_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id_key(
      const std::string& value);
  std::string* _internal_mutable_id_key();

  public:
  // uint64 value = 2 [json_name = "value"];
  void clear_value() ;
  ::uint64_t value() const;
  void set_value(::uint64_t value);

  private:
  ::uint64_t _internal_value() const;
  void _internal_set_value(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.Sequence)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Sequence& from_msg);
    ::google::protobuf::internal::ArenaStringPtr id_key_;
    ::uint64_t value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto;
};
// -------------------------------------------------------------------

class Contract final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.Contract) */ {
 public:
  inline Contract() : Contract(nullptr) {}
  ~Contract() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Contract* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Contract));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Contract(
      ::google::protobuf::internal::ConstantInitialized);

  inline Contract(const Contract& from) : Contract(nullptr, from) {}
  inline Contract(Contract&& from) noexcept
      : Contract(nullptr, std::move(from)) {}
  inline Contract& operator=(const Contract& from) {
    CopyFrom(from);
    return *this;
  }
  inline Contract& operator=(Contract&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Contract& default_instance() {
    return *internal_default_instance();
  }
  static inline const Contract* internal_default_instance() {
    return reinterpret_cast<const Contract*>(
        &_Contract_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Contract& a, Contract& b) { a.Swap(&b); }
  inline void Swap(Contract* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Contract* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Contract* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Contract>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Contract& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Contract& from) { Contract::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Contract* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmwasm.wasm.v1.Contract"; }

 protected:
  explicit Contract(::google::protobuf::Arena* arena);
  Contract(::google::protobuf::Arena* arena, const Contract& from);
  Contract(::google::protobuf::Arena* arena, Contract&& from) noexcept
      : Contract(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kContractStateFieldNumber = 3,
    kContractCodeHistoryFieldNumber = 4,
    kContractAddressFieldNumber = 1,
    kContractInfoFieldNumber = 2,
  };
  // repeated .cosmwasm.wasm.v1.Model contract_state = 3 [json_name = "contractState", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int contract_state_size() const;
  private:
  int _internal_contract_state_size() const;

  public:
  void clear_contract_state() ;
  ::cosmwasm::wasm::v1::Model* mutable_contract_state(int index);
  ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Model>* mutable_contract_state();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Model>& _internal_contract_state() const;
  ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Model>* _internal_mutable_contract_state();
  public:
  const ::cosmwasm::wasm::v1::Model& contract_state(int index) const;
  ::cosmwasm::wasm::v1::Model* add_contract_state();
  const ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Model>& contract_state() const;
  // repeated .cosmwasm.wasm.v1.ContractCodeHistoryEntry contract_code_history = 4 [json_name = "contractCodeHistory", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int contract_code_history_size() const;
  private:
  int _internal_contract_code_history_size() const;

  public:
  void clear_contract_code_history() ;
  ::cosmwasm::wasm::v1::ContractCodeHistoryEntry* mutable_contract_code_history(int index);
  ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::ContractCodeHistoryEntry>* mutable_contract_code_history();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::ContractCodeHistoryEntry>& _internal_contract_code_history() const;
  ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::ContractCodeHistoryEntry>* _internal_mutable_contract_code_history();
  public:
  const ::cosmwasm::wasm::v1::ContractCodeHistoryEntry& contract_code_history(int index) const;
  ::cosmwasm::wasm::v1::ContractCodeHistoryEntry* add_contract_code_history();
  const ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::ContractCodeHistoryEntry>& contract_code_history() const;
  // string contract_address = 1 [json_name = "contractAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_contract_address() ;
  const std::string& contract_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contract_address(Arg_&& arg, Args_... args);
  std::string* mutable_contract_address();
  PROTOBUF_NODISCARD std::string* release_contract_address();
  void set_allocated_contract_address(std::string* value);

  private:
  const std::string& _internal_contract_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_address(
      const std::string& value);
  std::string* _internal_mutable_contract_address();

  public:
  // .cosmwasm.wasm.v1.ContractInfo contract_info = 2 [json_name = "contractInfo", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_contract_info() const;
  void clear_contract_info() ;
  const ::cosmwasm::wasm::v1::ContractInfo& contract_info() const;
  PROTOBUF_NODISCARD ::cosmwasm::wasm::v1::ContractInfo* release_contract_info();
  ::cosmwasm::wasm::v1::ContractInfo* mutable_contract_info();
  void set_allocated_contract_info(::cosmwasm::wasm::v1::ContractInfo* value);
  void unsafe_arena_set_allocated_contract_info(::cosmwasm::wasm::v1::ContractInfo* value);
  ::cosmwasm::wasm::v1::ContractInfo* unsafe_arena_release_contract_info();

  private:
  const ::cosmwasm::wasm::v1::ContractInfo& _internal_contract_info() const;
  ::cosmwasm::wasm::v1::ContractInfo* _internal_mutable_contract_info();

  public:
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.Contract)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 3,
      50, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Contract& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::cosmwasm::wasm::v1::Model > contract_state_;
    ::google::protobuf::RepeatedPtrField< ::cosmwasm::wasm::v1::ContractCodeHistoryEntry > contract_code_history_;
    ::google::protobuf::internal::ArenaStringPtr contract_address_;
    ::cosmwasm::wasm::v1::ContractInfo* contract_info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto;
};
// -------------------------------------------------------------------

class Code final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.Code) */ {
 public:
  inline Code() : Code(nullptr) {}
  ~Code() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Code* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Code));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Code(
      ::google::protobuf::internal::ConstantInitialized);

  inline Code(const Code& from) : Code(nullptr, from) {}
  inline Code(Code&& from) noexcept
      : Code(nullptr, std::move(from)) {}
  inline Code& operator=(const Code& from) {
    CopyFrom(from);
    return *this;
  }
  inline Code& operator=(Code&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Code& default_instance() {
    return *internal_default_instance();
  }
  static inline const Code* internal_default_instance() {
    return reinterpret_cast<const Code*>(
        &_Code_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Code& a, Code& b) { a.Swap(&b); }
  inline void Swap(Code* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Code* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Code* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Code>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Code& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Code& from) { Code::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Code* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmwasm.wasm.v1.Code"; }

 protected:
  explicit Code(::google::protobuf::Arena* arena);
  Code(::google::protobuf::Arena* arena, const Code& from);
  Code(::google::protobuf::Arena* arena, Code&& from) noexcept
      : Code(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCodeBytesFieldNumber = 3,
    kCodeInfoFieldNumber = 2,
    kCodeIdFieldNumber = 1,
    kPinnedFieldNumber = 4,
  };
  // bytes code_bytes = 3 [json_name = "codeBytes"];
  void clear_code_bytes() ;
  const std::string& code_bytes() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_code_bytes();
  PROTOBUF_NODISCARD std::string* release_code_bytes();
  void set_allocated_code_bytes(std::string* value);

  private:
  const std::string& _internal_code_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code_bytes(
      const std::string& value);
  std::string* _internal_mutable_code_bytes();

  public:
  // .cosmwasm.wasm.v1.CodeInfo code_info = 2 [json_name = "codeInfo", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_code_info() const;
  void clear_code_info() ;
  const ::cosmwasm::wasm::v1::CodeInfo& code_info() const;
  PROTOBUF_NODISCARD ::cosmwasm::wasm::v1::CodeInfo* release_code_info();
  ::cosmwasm::wasm::v1::CodeInfo* mutable_code_info();
  void set_allocated_code_info(::cosmwasm::wasm::v1::CodeInfo* value);
  void unsafe_arena_set_allocated_code_info(::cosmwasm::wasm::v1::CodeInfo* value);
  ::cosmwasm::wasm::v1::CodeInfo* unsafe_arena_release_code_info();

  private:
  const ::cosmwasm::wasm::v1::CodeInfo& _internal_code_info() const;
  ::cosmwasm::wasm::v1::CodeInfo* _internal_mutable_code_info();

  public:
  // uint64 code_id = 1 [json_name = "codeId", (.gogoproto.customname) = "CodeID"];
  void clear_code_id() ;
  ::uint64_t code_id() const;
  void set_code_id(::uint64_t value);

  private:
  ::uint64_t _internal_code_id() const;
  void _internal_set_code_id(::uint64_t value);

  public:
  // bool pinned = 4 [json_name = "pinned"];
  void clear_pinned() ;
  bool pinned() const;
  void set_pinned(bool value);

  private:
  bool _internal_pinned() const;
  void _internal_set_pinned(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.Code)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Code& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr code_bytes_;
    ::cosmwasm::wasm::v1::CodeInfo* code_info_;
    ::uint64_t code_id_;
    bool pinned_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto;
};
// -------------------------------------------------------------------

class GenesisState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmwasm.wasm.v1.GenesisState) */ {
 public:
  inline GenesisState() : GenesisState(nullptr) {}
  ~GenesisState() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GenesisState* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GenesisState));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GenesisState(
      ::google::protobuf::internal::ConstantInitialized);

  inline GenesisState(const GenesisState& from) : GenesisState(nullptr, from) {}
  inline GenesisState(GenesisState&& from) noexcept
      : GenesisState(nullptr, std::move(from)) {}
  inline GenesisState& operator=(const GenesisState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisState& operator=(GenesisState&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisState* internal_default_instance() {
    return reinterpret_cast<const GenesisState*>(
        &_GenesisState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(GenesisState& a, GenesisState& b) { a.Swap(&b); }
  inline void Swap(GenesisState* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenesisState* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GenesisState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GenesisState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GenesisState& from) { GenesisState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GenesisState* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmwasm.wasm.v1.GenesisState"; }

 protected:
  explicit GenesisState(::google::protobuf::Arena* arena);
  GenesisState(::google::protobuf::Arena* arena, const GenesisState& from);
  GenesisState(::google::protobuf::Arena* arena, GenesisState&& from) noexcept
      : GenesisState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCodesFieldNumber = 2,
    kContractsFieldNumber = 3,
    kSequencesFieldNumber = 4,
    kParamsFieldNumber = 1,
  };
  // repeated .cosmwasm.wasm.v1.Code codes = 2 [json_name = "codes", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "codes,omitempty", (.amino.dont_omitempty) = true];
  int codes_size() const;
  private:
  int _internal_codes_size() const;

  public:
  void clear_codes() ;
  ::cosmwasm::wasm::v1::Code* mutable_codes(int index);
  ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Code>* mutable_codes();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Code>& _internal_codes() const;
  ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Code>* _internal_mutable_codes();
  public:
  const ::cosmwasm::wasm::v1::Code& codes(int index) const;
  ::cosmwasm::wasm::v1::Code* add_codes();
  const ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Code>& codes() const;
  // repeated .cosmwasm.wasm.v1.Contract contracts = 3 [json_name = "contracts", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "contracts,omitempty", (.amino.dont_omitempty) = true];
  int contracts_size() const;
  private:
  int _internal_contracts_size() const;

  public:
  void clear_contracts() ;
  ::cosmwasm::wasm::v1::Contract* mutable_contracts(int index);
  ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Contract>* mutable_contracts();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Contract>& _internal_contracts() const;
  ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Contract>* _internal_mutable_contracts();
  public:
  const ::cosmwasm::wasm::v1::Contract& contracts(int index) const;
  ::cosmwasm::wasm::v1::Contract* add_contracts();
  const ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Contract>& contracts() const;
  // repeated .cosmwasm.wasm.v1.Sequence sequences = 4 [json_name = "sequences", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "sequences,omitempty", (.amino.dont_omitempty) = true];
  int sequences_size() const;
  private:
  int _internal_sequences_size() const;

  public:
  void clear_sequences() ;
  ::cosmwasm::wasm::v1::Sequence* mutable_sequences(int index);
  ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Sequence>* mutable_sequences();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Sequence>& _internal_sequences() const;
  ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Sequence>* _internal_mutable_sequences();
  public:
  const ::cosmwasm::wasm::v1::Sequence& sequences(int index) const;
  ::cosmwasm::wasm::v1::Sequence* add_sequences();
  const ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Sequence>& sequences() const;
  // .cosmwasm.wasm.v1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_params() const;
  void clear_params() ;
  const ::cosmwasm::wasm::v1::Params& params() const;
  PROTOBUF_NODISCARD ::cosmwasm::wasm::v1::Params* release_params();
  ::cosmwasm::wasm::v1::Params* mutable_params();
  void set_allocated_params(::cosmwasm::wasm::v1::Params* value);
  void unsafe_arena_set_allocated_params(::cosmwasm::wasm::v1::Params* value);
  ::cosmwasm::wasm::v1::Params* unsafe_arena_release_params();

  private:
  const ::cosmwasm::wasm::v1::Params& _internal_params() const;
  ::cosmwasm::wasm::v1::Params* _internal_mutable_params();

  public:
  // @@protoc_insertion_point(class_scope:cosmwasm.wasm.v1.GenesisState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 4,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GenesisState& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::cosmwasm::wasm::v1::Code > codes_;
    ::google::protobuf::RepeatedPtrField< ::cosmwasm::wasm::v1::Contract > contracts_;
    ::google::protobuf::RepeatedPtrField< ::cosmwasm::wasm::v1::Sequence > sequences_;
    ::cosmwasm::wasm::v1::Params* params_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmwasm_2fwasm_2fv1_2fgenesis_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GenesisState

// .cosmwasm.wasm.v1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool GenesisState::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::cosmwasm::wasm::v1::Params& GenesisState::_internal_params() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmwasm::wasm::v1::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmwasm::wasm::v1::Params&>(::cosmwasm::wasm::v1::_Params_default_instance_);
}
inline const ::cosmwasm::wasm::v1::Params& GenesisState::params() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.GenesisState.params)
  return _internal_params();
}
inline void GenesisState::unsafe_arena_set_allocated_params(::cosmwasm::wasm::v1::Params* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = reinterpret_cast<::cosmwasm::wasm::v1::Params*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmwasm.wasm.v1.GenesisState.params)
}
inline ::cosmwasm::wasm::v1::Params* GenesisState::release_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmwasm::wasm::v1::Params* released = _impl_.params_;
  _impl_.params_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmwasm::wasm::v1::Params* GenesisState::unsafe_arena_release_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.GenesisState.params)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmwasm::wasm::v1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cosmwasm::wasm::v1::Params* GenesisState::_internal_mutable_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.params_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmwasm::wasm::v1::Params>(GetArena());
    _impl_.params_ = reinterpret_cast<::cosmwasm::wasm::v1::Params*>(p);
  }
  return _impl_.params_;
}
inline ::cosmwasm::wasm::v1::Params* GenesisState::mutable_params() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmwasm::wasm::v1::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.GenesisState.params)
  return _msg;
}
inline void GenesisState::set_allocated_params(::cosmwasm::wasm::v1::Params* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.params_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.params_ = reinterpret_cast<::cosmwasm::wasm::v1::Params*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.GenesisState.params)
}

// repeated .cosmwasm.wasm.v1.Code codes = 2 [json_name = "codes", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "codes,omitempty", (.amino.dont_omitempty) = true];
inline int GenesisState::_internal_codes_size() const {
  return _internal_codes().size();
}
inline int GenesisState::codes_size() const {
  return _internal_codes_size();
}
inline void GenesisState::clear_codes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.codes_.Clear();
}
inline ::cosmwasm::wasm::v1::Code* GenesisState::mutable_codes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.GenesisState.codes)
  return _internal_mutable_codes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Code>* GenesisState::mutable_codes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmwasm.wasm.v1.GenesisState.codes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_codes();
}
inline const ::cosmwasm::wasm::v1::Code& GenesisState::codes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.GenesisState.codes)
  return _internal_codes().Get(index);
}
inline ::cosmwasm::wasm::v1::Code* GenesisState::add_codes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmwasm::wasm::v1::Code* _add = _internal_mutable_codes()->Add();
  // @@protoc_insertion_point(field_add:cosmwasm.wasm.v1.GenesisState.codes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Code>& GenesisState::codes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmwasm.wasm.v1.GenesisState.codes)
  return _internal_codes();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Code>&
GenesisState::_internal_codes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.codes_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Code>*
GenesisState::_internal_mutable_codes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.codes_;
}

// repeated .cosmwasm.wasm.v1.Contract contracts = 3 [json_name = "contracts", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "contracts,omitempty", (.amino.dont_omitempty) = true];
inline int GenesisState::_internal_contracts_size() const {
  return _internal_contracts().size();
}
inline int GenesisState::contracts_size() const {
  return _internal_contracts_size();
}
inline void GenesisState::clear_contracts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contracts_.Clear();
}
inline ::cosmwasm::wasm::v1::Contract* GenesisState::mutable_contracts(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.GenesisState.contracts)
  return _internal_mutable_contracts()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Contract>* GenesisState::mutable_contracts()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmwasm.wasm.v1.GenesisState.contracts)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_contracts();
}
inline const ::cosmwasm::wasm::v1::Contract& GenesisState::contracts(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.GenesisState.contracts)
  return _internal_contracts().Get(index);
}
inline ::cosmwasm::wasm::v1::Contract* GenesisState::add_contracts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmwasm::wasm::v1::Contract* _add = _internal_mutable_contracts()->Add();
  // @@protoc_insertion_point(field_add:cosmwasm.wasm.v1.GenesisState.contracts)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Contract>& GenesisState::contracts() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmwasm.wasm.v1.GenesisState.contracts)
  return _internal_contracts();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Contract>&
GenesisState::_internal_contracts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.contracts_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Contract>*
GenesisState::_internal_mutable_contracts() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.contracts_;
}

// repeated .cosmwasm.wasm.v1.Sequence sequences = 4 [json_name = "sequences", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "sequences,omitempty", (.amino.dont_omitempty) = true];
inline int GenesisState::_internal_sequences_size() const {
  return _internal_sequences().size();
}
inline int GenesisState::sequences_size() const {
  return _internal_sequences_size();
}
inline void GenesisState::clear_sequences() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequences_.Clear();
}
inline ::cosmwasm::wasm::v1::Sequence* GenesisState::mutable_sequences(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.GenesisState.sequences)
  return _internal_mutable_sequences()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Sequence>* GenesisState::mutable_sequences()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmwasm.wasm.v1.GenesisState.sequences)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_sequences();
}
inline const ::cosmwasm::wasm::v1::Sequence& GenesisState::sequences(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.GenesisState.sequences)
  return _internal_sequences().Get(index);
}
inline ::cosmwasm::wasm::v1::Sequence* GenesisState::add_sequences() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmwasm::wasm::v1::Sequence* _add = _internal_mutable_sequences()->Add();
  // @@protoc_insertion_point(field_add:cosmwasm.wasm.v1.GenesisState.sequences)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Sequence>& GenesisState::sequences() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmwasm.wasm.v1.GenesisState.sequences)
  return _internal_sequences();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Sequence>&
GenesisState::_internal_sequences() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sequences_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Sequence>*
GenesisState::_internal_mutable_sequences() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.sequences_;
}

// -------------------------------------------------------------------

// Code

// uint64 code_id = 1 [json_name = "codeId", (.gogoproto.customname) = "CodeID"];
inline void Code::clear_code_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_id_ = ::uint64_t{0u};
}
inline ::uint64_t Code::code_id() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.Code.code_id)
  return _internal_code_id();
}
inline void Code::set_code_id(::uint64_t value) {
  _internal_set_code_id(value);
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.Code.code_id)
}
inline ::uint64_t Code::_internal_code_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.code_id_;
}
inline void Code::_internal_set_code_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_id_ = value;
}

// .cosmwasm.wasm.v1.CodeInfo code_info = 2 [json_name = "codeInfo", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool Code::has_code_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.code_info_ != nullptr);
  return value;
}
inline const ::cosmwasm::wasm::v1::CodeInfo& Code::_internal_code_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmwasm::wasm::v1::CodeInfo* p = _impl_.code_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmwasm::wasm::v1::CodeInfo&>(::cosmwasm::wasm::v1::_CodeInfo_default_instance_);
}
inline const ::cosmwasm::wasm::v1::CodeInfo& Code::code_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.Code.code_info)
  return _internal_code_info();
}
inline void Code::unsafe_arena_set_allocated_code_info(::cosmwasm::wasm::v1::CodeInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.code_info_);
  }
  _impl_.code_info_ = reinterpret_cast<::cosmwasm::wasm::v1::CodeInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmwasm.wasm.v1.Code.code_info)
}
inline ::cosmwasm::wasm::v1::CodeInfo* Code::release_code_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmwasm::wasm::v1::CodeInfo* released = _impl_.code_info_;
  _impl_.code_info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmwasm::wasm::v1::CodeInfo* Code::unsafe_arena_release_code_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.Code.code_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmwasm::wasm::v1::CodeInfo* temp = _impl_.code_info_;
  _impl_.code_info_ = nullptr;
  return temp;
}
inline ::cosmwasm::wasm::v1::CodeInfo* Code::_internal_mutable_code_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.code_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmwasm::wasm::v1::CodeInfo>(GetArena());
    _impl_.code_info_ = reinterpret_cast<::cosmwasm::wasm::v1::CodeInfo*>(p);
  }
  return _impl_.code_info_;
}
inline ::cosmwasm::wasm::v1::CodeInfo* Code::mutable_code_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmwasm::wasm::v1::CodeInfo* _msg = _internal_mutable_code_info();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.Code.code_info)
  return _msg;
}
inline void Code::set_allocated_code_info(::cosmwasm::wasm::v1::CodeInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.code_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.code_info_ = reinterpret_cast<::cosmwasm::wasm::v1::CodeInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.Code.code_info)
}

// bytes code_bytes = 3 [json_name = "codeBytes"];
inline void Code::clear_code_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_bytes_.ClearToEmpty();
}
inline const std::string& Code::code_bytes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.Code.code_bytes)
  return _internal_code_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Code::set_code_bytes(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.Code.code_bytes)
}
inline std::string* Code::mutable_code_bytes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_code_bytes();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.Code.code_bytes)
  return _s;
}
inline const std::string& Code::_internal_code_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.code_bytes_.Get();
}
inline void Code::_internal_set_code_bytes(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_bytes_.Set(value, GetArena());
}
inline std::string* Code::_internal_mutable_code_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.code_bytes_.Mutable( GetArena());
}
inline std::string* Code::release_code_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.Code.code_bytes)
  return _impl_.code_bytes_.Release();
}
inline void Code::set_allocated_code_bytes(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_bytes_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.code_bytes_.IsDefault()) {
    _impl_.code_bytes_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.Code.code_bytes)
}

// bool pinned = 4 [json_name = "pinned"];
inline void Code::clear_pinned() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pinned_ = false;
}
inline bool Code::pinned() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.Code.pinned)
  return _internal_pinned();
}
inline void Code::set_pinned(bool value) {
  _internal_set_pinned(value);
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.Code.pinned)
}
inline bool Code::_internal_pinned() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pinned_;
}
inline void Code::_internal_set_pinned(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pinned_ = value;
}

// -------------------------------------------------------------------

// Contract

// string contract_address = 1 [json_name = "contractAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void Contract::clear_contract_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contract_address_.ClearToEmpty();
}
inline const std::string& Contract::contract_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.Contract.contract_address)
  return _internal_contract_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Contract::set_contract_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contract_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.Contract.contract_address)
}
inline std::string* Contract::mutable_contract_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_contract_address();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.Contract.contract_address)
  return _s;
}
inline const std::string& Contract::_internal_contract_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.contract_address_.Get();
}
inline void Contract::_internal_set_contract_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contract_address_.Set(value, GetArena());
}
inline std::string* Contract::_internal_mutable_contract_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.contract_address_.Mutable( GetArena());
}
inline std::string* Contract::release_contract_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.Contract.contract_address)
  return _impl_.contract_address_.Release();
}
inline void Contract::set_allocated_contract_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contract_address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.contract_address_.IsDefault()) {
    _impl_.contract_address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.Contract.contract_address)
}

// .cosmwasm.wasm.v1.ContractInfo contract_info = 2 [json_name = "contractInfo", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool Contract::has_contract_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.contract_info_ != nullptr);
  return value;
}
inline const ::cosmwasm::wasm::v1::ContractInfo& Contract::_internal_contract_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmwasm::wasm::v1::ContractInfo* p = _impl_.contract_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmwasm::wasm::v1::ContractInfo&>(::cosmwasm::wasm::v1::_ContractInfo_default_instance_);
}
inline const ::cosmwasm::wasm::v1::ContractInfo& Contract::contract_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.Contract.contract_info)
  return _internal_contract_info();
}
inline void Contract::unsafe_arena_set_allocated_contract_info(::cosmwasm::wasm::v1::ContractInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.contract_info_);
  }
  _impl_.contract_info_ = reinterpret_cast<::cosmwasm::wasm::v1::ContractInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmwasm.wasm.v1.Contract.contract_info)
}
inline ::cosmwasm::wasm::v1::ContractInfo* Contract::release_contract_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmwasm::wasm::v1::ContractInfo* released = _impl_.contract_info_;
  _impl_.contract_info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmwasm::wasm::v1::ContractInfo* Contract::unsafe_arena_release_contract_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.Contract.contract_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmwasm::wasm::v1::ContractInfo* temp = _impl_.contract_info_;
  _impl_.contract_info_ = nullptr;
  return temp;
}
inline ::cosmwasm::wasm::v1::ContractInfo* Contract::_internal_mutable_contract_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.contract_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmwasm::wasm::v1::ContractInfo>(GetArena());
    _impl_.contract_info_ = reinterpret_cast<::cosmwasm::wasm::v1::ContractInfo*>(p);
  }
  return _impl_.contract_info_;
}
inline ::cosmwasm::wasm::v1::ContractInfo* Contract::mutable_contract_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmwasm::wasm::v1::ContractInfo* _msg = _internal_mutable_contract_info();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.Contract.contract_info)
  return _msg;
}
inline void Contract::set_allocated_contract_info(::cosmwasm::wasm::v1::ContractInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.contract_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.contract_info_ = reinterpret_cast<::cosmwasm::wasm::v1::ContractInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.Contract.contract_info)
}

// repeated .cosmwasm.wasm.v1.Model contract_state = 3 [json_name = "contractState", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int Contract::_internal_contract_state_size() const {
  return _internal_contract_state().size();
}
inline int Contract::contract_state_size() const {
  return _internal_contract_state_size();
}
inline ::cosmwasm::wasm::v1::Model* Contract::mutable_contract_state(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.Contract.contract_state)
  return _internal_mutable_contract_state()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Model>* Contract::mutable_contract_state()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmwasm.wasm.v1.Contract.contract_state)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_contract_state();
}
inline const ::cosmwasm::wasm::v1::Model& Contract::contract_state(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.Contract.contract_state)
  return _internal_contract_state().Get(index);
}
inline ::cosmwasm::wasm::v1::Model* Contract::add_contract_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmwasm::wasm::v1::Model* _add = _internal_mutable_contract_state()->Add();
  // @@protoc_insertion_point(field_add:cosmwasm.wasm.v1.Contract.contract_state)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Model>& Contract::contract_state() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmwasm.wasm.v1.Contract.contract_state)
  return _internal_contract_state();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Model>&
Contract::_internal_contract_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.contract_state_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::Model>*
Contract::_internal_mutable_contract_state() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.contract_state_;
}

// repeated .cosmwasm.wasm.v1.ContractCodeHistoryEntry contract_code_history = 4 [json_name = "contractCodeHistory", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int Contract::_internal_contract_code_history_size() const {
  return _internal_contract_code_history().size();
}
inline int Contract::contract_code_history_size() const {
  return _internal_contract_code_history_size();
}
inline ::cosmwasm::wasm::v1::ContractCodeHistoryEntry* Contract::mutable_contract_code_history(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.Contract.contract_code_history)
  return _internal_mutable_contract_code_history()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::ContractCodeHistoryEntry>* Contract::mutable_contract_code_history()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmwasm.wasm.v1.Contract.contract_code_history)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_contract_code_history();
}
inline const ::cosmwasm::wasm::v1::ContractCodeHistoryEntry& Contract::contract_code_history(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.Contract.contract_code_history)
  return _internal_contract_code_history().Get(index);
}
inline ::cosmwasm::wasm::v1::ContractCodeHistoryEntry* Contract::add_contract_code_history() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmwasm::wasm::v1::ContractCodeHistoryEntry* _add = _internal_mutable_contract_code_history()->Add();
  // @@protoc_insertion_point(field_add:cosmwasm.wasm.v1.Contract.contract_code_history)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::ContractCodeHistoryEntry>& Contract::contract_code_history() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmwasm.wasm.v1.Contract.contract_code_history)
  return _internal_contract_code_history();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::ContractCodeHistoryEntry>&
Contract::_internal_contract_code_history() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.contract_code_history_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmwasm::wasm::v1::ContractCodeHistoryEntry>*
Contract::_internal_mutable_contract_code_history() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.contract_code_history_;
}

// -------------------------------------------------------------------

// Sequence

// bytes id_key = 1 [json_name = "idKey", (.gogoproto.customname) = "IDKey"];
inline void Sequence::clear_id_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_key_.ClearToEmpty();
}
inline const std::string& Sequence::id_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.Sequence.id_key)
  return _internal_id_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Sequence::set_id_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.Sequence.id_key)
}
inline std::string* Sequence::mutable_id_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id_key();
  // @@protoc_insertion_point(field_mutable:cosmwasm.wasm.v1.Sequence.id_key)
  return _s;
}
inline const std::string& Sequence::_internal_id_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_key_.Get();
}
inline void Sequence::_internal_set_id_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_key_.Set(value, GetArena());
}
inline std::string* Sequence::_internal_mutable_id_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_key_.Mutable( GetArena());
}
inline std::string* Sequence::release_id_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmwasm.wasm.v1.Sequence.id_key)
  return _impl_.id_key_.Release();
}
inline void Sequence::set_allocated_id_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_key_.IsDefault()) {
    _impl_.id_key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmwasm.wasm.v1.Sequence.id_key)
}

// uint64 value = 2 [json_name = "value"];
inline void Sequence::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = ::uint64_t{0u};
}
inline ::uint64_t Sequence::value() const {
  // @@protoc_insertion_point(field_get:cosmwasm.wasm.v1.Sequence.value)
  return _internal_value();
}
inline void Sequence::set_value(::uint64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:cosmwasm.wasm.v1.Sequence.value)
}
inline ::uint64_t Sequence::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void Sequence::_internal_set_value(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace wasm
}  // namespace cosmwasm


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmwasm_2fwasm_2fv1_2fgenesis_2eproto_2epb_2eh
