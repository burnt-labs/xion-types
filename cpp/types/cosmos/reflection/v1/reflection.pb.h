// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/reflection/v1/reflection.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2freflection_2fv1_2freflection_2eproto_2epb_2eh
#define cosmos_2freflection_2fv1_2freflection_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/descriptor.pb.h"
#include "cosmos/query/v1/query.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2freflection_2fv1_2freflection_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2freflection_2fv1_2freflection_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2freflection_2fv1_2freflection_2eproto;
namespace cosmos {
namespace reflection {
namespace v1 {
class FileDescriptorsRequest;
struct FileDescriptorsRequestDefaultTypeInternal;
extern FileDescriptorsRequestDefaultTypeInternal _FileDescriptorsRequest_default_instance_;
class FileDescriptorsResponse;
struct FileDescriptorsResponseDefaultTypeInternal;
extern FileDescriptorsResponseDefaultTypeInternal _FileDescriptorsResponse_default_instance_;
}  // namespace v1
}  // namespace reflection
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace reflection {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class FileDescriptorsRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cosmos.reflection.v1.FileDescriptorsRequest) */ {
 public:
  inline FileDescriptorsRequest() : FileDescriptorsRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FileDescriptorsRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FileDescriptorsRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FileDescriptorsRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline FileDescriptorsRequest(const FileDescriptorsRequest& from) : FileDescriptorsRequest(nullptr, from) {}
  inline FileDescriptorsRequest(FileDescriptorsRequest&& from) noexcept
      : FileDescriptorsRequest(nullptr, std::move(from)) {}
  inline FileDescriptorsRequest& operator=(const FileDescriptorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileDescriptorsRequest& operator=(FileDescriptorsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileDescriptorsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileDescriptorsRequest* internal_default_instance() {
    return reinterpret_cast<const FileDescriptorsRequest*>(
        &_FileDescriptorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(FileDescriptorsRequest& a, FileDescriptorsRequest& b) { a.Swap(&b); }
  inline void Swap(FileDescriptorsRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileDescriptorsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileDescriptorsRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<FileDescriptorsRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const FileDescriptorsRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const FileDescriptorsRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.reflection.v1.FileDescriptorsRequest"; }

 protected:
  explicit FileDescriptorsRequest(::google::protobuf::Arena* arena);
  FileDescriptorsRequest(::google::protobuf::Arena* arena, const FileDescriptorsRequest& from);
  FileDescriptorsRequest(::google::protobuf::Arena* arena, FileDescriptorsRequest&& from) noexcept
      : FileDescriptorsRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cosmos.reflection.v1.FileDescriptorsRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FileDescriptorsRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_cosmos_2freflection_2fv1_2freflection_2eproto;
};
// -------------------------------------------------------------------

class FileDescriptorsResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.reflection.v1.FileDescriptorsResponse) */ {
 public:
  inline FileDescriptorsResponse() : FileDescriptorsResponse(nullptr) {}
  ~FileDescriptorsResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FileDescriptorsResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FileDescriptorsResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FileDescriptorsResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline FileDescriptorsResponse(const FileDescriptorsResponse& from) : FileDescriptorsResponse(nullptr, from) {}
  inline FileDescriptorsResponse(FileDescriptorsResponse&& from) noexcept
      : FileDescriptorsResponse(nullptr, std::move(from)) {}
  inline FileDescriptorsResponse& operator=(const FileDescriptorsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileDescriptorsResponse& operator=(FileDescriptorsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileDescriptorsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileDescriptorsResponse* internal_default_instance() {
    return reinterpret_cast<const FileDescriptorsResponse*>(
        &_FileDescriptorsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(FileDescriptorsResponse& a, FileDescriptorsResponse& b) { a.Swap(&b); }
  inline void Swap(FileDescriptorsResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileDescriptorsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileDescriptorsResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FileDescriptorsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileDescriptorsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FileDescriptorsResponse& from) { FileDescriptorsResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FileDescriptorsResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.reflection.v1.FileDescriptorsResponse"; }

 protected:
  explicit FileDescriptorsResponse(::google::protobuf::Arena* arena);
  FileDescriptorsResponse(::google::protobuf::Arena* arena, const FileDescriptorsResponse& from);
  FileDescriptorsResponse(::google::protobuf::Arena* arena, FileDescriptorsResponse&& from) noexcept
      : FileDescriptorsResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilesFieldNumber = 1,
  };
  // repeated .google.protobuf.FileDescriptorProto files = 1 [json_name = "files"];
  int files_size() const;
  private:
  int _internal_files_size() const;

  public:
  void clear_files() ;
  ::google::protobuf::FileDescriptorProto* mutable_files(int index);
  ::google::protobuf::RepeatedPtrField<::google::protobuf::FileDescriptorProto>* mutable_files();

  private:
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::FileDescriptorProto>& _internal_files() const;
  ::google::protobuf::RepeatedPtrField<::google::protobuf::FileDescriptorProto>* _internal_mutable_files();
  public:
  const ::google::protobuf::FileDescriptorProto& files(int index) const;
  ::google::protobuf::FileDescriptorProto* add_files();
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::FileDescriptorProto>& files() const;
  // @@protoc_insertion_point(class_scope:cosmos.reflection.v1.FileDescriptorsResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FileDescriptorsResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::google::protobuf::FileDescriptorProto > files_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2freflection_2fv1_2freflection_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FileDescriptorsRequest

// -------------------------------------------------------------------

// FileDescriptorsResponse

// repeated .google.protobuf.FileDescriptorProto files = 1 [json_name = "files"];
inline int FileDescriptorsResponse::_internal_files_size() const {
  return _internal_files().size();
}
inline int FileDescriptorsResponse::files_size() const {
  return _internal_files_size();
}
inline ::google::protobuf::FileDescriptorProto* FileDescriptorsResponse::mutable_files(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.reflection.v1.FileDescriptorsResponse.files)
  return _internal_mutable_files()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::FileDescriptorProto>* FileDescriptorsResponse::mutable_files()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.reflection.v1.FileDescriptorsResponse.files)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_files();
}
inline const ::google::protobuf::FileDescriptorProto& FileDescriptorsResponse::files(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.reflection.v1.FileDescriptorsResponse.files)
  return _internal_files().Get(index);
}
inline ::google::protobuf::FileDescriptorProto* FileDescriptorsResponse::add_files() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::FileDescriptorProto* _add = _internal_mutable_files()->Add();
  // @@protoc_insertion_point(field_add:cosmos.reflection.v1.FileDescriptorsResponse.files)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::FileDescriptorProto>& FileDescriptorsResponse::files() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.reflection.v1.FileDescriptorsResponse.files)
  return _internal_files();
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::FileDescriptorProto>&
FileDescriptorsResponse::_internal_files() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.files_;
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::FileDescriptorProto>*
FileDescriptorsResponse::_internal_mutable_files() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.files_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace reflection
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2freflection_2fv1_2freflection_2eproto_2epb_2eh
