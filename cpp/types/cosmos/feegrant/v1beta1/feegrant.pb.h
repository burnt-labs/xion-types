// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/feegrant/v1beta1/feegrant.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto_2epb_2eh
#define cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/any.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
#include "amino/amino.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "google/protobuf/duration.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto;
namespace cosmos {
namespace feegrant {
namespace v1beta1 {
class AllowedMsgAllowance;
struct AllowedMsgAllowanceDefaultTypeInternal;
extern AllowedMsgAllowanceDefaultTypeInternal _AllowedMsgAllowance_default_instance_;
class BasicAllowance;
struct BasicAllowanceDefaultTypeInternal;
extern BasicAllowanceDefaultTypeInternal _BasicAllowance_default_instance_;
class Grant;
struct GrantDefaultTypeInternal;
extern GrantDefaultTypeInternal _Grant_default_instance_;
class PeriodicAllowance;
struct PeriodicAllowanceDefaultTypeInternal;
extern PeriodicAllowanceDefaultTypeInternal _PeriodicAllowance_default_instance_;
}  // namespace v1beta1
}  // namespace feegrant
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace feegrant {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class Grant final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.feegrant.v1beta1.Grant) */ {
 public:
  inline Grant() : Grant(nullptr) {}
  ~Grant() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Grant* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Grant));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Grant(
      ::google::protobuf::internal::ConstantInitialized);

  inline Grant(const Grant& from) : Grant(nullptr, from) {}
  inline Grant(Grant&& from) noexcept
      : Grant(nullptr, std::move(from)) {}
  inline Grant& operator=(const Grant& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grant& operator=(Grant&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Grant& default_instance() {
    return *internal_default_instance();
  }
  static inline const Grant* internal_default_instance() {
    return reinterpret_cast<const Grant*>(
        &_Grant_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Grant& a, Grant& b) { a.Swap(&b); }
  inline void Swap(Grant* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Grant* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Grant* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Grant>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Grant& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Grant& from) { Grant::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Grant* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.feegrant.v1beta1.Grant"; }

 protected:
  explicit Grant(::google::protobuf::Arena* arena);
  Grant(::google::protobuf::Arena* arena, const Grant& from);
  Grant(::google::protobuf::Arena* arena, Grant&& from) noexcept
      : Grant(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGranterFieldNumber = 1,
    kGranteeFieldNumber = 2,
    kAllowanceFieldNumber = 3,
  };
  // string granter = 1 [json_name = "granter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_granter() ;
  const std::string& granter() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_granter(Arg_&& arg, Args_... args);
  std::string* mutable_granter();
  PROTOBUF_NODISCARD std::string* release_granter();
  void set_allocated_granter(std::string* value);

  private:
  const std::string& _internal_granter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_granter(
      const std::string& value);
  std::string* _internal_mutable_granter();

  public:
  // string grantee = 2 [json_name = "grantee", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_grantee() ;
  const std::string& grantee() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_grantee(Arg_&& arg, Args_... args);
  std::string* mutable_grantee();
  PROTOBUF_NODISCARD std::string* release_grantee();
  void set_allocated_grantee(std::string* value);

  private:
  const std::string& _internal_grantee() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_grantee(
      const std::string& value);
  std::string* _internal_mutable_grantee();

  public:
  // .google.protobuf.Any allowance = 3 [json_name = "allowance", (.cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
  bool has_allowance() const;
  void clear_allowance() ;
  const ::google::protobuf::Any& allowance() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_allowance();
  ::google::protobuf::Any* mutable_allowance();
  void set_allocated_allowance(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_allowance(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_allowance();

  private:
  const ::google::protobuf::Any& _internal_allowance() const;
  ::google::protobuf::Any* _internal_mutable_allowance();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.feegrant.v1beta1.Grant)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Grant& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr granter_;
    ::google::protobuf::internal::ArenaStringPtr grantee_;
    ::google::protobuf::Any* allowance_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto;
};
// -------------------------------------------------------------------

class BasicAllowance final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.feegrant.v1beta1.BasicAllowance) */ {
 public:
  inline BasicAllowance() : BasicAllowance(nullptr) {}
  ~BasicAllowance() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BasicAllowance* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BasicAllowance));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BasicAllowance(
      ::google::protobuf::internal::ConstantInitialized);

  inline BasicAllowance(const BasicAllowance& from) : BasicAllowance(nullptr, from) {}
  inline BasicAllowance(BasicAllowance&& from) noexcept
      : BasicAllowance(nullptr, std::move(from)) {}
  inline BasicAllowance& operator=(const BasicAllowance& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasicAllowance& operator=(BasicAllowance&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BasicAllowance& default_instance() {
    return *internal_default_instance();
  }
  static inline const BasicAllowance* internal_default_instance() {
    return reinterpret_cast<const BasicAllowance*>(
        &_BasicAllowance_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(BasicAllowance& a, BasicAllowance& b) { a.Swap(&b); }
  inline void Swap(BasicAllowance* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BasicAllowance* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BasicAllowance* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BasicAllowance>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BasicAllowance& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BasicAllowance& from) { BasicAllowance::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BasicAllowance* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.feegrant.v1beta1.BasicAllowance"; }

 protected:
  explicit BasicAllowance(::google::protobuf::Arena* arena);
  BasicAllowance(::google::protobuf::Arena* arena, const BasicAllowance& from);
  BasicAllowance(::google::protobuf::Arena* arena, BasicAllowance&& from) noexcept
      : BasicAllowance(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSpendLimitFieldNumber = 1,
    kExpirationFieldNumber = 2,
  };
  // repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
  int spend_limit_size() const;
  private:
  int _internal_spend_limit_size() const;

  public:
  void clear_spend_limit() ;
  ::cosmos::base::v1beta1::Coin* mutable_spend_limit(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* mutable_spend_limit();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_spend_limit() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_spend_limit();
  public:
  const ::cosmos::base::v1beta1::Coin& spend_limit(int index) const;
  ::cosmos::base::v1beta1::Coin* add_spend_limit();
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& spend_limit() const;
  // .google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.stdtime) = true];
  bool has_expiration() const;
  void clear_expiration() ;
  const ::google::protobuf::Timestamp& expiration() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_expiration();
  ::google::protobuf::Timestamp* mutable_expiration();
  void set_allocated_expiration(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_expiration(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_expiration();

  private:
  const ::google::protobuf::Timestamp& _internal_expiration() const;
  ::google::protobuf::Timestamp* _internal_mutable_expiration();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.feegrant.v1beta1.BasicAllowance)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BasicAllowance& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > spend_limit_;
    ::google::protobuf::Timestamp* expiration_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto;
};
// -------------------------------------------------------------------

class AllowedMsgAllowance final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.feegrant.v1beta1.AllowedMsgAllowance) */ {
 public:
  inline AllowedMsgAllowance() : AllowedMsgAllowance(nullptr) {}
  ~AllowedMsgAllowance() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AllowedMsgAllowance* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AllowedMsgAllowance));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AllowedMsgAllowance(
      ::google::protobuf::internal::ConstantInitialized);

  inline AllowedMsgAllowance(const AllowedMsgAllowance& from) : AllowedMsgAllowance(nullptr, from) {}
  inline AllowedMsgAllowance(AllowedMsgAllowance&& from) noexcept
      : AllowedMsgAllowance(nullptr, std::move(from)) {}
  inline AllowedMsgAllowance& operator=(const AllowedMsgAllowance& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllowedMsgAllowance& operator=(AllowedMsgAllowance&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllowedMsgAllowance& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllowedMsgAllowance* internal_default_instance() {
    return reinterpret_cast<const AllowedMsgAllowance*>(
        &_AllowedMsgAllowance_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(AllowedMsgAllowance& a, AllowedMsgAllowance& b) { a.Swap(&b); }
  inline void Swap(AllowedMsgAllowance* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllowedMsgAllowance* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllowedMsgAllowance* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AllowedMsgAllowance>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AllowedMsgAllowance& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AllowedMsgAllowance& from) { AllowedMsgAllowance::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AllowedMsgAllowance* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.feegrant.v1beta1.AllowedMsgAllowance"; }

 protected:
  explicit AllowedMsgAllowance(::google::protobuf::Arena* arena);
  AllowedMsgAllowance(::google::protobuf::Arena* arena, const AllowedMsgAllowance& from);
  AllowedMsgAllowance(::google::protobuf::Arena* arena, AllowedMsgAllowance&& from) noexcept
      : AllowedMsgAllowance(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAllowedMessagesFieldNumber = 2,
    kAllowanceFieldNumber = 1,
  };
  // repeated string allowed_messages = 2 [json_name = "allowedMessages"];
  int allowed_messages_size() const;
  private:
  int _internal_allowed_messages_size() const;

  public:
  void clear_allowed_messages() ;
  const std::string& allowed_messages(int index) const;
  std::string* mutable_allowed_messages(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_allowed_messages(int index, Arg_&& value, Args_... args);
  std::string* add_allowed_messages();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_allowed_messages(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& allowed_messages() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_allowed_messages();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_allowed_messages() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_allowed_messages();

  public:
  // .google.protobuf.Any allowance = 1 [json_name = "allowance", (.cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
  bool has_allowance() const;
  void clear_allowance() ;
  const ::google::protobuf::Any& allowance() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_allowance();
  ::google::protobuf::Any* mutable_allowance();
  void set_allocated_allowance(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_allowance(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_allowance();

  private:
  const ::google::protobuf::Any& _internal_allowance() const;
  ::google::protobuf::Any* _internal_mutable_allowance();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.feegrant.v1beta1.AllowedMsgAllowance)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      68, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AllowedMsgAllowance& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> allowed_messages_;
    ::google::protobuf::Any* allowance_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto;
};
// -------------------------------------------------------------------

class PeriodicAllowance final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.feegrant.v1beta1.PeriodicAllowance) */ {
 public:
  inline PeriodicAllowance() : PeriodicAllowance(nullptr) {}
  ~PeriodicAllowance() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PeriodicAllowance* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PeriodicAllowance));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PeriodicAllowance(
      ::google::protobuf::internal::ConstantInitialized);

  inline PeriodicAllowance(const PeriodicAllowance& from) : PeriodicAllowance(nullptr, from) {}
  inline PeriodicAllowance(PeriodicAllowance&& from) noexcept
      : PeriodicAllowance(nullptr, std::move(from)) {}
  inline PeriodicAllowance& operator=(const PeriodicAllowance& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeriodicAllowance& operator=(PeriodicAllowance&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PeriodicAllowance& default_instance() {
    return *internal_default_instance();
  }
  static inline const PeriodicAllowance* internal_default_instance() {
    return reinterpret_cast<const PeriodicAllowance*>(
        &_PeriodicAllowance_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(PeriodicAllowance& a, PeriodicAllowance& b) { a.Swap(&b); }
  inline void Swap(PeriodicAllowance* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeriodicAllowance* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PeriodicAllowance* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PeriodicAllowance>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PeriodicAllowance& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PeriodicAllowance& from) { PeriodicAllowance::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PeriodicAllowance* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.feegrant.v1beta1.PeriodicAllowance"; }

 protected:
  explicit PeriodicAllowance(::google::protobuf::Arena* arena);
  PeriodicAllowance(::google::protobuf::Arena* arena, const PeriodicAllowance& from);
  PeriodicAllowance(::google::protobuf::Arena* arena, PeriodicAllowance&& from) noexcept
      : PeriodicAllowance(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPeriodSpendLimitFieldNumber = 3,
    kPeriodCanSpendFieldNumber = 4,
    kBasicFieldNumber = 1,
    kPeriodFieldNumber = 2,
    kPeriodResetFieldNumber = 5,
  };
  // repeated .cosmos.base.v1beta1.Coin period_spend_limit = 3 [json_name = "periodSpendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
  int period_spend_limit_size() const;
  private:
  int _internal_period_spend_limit_size() const;

  public:
  void clear_period_spend_limit() ;
  ::cosmos::base::v1beta1::Coin* mutable_period_spend_limit(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* mutable_period_spend_limit();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_period_spend_limit() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_period_spend_limit();
  public:
  const ::cosmos::base::v1beta1::Coin& period_spend_limit(int index) const;
  ::cosmos::base::v1beta1::Coin* add_period_spend_limit();
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& period_spend_limit() const;
  // repeated .cosmos.base.v1beta1.Coin period_can_spend = 4 [json_name = "periodCanSpend", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
  int period_can_spend_size() const;
  private:
  int _internal_period_can_spend_size() const;

  public:
  void clear_period_can_spend() ;
  ::cosmos::base::v1beta1::Coin* mutable_period_can_spend(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* mutable_period_can_spend();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_period_can_spend() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_period_can_spend();
  public:
  const ::cosmos::base::v1beta1::Coin& period_can_spend(int index) const;
  ::cosmos::base::v1beta1::Coin* add_period_can_spend();
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& period_can_spend() const;
  // .cosmos.feegrant.v1beta1.BasicAllowance basic = 1 [json_name = "basic", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_basic() const;
  void clear_basic() ;
  const ::cosmos::feegrant::v1beta1::BasicAllowance& basic() const;
  PROTOBUF_NODISCARD ::cosmos::feegrant::v1beta1::BasicAllowance* release_basic();
  ::cosmos::feegrant::v1beta1::BasicAllowance* mutable_basic();
  void set_allocated_basic(::cosmos::feegrant::v1beta1::BasicAllowance* value);
  void unsafe_arena_set_allocated_basic(::cosmos::feegrant::v1beta1::BasicAllowance* value);
  ::cosmos::feegrant::v1beta1::BasicAllowance* unsafe_arena_release_basic();

  private:
  const ::cosmos::feegrant::v1beta1::BasicAllowance& _internal_basic() const;
  ::cosmos::feegrant::v1beta1::BasicAllowance* _internal_mutable_basic();

  public:
  // .google.protobuf.Duration period = 2 [json_name = "period", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];
  bool has_period() const;
  void clear_period() ;
  const ::google::protobuf::Duration& period() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_period();
  ::google::protobuf::Duration* mutable_period();
  void set_allocated_period(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_period(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_period();

  private:
  const ::google::protobuf::Duration& _internal_period() const;
  ::google::protobuf::Duration* _internal_mutable_period();

  public:
  // .google.protobuf.Timestamp period_reset = 5 [json_name = "periodReset", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  bool has_period_reset() const;
  void clear_period_reset() ;
  const ::google::protobuf::Timestamp& period_reset() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_period_reset();
  ::google::protobuf::Timestamp* mutable_period_reset();
  void set_allocated_period_reset(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_period_reset(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_period_reset();

  private:
  const ::google::protobuf::Timestamp& _internal_period_reset() const;
  ::google::protobuf::Timestamp* _internal_mutable_period_reset();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.feegrant.v1beta1.PeriodicAllowance)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 5,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PeriodicAllowance& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > period_spend_limit_;
    ::google::protobuf::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > period_can_spend_;
    ::cosmos::feegrant::v1beta1::BasicAllowance* basic_;
    ::google::protobuf::Duration* period_;
    ::google::protobuf::Timestamp* period_reset_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BasicAllowance

// repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
inline int BasicAllowance::_internal_spend_limit_size() const {
  return _internal_spend_limit().size();
}
inline int BasicAllowance::spend_limit_size() const {
  return _internal_spend_limit_size();
}
inline ::cosmos::base::v1beta1::Coin* BasicAllowance::mutable_spend_limit(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.BasicAllowance.spend_limit)
  return _internal_mutable_spend_limit()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* BasicAllowance::mutable_spend_limit()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.feegrant.v1beta1.BasicAllowance.spend_limit)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_spend_limit();
}
inline const ::cosmos::base::v1beta1::Coin& BasicAllowance::spend_limit(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.BasicAllowance.spend_limit)
  return _internal_spend_limit().Get(index);
}
inline ::cosmos::base::v1beta1::Coin* BasicAllowance::add_spend_limit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::base::v1beta1::Coin* _add = _internal_mutable_spend_limit()->Add();
  // @@protoc_insertion_point(field_add:cosmos.feegrant.v1beta1.BasicAllowance.spend_limit)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& BasicAllowance::spend_limit() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.feegrant.v1beta1.BasicAllowance.spend_limit)
  return _internal_spend_limit();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
BasicAllowance::_internal_spend_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.spend_limit_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
BasicAllowance::_internal_mutable_spend_limit() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.spend_limit_;
}

// .google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.stdtime) = true];
inline bool BasicAllowance::has_expiration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.expiration_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& BasicAllowance::_internal_expiration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.expiration_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& BasicAllowance::expiration() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.BasicAllowance.expiration)
  return _internal_expiration();
}
inline void BasicAllowance::unsafe_arena_set_allocated_expiration(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expiration_);
  }
  _impl_.expiration_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.feegrant.v1beta1.BasicAllowance.expiration)
}
inline ::google::protobuf::Timestamp* BasicAllowance::release_expiration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.expiration_;
  _impl_.expiration_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* BasicAllowance::unsafe_arena_release_expiration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.feegrant.v1beta1.BasicAllowance.expiration)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.expiration_;
  _impl_.expiration_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* BasicAllowance::_internal_mutable_expiration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.expiration_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.expiration_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.expiration_;
}
inline ::google::protobuf::Timestamp* BasicAllowance::mutable_expiration() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_expiration();
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.BasicAllowance.expiration)
  return _msg;
}
inline void BasicAllowance::set_allocated_expiration(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expiration_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.expiration_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.feegrant.v1beta1.BasicAllowance.expiration)
}

// -------------------------------------------------------------------

// PeriodicAllowance

// .cosmos.feegrant.v1beta1.BasicAllowance basic = 1 [json_name = "basic", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool PeriodicAllowance::has_basic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.basic_ != nullptr);
  return value;
}
inline void PeriodicAllowance::clear_basic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.basic_ != nullptr) _impl_.basic_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::feegrant::v1beta1::BasicAllowance& PeriodicAllowance::_internal_basic() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::feegrant::v1beta1::BasicAllowance* p = _impl_.basic_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::feegrant::v1beta1::BasicAllowance&>(::cosmos::feegrant::v1beta1::_BasicAllowance_default_instance_);
}
inline const ::cosmos::feegrant::v1beta1::BasicAllowance& PeriodicAllowance::basic() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.PeriodicAllowance.basic)
  return _internal_basic();
}
inline void PeriodicAllowance::unsafe_arena_set_allocated_basic(::cosmos::feegrant::v1beta1::BasicAllowance* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.basic_);
  }
  _impl_.basic_ = reinterpret_cast<::cosmos::feegrant::v1beta1::BasicAllowance*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.feegrant.v1beta1.PeriodicAllowance.basic)
}
inline ::cosmos::feegrant::v1beta1::BasicAllowance* PeriodicAllowance::release_basic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::feegrant::v1beta1::BasicAllowance* released = _impl_.basic_;
  _impl_.basic_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::feegrant::v1beta1::BasicAllowance* PeriodicAllowance::unsafe_arena_release_basic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.feegrant.v1beta1.PeriodicAllowance.basic)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::feegrant::v1beta1::BasicAllowance* temp = _impl_.basic_;
  _impl_.basic_ = nullptr;
  return temp;
}
inline ::cosmos::feegrant::v1beta1::BasicAllowance* PeriodicAllowance::_internal_mutable_basic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.basic_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::feegrant::v1beta1::BasicAllowance>(GetArena());
    _impl_.basic_ = reinterpret_cast<::cosmos::feegrant::v1beta1::BasicAllowance*>(p);
  }
  return _impl_.basic_;
}
inline ::cosmos::feegrant::v1beta1::BasicAllowance* PeriodicAllowance::mutable_basic() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::feegrant::v1beta1::BasicAllowance* _msg = _internal_mutable_basic();
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.PeriodicAllowance.basic)
  return _msg;
}
inline void PeriodicAllowance::set_allocated_basic(::cosmos::feegrant::v1beta1::BasicAllowance* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.basic_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.basic_ = reinterpret_cast<::cosmos::feegrant::v1beta1::BasicAllowance*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.feegrant.v1beta1.PeriodicAllowance.basic)
}

// .google.protobuf.Duration period = 2 [json_name = "period", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];
inline bool PeriodicAllowance::has_period() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.period_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& PeriodicAllowance::_internal_period() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Duration* p = _impl_.period_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& PeriodicAllowance::period() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.PeriodicAllowance.period)
  return _internal_period();
}
inline void PeriodicAllowance::unsafe_arena_set_allocated_period(::google::protobuf::Duration* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.period_);
  }
  _impl_.period_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.feegrant.v1beta1.PeriodicAllowance.period)
}
inline ::google::protobuf::Duration* PeriodicAllowance::release_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Duration* released = _impl_.period_;
  _impl_.period_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Duration* PeriodicAllowance::unsafe_arena_release_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.feegrant.v1beta1.PeriodicAllowance.period)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Duration* temp = _impl_.period_;
  _impl_.period_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* PeriodicAllowance::_internal_mutable_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.period_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Duration>(GetArena());
    _impl_.period_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.period_;
}
inline ::google::protobuf::Duration* PeriodicAllowance::mutable_period() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Duration* _msg = _internal_mutable_period();
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.PeriodicAllowance.period)
  return _msg;
}
inline void PeriodicAllowance::set_allocated_period(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.period_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.period_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.feegrant.v1beta1.PeriodicAllowance.period)
}

// repeated .cosmos.base.v1beta1.Coin period_spend_limit = 3 [json_name = "periodSpendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
inline int PeriodicAllowance::_internal_period_spend_limit_size() const {
  return _internal_period_spend_limit().size();
}
inline int PeriodicAllowance::period_spend_limit_size() const {
  return _internal_period_spend_limit_size();
}
inline ::cosmos::base::v1beta1::Coin* PeriodicAllowance::mutable_period_spend_limit(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.PeriodicAllowance.period_spend_limit)
  return _internal_mutable_period_spend_limit()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* PeriodicAllowance::mutable_period_spend_limit()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.feegrant.v1beta1.PeriodicAllowance.period_spend_limit)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_period_spend_limit();
}
inline const ::cosmos::base::v1beta1::Coin& PeriodicAllowance::period_spend_limit(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.PeriodicAllowance.period_spend_limit)
  return _internal_period_spend_limit().Get(index);
}
inline ::cosmos::base::v1beta1::Coin* PeriodicAllowance::add_period_spend_limit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::base::v1beta1::Coin* _add = _internal_mutable_period_spend_limit()->Add();
  // @@protoc_insertion_point(field_add:cosmos.feegrant.v1beta1.PeriodicAllowance.period_spend_limit)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& PeriodicAllowance::period_spend_limit() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.feegrant.v1beta1.PeriodicAllowance.period_spend_limit)
  return _internal_period_spend_limit();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
PeriodicAllowance::_internal_period_spend_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.period_spend_limit_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
PeriodicAllowance::_internal_mutable_period_spend_limit() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.period_spend_limit_;
}

// repeated .cosmos.base.v1beta1.Coin period_can_spend = 4 [json_name = "periodCanSpend", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
inline int PeriodicAllowance::_internal_period_can_spend_size() const {
  return _internal_period_can_spend().size();
}
inline int PeriodicAllowance::period_can_spend_size() const {
  return _internal_period_can_spend_size();
}
inline ::cosmos::base::v1beta1::Coin* PeriodicAllowance::mutable_period_can_spend(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.PeriodicAllowance.period_can_spend)
  return _internal_mutable_period_can_spend()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* PeriodicAllowance::mutable_period_can_spend()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.feegrant.v1beta1.PeriodicAllowance.period_can_spend)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_period_can_spend();
}
inline const ::cosmos::base::v1beta1::Coin& PeriodicAllowance::period_can_spend(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.PeriodicAllowance.period_can_spend)
  return _internal_period_can_spend().Get(index);
}
inline ::cosmos::base::v1beta1::Coin* PeriodicAllowance::add_period_can_spend() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::base::v1beta1::Coin* _add = _internal_mutable_period_can_spend()->Add();
  // @@protoc_insertion_point(field_add:cosmos.feegrant.v1beta1.PeriodicAllowance.period_can_spend)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& PeriodicAllowance::period_can_spend() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.feegrant.v1beta1.PeriodicAllowance.period_can_spend)
  return _internal_period_can_spend();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
PeriodicAllowance::_internal_period_can_spend() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.period_can_spend_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
PeriodicAllowance::_internal_mutable_period_can_spend() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.period_can_spend_;
}

// .google.protobuf.Timestamp period_reset = 5 [json_name = "periodReset", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
inline bool PeriodicAllowance::has_period_reset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.period_reset_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& PeriodicAllowance::_internal_period_reset() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.period_reset_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& PeriodicAllowance::period_reset() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.PeriodicAllowance.period_reset)
  return _internal_period_reset();
}
inline void PeriodicAllowance::unsafe_arena_set_allocated_period_reset(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.period_reset_);
  }
  _impl_.period_reset_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.feegrant.v1beta1.PeriodicAllowance.period_reset)
}
inline ::google::protobuf::Timestamp* PeriodicAllowance::release_period_reset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* released = _impl_.period_reset_;
  _impl_.period_reset_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* PeriodicAllowance::unsafe_arena_release_period_reset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.feegrant.v1beta1.PeriodicAllowance.period_reset)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* temp = _impl_.period_reset_;
  _impl_.period_reset_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* PeriodicAllowance::_internal_mutable_period_reset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.period_reset_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.period_reset_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.period_reset_;
}
inline ::google::protobuf::Timestamp* PeriodicAllowance::mutable_period_reset() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_period_reset();
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.PeriodicAllowance.period_reset)
  return _msg;
}
inline void PeriodicAllowance::set_allocated_period_reset(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.period_reset_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.period_reset_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.feegrant.v1beta1.PeriodicAllowance.period_reset)
}

// -------------------------------------------------------------------

// AllowedMsgAllowance

// .google.protobuf.Any allowance = 1 [json_name = "allowance", (.cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
inline bool AllowedMsgAllowance::has_allowance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.allowance_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& AllowedMsgAllowance::_internal_allowance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Any* p = _impl_.allowance_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& AllowedMsgAllowance::allowance() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowance)
  return _internal_allowance();
}
inline void AllowedMsgAllowance::unsafe_arena_set_allocated_allowance(::google::protobuf::Any* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.allowance_);
  }
  _impl_.allowance_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowance)
}
inline ::google::protobuf::Any* AllowedMsgAllowance::release_allowance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* released = _impl_.allowance_;
  _impl_.allowance_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Any* AllowedMsgAllowance::unsafe_arena_release_allowance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowance)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* temp = _impl_.allowance_;
  _impl_.allowance_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* AllowedMsgAllowance::_internal_mutable_allowance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.allowance_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Any>(GetArena());
    _impl_.allowance_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.allowance_;
}
inline ::google::protobuf::Any* AllowedMsgAllowance::mutable_allowance() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Any* _msg = _internal_mutable_allowance();
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowance)
  return _msg;
}
inline void AllowedMsgAllowance::set_allocated_allowance(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.allowance_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.allowance_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowance)
}

// repeated string allowed_messages = 2 [json_name = "allowedMessages"];
inline int AllowedMsgAllowance::_internal_allowed_messages_size() const {
  return _internal_allowed_messages().size();
}
inline int AllowedMsgAllowance::allowed_messages_size() const {
  return _internal_allowed_messages_size();
}
inline void AllowedMsgAllowance::clear_allowed_messages() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allowed_messages_.Clear();
}
inline std::string* AllowedMsgAllowance::add_allowed_messages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_allowed_messages()->Add();
  // @@protoc_insertion_point(field_add_mutable:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowed_messages)
  return _s;
}
inline const std::string& AllowedMsgAllowance::allowed_messages(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowed_messages)
  return _internal_allowed_messages().Get(index);
}
inline std::string* AllowedMsgAllowance::mutable_allowed_messages(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowed_messages)
  return _internal_mutable_allowed_messages()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void AllowedMsgAllowance::set_allowed_messages(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_allowed_messages()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowed_messages)
}
template <typename Arg_, typename... Args_>
inline void AllowedMsgAllowance::add_allowed_messages(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_allowed_messages(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowed_messages)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AllowedMsgAllowance::allowed_messages() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowed_messages)
  return _internal_allowed_messages();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AllowedMsgAllowance::mutable_allowed_messages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowed_messages)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_allowed_messages();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AllowedMsgAllowance::_internal_allowed_messages() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allowed_messages_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AllowedMsgAllowance::_internal_mutable_allowed_messages() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.allowed_messages_;
}

// -------------------------------------------------------------------

// Grant

// string granter = 1 [json_name = "granter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void Grant::clear_granter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.granter_.ClearToEmpty();
}
inline const std::string& Grant::granter() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.Grant.granter)
  return _internal_granter();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Grant::set_granter(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.granter_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.feegrant.v1beta1.Grant.granter)
}
inline std::string* Grant::mutable_granter() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_granter();
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.Grant.granter)
  return _s;
}
inline const std::string& Grant::_internal_granter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.granter_.Get();
}
inline void Grant::_internal_set_granter(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.granter_.Set(value, GetArena());
}
inline std::string* Grant::_internal_mutable_granter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.granter_.Mutable( GetArena());
}
inline std::string* Grant::release_granter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.feegrant.v1beta1.Grant.granter)
  return _impl_.granter_.Release();
}
inline void Grant::set_allocated_granter(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.granter_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.granter_.IsDefault()) {
    _impl_.granter_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.feegrant.v1beta1.Grant.granter)
}

// string grantee = 2 [json_name = "grantee", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void Grant::clear_grantee() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.grantee_.ClearToEmpty();
}
inline const std::string& Grant::grantee() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.Grant.grantee)
  return _internal_grantee();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Grant::set_grantee(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.grantee_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.feegrant.v1beta1.Grant.grantee)
}
inline std::string* Grant::mutable_grantee() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_grantee();
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.Grant.grantee)
  return _s;
}
inline const std::string& Grant::_internal_grantee() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.grantee_.Get();
}
inline void Grant::_internal_set_grantee(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.grantee_.Set(value, GetArena());
}
inline std::string* Grant::_internal_mutable_grantee() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.grantee_.Mutable( GetArena());
}
inline std::string* Grant::release_grantee() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.feegrant.v1beta1.Grant.grantee)
  return _impl_.grantee_.Release();
}
inline void Grant::set_allocated_grantee(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.grantee_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.grantee_.IsDefault()) {
    _impl_.grantee_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.feegrant.v1beta1.Grant.grantee)
}

// .google.protobuf.Any allowance = 3 [json_name = "allowance", (.cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
inline bool Grant::has_allowance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.allowance_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& Grant::_internal_allowance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Any* p = _impl_.allowance_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& Grant::allowance() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.Grant.allowance)
  return _internal_allowance();
}
inline void Grant::unsafe_arena_set_allocated_allowance(::google::protobuf::Any* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.allowance_);
  }
  _impl_.allowance_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.feegrant.v1beta1.Grant.allowance)
}
inline ::google::protobuf::Any* Grant::release_allowance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* released = _impl_.allowance_;
  _impl_.allowance_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Any* Grant::unsafe_arena_release_allowance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.feegrant.v1beta1.Grant.allowance)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* temp = _impl_.allowance_;
  _impl_.allowance_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* Grant::_internal_mutable_allowance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.allowance_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Any>(GetArena());
    _impl_.allowance_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.allowance_;
}
inline ::google::protobuf::Any* Grant::mutable_allowance() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Any* _msg = _internal_mutable_allowance();
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.Grant.allowance)
  return _msg;
}
inline void Grant::set_allocated_allowance(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.allowance_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.allowance_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.feegrant.v1beta1.Grant.allowance)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace feegrant
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto_2epb_2eh
