// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/feegrant/v1beta1/feegrant.proto
// Protobuf C++ Version: 5.29.4

#include "cosmos/feegrant/v1beta1/feegrant.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace cosmos {
namespace feegrant {
namespace v1beta1 {

inline constexpr Grant::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        granter_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        grantee_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        allowance_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Grant::Grant(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GrantDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GrantDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GrantDefaultTypeInternal() {}
  union {
    Grant _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GrantDefaultTypeInternal _Grant_default_instance_;

inline constexpr BasicAllowance::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        spend_limit_{},
        expiration_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR BasicAllowance::BasicAllowance(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BasicAllowanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BasicAllowanceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BasicAllowanceDefaultTypeInternal() {}
  union {
    BasicAllowance _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BasicAllowanceDefaultTypeInternal _BasicAllowance_default_instance_;

inline constexpr AllowedMsgAllowance::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        allowed_messages_{},
        allowance_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AllowedMsgAllowance::AllowedMsgAllowance(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AllowedMsgAllowanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllowedMsgAllowanceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllowedMsgAllowanceDefaultTypeInternal() {}
  union {
    AllowedMsgAllowance _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllowedMsgAllowanceDefaultTypeInternal _AllowedMsgAllowance_default_instance_;

inline constexpr PeriodicAllowance::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        period_spend_limit_{},
        period_can_spend_{},
        basic_{nullptr},
        period_{nullptr},
        period_reset_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PeriodicAllowance::PeriodicAllowance(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PeriodicAllowanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeriodicAllowanceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeriodicAllowanceDefaultTypeInternal() {}
  union {
    PeriodicAllowance _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeriodicAllowanceDefaultTypeInternal _PeriodicAllowance_default_instance_;
}  // namespace v1beta1
}  // namespace feegrant
}  // namespace cosmos
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto = nullptr;
const ::uint32_t
    TableStruct_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::BasicAllowance, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::BasicAllowance, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::BasicAllowance, _impl_.spend_limit_),
        PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::BasicAllowance, _impl_.expiration_),
        ~0u,
        0,
        PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::PeriodicAllowance, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::PeriodicAllowance, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::PeriodicAllowance, _impl_.basic_),
        PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::PeriodicAllowance, _impl_.period_),
        PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::PeriodicAllowance, _impl_.period_spend_limit_),
        PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::PeriodicAllowance, _impl_.period_can_spend_),
        PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::PeriodicAllowance, _impl_.period_reset_),
        0,
        1,
        ~0u,
        ~0u,
        2,
        PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::AllowedMsgAllowance, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::AllowedMsgAllowance, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::AllowedMsgAllowance, _impl_.allowance_),
        PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::AllowedMsgAllowance, _impl_.allowed_messages_),
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::Grant, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::Grant, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::Grant, _impl_.granter_),
        PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::Grant, _impl_.grantee_),
        PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::Grant, _impl_.allowance_),
        ~0u,
        ~0u,
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::cosmos::feegrant::v1beta1::BasicAllowance)},
        {12, 25, -1, sizeof(::cosmos::feegrant::v1beta1::PeriodicAllowance)},
        {30, 40, -1, sizeof(::cosmos::feegrant::v1beta1::AllowedMsgAllowance)},
        {42, 53, -1, sizeof(::cosmos::feegrant::v1beta1::Grant)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::feegrant::v1beta1::_BasicAllowance_default_instance_._instance,
    &::cosmos::feegrant::v1beta1::_PeriodicAllowance_default_instance_._instance,
    &::cosmos::feegrant::v1beta1::_AllowedMsgAllowance_default_instance_._instance,
    &::cosmos::feegrant::v1beta1::_Grant_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n&cosmos/feegrant/v1beta1/feegrant.proto"
    "\022\027cosmos.feegrant.v1beta1\032\024gogoproto/gog"
    "o.proto\032\031google/protobuf/any.proto\032\031cosm"
    "os_proto/cosmos.proto\032\036cosmos/base/v1bet"
    "a1/coin.proto\032\021amino/amino.proto\032\037google"
    "/protobuf/timestamp.proto\032\036google/protob"
    "uf/duration.proto\"\240\002\n\016BasicAllowance\022\202\001\n"
    "\013spend_limit\030\001 \003(\0132\031.cosmos.base.v1beta1"
    ".CoinBF\310\336\037\000\252\337\037(github.com/cosmos/cosmos-"
    "sdk/types.Coins\232\347\260*\014legacy_coins\250\347\260*\001R\ns"
    "pendLimit\022@\n\nexpiration\030\002 \001(\0132\032.google.p"
    "rotobuf.TimestampB\004\220\337\037\001R\nexpiration:G\312\264-"
    "%cosmos.feegrant.v1beta1.FeeAllowanceI\212\347"
    "\260*\031cosmos-sdk/BasicAllowance\"\331\004\n\021Periodi"
    "cAllowance\022H\n\005basic\030\001 \001(\0132\'.cosmos.feegr"
    "ant.v1beta1.BasicAllowanceB\t\310\336\037\000\250\347\260*\001R\005b"
    "asic\022@\n\006period\030\002 \001(\0132\031.google.protobuf.D"
    "urationB\r\310\336\037\000\230\337\037\001\250\347\260*\001R\006period\022\217\001\n\022perio"
    "d_spend_limit\030\003 \003(\0132\031.cosmos.base.v1beta"
    "1.CoinBF\310\336\037\000\252\337\037(github.com/cosmos/cosmos"
    "-sdk/types.Coins\232\347\260*\014legacy_coins\250\347\260*\001R\020"
    "periodSpendLimit\022\213\001\n\020period_can_spend\030\004 "
    "\003(\0132\031.cosmos.base.v1beta1.CoinBF\310\336\037\000\252\337\037("
    "github.com/cosmos/cosmos-sdk/types.Coins"
    "\232\347\260*\014legacy_coins\250\347\260*\001R\016periodCanSpend\022L"
    "\n\014period_reset\030\005 \001(\0132\032.google.protobuf.T"
    "imestampB\r\310\336\037\000\220\337\037\001\250\347\260*\001R\013periodReset:J\312\264"
    "-%cosmos.feegrant.v1beta1.FeeAllowanceI\212"
    "\347\260*\034cosmos-sdk/PeriodicAllowance\"\361\001\n\023All"
    "owedMsgAllowance\022]\n\tallowance\030\001 \001(\0132\024.go"
    "ogle.protobuf.AnyB)\312\264-%cosmos.feegrant.v"
    "1beta1.FeeAllowanceIR\tallowance\022)\n\020allow"
    "ed_messages\030\002 \003(\tR\017allowedMessages:P\210\240\037\000"
    "\312\264-%cosmos.feegrant.v1beta1.FeeAllowance"
    "I\212\347\260*\036cosmos-sdk/AllowedMsgAllowance\"\316\001\n"
    "\005Grant\0222\n\007granter\030\001 \001(\tB\030\322\264-\024cosmos.Addr"
    "essStringR\007granter\0222\n\007grantee\030\002 \001(\tB\030\322\264-"
    "\024cosmos.AddressStringR\007grantee\022]\n\tallowa"
    "nce\030\003 \001(\0132\024.google.protobuf.AnyB)\312\264-%cos"
    "mos.feegrant.v1beta1.FeeAllowanceIR\tallo"
    "wanceB\031Z\027cosmossdk.io/x/feegrantb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto_deps[7] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto = {
    false,
    false,
    1640,
    descriptor_table_protodef_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto,
    "cosmos/feegrant/v1beta1/feegrant.proto",
    &descriptor_table_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto_once,
    descriptor_table_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto_deps,
    7,
    4,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto::offsets,
    file_level_enum_descriptors_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto,
    file_level_service_descriptors_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto,
};
namespace cosmos {
namespace feegrant {
namespace v1beta1 {
// ===================================================================

class BasicAllowance::_Internal {
 public:
  using HasBits =
      decltype(std::declval<BasicAllowance>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(BasicAllowance, _impl_._has_bits_);
};

void BasicAllowance::clear_spend_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.spend_limit_.Clear();
}
void BasicAllowance::clear_expiration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.expiration_ != nullptr) _impl_.expiration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
BasicAllowance::BasicAllowance(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.feegrant.v1beta1.BasicAllowance)
}
inline PROTOBUF_NDEBUG_INLINE BasicAllowance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::feegrant::v1beta1::BasicAllowance& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        spend_limit_{visibility, arena, from.spend_limit_} {}

BasicAllowance::BasicAllowance(
    ::google::protobuf::Arena* arena,
    const BasicAllowance& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  BasicAllowance* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.expiration_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.expiration_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:cosmos.feegrant.v1beta1.BasicAllowance)
}
inline PROTOBUF_NDEBUG_INLINE BasicAllowance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        spend_limit_{visibility, arena} {}

inline void BasicAllowance::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.expiration_ = {};
}
BasicAllowance::~BasicAllowance() {
  // @@protoc_insertion_point(destructor:cosmos.feegrant.v1beta1.BasicAllowance)
  SharedDtor(*this);
}
inline void BasicAllowance::SharedDtor(MessageLite& self) {
  BasicAllowance& this_ = static_cast<BasicAllowance&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.expiration_;
  this_._impl_.~Impl_();
}

inline void* BasicAllowance::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) BasicAllowance(arena);
}
constexpr auto BasicAllowance::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(BasicAllowance, _impl_.spend_limit_) +
          decltype(BasicAllowance::_impl_.spend_limit_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(BasicAllowance), alignof(BasicAllowance), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&BasicAllowance::PlacementNew_,
                                 sizeof(BasicAllowance),
                                 alignof(BasicAllowance));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull BasicAllowance::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_BasicAllowance_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &BasicAllowance::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<BasicAllowance>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &BasicAllowance::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<BasicAllowance>(), &BasicAllowance::ByteSizeLong,
            &BasicAllowance::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(BasicAllowance, _impl_._cached_size_),
        false,
    },
    &BasicAllowance::kDescriptorMethods,
    &descriptor_table_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* BasicAllowance::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> BasicAllowance::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BasicAllowance, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::feegrant::v1beta1::BasicAllowance>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.stdtime) = true];
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 1, PROTOBUF_FIELD_OFFSET(BasicAllowance, _impl_.expiration_)}},
    // repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(BasicAllowance, _impl_.spend_limit_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
    {PROTOBUF_FIELD_OFFSET(BasicAllowance, _impl_.spend_limit_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.stdtime) = true];
    {PROTOBUF_FIELD_OFFSET(BasicAllowance, _impl_.expiration_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cosmos::base::v1beta1::Coin>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void BasicAllowance::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.feegrant.v1beta1.BasicAllowance)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.spend_limit_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.expiration_ != nullptr);
    _impl_.expiration_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* BasicAllowance::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const BasicAllowance& this_ = static_cast<const BasicAllowance&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* BasicAllowance::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const BasicAllowance& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.feegrant.v1beta1.BasicAllowance)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_spend_limit_size());
               i < n; i++) {
            const auto& repfield = this_._internal_spend_limit().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.stdtime) = true];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.expiration_, this_._impl_.expiration_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.feegrant.v1beta1.BasicAllowance)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t BasicAllowance::ByteSizeLong(const MessageLite& base) {
          const BasicAllowance& this_ = static_cast<const BasicAllowance&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t BasicAllowance::ByteSizeLong() const {
          const BasicAllowance& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.feegrant.v1beta1.BasicAllowance)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
            {
              total_size += 1UL * this_._internal_spend_limit_size();
              for (const auto& msg : this_._internal_spend_limit()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // .google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.stdtime) = true];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.expiration_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void BasicAllowance::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BasicAllowance*>(&to_msg);
  auto& from = static_cast<const BasicAllowance&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.feegrant.v1beta1.BasicAllowance)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_spend_limit()->MergeFrom(
      from._internal_spend_limit());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.expiration_ != nullptr);
    if (_this->_impl_.expiration_ == nullptr) {
      _this->_impl_.expiration_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.expiration_);
    } else {
      _this->_impl_.expiration_->MergeFrom(*from._impl_.expiration_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BasicAllowance::CopyFrom(const BasicAllowance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.feegrant.v1beta1.BasicAllowance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BasicAllowance::InternalSwap(BasicAllowance* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.spend_limit_.InternalSwap(&other->_impl_.spend_limit_);
  swap(_impl_.expiration_, other->_impl_.expiration_);
}

::google::protobuf::Metadata BasicAllowance::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PeriodicAllowance::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PeriodicAllowance>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PeriodicAllowance, _impl_._has_bits_);
};

void PeriodicAllowance::clear_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.period_ != nullptr) _impl_.period_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PeriodicAllowance::clear_period_spend_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.period_spend_limit_.Clear();
}
void PeriodicAllowance::clear_period_can_spend() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.period_can_spend_.Clear();
}
void PeriodicAllowance::clear_period_reset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.period_reset_ != nullptr) _impl_.period_reset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
PeriodicAllowance::PeriodicAllowance(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.feegrant.v1beta1.PeriodicAllowance)
}
inline PROTOBUF_NDEBUG_INLINE PeriodicAllowance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::feegrant::v1beta1::PeriodicAllowance& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        period_spend_limit_{visibility, arena, from.period_spend_limit_},
        period_can_spend_{visibility, arena, from.period_can_spend_} {}

PeriodicAllowance::PeriodicAllowance(
    ::google::protobuf::Arena* arena,
    const PeriodicAllowance& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PeriodicAllowance* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.basic_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::cosmos::feegrant::v1beta1::BasicAllowance>(
                              arena, *from._impl_.basic_)
                        : nullptr;
  _impl_.period_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(
                              arena, *from._impl_.period_)
                        : nullptr;
  _impl_.period_reset_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.period_reset_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:cosmos.feegrant.v1beta1.PeriodicAllowance)
}
inline PROTOBUF_NDEBUG_INLINE PeriodicAllowance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        period_spend_limit_{visibility, arena},
        period_can_spend_{visibility, arena} {}

inline void PeriodicAllowance::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, basic_),
           0,
           offsetof(Impl_, period_reset_) -
               offsetof(Impl_, basic_) +
               sizeof(Impl_::period_reset_));
}
PeriodicAllowance::~PeriodicAllowance() {
  // @@protoc_insertion_point(destructor:cosmos.feegrant.v1beta1.PeriodicAllowance)
  SharedDtor(*this);
}
inline void PeriodicAllowance::SharedDtor(MessageLite& self) {
  PeriodicAllowance& this_ = static_cast<PeriodicAllowance&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.basic_;
  delete this_._impl_.period_;
  delete this_._impl_.period_reset_;
  this_._impl_.~Impl_();
}

inline void* PeriodicAllowance::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PeriodicAllowance(arena);
}
constexpr auto PeriodicAllowance::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(PeriodicAllowance, _impl_.period_spend_limit_) +
          decltype(PeriodicAllowance::_impl_.period_spend_limit_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(PeriodicAllowance, _impl_.period_can_spend_) +
          decltype(PeriodicAllowance::_impl_.period_can_spend_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(PeriodicAllowance), alignof(PeriodicAllowance), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&PeriodicAllowance::PlacementNew_,
                                 sizeof(PeriodicAllowance),
                                 alignof(PeriodicAllowance));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PeriodicAllowance::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PeriodicAllowance_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PeriodicAllowance::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PeriodicAllowance>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PeriodicAllowance::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PeriodicAllowance>(), &PeriodicAllowance::ByteSizeLong,
            &PeriodicAllowance::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PeriodicAllowance, _impl_._cached_size_),
        false,
    },
    &PeriodicAllowance::kDescriptorMethods,
    &descriptor_table_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PeriodicAllowance::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 5, 0, 2> PeriodicAllowance::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PeriodicAllowance, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::feegrant::v1beta1::PeriodicAllowance>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .cosmos.feegrant.v1beta1.BasicAllowance basic = 1 [json_name = "basic", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PeriodicAllowance, _impl_.basic_)}},
    // .google.protobuf.Duration period = 2 [json_name = "period", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(PeriodicAllowance, _impl_.period_)}},
    // repeated .cosmos.base.v1beta1.Coin period_spend_limit = 3 [json_name = "periodSpendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(PeriodicAllowance, _impl_.period_spend_limit_)}},
    // repeated .cosmos.base.v1beta1.Coin period_can_spend = 4 [json_name = "periodCanSpend", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 3, PROTOBUF_FIELD_OFFSET(PeriodicAllowance, _impl_.period_can_spend_)}},
    // .google.protobuf.Timestamp period_reset = 5 [json_name = "periodReset", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 4, PROTOBUF_FIELD_OFFSET(PeriodicAllowance, _impl_.period_reset_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .cosmos.feegrant.v1beta1.BasicAllowance basic = 1 [json_name = "basic", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    {PROTOBUF_FIELD_OFFSET(PeriodicAllowance, _impl_.basic_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Duration period = 2 [json_name = "period", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];
    {PROTOBUF_FIELD_OFFSET(PeriodicAllowance, _impl_.period_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .cosmos.base.v1beta1.Coin period_spend_limit = 3 [json_name = "periodSpendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
    {PROTOBUF_FIELD_OFFSET(PeriodicAllowance, _impl_.period_spend_limit_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .cosmos.base.v1beta1.Coin period_can_spend = 4 [json_name = "periodCanSpend", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
    {PROTOBUF_FIELD_OFFSET(PeriodicAllowance, _impl_.period_can_spend_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp period_reset = 5 [json_name = "periodReset", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
    {PROTOBUF_FIELD_OFFSET(PeriodicAllowance, _impl_.period_reset_), _Internal::kHasBitsOffset + 2, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cosmos::feegrant::v1beta1::BasicAllowance>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
    {::_pbi::TcParser::GetTable<::cosmos::base::v1beta1::Coin>()},
    {::_pbi::TcParser::GetTable<::cosmos::base::v1beta1::Coin>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PeriodicAllowance::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.feegrant.v1beta1.PeriodicAllowance)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.period_spend_limit_.Clear();
  _impl_.period_can_spend_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.basic_ != nullptr);
      _impl_.basic_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.period_ != nullptr);
      _impl_.period_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.period_reset_ != nullptr);
      _impl_.period_reset_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PeriodicAllowance::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PeriodicAllowance& this_ = static_cast<const PeriodicAllowance&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PeriodicAllowance::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PeriodicAllowance& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.feegrant.v1beta1.PeriodicAllowance)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .cosmos.feegrant.v1beta1.BasicAllowance basic = 1 [json_name = "basic", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.basic_, this_._impl_.basic_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Duration period = 2 [json_name = "period", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.period_, this_._impl_.period_->GetCachedSize(), target,
                stream);
          }

          // repeated .cosmos.base.v1beta1.Coin period_spend_limit = 3 [json_name = "periodSpendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_period_spend_limit_size());
               i < n; i++) {
            const auto& repfield = this_._internal_period_spend_limit().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    3, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .cosmos.base.v1beta1.Coin period_can_spend = 4 [json_name = "periodCanSpend", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_period_can_spend_size());
               i < n; i++) {
            const auto& repfield = this_._internal_period_can_spend().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    4, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // .google.protobuf.Timestamp period_reset = 5 [json_name = "periodReset", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.period_reset_, this_._impl_.period_reset_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.feegrant.v1beta1.PeriodicAllowance)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PeriodicAllowance::ByteSizeLong(const MessageLite& base) {
          const PeriodicAllowance& this_ = static_cast<const PeriodicAllowance&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PeriodicAllowance::ByteSizeLong() const {
          const PeriodicAllowance& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.feegrant.v1beta1.PeriodicAllowance)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .cosmos.base.v1beta1.Coin period_spend_limit = 3 [json_name = "periodSpendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
            {
              total_size += 1UL * this_._internal_period_spend_limit_size();
              for (const auto& msg : this_._internal_period_spend_limit()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .cosmos.base.v1beta1.Coin period_can_spend = 4 [json_name = "periodCanSpend", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
            {
              total_size += 1UL * this_._internal_period_can_spend_size();
              for (const auto& msg : this_._internal_period_can_spend()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .cosmos.feegrant.v1beta1.BasicAllowance basic = 1 [json_name = "basic", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.basic_);
            }
            // .google.protobuf.Duration period = 2 [json_name = "period", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.period_);
            }
            // .google.protobuf.Timestamp period_reset = 5 [json_name = "periodReset", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.period_reset_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PeriodicAllowance::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PeriodicAllowance*>(&to_msg);
  auto& from = static_cast<const PeriodicAllowance&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.feegrant.v1beta1.PeriodicAllowance)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_period_spend_limit()->MergeFrom(
      from._internal_period_spend_limit());
  _this->_internal_mutable_period_can_spend()->MergeFrom(
      from._internal_period_can_spend());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.basic_ != nullptr);
      if (_this->_impl_.basic_ == nullptr) {
        _this->_impl_.basic_ =
            ::google::protobuf::Message::CopyConstruct<::cosmos::feegrant::v1beta1::BasicAllowance>(arena, *from._impl_.basic_);
      } else {
        _this->_impl_.basic_->MergeFrom(*from._impl_.basic_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.period_ != nullptr);
      if (_this->_impl_.period_ == nullptr) {
        _this->_impl_.period_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(arena, *from._impl_.period_);
      } else {
        _this->_impl_.period_->MergeFrom(*from._impl_.period_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.period_reset_ != nullptr);
      if (_this->_impl_.period_reset_ == nullptr) {
        _this->_impl_.period_reset_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.period_reset_);
      } else {
        _this->_impl_.period_reset_->MergeFrom(*from._impl_.period_reset_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PeriodicAllowance::CopyFrom(const PeriodicAllowance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.feegrant.v1beta1.PeriodicAllowance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PeriodicAllowance::InternalSwap(PeriodicAllowance* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.period_spend_limit_.InternalSwap(&other->_impl_.period_spend_limit_);
  _impl_.period_can_spend_.InternalSwap(&other->_impl_.period_can_spend_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeriodicAllowance, _impl_.period_reset_)
      + sizeof(PeriodicAllowance::_impl_.period_reset_)
      - PROTOBUF_FIELD_OFFSET(PeriodicAllowance, _impl_.basic_)>(
          reinterpret_cast<char*>(&_impl_.basic_),
          reinterpret_cast<char*>(&other->_impl_.basic_));
}

::google::protobuf::Metadata PeriodicAllowance::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AllowedMsgAllowance::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AllowedMsgAllowance>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AllowedMsgAllowance, _impl_._has_bits_);
};

void AllowedMsgAllowance::clear_allowance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.allowance_ != nullptr) _impl_.allowance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AllowedMsgAllowance::AllowedMsgAllowance(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.feegrant.v1beta1.AllowedMsgAllowance)
}
inline PROTOBUF_NDEBUG_INLINE AllowedMsgAllowance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::feegrant::v1beta1::AllowedMsgAllowance& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        allowed_messages_{visibility, arena, from.allowed_messages_} {}

AllowedMsgAllowance::AllowedMsgAllowance(
    ::google::protobuf::Arena* arena,
    const AllowedMsgAllowance& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AllowedMsgAllowance* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.allowance_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Any>(
                              arena, *from._impl_.allowance_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:cosmos.feegrant.v1beta1.AllowedMsgAllowance)
}
inline PROTOBUF_NDEBUG_INLINE AllowedMsgAllowance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        allowed_messages_{visibility, arena} {}

inline void AllowedMsgAllowance::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.allowance_ = {};
}
AllowedMsgAllowance::~AllowedMsgAllowance() {
  // @@protoc_insertion_point(destructor:cosmos.feegrant.v1beta1.AllowedMsgAllowance)
  SharedDtor(*this);
}
inline void AllowedMsgAllowance::SharedDtor(MessageLite& self) {
  AllowedMsgAllowance& this_ = static_cast<AllowedMsgAllowance&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.allowance_;
  this_._impl_.~Impl_();
}

inline void* AllowedMsgAllowance::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AllowedMsgAllowance(arena);
}
constexpr auto AllowedMsgAllowance::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(AllowedMsgAllowance, _impl_.allowed_messages_) +
          decltype(AllowedMsgAllowance::_impl_.allowed_messages_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(AllowedMsgAllowance), alignof(AllowedMsgAllowance), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&AllowedMsgAllowance::PlacementNew_,
                                 sizeof(AllowedMsgAllowance),
                                 alignof(AllowedMsgAllowance));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AllowedMsgAllowance::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AllowedMsgAllowance_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AllowedMsgAllowance::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AllowedMsgAllowance>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AllowedMsgAllowance::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AllowedMsgAllowance>(), &AllowedMsgAllowance::ByteSizeLong,
            &AllowedMsgAllowance::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AllowedMsgAllowance, _impl_._cached_size_),
        false,
    },
    &AllowedMsgAllowance::kDescriptorMethods,
    &descriptor_table_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AllowedMsgAllowance::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 68, 2> AllowedMsgAllowance::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AllowedMsgAllowance, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::feegrant::v1beta1::AllowedMsgAllowance>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated string allowed_messages = 2 [json_name = "allowedMessages"];
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AllowedMsgAllowance, _impl_.allowed_messages_)}},
    // .google.protobuf.Any allowance = 1 [json_name = "allowance", (.cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AllowedMsgAllowance, _impl_.allowance_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Any allowance = 1 [json_name = "allowance", (.cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
    {PROTOBUF_FIELD_OFFSET(AllowedMsgAllowance, _impl_.allowance_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string allowed_messages = 2 [json_name = "allowedMessages"];
    {PROTOBUF_FIELD_OFFSET(AllowedMsgAllowance, _impl_.allowed_messages_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
  }}, {{
    "\53\0\20\0\0\0\0\0"
    "cosmos.feegrant.v1beta1.AllowedMsgAllowance"
    "allowed_messages"
  }},
};

PROTOBUF_NOINLINE void AllowedMsgAllowance::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.feegrant.v1beta1.AllowedMsgAllowance)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.allowed_messages_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.allowance_ != nullptr);
    _impl_.allowance_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AllowedMsgAllowance::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AllowedMsgAllowance& this_ = static_cast<const AllowedMsgAllowance&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AllowedMsgAllowance::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AllowedMsgAllowance& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.feegrant.v1beta1.AllowedMsgAllowance)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Any allowance = 1 [json_name = "allowance", (.cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.allowance_, this_._impl_.allowance_->GetCachedSize(), target,
                stream);
          }

          // repeated string allowed_messages = 2 [json_name = "allowedMessages"];
          for (int i = 0, n = this_._internal_allowed_messages_size(); i < n; ++i) {
            const auto& s = this_._internal_allowed_messages().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowed_messages");
            target = stream->WriteString(2, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.feegrant.v1beta1.AllowedMsgAllowance)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AllowedMsgAllowance::ByteSizeLong(const MessageLite& base) {
          const AllowedMsgAllowance& this_ = static_cast<const AllowedMsgAllowance&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AllowedMsgAllowance::ByteSizeLong() const {
          const AllowedMsgAllowance& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.feegrant.v1beta1.AllowedMsgAllowance)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string allowed_messages = 2 [json_name = "allowedMessages"];
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_allowed_messages().size());
              for (int i = 0, n = this_._internal_allowed_messages().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_allowed_messages().Get(i));
              }
            }
          }
           {
            // .google.protobuf.Any allowance = 1 [json_name = "allowance", (.cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.allowance_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AllowedMsgAllowance::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AllowedMsgAllowance*>(&to_msg);
  auto& from = static_cast<const AllowedMsgAllowance&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.feegrant.v1beta1.AllowedMsgAllowance)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_allowed_messages()->MergeFrom(from._internal_allowed_messages());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.allowance_ != nullptr);
    if (_this->_impl_.allowance_ == nullptr) {
      _this->_impl_.allowance_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Any>(arena, *from._impl_.allowance_);
    } else {
      _this->_impl_.allowance_->MergeFrom(*from._impl_.allowance_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AllowedMsgAllowance::CopyFrom(const AllowedMsgAllowance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.feegrant.v1beta1.AllowedMsgAllowance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AllowedMsgAllowance::InternalSwap(AllowedMsgAllowance* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.allowed_messages_.InternalSwap(&other->_impl_.allowed_messages_);
  swap(_impl_.allowance_, other->_impl_.allowance_);
}

::google::protobuf::Metadata AllowedMsgAllowance::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Grant::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Grant>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Grant, _impl_._has_bits_);
};

void Grant::clear_allowance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.allowance_ != nullptr) _impl_.allowance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Grant::Grant(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.feegrant.v1beta1.Grant)
}
inline PROTOBUF_NDEBUG_INLINE Grant::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::feegrant::v1beta1::Grant& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        granter_(arena, from.granter_),
        grantee_(arena, from.grantee_) {}

Grant::Grant(
    ::google::protobuf::Arena* arena,
    const Grant& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Grant* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.allowance_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Any>(
                              arena, *from._impl_.allowance_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:cosmos.feegrant.v1beta1.Grant)
}
inline PROTOBUF_NDEBUG_INLINE Grant::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        granter_(arena),
        grantee_(arena) {}

inline void Grant::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.allowance_ = {};
}
Grant::~Grant() {
  // @@protoc_insertion_point(destructor:cosmos.feegrant.v1beta1.Grant)
  SharedDtor(*this);
}
inline void Grant::SharedDtor(MessageLite& self) {
  Grant& this_ = static_cast<Grant&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.granter_.Destroy();
  this_._impl_.grantee_.Destroy();
  delete this_._impl_.allowance_;
  this_._impl_.~Impl_();
}

inline void* Grant::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Grant(arena);
}
constexpr auto Grant::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Grant),
                                            alignof(Grant));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Grant::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Grant_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Grant::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Grant>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Grant::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Grant>(), &Grant::ByteSizeLong,
            &Grant::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Grant, _impl_._cached_size_),
        false,
    },
    &Grant::kDescriptorMethods,
    &descriptor_table_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Grant::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 52, 2> Grant::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Grant, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::feegrant::v1beta1::Grant>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string granter = 1 [json_name = "granter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Grant, _impl_.granter_)}},
    // string grantee = 2 [json_name = "grantee", (.cosmos_proto.scalar) = "cosmos.AddressString"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Grant, _impl_.grantee_)}},
    // .google.protobuf.Any allowance = 3 [json_name = "allowance", (.cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(Grant, _impl_.allowance_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string granter = 1 [json_name = "granter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
    {PROTOBUF_FIELD_OFFSET(Grant, _impl_.granter_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string grantee = 2 [json_name = "grantee", (.cosmos_proto.scalar) = "cosmos.AddressString"];
    {PROTOBUF_FIELD_OFFSET(Grant, _impl_.grantee_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Any allowance = 3 [json_name = "allowance", (.cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
    {PROTOBUF_FIELD_OFFSET(Grant, _impl_.allowance_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
  }}, {{
    "\35\7\7\0\0\0\0\0"
    "cosmos.feegrant.v1beta1.Grant"
    "granter"
    "grantee"
  }},
};

PROTOBUF_NOINLINE void Grant::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.feegrant.v1beta1.Grant)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.granter_.ClearToEmpty();
  _impl_.grantee_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.allowance_ != nullptr);
    _impl_.allowance_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Grant::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Grant& this_ = static_cast<const Grant&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Grant::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Grant& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.feegrant.v1beta1.Grant)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string granter = 1 [json_name = "granter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
          if (!this_._internal_granter().empty()) {
            const std::string& _s = this_._internal_granter();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.feegrant.v1beta1.Grant.granter");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string grantee = 2 [json_name = "grantee", (.cosmos_proto.scalar) = "cosmos.AddressString"];
          if (!this_._internal_grantee().empty()) {
            const std::string& _s = this_._internal_grantee();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.feegrant.v1beta1.Grant.grantee");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Any allowance = 3 [json_name = "allowance", (.cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.allowance_, this_._impl_.allowance_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.feegrant.v1beta1.Grant)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Grant::ByteSizeLong(const MessageLite& base) {
          const Grant& this_ = static_cast<const Grant&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Grant::ByteSizeLong() const {
          const Grant& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.feegrant.v1beta1.Grant)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string granter = 1 [json_name = "granter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
            if (!this_._internal_granter().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_granter());
            }
            // string grantee = 2 [json_name = "grantee", (.cosmos_proto.scalar) = "cosmos.AddressString"];
            if (!this_._internal_grantee().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_grantee());
            }
          }
           {
            // .google.protobuf.Any allowance = 3 [json_name = "allowance", (.cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.allowance_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Grant::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Grant*>(&to_msg);
  auto& from = static_cast<const Grant&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.feegrant.v1beta1.Grant)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_granter().empty()) {
    _this->_internal_set_granter(from._internal_granter());
  }
  if (!from._internal_grantee().empty()) {
    _this->_internal_set_grantee(from._internal_grantee());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.allowance_ != nullptr);
    if (_this->_impl_.allowance_ == nullptr) {
      _this->_impl_.allowance_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Any>(arena, *from._impl_.allowance_);
    } else {
      _this->_impl_.allowance_->MergeFrom(*from._impl_.allowance_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Grant::CopyFrom(const Grant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.feegrant.v1beta1.Grant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Grant::InternalSwap(Grant* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.granter_, &other->_impl_.granter_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.grantee_, &other->_impl_.grantee_, arena);
  swap(_impl_.allowance_, other->_impl_.allowance_);
}

::google::protobuf::Metadata Grant::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace feegrant
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
