// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/tx/v1beta1/tx.proto
// Protobuf C++ Version: 5.29.4

#include "cosmos/tx/v1beta1/tx.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace cosmos {
namespace tx {
namespace v1beta1 {

inline constexpr TxRaw::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : signatures_{},
        body_bytes_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        auth_info_bytes_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TxRaw::TxRaw(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TxRawDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxRawDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxRawDefaultTypeInternal() {}
  union {
    TxRaw _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxRawDefaultTypeInternal _TxRaw_default_instance_;

inline constexpr SignDoc::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : body_bytes_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        auth_info_bytes_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        chain_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        account_number_{::uint64_t{0u}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SignDoc::SignDoc(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SignDocDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignDocDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignDocDefaultTypeInternal() {}
  union {
    SignDoc _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignDocDefaultTypeInternal _SignDoc_default_instance_;

inline constexpr ModeInfo_Single::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : mode_{static_cast< ::cosmos::tx::signing::v1beta1::SignMode >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ModeInfo_Single::ModeInfo_Single(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ModeInfo_SingleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModeInfo_SingleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModeInfo_SingleDefaultTypeInternal() {}
  union {
    ModeInfo_Single _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModeInfo_SingleDefaultTypeInternal _ModeInfo_Single_default_instance_;

inline constexpr TxBody::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        messages_{},
        extension_options_{},
        non_critical_extension_options_{},
        memo_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timeout_timestamp_{nullptr},
        timeout_height_{::uint64_t{0u}},
        unordered_{false} {}

template <typename>
PROTOBUF_CONSTEXPR TxBody::TxBody(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TxBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxBodyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxBodyDefaultTypeInternal() {}
  union {
    TxBody _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxBodyDefaultTypeInternal _TxBody_default_instance_;

inline constexpr Tip::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : amount_{},
        tipper_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Tip::Tip(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TipDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TipDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TipDefaultTypeInternal() {}
  union {
    Tip _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TipDefaultTypeInternal _Tip_default_instance_;

inline constexpr ModeInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : sum_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR ModeInfo::ModeInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ModeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModeInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModeInfoDefaultTypeInternal() {}
  union {
    ModeInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModeInfoDefaultTypeInternal _ModeInfo_default_instance_;

inline constexpr ModeInfo_Multi::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        mode_infos_{},
        bitarray_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ModeInfo_Multi::ModeInfo_Multi(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ModeInfo_MultiDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModeInfo_MultiDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModeInfo_MultiDefaultTypeInternal() {}
  union {
    ModeInfo_Multi _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModeInfo_MultiDefaultTypeInternal _ModeInfo_Multi_default_instance_;

inline constexpr Fee::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : amount_{},
        payer_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        granter_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        gas_limit_{::uint64_t{0u}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Fee::Fee(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FeeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeeDefaultTypeInternal() {}
  union {
    Fee _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeeDefaultTypeInternal _Fee_default_instance_;

inline constexpr SignerInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        public_key_{nullptr},
        mode_info_{nullptr},
        sequence_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR SignerInfo::SignerInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SignerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignerInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignerInfoDefaultTypeInternal() {}
  union {
    SignerInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignerInfoDefaultTypeInternal _SignerInfo_default_instance_;

inline constexpr SignDocDirectAux::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        body_bytes_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        chain_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        public_key_{nullptr},
        tip_{nullptr},
        account_number_{::uint64_t{0u}},
        sequence_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR SignDocDirectAux::SignDocDirectAux(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SignDocDirectAuxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignDocDirectAuxDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignDocDirectAuxDefaultTypeInternal() {}
  union {
    SignDocDirectAux _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignDocDirectAuxDefaultTypeInternal _SignDocDirectAux_default_instance_;

inline constexpr AuxSignerData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sig_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sign_doc_{nullptr},
        mode_{static_cast< ::cosmos::tx::signing::v1beta1::SignMode >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR AuxSignerData::AuxSignerData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AuxSignerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuxSignerDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuxSignerDataDefaultTypeInternal() {}
  union {
    AuxSignerData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuxSignerDataDefaultTypeInternal _AuxSignerData_default_instance_;

inline constexpr AuthInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        signer_infos_{},
        fee_{nullptr},
        tip_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AuthInfo::AuthInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AuthInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthInfoDefaultTypeInternal() {}
  union {
    AuthInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthInfoDefaultTypeInternal _AuthInfo_default_instance_;

inline constexpr Tx::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        signatures_{},
        body_{nullptr},
        auth_info_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Tx::Tx(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxDefaultTypeInternal() {}
  union {
    Tx _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxDefaultTypeInternal _Tx_default_instance_;
}  // namespace v1beta1
}  // namespace tx
}  // namespace cosmos
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2ftx_2fv1beta1_2ftx_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2ftx_2fv1beta1_2ftx_2eproto = nullptr;
const ::uint32_t
    TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::Tx, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::Tx, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::Tx, _impl_.body_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::Tx, _impl_.auth_info_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::Tx, _impl_.signatures_),
        0,
        1,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxRaw, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxRaw, _impl_.body_bytes_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxRaw, _impl_.auth_info_bytes_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxRaw, _impl_.signatures_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SignDoc, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SignDoc, _impl_.body_bytes_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SignDoc, _impl_.auth_info_bytes_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SignDoc, _impl_.chain_id_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SignDoc, _impl_.account_number_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SignDocDirectAux, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SignDocDirectAux, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SignDocDirectAux, _impl_.body_bytes_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SignDocDirectAux, _impl_.public_key_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SignDocDirectAux, _impl_.chain_id_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SignDocDirectAux, _impl_.account_number_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SignDocDirectAux, _impl_.sequence_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SignDocDirectAux, _impl_.tip_),
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        1,
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxBody, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxBody, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxBody, _impl_.messages_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxBody, _impl_.memo_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxBody, _impl_.timeout_height_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxBody, _impl_.unordered_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxBody, _impl_.timeout_timestamp_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxBody, _impl_.extension_options_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxBody, _impl_.non_critical_extension_options_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::AuthInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::AuthInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::AuthInfo, _impl_.signer_infos_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::AuthInfo, _impl_.fee_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::AuthInfo, _impl_.tip_),
        ~0u,
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SignerInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SignerInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SignerInfo, _impl_.public_key_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SignerInfo, _impl_.mode_info_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SignerInfo, _impl_.sequence_),
        0,
        1,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::ModeInfo_Single, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::ModeInfo_Single, _impl_.mode_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::ModeInfo_Multi, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::ModeInfo_Multi, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::ModeInfo_Multi, _impl_.bitarray_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::ModeInfo_Multi, _impl_.mode_infos_),
        0,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::ModeInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::ModeInfo, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::ModeInfo, _impl_.sum_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::Fee, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::Fee, _impl_.amount_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::Fee, _impl_.gas_limit_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::Fee, _impl_.payer_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::Fee, _impl_.granter_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::Tip, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::Tip, _impl_.amount_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::Tip, _impl_.tipper_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::AuxSignerData, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::AuxSignerData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::AuxSignerData, _impl_.address_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::AuxSignerData, _impl_.sign_doc_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::AuxSignerData, _impl_.mode_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::AuxSignerData, _impl_.sig_),
        ~0u,
        0,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::cosmos::tx::v1beta1::Tx)},
        {14, -1, -1, sizeof(::cosmos::tx::v1beta1::TxRaw)},
        {25, -1, -1, sizeof(::cosmos::tx::v1beta1::SignDoc)},
        {37, 51, -1, sizeof(::cosmos::tx::v1beta1::SignDocDirectAux)},
        {57, 72, -1, sizeof(::cosmos::tx::v1beta1::TxBody)},
        {79, 90, -1, sizeof(::cosmos::tx::v1beta1::AuthInfo)},
        {93, 104, -1, sizeof(::cosmos::tx::v1beta1::SignerInfo)},
        {107, -1, -1, sizeof(::cosmos::tx::v1beta1::ModeInfo_Single)},
        {116, 126, -1, sizeof(::cosmos::tx::v1beta1::ModeInfo_Multi)},
        {128, -1, -1, sizeof(::cosmos::tx::v1beta1::ModeInfo)},
        {139, -1, -1, sizeof(::cosmos::tx::v1beta1::Fee)},
        {151, -1, -1, sizeof(::cosmos::tx::v1beta1::Tip)},
        {161, 173, -1, sizeof(::cosmos::tx::v1beta1::AuxSignerData)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::tx::v1beta1::_Tx_default_instance_._instance,
    &::cosmos::tx::v1beta1::_TxRaw_default_instance_._instance,
    &::cosmos::tx::v1beta1::_SignDoc_default_instance_._instance,
    &::cosmos::tx::v1beta1::_SignDocDirectAux_default_instance_._instance,
    &::cosmos::tx::v1beta1::_TxBody_default_instance_._instance,
    &::cosmos::tx::v1beta1::_AuthInfo_default_instance_._instance,
    &::cosmos::tx::v1beta1::_SignerInfo_default_instance_._instance,
    &::cosmos::tx::v1beta1::_ModeInfo_Single_default_instance_._instance,
    &::cosmos::tx::v1beta1::_ModeInfo_Multi_default_instance_._instance,
    &::cosmos::tx::v1beta1::_ModeInfo_default_instance_._instance,
    &::cosmos::tx::v1beta1::_Fee_default_instance_._instance,
    &::cosmos::tx::v1beta1::_Tip_default_instance_._instance,
    &::cosmos::tx::v1beta1::_AuxSignerData_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2ftx_2fv1beta1_2ftx_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\032cosmos/tx/v1beta1/tx.proto\022\021cosmos.tx."
    "v1beta1\032\021amino/amino.proto\032\024gogoproto/go"
    "go.proto\032-cosmos/crypto/multisig/v1beta1"
    "/multisig.proto\032\036cosmos/base/v1beta1/coi"
    "n.proto\032\'cosmos/tx/signing/v1beta1/signi"
    "ng.proto\032\031google/protobuf/any.proto\032\031cos"
    "mos_proto/cosmos.proto\032\037google/protobuf/"
    "timestamp.proto\"\215\001\n\002Tx\022-\n\004body\030\001 \001(\0132\031.c"
    "osmos.tx.v1beta1.TxBodyR\004body\0228\n\tauth_in"
    "fo\030\002 \001(\0132\033.cosmos.tx.v1beta1.AuthInfoR\010a"
    "uthInfo\022\036\n\nsignatures\030\003 \003(\014R\nsignatures\""
    "n\n\005TxRaw\022\035\n\nbody_bytes\030\001 \001(\014R\tbodyBytes\022"
    "&\n\017auth_info_bytes\030\002 \001(\014R\rauthInfoBytes\022"
    "\036\n\nsignatures\030\003 \003(\014R\nsignatures\"\222\001\n\007Sign"
    "Doc\022\035\n\nbody_bytes\030\001 \001(\014R\tbodyBytes\022&\n\017au"
    "th_info_bytes\030\002 \001(\014R\rauthInfoBytes\022\031\n\010ch"
    "ain_id\030\003 \001(\tR\007chainId\022%\n\016account_number\030"
    "\004 \001(\004R\raccountNumber\"\207\002\n\020SignDocDirectAu"
    "x\022\035\n\nbody_bytes\030\001 \001(\014R\tbodyBytes\0223\n\npubl"
    "ic_key\030\002 \001(\0132\024.google.protobuf.AnyR\tpubl"
    "icKey\022\031\n\010chain_id\030\003 \001(\tR\007chainId\022%\n\016acco"
    "unt_number\030\004 \001(\004R\raccountNumber\022\032\n\010seque"
    "nce\030\005 \001(\004R\010sequence\022,\n\003tip\030\006 \001(\0132\026.cosmo"
    "s.tx.v1beta1.TipB\002\030\001R\003tip:\023\322\264-\017cosmos-sd"
    "k 0.46\"\256\003\n\006TxBody\0220\n\010messages\030\001 \003(\0132\024.go"
    "ogle.protobuf.AnyR\010messages\022\022\n\004memo\030\002 \001("
    "\tR\004memo\022%\n\016timeout_height\030\003 \001(\004R\rtimeout"
    "Height\0221\n\tunordered\030\004 \001(\010B\023\332\264-\017cosmos-sd"
    "k 0.53R\tunordered\022d\n\021timeout_timestamp\030\005"
    " \001(\0132\032.google.protobuf.TimestampB\033\310\336\037\001\220\337"
    "\037\001\332\264-\017cosmos-sdk 0.53R\020timeoutTimestamp\022"
    "B\n\021extension_options\030\377\007 \003(\0132\024.google.pro"
    "tobuf.AnyR\020extensionOptions\022Z\n\036non_criti"
    "cal_extension_options\030\377\017 \003(\0132\024.google.pr"
    "otobuf.AnyR\033nonCriticalExtensionOptions\""
    "\267\001\n\010AuthInfo\022@\n\014signer_infos\030\001 \003(\0132\035.cos"
    "mos.tx.v1beta1.SignerInfoR\013signerInfos\022("
    "\n\003fee\030\002 \001(\0132\026.cosmos.tx.v1beta1.FeeR\003fee"
    "\022\?\n\003tip\030\003 \001(\0132\026.cosmos.tx.v1beta1.TipB\025\030"
    "\001\332\264-\017cosmos-sdk 0.46R\003tip\"\227\001\n\nSignerInfo"
    "\0223\n\npublic_key\030\001 \001(\0132\024.google.protobuf.A"
    "nyR\tpublicKey\0228\n\tmode_info\030\002 \001(\0132\033.cosmo"
    "s.tx.v1beta1.ModeInfoR\010modeInfo\022\032\n\010seque"
    "nce\030\003 \001(\004R\010sequence\"\340\002\n\010ModeInfo\022<\n\006sing"
    "le\030\001 \001(\0132\".cosmos.tx.v1beta1.ModeInfo.Si"
    "ngleH\000R\006single\0229\n\005multi\030\002 \001(\0132!.cosmos.t"
    "x.v1beta1.ModeInfo.MultiH\000R\005multi\032A\n\006Sin"
    "gle\0227\n\004mode\030\001 \001(\0162#.cosmos.tx.signing.v1"
    "beta1.SignModeR\004mode\032\220\001\n\005Multi\022K\n\010bitarr"
    "ay\030\001 \001(\0132/.cosmos.crypto.multisig.v1beta"
    "1.CompactBitArrayR\010bitarray\022:\n\nmode_info"
    "s\030\002 \003(\0132\033.cosmos.tx.v1beta1.ModeInfoR\tmo"
    "deInfosB\005\n\003sum\"\201\002\n\003Fee\022y\n\006amount\030\001 \003(\0132\031"
    ".cosmos.base.v1beta1.CoinBF\310\336\037\000\252\337\037(githu"
    "b.com/cosmos/cosmos-sdk/types.Coins\232\347\260*\014"
    "legacy_coins\250\347\260*\001R\006amount\022\033\n\tgas_limit\030\002"
    " \001(\004R\010gasLimit\022.\n\005payer\030\003 \001(\tB\030\322\264-\024cosmo"
    "s.AddressStringR\005payer\0222\n\007granter\030\004 \001(\tB"
    "\030\322\264-\024cosmos.AddressStringR\007granter\"\311\001\n\003T"
    "ip\022y\n\006amount\030\001 \003(\0132\031.cosmos.base.v1beta1"
    ".CoinBF\310\336\037\000\252\337\037(github.com/cosmos/cosmos-"
    "sdk/types.Coins\232\347\260*\014legacy_coins\250\347\260*\001R\006a"
    "mount\0220\n\006tipper\030\002 \001(\tB\030\322\264-\024cosmos.Addres"
    "sStringR\006tipper:\025\030\001\322\264-\017cosmos-sdk 0.46\"\343"
    "\001\n\rAuxSignerData\0222\n\007address\030\001 \001(\tB\030\322\264-\024c"
    "osmos.AddressStringR\007address\022>\n\010sign_doc"
    "\030\002 \001(\0132#.cosmos.tx.v1beta1.SignDocDirect"
    "AuxR\007signDoc\0227\n\004mode\030\003 \001(\0162#.cosmos.tx.s"
    "igning.v1beta1.SignModeR\004mode\022\020\n\003sig\030\004 \001"
    "(\014R\003sig:\023\322\264-\017cosmos-sdk 0.46B\'Z%github.c"
    "om/cosmos/cosmos-sdk/types/txb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2ftx_2fv1beta1_2ftx_2eproto_deps[8] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto,
        &::descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2ftx_2fv1beta1_2ftx_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_cosmos_2ftx_2fv1beta1_2ftx_2eproto = {
    false,
    false,
    2837,
    descriptor_table_protodef_cosmos_2ftx_2fv1beta1_2ftx_2eproto,
    "cosmos/tx/v1beta1/tx.proto",
    &descriptor_table_cosmos_2ftx_2fv1beta1_2ftx_2eproto_once,
    descriptor_table_cosmos_2ftx_2fv1beta1_2ftx_2eproto_deps,
    8,
    13,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto::offsets,
    file_level_enum_descriptors_cosmos_2ftx_2fv1beta1_2ftx_2eproto,
    file_level_service_descriptors_cosmos_2ftx_2fv1beta1_2ftx_2eproto,
};
namespace cosmos {
namespace tx {
namespace v1beta1 {
// ===================================================================

class Tx::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Tx>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Tx, _impl_._has_bits_);
};

Tx::Tx(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.Tx)
}
inline PROTOBUF_NDEBUG_INLINE Tx::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::tx::v1beta1::Tx& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        signatures_{visibility, arena, from.signatures_} {}

Tx::Tx(
    ::google::protobuf::Arena* arena,
    const Tx& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Tx* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.body_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::cosmos::tx::v1beta1::TxBody>(
                              arena, *from._impl_.body_)
                        : nullptr;
  _impl_.auth_info_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::cosmos::tx::v1beta1::AuthInfo>(
                              arena, *from._impl_.auth_info_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.Tx)
}
inline PROTOBUF_NDEBUG_INLINE Tx::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        signatures_{visibility, arena} {}

inline void Tx::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, body_),
           0,
           offsetof(Impl_, auth_info_) -
               offsetof(Impl_, body_) +
               sizeof(Impl_::auth_info_));
}
Tx::~Tx() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.Tx)
  SharedDtor(*this);
}
inline void Tx::SharedDtor(MessageLite& self) {
  Tx& this_ = static_cast<Tx&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.body_;
  delete this_._impl_.auth_info_;
  this_._impl_.~Impl_();
}

inline void* Tx::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Tx(arena);
}
constexpr auto Tx::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Tx, _impl_.signatures_) +
          decltype(Tx::_impl_.signatures_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(Tx), alignof(Tx), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Tx::PlacementNew_,
                                 sizeof(Tx),
                                 alignof(Tx));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Tx::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Tx_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Tx::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Tx>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Tx::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Tx>(), &Tx::ByteSizeLong,
            &Tx::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Tx, _impl_._cached_size_),
        false,
    },
    &Tx::kDescriptorMethods,
    &descriptor_table_cosmos_2ftx_2fv1beta1_2ftx_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Tx::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> Tx::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Tx, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::tx::v1beta1::Tx>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .cosmos.tx.v1beta1.TxBody body = 1 [json_name = "body"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Tx, _impl_.body_)}},
    // .cosmos.tx.v1beta1.AuthInfo auth_info = 2 [json_name = "authInfo"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Tx, _impl_.auth_info_)}},
    // repeated bytes signatures = 3 [json_name = "signatures"];
    {::_pbi::TcParser::FastBR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Tx, _impl_.signatures_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .cosmos.tx.v1beta1.TxBody body = 1 [json_name = "body"];
    {PROTOBUF_FIELD_OFFSET(Tx, _impl_.body_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cosmos.tx.v1beta1.AuthInfo auth_info = 2 [json_name = "authInfo"];
    {PROTOBUF_FIELD_OFFSET(Tx, _impl_.auth_info_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated bytes signatures = 3 [json_name = "signatures"];
    {PROTOBUF_FIELD_OFFSET(Tx, _impl_.signatures_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cosmos::tx::v1beta1::TxBody>()},
    {::_pbi::TcParser::GetTable<::cosmos::tx::v1beta1::AuthInfo>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Tx::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.Tx)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signatures_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.body_ != nullptr);
      _impl_.body_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.auth_info_ != nullptr);
      _impl_.auth_info_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Tx::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Tx& this_ = static_cast<const Tx&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Tx::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Tx& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.Tx)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .cosmos.tx.v1beta1.TxBody body = 1 [json_name = "body"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.body_, this_._impl_.body_->GetCachedSize(), target,
                stream);
          }

          // .cosmos.tx.v1beta1.AuthInfo auth_info = 2 [json_name = "authInfo"];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.auth_info_, this_._impl_.auth_info_->GetCachedSize(), target,
                stream);
          }

          // repeated bytes signatures = 3 [json_name = "signatures"];
          for (int i = 0, n = this_._internal_signatures_size(); i < n; ++i) {
            const auto& s = this_._internal_signatures().Get(i);
            target = stream->WriteBytes(3, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.Tx)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Tx::ByteSizeLong(const MessageLite& base) {
          const Tx& this_ = static_cast<const Tx&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Tx::ByteSizeLong() const {
          const Tx& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.Tx)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated bytes signatures = 3 [json_name = "signatures"];
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_signatures().size());
              for (int i = 0, n = this_._internal_signatures().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
                    this_._internal_signatures().Get(i));
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .cosmos.tx.v1beta1.TxBody body = 1 [json_name = "body"];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.body_);
            }
            // .cosmos.tx.v1beta1.AuthInfo auth_info = 2 [json_name = "authInfo"];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.auth_info_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Tx::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Tx*>(&to_msg);
  auto& from = static_cast<const Tx&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.Tx)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_signatures()->MergeFrom(from._internal_signatures());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.body_ != nullptr);
      if (_this->_impl_.body_ == nullptr) {
        _this->_impl_.body_ =
            ::google::protobuf::Message::CopyConstruct<::cosmos::tx::v1beta1::TxBody>(arena, *from._impl_.body_);
      } else {
        _this->_impl_.body_->MergeFrom(*from._impl_.body_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.auth_info_ != nullptr);
      if (_this->_impl_.auth_info_ == nullptr) {
        _this->_impl_.auth_info_ =
            ::google::protobuf::Message::CopyConstruct<::cosmos::tx::v1beta1::AuthInfo>(arena, *from._impl_.auth_info_);
      } else {
        _this->_impl_.auth_info_->MergeFrom(*from._impl_.auth_info_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Tx::CopyFrom(const Tx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.Tx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Tx::InternalSwap(Tx* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.signatures_.InternalSwap(&other->_impl_.signatures_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tx, _impl_.auth_info_)
      + sizeof(Tx::_impl_.auth_info_)
      - PROTOBUF_FIELD_OFFSET(Tx, _impl_.body_)>(
          reinterpret_cast<char*>(&_impl_.body_),
          reinterpret_cast<char*>(&other->_impl_.body_));
}

::google::protobuf::Metadata Tx::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TxRaw::_Internal {
 public:
};

TxRaw::TxRaw(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.TxRaw)
}
inline PROTOBUF_NDEBUG_INLINE TxRaw::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::tx::v1beta1::TxRaw& from_msg)
      : signatures_{visibility, arena, from.signatures_},
        body_bytes_(arena, from.body_bytes_),
        auth_info_bytes_(arena, from.auth_info_bytes_),
        _cached_size_{0} {}

TxRaw::TxRaw(
    ::google::protobuf::Arena* arena,
    const TxRaw& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TxRaw* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.TxRaw)
}
inline PROTOBUF_NDEBUG_INLINE TxRaw::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : signatures_{visibility, arena},
        body_bytes_(arena),
        auth_info_bytes_(arena),
        _cached_size_{0} {}

inline void TxRaw::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TxRaw::~TxRaw() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.TxRaw)
  SharedDtor(*this);
}
inline void TxRaw::SharedDtor(MessageLite& self) {
  TxRaw& this_ = static_cast<TxRaw&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.body_bytes_.Destroy();
  this_._impl_.auth_info_bytes_.Destroy();
  this_._impl_.~Impl_();
}

inline void* TxRaw::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TxRaw(arena);
}
constexpr auto TxRaw::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(TxRaw, _impl_.signatures_) +
          decltype(TxRaw::_impl_.signatures_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(TxRaw), alignof(TxRaw), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&TxRaw::PlacementNew_,
                                 sizeof(TxRaw),
                                 alignof(TxRaw));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TxRaw::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TxRaw_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TxRaw::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TxRaw>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TxRaw::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TxRaw>(), &TxRaw::ByteSizeLong,
            &TxRaw::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TxRaw, _impl_._cached_size_),
        false,
    },
    &TxRaw::kDescriptorMethods,
    &descriptor_table_cosmos_2ftx_2fv1beta1_2ftx_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TxRaw::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> TxRaw::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::tx::v1beta1::TxRaw>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bytes body_bytes = 1 [json_name = "bodyBytes"];
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TxRaw, _impl_.body_bytes_)}},
    // bytes auth_info_bytes = 2 [json_name = "authInfoBytes"];
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TxRaw, _impl_.auth_info_bytes_)}},
    // repeated bytes signatures = 3 [json_name = "signatures"];
    {::_pbi::TcParser::FastBR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(TxRaw, _impl_.signatures_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes body_bytes = 1 [json_name = "bodyBytes"];
    {PROTOBUF_FIELD_OFFSET(TxRaw, _impl_.body_bytes_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes auth_info_bytes = 2 [json_name = "authInfoBytes"];
    {PROTOBUF_FIELD_OFFSET(TxRaw, _impl_.auth_info_bytes_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // repeated bytes signatures = 3 [json_name = "signatures"];
    {PROTOBUF_FIELD_OFFSET(TxRaw, _impl_.signatures_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void TxRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.TxRaw)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signatures_.Clear();
  _impl_.body_bytes_.ClearToEmpty();
  _impl_.auth_info_bytes_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TxRaw::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TxRaw& this_ = static_cast<const TxRaw&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TxRaw::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TxRaw& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.TxRaw)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bytes body_bytes = 1 [json_name = "bodyBytes"];
          if (!this_._internal_body_bytes().empty()) {
            const std::string& _s = this_._internal_body_bytes();
            target = stream->WriteBytesMaybeAliased(1, _s, target);
          }

          // bytes auth_info_bytes = 2 [json_name = "authInfoBytes"];
          if (!this_._internal_auth_info_bytes().empty()) {
            const std::string& _s = this_._internal_auth_info_bytes();
            target = stream->WriteBytesMaybeAliased(2, _s, target);
          }

          // repeated bytes signatures = 3 [json_name = "signatures"];
          for (int i = 0, n = this_._internal_signatures_size(); i < n; ++i) {
            const auto& s = this_._internal_signatures().Get(i);
            target = stream->WriteBytes(3, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.TxRaw)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TxRaw::ByteSizeLong(const MessageLite& base) {
          const TxRaw& this_ = static_cast<const TxRaw&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TxRaw::ByteSizeLong() const {
          const TxRaw& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.TxRaw)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated bytes signatures = 3 [json_name = "signatures"];
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_signatures().size());
              for (int i = 0, n = this_._internal_signatures().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
                    this_._internal_signatures().Get(i));
              }
            }
          }
           {
            // bytes body_bytes = 1 [json_name = "bodyBytes"];
            if (!this_._internal_body_bytes().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_body_bytes());
            }
            // bytes auth_info_bytes = 2 [json_name = "authInfoBytes"];
            if (!this_._internal_auth_info_bytes().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_auth_info_bytes());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TxRaw::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TxRaw*>(&to_msg);
  auto& from = static_cast<const TxRaw&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.TxRaw)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_signatures()->MergeFrom(from._internal_signatures());
  if (!from._internal_body_bytes().empty()) {
    _this->_internal_set_body_bytes(from._internal_body_bytes());
  }
  if (!from._internal_auth_info_bytes().empty()) {
    _this->_internal_set_auth_info_bytes(from._internal_auth_info_bytes());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TxRaw::CopyFrom(const TxRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.TxRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TxRaw::InternalSwap(TxRaw* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.signatures_.InternalSwap(&other->_impl_.signatures_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.body_bytes_, &other->_impl_.body_bytes_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.auth_info_bytes_, &other->_impl_.auth_info_bytes_, arena);
}

::google::protobuf::Metadata TxRaw::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SignDoc::_Internal {
 public:
};

SignDoc::SignDoc(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.SignDoc)
}
inline PROTOBUF_NDEBUG_INLINE SignDoc::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::tx::v1beta1::SignDoc& from_msg)
      : body_bytes_(arena, from.body_bytes_),
        auth_info_bytes_(arena, from.auth_info_bytes_),
        chain_id_(arena, from.chain_id_),
        _cached_size_{0} {}

SignDoc::SignDoc(
    ::google::protobuf::Arena* arena,
    const SignDoc& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SignDoc* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.account_number_ = from._impl_.account_number_;

  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.SignDoc)
}
inline PROTOBUF_NDEBUG_INLINE SignDoc::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : body_bytes_(arena),
        auth_info_bytes_(arena),
        chain_id_(arena),
        _cached_size_{0} {}

inline void SignDoc::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.account_number_ = {};
}
SignDoc::~SignDoc() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.SignDoc)
  SharedDtor(*this);
}
inline void SignDoc::SharedDtor(MessageLite& self) {
  SignDoc& this_ = static_cast<SignDoc&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.body_bytes_.Destroy();
  this_._impl_.auth_info_bytes_.Destroy();
  this_._impl_.chain_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* SignDoc::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SignDoc(arena);
}
constexpr auto SignDoc::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SignDoc),
                                            alignof(SignDoc));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SignDoc::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SignDoc_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SignDoc::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SignDoc>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SignDoc::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SignDoc>(), &SignDoc::ByteSizeLong,
            &SignDoc::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SignDoc, _impl_._cached_size_),
        false,
    },
    &SignDoc::kDescriptorMethods,
    &descriptor_table_cosmos_2ftx_2fv1beta1_2ftx_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SignDoc::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 42, 2> SignDoc::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::tx::v1beta1::SignDoc>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint64 account_number = 4 [json_name = "accountNumber"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SignDoc, _impl_.account_number_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(SignDoc, _impl_.account_number_)}},
    // bytes body_bytes = 1 [json_name = "bodyBytes"];
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SignDoc, _impl_.body_bytes_)}},
    // bytes auth_info_bytes = 2 [json_name = "authInfoBytes"];
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SignDoc, _impl_.auth_info_bytes_)}},
    // string chain_id = 3 [json_name = "chainId"];
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(SignDoc, _impl_.chain_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes body_bytes = 1 [json_name = "bodyBytes"];
    {PROTOBUF_FIELD_OFFSET(SignDoc, _impl_.body_bytes_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes auth_info_bytes = 2 [json_name = "authInfoBytes"];
    {PROTOBUF_FIELD_OFFSET(SignDoc, _impl_.auth_info_bytes_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // string chain_id = 3 [json_name = "chainId"];
    {PROTOBUF_FIELD_OFFSET(SignDoc, _impl_.chain_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint64 account_number = 4 [json_name = "accountNumber"];
    {PROTOBUF_FIELD_OFFSET(SignDoc, _impl_.account_number_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
    "\31\0\0\10\0\0\0\0"
    "cosmos.tx.v1beta1.SignDoc"
    "chain_id"
  }},
};

PROTOBUF_NOINLINE void SignDoc::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.SignDoc)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.body_bytes_.ClearToEmpty();
  _impl_.auth_info_bytes_.ClearToEmpty();
  _impl_.chain_id_.ClearToEmpty();
  _impl_.account_number_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SignDoc::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SignDoc& this_ = static_cast<const SignDoc&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SignDoc::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SignDoc& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.SignDoc)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bytes body_bytes = 1 [json_name = "bodyBytes"];
          if (!this_._internal_body_bytes().empty()) {
            const std::string& _s = this_._internal_body_bytes();
            target = stream->WriteBytesMaybeAliased(1, _s, target);
          }

          // bytes auth_info_bytes = 2 [json_name = "authInfoBytes"];
          if (!this_._internal_auth_info_bytes().empty()) {
            const std::string& _s = this_._internal_auth_info_bytes();
            target = stream->WriteBytesMaybeAliased(2, _s, target);
          }

          // string chain_id = 3 [json_name = "chainId"];
          if (!this_._internal_chain_id().empty()) {
            const std::string& _s = this_._internal_chain_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.tx.v1beta1.SignDoc.chain_id");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // uint64 account_number = 4 [json_name = "accountNumber"];
          if (this_._internal_account_number() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                4, this_._internal_account_number(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.SignDoc)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SignDoc::ByteSizeLong(const MessageLite& base) {
          const SignDoc& this_ = static_cast<const SignDoc&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SignDoc::ByteSizeLong() const {
          const SignDoc& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.SignDoc)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bytes body_bytes = 1 [json_name = "bodyBytes"];
            if (!this_._internal_body_bytes().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_body_bytes());
            }
            // bytes auth_info_bytes = 2 [json_name = "authInfoBytes"];
            if (!this_._internal_auth_info_bytes().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_auth_info_bytes());
            }
            // string chain_id = 3 [json_name = "chainId"];
            if (!this_._internal_chain_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_chain_id());
            }
            // uint64 account_number = 4 [json_name = "accountNumber"];
            if (this_._internal_account_number() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_account_number());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SignDoc::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SignDoc*>(&to_msg);
  auto& from = static_cast<const SignDoc&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.SignDoc)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_body_bytes().empty()) {
    _this->_internal_set_body_bytes(from._internal_body_bytes());
  }
  if (!from._internal_auth_info_bytes().empty()) {
    _this->_internal_set_auth_info_bytes(from._internal_auth_info_bytes());
  }
  if (!from._internal_chain_id().empty()) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  if (from._internal_account_number() != 0) {
    _this->_impl_.account_number_ = from._impl_.account_number_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SignDoc::CopyFrom(const SignDoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.SignDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SignDoc::InternalSwap(SignDoc* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.body_bytes_, &other->_impl_.body_bytes_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.auth_info_bytes_, &other->_impl_.auth_info_bytes_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.chain_id_, &other->_impl_.chain_id_, arena);
        swap(_impl_.account_number_, other->_impl_.account_number_);
}

::google::protobuf::Metadata SignDoc::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SignDocDirectAux::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SignDocDirectAux>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SignDocDirectAux, _impl_._has_bits_);
};

void SignDocDirectAux::clear_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.public_key_ != nullptr) _impl_.public_key_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SignDocDirectAux::SignDocDirectAux(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.SignDocDirectAux)
}
inline PROTOBUF_NDEBUG_INLINE SignDocDirectAux::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::tx::v1beta1::SignDocDirectAux& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        body_bytes_(arena, from.body_bytes_),
        chain_id_(arena, from.chain_id_) {}

SignDocDirectAux::SignDocDirectAux(
    ::google::protobuf::Arena* arena,
    const SignDocDirectAux& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SignDocDirectAux* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.public_key_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Any>(
                              arena, *from._impl_.public_key_)
                        : nullptr;
  _impl_.tip_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::cosmos::tx::v1beta1::Tip>(
                              arena, *from._impl_.tip_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, account_number_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, account_number_),
           offsetof(Impl_, sequence_) -
               offsetof(Impl_, account_number_) +
               sizeof(Impl_::sequence_));

  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.SignDocDirectAux)
}
inline PROTOBUF_NDEBUG_INLINE SignDocDirectAux::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        body_bytes_(arena),
        chain_id_(arena) {}

inline void SignDocDirectAux::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, public_key_),
           0,
           offsetof(Impl_, sequence_) -
               offsetof(Impl_, public_key_) +
               sizeof(Impl_::sequence_));
}
SignDocDirectAux::~SignDocDirectAux() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.SignDocDirectAux)
  SharedDtor(*this);
}
inline void SignDocDirectAux::SharedDtor(MessageLite& self) {
  SignDocDirectAux& this_ = static_cast<SignDocDirectAux&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.body_bytes_.Destroy();
  this_._impl_.chain_id_.Destroy();
  delete this_._impl_.public_key_;
  delete this_._impl_.tip_;
  this_._impl_.~Impl_();
}

inline void* SignDocDirectAux::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SignDocDirectAux(arena);
}
constexpr auto SignDocDirectAux::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SignDocDirectAux),
                                            alignof(SignDocDirectAux));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SignDocDirectAux::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SignDocDirectAux_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SignDocDirectAux::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SignDocDirectAux>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SignDocDirectAux::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SignDocDirectAux>(), &SignDocDirectAux::ByteSizeLong,
            &SignDocDirectAux::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SignDocDirectAux, _impl_._cached_size_),
        false,
    },
    &SignDocDirectAux::kDescriptorMethods,
    &descriptor_table_cosmos_2ftx_2fv1beta1_2ftx_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SignDocDirectAux::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 2, 51, 2> SignDocDirectAux::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SignDocDirectAux, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::tx::v1beta1::SignDocDirectAux>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bytes body_bytes = 1 [json_name = "bodyBytes"];
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SignDocDirectAux, _impl_.body_bytes_)}},
    // .google.protobuf.Any public_key = 2 [json_name = "publicKey"];
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(SignDocDirectAux, _impl_.public_key_)}},
    // string chain_id = 3 [json_name = "chainId"];
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(SignDocDirectAux, _impl_.chain_id_)}},
    // uint64 account_number = 4 [json_name = "accountNumber"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SignDocDirectAux, _impl_.account_number_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(SignDocDirectAux, _impl_.account_number_)}},
    // uint64 sequence = 5 [json_name = "sequence"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SignDocDirectAux, _impl_.sequence_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(SignDocDirectAux, _impl_.sequence_)}},
    // .cosmos.tx.v1beta1.Tip tip = 6 [json_name = "tip", deprecated = true];
    {::_pbi::TcParser::FastMtS1,
     {50, 1, 1, PROTOBUF_FIELD_OFFSET(SignDocDirectAux, _impl_.tip_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes body_bytes = 1 [json_name = "bodyBytes"];
    {PROTOBUF_FIELD_OFFSET(SignDocDirectAux, _impl_.body_bytes_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // .google.protobuf.Any public_key = 2 [json_name = "publicKey"];
    {PROTOBUF_FIELD_OFFSET(SignDocDirectAux, _impl_.public_key_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string chain_id = 3 [json_name = "chainId"];
    {PROTOBUF_FIELD_OFFSET(SignDocDirectAux, _impl_.chain_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint64 account_number = 4 [json_name = "accountNumber"];
    {PROTOBUF_FIELD_OFFSET(SignDocDirectAux, _impl_.account_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 sequence = 5 [json_name = "sequence"];
    {PROTOBUF_FIELD_OFFSET(SignDocDirectAux, _impl_.sequence_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // .cosmos.tx.v1beta1.Tip tip = 6 [json_name = "tip", deprecated = true];
    {PROTOBUF_FIELD_OFFSET(SignDocDirectAux, _impl_.tip_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
    {::_pbi::TcParser::GetTable<::cosmos::tx::v1beta1::Tip>()},
  }}, {{
    "\42\0\0\10\0\0\0\0"
    "cosmos.tx.v1beta1.SignDocDirectAux"
    "chain_id"
  }},
};

PROTOBUF_NOINLINE void SignDocDirectAux::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.SignDocDirectAux)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.body_bytes_.ClearToEmpty();
  _impl_.chain_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.public_key_ != nullptr);
      _impl_.public_key_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.tip_ != nullptr);
      _impl_.tip_->Clear();
    }
  }
  ::memset(&_impl_.account_number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.sequence_) -
      reinterpret_cast<char*>(&_impl_.account_number_)) + sizeof(_impl_.sequence_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SignDocDirectAux::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SignDocDirectAux& this_ = static_cast<const SignDocDirectAux&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SignDocDirectAux::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SignDocDirectAux& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.SignDocDirectAux)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bytes body_bytes = 1 [json_name = "bodyBytes"];
          if (!this_._internal_body_bytes().empty()) {
            const std::string& _s = this_._internal_body_bytes();
            target = stream->WriteBytesMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Any public_key = 2 [json_name = "publicKey"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.public_key_, this_._impl_.public_key_->GetCachedSize(), target,
                stream);
          }

          // string chain_id = 3 [json_name = "chainId"];
          if (!this_._internal_chain_id().empty()) {
            const std::string& _s = this_._internal_chain_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.tx.v1beta1.SignDocDirectAux.chain_id");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // uint64 account_number = 4 [json_name = "accountNumber"];
          if (this_._internal_account_number() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                4, this_._internal_account_number(), target);
          }

          // uint64 sequence = 5 [json_name = "sequence"];
          if (this_._internal_sequence() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                5, this_._internal_sequence(), target);
          }

          // .cosmos.tx.v1beta1.Tip tip = 6 [json_name = "tip", deprecated = true];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.tip_, this_._impl_.tip_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.SignDocDirectAux)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SignDocDirectAux::ByteSizeLong(const MessageLite& base) {
          const SignDocDirectAux& this_ = static_cast<const SignDocDirectAux&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SignDocDirectAux::ByteSizeLong() const {
          const SignDocDirectAux& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.SignDocDirectAux)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bytes body_bytes = 1 [json_name = "bodyBytes"];
            if (!this_._internal_body_bytes().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_body_bytes());
            }
            // string chain_id = 3 [json_name = "chainId"];
            if (!this_._internal_chain_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_chain_id());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .google.protobuf.Any public_key = 2 [json_name = "publicKey"];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.public_key_);
            }
            // .cosmos.tx.v1beta1.Tip tip = 6 [json_name = "tip", deprecated = true];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.tip_);
            }
          }
           {
            // uint64 account_number = 4 [json_name = "accountNumber"];
            if (this_._internal_account_number() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_account_number());
            }
            // uint64 sequence = 5 [json_name = "sequence"];
            if (this_._internal_sequence() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_sequence());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SignDocDirectAux::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SignDocDirectAux*>(&to_msg);
  auto& from = static_cast<const SignDocDirectAux&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.SignDocDirectAux)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_body_bytes().empty()) {
    _this->_internal_set_body_bytes(from._internal_body_bytes());
  }
  if (!from._internal_chain_id().empty()) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.public_key_ != nullptr);
      if (_this->_impl_.public_key_ == nullptr) {
        _this->_impl_.public_key_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Any>(arena, *from._impl_.public_key_);
      } else {
        _this->_impl_.public_key_->MergeFrom(*from._impl_.public_key_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.tip_ != nullptr);
      if (_this->_impl_.tip_ == nullptr) {
        _this->_impl_.tip_ =
            ::google::protobuf::Message::CopyConstruct<::cosmos::tx::v1beta1::Tip>(arena, *from._impl_.tip_);
      } else {
        _this->_impl_.tip_->MergeFrom(*from._impl_.tip_);
      }
    }
  }
  if (from._internal_account_number() != 0) {
    _this->_impl_.account_number_ = from._impl_.account_number_;
  }
  if (from._internal_sequence() != 0) {
    _this->_impl_.sequence_ = from._impl_.sequence_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SignDocDirectAux::CopyFrom(const SignDocDirectAux& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.SignDocDirectAux)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SignDocDirectAux::InternalSwap(SignDocDirectAux* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.body_bytes_, &other->_impl_.body_bytes_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.chain_id_, &other->_impl_.chain_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignDocDirectAux, _impl_.sequence_)
      + sizeof(SignDocDirectAux::_impl_.sequence_)
      - PROTOBUF_FIELD_OFFSET(SignDocDirectAux, _impl_.public_key_)>(
          reinterpret_cast<char*>(&_impl_.public_key_),
          reinterpret_cast<char*>(&other->_impl_.public_key_));
}

::google::protobuf::Metadata SignDocDirectAux::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TxBody::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TxBody>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TxBody, _impl_._has_bits_);
};

void TxBody::clear_messages() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.messages_.Clear();
}
void TxBody::clear_timeout_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timeout_timestamp_ != nullptr) _impl_.timeout_timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TxBody::clear_extension_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extension_options_.Clear();
}
void TxBody::clear_non_critical_extension_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.non_critical_extension_options_.Clear();
}
TxBody::TxBody(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.TxBody)
}
inline PROTOBUF_NDEBUG_INLINE TxBody::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::tx::v1beta1::TxBody& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        messages_{visibility, arena, from.messages_},
        extension_options_{visibility, arena, from.extension_options_},
        non_critical_extension_options_{visibility, arena, from.non_critical_extension_options_},
        memo_(arena, from.memo_) {}

TxBody::TxBody(
    ::google::protobuf::Arena* arena,
    const TxBody& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TxBody* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timeout_timestamp_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.timeout_timestamp_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timeout_height_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, timeout_height_),
           offsetof(Impl_, unordered_) -
               offsetof(Impl_, timeout_height_) +
               sizeof(Impl_::unordered_));

  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.TxBody)
}
inline PROTOBUF_NDEBUG_INLINE TxBody::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        messages_{visibility, arena},
        extension_options_{visibility, arena},
        non_critical_extension_options_{visibility, arena},
        memo_(arena) {}

inline void TxBody::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timeout_timestamp_),
           0,
           offsetof(Impl_, unordered_) -
               offsetof(Impl_, timeout_timestamp_) +
               sizeof(Impl_::unordered_));
}
TxBody::~TxBody() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.TxBody)
  SharedDtor(*this);
}
inline void TxBody::SharedDtor(MessageLite& self) {
  TxBody& this_ = static_cast<TxBody&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.memo_.Destroy();
  delete this_._impl_.timeout_timestamp_;
  this_._impl_.~Impl_();
}

inline void* TxBody::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TxBody(arena);
}
constexpr auto TxBody::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(TxBody, _impl_.messages_) +
          decltype(TxBody::_impl_.messages_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TxBody, _impl_.extension_options_) +
          decltype(TxBody::_impl_.extension_options_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TxBody, _impl_.non_critical_extension_options_) +
          decltype(TxBody::_impl_.non_critical_extension_options_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(TxBody), alignof(TxBody), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&TxBody::PlacementNew_,
                                 sizeof(TxBody),
                                 alignof(TxBody));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TxBody::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TxBody_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TxBody::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TxBody>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TxBody::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TxBody>(), &TxBody::ByteSizeLong,
            &TxBody::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TxBody, _impl_._cached_size_),
        false,
    },
    &TxBody::kDescriptorMethods,
    &descriptor_table_cosmos_2ftx_2fv1beta1_2ftx_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TxBody::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 4, 37, 12> TxBody::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TxBody, _impl_._has_bits_),
    0, // no _extensions_
    2047, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::tx::v1beta1::TxBody>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .google.protobuf.Any messages = 1 [json_name = "messages"];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TxBody, _impl_.messages_)}},
    // string memo = 2 [json_name = "memo"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TxBody, _impl_.memo_)}},
    // uint64 timeout_height = 3 [json_name = "timeoutHeight"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TxBody, _impl_.timeout_height_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TxBody, _impl_.timeout_height_)}},
    // bool unordered = 4 [json_name = "unordered", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.53"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TxBody, _impl_.unordered_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TxBody, _impl_.unordered_)}},
    // .google.protobuf.Timestamp timeout_timestamp = 5 [json_name = "timeoutTimestamp", (.gogoproto.nullable) = true, (.gogoproto.stdtime) = true, (.cosmos_proto.field_added_in) = "cosmos-sdk 0.53"];
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 1, PROTOBUF_FIELD_OFFSET(TxBody, _impl_.timeout_timestamp_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .google.protobuf.Any extension_options = 1023 [json_name = "extensionOptions"];
    {::_pbi::TcParser::FastMtR2,
     {16378, 63, 2, PROTOBUF_FIELD_OFFSET(TxBody, _impl_.extension_options_)}},
  }}, {{
    1023, 0, 1,
    65534, 5,2047, 0, 1,
     65534, 6,
    65535, 65535
  }}, {{
    // repeated .google.protobuf.Any messages = 1 [json_name = "messages"];
    {PROTOBUF_FIELD_OFFSET(TxBody, _impl_.messages_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string memo = 2 [json_name = "memo"];
    {PROTOBUF_FIELD_OFFSET(TxBody, _impl_.memo_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint64 timeout_height = 3 [json_name = "timeoutHeight"];
    {PROTOBUF_FIELD_OFFSET(TxBody, _impl_.timeout_height_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // bool unordered = 4 [json_name = "unordered", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.53"];
    {PROTOBUF_FIELD_OFFSET(TxBody, _impl_.unordered_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .google.protobuf.Timestamp timeout_timestamp = 5 [json_name = "timeoutTimestamp", (.gogoproto.nullable) = true, (.gogoproto.stdtime) = true, (.cosmos_proto.field_added_in) = "cosmos-sdk 0.53"];
    {PROTOBUF_FIELD_OFFSET(TxBody, _impl_.timeout_timestamp_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .google.protobuf.Any extension_options = 1023 [json_name = "extensionOptions"];
    {PROTOBUF_FIELD_OFFSET(TxBody, _impl_.extension_options_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .google.protobuf.Any non_critical_extension_options = 2047 [json_name = "nonCriticalExtensionOptions"];
    {PROTOBUF_FIELD_OFFSET(TxBody, _impl_.non_critical_extension_options_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
  }}, {{
    "\30\0\4\0\0\0\0\0"
    "cosmos.tx.v1beta1.TxBody"
    "memo"
  }},
};

PROTOBUF_NOINLINE void TxBody::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.TxBody)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messages_.Clear();
  _impl_.extension_options_.Clear();
  _impl_.non_critical_extension_options_.Clear();
  _impl_.memo_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timeout_timestamp_ != nullptr);
    _impl_.timeout_timestamp_->Clear();
  }
  ::memset(&_impl_.timeout_height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.unordered_) -
      reinterpret_cast<char*>(&_impl_.timeout_height_)) + sizeof(_impl_.unordered_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TxBody::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TxBody& this_ = static_cast<const TxBody&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TxBody::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TxBody& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.TxBody)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .google.protobuf.Any messages = 1 [json_name = "messages"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_messages_size());
               i < n; i++) {
            const auto& repfield = this_._internal_messages().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // string memo = 2 [json_name = "memo"];
          if (!this_._internal_memo().empty()) {
            const std::string& _s = this_._internal_memo();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.tx.v1beta1.TxBody.memo");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // uint64 timeout_height = 3 [json_name = "timeoutHeight"];
          if (this_._internal_timeout_height() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                3, this_._internal_timeout_height(), target);
          }

          // bool unordered = 4 [json_name = "unordered", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.53"];
          if (this_._internal_unordered() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_unordered(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp timeout_timestamp = 5 [json_name = "timeoutTimestamp", (.gogoproto.nullable) = true, (.gogoproto.stdtime) = true, (.cosmos_proto.field_added_in) = "cosmos-sdk 0.53"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.timeout_timestamp_, this_._impl_.timeout_timestamp_->GetCachedSize(), target,
                stream);
          }

          // repeated .google.protobuf.Any extension_options = 1023 [json_name = "extensionOptions"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_extension_options_size());
               i < n; i++) {
            const auto& repfield = this_._internal_extension_options().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1023, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .google.protobuf.Any non_critical_extension_options = 2047 [json_name = "nonCriticalExtensionOptions"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_non_critical_extension_options_size());
               i < n; i++) {
            const auto& repfield = this_._internal_non_critical_extension_options().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2047, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.TxBody)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TxBody::ByteSizeLong(const MessageLite& base) {
          const TxBody& this_ = static_cast<const TxBody&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TxBody::ByteSizeLong() const {
          const TxBody& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.TxBody)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .google.protobuf.Any messages = 1 [json_name = "messages"];
            {
              total_size += 1UL * this_._internal_messages_size();
              for (const auto& msg : this_._internal_messages()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .google.protobuf.Any extension_options = 1023 [json_name = "extensionOptions"];
            {
              total_size += 2UL * this_._internal_extension_options_size();
              for (const auto& msg : this_._internal_extension_options()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .google.protobuf.Any non_critical_extension_options = 2047 [json_name = "nonCriticalExtensionOptions"];
            {
              total_size += 2UL * this_._internal_non_critical_extension_options_size();
              for (const auto& msg : this_._internal_non_critical_extension_options()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string memo = 2 [json_name = "memo"];
            if (!this_._internal_memo().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_memo());
            }
          }
           {
            // .google.protobuf.Timestamp timeout_timestamp = 5 [json_name = "timeoutTimestamp", (.gogoproto.nullable) = true, (.gogoproto.stdtime) = true, (.cosmos_proto.field_added_in) = "cosmos-sdk 0.53"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.timeout_timestamp_);
            }
          }
           {
            // uint64 timeout_height = 3 [json_name = "timeoutHeight"];
            if (this_._internal_timeout_height() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_timeout_height());
            }
            // bool unordered = 4 [json_name = "unordered", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.53"];
            if (this_._internal_unordered() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TxBody::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TxBody*>(&to_msg);
  auto& from = static_cast<const TxBody&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.TxBody)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_messages()->MergeFrom(
      from._internal_messages());
  _this->_internal_mutable_extension_options()->MergeFrom(
      from._internal_extension_options());
  _this->_internal_mutable_non_critical_extension_options()->MergeFrom(
      from._internal_non_critical_extension_options());
  if (!from._internal_memo().empty()) {
    _this->_internal_set_memo(from._internal_memo());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.timeout_timestamp_ != nullptr);
    if (_this->_impl_.timeout_timestamp_ == nullptr) {
      _this->_impl_.timeout_timestamp_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.timeout_timestamp_);
    } else {
      _this->_impl_.timeout_timestamp_->MergeFrom(*from._impl_.timeout_timestamp_);
    }
  }
  if (from._internal_timeout_height() != 0) {
    _this->_impl_.timeout_height_ = from._impl_.timeout_height_;
  }
  if (from._internal_unordered() != 0) {
    _this->_impl_.unordered_ = from._impl_.unordered_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TxBody::CopyFrom(const TxBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.TxBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TxBody::InternalSwap(TxBody* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.messages_.InternalSwap(&other->_impl_.messages_);
  _impl_.extension_options_.InternalSwap(&other->_impl_.extension_options_);
  _impl_.non_critical_extension_options_.InternalSwap(&other->_impl_.non_critical_extension_options_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.memo_, &other->_impl_.memo_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TxBody, _impl_.unordered_)
      + sizeof(TxBody::_impl_.unordered_)
      - PROTOBUF_FIELD_OFFSET(TxBody, _impl_.timeout_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timeout_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timeout_timestamp_));
}

::google::protobuf::Metadata TxBody::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AuthInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AuthInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AuthInfo, _impl_._has_bits_);
};

AuthInfo::AuthInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.AuthInfo)
}
inline PROTOBUF_NDEBUG_INLINE AuthInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::tx::v1beta1::AuthInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        signer_infos_{visibility, arena, from.signer_infos_} {}

AuthInfo::AuthInfo(
    ::google::protobuf::Arena* arena,
    const AuthInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AuthInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.fee_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::cosmos::tx::v1beta1::Fee>(
                              arena, *from._impl_.fee_)
                        : nullptr;
  _impl_.tip_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::cosmos::tx::v1beta1::Tip>(
                              arena, *from._impl_.tip_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.AuthInfo)
}
inline PROTOBUF_NDEBUG_INLINE AuthInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        signer_infos_{visibility, arena} {}

inline void AuthInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, fee_),
           0,
           offsetof(Impl_, tip_) -
               offsetof(Impl_, fee_) +
               sizeof(Impl_::tip_));
}
AuthInfo::~AuthInfo() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.AuthInfo)
  SharedDtor(*this);
}
inline void AuthInfo::SharedDtor(MessageLite& self) {
  AuthInfo& this_ = static_cast<AuthInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.fee_;
  delete this_._impl_.tip_;
  this_._impl_.~Impl_();
}

inline void* AuthInfo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AuthInfo(arena);
}
constexpr auto AuthInfo::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(AuthInfo, _impl_.signer_infos_) +
          decltype(AuthInfo::_impl_.signer_infos_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(AuthInfo), alignof(AuthInfo), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&AuthInfo::PlacementNew_,
                                 sizeof(AuthInfo),
                                 alignof(AuthInfo));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AuthInfo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AuthInfo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AuthInfo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AuthInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AuthInfo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AuthInfo>(), &AuthInfo::ByteSizeLong,
            &AuthInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AuthInfo, _impl_._cached_size_),
        false,
    },
    &AuthInfo::kDescriptorMethods,
    &descriptor_table_cosmos_2ftx_2fv1beta1_2ftx_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AuthInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> AuthInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AuthInfo, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::tx::v1beta1::AuthInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AuthInfo, _impl_.signer_infos_)}},
    // .cosmos.tx.v1beta1.Fee fee = 2 [json_name = "fee"];
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 1, PROTOBUF_FIELD_OFFSET(AuthInfo, _impl_.fee_)}},
    // .cosmos.tx.v1beta1.Tip tip = 3 [json_name = "tip", deprecated = true, (.cosmos_proto.field_added_in) = "cosmos-sdk 0.46"];
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 2, PROTOBUF_FIELD_OFFSET(AuthInfo, _impl_.tip_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];
    {PROTOBUF_FIELD_OFFSET(AuthInfo, _impl_.signer_infos_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cosmos.tx.v1beta1.Fee fee = 2 [json_name = "fee"];
    {PROTOBUF_FIELD_OFFSET(AuthInfo, _impl_.fee_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cosmos.tx.v1beta1.Tip tip = 3 [json_name = "tip", deprecated = true, (.cosmos_proto.field_added_in) = "cosmos-sdk 0.46"];
    {PROTOBUF_FIELD_OFFSET(AuthInfo, _impl_.tip_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cosmos::tx::v1beta1::SignerInfo>()},
    {::_pbi::TcParser::GetTable<::cosmos::tx::v1beta1::Fee>()},
    {::_pbi::TcParser::GetTable<::cosmos::tx::v1beta1::Tip>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void AuthInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.AuthInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signer_infos_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.fee_ != nullptr);
      _impl_.fee_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.tip_ != nullptr);
      _impl_.tip_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AuthInfo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AuthInfo& this_ = static_cast<const AuthInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AuthInfo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AuthInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.AuthInfo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_signer_infos_size());
               i < n; i++) {
            const auto& repfield = this_._internal_signer_infos().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .cosmos.tx.v1beta1.Fee fee = 2 [json_name = "fee"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.fee_, this_._impl_.fee_->GetCachedSize(), target,
                stream);
          }

          // .cosmos.tx.v1beta1.Tip tip = 3 [json_name = "tip", deprecated = true, (.cosmos_proto.field_added_in) = "cosmos-sdk 0.46"];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.tip_, this_._impl_.tip_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.AuthInfo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AuthInfo::ByteSizeLong(const MessageLite& base) {
          const AuthInfo& this_ = static_cast<const AuthInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AuthInfo::ByteSizeLong() const {
          const AuthInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.AuthInfo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];
            {
              total_size += 1UL * this_._internal_signer_infos_size();
              for (const auto& msg : this_._internal_signer_infos()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .cosmos.tx.v1beta1.Fee fee = 2 [json_name = "fee"];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.fee_);
            }
            // .cosmos.tx.v1beta1.Tip tip = 3 [json_name = "tip", deprecated = true, (.cosmos_proto.field_added_in) = "cosmos-sdk 0.46"];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.tip_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AuthInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AuthInfo*>(&to_msg);
  auto& from = static_cast<const AuthInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.AuthInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_signer_infos()->MergeFrom(
      from._internal_signer_infos());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.fee_ != nullptr);
      if (_this->_impl_.fee_ == nullptr) {
        _this->_impl_.fee_ =
            ::google::protobuf::Message::CopyConstruct<::cosmos::tx::v1beta1::Fee>(arena, *from._impl_.fee_);
      } else {
        _this->_impl_.fee_->MergeFrom(*from._impl_.fee_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.tip_ != nullptr);
      if (_this->_impl_.tip_ == nullptr) {
        _this->_impl_.tip_ =
            ::google::protobuf::Message::CopyConstruct<::cosmos::tx::v1beta1::Tip>(arena, *from._impl_.tip_);
      } else {
        _this->_impl_.tip_->MergeFrom(*from._impl_.tip_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AuthInfo::CopyFrom(const AuthInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.AuthInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AuthInfo::InternalSwap(AuthInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.signer_infos_.InternalSwap(&other->_impl_.signer_infos_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthInfo, _impl_.tip_)
      + sizeof(AuthInfo::_impl_.tip_)
      - PROTOBUF_FIELD_OFFSET(AuthInfo, _impl_.fee_)>(
          reinterpret_cast<char*>(&_impl_.fee_),
          reinterpret_cast<char*>(&other->_impl_.fee_));
}

::google::protobuf::Metadata AuthInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SignerInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SignerInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SignerInfo, _impl_._has_bits_);
};

void SignerInfo::clear_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.public_key_ != nullptr) _impl_.public_key_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SignerInfo::SignerInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.SignerInfo)
}
inline PROTOBUF_NDEBUG_INLINE SignerInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::tx::v1beta1::SignerInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SignerInfo::SignerInfo(
    ::google::protobuf::Arena* arena,
    const SignerInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SignerInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.public_key_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Any>(
                              arena, *from._impl_.public_key_)
                        : nullptr;
  _impl_.mode_info_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::cosmos::tx::v1beta1::ModeInfo>(
                              arena, *from._impl_.mode_info_)
                        : nullptr;
  _impl_.sequence_ = from._impl_.sequence_;

  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.SignerInfo)
}
inline PROTOBUF_NDEBUG_INLINE SignerInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SignerInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, public_key_),
           0,
           offsetof(Impl_, sequence_) -
               offsetof(Impl_, public_key_) +
               sizeof(Impl_::sequence_));
}
SignerInfo::~SignerInfo() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.SignerInfo)
  SharedDtor(*this);
}
inline void SignerInfo::SharedDtor(MessageLite& self) {
  SignerInfo& this_ = static_cast<SignerInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.public_key_;
  delete this_._impl_.mode_info_;
  this_._impl_.~Impl_();
}

inline void* SignerInfo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SignerInfo(arena);
}
constexpr auto SignerInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SignerInfo),
                                            alignof(SignerInfo));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SignerInfo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SignerInfo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SignerInfo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SignerInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SignerInfo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SignerInfo>(), &SignerInfo::ByteSizeLong,
            &SignerInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SignerInfo, _impl_._cached_size_),
        false,
    },
    &SignerInfo::kDescriptorMethods,
    &descriptor_table_cosmos_2ftx_2fv1beta1_2ftx_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SignerInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> SignerInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SignerInfo, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::tx::v1beta1::SignerInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Any public_key = 1 [json_name = "publicKey"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SignerInfo, _impl_.public_key_)}},
    // .cosmos.tx.v1beta1.ModeInfo mode_info = 2 [json_name = "modeInfo"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SignerInfo, _impl_.mode_info_)}},
    // uint64 sequence = 3 [json_name = "sequence"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SignerInfo, _impl_.sequence_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(SignerInfo, _impl_.sequence_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Any public_key = 1 [json_name = "publicKey"];
    {PROTOBUF_FIELD_OFFSET(SignerInfo, _impl_.public_key_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cosmos.tx.v1beta1.ModeInfo mode_info = 2 [json_name = "modeInfo"];
    {PROTOBUF_FIELD_OFFSET(SignerInfo, _impl_.mode_info_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint64 sequence = 3 [json_name = "sequence"];
    {PROTOBUF_FIELD_OFFSET(SignerInfo, _impl_.sequence_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
    {::_pbi::TcParser::GetTable<::cosmos::tx::v1beta1::ModeInfo>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SignerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.SignerInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.public_key_ != nullptr);
      _impl_.public_key_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.mode_info_ != nullptr);
      _impl_.mode_info_->Clear();
    }
  }
  _impl_.sequence_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SignerInfo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SignerInfo& this_ = static_cast<const SignerInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SignerInfo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SignerInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.SignerInfo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Any public_key = 1 [json_name = "publicKey"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.public_key_, this_._impl_.public_key_->GetCachedSize(), target,
                stream);
          }

          // .cosmos.tx.v1beta1.ModeInfo mode_info = 2 [json_name = "modeInfo"];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.mode_info_, this_._impl_.mode_info_->GetCachedSize(), target,
                stream);
          }

          // uint64 sequence = 3 [json_name = "sequence"];
          if (this_._internal_sequence() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                3, this_._internal_sequence(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.SignerInfo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SignerInfo::ByteSizeLong(const MessageLite& base) {
          const SignerInfo& this_ = static_cast<const SignerInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SignerInfo::ByteSizeLong() const {
          const SignerInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.SignerInfo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .google.protobuf.Any public_key = 1 [json_name = "publicKey"];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.public_key_);
            }
            // .cosmos.tx.v1beta1.ModeInfo mode_info = 2 [json_name = "modeInfo"];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.mode_info_);
            }
          }
           {
            // uint64 sequence = 3 [json_name = "sequence"];
            if (this_._internal_sequence() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_sequence());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SignerInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SignerInfo*>(&to_msg);
  auto& from = static_cast<const SignerInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.SignerInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.public_key_ != nullptr);
      if (_this->_impl_.public_key_ == nullptr) {
        _this->_impl_.public_key_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Any>(arena, *from._impl_.public_key_);
      } else {
        _this->_impl_.public_key_->MergeFrom(*from._impl_.public_key_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.mode_info_ != nullptr);
      if (_this->_impl_.mode_info_ == nullptr) {
        _this->_impl_.mode_info_ =
            ::google::protobuf::Message::CopyConstruct<::cosmos::tx::v1beta1::ModeInfo>(arena, *from._impl_.mode_info_);
      } else {
        _this->_impl_.mode_info_->MergeFrom(*from._impl_.mode_info_);
      }
    }
  }
  if (from._internal_sequence() != 0) {
    _this->_impl_.sequence_ = from._impl_.sequence_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SignerInfo::CopyFrom(const SignerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.SignerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SignerInfo::InternalSwap(SignerInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignerInfo, _impl_.sequence_)
      + sizeof(SignerInfo::_impl_.sequence_)
      - PROTOBUF_FIELD_OFFSET(SignerInfo, _impl_.public_key_)>(
          reinterpret_cast<char*>(&_impl_.public_key_),
          reinterpret_cast<char*>(&other->_impl_.public_key_));
}

::google::protobuf::Metadata SignerInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ModeInfo_Single::_Internal {
 public:
};

ModeInfo_Single::ModeInfo_Single(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.ModeInfo.Single)
}
ModeInfo_Single::ModeInfo_Single(
    ::google::protobuf::Arena* arena, const ModeInfo_Single& from)
    : ModeInfo_Single(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE ModeInfo_Single::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ModeInfo_Single::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.mode_ = {};
}
ModeInfo_Single::~ModeInfo_Single() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.ModeInfo.Single)
  SharedDtor(*this);
}
inline void ModeInfo_Single::SharedDtor(MessageLite& self) {
  ModeInfo_Single& this_ = static_cast<ModeInfo_Single&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* ModeInfo_Single::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ModeInfo_Single(arena);
}
constexpr auto ModeInfo_Single::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ModeInfo_Single),
                                            alignof(ModeInfo_Single));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ModeInfo_Single::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ModeInfo_Single_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ModeInfo_Single::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ModeInfo_Single>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ModeInfo_Single::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ModeInfo_Single>(), &ModeInfo_Single::ByteSizeLong,
            &ModeInfo_Single::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ModeInfo_Single, _impl_._cached_size_),
        false,
    },
    &ModeInfo_Single::kDescriptorMethods,
    &descriptor_table_cosmos_2ftx_2fv1beta1_2ftx_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ModeInfo_Single::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> ModeInfo_Single::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::tx::v1beta1::ModeInfo_Single>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ModeInfo_Single, _impl_.mode_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ModeInfo_Single, _impl_.mode_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];
    {PROTOBUF_FIELD_OFFSET(ModeInfo_Single, _impl_.mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void ModeInfo_Single::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.ModeInfo.Single)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mode_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ModeInfo_Single::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ModeInfo_Single& this_ = static_cast<const ModeInfo_Single&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ModeInfo_Single::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ModeInfo_Single& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.ModeInfo.Single)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];
          if (this_._internal_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_mode(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.ModeInfo.Single)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ModeInfo_Single::ByteSizeLong(const MessageLite& base) {
          const ModeInfo_Single& this_ = static_cast<const ModeInfo_Single&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ModeInfo_Single::ByteSizeLong() const {
          const ModeInfo_Single& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.ModeInfo.Single)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];
            if (this_._internal_mode() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_mode());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ModeInfo_Single::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ModeInfo_Single*>(&to_msg);
  auto& from = static_cast<const ModeInfo_Single&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.ModeInfo.Single)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mode() != 0) {
    _this->_impl_.mode_ = from._impl_.mode_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ModeInfo_Single::CopyFrom(const ModeInfo_Single& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.ModeInfo.Single)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ModeInfo_Single::InternalSwap(ModeInfo_Single* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.mode_, other->_impl_.mode_);
}

::google::protobuf::Metadata ModeInfo_Single::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ModeInfo_Multi::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ModeInfo_Multi>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ModeInfo_Multi, _impl_._has_bits_);
};

void ModeInfo_Multi::clear_bitarray() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.bitarray_ != nullptr) _impl_.bitarray_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ModeInfo_Multi::ModeInfo_Multi(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.ModeInfo.Multi)
}
inline PROTOBUF_NDEBUG_INLINE ModeInfo_Multi::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::tx::v1beta1::ModeInfo_Multi& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        mode_infos_{visibility, arena, from.mode_infos_} {}

ModeInfo_Multi::ModeInfo_Multi(
    ::google::protobuf::Arena* arena,
    const ModeInfo_Multi& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ModeInfo_Multi* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.bitarray_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::cosmos::crypto::multisig::v1beta1::CompactBitArray>(
                              arena, *from._impl_.bitarray_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.ModeInfo.Multi)
}
inline PROTOBUF_NDEBUG_INLINE ModeInfo_Multi::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        mode_infos_{visibility, arena} {}

inline void ModeInfo_Multi::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.bitarray_ = {};
}
ModeInfo_Multi::~ModeInfo_Multi() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.ModeInfo.Multi)
  SharedDtor(*this);
}
inline void ModeInfo_Multi::SharedDtor(MessageLite& self) {
  ModeInfo_Multi& this_ = static_cast<ModeInfo_Multi&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.bitarray_;
  this_._impl_.~Impl_();
}

inline void* ModeInfo_Multi::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ModeInfo_Multi(arena);
}
constexpr auto ModeInfo_Multi::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ModeInfo_Multi, _impl_.mode_infos_) +
          decltype(ModeInfo_Multi::_impl_.mode_infos_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ModeInfo_Multi), alignof(ModeInfo_Multi), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ModeInfo_Multi::PlacementNew_,
                                 sizeof(ModeInfo_Multi),
                                 alignof(ModeInfo_Multi));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ModeInfo_Multi::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ModeInfo_Multi_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ModeInfo_Multi::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ModeInfo_Multi>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ModeInfo_Multi::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ModeInfo_Multi>(), &ModeInfo_Multi::ByteSizeLong,
            &ModeInfo_Multi::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ModeInfo_Multi, _impl_._cached_size_),
        false,
    },
    &ModeInfo_Multi::kDescriptorMethods,
    &descriptor_table_cosmos_2ftx_2fv1beta1_2ftx_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ModeInfo_Multi::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> ModeInfo_Multi::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ModeInfo_Multi, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::tx::v1beta1::ModeInfo_Multi>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(ModeInfo_Multi, _impl_.mode_infos_)}},
    // .cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ModeInfo_Multi, _impl_.bitarray_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];
    {PROTOBUF_FIELD_OFFSET(ModeInfo_Multi, _impl_.bitarray_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];
    {PROTOBUF_FIELD_OFFSET(ModeInfo_Multi, _impl_.mode_infos_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cosmos::crypto::multisig::v1beta1::CompactBitArray>()},
    {::_pbi::TcParser::GetTable<::cosmos::tx::v1beta1::ModeInfo>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ModeInfo_Multi::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.ModeInfo.Multi)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mode_infos_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.bitarray_ != nullptr);
    _impl_.bitarray_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ModeInfo_Multi::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ModeInfo_Multi& this_ = static_cast<const ModeInfo_Multi&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ModeInfo_Multi::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ModeInfo_Multi& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.ModeInfo.Multi)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.bitarray_, this_._impl_.bitarray_->GetCachedSize(), target,
                stream);
          }

          // repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_mode_infos_size());
               i < n; i++) {
            const auto& repfield = this_._internal_mode_infos().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.ModeInfo.Multi)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ModeInfo_Multi::ByteSizeLong(const MessageLite& base) {
          const ModeInfo_Multi& this_ = static_cast<const ModeInfo_Multi&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ModeInfo_Multi::ByteSizeLong() const {
          const ModeInfo_Multi& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.ModeInfo.Multi)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];
            {
              total_size += 1UL * this_._internal_mode_infos_size();
              for (const auto& msg : this_._internal_mode_infos()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // .cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.bitarray_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ModeInfo_Multi::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ModeInfo_Multi*>(&to_msg);
  auto& from = static_cast<const ModeInfo_Multi&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.ModeInfo.Multi)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_mode_infos()->MergeFrom(
      from._internal_mode_infos());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.bitarray_ != nullptr);
    if (_this->_impl_.bitarray_ == nullptr) {
      _this->_impl_.bitarray_ =
          ::google::protobuf::Message::CopyConstruct<::cosmos::crypto::multisig::v1beta1::CompactBitArray>(arena, *from._impl_.bitarray_);
    } else {
      _this->_impl_.bitarray_->MergeFrom(*from._impl_.bitarray_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ModeInfo_Multi::CopyFrom(const ModeInfo_Multi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.ModeInfo.Multi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ModeInfo_Multi::InternalSwap(ModeInfo_Multi* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mode_infos_.InternalSwap(&other->_impl_.mode_infos_);
  swap(_impl_.bitarray_, other->_impl_.bitarray_);
}

::google::protobuf::Metadata ModeInfo_Multi::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ModeInfo::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::ModeInfo, _impl_._oneof_case_);
};

void ModeInfo::set_allocated_single(::cosmos::tx::v1beta1::ModeInfo_Single* single) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_sum();
  if (single) {
    ::google::protobuf::Arena* submessage_arena = single->GetArena();
    if (message_arena != submessage_arena) {
      single = ::google::protobuf::internal::GetOwnedMessage(message_arena, single, submessage_arena);
    }
    set_has_single();
    _impl_.sum_.single_ = single;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.ModeInfo.single)
}
void ModeInfo::set_allocated_multi(::cosmos::tx::v1beta1::ModeInfo_Multi* multi) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_sum();
  if (multi) {
    ::google::protobuf::Arena* submessage_arena = multi->GetArena();
    if (message_arena != submessage_arena) {
      multi = ::google::protobuf::internal::GetOwnedMessage(message_arena, multi, submessage_arena);
    }
    set_has_multi();
    _impl_.sum_.multi_ = multi;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.ModeInfo.multi)
}
ModeInfo::ModeInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.ModeInfo)
}
inline PROTOBUF_NDEBUG_INLINE ModeInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::tx::v1beta1::ModeInfo& from_msg)
      : sum_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

ModeInfo::ModeInfo(
    ::google::protobuf::Arena* arena,
    const ModeInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ModeInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (sum_case()) {
    case SUM_NOT_SET:
      break;
      case kSingle:
        _impl_.sum_.single_ = ::google::protobuf::Message::CopyConstruct<::cosmos::tx::v1beta1::ModeInfo_Single>(arena, *from._impl_.sum_.single_);
        break;
      case kMulti:
        _impl_.sum_.multi_ = ::google::protobuf::Message::CopyConstruct<::cosmos::tx::v1beta1::ModeInfo_Multi>(arena, *from._impl_.sum_.multi_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.ModeInfo)
}
inline PROTOBUF_NDEBUG_INLINE ModeInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : sum_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void ModeInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ModeInfo::~ModeInfo() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.ModeInfo)
  SharedDtor(*this);
}
inline void ModeInfo::SharedDtor(MessageLite& self) {
  ModeInfo& this_ = static_cast<ModeInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_sum()) {
    this_.clear_sum();
  }
  this_._impl_.~Impl_();
}

void ModeInfo::clear_sum() {
// @@protoc_insertion_point(one_of_clear_start:cosmos.tx.v1beta1.ModeInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (sum_case()) {
    case kSingle: {
      if (GetArena() == nullptr) {
        delete _impl_.sum_.single_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.sum_.single_);
      }
      break;
    }
    case kMulti: {
      if (GetArena() == nullptr) {
        delete _impl_.sum_.multi_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.sum_.multi_);
      }
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SUM_NOT_SET;
}


inline void* ModeInfo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ModeInfo(arena);
}
constexpr auto ModeInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ModeInfo),
                                            alignof(ModeInfo));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ModeInfo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ModeInfo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ModeInfo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ModeInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ModeInfo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ModeInfo>(), &ModeInfo::ByteSizeLong,
            &ModeInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ModeInfo, _impl_._cached_size_),
        false,
    },
    &ModeInfo::kDescriptorMethods,
    &descriptor_table_cosmos_2ftx_2fv1beta1_2ftx_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ModeInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 2, 0, 2> ModeInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::tx::v1beta1::ModeInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .cosmos.tx.v1beta1.ModeInfo.Single single = 1 [json_name = "single"];
    {PROTOBUF_FIELD_OFFSET(ModeInfo, _impl_.sum_.single_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cosmos.tx.v1beta1.ModeInfo.Multi multi = 2 [json_name = "multi"];
    {PROTOBUF_FIELD_OFFSET(ModeInfo, _impl_.sum_.multi_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cosmos::tx::v1beta1::ModeInfo_Single>()},
    {::_pbi::TcParser::GetTable<::cosmos::tx::v1beta1::ModeInfo_Multi>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ModeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.ModeInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_sum();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ModeInfo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ModeInfo& this_ = static_cast<const ModeInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ModeInfo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ModeInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.ModeInfo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.sum_case()) {
            case kSingle: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  1, *this_._impl_.sum_.single_, this_._impl_.sum_.single_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kMulti: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.sum_.multi_, this_._impl_.sum_.multi_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.ModeInfo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ModeInfo::ByteSizeLong(const MessageLite& base) {
          const ModeInfo& this_ = static_cast<const ModeInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ModeInfo::ByteSizeLong() const {
          const ModeInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.ModeInfo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.sum_case()) {
            // .cosmos.tx.v1beta1.ModeInfo.Single single = 1 [json_name = "single"];
            case kSingle: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.sum_.single_);
              break;
            }
            // .cosmos.tx.v1beta1.ModeInfo.Multi multi = 2 [json_name = "multi"];
            case kMulti: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.sum_.multi_);
              break;
            }
            case SUM_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ModeInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ModeInfo*>(&to_msg);
  auto& from = static_cast<const ModeInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.ModeInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_sum();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kSingle: {
        if (oneof_needs_init) {
          _this->_impl_.sum_.single_ =
              ::google::protobuf::Message::CopyConstruct<::cosmos::tx::v1beta1::ModeInfo_Single>(arena, *from._impl_.sum_.single_);
        } else {
          _this->_impl_.sum_.single_->MergeFrom(from._internal_single());
        }
        break;
      }
      case kMulti: {
        if (oneof_needs_init) {
          _this->_impl_.sum_.multi_ =
              ::google::protobuf::Message::CopyConstruct<::cosmos::tx::v1beta1::ModeInfo_Multi>(arena, *from._impl_.sum_.multi_);
        } else {
          _this->_impl_.sum_.multi_->MergeFrom(from._internal_multi());
        }
        break;
      }
      case SUM_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ModeInfo::CopyFrom(const ModeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.ModeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ModeInfo::InternalSwap(ModeInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.sum_, other->_impl_.sum_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata ModeInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Fee::_Internal {
 public:
};

void Fee::clear_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_.Clear();
}
Fee::Fee(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.Fee)
}
inline PROTOBUF_NDEBUG_INLINE Fee::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::tx::v1beta1::Fee& from_msg)
      : amount_{visibility, arena, from.amount_},
        payer_(arena, from.payer_),
        granter_(arena, from.granter_),
        _cached_size_{0} {}

Fee::Fee(
    ::google::protobuf::Arena* arena,
    const Fee& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Fee* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.gas_limit_ = from._impl_.gas_limit_;

  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.Fee)
}
inline PROTOBUF_NDEBUG_INLINE Fee::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : amount_{visibility, arena},
        payer_(arena),
        granter_(arena),
        _cached_size_{0} {}

inline void Fee::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.gas_limit_ = {};
}
Fee::~Fee() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.Fee)
  SharedDtor(*this);
}
inline void Fee::SharedDtor(MessageLite& self) {
  Fee& this_ = static_cast<Fee&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.payer_.Destroy();
  this_._impl_.granter_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Fee::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Fee(arena);
}
constexpr auto Fee::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Fee, _impl_.amount_) +
          decltype(Fee::_impl_.amount_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Fee), alignof(Fee), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Fee::PlacementNew_,
                                 sizeof(Fee),
                                 alignof(Fee));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Fee::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Fee_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Fee::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Fee>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Fee::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Fee>(), &Fee::ByteSizeLong,
            &Fee::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Fee, _impl_._cached_size_),
        false,
    },
    &Fee::kDescriptorMethods,
    &descriptor_table_cosmos_2ftx_2fv1beta1_2ftx_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Fee::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 42, 2> Fee::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::tx::v1beta1::Fee>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string granter = 4 [json_name = "granter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Fee, _impl_.granter_)}},
    // repeated .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Fee, _impl_.amount_)}},
    // uint64 gas_limit = 2 [json_name = "gasLimit"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Fee, _impl_.gas_limit_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Fee, _impl_.gas_limit_)}},
    // string payer = 3 [json_name = "payer", (.cosmos_proto.scalar) = "cosmos.AddressString"];
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Fee, _impl_.payer_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
    {PROTOBUF_FIELD_OFFSET(Fee, _impl_.amount_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint64 gas_limit = 2 [json_name = "gasLimit"];
    {PROTOBUF_FIELD_OFFSET(Fee, _impl_.gas_limit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // string payer = 3 [json_name = "payer", (.cosmos_proto.scalar) = "cosmos.AddressString"];
    {PROTOBUF_FIELD_OFFSET(Fee, _impl_.payer_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string granter = 4 [json_name = "granter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
    {PROTOBUF_FIELD_OFFSET(Fee, _impl_.granter_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cosmos::base::v1beta1::Coin>()},
  }}, {{
    "\25\0\0\5\7\0\0\0"
    "cosmos.tx.v1beta1.Fee"
    "payer"
    "granter"
  }},
};

PROTOBUF_NOINLINE void Fee::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.Fee)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.amount_.Clear();
  _impl_.payer_.ClearToEmpty();
  _impl_.granter_.ClearToEmpty();
  _impl_.gas_limit_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Fee::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Fee& this_ = static_cast<const Fee&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Fee::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Fee& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.Fee)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_amount_size());
               i < n; i++) {
            const auto& repfield = this_._internal_amount().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // uint64 gas_limit = 2 [json_name = "gasLimit"];
          if (this_._internal_gas_limit() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                2, this_._internal_gas_limit(), target);
          }

          // string payer = 3 [json_name = "payer", (.cosmos_proto.scalar) = "cosmos.AddressString"];
          if (!this_._internal_payer().empty()) {
            const std::string& _s = this_._internal_payer();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.tx.v1beta1.Fee.payer");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string granter = 4 [json_name = "granter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
          if (!this_._internal_granter().empty()) {
            const std::string& _s = this_._internal_granter();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.tx.v1beta1.Fee.granter");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.Fee)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Fee::ByteSizeLong(const MessageLite& base) {
          const Fee& this_ = static_cast<const Fee&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Fee::ByteSizeLong() const {
          const Fee& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.Fee)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
            {
              total_size += 1UL * this_._internal_amount_size();
              for (const auto& msg : this_._internal_amount()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string payer = 3 [json_name = "payer", (.cosmos_proto.scalar) = "cosmos.AddressString"];
            if (!this_._internal_payer().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_payer());
            }
            // string granter = 4 [json_name = "granter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
            if (!this_._internal_granter().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_granter());
            }
            // uint64 gas_limit = 2 [json_name = "gasLimit"];
            if (this_._internal_gas_limit() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_gas_limit());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Fee::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Fee*>(&to_msg);
  auto& from = static_cast<const Fee&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.Fee)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_amount()->MergeFrom(
      from._internal_amount());
  if (!from._internal_payer().empty()) {
    _this->_internal_set_payer(from._internal_payer());
  }
  if (!from._internal_granter().empty()) {
    _this->_internal_set_granter(from._internal_granter());
  }
  if (from._internal_gas_limit() != 0) {
    _this->_impl_.gas_limit_ = from._impl_.gas_limit_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Fee::CopyFrom(const Fee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.Fee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Fee::InternalSwap(Fee* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.amount_.InternalSwap(&other->_impl_.amount_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payer_, &other->_impl_.payer_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.granter_, &other->_impl_.granter_, arena);
        swap(_impl_.gas_limit_, other->_impl_.gas_limit_);
}

::google::protobuf::Metadata Fee::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Tip::_Internal {
 public:
};

void Tip::clear_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_.Clear();
}
Tip::Tip(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.Tip)
}
inline PROTOBUF_NDEBUG_INLINE Tip::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::tx::v1beta1::Tip& from_msg)
      : amount_{visibility, arena, from.amount_},
        tipper_(arena, from.tipper_),
        _cached_size_{0} {}

Tip::Tip(
    ::google::protobuf::Arena* arena,
    const Tip& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Tip* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.Tip)
}
inline PROTOBUF_NDEBUG_INLINE Tip::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : amount_{visibility, arena},
        tipper_(arena),
        _cached_size_{0} {}

inline void Tip::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Tip::~Tip() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.Tip)
  SharedDtor(*this);
}
inline void Tip::SharedDtor(MessageLite& self) {
  Tip& this_ = static_cast<Tip&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.tipper_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Tip::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Tip(arena);
}
constexpr auto Tip::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Tip, _impl_.amount_) +
          decltype(Tip::_impl_.amount_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Tip), alignof(Tip), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Tip::PlacementNew_,
                                 sizeof(Tip),
                                 alignof(Tip));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Tip::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Tip_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Tip::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Tip>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Tip::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Tip>(), &Tip::ByteSizeLong,
            &Tip::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Tip, _impl_._cached_size_),
        false,
    },
    &Tip::kDescriptorMethods,
    &descriptor_table_cosmos_2ftx_2fv1beta1_2ftx_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Tip::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 36, 2> Tip::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::tx::v1beta1::Tip>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string tipper = 2 [json_name = "tipper", (.cosmos_proto.scalar) = "cosmos.AddressString"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Tip, _impl_.tipper_)}},
    // repeated .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Tip, _impl_.amount_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
    {PROTOBUF_FIELD_OFFSET(Tip, _impl_.amount_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string tipper = 2 [json_name = "tipper", (.cosmos_proto.scalar) = "cosmos.AddressString"];
    {PROTOBUF_FIELD_OFFSET(Tip, _impl_.tipper_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cosmos::base::v1beta1::Coin>()},
  }}, {{
    "\25\0\6\0\0\0\0\0"
    "cosmos.tx.v1beta1.Tip"
    "tipper"
  }},
};

PROTOBUF_NOINLINE void Tip::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.Tip)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.amount_.Clear();
  _impl_.tipper_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Tip::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Tip& this_ = static_cast<const Tip&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Tip::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Tip& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.Tip)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_amount_size());
               i < n; i++) {
            const auto& repfield = this_._internal_amount().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // string tipper = 2 [json_name = "tipper", (.cosmos_proto.scalar) = "cosmos.AddressString"];
          if (!this_._internal_tipper().empty()) {
            const std::string& _s = this_._internal_tipper();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.tx.v1beta1.Tip.tipper");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.Tip)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Tip::ByteSizeLong(const MessageLite& base) {
          const Tip& this_ = static_cast<const Tip&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Tip::ByteSizeLong() const {
          const Tip& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.Tip)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
            {
              total_size += 1UL * this_._internal_amount_size();
              for (const auto& msg : this_._internal_amount()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string tipper = 2 [json_name = "tipper", (.cosmos_proto.scalar) = "cosmos.AddressString"];
            if (!this_._internal_tipper().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_tipper());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Tip::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Tip*>(&to_msg);
  auto& from = static_cast<const Tip&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.Tip)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_amount()->MergeFrom(
      from._internal_amount());
  if (!from._internal_tipper().empty()) {
    _this->_internal_set_tipper(from._internal_tipper());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Tip::CopyFrom(const Tip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.Tip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Tip::InternalSwap(Tip* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.amount_.InternalSwap(&other->_impl_.amount_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tipper_, &other->_impl_.tipper_, arena);
}

::google::protobuf::Metadata Tip::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AuxSignerData::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AuxSignerData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AuxSignerData, _impl_._has_bits_);
};

AuxSignerData::AuxSignerData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.AuxSignerData)
}
inline PROTOBUF_NDEBUG_INLINE AuxSignerData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::tx::v1beta1::AuxSignerData& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        address_(arena, from.address_),
        sig_(arena, from.sig_) {}

AuxSignerData::AuxSignerData(
    ::google::protobuf::Arena* arena,
    const AuxSignerData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AuxSignerData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.sign_doc_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::cosmos::tx::v1beta1::SignDocDirectAux>(
                              arena, *from._impl_.sign_doc_)
                        : nullptr;
  _impl_.mode_ = from._impl_.mode_;

  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.AuxSignerData)
}
inline PROTOBUF_NDEBUG_INLINE AuxSignerData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        address_(arena),
        sig_(arena) {}

inline void AuxSignerData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sign_doc_),
           0,
           offsetof(Impl_, mode_) -
               offsetof(Impl_, sign_doc_) +
               sizeof(Impl_::mode_));
}
AuxSignerData::~AuxSignerData() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.AuxSignerData)
  SharedDtor(*this);
}
inline void AuxSignerData::SharedDtor(MessageLite& self) {
  AuxSignerData& this_ = static_cast<AuxSignerData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.address_.Destroy();
  this_._impl_.sig_.Destroy();
  delete this_._impl_.sign_doc_;
  this_._impl_.~Impl_();
}

inline void* AuxSignerData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AuxSignerData(arena);
}
constexpr auto AuxSignerData::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AuxSignerData),
                                            alignof(AuxSignerData));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AuxSignerData::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AuxSignerData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AuxSignerData::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AuxSignerData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AuxSignerData::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AuxSignerData>(), &AuxSignerData::ByteSizeLong,
            &AuxSignerData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AuxSignerData, _impl_._cached_size_),
        false,
    },
    &AuxSignerData::kDescriptorMethods,
    &descriptor_table_cosmos_2ftx_2fv1beta1_2ftx_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AuxSignerData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 47, 2> AuxSignerData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AuxSignerData, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::tx::v1beta1::AuxSignerData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bytes sig = 4 [json_name = "sig"];
    {::_pbi::TcParser::FastBS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(AuxSignerData, _impl_.sig_)}},
    // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AuxSignerData, _impl_.address_)}},
    // .cosmos.tx.v1beta1.SignDocDirectAux sign_doc = 2 [json_name = "signDoc"];
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(AuxSignerData, _impl_.sign_doc_)}},
    // .cosmos.tx.signing.v1beta1.SignMode mode = 3 [json_name = "mode"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AuxSignerData, _impl_.mode_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(AuxSignerData, _impl_.mode_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
    {PROTOBUF_FIELD_OFFSET(AuxSignerData, _impl_.address_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .cosmos.tx.v1beta1.SignDocDirectAux sign_doc = 2 [json_name = "signDoc"];
    {PROTOBUF_FIELD_OFFSET(AuxSignerData, _impl_.sign_doc_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cosmos.tx.signing.v1beta1.SignMode mode = 3 [json_name = "mode"];
    {PROTOBUF_FIELD_OFFSET(AuxSignerData, _impl_.mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bytes sig = 4 [json_name = "sig"];
    {PROTOBUF_FIELD_OFFSET(AuxSignerData, _impl_.sig_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cosmos::tx::v1beta1::SignDocDirectAux>()},
  }}, {{
    "\37\7\0\0\0\0\0\0"
    "cosmos.tx.v1beta1.AuxSignerData"
    "address"
  }},
};

PROTOBUF_NOINLINE void AuxSignerData::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.AuxSignerData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.sig_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.sign_doc_ != nullptr);
    _impl_.sign_doc_->Clear();
  }
  _impl_.mode_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AuxSignerData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AuxSignerData& this_ = static_cast<const AuxSignerData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AuxSignerData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AuxSignerData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.AuxSignerData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
          if (!this_._internal_address().empty()) {
            const std::string& _s = this_._internal_address();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.tx.v1beta1.AuxSignerData.address");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .cosmos.tx.v1beta1.SignDocDirectAux sign_doc = 2 [json_name = "signDoc"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.sign_doc_, this_._impl_.sign_doc_->GetCachedSize(), target,
                stream);
          }

          // .cosmos.tx.signing.v1beta1.SignMode mode = 3 [json_name = "mode"];
          if (this_._internal_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_mode(), target);
          }

          // bytes sig = 4 [json_name = "sig"];
          if (!this_._internal_sig().empty()) {
            const std::string& _s = this_._internal_sig();
            target = stream->WriteBytesMaybeAliased(4, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.AuxSignerData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AuxSignerData::ByteSizeLong(const MessageLite& base) {
          const AuxSignerData& this_ = static_cast<const AuxSignerData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AuxSignerData::ByteSizeLong() const {
          const AuxSignerData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.AuxSignerData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
            if (!this_._internal_address().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_address());
            }
            // bytes sig = 4 [json_name = "sig"];
            if (!this_._internal_sig().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_sig());
            }
          }
           {
            // .cosmos.tx.v1beta1.SignDocDirectAux sign_doc = 2 [json_name = "signDoc"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.sign_doc_);
            }
          }
           {
            // .cosmos.tx.signing.v1beta1.SignMode mode = 3 [json_name = "mode"];
            if (this_._internal_mode() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_mode());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AuxSignerData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AuxSignerData*>(&to_msg);
  auto& from = static_cast<const AuxSignerData&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.AuxSignerData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_sig().empty()) {
    _this->_internal_set_sig(from._internal_sig());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.sign_doc_ != nullptr);
    if (_this->_impl_.sign_doc_ == nullptr) {
      _this->_impl_.sign_doc_ =
          ::google::protobuf::Message::CopyConstruct<::cosmos::tx::v1beta1::SignDocDirectAux>(arena, *from._impl_.sign_doc_);
    } else {
      _this->_impl_.sign_doc_->MergeFrom(*from._impl_.sign_doc_);
    }
  }
  if (from._internal_mode() != 0) {
    _this->_impl_.mode_ = from._impl_.mode_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AuxSignerData::CopyFrom(const AuxSignerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.AuxSignerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AuxSignerData::InternalSwap(AuxSignerData* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, &other->_impl_.address_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sig_, &other->_impl_.sig_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuxSignerData, _impl_.mode_)
      + sizeof(AuxSignerData::_impl_.mode_)
      - PROTOBUF_FIELD_OFFSET(AuxSignerData, _impl_.sign_doc_)>(
          reinterpret_cast<char*>(&_impl_.sign_doc_),
          reinterpret_cast<char*>(&other->_impl_.sign_doc_));
}

::google::protobuf::Metadata AuxSignerData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace tx
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_cosmos_2ftx_2fv1beta1_2ftx_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
