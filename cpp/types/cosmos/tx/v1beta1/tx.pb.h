// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/tx/v1beta1/tx.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2ftx_2fv1beta1_2ftx_2eproto_2epb_2eh
#define cosmos_2ftx_2fv1beta1_2ftx_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "amino/amino.pb.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos/crypto/multisig/v1beta1/multisig.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
#include "cosmos/tx/signing/v1beta1/signing.pb.h"
#include "google/protobuf/any.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2ftx_2fv1beta1_2ftx_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2ftx_2fv1beta1_2ftx_2eproto;
namespace cosmos {
namespace tx {
namespace v1beta1 {
class AuthInfo;
struct AuthInfoDefaultTypeInternal;
extern AuthInfoDefaultTypeInternal _AuthInfo_default_instance_;
class AuxSignerData;
struct AuxSignerDataDefaultTypeInternal;
extern AuxSignerDataDefaultTypeInternal _AuxSignerData_default_instance_;
class Fee;
struct FeeDefaultTypeInternal;
extern FeeDefaultTypeInternal _Fee_default_instance_;
class ModeInfo;
struct ModeInfoDefaultTypeInternal;
extern ModeInfoDefaultTypeInternal _ModeInfo_default_instance_;
class ModeInfo_Multi;
struct ModeInfo_MultiDefaultTypeInternal;
extern ModeInfo_MultiDefaultTypeInternal _ModeInfo_Multi_default_instance_;
class ModeInfo_Single;
struct ModeInfo_SingleDefaultTypeInternal;
extern ModeInfo_SingleDefaultTypeInternal _ModeInfo_Single_default_instance_;
class SignDoc;
struct SignDocDefaultTypeInternal;
extern SignDocDefaultTypeInternal _SignDoc_default_instance_;
class SignDocDirectAux;
struct SignDocDirectAuxDefaultTypeInternal;
extern SignDocDirectAuxDefaultTypeInternal _SignDocDirectAux_default_instance_;
class SignerInfo;
struct SignerInfoDefaultTypeInternal;
extern SignerInfoDefaultTypeInternal _SignerInfo_default_instance_;
class Tip;
struct TipDefaultTypeInternal;
extern TipDefaultTypeInternal _Tip_default_instance_;
class Tx;
struct TxDefaultTypeInternal;
extern TxDefaultTypeInternal _Tx_default_instance_;
class TxBody;
struct TxBodyDefaultTypeInternal;
extern TxBodyDefaultTypeInternal _TxBody_default_instance_;
class TxRaw;
struct TxRawDefaultTypeInternal;
extern TxRawDefaultTypeInternal _TxRaw_default_instance_;
}  // namespace v1beta1
}  // namespace tx
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace tx {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class TxRaw final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.TxRaw) */ {
 public:
  inline TxRaw() : TxRaw(nullptr) {}
  ~TxRaw() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TxRaw* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TxRaw));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TxRaw(
      ::google::protobuf::internal::ConstantInitialized);

  inline TxRaw(const TxRaw& from) : TxRaw(nullptr, from) {}
  inline TxRaw(TxRaw&& from) noexcept
      : TxRaw(nullptr, std::move(from)) {}
  inline TxRaw& operator=(const TxRaw& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxRaw& operator=(TxRaw&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxRaw& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxRaw* internal_default_instance() {
    return reinterpret_cast<const TxRaw*>(
        &_TxRaw_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(TxRaw& a, TxRaw& b) { a.Swap(&b); }
  inline void Swap(TxRaw* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxRaw* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxRaw* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TxRaw>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TxRaw& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TxRaw& from) { TxRaw::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TxRaw* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.tx.v1beta1.TxRaw"; }

 protected:
  explicit TxRaw(::google::protobuf::Arena* arena);
  TxRaw(::google::protobuf::Arena* arena, const TxRaw& from);
  TxRaw(::google::protobuf::Arena* arena, TxRaw&& from) noexcept
      : TxRaw(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSignaturesFieldNumber = 3,
    kBodyBytesFieldNumber = 1,
    kAuthInfoBytesFieldNumber = 2,
  };
  // repeated bytes signatures = 3 [json_name = "signatures"];
  int signatures_size() const;
  private:
  int _internal_signatures_size() const;

  public:
  void clear_signatures() ;
  const std::string& signatures(int index) const;
  std::string* mutable_signatures(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signatures(int index, Arg_&& value, Args_... args);
  std::string* add_signatures();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_signatures(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& signatures() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_signatures();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_signatures() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_signatures();

  public:
  // bytes body_bytes = 1 [json_name = "bodyBytes"];
  void clear_body_bytes() ;
  const std::string& body_bytes() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_body_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_body_bytes();
  PROTOBUF_NODISCARD std::string* release_body_bytes();
  void set_allocated_body_bytes(std::string* value);

  private:
  const std::string& _internal_body_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body_bytes(
      const std::string& value);
  std::string* _internal_mutable_body_bytes();

  public:
  // bytes auth_info_bytes = 2 [json_name = "authInfoBytes"];
  void clear_auth_info_bytes() ;
  const std::string& auth_info_bytes() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_auth_info_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_auth_info_bytes();
  PROTOBUF_NODISCARD std::string* release_auth_info_bytes();
  void set_allocated_auth_info_bytes(std::string* value);

  private:
  const std::string& _internal_auth_info_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auth_info_bytes(
      const std::string& value);
  std::string* _internal_mutable_auth_info_bytes();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.TxRaw)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TxRaw& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> signatures_;
    ::google::protobuf::internal::ArenaStringPtr body_bytes_;
    ::google::protobuf::internal::ArenaStringPtr auth_info_bytes_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class SignDoc final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.SignDoc) */ {
 public:
  inline SignDoc() : SignDoc(nullptr) {}
  ~SignDoc() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SignDoc* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SignDoc));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SignDoc(
      ::google::protobuf::internal::ConstantInitialized);

  inline SignDoc(const SignDoc& from) : SignDoc(nullptr, from) {}
  inline SignDoc(SignDoc&& from) noexcept
      : SignDoc(nullptr, std::move(from)) {}
  inline SignDoc& operator=(const SignDoc& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignDoc& operator=(SignDoc&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignDoc& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignDoc* internal_default_instance() {
    return reinterpret_cast<const SignDoc*>(
        &_SignDoc_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(SignDoc& a, SignDoc& b) { a.Swap(&b); }
  inline void Swap(SignDoc* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignDoc* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignDoc* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SignDoc>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SignDoc& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SignDoc& from) { SignDoc::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SignDoc* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.tx.v1beta1.SignDoc"; }

 protected:
  explicit SignDoc(::google::protobuf::Arena* arena);
  SignDoc(::google::protobuf::Arena* arena, const SignDoc& from);
  SignDoc(::google::protobuf::Arena* arena, SignDoc&& from) noexcept
      : SignDoc(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBodyBytesFieldNumber = 1,
    kAuthInfoBytesFieldNumber = 2,
    kChainIdFieldNumber = 3,
    kAccountNumberFieldNumber = 4,
  };
  // bytes body_bytes = 1 [json_name = "bodyBytes"];
  void clear_body_bytes() ;
  const std::string& body_bytes() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_body_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_body_bytes();
  PROTOBUF_NODISCARD std::string* release_body_bytes();
  void set_allocated_body_bytes(std::string* value);

  private:
  const std::string& _internal_body_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body_bytes(
      const std::string& value);
  std::string* _internal_mutable_body_bytes();

  public:
  // bytes auth_info_bytes = 2 [json_name = "authInfoBytes"];
  void clear_auth_info_bytes() ;
  const std::string& auth_info_bytes() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_auth_info_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_auth_info_bytes();
  PROTOBUF_NODISCARD std::string* release_auth_info_bytes();
  void set_allocated_auth_info_bytes(std::string* value);

  private:
  const std::string& _internal_auth_info_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auth_info_bytes(
      const std::string& value);
  std::string* _internal_mutable_auth_info_bytes();

  public:
  // string chain_id = 3 [json_name = "chainId"];
  void clear_chain_id() ;
  const std::string& chain_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chain_id(Arg_&& arg, Args_... args);
  std::string* mutable_chain_id();
  PROTOBUF_NODISCARD std::string* release_chain_id();
  void set_allocated_chain_id(std::string* value);

  private:
  const std::string& _internal_chain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chain_id(
      const std::string& value);
  std::string* _internal_mutable_chain_id();

  public:
  // uint64 account_number = 4 [json_name = "accountNumber"];
  void clear_account_number() ;
  ::uint64_t account_number() const;
  void set_account_number(::uint64_t value);

  private:
  ::uint64_t _internal_account_number() const;
  void _internal_set_account_number(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.SignDoc)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      42, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SignDoc& from_msg);
    ::google::protobuf::internal::ArenaStringPtr body_bytes_;
    ::google::protobuf::internal::ArenaStringPtr auth_info_bytes_;
    ::google::protobuf::internal::ArenaStringPtr chain_id_;
    ::uint64_t account_number_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class ModeInfo_Single final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.ModeInfo.Single) */ {
 public:
  inline ModeInfo_Single() : ModeInfo_Single(nullptr) {}
  ~ModeInfo_Single() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ModeInfo_Single* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ModeInfo_Single));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ModeInfo_Single(
      ::google::protobuf::internal::ConstantInitialized);

  inline ModeInfo_Single(const ModeInfo_Single& from) : ModeInfo_Single(nullptr, from) {}
  inline ModeInfo_Single(ModeInfo_Single&& from) noexcept
      : ModeInfo_Single(nullptr, std::move(from)) {}
  inline ModeInfo_Single& operator=(const ModeInfo_Single& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModeInfo_Single& operator=(ModeInfo_Single&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModeInfo_Single& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModeInfo_Single* internal_default_instance() {
    return reinterpret_cast<const ModeInfo_Single*>(
        &_ModeInfo_Single_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(ModeInfo_Single& a, ModeInfo_Single& b) { a.Swap(&b); }
  inline void Swap(ModeInfo_Single* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModeInfo_Single* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModeInfo_Single* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ModeInfo_Single>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ModeInfo_Single& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ModeInfo_Single& from) { ModeInfo_Single::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ModeInfo_Single* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.tx.v1beta1.ModeInfo.Single"; }

 protected:
  explicit ModeInfo_Single(::google::protobuf::Arena* arena);
  ModeInfo_Single(::google::protobuf::Arena* arena, const ModeInfo_Single& from);
  ModeInfo_Single(::google::protobuf::Arena* arena, ModeInfo_Single&& from) noexcept
      : ModeInfo_Single(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kModeFieldNumber = 1,
  };
  // .cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];
  void clear_mode() ;
  ::cosmos::tx::signing::v1beta1::SignMode mode() const;
  void set_mode(::cosmos::tx::signing::v1beta1::SignMode value);

  private:
  ::cosmos::tx::signing::v1beta1::SignMode _internal_mode() const;
  void _internal_set_mode(::cosmos::tx::signing::v1beta1::SignMode value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.ModeInfo.Single)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ModeInfo_Single& from_msg);
    int mode_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class TxBody final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.TxBody) */ {
 public:
  inline TxBody() : TxBody(nullptr) {}
  ~TxBody() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TxBody* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TxBody));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TxBody(
      ::google::protobuf::internal::ConstantInitialized);

  inline TxBody(const TxBody& from) : TxBody(nullptr, from) {}
  inline TxBody(TxBody&& from) noexcept
      : TxBody(nullptr, std::move(from)) {}
  inline TxBody& operator=(const TxBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxBody& operator=(TxBody&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxBody* internal_default_instance() {
    return reinterpret_cast<const TxBody*>(
        &_TxBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(TxBody& a, TxBody& b) { a.Swap(&b); }
  inline void Swap(TxBody* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxBody* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxBody* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TxBody>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TxBody& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TxBody& from) { TxBody::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TxBody* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.tx.v1beta1.TxBody"; }

 protected:
  explicit TxBody(::google::protobuf::Arena* arena);
  TxBody(::google::protobuf::Arena* arena, const TxBody& from);
  TxBody(::google::protobuf::Arena* arena, TxBody&& from) noexcept
      : TxBody(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessagesFieldNumber = 1,
    kExtensionOptionsFieldNumber = 1023,
    kNonCriticalExtensionOptionsFieldNumber = 2047,
    kMemoFieldNumber = 2,
    kTimeoutTimestampFieldNumber = 5,
    kTimeoutHeightFieldNumber = 3,
    kUnorderedFieldNumber = 4,
  };
  // repeated .google.protobuf.Any messages = 1 [json_name = "messages"];
  int messages_size() const;
  private:
  int _internal_messages_size() const;

  public:
  void clear_messages() ;
  ::google::protobuf::Any* mutable_messages(int index);
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* mutable_messages();

  private:
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& _internal_messages() const;
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* _internal_mutable_messages();
  public:
  const ::google::protobuf::Any& messages(int index) const;
  ::google::protobuf::Any* add_messages();
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& messages() const;
  // repeated .google.protobuf.Any extension_options = 1023 [json_name = "extensionOptions"];
  int extension_options_size() const;
  private:
  int _internal_extension_options_size() const;

  public:
  void clear_extension_options() ;
  ::google::protobuf::Any* mutable_extension_options(int index);
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* mutable_extension_options();

  private:
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& _internal_extension_options() const;
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* _internal_mutable_extension_options();
  public:
  const ::google::protobuf::Any& extension_options(int index) const;
  ::google::protobuf::Any* add_extension_options();
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& extension_options() const;
  // repeated .google.protobuf.Any non_critical_extension_options = 2047 [json_name = "nonCriticalExtensionOptions"];
  int non_critical_extension_options_size() const;
  private:
  int _internal_non_critical_extension_options_size() const;

  public:
  void clear_non_critical_extension_options() ;
  ::google::protobuf::Any* mutable_non_critical_extension_options(int index);
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* mutable_non_critical_extension_options();

  private:
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& _internal_non_critical_extension_options() const;
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* _internal_mutable_non_critical_extension_options();
  public:
  const ::google::protobuf::Any& non_critical_extension_options(int index) const;
  ::google::protobuf::Any* add_non_critical_extension_options();
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& non_critical_extension_options() const;
  // string memo = 2 [json_name = "memo"];
  void clear_memo() ;
  const std::string& memo() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_memo(Arg_&& arg, Args_... args);
  std::string* mutable_memo();
  PROTOBUF_NODISCARD std::string* release_memo();
  void set_allocated_memo(std::string* value);

  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(
      const std::string& value);
  std::string* _internal_mutable_memo();

  public:
  // .google.protobuf.Timestamp timeout_timestamp = 5 [json_name = "timeoutTimestamp", (.gogoproto.nullable) = true, (.gogoproto.stdtime) = true, (.cosmos_proto.field_added_in) = "cosmos-sdk 0.53"];
  bool has_timeout_timestamp() const;
  void clear_timeout_timestamp() ;
  const ::google::protobuf::Timestamp& timeout_timestamp() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_timeout_timestamp();
  ::google::protobuf::Timestamp* mutable_timeout_timestamp();
  void set_allocated_timeout_timestamp(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_timeout_timestamp(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_timeout_timestamp();

  private:
  const ::google::protobuf::Timestamp& _internal_timeout_timestamp() const;
  ::google::protobuf::Timestamp* _internal_mutable_timeout_timestamp();

  public:
  // uint64 timeout_height = 3 [json_name = "timeoutHeight"];
  void clear_timeout_height() ;
  ::uint64_t timeout_height() const;
  void set_timeout_height(::uint64_t value);

  private:
  ::uint64_t _internal_timeout_height() const;
  void _internal_set_timeout_height(::uint64_t value);

  public:
  // bool unordered = 4 [json_name = "unordered", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.53"];
  void clear_unordered() ;
  bool unordered() const;
  void set_unordered(bool value);

  private:
  bool _internal_unordered() const;
  void _internal_set_unordered(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.TxBody)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 4,
      37, 12>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TxBody& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > messages_;
    ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_options_;
    ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > non_critical_extension_options_;
    ::google::protobuf::internal::ArenaStringPtr memo_;
    ::google::protobuf::Timestamp* timeout_timestamp_;
    ::uint64_t timeout_height_;
    bool unordered_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class Tip final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.Tip) */ {
 public:
  inline Tip() : Tip(nullptr) {}
  ~Tip() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Tip* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Tip));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Tip(
      ::google::protobuf::internal::ConstantInitialized);

  inline Tip(const Tip& from) : Tip(nullptr, from) {}
  inline Tip(Tip&& from) noexcept
      : Tip(nullptr, std::move(from)) {}
  inline Tip& operator=(const Tip& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tip& operator=(Tip&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Tip& default_instance() {
    return *internal_default_instance();
  }
  static inline const Tip* internal_default_instance() {
    return reinterpret_cast<const Tip*>(
        &_Tip_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(Tip& a, Tip& b) { a.Swap(&b); }
  inline void Swap(Tip* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tip* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Tip* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Tip>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Tip& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Tip& from) { Tip::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Tip* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.tx.v1beta1.Tip"; }

 protected:
  explicit Tip(::google::protobuf::Arena* arena);
  Tip(::google::protobuf::Arena* arena, const Tip& from);
  Tip(::google::protobuf::Arena* arena, Tip&& from) noexcept
      : Tip(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAmountFieldNumber = 1,
    kTipperFieldNumber = 2,
  };
  // repeated .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
  int amount_size() const;
  private:
  int _internal_amount_size() const;

  public:
  void clear_amount() ;
  ::cosmos::base::v1beta1::Coin* mutable_amount(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* mutable_amount();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_amount() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_amount();
  public:
  const ::cosmos::base::v1beta1::Coin& amount(int index) const;
  ::cosmos::base::v1beta1::Coin* add_amount();
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& amount() const;
  // string tipper = 2 [json_name = "tipper", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_tipper() ;
  const std::string& tipper() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tipper(Arg_&& arg, Args_... args);
  std::string* mutable_tipper();
  PROTOBUF_NODISCARD std::string* release_tipper();
  void set_allocated_tipper(std::string* value);

  private:
  const std::string& _internal_tipper() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tipper(
      const std::string& value);
  std::string* _internal_mutable_tipper();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.Tip)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      36, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Tip& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > amount_;
    ::google::protobuf::internal::ArenaStringPtr tipper_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class ModeInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.ModeInfo) */ {
 public:
  inline ModeInfo() : ModeInfo(nullptr) {}
  ~ModeInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ModeInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ModeInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ModeInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline ModeInfo(const ModeInfo& from) : ModeInfo(nullptr, from) {}
  inline ModeInfo(ModeInfo&& from) noexcept
      : ModeInfo(nullptr, std::move(from)) {}
  inline ModeInfo& operator=(const ModeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModeInfo& operator=(ModeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModeInfo& default_instance() {
    return *internal_default_instance();
  }
  enum SumCase {
    kSingle = 1,
    kMulti = 2,
    SUM_NOT_SET = 0,
  };
  static inline const ModeInfo* internal_default_instance() {
    return reinterpret_cast<const ModeInfo*>(
        &_ModeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(ModeInfo& a, ModeInfo& b) { a.Swap(&b); }
  inline void Swap(ModeInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModeInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModeInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ModeInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ModeInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ModeInfo& from) { ModeInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ModeInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.tx.v1beta1.ModeInfo"; }

 protected:
  explicit ModeInfo(::google::protobuf::Arena* arena);
  ModeInfo(::google::protobuf::Arena* arena, const ModeInfo& from);
  ModeInfo(::google::protobuf::Arena* arena, ModeInfo&& from) noexcept
      : ModeInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Single = ModeInfo_Single;
  using Multi = ModeInfo_Multi;

  // accessors -------------------------------------------------------
  enum : int {
    kSingleFieldNumber = 1,
    kMultiFieldNumber = 2,
  };
  // .cosmos.tx.v1beta1.ModeInfo.Single single = 1 [json_name = "single"];
  bool has_single() const;
  private:
  bool _internal_has_single() const;

  public:
  void clear_single() ;
  const ::cosmos::tx::v1beta1::ModeInfo_Single& single() const;
  PROTOBUF_NODISCARD ::cosmos::tx::v1beta1::ModeInfo_Single* release_single();
  ::cosmos::tx::v1beta1::ModeInfo_Single* mutable_single();
  void set_allocated_single(::cosmos::tx::v1beta1::ModeInfo_Single* value);
  void unsafe_arena_set_allocated_single(::cosmos::tx::v1beta1::ModeInfo_Single* value);
  ::cosmos::tx::v1beta1::ModeInfo_Single* unsafe_arena_release_single();

  private:
  const ::cosmos::tx::v1beta1::ModeInfo_Single& _internal_single() const;
  ::cosmos::tx::v1beta1::ModeInfo_Single* _internal_mutable_single();

  public:
  // .cosmos.tx.v1beta1.ModeInfo.Multi multi = 2 [json_name = "multi"];
  bool has_multi() const;
  private:
  bool _internal_has_multi() const;

  public:
  void clear_multi() ;
  const ::cosmos::tx::v1beta1::ModeInfo_Multi& multi() const;
  PROTOBUF_NODISCARD ::cosmos::tx::v1beta1::ModeInfo_Multi* release_multi();
  ::cosmos::tx::v1beta1::ModeInfo_Multi* mutable_multi();
  void set_allocated_multi(::cosmos::tx::v1beta1::ModeInfo_Multi* value);
  void unsafe_arena_set_allocated_multi(::cosmos::tx::v1beta1::ModeInfo_Multi* value);
  ::cosmos::tx::v1beta1::ModeInfo_Multi* unsafe_arena_release_multi();

  private:
  const ::cosmos::tx::v1beta1::ModeInfo_Multi& _internal_multi() const;
  ::cosmos::tx::v1beta1::ModeInfo_Multi* _internal_mutable_multi();

  public:
  void clear_sum();
  SumCase sum_case() const;
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.ModeInfo)
 private:
  class _Internal;
  void set_has_single();
  void set_has_multi();
  inline bool has_sum() const;
  inline void clear_has_sum();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ModeInfo& from_msg);
    union SumUnion {
      constexpr SumUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::cosmos::tx::v1beta1::ModeInfo_Single* single_;
      ::cosmos::tx::v1beta1::ModeInfo_Multi* multi_;
    } sum_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class ModeInfo_Multi final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.ModeInfo.Multi) */ {
 public:
  inline ModeInfo_Multi() : ModeInfo_Multi(nullptr) {}
  ~ModeInfo_Multi() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ModeInfo_Multi* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ModeInfo_Multi));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ModeInfo_Multi(
      ::google::protobuf::internal::ConstantInitialized);

  inline ModeInfo_Multi(const ModeInfo_Multi& from) : ModeInfo_Multi(nullptr, from) {}
  inline ModeInfo_Multi(ModeInfo_Multi&& from) noexcept
      : ModeInfo_Multi(nullptr, std::move(from)) {}
  inline ModeInfo_Multi& operator=(const ModeInfo_Multi& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModeInfo_Multi& operator=(ModeInfo_Multi&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModeInfo_Multi& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModeInfo_Multi* internal_default_instance() {
    return reinterpret_cast<const ModeInfo_Multi*>(
        &_ModeInfo_Multi_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(ModeInfo_Multi& a, ModeInfo_Multi& b) { a.Swap(&b); }
  inline void Swap(ModeInfo_Multi* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModeInfo_Multi* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModeInfo_Multi* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ModeInfo_Multi>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ModeInfo_Multi& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ModeInfo_Multi& from) { ModeInfo_Multi::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ModeInfo_Multi* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.tx.v1beta1.ModeInfo.Multi"; }

 protected:
  explicit ModeInfo_Multi(::google::protobuf::Arena* arena);
  ModeInfo_Multi(::google::protobuf::Arena* arena, const ModeInfo_Multi& from);
  ModeInfo_Multi(::google::protobuf::Arena* arena, ModeInfo_Multi&& from) noexcept
      : ModeInfo_Multi(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kModeInfosFieldNumber = 2,
    kBitarrayFieldNumber = 1,
  };
  // repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];
  int mode_infos_size() const;
  private:
  int _internal_mode_infos_size() const;

  public:
  void clear_mode_infos() ;
  ::cosmos::tx::v1beta1::ModeInfo* mutable_mode_infos(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::tx::v1beta1::ModeInfo>* mutable_mode_infos();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::tx::v1beta1::ModeInfo>& _internal_mode_infos() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::tx::v1beta1::ModeInfo>* _internal_mutable_mode_infos();
  public:
  const ::cosmos::tx::v1beta1::ModeInfo& mode_infos(int index) const;
  ::cosmos::tx::v1beta1::ModeInfo* add_mode_infos();
  const ::google::protobuf::RepeatedPtrField<::cosmos::tx::v1beta1::ModeInfo>& mode_infos() const;
  // .cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];
  bool has_bitarray() const;
  void clear_bitarray() ;
  const ::cosmos::crypto::multisig::v1beta1::CompactBitArray& bitarray() const;
  PROTOBUF_NODISCARD ::cosmos::crypto::multisig::v1beta1::CompactBitArray* release_bitarray();
  ::cosmos::crypto::multisig::v1beta1::CompactBitArray* mutable_bitarray();
  void set_allocated_bitarray(::cosmos::crypto::multisig::v1beta1::CompactBitArray* value);
  void unsafe_arena_set_allocated_bitarray(::cosmos::crypto::multisig::v1beta1::CompactBitArray* value);
  ::cosmos::crypto::multisig::v1beta1::CompactBitArray* unsafe_arena_release_bitarray();

  private:
  const ::cosmos::crypto::multisig::v1beta1::CompactBitArray& _internal_bitarray() const;
  ::cosmos::crypto::multisig::v1beta1::CompactBitArray* _internal_mutable_bitarray();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.ModeInfo.Multi)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ModeInfo_Multi& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::cosmos::tx::v1beta1::ModeInfo > mode_infos_;
    ::cosmos::crypto::multisig::v1beta1::CompactBitArray* bitarray_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class Fee final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.Fee) */ {
 public:
  inline Fee() : Fee(nullptr) {}
  ~Fee() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Fee* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Fee));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Fee(
      ::google::protobuf::internal::ConstantInitialized);

  inline Fee(const Fee& from) : Fee(nullptr, from) {}
  inline Fee(Fee&& from) noexcept
      : Fee(nullptr, std::move(from)) {}
  inline Fee& operator=(const Fee& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fee& operator=(Fee&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fee& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fee* internal_default_instance() {
    return reinterpret_cast<const Fee*>(
        &_Fee_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(Fee& a, Fee& b) { a.Swap(&b); }
  inline void Swap(Fee* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fee* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Fee* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Fee>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Fee& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Fee& from) { Fee::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Fee* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.tx.v1beta1.Fee"; }

 protected:
  explicit Fee(::google::protobuf::Arena* arena);
  Fee(::google::protobuf::Arena* arena, const Fee& from);
  Fee(::google::protobuf::Arena* arena, Fee&& from) noexcept
      : Fee(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAmountFieldNumber = 1,
    kPayerFieldNumber = 3,
    kGranterFieldNumber = 4,
    kGasLimitFieldNumber = 2,
  };
  // repeated .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
  int amount_size() const;
  private:
  int _internal_amount_size() const;

  public:
  void clear_amount() ;
  ::cosmos::base::v1beta1::Coin* mutable_amount(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* mutable_amount();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_amount() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_amount();
  public:
  const ::cosmos::base::v1beta1::Coin& amount(int index) const;
  ::cosmos::base::v1beta1::Coin* add_amount();
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& amount() const;
  // string payer = 3 [json_name = "payer", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_payer() ;
  const std::string& payer() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payer(Arg_&& arg, Args_... args);
  std::string* mutable_payer();
  PROTOBUF_NODISCARD std::string* release_payer();
  void set_allocated_payer(std::string* value);

  private:
  const std::string& _internal_payer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payer(
      const std::string& value);
  std::string* _internal_mutable_payer();

  public:
  // string granter = 4 [json_name = "granter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_granter() ;
  const std::string& granter() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_granter(Arg_&& arg, Args_... args);
  std::string* mutable_granter();
  PROTOBUF_NODISCARD std::string* release_granter();
  void set_allocated_granter(std::string* value);

  private:
  const std::string& _internal_granter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_granter(
      const std::string& value);
  std::string* _internal_mutable_granter();

  public:
  // uint64 gas_limit = 2 [json_name = "gasLimit"];
  void clear_gas_limit() ;
  ::uint64_t gas_limit() const;
  void set_gas_limit(::uint64_t value);

  private:
  ::uint64_t _internal_gas_limit() const;
  void _internal_set_gas_limit(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.Fee)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      42, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Fee& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > amount_;
    ::google::protobuf::internal::ArenaStringPtr payer_;
    ::google::protobuf::internal::ArenaStringPtr granter_;
    ::uint64_t gas_limit_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class SignerInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.SignerInfo) */ {
 public:
  inline SignerInfo() : SignerInfo(nullptr) {}
  ~SignerInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SignerInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SignerInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SignerInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline SignerInfo(const SignerInfo& from) : SignerInfo(nullptr, from) {}
  inline SignerInfo(SignerInfo&& from) noexcept
      : SignerInfo(nullptr, std::move(from)) {}
  inline SignerInfo& operator=(const SignerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignerInfo& operator=(SignerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignerInfo* internal_default_instance() {
    return reinterpret_cast<const SignerInfo*>(
        &_SignerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(SignerInfo& a, SignerInfo& b) { a.Swap(&b); }
  inline void Swap(SignerInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignerInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignerInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SignerInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SignerInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SignerInfo& from) { SignerInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SignerInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.tx.v1beta1.SignerInfo"; }

 protected:
  explicit SignerInfo(::google::protobuf::Arena* arena);
  SignerInfo(::google::protobuf::Arena* arena, const SignerInfo& from);
  SignerInfo(::google::protobuf::Arena* arena, SignerInfo&& from) noexcept
      : SignerInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPublicKeyFieldNumber = 1,
    kModeInfoFieldNumber = 2,
    kSequenceFieldNumber = 3,
  };
  // .google.protobuf.Any public_key = 1 [json_name = "publicKey"];
  bool has_public_key() const;
  void clear_public_key() ;
  const ::google::protobuf::Any& public_key() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_public_key();
  ::google::protobuf::Any* mutable_public_key();
  void set_allocated_public_key(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_public_key(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_public_key();

  private:
  const ::google::protobuf::Any& _internal_public_key() const;
  ::google::protobuf::Any* _internal_mutable_public_key();

  public:
  // .cosmos.tx.v1beta1.ModeInfo mode_info = 2 [json_name = "modeInfo"];
  bool has_mode_info() const;
  void clear_mode_info() ;
  const ::cosmos::tx::v1beta1::ModeInfo& mode_info() const;
  PROTOBUF_NODISCARD ::cosmos::tx::v1beta1::ModeInfo* release_mode_info();
  ::cosmos::tx::v1beta1::ModeInfo* mutable_mode_info();
  void set_allocated_mode_info(::cosmos::tx::v1beta1::ModeInfo* value);
  void unsafe_arena_set_allocated_mode_info(::cosmos::tx::v1beta1::ModeInfo* value);
  ::cosmos::tx::v1beta1::ModeInfo* unsafe_arena_release_mode_info();

  private:
  const ::cosmos::tx::v1beta1::ModeInfo& _internal_mode_info() const;
  ::cosmos::tx::v1beta1::ModeInfo* _internal_mutable_mode_info();

  public:
  // uint64 sequence = 3 [json_name = "sequence"];
  void clear_sequence() ;
  ::uint64_t sequence() const;
  void set_sequence(::uint64_t value);

  private:
  ::uint64_t _internal_sequence() const;
  void _internal_set_sequence(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.SignerInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SignerInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Any* public_key_;
    ::cosmos::tx::v1beta1::ModeInfo* mode_info_;
    ::uint64_t sequence_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class SignDocDirectAux final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.SignDocDirectAux) */ {
 public:
  inline SignDocDirectAux() : SignDocDirectAux(nullptr) {}
  ~SignDocDirectAux() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SignDocDirectAux* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SignDocDirectAux));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SignDocDirectAux(
      ::google::protobuf::internal::ConstantInitialized);

  inline SignDocDirectAux(const SignDocDirectAux& from) : SignDocDirectAux(nullptr, from) {}
  inline SignDocDirectAux(SignDocDirectAux&& from) noexcept
      : SignDocDirectAux(nullptr, std::move(from)) {}
  inline SignDocDirectAux& operator=(const SignDocDirectAux& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignDocDirectAux& operator=(SignDocDirectAux&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignDocDirectAux& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignDocDirectAux* internal_default_instance() {
    return reinterpret_cast<const SignDocDirectAux*>(
        &_SignDocDirectAux_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(SignDocDirectAux& a, SignDocDirectAux& b) { a.Swap(&b); }
  inline void Swap(SignDocDirectAux* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignDocDirectAux* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignDocDirectAux* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SignDocDirectAux>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SignDocDirectAux& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SignDocDirectAux& from) { SignDocDirectAux::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SignDocDirectAux* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.tx.v1beta1.SignDocDirectAux"; }

 protected:
  explicit SignDocDirectAux(::google::protobuf::Arena* arena);
  SignDocDirectAux(::google::protobuf::Arena* arena, const SignDocDirectAux& from);
  SignDocDirectAux(::google::protobuf::Arena* arena, SignDocDirectAux&& from) noexcept
      : SignDocDirectAux(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBodyBytesFieldNumber = 1,
    kChainIdFieldNumber = 3,
    kPublicKeyFieldNumber = 2,
    kTipFieldNumber = 6,
    kAccountNumberFieldNumber = 4,
    kSequenceFieldNumber = 5,
  };
  // bytes body_bytes = 1 [json_name = "bodyBytes"];
  void clear_body_bytes() ;
  const std::string& body_bytes() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_body_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_body_bytes();
  PROTOBUF_NODISCARD std::string* release_body_bytes();
  void set_allocated_body_bytes(std::string* value);

  private:
  const std::string& _internal_body_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body_bytes(
      const std::string& value);
  std::string* _internal_mutable_body_bytes();

  public:
  // string chain_id = 3 [json_name = "chainId"];
  void clear_chain_id() ;
  const std::string& chain_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chain_id(Arg_&& arg, Args_... args);
  std::string* mutable_chain_id();
  PROTOBUF_NODISCARD std::string* release_chain_id();
  void set_allocated_chain_id(std::string* value);

  private:
  const std::string& _internal_chain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chain_id(
      const std::string& value);
  std::string* _internal_mutable_chain_id();

  public:
  // .google.protobuf.Any public_key = 2 [json_name = "publicKey"];
  bool has_public_key() const;
  void clear_public_key() ;
  const ::google::protobuf::Any& public_key() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_public_key();
  ::google::protobuf::Any* mutable_public_key();
  void set_allocated_public_key(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_public_key(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_public_key();

  private:
  const ::google::protobuf::Any& _internal_public_key() const;
  ::google::protobuf::Any* _internal_mutable_public_key();

  public:
  // .cosmos.tx.v1beta1.Tip tip = 6 [json_name = "tip", deprecated = true];
  [[deprecated]]  bool has_tip() const;
  [[deprecated]]  void clear_tip() ;
  [[deprecated]] const ::cosmos::tx::v1beta1::Tip& tip() const;
  [[deprecated]] PROTOBUF_NODISCARD ::cosmos::tx::v1beta1::Tip* release_tip();
  [[deprecated]] ::cosmos::tx::v1beta1::Tip* mutable_tip();
  [[deprecated]] void set_allocated_tip(::cosmos::tx::v1beta1::Tip* value);
  [[deprecated]] void unsafe_arena_set_allocated_tip(::cosmos::tx::v1beta1::Tip* value);
  [[deprecated]] ::cosmos::tx::v1beta1::Tip* unsafe_arena_release_tip();

  private:
  const ::cosmos::tx::v1beta1::Tip& _internal_tip() const;
  ::cosmos::tx::v1beta1::Tip* _internal_mutable_tip();

  public:
  // uint64 account_number = 4 [json_name = "accountNumber"];
  void clear_account_number() ;
  ::uint64_t account_number() const;
  void set_account_number(::uint64_t value);

  private:
  ::uint64_t _internal_account_number() const;
  void _internal_set_account_number(::uint64_t value);

  public:
  // uint64 sequence = 5 [json_name = "sequence"];
  void clear_sequence() ;
  ::uint64_t sequence() const;
  void set_sequence(::uint64_t value);

  private:
  ::uint64_t _internal_sequence() const;
  void _internal_set_sequence(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.SignDocDirectAux)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SignDocDirectAux& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr body_bytes_;
    ::google::protobuf::internal::ArenaStringPtr chain_id_;
    ::google::protobuf::Any* public_key_;
    ::cosmos::tx::v1beta1::Tip* tip_;
    ::uint64_t account_number_;
    ::uint64_t sequence_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class AuxSignerData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.AuxSignerData) */ {
 public:
  inline AuxSignerData() : AuxSignerData(nullptr) {}
  ~AuxSignerData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AuxSignerData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AuxSignerData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuxSignerData(
      ::google::protobuf::internal::ConstantInitialized);

  inline AuxSignerData(const AuxSignerData& from) : AuxSignerData(nullptr, from) {}
  inline AuxSignerData(AuxSignerData&& from) noexcept
      : AuxSignerData(nullptr, std::move(from)) {}
  inline AuxSignerData& operator=(const AuxSignerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuxSignerData& operator=(AuxSignerData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuxSignerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuxSignerData* internal_default_instance() {
    return reinterpret_cast<const AuxSignerData*>(
        &_AuxSignerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(AuxSignerData& a, AuxSignerData& b) { a.Swap(&b); }
  inline void Swap(AuxSignerData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuxSignerData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuxSignerData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AuxSignerData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AuxSignerData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AuxSignerData& from) { AuxSignerData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AuxSignerData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.tx.v1beta1.AuxSignerData"; }

 protected:
  explicit AuxSignerData(::google::protobuf::Arena* arena);
  AuxSignerData(::google::protobuf::Arena* arena, const AuxSignerData& from);
  AuxSignerData(::google::protobuf::Arena* arena, AuxSignerData&& from) noexcept
      : AuxSignerData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAddressFieldNumber = 1,
    kSigFieldNumber = 4,
    kSignDocFieldNumber = 2,
    kModeFieldNumber = 3,
  };
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* value);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // bytes sig = 4 [json_name = "sig"];
  void clear_sig() ;
  const std::string& sig() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sig(Arg_&& arg, Args_... args);
  std::string* mutable_sig();
  PROTOBUF_NODISCARD std::string* release_sig();
  void set_allocated_sig(std::string* value);

  private:
  const std::string& _internal_sig() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sig(
      const std::string& value);
  std::string* _internal_mutable_sig();

  public:
  // .cosmos.tx.v1beta1.SignDocDirectAux sign_doc = 2 [json_name = "signDoc"];
  bool has_sign_doc() const;
  void clear_sign_doc() ;
  const ::cosmos::tx::v1beta1::SignDocDirectAux& sign_doc() const;
  PROTOBUF_NODISCARD ::cosmos::tx::v1beta1::SignDocDirectAux* release_sign_doc();
  ::cosmos::tx::v1beta1::SignDocDirectAux* mutable_sign_doc();
  void set_allocated_sign_doc(::cosmos::tx::v1beta1::SignDocDirectAux* value);
  void unsafe_arena_set_allocated_sign_doc(::cosmos::tx::v1beta1::SignDocDirectAux* value);
  ::cosmos::tx::v1beta1::SignDocDirectAux* unsafe_arena_release_sign_doc();

  private:
  const ::cosmos::tx::v1beta1::SignDocDirectAux& _internal_sign_doc() const;
  ::cosmos::tx::v1beta1::SignDocDirectAux* _internal_mutable_sign_doc();

  public:
  // .cosmos.tx.signing.v1beta1.SignMode mode = 3 [json_name = "mode"];
  void clear_mode() ;
  ::cosmos::tx::signing::v1beta1::SignMode mode() const;
  void set_mode(::cosmos::tx::signing::v1beta1::SignMode value);

  private:
  ::cosmos::tx::signing::v1beta1::SignMode _internal_mode() const;
  void _internal_set_mode(::cosmos::tx::signing::v1beta1::SignMode value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.AuxSignerData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      47, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AuxSignerData& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::google::protobuf::internal::ArenaStringPtr sig_;
    ::cosmos::tx::v1beta1::SignDocDirectAux* sign_doc_;
    int mode_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class AuthInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.AuthInfo) */ {
 public:
  inline AuthInfo() : AuthInfo(nullptr) {}
  ~AuthInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AuthInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AuthInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuthInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline AuthInfo(const AuthInfo& from) : AuthInfo(nullptr, from) {}
  inline AuthInfo(AuthInfo&& from) noexcept
      : AuthInfo(nullptr, std::move(from)) {}
  inline AuthInfo& operator=(const AuthInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthInfo& operator=(AuthInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthInfo* internal_default_instance() {
    return reinterpret_cast<const AuthInfo*>(
        &_AuthInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(AuthInfo& a, AuthInfo& b) { a.Swap(&b); }
  inline void Swap(AuthInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AuthInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AuthInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AuthInfo& from) { AuthInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AuthInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.tx.v1beta1.AuthInfo"; }

 protected:
  explicit AuthInfo(::google::protobuf::Arena* arena);
  AuthInfo(::google::protobuf::Arena* arena, const AuthInfo& from);
  AuthInfo(::google::protobuf::Arena* arena, AuthInfo&& from) noexcept
      : AuthInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSignerInfosFieldNumber = 1,
    kFeeFieldNumber = 2,
    kTipFieldNumber = 3,
  };
  // repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];
  int signer_infos_size() const;
  private:
  int _internal_signer_infos_size() const;

  public:
  void clear_signer_infos() ;
  ::cosmos::tx::v1beta1::SignerInfo* mutable_signer_infos(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::tx::v1beta1::SignerInfo>* mutable_signer_infos();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::tx::v1beta1::SignerInfo>& _internal_signer_infos() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::tx::v1beta1::SignerInfo>* _internal_mutable_signer_infos();
  public:
  const ::cosmos::tx::v1beta1::SignerInfo& signer_infos(int index) const;
  ::cosmos::tx::v1beta1::SignerInfo* add_signer_infos();
  const ::google::protobuf::RepeatedPtrField<::cosmos::tx::v1beta1::SignerInfo>& signer_infos() const;
  // .cosmos.tx.v1beta1.Fee fee = 2 [json_name = "fee"];
  bool has_fee() const;
  void clear_fee() ;
  const ::cosmos::tx::v1beta1::Fee& fee() const;
  PROTOBUF_NODISCARD ::cosmos::tx::v1beta1::Fee* release_fee();
  ::cosmos::tx::v1beta1::Fee* mutable_fee();
  void set_allocated_fee(::cosmos::tx::v1beta1::Fee* value);
  void unsafe_arena_set_allocated_fee(::cosmos::tx::v1beta1::Fee* value);
  ::cosmos::tx::v1beta1::Fee* unsafe_arena_release_fee();

  private:
  const ::cosmos::tx::v1beta1::Fee& _internal_fee() const;
  ::cosmos::tx::v1beta1::Fee* _internal_mutable_fee();

  public:
  // .cosmos.tx.v1beta1.Tip tip = 3 [json_name = "tip", deprecated = true, (.cosmos_proto.field_added_in) = "cosmos-sdk 0.46"];
  [[deprecated]]  bool has_tip() const;
  [[deprecated]]  void clear_tip() ;
  [[deprecated]] const ::cosmos::tx::v1beta1::Tip& tip() const;
  [[deprecated]] PROTOBUF_NODISCARD ::cosmos::tx::v1beta1::Tip* release_tip();
  [[deprecated]] ::cosmos::tx::v1beta1::Tip* mutable_tip();
  [[deprecated]] void set_allocated_tip(::cosmos::tx::v1beta1::Tip* value);
  [[deprecated]] void unsafe_arena_set_allocated_tip(::cosmos::tx::v1beta1::Tip* value);
  [[deprecated]] ::cosmos::tx::v1beta1::Tip* unsafe_arena_release_tip();

  private:
  const ::cosmos::tx::v1beta1::Tip& _internal_tip() const;
  ::cosmos::tx::v1beta1::Tip* _internal_mutable_tip();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.AuthInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AuthInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::cosmos::tx::v1beta1::SignerInfo > signer_infos_;
    ::cosmos::tx::v1beta1::Fee* fee_;
    ::cosmos::tx::v1beta1::Tip* tip_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class Tx final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.Tx) */ {
 public:
  inline Tx() : Tx(nullptr) {}
  ~Tx() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Tx* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Tx));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Tx(
      ::google::protobuf::internal::ConstantInitialized);

  inline Tx(const Tx& from) : Tx(nullptr, from) {}
  inline Tx(Tx&& from) noexcept
      : Tx(nullptr, std::move(from)) {}
  inline Tx& operator=(const Tx& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tx& operator=(Tx&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Tx& default_instance() {
    return *internal_default_instance();
  }
  static inline const Tx* internal_default_instance() {
    return reinterpret_cast<const Tx*>(
        &_Tx_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Tx& a, Tx& b) { a.Swap(&b); }
  inline void Swap(Tx* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tx* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Tx* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Tx>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Tx& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Tx& from) { Tx::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Tx* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.tx.v1beta1.Tx"; }

 protected:
  explicit Tx(::google::protobuf::Arena* arena);
  Tx(::google::protobuf::Arena* arena, const Tx& from);
  Tx(::google::protobuf::Arena* arena, Tx&& from) noexcept
      : Tx(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSignaturesFieldNumber = 3,
    kBodyFieldNumber = 1,
    kAuthInfoFieldNumber = 2,
  };
  // repeated bytes signatures = 3 [json_name = "signatures"];
  int signatures_size() const;
  private:
  int _internal_signatures_size() const;

  public:
  void clear_signatures() ;
  const std::string& signatures(int index) const;
  std::string* mutable_signatures(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signatures(int index, Arg_&& value, Args_... args);
  std::string* add_signatures();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_signatures(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& signatures() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_signatures();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_signatures() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_signatures();

  public:
  // .cosmos.tx.v1beta1.TxBody body = 1 [json_name = "body"];
  bool has_body() const;
  void clear_body() ;
  const ::cosmos::tx::v1beta1::TxBody& body() const;
  PROTOBUF_NODISCARD ::cosmos::tx::v1beta1::TxBody* release_body();
  ::cosmos::tx::v1beta1::TxBody* mutable_body();
  void set_allocated_body(::cosmos::tx::v1beta1::TxBody* value);
  void unsafe_arena_set_allocated_body(::cosmos::tx::v1beta1::TxBody* value);
  ::cosmos::tx::v1beta1::TxBody* unsafe_arena_release_body();

  private:
  const ::cosmos::tx::v1beta1::TxBody& _internal_body() const;
  ::cosmos::tx::v1beta1::TxBody* _internal_mutable_body();

  public:
  // .cosmos.tx.v1beta1.AuthInfo auth_info = 2 [json_name = "authInfo"];
  bool has_auth_info() const;
  void clear_auth_info() ;
  const ::cosmos::tx::v1beta1::AuthInfo& auth_info() const;
  PROTOBUF_NODISCARD ::cosmos::tx::v1beta1::AuthInfo* release_auth_info();
  ::cosmos::tx::v1beta1::AuthInfo* mutable_auth_info();
  void set_allocated_auth_info(::cosmos::tx::v1beta1::AuthInfo* value);
  void unsafe_arena_set_allocated_auth_info(::cosmos::tx::v1beta1::AuthInfo* value);
  ::cosmos::tx::v1beta1::AuthInfo* unsafe_arena_release_auth_info();

  private:
  const ::cosmos::tx::v1beta1::AuthInfo& _internal_auth_info() const;
  ::cosmos::tx::v1beta1::AuthInfo* _internal_mutable_auth_info();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.Tx)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Tx& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> signatures_;
    ::cosmos::tx::v1beta1::TxBody* body_;
    ::cosmos::tx::v1beta1::AuthInfo* auth_info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Tx

// .cosmos.tx.v1beta1.TxBody body = 1 [json_name = "body"];
inline bool Tx::has_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.body_ != nullptr);
  return value;
}
inline void Tx::clear_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.body_ != nullptr) _impl_.body_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::tx::v1beta1::TxBody& Tx::_internal_body() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::tx::v1beta1::TxBody* p = _impl_.body_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::tx::v1beta1::TxBody&>(::cosmos::tx::v1beta1::_TxBody_default_instance_);
}
inline const ::cosmos::tx::v1beta1::TxBody& Tx::body() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.Tx.body)
  return _internal_body();
}
inline void Tx::unsafe_arena_set_allocated_body(::cosmos::tx::v1beta1::TxBody* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.body_);
  }
  _impl_.body_ = reinterpret_cast<::cosmos::tx::v1beta1::TxBody*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.Tx.body)
}
inline ::cosmos::tx::v1beta1::TxBody* Tx::release_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::tx::v1beta1::TxBody* released = _impl_.body_;
  _impl_.body_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::tx::v1beta1::TxBody* Tx::unsafe_arena_release_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.Tx.body)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::tx::v1beta1::TxBody* temp = _impl_.body_;
  _impl_.body_ = nullptr;
  return temp;
}
inline ::cosmos::tx::v1beta1::TxBody* Tx::_internal_mutable_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.body_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::tx::v1beta1::TxBody>(GetArena());
    _impl_.body_ = reinterpret_cast<::cosmos::tx::v1beta1::TxBody*>(p);
  }
  return _impl_.body_;
}
inline ::cosmos::tx::v1beta1::TxBody* Tx::mutable_body() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::tx::v1beta1::TxBody* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.Tx.body)
  return _msg;
}
inline void Tx::set_allocated_body(::cosmos::tx::v1beta1::TxBody* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.body_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.body_ = reinterpret_cast<::cosmos::tx::v1beta1::TxBody*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.Tx.body)
}

// .cosmos.tx.v1beta1.AuthInfo auth_info = 2 [json_name = "authInfo"];
inline bool Tx::has_auth_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.auth_info_ != nullptr);
  return value;
}
inline void Tx::clear_auth_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.auth_info_ != nullptr) _impl_.auth_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cosmos::tx::v1beta1::AuthInfo& Tx::_internal_auth_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::tx::v1beta1::AuthInfo* p = _impl_.auth_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::tx::v1beta1::AuthInfo&>(::cosmos::tx::v1beta1::_AuthInfo_default_instance_);
}
inline const ::cosmos::tx::v1beta1::AuthInfo& Tx::auth_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.Tx.auth_info)
  return _internal_auth_info();
}
inline void Tx::unsafe_arena_set_allocated_auth_info(::cosmos::tx::v1beta1::AuthInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.auth_info_);
  }
  _impl_.auth_info_ = reinterpret_cast<::cosmos::tx::v1beta1::AuthInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.Tx.auth_info)
}
inline ::cosmos::tx::v1beta1::AuthInfo* Tx::release_auth_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::tx::v1beta1::AuthInfo* released = _impl_.auth_info_;
  _impl_.auth_info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::tx::v1beta1::AuthInfo* Tx::unsafe_arena_release_auth_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.Tx.auth_info)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::tx::v1beta1::AuthInfo* temp = _impl_.auth_info_;
  _impl_.auth_info_ = nullptr;
  return temp;
}
inline ::cosmos::tx::v1beta1::AuthInfo* Tx::_internal_mutable_auth_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.auth_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::tx::v1beta1::AuthInfo>(GetArena());
    _impl_.auth_info_ = reinterpret_cast<::cosmos::tx::v1beta1::AuthInfo*>(p);
  }
  return _impl_.auth_info_;
}
inline ::cosmos::tx::v1beta1::AuthInfo* Tx::mutable_auth_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::cosmos::tx::v1beta1::AuthInfo* _msg = _internal_mutable_auth_info();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.Tx.auth_info)
  return _msg;
}
inline void Tx::set_allocated_auth_info(::cosmos::tx::v1beta1::AuthInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.auth_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.auth_info_ = reinterpret_cast<::cosmos::tx::v1beta1::AuthInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.Tx.auth_info)
}

// repeated bytes signatures = 3 [json_name = "signatures"];
inline int Tx::_internal_signatures_size() const {
  return _internal_signatures().size();
}
inline int Tx::signatures_size() const {
  return _internal_signatures_size();
}
inline void Tx::clear_signatures() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signatures_.Clear();
}
inline std::string* Tx::add_signatures() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_signatures()->Add();
  // @@protoc_insertion_point(field_add_mutable:cosmos.tx.v1beta1.Tx.signatures)
  return _s;
}
inline const std::string& Tx::signatures(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.Tx.signatures)
  return _internal_signatures().Get(index);
}
inline std::string* Tx::mutable_signatures(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.Tx.signatures)
  return _internal_mutable_signatures()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void Tx::set_signatures(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_signatures()->Mutable(index),
      std::forward<Arg_>(value), args... , ::google::protobuf::internal::BytesTag{});
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.Tx.signatures)
}
template <typename Arg_, typename... Args_>
inline void Tx::add_signatures(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_signatures(),
                               std::forward<Arg_>(value),
                               args... , ::google::protobuf::internal::BytesTag{});
  // @@protoc_insertion_point(field_add:cosmos.tx.v1beta1.Tx.signatures)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Tx::signatures() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.tx.v1beta1.Tx.signatures)
  return _internal_signatures();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Tx::mutable_signatures() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.tx.v1beta1.Tx.signatures)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_signatures();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Tx::_internal_signatures() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.signatures_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Tx::_internal_mutable_signatures() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.signatures_;
}

// -------------------------------------------------------------------

// TxRaw

// bytes body_bytes = 1 [json_name = "bodyBytes"];
inline void TxRaw::clear_body_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.body_bytes_.ClearToEmpty();
}
inline const std::string& TxRaw::body_bytes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.TxRaw.body_bytes)
  return _internal_body_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TxRaw::set_body_bytes(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.body_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.TxRaw.body_bytes)
}
inline std::string* TxRaw::mutable_body_bytes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_body_bytes();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.TxRaw.body_bytes)
  return _s;
}
inline const std::string& TxRaw::_internal_body_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.body_bytes_.Get();
}
inline void TxRaw::_internal_set_body_bytes(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.body_bytes_.Set(value, GetArena());
}
inline std::string* TxRaw::_internal_mutable_body_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.body_bytes_.Mutable( GetArena());
}
inline std::string* TxRaw::release_body_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.TxRaw.body_bytes)
  return _impl_.body_bytes_.Release();
}
inline void TxRaw::set_allocated_body_bytes(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.body_bytes_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.body_bytes_.IsDefault()) {
    _impl_.body_bytes_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.TxRaw.body_bytes)
}

// bytes auth_info_bytes = 2 [json_name = "authInfoBytes"];
inline void TxRaw::clear_auth_info_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auth_info_bytes_.ClearToEmpty();
}
inline const std::string& TxRaw::auth_info_bytes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.TxRaw.auth_info_bytes)
  return _internal_auth_info_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TxRaw::set_auth_info_bytes(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auth_info_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.TxRaw.auth_info_bytes)
}
inline std::string* TxRaw::mutable_auth_info_bytes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_auth_info_bytes();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.TxRaw.auth_info_bytes)
  return _s;
}
inline const std::string& TxRaw::_internal_auth_info_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.auth_info_bytes_.Get();
}
inline void TxRaw::_internal_set_auth_info_bytes(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auth_info_bytes_.Set(value, GetArena());
}
inline std::string* TxRaw::_internal_mutable_auth_info_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.auth_info_bytes_.Mutable( GetArena());
}
inline std::string* TxRaw::release_auth_info_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.TxRaw.auth_info_bytes)
  return _impl_.auth_info_bytes_.Release();
}
inline void TxRaw::set_allocated_auth_info_bytes(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auth_info_bytes_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.auth_info_bytes_.IsDefault()) {
    _impl_.auth_info_bytes_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.TxRaw.auth_info_bytes)
}

// repeated bytes signatures = 3 [json_name = "signatures"];
inline int TxRaw::_internal_signatures_size() const {
  return _internal_signatures().size();
}
inline int TxRaw::signatures_size() const {
  return _internal_signatures_size();
}
inline void TxRaw::clear_signatures() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signatures_.Clear();
}
inline std::string* TxRaw::add_signatures() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_signatures()->Add();
  // @@protoc_insertion_point(field_add_mutable:cosmos.tx.v1beta1.TxRaw.signatures)
  return _s;
}
inline const std::string& TxRaw::signatures(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.TxRaw.signatures)
  return _internal_signatures().Get(index);
}
inline std::string* TxRaw::mutable_signatures(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.TxRaw.signatures)
  return _internal_mutable_signatures()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void TxRaw::set_signatures(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_signatures()->Mutable(index),
      std::forward<Arg_>(value), args... , ::google::protobuf::internal::BytesTag{});
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.TxRaw.signatures)
}
template <typename Arg_, typename... Args_>
inline void TxRaw::add_signatures(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_signatures(),
                               std::forward<Arg_>(value),
                               args... , ::google::protobuf::internal::BytesTag{});
  // @@protoc_insertion_point(field_add:cosmos.tx.v1beta1.TxRaw.signatures)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TxRaw::signatures() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.tx.v1beta1.TxRaw.signatures)
  return _internal_signatures();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TxRaw::mutable_signatures() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.tx.v1beta1.TxRaw.signatures)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_signatures();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TxRaw::_internal_signatures() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.signatures_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TxRaw::_internal_mutable_signatures() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.signatures_;
}

// -------------------------------------------------------------------

// SignDoc

// bytes body_bytes = 1 [json_name = "bodyBytes"];
inline void SignDoc::clear_body_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.body_bytes_.ClearToEmpty();
}
inline const std::string& SignDoc::body_bytes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SignDoc.body_bytes)
  return _internal_body_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignDoc::set_body_bytes(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.body_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.SignDoc.body_bytes)
}
inline std::string* SignDoc::mutable_body_bytes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_body_bytes();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.SignDoc.body_bytes)
  return _s;
}
inline const std::string& SignDoc::_internal_body_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.body_bytes_.Get();
}
inline void SignDoc::_internal_set_body_bytes(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.body_bytes_.Set(value, GetArena());
}
inline std::string* SignDoc::_internal_mutable_body_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.body_bytes_.Mutable( GetArena());
}
inline std::string* SignDoc::release_body_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.SignDoc.body_bytes)
  return _impl_.body_bytes_.Release();
}
inline void SignDoc::set_allocated_body_bytes(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.body_bytes_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.body_bytes_.IsDefault()) {
    _impl_.body_bytes_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.SignDoc.body_bytes)
}

// bytes auth_info_bytes = 2 [json_name = "authInfoBytes"];
inline void SignDoc::clear_auth_info_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auth_info_bytes_.ClearToEmpty();
}
inline const std::string& SignDoc::auth_info_bytes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SignDoc.auth_info_bytes)
  return _internal_auth_info_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignDoc::set_auth_info_bytes(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auth_info_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.SignDoc.auth_info_bytes)
}
inline std::string* SignDoc::mutable_auth_info_bytes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_auth_info_bytes();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.SignDoc.auth_info_bytes)
  return _s;
}
inline const std::string& SignDoc::_internal_auth_info_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.auth_info_bytes_.Get();
}
inline void SignDoc::_internal_set_auth_info_bytes(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auth_info_bytes_.Set(value, GetArena());
}
inline std::string* SignDoc::_internal_mutable_auth_info_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.auth_info_bytes_.Mutable( GetArena());
}
inline std::string* SignDoc::release_auth_info_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.SignDoc.auth_info_bytes)
  return _impl_.auth_info_bytes_.Release();
}
inline void SignDoc::set_allocated_auth_info_bytes(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auth_info_bytes_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.auth_info_bytes_.IsDefault()) {
    _impl_.auth_info_bytes_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.SignDoc.auth_info_bytes)
}

// string chain_id = 3 [json_name = "chainId"];
inline void SignDoc::clear_chain_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_id_.ClearToEmpty();
}
inline const std::string& SignDoc::chain_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SignDoc.chain_id)
  return _internal_chain_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignDoc::set_chain_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.SignDoc.chain_id)
}
inline std::string* SignDoc::mutable_chain_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chain_id();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.SignDoc.chain_id)
  return _s;
}
inline const std::string& SignDoc::_internal_chain_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chain_id_.Get();
}
inline void SignDoc::_internal_set_chain_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_id_.Set(value, GetArena());
}
inline std::string* SignDoc::_internal_mutable_chain_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.chain_id_.Mutable( GetArena());
}
inline std::string* SignDoc::release_chain_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.SignDoc.chain_id)
  return _impl_.chain_id_.Release();
}
inline void SignDoc::set_allocated_chain_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.chain_id_.IsDefault()) {
    _impl_.chain_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.SignDoc.chain_id)
}

// uint64 account_number = 4 [json_name = "accountNumber"];
inline void SignDoc::clear_account_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.account_number_ = ::uint64_t{0u};
}
inline ::uint64_t SignDoc::account_number() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SignDoc.account_number)
  return _internal_account_number();
}
inline void SignDoc::set_account_number(::uint64_t value) {
  _internal_set_account_number(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.SignDoc.account_number)
}
inline ::uint64_t SignDoc::_internal_account_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.account_number_;
}
inline void SignDoc::_internal_set_account_number(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.account_number_ = value;
}

// -------------------------------------------------------------------

// SignDocDirectAux

// bytes body_bytes = 1 [json_name = "bodyBytes"];
inline void SignDocDirectAux::clear_body_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.body_bytes_.ClearToEmpty();
}
inline const std::string& SignDocDirectAux::body_bytes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SignDocDirectAux.body_bytes)
  return _internal_body_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignDocDirectAux::set_body_bytes(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.body_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.SignDocDirectAux.body_bytes)
}
inline std::string* SignDocDirectAux::mutable_body_bytes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_body_bytes();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.SignDocDirectAux.body_bytes)
  return _s;
}
inline const std::string& SignDocDirectAux::_internal_body_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.body_bytes_.Get();
}
inline void SignDocDirectAux::_internal_set_body_bytes(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.body_bytes_.Set(value, GetArena());
}
inline std::string* SignDocDirectAux::_internal_mutable_body_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.body_bytes_.Mutable( GetArena());
}
inline std::string* SignDocDirectAux::release_body_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.SignDocDirectAux.body_bytes)
  return _impl_.body_bytes_.Release();
}
inline void SignDocDirectAux::set_allocated_body_bytes(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.body_bytes_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.body_bytes_.IsDefault()) {
    _impl_.body_bytes_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.SignDocDirectAux.body_bytes)
}

// .google.protobuf.Any public_key = 2 [json_name = "publicKey"];
inline bool SignDocDirectAux::has_public_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.public_key_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& SignDocDirectAux::_internal_public_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Any* p = _impl_.public_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& SignDocDirectAux::public_key() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SignDocDirectAux.public_key)
  return _internal_public_key();
}
inline void SignDocDirectAux::unsafe_arena_set_allocated_public_key(::google::protobuf::Any* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.public_key_);
  }
  _impl_.public_key_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.SignDocDirectAux.public_key)
}
inline ::google::protobuf::Any* SignDocDirectAux::release_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* released = _impl_.public_key_;
  _impl_.public_key_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Any* SignDocDirectAux::unsafe_arena_release_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.SignDocDirectAux.public_key)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* temp = _impl_.public_key_;
  _impl_.public_key_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* SignDocDirectAux::_internal_mutable_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.public_key_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Any>(GetArena());
    _impl_.public_key_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.public_key_;
}
inline ::google::protobuf::Any* SignDocDirectAux::mutable_public_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Any* _msg = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.SignDocDirectAux.public_key)
  return _msg;
}
inline void SignDocDirectAux::set_allocated_public_key(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.public_key_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.public_key_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.SignDocDirectAux.public_key)
}

// string chain_id = 3 [json_name = "chainId"];
inline void SignDocDirectAux::clear_chain_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_id_.ClearToEmpty();
}
inline const std::string& SignDocDirectAux::chain_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SignDocDirectAux.chain_id)
  return _internal_chain_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignDocDirectAux::set_chain_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.SignDocDirectAux.chain_id)
}
inline std::string* SignDocDirectAux::mutable_chain_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chain_id();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.SignDocDirectAux.chain_id)
  return _s;
}
inline const std::string& SignDocDirectAux::_internal_chain_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chain_id_.Get();
}
inline void SignDocDirectAux::_internal_set_chain_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_id_.Set(value, GetArena());
}
inline std::string* SignDocDirectAux::_internal_mutable_chain_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.chain_id_.Mutable( GetArena());
}
inline std::string* SignDocDirectAux::release_chain_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.SignDocDirectAux.chain_id)
  return _impl_.chain_id_.Release();
}
inline void SignDocDirectAux::set_allocated_chain_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.chain_id_.IsDefault()) {
    _impl_.chain_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.SignDocDirectAux.chain_id)
}

// uint64 account_number = 4 [json_name = "accountNumber"];
inline void SignDocDirectAux::clear_account_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.account_number_ = ::uint64_t{0u};
}
inline ::uint64_t SignDocDirectAux::account_number() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SignDocDirectAux.account_number)
  return _internal_account_number();
}
inline void SignDocDirectAux::set_account_number(::uint64_t value) {
  _internal_set_account_number(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.SignDocDirectAux.account_number)
}
inline ::uint64_t SignDocDirectAux::_internal_account_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.account_number_;
}
inline void SignDocDirectAux::_internal_set_account_number(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.account_number_ = value;
}

// uint64 sequence = 5 [json_name = "sequence"];
inline void SignDocDirectAux::clear_sequence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_ = ::uint64_t{0u};
}
inline ::uint64_t SignDocDirectAux::sequence() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SignDocDirectAux.sequence)
  return _internal_sequence();
}
inline void SignDocDirectAux::set_sequence(::uint64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.SignDocDirectAux.sequence)
}
inline ::uint64_t SignDocDirectAux::_internal_sequence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sequence_;
}
inline void SignDocDirectAux::_internal_set_sequence(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_ = value;
}

// .cosmos.tx.v1beta1.Tip tip = 6 [json_name = "tip", deprecated = true];
inline bool SignDocDirectAux::has_tip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tip_ != nullptr);
  return value;
}
inline void SignDocDirectAux::clear_tip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tip_ != nullptr) _impl_.tip_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cosmos::tx::v1beta1::Tip& SignDocDirectAux::_internal_tip() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::tx::v1beta1::Tip* p = _impl_.tip_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::tx::v1beta1::Tip&>(::cosmos::tx::v1beta1::_Tip_default_instance_);
}
inline const ::cosmos::tx::v1beta1::Tip& SignDocDirectAux::tip() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SignDocDirectAux.tip)
  return _internal_tip();
}
inline void SignDocDirectAux::unsafe_arena_set_allocated_tip(::cosmos::tx::v1beta1::Tip* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tip_);
  }
  _impl_.tip_ = reinterpret_cast<::cosmos::tx::v1beta1::Tip*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.SignDocDirectAux.tip)
}
inline ::cosmos::tx::v1beta1::Tip* SignDocDirectAux::release_tip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::tx::v1beta1::Tip* released = _impl_.tip_;
  _impl_.tip_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::tx::v1beta1::Tip* SignDocDirectAux::unsafe_arena_release_tip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.SignDocDirectAux.tip)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::tx::v1beta1::Tip* temp = _impl_.tip_;
  _impl_.tip_ = nullptr;
  return temp;
}
inline ::cosmos::tx::v1beta1::Tip* SignDocDirectAux::_internal_mutable_tip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tip_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::tx::v1beta1::Tip>(GetArena());
    _impl_.tip_ = reinterpret_cast<::cosmos::tx::v1beta1::Tip*>(p);
  }
  return _impl_.tip_;
}
inline ::cosmos::tx::v1beta1::Tip* SignDocDirectAux::mutable_tip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::cosmos::tx::v1beta1::Tip* _msg = _internal_mutable_tip();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.SignDocDirectAux.tip)
  return _msg;
}
inline void SignDocDirectAux::set_allocated_tip(::cosmos::tx::v1beta1::Tip* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.tip_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.tip_ = reinterpret_cast<::cosmos::tx::v1beta1::Tip*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.SignDocDirectAux.tip)
}

// -------------------------------------------------------------------

// TxBody

// repeated .google.protobuf.Any messages = 1 [json_name = "messages"];
inline int TxBody::_internal_messages_size() const {
  return _internal_messages().size();
}
inline int TxBody::messages_size() const {
  return _internal_messages_size();
}
inline ::google::protobuf::Any* TxBody::mutable_messages(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.TxBody.messages)
  return _internal_mutable_messages()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* TxBody::mutable_messages()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.tx.v1beta1.TxBody.messages)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_messages();
}
inline const ::google::protobuf::Any& TxBody::messages(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.TxBody.messages)
  return _internal_messages().Get(index);
}
inline ::google::protobuf::Any* TxBody::add_messages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::Any* _add = _internal_mutable_messages()->Add();
  // @@protoc_insertion_point(field_add:cosmos.tx.v1beta1.TxBody.messages)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& TxBody::messages() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.tx.v1beta1.TxBody.messages)
  return _internal_messages();
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>&
TxBody::_internal_messages() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.messages_;
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>*
TxBody::_internal_mutable_messages() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.messages_;
}

// string memo = 2 [json_name = "memo"];
inline void TxBody::clear_memo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memo_.ClearToEmpty();
}
inline const std::string& TxBody::memo() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.TxBody.memo)
  return _internal_memo();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TxBody::set_memo(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memo_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.TxBody.memo)
}
inline std::string* TxBody::mutable_memo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.TxBody.memo)
  return _s;
}
inline const std::string& TxBody::_internal_memo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.memo_.Get();
}
inline void TxBody::_internal_set_memo(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memo_.Set(value, GetArena());
}
inline std::string* TxBody::_internal_mutable_memo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.memo_.Mutable( GetArena());
}
inline std::string* TxBody::release_memo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.TxBody.memo)
  return _impl_.memo_.Release();
}
inline void TxBody::set_allocated_memo(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memo_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.memo_.IsDefault()) {
    _impl_.memo_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.TxBody.memo)
}

// uint64 timeout_height = 3 [json_name = "timeoutHeight"];
inline void TxBody::clear_timeout_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeout_height_ = ::uint64_t{0u};
}
inline ::uint64_t TxBody::timeout_height() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.TxBody.timeout_height)
  return _internal_timeout_height();
}
inline void TxBody::set_timeout_height(::uint64_t value) {
  _internal_set_timeout_height(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.TxBody.timeout_height)
}
inline ::uint64_t TxBody::_internal_timeout_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timeout_height_;
}
inline void TxBody::_internal_set_timeout_height(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeout_height_ = value;
}

// bool unordered = 4 [json_name = "unordered", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.53"];
inline void TxBody::clear_unordered() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unordered_ = false;
}
inline bool TxBody::unordered() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.TxBody.unordered)
  return _internal_unordered();
}
inline void TxBody::set_unordered(bool value) {
  _internal_set_unordered(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.TxBody.unordered)
}
inline bool TxBody::_internal_unordered() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.unordered_;
}
inline void TxBody::_internal_set_unordered(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unordered_ = value;
}

// .google.protobuf.Timestamp timeout_timestamp = 5 [json_name = "timeoutTimestamp", (.gogoproto.nullable) = true, (.gogoproto.stdtime) = true, (.cosmos_proto.field_added_in) = "cosmos-sdk 0.53"];
inline bool TxBody::has_timeout_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timeout_timestamp_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& TxBody::_internal_timeout_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.timeout_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& TxBody::timeout_timestamp() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.TxBody.timeout_timestamp)
  return _internal_timeout_timestamp();
}
inline void TxBody::unsafe_arena_set_allocated_timeout_timestamp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timeout_timestamp_);
  }
  _impl_.timeout_timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.TxBody.timeout_timestamp)
}
inline ::google::protobuf::Timestamp* TxBody::release_timeout_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.timeout_timestamp_;
  _impl_.timeout_timestamp_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* TxBody::unsafe_arena_release_timeout_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.TxBody.timeout_timestamp)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.timeout_timestamp_;
  _impl_.timeout_timestamp_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TxBody::_internal_mutable_timeout_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timeout_timestamp_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.timeout_timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.timeout_timestamp_;
}
inline ::google::protobuf::Timestamp* TxBody::mutable_timeout_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_timeout_timestamp();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.TxBody.timeout_timestamp)
  return _msg;
}
inline void TxBody::set_allocated_timeout_timestamp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timeout_timestamp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.timeout_timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.TxBody.timeout_timestamp)
}

// repeated .google.protobuf.Any extension_options = 1023 [json_name = "extensionOptions"];
inline int TxBody::_internal_extension_options_size() const {
  return _internal_extension_options().size();
}
inline int TxBody::extension_options_size() const {
  return _internal_extension_options_size();
}
inline ::google::protobuf::Any* TxBody::mutable_extension_options(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.TxBody.extension_options)
  return _internal_mutable_extension_options()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* TxBody::mutable_extension_options()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.tx.v1beta1.TxBody.extension_options)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_extension_options();
}
inline const ::google::protobuf::Any& TxBody::extension_options(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.TxBody.extension_options)
  return _internal_extension_options().Get(index);
}
inline ::google::protobuf::Any* TxBody::add_extension_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::Any* _add = _internal_mutable_extension_options()->Add();
  // @@protoc_insertion_point(field_add:cosmos.tx.v1beta1.TxBody.extension_options)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& TxBody::extension_options() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.tx.v1beta1.TxBody.extension_options)
  return _internal_extension_options();
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>&
TxBody::_internal_extension_options() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.extension_options_;
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>*
TxBody::_internal_mutable_extension_options() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.extension_options_;
}

// repeated .google.protobuf.Any non_critical_extension_options = 2047 [json_name = "nonCriticalExtensionOptions"];
inline int TxBody::_internal_non_critical_extension_options_size() const {
  return _internal_non_critical_extension_options().size();
}
inline int TxBody::non_critical_extension_options_size() const {
  return _internal_non_critical_extension_options_size();
}
inline ::google::protobuf::Any* TxBody::mutable_non_critical_extension_options(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.TxBody.non_critical_extension_options)
  return _internal_mutable_non_critical_extension_options()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* TxBody::mutable_non_critical_extension_options()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.tx.v1beta1.TxBody.non_critical_extension_options)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_non_critical_extension_options();
}
inline const ::google::protobuf::Any& TxBody::non_critical_extension_options(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.TxBody.non_critical_extension_options)
  return _internal_non_critical_extension_options().Get(index);
}
inline ::google::protobuf::Any* TxBody::add_non_critical_extension_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::Any* _add = _internal_mutable_non_critical_extension_options()->Add();
  // @@protoc_insertion_point(field_add:cosmos.tx.v1beta1.TxBody.non_critical_extension_options)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& TxBody::non_critical_extension_options() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.tx.v1beta1.TxBody.non_critical_extension_options)
  return _internal_non_critical_extension_options();
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>&
TxBody::_internal_non_critical_extension_options() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.non_critical_extension_options_;
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>*
TxBody::_internal_mutable_non_critical_extension_options() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.non_critical_extension_options_;
}

// -------------------------------------------------------------------

// AuthInfo

// repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];
inline int AuthInfo::_internal_signer_infos_size() const {
  return _internal_signer_infos().size();
}
inline int AuthInfo::signer_infos_size() const {
  return _internal_signer_infos_size();
}
inline void AuthInfo::clear_signer_infos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signer_infos_.Clear();
}
inline ::cosmos::tx::v1beta1::SignerInfo* AuthInfo::mutable_signer_infos(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.AuthInfo.signer_infos)
  return _internal_mutable_signer_infos()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::tx::v1beta1::SignerInfo>* AuthInfo::mutable_signer_infos()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.tx.v1beta1.AuthInfo.signer_infos)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_signer_infos();
}
inline const ::cosmos::tx::v1beta1::SignerInfo& AuthInfo::signer_infos(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.AuthInfo.signer_infos)
  return _internal_signer_infos().Get(index);
}
inline ::cosmos::tx::v1beta1::SignerInfo* AuthInfo::add_signer_infos() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::tx::v1beta1::SignerInfo* _add = _internal_mutable_signer_infos()->Add();
  // @@protoc_insertion_point(field_add:cosmos.tx.v1beta1.AuthInfo.signer_infos)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::tx::v1beta1::SignerInfo>& AuthInfo::signer_infos() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.tx.v1beta1.AuthInfo.signer_infos)
  return _internal_signer_infos();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::tx::v1beta1::SignerInfo>&
AuthInfo::_internal_signer_infos() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.signer_infos_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::tx::v1beta1::SignerInfo>*
AuthInfo::_internal_mutable_signer_infos() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.signer_infos_;
}

// .cosmos.tx.v1beta1.Fee fee = 2 [json_name = "fee"];
inline bool AuthInfo::has_fee() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fee_ != nullptr);
  return value;
}
inline void AuthInfo::clear_fee() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.fee_ != nullptr) _impl_.fee_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::tx::v1beta1::Fee& AuthInfo::_internal_fee() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::tx::v1beta1::Fee* p = _impl_.fee_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::tx::v1beta1::Fee&>(::cosmos::tx::v1beta1::_Fee_default_instance_);
}
inline const ::cosmos::tx::v1beta1::Fee& AuthInfo::fee() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.AuthInfo.fee)
  return _internal_fee();
}
inline void AuthInfo::unsafe_arena_set_allocated_fee(::cosmos::tx::v1beta1::Fee* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fee_);
  }
  _impl_.fee_ = reinterpret_cast<::cosmos::tx::v1beta1::Fee*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.AuthInfo.fee)
}
inline ::cosmos::tx::v1beta1::Fee* AuthInfo::release_fee() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::tx::v1beta1::Fee* released = _impl_.fee_;
  _impl_.fee_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::tx::v1beta1::Fee* AuthInfo::unsafe_arena_release_fee() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.AuthInfo.fee)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::tx::v1beta1::Fee* temp = _impl_.fee_;
  _impl_.fee_ = nullptr;
  return temp;
}
inline ::cosmos::tx::v1beta1::Fee* AuthInfo::_internal_mutable_fee() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.fee_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::tx::v1beta1::Fee>(GetArena());
    _impl_.fee_ = reinterpret_cast<::cosmos::tx::v1beta1::Fee*>(p);
  }
  return _impl_.fee_;
}
inline ::cosmos::tx::v1beta1::Fee* AuthInfo::mutable_fee() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::tx::v1beta1::Fee* _msg = _internal_mutable_fee();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.AuthInfo.fee)
  return _msg;
}
inline void AuthInfo::set_allocated_fee(::cosmos::tx::v1beta1::Fee* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.fee_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.fee_ = reinterpret_cast<::cosmos::tx::v1beta1::Fee*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.AuthInfo.fee)
}

// .cosmos.tx.v1beta1.Tip tip = 3 [json_name = "tip", deprecated = true, (.cosmos_proto.field_added_in) = "cosmos-sdk 0.46"];
inline bool AuthInfo::has_tip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tip_ != nullptr);
  return value;
}
inline void AuthInfo::clear_tip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tip_ != nullptr) _impl_.tip_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cosmos::tx::v1beta1::Tip& AuthInfo::_internal_tip() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::tx::v1beta1::Tip* p = _impl_.tip_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::tx::v1beta1::Tip&>(::cosmos::tx::v1beta1::_Tip_default_instance_);
}
inline const ::cosmos::tx::v1beta1::Tip& AuthInfo::tip() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.AuthInfo.tip)
  return _internal_tip();
}
inline void AuthInfo::unsafe_arena_set_allocated_tip(::cosmos::tx::v1beta1::Tip* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tip_);
  }
  _impl_.tip_ = reinterpret_cast<::cosmos::tx::v1beta1::Tip*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.AuthInfo.tip)
}
inline ::cosmos::tx::v1beta1::Tip* AuthInfo::release_tip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::tx::v1beta1::Tip* released = _impl_.tip_;
  _impl_.tip_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::tx::v1beta1::Tip* AuthInfo::unsafe_arena_release_tip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.AuthInfo.tip)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::tx::v1beta1::Tip* temp = _impl_.tip_;
  _impl_.tip_ = nullptr;
  return temp;
}
inline ::cosmos::tx::v1beta1::Tip* AuthInfo::_internal_mutable_tip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tip_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::tx::v1beta1::Tip>(GetArena());
    _impl_.tip_ = reinterpret_cast<::cosmos::tx::v1beta1::Tip*>(p);
  }
  return _impl_.tip_;
}
inline ::cosmos::tx::v1beta1::Tip* AuthInfo::mutable_tip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::cosmos::tx::v1beta1::Tip* _msg = _internal_mutable_tip();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.AuthInfo.tip)
  return _msg;
}
inline void AuthInfo::set_allocated_tip(::cosmos::tx::v1beta1::Tip* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.tip_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.tip_ = reinterpret_cast<::cosmos::tx::v1beta1::Tip*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.AuthInfo.tip)
}

// -------------------------------------------------------------------

// SignerInfo

// .google.protobuf.Any public_key = 1 [json_name = "publicKey"];
inline bool SignerInfo::has_public_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.public_key_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& SignerInfo::_internal_public_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Any* p = _impl_.public_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& SignerInfo::public_key() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SignerInfo.public_key)
  return _internal_public_key();
}
inline void SignerInfo::unsafe_arena_set_allocated_public_key(::google::protobuf::Any* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.public_key_);
  }
  _impl_.public_key_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.SignerInfo.public_key)
}
inline ::google::protobuf::Any* SignerInfo::release_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* released = _impl_.public_key_;
  _impl_.public_key_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Any* SignerInfo::unsafe_arena_release_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.SignerInfo.public_key)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* temp = _impl_.public_key_;
  _impl_.public_key_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* SignerInfo::_internal_mutable_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.public_key_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Any>(GetArena());
    _impl_.public_key_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.public_key_;
}
inline ::google::protobuf::Any* SignerInfo::mutable_public_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Any* _msg = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.SignerInfo.public_key)
  return _msg;
}
inline void SignerInfo::set_allocated_public_key(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.public_key_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.public_key_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.SignerInfo.public_key)
}

// .cosmos.tx.v1beta1.ModeInfo mode_info = 2 [json_name = "modeInfo"];
inline bool SignerInfo::has_mode_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mode_info_ != nullptr);
  return value;
}
inline void SignerInfo::clear_mode_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.mode_info_ != nullptr) _impl_.mode_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cosmos::tx::v1beta1::ModeInfo& SignerInfo::_internal_mode_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::tx::v1beta1::ModeInfo* p = _impl_.mode_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::tx::v1beta1::ModeInfo&>(::cosmos::tx::v1beta1::_ModeInfo_default_instance_);
}
inline const ::cosmos::tx::v1beta1::ModeInfo& SignerInfo::mode_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SignerInfo.mode_info)
  return _internal_mode_info();
}
inline void SignerInfo::unsafe_arena_set_allocated_mode_info(::cosmos::tx::v1beta1::ModeInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.mode_info_);
  }
  _impl_.mode_info_ = reinterpret_cast<::cosmos::tx::v1beta1::ModeInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.SignerInfo.mode_info)
}
inline ::cosmos::tx::v1beta1::ModeInfo* SignerInfo::release_mode_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::tx::v1beta1::ModeInfo* released = _impl_.mode_info_;
  _impl_.mode_info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::tx::v1beta1::ModeInfo* SignerInfo::unsafe_arena_release_mode_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.SignerInfo.mode_info)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::tx::v1beta1::ModeInfo* temp = _impl_.mode_info_;
  _impl_.mode_info_ = nullptr;
  return temp;
}
inline ::cosmos::tx::v1beta1::ModeInfo* SignerInfo::_internal_mutable_mode_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.mode_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::tx::v1beta1::ModeInfo>(GetArena());
    _impl_.mode_info_ = reinterpret_cast<::cosmos::tx::v1beta1::ModeInfo*>(p);
  }
  return _impl_.mode_info_;
}
inline ::cosmos::tx::v1beta1::ModeInfo* SignerInfo::mutable_mode_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::cosmos::tx::v1beta1::ModeInfo* _msg = _internal_mutable_mode_info();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.SignerInfo.mode_info)
  return _msg;
}
inline void SignerInfo::set_allocated_mode_info(::cosmos::tx::v1beta1::ModeInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.mode_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.mode_info_ = reinterpret_cast<::cosmos::tx::v1beta1::ModeInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.SignerInfo.mode_info)
}

// uint64 sequence = 3 [json_name = "sequence"];
inline void SignerInfo::clear_sequence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_ = ::uint64_t{0u};
}
inline ::uint64_t SignerInfo::sequence() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SignerInfo.sequence)
  return _internal_sequence();
}
inline void SignerInfo::set_sequence(::uint64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.SignerInfo.sequence)
}
inline ::uint64_t SignerInfo::_internal_sequence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sequence_;
}
inline void SignerInfo::_internal_set_sequence(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_ = value;
}

// -------------------------------------------------------------------

// ModeInfo_Single

// .cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];
inline void ModeInfo_Single::clear_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mode_ = 0;
}
inline ::cosmos::tx::signing::v1beta1::SignMode ModeInfo_Single::mode() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.ModeInfo.Single.mode)
  return _internal_mode();
}
inline void ModeInfo_Single::set_mode(::cosmos::tx::signing::v1beta1::SignMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.ModeInfo.Single.mode)
}
inline ::cosmos::tx::signing::v1beta1::SignMode ModeInfo_Single::_internal_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::cosmos::tx::signing::v1beta1::SignMode>(_impl_.mode_);
}
inline void ModeInfo_Single::_internal_set_mode(::cosmos::tx::signing::v1beta1::SignMode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mode_ = value;
}

// -------------------------------------------------------------------

// ModeInfo_Multi

// .cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];
inline bool ModeInfo_Multi::has_bitarray() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bitarray_ != nullptr);
  return value;
}
inline const ::cosmos::crypto::multisig::v1beta1::CompactBitArray& ModeInfo_Multi::_internal_bitarray() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::crypto::multisig::v1beta1::CompactBitArray* p = _impl_.bitarray_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::crypto::multisig::v1beta1::CompactBitArray&>(::cosmos::crypto::multisig::v1beta1::_CompactBitArray_default_instance_);
}
inline const ::cosmos::crypto::multisig::v1beta1::CompactBitArray& ModeInfo_Multi::bitarray() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.ModeInfo.Multi.bitarray)
  return _internal_bitarray();
}
inline void ModeInfo_Multi::unsafe_arena_set_allocated_bitarray(::cosmos::crypto::multisig::v1beta1::CompactBitArray* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bitarray_);
  }
  _impl_.bitarray_ = reinterpret_cast<::cosmos::crypto::multisig::v1beta1::CompactBitArray*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.ModeInfo.Multi.bitarray)
}
inline ::cosmos::crypto::multisig::v1beta1::CompactBitArray* ModeInfo_Multi::release_bitarray() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::crypto::multisig::v1beta1::CompactBitArray* released = _impl_.bitarray_;
  _impl_.bitarray_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::crypto::multisig::v1beta1::CompactBitArray* ModeInfo_Multi::unsafe_arena_release_bitarray() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.ModeInfo.Multi.bitarray)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::crypto::multisig::v1beta1::CompactBitArray* temp = _impl_.bitarray_;
  _impl_.bitarray_ = nullptr;
  return temp;
}
inline ::cosmos::crypto::multisig::v1beta1::CompactBitArray* ModeInfo_Multi::_internal_mutable_bitarray() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.bitarray_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::crypto::multisig::v1beta1::CompactBitArray>(GetArena());
    _impl_.bitarray_ = reinterpret_cast<::cosmos::crypto::multisig::v1beta1::CompactBitArray*>(p);
  }
  return _impl_.bitarray_;
}
inline ::cosmos::crypto::multisig::v1beta1::CompactBitArray* ModeInfo_Multi::mutable_bitarray() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::crypto::multisig::v1beta1::CompactBitArray* _msg = _internal_mutable_bitarray();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.ModeInfo.Multi.bitarray)
  return _msg;
}
inline void ModeInfo_Multi::set_allocated_bitarray(::cosmos::crypto::multisig::v1beta1::CompactBitArray* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bitarray_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.bitarray_ = reinterpret_cast<::cosmos::crypto::multisig::v1beta1::CompactBitArray*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.ModeInfo.Multi.bitarray)
}

// repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];
inline int ModeInfo_Multi::_internal_mode_infos_size() const {
  return _internal_mode_infos().size();
}
inline int ModeInfo_Multi::mode_infos_size() const {
  return _internal_mode_infos_size();
}
inline void ModeInfo_Multi::clear_mode_infos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mode_infos_.Clear();
}
inline ::cosmos::tx::v1beta1::ModeInfo* ModeInfo_Multi::mutable_mode_infos(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.ModeInfo.Multi.mode_infos)
  return _internal_mutable_mode_infos()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::tx::v1beta1::ModeInfo>* ModeInfo_Multi::mutable_mode_infos()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.tx.v1beta1.ModeInfo.Multi.mode_infos)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_mode_infos();
}
inline const ::cosmos::tx::v1beta1::ModeInfo& ModeInfo_Multi::mode_infos(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.ModeInfo.Multi.mode_infos)
  return _internal_mode_infos().Get(index);
}
inline ::cosmos::tx::v1beta1::ModeInfo* ModeInfo_Multi::add_mode_infos() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::tx::v1beta1::ModeInfo* _add = _internal_mutable_mode_infos()->Add();
  // @@protoc_insertion_point(field_add:cosmos.tx.v1beta1.ModeInfo.Multi.mode_infos)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::tx::v1beta1::ModeInfo>& ModeInfo_Multi::mode_infos() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.tx.v1beta1.ModeInfo.Multi.mode_infos)
  return _internal_mode_infos();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::tx::v1beta1::ModeInfo>&
ModeInfo_Multi::_internal_mode_infos() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mode_infos_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::tx::v1beta1::ModeInfo>*
ModeInfo_Multi::_internal_mutable_mode_infos() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.mode_infos_;
}

// -------------------------------------------------------------------

// ModeInfo

// .cosmos.tx.v1beta1.ModeInfo.Single single = 1 [json_name = "single"];
inline bool ModeInfo::has_single() const {
  return sum_case() == kSingle;
}
inline bool ModeInfo::_internal_has_single() const {
  return sum_case() == kSingle;
}
inline void ModeInfo::set_has_single() {
  _impl_._oneof_case_[0] = kSingle;
}
inline void ModeInfo::clear_single() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (sum_case() == kSingle) {
    if (GetArena() == nullptr) {
      delete _impl_.sum_.single_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.sum_.single_);
    }
    clear_has_sum();
  }
}
inline ::cosmos::tx::v1beta1::ModeInfo_Single* ModeInfo::release_single() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.ModeInfo.single)
  if (sum_case() == kSingle) {
    clear_has_sum();
    auto* temp = _impl_.sum_.single_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.sum_.single_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cosmos::tx::v1beta1::ModeInfo_Single& ModeInfo::_internal_single() const {
  return sum_case() == kSingle ? *_impl_.sum_.single_ : reinterpret_cast<::cosmos::tx::v1beta1::ModeInfo_Single&>(::cosmos::tx::v1beta1::_ModeInfo_Single_default_instance_);
}
inline const ::cosmos::tx::v1beta1::ModeInfo_Single& ModeInfo::single() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.ModeInfo.single)
  return _internal_single();
}
inline ::cosmos::tx::v1beta1::ModeInfo_Single* ModeInfo::unsafe_arena_release_single() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmos.tx.v1beta1.ModeInfo.single)
  if (sum_case() == kSingle) {
    clear_has_sum();
    auto* temp = _impl_.sum_.single_;
    _impl_.sum_.single_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ModeInfo::unsafe_arena_set_allocated_single(::cosmos::tx::v1beta1::ModeInfo_Single* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_sum();
  if (value) {
    set_has_single();
    _impl_.sum_.single_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.ModeInfo.single)
}
inline ::cosmos::tx::v1beta1::ModeInfo_Single* ModeInfo::_internal_mutable_single() {
  if (sum_case() != kSingle) {
    clear_sum();
    set_has_single();
    _impl_.sum_.single_ =
        ::google::protobuf::Message::DefaultConstruct<::cosmos::tx::v1beta1::ModeInfo_Single>(GetArena());
  }
  return _impl_.sum_.single_;
}
inline ::cosmos::tx::v1beta1::ModeInfo_Single* ModeInfo::mutable_single() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cosmos::tx::v1beta1::ModeInfo_Single* _msg = _internal_mutable_single();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.ModeInfo.single)
  return _msg;
}

// .cosmos.tx.v1beta1.ModeInfo.Multi multi = 2 [json_name = "multi"];
inline bool ModeInfo::has_multi() const {
  return sum_case() == kMulti;
}
inline bool ModeInfo::_internal_has_multi() const {
  return sum_case() == kMulti;
}
inline void ModeInfo::set_has_multi() {
  _impl_._oneof_case_[0] = kMulti;
}
inline void ModeInfo::clear_multi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (sum_case() == kMulti) {
    if (GetArena() == nullptr) {
      delete _impl_.sum_.multi_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.sum_.multi_);
    }
    clear_has_sum();
  }
}
inline ::cosmos::tx::v1beta1::ModeInfo_Multi* ModeInfo::release_multi() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.ModeInfo.multi)
  if (sum_case() == kMulti) {
    clear_has_sum();
    auto* temp = _impl_.sum_.multi_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.sum_.multi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cosmos::tx::v1beta1::ModeInfo_Multi& ModeInfo::_internal_multi() const {
  return sum_case() == kMulti ? *_impl_.sum_.multi_ : reinterpret_cast<::cosmos::tx::v1beta1::ModeInfo_Multi&>(::cosmos::tx::v1beta1::_ModeInfo_Multi_default_instance_);
}
inline const ::cosmos::tx::v1beta1::ModeInfo_Multi& ModeInfo::multi() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.ModeInfo.multi)
  return _internal_multi();
}
inline ::cosmos::tx::v1beta1::ModeInfo_Multi* ModeInfo::unsafe_arena_release_multi() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmos.tx.v1beta1.ModeInfo.multi)
  if (sum_case() == kMulti) {
    clear_has_sum();
    auto* temp = _impl_.sum_.multi_;
    _impl_.sum_.multi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ModeInfo::unsafe_arena_set_allocated_multi(::cosmos::tx::v1beta1::ModeInfo_Multi* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_sum();
  if (value) {
    set_has_multi();
    _impl_.sum_.multi_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.ModeInfo.multi)
}
inline ::cosmos::tx::v1beta1::ModeInfo_Multi* ModeInfo::_internal_mutable_multi() {
  if (sum_case() != kMulti) {
    clear_sum();
    set_has_multi();
    _impl_.sum_.multi_ =
        ::google::protobuf::Message::DefaultConstruct<::cosmos::tx::v1beta1::ModeInfo_Multi>(GetArena());
  }
  return _impl_.sum_.multi_;
}
inline ::cosmos::tx::v1beta1::ModeInfo_Multi* ModeInfo::mutable_multi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cosmos::tx::v1beta1::ModeInfo_Multi* _msg = _internal_mutable_multi();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.ModeInfo.multi)
  return _msg;
}

inline bool ModeInfo::has_sum() const {
  return sum_case() != SUM_NOT_SET;
}
inline void ModeInfo::clear_has_sum() {
  _impl_._oneof_case_[0] = SUM_NOT_SET;
}
inline ModeInfo::SumCase ModeInfo::sum_case() const {
  return ModeInfo::SumCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Fee

// repeated .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
inline int Fee::_internal_amount_size() const {
  return _internal_amount().size();
}
inline int Fee::amount_size() const {
  return _internal_amount_size();
}
inline ::cosmos::base::v1beta1::Coin* Fee::mutable_amount(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.Fee.amount)
  return _internal_mutable_amount()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* Fee::mutable_amount()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.tx.v1beta1.Fee.amount)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_amount();
}
inline const ::cosmos::base::v1beta1::Coin& Fee::amount(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.Fee.amount)
  return _internal_amount().Get(index);
}
inline ::cosmos::base::v1beta1::Coin* Fee::add_amount() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::base::v1beta1::Coin* _add = _internal_mutable_amount()->Add();
  // @@protoc_insertion_point(field_add:cosmos.tx.v1beta1.Fee.amount)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& Fee::amount() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.tx.v1beta1.Fee.amount)
  return _internal_amount();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
Fee::_internal_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
Fee::_internal_mutable_amount() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.amount_;
}

// uint64 gas_limit = 2 [json_name = "gasLimit"];
inline void Fee::clear_gas_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gas_limit_ = ::uint64_t{0u};
}
inline ::uint64_t Fee::gas_limit() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.Fee.gas_limit)
  return _internal_gas_limit();
}
inline void Fee::set_gas_limit(::uint64_t value) {
  _internal_set_gas_limit(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.Fee.gas_limit)
}
inline ::uint64_t Fee::_internal_gas_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gas_limit_;
}
inline void Fee::_internal_set_gas_limit(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gas_limit_ = value;
}

// string payer = 3 [json_name = "payer", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void Fee::clear_payer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payer_.ClearToEmpty();
}
inline const std::string& Fee::payer() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.Fee.payer)
  return _internal_payer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Fee::set_payer(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payer_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.Fee.payer)
}
inline std::string* Fee::mutable_payer() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_payer();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.Fee.payer)
  return _s;
}
inline const std::string& Fee::_internal_payer() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.payer_.Get();
}
inline void Fee::_internal_set_payer(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payer_.Set(value, GetArena());
}
inline std::string* Fee::_internal_mutable_payer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.payer_.Mutable( GetArena());
}
inline std::string* Fee::release_payer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.Fee.payer)
  return _impl_.payer_.Release();
}
inline void Fee::set_allocated_payer(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payer_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.payer_.IsDefault()) {
    _impl_.payer_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.Fee.payer)
}

// string granter = 4 [json_name = "granter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void Fee::clear_granter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.granter_.ClearToEmpty();
}
inline const std::string& Fee::granter() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.Fee.granter)
  return _internal_granter();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Fee::set_granter(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.granter_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.Fee.granter)
}
inline std::string* Fee::mutable_granter() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_granter();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.Fee.granter)
  return _s;
}
inline const std::string& Fee::_internal_granter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.granter_.Get();
}
inline void Fee::_internal_set_granter(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.granter_.Set(value, GetArena());
}
inline std::string* Fee::_internal_mutable_granter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.granter_.Mutable( GetArena());
}
inline std::string* Fee::release_granter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.Fee.granter)
  return _impl_.granter_.Release();
}
inline void Fee::set_allocated_granter(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.granter_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.granter_.IsDefault()) {
    _impl_.granter_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.Fee.granter)
}

// -------------------------------------------------------------------

// Tip

// repeated .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
inline int Tip::_internal_amount_size() const {
  return _internal_amount().size();
}
inline int Tip::amount_size() const {
  return _internal_amount_size();
}
inline ::cosmos::base::v1beta1::Coin* Tip::mutable_amount(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.Tip.amount)
  return _internal_mutable_amount()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* Tip::mutable_amount()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.tx.v1beta1.Tip.amount)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_amount();
}
inline const ::cosmos::base::v1beta1::Coin& Tip::amount(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.Tip.amount)
  return _internal_amount().Get(index);
}
inline ::cosmos::base::v1beta1::Coin* Tip::add_amount() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::base::v1beta1::Coin* _add = _internal_mutable_amount()->Add();
  // @@protoc_insertion_point(field_add:cosmos.tx.v1beta1.Tip.amount)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& Tip::amount() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.tx.v1beta1.Tip.amount)
  return _internal_amount();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
Tip::_internal_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
Tip::_internal_mutable_amount() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.amount_;
}

// string tipper = 2 [json_name = "tipper", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void Tip::clear_tipper() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tipper_.ClearToEmpty();
}
inline const std::string& Tip::tipper() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.Tip.tipper)
  return _internal_tipper();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Tip::set_tipper(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tipper_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.Tip.tipper)
}
inline std::string* Tip::mutable_tipper() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tipper();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.Tip.tipper)
  return _s;
}
inline const std::string& Tip::_internal_tipper() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tipper_.Get();
}
inline void Tip::_internal_set_tipper(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tipper_.Set(value, GetArena());
}
inline std::string* Tip::_internal_mutable_tipper() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.tipper_.Mutable( GetArena());
}
inline std::string* Tip::release_tipper() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.Tip.tipper)
  return _impl_.tipper_.Release();
}
inline void Tip::set_allocated_tipper(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tipper_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.tipper_.IsDefault()) {
    _impl_.tipper_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.Tip.tipper)
}

// -------------------------------------------------------------------

// AuxSignerData

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void AuxSignerData::clear_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.ClearToEmpty();
}
inline const std::string& AuxSignerData::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.AuxSignerData.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuxSignerData::set_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.AuxSignerData.address)
}
inline std::string* AuxSignerData::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.AuxSignerData.address)
  return _s;
}
inline const std::string& AuxSignerData::_internal_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.address_.Get();
}
inline void AuxSignerData::_internal_set_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(value, GetArena());
}
inline std::string* AuxSignerData::_internal_mutable_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.address_.Mutable( GetArena());
}
inline std::string* AuxSignerData::release_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.AuxSignerData.address)
  return _impl_.address_.Release();
}
inline void AuxSignerData::set_allocated_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.AuxSignerData.address)
}

// .cosmos.tx.v1beta1.SignDocDirectAux sign_doc = 2 [json_name = "signDoc"];
inline bool AuxSignerData::has_sign_doc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sign_doc_ != nullptr);
  return value;
}
inline void AuxSignerData::clear_sign_doc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sign_doc_ != nullptr) _impl_.sign_doc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::tx::v1beta1::SignDocDirectAux& AuxSignerData::_internal_sign_doc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::tx::v1beta1::SignDocDirectAux* p = _impl_.sign_doc_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::tx::v1beta1::SignDocDirectAux&>(::cosmos::tx::v1beta1::_SignDocDirectAux_default_instance_);
}
inline const ::cosmos::tx::v1beta1::SignDocDirectAux& AuxSignerData::sign_doc() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.AuxSignerData.sign_doc)
  return _internal_sign_doc();
}
inline void AuxSignerData::unsafe_arena_set_allocated_sign_doc(::cosmos::tx::v1beta1::SignDocDirectAux* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sign_doc_);
  }
  _impl_.sign_doc_ = reinterpret_cast<::cosmos::tx::v1beta1::SignDocDirectAux*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.AuxSignerData.sign_doc)
}
inline ::cosmos::tx::v1beta1::SignDocDirectAux* AuxSignerData::release_sign_doc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::tx::v1beta1::SignDocDirectAux* released = _impl_.sign_doc_;
  _impl_.sign_doc_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::tx::v1beta1::SignDocDirectAux* AuxSignerData::unsafe_arena_release_sign_doc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.AuxSignerData.sign_doc)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::tx::v1beta1::SignDocDirectAux* temp = _impl_.sign_doc_;
  _impl_.sign_doc_ = nullptr;
  return temp;
}
inline ::cosmos::tx::v1beta1::SignDocDirectAux* AuxSignerData::_internal_mutable_sign_doc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sign_doc_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::tx::v1beta1::SignDocDirectAux>(GetArena());
    _impl_.sign_doc_ = reinterpret_cast<::cosmos::tx::v1beta1::SignDocDirectAux*>(p);
  }
  return _impl_.sign_doc_;
}
inline ::cosmos::tx::v1beta1::SignDocDirectAux* AuxSignerData::mutable_sign_doc() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::tx::v1beta1::SignDocDirectAux* _msg = _internal_mutable_sign_doc();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.AuxSignerData.sign_doc)
  return _msg;
}
inline void AuxSignerData::set_allocated_sign_doc(::cosmos::tx::v1beta1::SignDocDirectAux* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.sign_doc_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.sign_doc_ = reinterpret_cast<::cosmos::tx::v1beta1::SignDocDirectAux*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.AuxSignerData.sign_doc)
}

// .cosmos.tx.signing.v1beta1.SignMode mode = 3 [json_name = "mode"];
inline void AuxSignerData::clear_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mode_ = 0;
}
inline ::cosmos::tx::signing::v1beta1::SignMode AuxSignerData::mode() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.AuxSignerData.mode)
  return _internal_mode();
}
inline void AuxSignerData::set_mode(::cosmos::tx::signing::v1beta1::SignMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.AuxSignerData.mode)
}
inline ::cosmos::tx::signing::v1beta1::SignMode AuxSignerData::_internal_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::cosmos::tx::signing::v1beta1::SignMode>(_impl_.mode_);
}
inline void AuxSignerData::_internal_set_mode(::cosmos::tx::signing::v1beta1::SignMode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mode_ = value;
}

// bytes sig = 4 [json_name = "sig"];
inline void AuxSignerData::clear_sig() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sig_.ClearToEmpty();
}
inline const std::string& AuxSignerData::sig() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.AuxSignerData.sig)
  return _internal_sig();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuxSignerData::set_sig(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sig_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.AuxSignerData.sig)
}
inline std::string* AuxSignerData::mutable_sig() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sig();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.AuxSignerData.sig)
  return _s;
}
inline const std::string& AuxSignerData::_internal_sig() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sig_.Get();
}
inline void AuxSignerData::_internal_set_sig(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sig_.Set(value, GetArena());
}
inline std::string* AuxSignerData::_internal_mutable_sig() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sig_.Mutable( GetArena());
}
inline std::string* AuxSignerData::release_sig() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.AuxSignerData.sig)
  return _impl_.sig_.Release();
}
inline void AuxSignerData::set_allocated_sig(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sig_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sig_.IsDefault()) {
    _impl_.sig_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.AuxSignerData.sig)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace tx
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2ftx_2fv1beta1_2ftx_2eproto_2epb_2eh
