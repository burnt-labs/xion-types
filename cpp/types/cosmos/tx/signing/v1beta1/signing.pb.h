// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/tx/signing/v1beta1/signing.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto_2epb_2eh
#define cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "cosmos/crypto/multisig/v1beta1/multisig.pb.h"
#include "google/protobuf/any.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto;
namespace cosmos {
namespace tx {
namespace signing {
namespace v1beta1 {
class SignatureDescriptor;
struct SignatureDescriptorDefaultTypeInternal;
extern SignatureDescriptorDefaultTypeInternal _SignatureDescriptor_default_instance_;
class SignatureDescriptor_Data;
struct SignatureDescriptor_DataDefaultTypeInternal;
extern SignatureDescriptor_DataDefaultTypeInternal _SignatureDescriptor_Data_default_instance_;
class SignatureDescriptor_Data_Multi;
struct SignatureDescriptor_Data_MultiDefaultTypeInternal;
extern SignatureDescriptor_Data_MultiDefaultTypeInternal _SignatureDescriptor_Data_Multi_default_instance_;
class SignatureDescriptor_Data_Single;
struct SignatureDescriptor_Data_SingleDefaultTypeInternal;
extern SignatureDescriptor_Data_SingleDefaultTypeInternal _SignatureDescriptor_Data_Single_default_instance_;
class SignatureDescriptors;
struct SignatureDescriptorsDefaultTypeInternal;
extern SignatureDescriptorsDefaultTypeInternal _SignatureDescriptors_default_instance_;
}  // namespace v1beta1
}  // namespace signing
}  // namespace tx
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace tx {
namespace signing {
namespace v1beta1 {
enum SignMode : int {
  SIGN_MODE_UNSPECIFIED = 0,
  SIGN_MODE_DIRECT = 1,
  SIGN_MODE_TEXTUAL = 2,
  SIGN_MODE_DIRECT_AUX = 3,
  SIGN_MODE_LEGACY_AMINO_JSON = 127,
  SIGN_MODE_EIP_191 = 191,
  SignMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SignMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SignMode_IsValid(int value);
extern const uint32_t SignMode_internal_data_[];
constexpr SignMode SignMode_MIN = static_cast<SignMode>(0);
constexpr SignMode SignMode_MAX = static_cast<SignMode>(191);
constexpr int SignMode_ARRAYSIZE = 191 + 1;
const ::google::protobuf::EnumDescriptor*
SignMode_descriptor();
template <typename T>
const std::string& SignMode_Name(T value) {
  static_assert(std::is_same<T, SignMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SignMode_Name().");
  return ::google::protobuf::internal::NameOfEnum(SignMode_descriptor(), value);
}
inline bool SignMode_Parse(absl::string_view name, SignMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SignMode>(
      SignMode_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SignatureDescriptor_Data_Single final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single) */ {
 public:
  inline SignatureDescriptor_Data_Single() : SignatureDescriptor_Data_Single(nullptr) {}
  ~SignatureDescriptor_Data_Single() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SignatureDescriptor_Data_Single* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SignatureDescriptor_Data_Single));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SignatureDescriptor_Data_Single(
      ::google::protobuf::internal::ConstantInitialized);

  inline SignatureDescriptor_Data_Single(const SignatureDescriptor_Data_Single& from) : SignatureDescriptor_Data_Single(nullptr, from) {}
  inline SignatureDescriptor_Data_Single(SignatureDescriptor_Data_Single&& from) noexcept
      : SignatureDescriptor_Data_Single(nullptr, std::move(from)) {}
  inline SignatureDescriptor_Data_Single& operator=(const SignatureDescriptor_Data_Single& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignatureDescriptor_Data_Single& operator=(SignatureDescriptor_Data_Single&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignatureDescriptor_Data_Single& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignatureDescriptor_Data_Single* internal_default_instance() {
    return reinterpret_cast<const SignatureDescriptor_Data_Single*>(
        &_SignatureDescriptor_Data_Single_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SignatureDescriptor_Data_Single& a, SignatureDescriptor_Data_Single& b) { a.Swap(&b); }
  inline void Swap(SignatureDescriptor_Data_Single* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignatureDescriptor_Data_Single* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignatureDescriptor_Data_Single* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SignatureDescriptor_Data_Single>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SignatureDescriptor_Data_Single& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SignatureDescriptor_Data_Single& from) { SignatureDescriptor_Data_Single::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SignatureDescriptor_Data_Single* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single"; }

 protected:
  explicit SignatureDescriptor_Data_Single(::google::protobuf::Arena* arena);
  SignatureDescriptor_Data_Single(::google::protobuf::Arena* arena, const SignatureDescriptor_Data_Single& from);
  SignatureDescriptor_Data_Single(::google::protobuf::Arena* arena, SignatureDescriptor_Data_Single&& from) noexcept
      : SignatureDescriptor_Data_Single(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSignatureFieldNumber = 2,
    kModeFieldNumber = 1,
  };
  // bytes signature = 2 [json_name = "signature"];
  void clear_signature() ;
  const std::string& signature() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signature(Arg_&& arg, Args_... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* value);

  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(
      const std::string& value);
  std::string* _internal_mutable_signature();

  public:
  // .cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];
  void clear_mode() ;
  ::cosmos::tx::signing::v1beta1::SignMode mode() const;
  void set_mode(::cosmos::tx::signing::v1beta1::SignMode value);

  private:
  ::cosmos::tx::signing::v1beta1::SignMode _internal_mode() const;
  void _internal_set_mode(::cosmos::tx::signing::v1beta1::SignMode value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SignatureDescriptor_Data_Single& from_msg);
    ::google::protobuf::internal::ArenaStringPtr signature_;
    int mode_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto;
};
// -------------------------------------------------------------------

class SignatureDescriptor_Data final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data) */ {
 public:
  inline SignatureDescriptor_Data() : SignatureDescriptor_Data(nullptr) {}
  ~SignatureDescriptor_Data() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SignatureDescriptor_Data* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SignatureDescriptor_Data));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SignatureDescriptor_Data(
      ::google::protobuf::internal::ConstantInitialized);

  inline SignatureDescriptor_Data(const SignatureDescriptor_Data& from) : SignatureDescriptor_Data(nullptr, from) {}
  inline SignatureDescriptor_Data(SignatureDescriptor_Data&& from) noexcept
      : SignatureDescriptor_Data(nullptr, std::move(from)) {}
  inline SignatureDescriptor_Data& operator=(const SignatureDescriptor_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignatureDescriptor_Data& operator=(SignatureDescriptor_Data&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignatureDescriptor_Data& default_instance() {
    return *internal_default_instance();
  }
  enum SumCase {
    kSingle = 1,
    kMulti = 2,
    SUM_NOT_SET = 0,
  };
  static inline const SignatureDescriptor_Data* internal_default_instance() {
    return reinterpret_cast<const SignatureDescriptor_Data*>(
        &_SignatureDescriptor_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(SignatureDescriptor_Data& a, SignatureDescriptor_Data& b) { a.Swap(&b); }
  inline void Swap(SignatureDescriptor_Data* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignatureDescriptor_Data* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignatureDescriptor_Data* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SignatureDescriptor_Data>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SignatureDescriptor_Data& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SignatureDescriptor_Data& from) { SignatureDescriptor_Data::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SignatureDescriptor_Data* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.tx.signing.v1beta1.SignatureDescriptor.Data"; }

 protected:
  explicit SignatureDescriptor_Data(::google::protobuf::Arena* arena);
  SignatureDescriptor_Data(::google::protobuf::Arena* arena, const SignatureDescriptor_Data& from);
  SignatureDescriptor_Data(::google::protobuf::Arena* arena, SignatureDescriptor_Data&& from) noexcept
      : SignatureDescriptor_Data(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Single = SignatureDescriptor_Data_Single;
  using Multi = SignatureDescriptor_Data_Multi;

  // accessors -------------------------------------------------------
  enum : int {
    kSingleFieldNumber = 1,
    kMultiFieldNumber = 2,
  };
  // .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single = 1 [json_name = "single"];
  bool has_single() const;
  private:
  bool _internal_has_single() const;

  public:
  void clear_single() ;
  const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single& single() const;
  PROTOBUF_NODISCARD ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* release_single();
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* mutable_single();
  void set_allocated_single(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* value);
  void unsafe_arena_set_allocated_single(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* value);
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* unsafe_arena_release_single();

  private:
  const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single& _internal_single() const;
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* _internal_mutable_single();

  public:
  // .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2 [json_name = "multi"];
  bool has_multi() const;
  private:
  bool _internal_has_multi() const;

  public:
  void clear_multi() ;
  const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi& multi() const;
  PROTOBUF_NODISCARD ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* release_multi();
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* mutable_multi();
  void set_allocated_multi(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* value);
  void unsafe_arena_set_allocated_multi(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* value);
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* unsafe_arena_release_multi();

  private:
  const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi& _internal_multi() const;
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* _internal_mutable_multi();

  public:
  void clear_sum();
  SumCase sum_case() const;
  // @@protoc_insertion_point(class_scope:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data)
 private:
  class _Internal;
  void set_has_single();
  void set_has_multi();
  inline bool has_sum() const;
  inline void clear_has_sum();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SignatureDescriptor_Data& from_msg);
    union SumUnion {
      constexpr SumUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* single_;
      ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* multi_;
    } sum_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto;
};
// -------------------------------------------------------------------

class SignatureDescriptor_Data_Multi final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi) */ {
 public:
  inline SignatureDescriptor_Data_Multi() : SignatureDescriptor_Data_Multi(nullptr) {}
  ~SignatureDescriptor_Data_Multi() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SignatureDescriptor_Data_Multi* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SignatureDescriptor_Data_Multi));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SignatureDescriptor_Data_Multi(
      ::google::protobuf::internal::ConstantInitialized);

  inline SignatureDescriptor_Data_Multi(const SignatureDescriptor_Data_Multi& from) : SignatureDescriptor_Data_Multi(nullptr, from) {}
  inline SignatureDescriptor_Data_Multi(SignatureDescriptor_Data_Multi&& from) noexcept
      : SignatureDescriptor_Data_Multi(nullptr, std::move(from)) {}
  inline SignatureDescriptor_Data_Multi& operator=(const SignatureDescriptor_Data_Multi& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignatureDescriptor_Data_Multi& operator=(SignatureDescriptor_Data_Multi&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignatureDescriptor_Data_Multi& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignatureDescriptor_Data_Multi* internal_default_instance() {
    return reinterpret_cast<const SignatureDescriptor_Data_Multi*>(
        &_SignatureDescriptor_Data_Multi_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(SignatureDescriptor_Data_Multi& a, SignatureDescriptor_Data_Multi& b) { a.Swap(&b); }
  inline void Swap(SignatureDescriptor_Data_Multi* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignatureDescriptor_Data_Multi* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignatureDescriptor_Data_Multi* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SignatureDescriptor_Data_Multi>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SignatureDescriptor_Data_Multi& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SignatureDescriptor_Data_Multi& from) { SignatureDescriptor_Data_Multi::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SignatureDescriptor_Data_Multi* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi"; }

 protected:
  explicit SignatureDescriptor_Data_Multi(::google::protobuf::Arena* arena);
  SignatureDescriptor_Data_Multi(::google::protobuf::Arena* arena, const SignatureDescriptor_Data_Multi& from);
  SignatureDescriptor_Data_Multi(::google::protobuf::Arena* arena, SignatureDescriptor_Data_Multi&& from) noexcept
      : SignatureDescriptor_Data_Multi(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSignaturesFieldNumber = 2,
    kBitarrayFieldNumber = 1,
  };
  // repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];
  int signatures_size() const;
  private:
  int _internal_signatures_size() const;

  public:
  void clear_signatures() ;
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* mutable_signatures(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data>* mutable_signatures();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data>& _internal_signatures() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data>* _internal_mutable_signatures();
  public:
  const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data& signatures(int index) const;
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* add_signatures();
  const ::google::protobuf::RepeatedPtrField<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data>& signatures() const;
  // .cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];
  bool has_bitarray() const;
  void clear_bitarray() ;
  const ::cosmos::crypto::multisig::v1beta1::CompactBitArray& bitarray() const;
  PROTOBUF_NODISCARD ::cosmos::crypto::multisig::v1beta1::CompactBitArray* release_bitarray();
  ::cosmos::crypto::multisig::v1beta1::CompactBitArray* mutable_bitarray();
  void set_allocated_bitarray(::cosmos::crypto::multisig::v1beta1::CompactBitArray* value);
  void unsafe_arena_set_allocated_bitarray(::cosmos::crypto::multisig::v1beta1::CompactBitArray* value);
  ::cosmos::crypto::multisig::v1beta1::CompactBitArray* unsafe_arena_release_bitarray();

  private:
  const ::cosmos::crypto::multisig::v1beta1::CompactBitArray& _internal_bitarray() const;
  ::cosmos::crypto::multisig::v1beta1::CompactBitArray* _internal_mutable_bitarray();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SignatureDescriptor_Data_Multi& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data > signatures_;
    ::cosmos::crypto::multisig::v1beta1::CompactBitArray* bitarray_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto;
};
// -------------------------------------------------------------------

class SignatureDescriptor final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.tx.signing.v1beta1.SignatureDescriptor) */ {
 public:
  inline SignatureDescriptor() : SignatureDescriptor(nullptr) {}
  ~SignatureDescriptor() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SignatureDescriptor* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SignatureDescriptor));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SignatureDescriptor(
      ::google::protobuf::internal::ConstantInitialized);

  inline SignatureDescriptor(const SignatureDescriptor& from) : SignatureDescriptor(nullptr, from) {}
  inline SignatureDescriptor(SignatureDescriptor&& from) noexcept
      : SignatureDescriptor(nullptr, std::move(from)) {}
  inline SignatureDescriptor& operator=(const SignatureDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignatureDescriptor& operator=(SignatureDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignatureDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignatureDescriptor* internal_default_instance() {
    return reinterpret_cast<const SignatureDescriptor*>(
        &_SignatureDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(SignatureDescriptor& a, SignatureDescriptor& b) { a.Swap(&b); }
  inline void Swap(SignatureDescriptor* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignatureDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignatureDescriptor* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SignatureDescriptor>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SignatureDescriptor& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SignatureDescriptor& from) { SignatureDescriptor::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SignatureDescriptor* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.tx.signing.v1beta1.SignatureDescriptor"; }

 protected:
  explicit SignatureDescriptor(::google::protobuf::Arena* arena);
  SignatureDescriptor(::google::protobuf::Arena* arena, const SignatureDescriptor& from);
  SignatureDescriptor(::google::protobuf::Arena* arena, SignatureDescriptor&& from) noexcept
      : SignatureDescriptor(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Data = SignatureDescriptor_Data;

  // accessors -------------------------------------------------------
  enum : int {
    kPublicKeyFieldNumber = 1,
    kDataFieldNumber = 2,
    kSequenceFieldNumber = 3,
  };
  // .google.protobuf.Any public_key = 1 [json_name = "publicKey"];
  bool has_public_key() const;
  void clear_public_key() ;
  const ::google::protobuf::Any& public_key() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_public_key();
  ::google::protobuf::Any* mutable_public_key();
  void set_allocated_public_key(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_public_key(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_public_key();

  private:
  const ::google::protobuf::Any& _internal_public_key() const;
  ::google::protobuf::Any* _internal_mutable_public_key();

  public:
  // .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data = 2 [json_name = "data"];
  bool has_data() const;
  void clear_data() ;
  const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data& data() const;
  PROTOBUF_NODISCARD ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* release_data();
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* mutable_data();
  void set_allocated_data(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* value);
  void unsafe_arena_set_allocated_data(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* value);
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* unsafe_arena_release_data();

  private:
  const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data& _internal_data() const;
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* _internal_mutable_data();

  public:
  // uint64 sequence = 3 [json_name = "sequence"];
  void clear_sequence() ;
  ::uint64_t sequence() const;
  void set_sequence(::uint64_t value);

  private:
  ::uint64_t _internal_sequence() const;
  void _internal_set_sequence(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.signing.v1beta1.SignatureDescriptor)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SignatureDescriptor& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Any* public_key_;
    ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* data_;
    ::uint64_t sequence_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto;
};
// -------------------------------------------------------------------

class SignatureDescriptors final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.tx.signing.v1beta1.SignatureDescriptors) */ {
 public:
  inline SignatureDescriptors() : SignatureDescriptors(nullptr) {}
  ~SignatureDescriptors() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SignatureDescriptors* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SignatureDescriptors));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SignatureDescriptors(
      ::google::protobuf::internal::ConstantInitialized);

  inline SignatureDescriptors(const SignatureDescriptors& from) : SignatureDescriptors(nullptr, from) {}
  inline SignatureDescriptors(SignatureDescriptors&& from) noexcept
      : SignatureDescriptors(nullptr, std::move(from)) {}
  inline SignatureDescriptors& operator=(const SignatureDescriptors& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignatureDescriptors& operator=(SignatureDescriptors&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignatureDescriptors& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignatureDescriptors* internal_default_instance() {
    return reinterpret_cast<const SignatureDescriptors*>(
        &_SignatureDescriptors_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SignatureDescriptors& a, SignatureDescriptors& b) { a.Swap(&b); }
  inline void Swap(SignatureDescriptors* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignatureDescriptors* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignatureDescriptors* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SignatureDescriptors>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SignatureDescriptors& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SignatureDescriptors& from) { SignatureDescriptors::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SignatureDescriptors* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.tx.signing.v1beta1.SignatureDescriptors"; }

 protected:
  explicit SignatureDescriptors(::google::protobuf::Arena* arena);
  SignatureDescriptors(::google::protobuf::Arena* arena, const SignatureDescriptors& from);
  SignatureDescriptors(::google::protobuf::Arena* arena, SignatureDescriptors&& from) noexcept
      : SignatureDescriptors(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSignaturesFieldNumber = 1,
  };
  // repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor signatures = 1 [json_name = "signatures"];
  int signatures_size() const;
  private:
  int _internal_signatures_size() const;

  public:
  void clear_signatures() ;
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor* mutable_signatures(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::tx::signing::v1beta1::SignatureDescriptor>* mutable_signatures();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::tx::signing::v1beta1::SignatureDescriptor>& _internal_signatures() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::tx::signing::v1beta1::SignatureDescriptor>* _internal_mutable_signatures();
  public:
  const ::cosmos::tx::signing::v1beta1::SignatureDescriptor& signatures(int index) const;
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor* add_signatures();
  const ::google::protobuf::RepeatedPtrField<::cosmos::tx::signing::v1beta1::SignatureDescriptor>& signatures() const;
  // @@protoc_insertion_point(class_scope:cosmos.tx.signing.v1beta1.SignatureDescriptors)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SignatureDescriptors& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::tx::signing::v1beta1::SignatureDescriptor > signatures_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SignatureDescriptors

// repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor signatures = 1 [json_name = "signatures"];
inline int SignatureDescriptors::_internal_signatures_size() const {
  return _internal_signatures().size();
}
inline int SignatureDescriptors::signatures_size() const {
  return _internal_signatures_size();
}
inline void SignatureDescriptors::clear_signatures() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signatures_.Clear();
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor* SignatureDescriptors::mutable_signatures(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.tx.signing.v1beta1.SignatureDescriptors.signatures)
  return _internal_mutable_signatures()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::tx::signing::v1beta1::SignatureDescriptor>* SignatureDescriptors::mutable_signatures()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.tx.signing.v1beta1.SignatureDescriptors.signatures)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_signatures();
}
inline const ::cosmos::tx::signing::v1beta1::SignatureDescriptor& SignatureDescriptors::signatures(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.signing.v1beta1.SignatureDescriptors.signatures)
  return _internal_signatures().Get(index);
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor* SignatureDescriptors::add_signatures() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor* _add = _internal_mutable_signatures()->Add();
  // @@protoc_insertion_point(field_add:cosmos.tx.signing.v1beta1.SignatureDescriptors.signatures)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::tx::signing::v1beta1::SignatureDescriptor>& SignatureDescriptors::signatures() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.tx.signing.v1beta1.SignatureDescriptors.signatures)
  return _internal_signatures();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::tx::signing::v1beta1::SignatureDescriptor>&
SignatureDescriptors::_internal_signatures() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.signatures_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::tx::signing::v1beta1::SignatureDescriptor>*
SignatureDescriptors::_internal_mutable_signatures() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.signatures_;
}

// -------------------------------------------------------------------

// SignatureDescriptor_Data_Single

// .cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];
inline void SignatureDescriptor_Data_Single::clear_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mode_ = 0;
}
inline ::cosmos::tx::signing::v1beta1::SignMode SignatureDescriptor_Data_Single::mode() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single.mode)
  return _internal_mode();
}
inline void SignatureDescriptor_Data_Single::set_mode(::cosmos::tx::signing::v1beta1::SignMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single.mode)
}
inline ::cosmos::tx::signing::v1beta1::SignMode SignatureDescriptor_Data_Single::_internal_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::cosmos::tx::signing::v1beta1::SignMode>(_impl_.mode_);
}
inline void SignatureDescriptor_Data_Single::_internal_set_mode(::cosmos::tx::signing::v1beta1::SignMode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mode_ = value;
}

// bytes signature = 2 [json_name = "signature"];
inline void SignatureDescriptor_Data_Single::clear_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& SignatureDescriptor_Data_Single::signature() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single.signature)
  return _internal_signature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignatureDescriptor_Data_Single::set_signature(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single.signature)
}
inline std::string* SignatureDescriptor_Data_Single::mutable_signature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single.signature)
  return _s;
}
inline const std::string& SignatureDescriptor_Data_Single::_internal_signature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.signature_.Get();
}
inline void SignatureDescriptor_Data_Single::_internal_set_signature(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_.Set(value, GetArena());
}
inline std::string* SignatureDescriptor_Data_Single::_internal_mutable_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.signature_.Mutable( GetArena());
}
inline std::string* SignatureDescriptor_Data_Single::release_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single.signature)
  return _impl_.signature_.Release();
}
inline void SignatureDescriptor_Data_Single::set_allocated_signature(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signature_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.signature_.IsDefault()) {
    _impl_.signature_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single.signature)
}

// -------------------------------------------------------------------

// SignatureDescriptor_Data_Multi

// .cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];
inline bool SignatureDescriptor_Data_Multi::has_bitarray() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bitarray_ != nullptr);
  return value;
}
inline const ::cosmos::crypto::multisig::v1beta1::CompactBitArray& SignatureDescriptor_Data_Multi::_internal_bitarray() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::crypto::multisig::v1beta1::CompactBitArray* p = _impl_.bitarray_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::crypto::multisig::v1beta1::CompactBitArray&>(::cosmos::crypto::multisig::v1beta1::_CompactBitArray_default_instance_);
}
inline const ::cosmos::crypto::multisig::v1beta1::CompactBitArray& SignatureDescriptor_Data_Multi::bitarray() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi.bitarray)
  return _internal_bitarray();
}
inline void SignatureDescriptor_Data_Multi::unsafe_arena_set_allocated_bitarray(::cosmos::crypto::multisig::v1beta1::CompactBitArray* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bitarray_);
  }
  _impl_.bitarray_ = reinterpret_cast<::cosmos::crypto::multisig::v1beta1::CompactBitArray*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi.bitarray)
}
inline ::cosmos::crypto::multisig::v1beta1::CompactBitArray* SignatureDescriptor_Data_Multi::release_bitarray() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::crypto::multisig::v1beta1::CompactBitArray* released = _impl_.bitarray_;
  _impl_.bitarray_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::crypto::multisig::v1beta1::CompactBitArray* SignatureDescriptor_Data_Multi::unsafe_arena_release_bitarray() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi.bitarray)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::crypto::multisig::v1beta1::CompactBitArray* temp = _impl_.bitarray_;
  _impl_.bitarray_ = nullptr;
  return temp;
}
inline ::cosmos::crypto::multisig::v1beta1::CompactBitArray* SignatureDescriptor_Data_Multi::_internal_mutable_bitarray() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.bitarray_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::crypto::multisig::v1beta1::CompactBitArray>(GetArena());
    _impl_.bitarray_ = reinterpret_cast<::cosmos::crypto::multisig::v1beta1::CompactBitArray*>(p);
  }
  return _impl_.bitarray_;
}
inline ::cosmos::crypto::multisig::v1beta1::CompactBitArray* SignatureDescriptor_Data_Multi::mutable_bitarray() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::crypto::multisig::v1beta1::CompactBitArray* _msg = _internal_mutable_bitarray();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi.bitarray)
  return _msg;
}
inline void SignatureDescriptor_Data_Multi::set_allocated_bitarray(::cosmos::crypto::multisig::v1beta1::CompactBitArray* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bitarray_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.bitarray_ = reinterpret_cast<::cosmos::crypto::multisig::v1beta1::CompactBitArray*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi.bitarray)
}

// repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];
inline int SignatureDescriptor_Data_Multi::_internal_signatures_size() const {
  return _internal_signatures().size();
}
inline int SignatureDescriptor_Data_Multi::signatures_size() const {
  return _internal_signatures_size();
}
inline void SignatureDescriptor_Data_Multi::clear_signatures() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signatures_.Clear();
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* SignatureDescriptor_Data_Multi::mutable_signatures(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi.signatures)
  return _internal_mutable_signatures()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data>* SignatureDescriptor_Data_Multi::mutable_signatures()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi.signatures)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_signatures();
}
inline const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data& SignatureDescriptor_Data_Multi::signatures(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi.signatures)
  return _internal_signatures().Get(index);
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* SignatureDescriptor_Data_Multi::add_signatures() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* _add = _internal_mutable_signatures()->Add();
  // @@protoc_insertion_point(field_add:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi.signatures)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data>& SignatureDescriptor_Data_Multi::signatures() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi.signatures)
  return _internal_signatures();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data>&
SignatureDescriptor_Data_Multi::_internal_signatures() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.signatures_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data>*
SignatureDescriptor_Data_Multi::_internal_mutable_signatures() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.signatures_;
}

// -------------------------------------------------------------------

// SignatureDescriptor_Data

// .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single = 1 [json_name = "single"];
inline bool SignatureDescriptor_Data::has_single() const {
  return sum_case() == kSingle;
}
inline bool SignatureDescriptor_Data::_internal_has_single() const {
  return sum_case() == kSingle;
}
inline void SignatureDescriptor_Data::set_has_single() {
  _impl_._oneof_case_[0] = kSingle;
}
inline void SignatureDescriptor_Data::clear_single() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (sum_case() == kSingle) {
    if (GetArena() == nullptr) {
      delete _impl_.sum_.single_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.sum_.single_);
    }
    clear_has_sum();
  }
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* SignatureDescriptor_Data::release_single() {
  // @@protoc_insertion_point(field_release:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.single)
  if (sum_case() == kSingle) {
    clear_has_sum();
    auto* temp = _impl_.sum_.single_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.sum_.single_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single& SignatureDescriptor_Data::_internal_single() const {
  return sum_case() == kSingle ? *_impl_.sum_.single_ : reinterpret_cast<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single&>(::cosmos::tx::signing::v1beta1::_SignatureDescriptor_Data_Single_default_instance_);
}
inline const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single& SignatureDescriptor_Data::single() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.single)
  return _internal_single();
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* SignatureDescriptor_Data::unsafe_arena_release_single() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.single)
  if (sum_case() == kSingle) {
    clear_has_sum();
    auto* temp = _impl_.sum_.single_;
    _impl_.sum_.single_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SignatureDescriptor_Data::unsafe_arena_set_allocated_single(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_sum();
  if (value) {
    set_has_single();
    _impl_.sum_.single_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.single)
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* SignatureDescriptor_Data::_internal_mutable_single() {
  if (sum_case() != kSingle) {
    clear_sum();
    set_has_single();
    _impl_.sum_.single_ =
        ::google::protobuf::Message::DefaultConstruct<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single>(GetArena());
  }
  return _impl_.sum_.single_;
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* SignatureDescriptor_Data::mutable_single() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* _msg = _internal_mutable_single();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.single)
  return _msg;
}

// .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2 [json_name = "multi"];
inline bool SignatureDescriptor_Data::has_multi() const {
  return sum_case() == kMulti;
}
inline bool SignatureDescriptor_Data::_internal_has_multi() const {
  return sum_case() == kMulti;
}
inline void SignatureDescriptor_Data::set_has_multi() {
  _impl_._oneof_case_[0] = kMulti;
}
inline void SignatureDescriptor_Data::clear_multi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (sum_case() == kMulti) {
    if (GetArena() == nullptr) {
      delete _impl_.sum_.multi_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.sum_.multi_);
    }
    clear_has_sum();
  }
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* SignatureDescriptor_Data::release_multi() {
  // @@protoc_insertion_point(field_release:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.multi)
  if (sum_case() == kMulti) {
    clear_has_sum();
    auto* temp = _impl_.sum_.multi_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.sum_.multi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi& SignatureDescriptor_Data::_internal_multi() const {
  return sum_case() == kMulti ? *_impl_.sum_.multi_ : reinterpret_cast<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi&>(::cosmos::tx::signing::v1beta1::_SignatureDescriptor_Data_Multi_default_instance_);
}
inline const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi& SignatureDescriptor_Data::multi() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.multi)
  return _internal_multi();
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* SignatureDescriptor_Data::unsafe_arena_release_multi() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.multi)
  if (sum_case() == kMulti) {
    clear_has_sum();
    auto* temp = _impl_.sum_.multi_;
    _impl_.sum_.multi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SignatureDescriptor_Data::unsafe_arena_set_allocated_multi(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_sum();
  if (value) {
    set_has_multi();
    _impl_.sum_.multi_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.multi)
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* SignatureDescriptor_Data::_internal_mutable_multi() {
  if (sum_case() != kMulti) {
    clear_sum();
    set_has_multi();
    _impl_.sum_.multi_ =
        ::google::protobuf::Message::DefaultConstruct<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi>(GetArena());
  }
  return _impl_.sum_.multi_;
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* SignatureDescriptor_Data::mutable_multi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* _msg = _internal_mutable_multi();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.multi)
  return _msg;
}

inline bool SignatureDescriptor_Data::has_sum() const {
  return sum_case() != SUM_NOT_SET;
}
inline void SignatureDescriptor_Data::clear_has_sum() {
  _impl_._oneof_case_[0] = SUM_NOT_SET;
}
inline SignatureDescriptor_Data::SumCase SignatureDescriptor_Data::sum_case() const {
  return SignatureDescriptor_Data::SumCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// SignatureDescriptor

// .google.protobuf.Any public_key = 1 [json_name = "publicKey"];
inline bool SignatureDescriptor::has_public_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.public_key_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& SignatureDescriptor::_internal_public_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Any* p = _impl_.public_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& SignatureDescriptor::public_key() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.signing.v1beta1.SignatureDescriptor.public_key)
  return _internal_public_key();
}
inline void SignatureDescriptor::unsafe_arena_set_allocated_public_key(::google::protobuf::Any* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.public_key_);
  }
  _impl_.public_key_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.signing.v1beta1.SignatureDescriptor.public_key)
}
inline ::google::protobuf::Any* SignatureDescriptor::release_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* released = _impl_.public_key_;
  _impl_.public_key_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Any* SignatureDescriptor::unsafe_arena_release_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.tx.signing.v1beta1.SignatureDescriptor.public_key)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* temp = _impl_.public_key_;
  _impl_.public_key_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* SignatureDescriptor::_internal_mutable_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.public_key_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Any>(GetArena());
    _impl_.public_key_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.public_key_;
}
inline ::google::protobuf::Any* SignatureDescriptor::mutable_public_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Any* _msg = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.signing.v1beta1.SignatureDescriptor.public_key)
  return _msg;
}
inline void SignatureDescriptor::set_allocated_public_key(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.public_key_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.public_key_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.signing.v1beta1.SignatureDescriptor.public_key)
}

// .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data = 2 [json_name = "data"];
inline bool SignatureDescriptor::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline void SignatureDescriptor::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data& SignatureDescriptor::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data&>(::cosmos::tx::signing::v1beta1::_SignatureDescriptor_Data_default_instance_);
}
inline const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data& SignatureDescriptor::data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.tx.signing.v1beta1.SignatureDescriptor.data)
  return _internal_data();
}
inline void SignatureDescriptor::unsafe_arena_set_allocated_data(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = reinterpret_cast<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.signing.v1beta1.SignatureDescriptor.data)
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* SignatureDescriptor::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* released = _impl_.data_;
  _impl_.data_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* SignatureDescriptor::unsafe_arena_release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.tx.signing.v1beta1.SignatureDescriptor.data)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* SignatureDescriptor::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data>(GetArena());
    _impl_.data_ = reinterpret_cast<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data*>(p);
  }
  return _impl_.data_;
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* SignatureDescriptor::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.signing.v1beta1.SignatureDescriptor.data)
  return _msg;
}
inline void SignatureDescriptor::set_allocated_data(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.data_ = reinterpret_cast<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.signing.v1beta1.SignatureDescriptor.data)
}

// uint64 sequence = 3 [json_name = "sequence"];
inline void SignatureDescriptor::clear_sequence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_ = ::uint64_t{0u};
}
inline ::uint64_t SignatureDescriptor::sequence() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.signing.v1beta1.SignatureDescriptor.sequence)
  return _internal_sequence();
}
inline void SignatureDescriptor::set_sequence(::uint64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.signing.v1beta1.SignatureDescriptor.sequence)
}
inline ::uint64_t SignatureDescriptor::_internal_sequence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sequence_;
}
inline void SignatureDescriptor::_internal_set_sequence(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace signing
}  // namespace tx
}  // namespace cosmos


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::cosmos::tx::signing::v1beta1::SignMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cosmos::tx::signing::v1beta1::SignMode>() {
  return ::cosmos::tx::signing::v1beta1::SignMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto_2epb_2eh
