// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/tx/signing/v1beta1/signing.proto
// Protobuf C++ Version: 5.29.4

#include "cosmos/tx/signing/v1beta1/signing.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace cosmos {
namespace tx {
namespace signing {
namespace v1beta1 {

inline constexpr SignatureDescriptor_Data_Single::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : signature_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        mode_{static_cast< ::cosmos::tx::signing::v1beta1::SignMode >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SignatureDescriptor_Data_Single::SignatureDescriptor_Data_Single(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SignatureDescriptor_Data_SingleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignatureDescriptor_Data_SingleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignatureDescriptor_Data_SingleDefaultTypeInternal() {}
  union {
    SignatureDescriptor_Data_Single _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignatureDescriptor_Data_SingleDefaultTypeInternal _SignatureDescriptor_Data_Single_default_instance_;

inline constexpr SignatureDescriptor_Data::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : sum_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR SignatureDescriptor_Data::SignatureDescriptor_Data(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SignatureDescriptor_DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignatureDescriptor_DataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignatureDescriptor_DataDefaultTypeInternal() {}
  union {
    SignatureDescriptor_Data _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignatureDescriptor_DataDefaultTypeInternal _SignatureDescriptor_Data_default_instance_;

inline constexpr SignatureDescriptor_Data_Multi::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        signatures_{},
        bitarray_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SignatureDescriptor_Data_Multi::SignatureDescriptor_Data_Multi(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SignatureDescriptor_Data_MultiDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignatureDescriptor_Data_MultiDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignatureDescriptor_Data_MultiDefaultTypeInternal() {}
  union {
    SignatureDescriptor_Data_Multi _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignatureDescriptor_Data_MultiDefaultTypeInternal _SignatureDescriptor_Data_Multi_default_instance_;

inline constexpr SignatureDescriptor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        public_key_{nullptr},
        data_{nullptr},
        sequence_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR SignatureDescriptor::SignatureDescriptor(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SignatureDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignatureDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignatureDescriptorDefaultTypeInternal() {}
  union {
    SignatureDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignatureDescriptorDefaultTypeInternal _SignatureDescriptor_default_instance_;

inline constexpr SignatureDescriptors::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : signatures_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SignatureDescriptors::SignatureDescriptors(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SignatureDescriptorsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignatureDescriptorsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignatureDescriptorsDefaultTypeInternal() {}
  union {
    SignatureDescriptors _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignatureDescriptorsDefaultTypeInternal _SignatureDescriptors_default_instance_;
}  // namespace v1beta1
}  // namespace signing
}  // namespace tx
}  // namespace cosmos
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto = nullptr;
const ::uint32_t
    TableStruct_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptors, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptors, _impl_.signatures_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single, _impl_.mode_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single, _impl_.signature_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi, _impl_.bitarray_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi, _impl_.signatures_),
        0,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data, _impl_.sum_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor, _impl_.public_key_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor, _impl_.data_),
        PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor, _impl_.sequence_),
        0,
        1,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::cosmos::tx::signing::v1beta1::SignatureDescriptors)},
        {9, -1, -1, sizeof(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single)},
        {19, 29, -1, sizeof(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi)},
        {31, -1, -1, sizeof(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data)},
        {42, 53, -1, sizeof(::cosmos::tx::signing::v1beta1::SignatureDescriptor)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::tx::signing::v1beta1::_SignatureDescriptors_default_instance_._instance,
    &::cosmos::tx::signing::v1beta1::_SignatureDescriptor_Data_Single_default_instance_._instance,
    &::cosmos::tx::signing::v1beta1::_SignatureDescriptor_Data_Multi_default_instance_._instance,
    &::cosmos::tx::signing::v1beta1::_SignatureDescriptor_Data_default_instance_._instance,
    &::cosmos::tx::signing::v1beta1::_SignatureDescriptor_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\'cosmos/tx/signing/v1beta1/signing.prot"
    "o\022\031cosmos.tx.signing.v1beta1\032-cosmos/cry"
    "pto/multisig/v1beta1/multisig.proto\032\031goo"
    "gle/protobuf/any.proto\"f\n\024SignatureDescr"
    "iptors\022N\n\nsignatures\030\001 \003(\0132..cosmos.tx.s"
    "igning.v1beta1.SignatureDescriptorR\nsign"
    "atures\"\365\004\n\023SignatureDescriptor\0223\n\npublic"
    "_key\030\001 \001(\0132\024.google.protobuf.AnyR\tpublic"
    "Key\022G\n\004data\030\002 \001(\01323.cosmos.tx.signing.v1"
    "beta1.SignatureDescriptor.DataR\004data\022\032\n\010"
    "sequence\030\003 \001(\004R\010sequence\032\303\003\n\004Data\022T\n\006sin"
    "gle\030\001 \001(\0132:.cosmos.tx.signing.v1beta1.Si"
    "gnatureDescriptor.Data.SingleH\000R\006single\022"
    "Q\n\005multi\030\002 \001(\01329.cosmos.tx.signing.v1bet"
    "a1.SignatureDescriptor.Data.MultiH\000R\005mul"
    "ti\032_\n\006Single\0227\n\004mode\030\001 \001(\0162#.cosmos.tx.s"
    "igning.v1beta1.SignModeR\004mode\022\034\n\tsignatu"
    "re\030\002 \001(\014R\tsignature\032\251\001\n\005Multi\022K\n\010bitarra"
    "y\030\001 \001(\0132/.cosmos.crypto.multisig.v1beta1"
    ".CompactBitArrayR\010bitarray\022S\n\nsignatures"
    "\030\002 \003(\01323.cosmos.tx.signing.v1beta1.Signa"
    "tureDescriptor.DataR\nsignaturesB\005\n\003sum*\245"
    "\001\n\010SignMode\022\031\n\025SIGN_MODE_UNSPECIFIED\020\000\022\024"
    "\n\020SIGN_MODE_DIRECT\020\001\022\025\n\021SIGN_MODE_TEXTUA"
    "L\020\002\022\030\n\024SIGN_MODE_DIRECT_AUX\020\003\022\037\n\033SIGN_MO"
    "DE_LEGACY_AMINO_JSON\020\177\022\026\n\021SIGN_MODE_EIP_"
    "191\020\277\001B/Z-github.com/cosmos/cosmos-sdk/t"
    "ypes/tx/signingb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto_deps[2] =
    {
        &::descriptor_table_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto,
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto = {
    false,
    false,
    1103,
    descriptor_table_protodef_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto,
    "cosmos/tx/signing/v1beta1/signing.proto",
    &descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto_once,
    descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto_deps,
    2,
    5,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto::offsets,
    file_level_enum_descriptors_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto,
    file_level_service_descriptors_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto,
};
namespace cosmos {
namespace tx {
namespace signing {
namespace v1beta1 {
const ::google::protobuf::EnumDescriptor* SignMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto);
  return file_level_enum_descriptors_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t SignMode_internal_data_[] = {
    262144u, 131072u, 191u, 127u, };
bool SignMode_IsValid(int value) {
  return ::_pbi::ValidateEnum(value, SignMode_internal_data_);
}
// ===================================================================

class SignatureDescriptors::_Internal {
 public:
};

SignatureDescriptors::SignatureDescriptors(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.signing.v1beta1.SignatureDescriptors)
}
inline PROTOBUF_NDEBUG_INLINE SignatureDescriptors::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::tx::signing::v1beta1::SignatureDescriptors& from_msg)
      : signatures_{visibility, arena, from.signatures_},
        _cached_size_{0} {}

SignatureDescriptors::SignatureDescriptors(
    ::google::protobuf::Arena* arena,
    const SignatureDescriptors& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SignatureDescriptors* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:cosmos.tx.signing.v1beta1.SignatureDescriptors)
}
inline PROTOBUF_NDEBUG_INLINE SignatureDescriptors::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : signatures_{visibility, arena},
        _cached_size_{0} {}

inline void SignatureDescriptors::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SignatureDescriptors::~SignatureDescriptors() {
  // @@protoc_insertion_point(destructor:cosmos.tx.signing.v1beta1.SignatureDescriptors)
  SharedDtor(*this);
}
inline void SignatureDescriptors::SharedDtor(MessageLite& self) {
  SignatureDescriptors& this_ = static_cast<SignatureDescriptors&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* SignatureDescriptors::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SignatureDescriptors(arena);
}
constexpr auto SignatureDescriptors::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(SignatureDescriptors, _impl_.signatures_) +
          decltype(SignatureDescriptors::_impl_.signatures_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(SignatureDescriptors), alignof(SignatureDescriptors), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&SignatureDescriptors::PlacementNew_,
                                 sizeof(SignatureDescriptors),
                                 alignof(SignatureDescriptors));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SignatureDescriptors::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SignatureDescriptors_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SignatureDescriptors::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SignatureDescriptors>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SignatureDescriptors::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SignatureDescriptors>(), &SignatureDescriptors::ByteSizeLong,
            &SignatureDescriptors::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SignatureDescriptors, _impl_._cached_size_),
        false,
    },
    &SignatureDescriptors::kDescriptorMethods,
    &descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SignatureDescriptors::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SignatureDescriptors::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::tx::signing::v1beta1::SignatureDescriptors>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor signatures = 1 [json_name = "signatures"];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SignatureDescriptors, _impl_.signatures_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor signatures = 1 [json_name = "signatures"];
    {PROTOBUF_FIELD_OFFSET(SignatureDescriptors, _impl_.signatures_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cosmos::tx::signing::v1beta1::SignatureDescriptor>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SignatureDescriptors::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.signing.v1beta1.SignatureDescriptors)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signatures_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SignatureDescriptors::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SignatureDescriptors& this_ = static_cast<const SignatureDescriptors&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SignatureDescriptors::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SignatureDescriptors& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.signing.v1beta1.SignatureDescriptors)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor signatures = 1 [json_name = "signatures"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_signatures_size());
               i < n; i++) {
            const auto& repfield = this_._internal_signatures().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.signing.v1beta1.SignatureDescriptors)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SignatureDescriptors::ByteSizeLong(const MessageLite& base) {
          const SignatureDescriptors& this_ = static_cast<const SignatureDescriptors&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SignatureDescriptors::ByteSizeLong() const {
          const SignatureDescriptors& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.tx.signing.v1beta1.SignatureDescriptors)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor signatures = 1 [json_name = "signatures"];
            {
              total_size += 1UL * this_._internal_signatures_size();
              for (const auto& msg : this_._internal_signatures()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SignatureDescriptors::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SignatureDescriptors*>(&to_msg);
  auto& from = static_cast<const SignatureDescriptors&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.signing.v1beta1.SignatureDescriptors)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_signatures()->MergeFrom(
      from._internal_signatures());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SignatureDescriptors::CopyFrom(const SignatureDescriptors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.signing.v1beta1.SignatureDescriptors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SignatureDescriptors::InternalSwap(SignatureDescriptors* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.signatures_.InternalSwap(&other->_impl_.signatures_);
}

::google::protobuf::Metadata SignatureDescriptors::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SignatureDescriptor_Data_Single::_Internal {
 public:
};

SignatureDescriptor_Data_Single::SignatureDescriptor_Data_Single(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single)
}
inline PROTOBUF_NDEBUG_INLINE SignatureDescriptor_Data_Single::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single& from_msg)
      : signature_(arena, from.signature_),
        _cached_size_{0} {}

SignatureDescriptor_Data_Single::SignatureDescriptor_Data_Single(
    ::google::protobuf::Arena* arena,
    const SignatureDescriptor_Data_Single& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SignatureDescriptor_Data_Single* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.mode_ = from._impl_.mode_;

  // @@protoc_insertion_point(copy_constructor:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single)
}
inline PROTOBUF_NDEBUG_INLINE SignatureDescriptor_Data_Single::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : signature_(arena),
        _cached_size_{0} {}

inline void SignatureDescriptor_Data_Single::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.mode_ = {};
}
SignatureDescriptor_Data_Single::~SignatureDescriptor_Data_Single() {
  // @@protoc_insertion_point(destructor:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single)
  SharedDtor(*this);
}
inline void SignatureDescriptor_Data_Single::SharedDtor(MessageLite& self) {
  SignatureDescriptor_Data_Single& this_ = static_cast<SignatureDescriptor_Data_Single&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.signature_.Destroy();
  this_._impl_.~Impl_();
}

inline void* SignatureDescriptor_Data_Single::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SignatureDescriptor_Data_Single(arena);
}
constexpr auto SignatureDescriptor_Data_Single::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SignatureDescriptor_Data_Single),
                                            alignof(SignatureDescriptor_Data_Single));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SignatureDescriptor_Data_Single::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SignatureDescriptor_Data_Single_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SignatureDescriptor_Data_Single::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SignatureDescriptor_Data_Single>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SignatureDescriptor_Data_Single::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SignatureDescriptor_Data_Single>(), &SignatureDescriptor_Data_Single::ByteSizeLong,
            &SignatureDescriptor_Data_Single::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SignatureDescriptor_Data_Single, _impl_._cached_size_),
        false,
    },
    &SignatureDescriptor_Data_Single::kDescriptorMethods,
    &descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SignatureDescriptor_Data_Single::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> SignatureDescriptor_Data_Single::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bytes signature = 2 [json_name = "signature"];
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SignatureDescriptor_Data_Single, _impl_.signature_)}},
    // .cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SignatureDescriptor_Data_Single, _impl_.mode_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SignatureDescriptor_Data_Single, _impl_.mode_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];
    {PROTOBUF_FIELD_OFFSET(SignatureDescriptor_Data_Single, _impl_.mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bytes signature = 2 [json_name = "signature"];
    {PROTOBUF_FIELD_OFFSET(SignatureDescriptor_Data_Single, _impl_.signature_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void SignatureDescriptor_Data_Single::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signature_.ClearToEmpty();
  _impl_.mode_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SignatureDescriptor_Data_Single::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SignatureDescriptor_Data_Single& this_ = static_cast<const SignatureDescriptor_Data_Single&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SignatureDescriptor_Data_Single::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SignatureDescriptor_Data_Single& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];
          if (this_._internal_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_mode(), target);
          }

          // bytes signature = 2 [json_name = "signature"];
          if (!this_._internal_signature().empty()) {
            const std::string& _s = this_._internal_signature();
            target = stream->WriteBytesMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SignatureDescriptor_Data_Single::ByteSizeLong(const MessageLite& base) {
          const SignatureDescriptor_Data_Single& this_ = static_cast<const SignatureDescriptor_Data_Single&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SignatureDescriptor_Data_Single::ByteSizeLong() const {
          const SignatureDescriptor_Data_Single& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bytes signature = 2 [json_name = "signature"];
            if (!this_._internal_signature().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_signature());
            }
            // .cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];
            if (this_._internal_mode() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_mode());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SignatureDescriptor_Data_Single::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SignatureDescriptor_Data_Single*>(&to_msg);
  auto& from = static_cast<const SignatureDescriptor_Data_Single&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signature().empty()) {
    _this->_internal_set_signature(from._internal_signature());
  }
  if (from._internal_mode() != 0) {
    _this->_impl_.mode_ = from._impl_.mode_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SignatureDescriptor_Data_Single::CopyFrom(const SignatureDescriptor_Data_Single& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SignatureDescriptor_Data_Single::InternalSwap(SignatureDescriptor_Data_Single* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signature_, &other->_impl_.signature_, arena);
  swap(_impl_.mode_, other->_impl_.mode_);
}

::google::protobuf::Metadata SignatureDescriptor_Data_Single::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SignatureDescriptor_Data_Multi::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SignatureDescriptor_Data_Multi>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SignatureDescriptor_Data_Multi, _impl_._has_bits_);
};

void SignatureDescriptor_Data_Multi::clear_bitarray() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.bitarray_ != nullptr) _impl_.bitarray_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SignatureDescriptor_Data_Multi::SignatureDescriptor_Data_Multi(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi)
}
inline PROTOBUF_NDEBUG_INLINE SignatureDescriptor_Data_Multi::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        signatures_{visibility, arena, from.signatures_} {}

SignatureDescriptor_Data_Multi::SignatureDescriptor_Data_Multi(
    ::google::protobuf::Arena* arena,
    const SignatureDescriptor_Data_Multi& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SignatureDescriptor_Data_Multi* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.bitarray_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::cosmos::crypto::multisig::v1beta1::CompactBitArray>(
                              arena, *from._impl_.bitarray_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi)
}
inline PROTOBUF_NDEBUG_INLINE SignatureDescriptor_Data_Multi::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        signatures_{visibility, arena} {}

inline void SignatureDescriptor_Data_Multi::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.bitarray_ = {};
}
SignatureDescriptor_Data_Multi::~SignatureDescriptor_Data_Multi() {
  // @@protoc_insertion_point(destructor:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi)
  SharedDtor(*this);
}
inline void SignatureDescriptor_Data_Multi::SharedDtor(MessageLite& self) {
  SignatureDescriptor_Data_Multi& this_ = static_cast<SignatureDescriptor_Data_Multi&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.bitarray_;
  this_._impl_.~Impl_();
}

inline void* SignatureDescriptor_Data_Multi::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SignatureDescriptor_Data_Multi(arena);
}
constexpr auto SignatureDescriptor_Data_Multi::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(SignatureDescriptor_Data_Multi, _impl_.signatures_) +
          decltype(SignatureDescriptor_Data_Multi::_impl_.signatures_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(SignatureDescriptor_Data_Multi), alignof(SignatureDescriptor_Data_Multi), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&SignatureDescriptor_Data_Multi::PlacementNew_,
                                 sizeof(SignatureDescriptor_Data_Multi),
                                 alignof(SignatureDescriptor_Data_Multi));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SignatureDescriptor_Data_Multi::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SignatureDescriptor_Data_Multi_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SignatureDescriptor_Data_Multi::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SignatureDescriptor_Data_Multi>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SignatureDescriptor_Data_Multi::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SignatureDescriptor_Data_Multi>(), &SignatureDescriptor_Data_Multi::ByteSizeLong,
            &SignatureDescriptor_Data_Multi::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SignatureDescriptor_Data_Multi, _impl_._cached_size_),
        false,
    },
    &SignatureDescriptor_Data_Multi::kDescriptorMethods,
    &descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SignatureDescriptor_Data_Multi::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> SignatureDescriptor_Data_Multi::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SignatureDescriptor_Data_Multi, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(SignatureDescriptor_Data_Multi, _impl_.signatures_)}},
    // .cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SignatureDescriptor_Data_Multi, _impl_.bitarray_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];
    {PROTOBUF_FIELD_OFFSET(SignatureDescriptor_Data_Multi, _impl_.bitarray_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];
    {PROTOBUF_FIELD_OFFSET(SignatureDescriptor_Data_Multi, _impl_.signatures_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cosmos::crypto::multisig::v1beta1::CompactBitArray>()},
    {::_pbi::TcParser::GetTable<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SignatureDescriptor_Data_Multi::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signatures_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.bitarray_ != nullptr);
    _impl_.bitarray_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SignatureDescriptor_Data_Multi::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SignatureDescriptor_Data_Multi& this_ = static_cast<const SignatureDescriptor_Data_Multi&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SignatureDescriptor_Data_Multi::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SignatureDescriptor_Data_Multi& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.bitarray_, this_._impl_.bitarray_->GetCachedSize(), target,
                stream);
          }

          // repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_signatures_size());
               i < n; i++) {
            const auto& repfield = this_._internal_signatures().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SignatureDescriptor_Data_Multi::ByteSizeLong(const MessageLite& base) {
          const SignatureDescriptor_Data_Multi& this_ = static_cast<const SignatureDescriptor_Data_Multi&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SignatureDescriptor_Data_Multi::ByteSizeLong() const {
          const SignatureDescriptor_Data_Multi& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];
            {
              total_size += 1UL * this_._internal_signatures_size();
              for (const auto& msg : this_._internal_signatures()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // .cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.bitarray_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SignatureDescriptor_Data_Multi::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SignatureDescriptor_Data_Multi*>(&to_msg);
  auto& from = static_cast<const SignatureDescriptor_Data_Multi&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_signatures()->MergeFrom(
      from._internal_signatures());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.bitarray_ != nullptr);
    if (_this->_impl_.bitarray_ == nullptr) {
      _this->_impl_.bitarray_ =
          ::google::protobuf::Message::CopyConstruct<::cosmos::crypto::multisig::v1beta1::CompactBitArray>(arena, *from._impl_.bitarray_);
    } else {
      _this->_impl_.bitarray_->MergeFrom(*from._impl_.bitarray_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SignatureDescriptor_Data_Multi::CopyFrom(const SignatureDescriptor_Data_Multi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SignatureDescriptor_Data_Multi::InternalSwap(SignatureDescriptor_Data_Multi* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.signatures_.InternalSwap(&other->_impl_.signatures_);
  swap(_impl_.bitarray_, other->_impl_.bitarray_);
}

::google::protobuf::Metadata SignatureDescriptor_Data_Multi::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SignatureDescriptor_Data::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data, _impl_._oneof_case_);
};

void SignatureDescriptor_Data::set_allocated_single(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* single) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_sum();
  if (single) {
    ::google::protobuf::Arena* submessage_arena = single->GetArena();
    if (message_arena != submessage_arena) {
      single = ::google::protobuf::internal::GetOwnedMessage(message_arena, single, submessage_arena);
    }
    set_has_single();
    _impl_.sum_.single_ = single;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.single)
}
void SignatureDescriptor_Data::set_allocated_multi(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* multi) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_sum();
  if (multi) {
    ::google::protobuf::Arena* submessage_arena = multi->GetArena();
    if (message_arena != submessage_arena) {
      multi = ::google::protobuf::internal::GetOwnedMessage(message_arena, multi, submessage_arena);
    }
    set_has_multi();
    _impl_.sum_.multi_ = multi;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.multi)
}
SignatureDescriptor_Data::SignatureDescriptor_Data(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data)
}
inline PROTOBUF_NDEBUG_INLINE SignatureDescriptor_Data::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data& from_msg)
      : sum_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

SignatureDescriptor_Data::SignatureDescriptor_Data(
    ::google::protobuf::Arena* arena,
    const SignatureDescriptor_Data& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SignatureDescriptor_Data* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (sum_case()) {
    case SUM_NOT_SET:
      break;
      case kSingle:
        _impl_.sum_.single_ = ::google::protobuf::Message::CopyConstruct<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single>(arena, *from._impl_.sum_.single_);
        break;
      case kMulti:
        _impl_.sum_.multi_ = ::google::protobuf::Message::CopyConstruct<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi>(arena, *from._impl_.sum_.multi_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data)
}
inline PROTOBUF_NDEBUG_INLINE SignatureDescriptor_Data::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : sum_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void SignatureDescriptor_Data::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SignatureDescriptor_Data::~SignatureDescriptor_Data() {
  // @@protoc_insertion_point(destructor:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data)
  SharedDtor(*this);
}
inline void SignatureDescriptor_Data::SharedDtor(MessageLite& self) {
  SignatureDescriptor_Data& this_ = static_cast<SignatureDescriptor_Data&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_sum()) {
    this_.clear_sum();
  }
  this_._impl_.~Impl_();
}

void SignatureDescriptor_Data::clear_sum() {
// @@protoc_insertion_point(one_of_clear_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (sum_case()) {
    case kSingle: {
      if (GetArena() == nullptr) {
        delete _impl_.sum_.single_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.sum_.single_);
      }
      break;
    }
    case kMulti: {
      if (GetArena() == nullptr) {
        delete _impl_.sum_.multi_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.sum_.multi_);
      }
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SUM_NOT_SET;
}


inline void* SignatureDescriptor_Data::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SignatureDescriptor_Data(arena);
}
constexpr auto SignatureDescriptor_Data::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SignatureDescriptor_Data),
                                            alignof(SignatureDescriptor_Data));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SignatureDescriptor_Data::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SignatureDescriptor_Data_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SignatureDescriptor_Data::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SignatureDescriptor_Data>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SignatureDescriptor_Data::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SignatureDescriptor_Data>(), &SignatureDescriptor_Data::ByteSizeLong,
            &SignatureDescriptor_Data::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SignatureDescriptor_Data, _impl_._cached_size_),
        false,
    },
    &SignatureDescriptor_Data::kDescriptorMethods,
    &descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SignatureDescriptor_Data::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 2, 0, 2> SignatureDescriptor_Data::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single = 1 [json_name = "single"];
    {PROTOBUF_FIELD_OFFSET(SignatureDescriptor_Data, _impl_.sum_.single_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2 [json_name = "multi"];
    {PROTOBUF_FIELD_OFFSET(SignatureDescriptor_Data, _impl_.sum_.multi_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single>()},
    {::_pbi::TcParser::GetTable<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SignatureDescriptor_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_sum();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SignatureDescriptor_Data::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SignatureDescriptor_Data& this_ = static_cast<const SignatureDescriptor_Data&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SignatureDescriptor_Data::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SignatureDescriptor_Data& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.sum_case()) {
            case kSingle: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  1, *this_._impl_.sum_.single_, this_._impl_.sum_.single_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kMulti: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.sum_.multi_, this_._impl_.sum_.multi_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SignatureDescriptor_Data::ByteSizeLong(const MessageLite& base) {
          const SignatureDescriptor_Data& this_ = static_cast<const SignatureDescriptor_Data&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SignatureDescriptor_Data::ByteSizeLong() const {
          const SignatureDescriptor_Data& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.sum_case()) {
            // .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single = 1 [json_name = "single"];
            case kSingle: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.sum_.single_);
              break;
            }
            // .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2 [json_name = "multi"];
            case kMulti: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.sum_.multi_);
              break;
            }
            case SUM_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SignatureDescriptor_Data::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SignatureDescriptor_Data*>(&to_msg);
  auto& from = static_cast<const SignatureDescriptor_Data&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_sum();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kSingle: {
        if (oneof_needs_init) {
          _this->_impl_.sum_.single_ =
              ::google::protobuf::Message::CopyConstruct<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single>(arena, *from._impl_.sum_.single_);
        } else {
          _this->_impl_.sum_.single_->MergeFrom(from._internal_single());
        }
        break;
      }
      case kMulti: {
        if (oneof_needs_init) {
          _this->_impl_.sum_.multi_ =
              ::google::protobuf::Message::CopyConstruct<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi>(arena, *from._impl_.sum_.multi_);
        } else {
          _this->_impl_.sum_.multi_->MergeFrom(from._internal_multi());
        }
        break;
      }
      case SUM_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SignatureDescriptor_Data::CopyFrom(const SignatureDescriptor_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SignatureDescriptor_Data::InternalSwap(SignatureDescriptor_Data* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.sum_, other->_impl_.sum_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata SignatureDescriptor_Data::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SignatureDescriptor::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SignatureDescriptor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SignatureDescriptor, _impl_._has_bits_);
};

void SignatureDescriptor::clear_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.public_key_ != nullptr) _impl_.public_key_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SignatureDescriptor::SignatureDescriptor(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.signing.v1beta1.SignatureDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE SignatureDescriptor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::tx::signing::v1beta1::SignatureDescriptor& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SignatureDescriptor::SignatureDescriptor(
    ::google::protobuf::Arena* arena,
    const SignatureDescriptor& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SignatureDescriptor* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.public_key_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Any>(
                              arena, *from._impl_.public_key_)
                        : nullptr;
  _impl_.data_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data>(
                              arena, *from._impl_.data_)
                        : nullptr;
  _impl_.sequence_ = from._impl_.sequence_;

  // @@protoc_insertion_point(copy_constructor:cosmos.tx.signing.v1beta1.SignatureDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE SignatureDescriptor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SignatureDescriptor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, public_key_),
           0,
           offsetof(Impl_, sequence_) -
               offsetof(Impl_, public_key_) +
               sizeof(Impl_::sequence_));
}
SignatureDescriptor::~SignatureDescriptor() {
  // @@protoc_insertion_point(destructor:cosmos.tx.signing.v1beta1.SignatureDescriptor)
  SharedDtor(*this);
}
inline void SignatureDescriptor::SharedDtor(MessageLite& self) {
  SignatureDescriptor& this_ = static_cast<SignatureDescriptor&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.public_key_;
  delete this_._impl_.data_;
  this_._impl_.~Impl_();
}

inline void* SignatureDescriptor::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SignatureDescriptor(arena);
}
constexpr auto SignatureDescriptor::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SignatureDescriptor),
                                            alignof(SignatureDescriptor));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SignatureDescriptor::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SignatureDescriptor_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SignatureDescriptor::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SignatureDescriptor>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SignatureDescriptor::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SignatureDescriptor>(), &SignatureDescriptor::ByteSizeLong,
            &SignatureDescriptor::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SignatureDescriptor, _impl_._cached_size_),
        false,
    },
    &SignatureDescriptor::kDescriptorMethods,
    &descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SignatureDescriptor::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> SignatureDescriptor::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SignatureDescriptor, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::tx::signing::v1beta1::SignatureDescriptor>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Any public_key = 1 [json_name = "publicKey"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SignatureDescriptor, _impl_.public_key_)}},
    // .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data = 2 [json_name = "data"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SignatureDescriptor, _impl_.data_)}},
    // uint64 sequence = 3 [json_name = "sequence"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SignatureDescriptor, _impl_.sequence_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(SignatureDescriptor, _impl_.sequence_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Any public_key = 1 [json_name = "publicKey"];
    {PROTOBUF_FIELD_OFFSET(SignatureDescriptor, _impl_.public_key_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data = 2 [json_name = "data"];
    {PROTOBUF_FIELD_OFFSET(SignatureDescriptor, _impl_.data_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint64 sequence = 3 [json_name = "sequence"];
    {PROTOBUF_FIELD_OFFSET(SignatureDescriptor, _impl_.sequence_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
    {::_pbi::TcParser::GetTable<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SignatureDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.signing.v1beta1.SignatureDescriptor)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.public_key_ != nullptr);
      _impl_.public_key_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.data_ != nullptr);
      _impl_.data_->Clear();
    }
  }
  _impl_.sequence_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SignatureDescriptor::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SignatureDescriptor& this_ = static_cast<const SignatureDescriptor&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SignatureDescriptor::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SignatureDescriptor& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.signing.v1beta1.SignatureDescriptor)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Any public_key = 1 [json_name = "publicKey"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.public_key_, this_._impl_.public_key_->GetCachedSize(), target,
                stream);
          }

          // .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data = 2 [json_name = "data"];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.data_, this_._impl_.data_->GetCachedSize(), target,
                stream);
          }

          // uint64 sequence = 3 [json_name = "sequence"];
          if (this_._internal_sequence() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                3, this_._internal_sequence(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.signing.v1beta1.SignatureDescriptor)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SignatureDescriptor::ByteSizeLong(const MessageLite& base) {
          const SignatureDescriptor& this_ = static_cast<const SignatureDescriptor&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SignatureDescriptor::ByteSizeLong() const {
          const SignatureDescriptor& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.tx.signing.v1beta1.SignatureDescriptor)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .google.protobuf.Any public_key = 1 [json_name = "publicKey"];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.public_key_);
            }
            // .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data = 2 [json_name = "data"];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.data_);
            }
          }
           {
            // uint64 sequence = 3 [json_name = "sequence"];
            if (this_._internal_sequence() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_sequence());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SignatureDescriptor::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SignatureDescriptor*>(&to_msg);
  auto& from = static_cast<const SignatureDescriptor&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.signing.v1beta1.SignatureDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.public_key_ != nullptr);
      if (_this->_impl_.public_key_ == nullptr) {
        _this->_impl_.public_key_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Any>(arena, *from._impl_.public_key_);
      } else {
        _this->_impl_.public_key_->MergeFrom(*from._impl_.public_key_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.data_ != nullptr);
      if (_this->_impl_.data_ == nullptr) {
        _this->_impl_.data_ =
            ::google::protobuf::Message::CopyConstruct<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data>(arena, *from._impl_.data_);
      } else {
        _this->_impl_.data_->MergeFrom(*from._impl_.data_);
      }
    }
  }
  if (from._internal_sequence() != 0) {
    _this->_impl_.sequence_ = from._impl_.sequence_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SignatureDescriptor::CopyFrom(const SignatureDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.signing.v1beta1.SignatureDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SignatureDescriptor::InternalSwap(SignatureDescriptor* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignatureDescriptor, _impl_.sequence_)
      + sizeof(SignatureDescriptor::_impl_.sequence_)
      - PROTOBUF_FIELD_OFFSET(SignatureDescriptor, _impl_.public_key_)>(
          reinterpret_cast<char*>(&_impl_.public_key_),
          reinterpret_cast<char*>(&other->_impl_.public_key_));
}

::google::protobuf::Metadata SignatureDescriptor::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace signing
}  // namespace tx
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
