// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/nft/v1beta1/event.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2fnft_2fv1beta1_2fevent_2eproto_2epb_2eh
#define cosmos_2fnft_2fv1beta1_2fevent_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fnft_2fv1beta1_2fevent_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fnft_2fv1beta1_2fevent_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2fnft_2fv1beta1_2fevent_2eproto;
namespace cosmos {
namespace nft {
namespace v1beta1 {
class EventBurn;
struct EventBurnDefaultTypeInternal;
extern EventBurnDefaultTypeInternal _EventBurn_default_instance_;
class EventMint;
struct EventMintDefaultTypeInternal;
extern EventMintDefaultTypeInternal _EventMint_default_instance_;
class EventSend;
struct EventSendDefaultTypeInternal;
extern EventSendDefaultTypeInternal _EventSend_default_instance_;
}  // namespace v1beta1
}  // namespace nft
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace nft {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class EventSend final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.EventSend) */ {
 public:
  inline EventSend() : EventSend(nullptr) {}
  ~EventSend() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EventSend* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EventSend));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EventSend(
      ::google::protobuf::internal::ConstantInitialized);

  inline EventSend(const EventSend& from) : EventSend(nullptr, from) {}
  inline EventSend(EventSend&& from) noexcept
      : EventSend(nullptr, std::move(from)) {}
  inline EventSend& operator=(const EventSend& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventSend& operator=(EventSend&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventSend& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventSend* internal_default_instance() {
    return reinterpret_cast<const EventSend*>(
        &_EventSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(EventSend& a, EventSend& b) { a.Swap(&b); }
  inline void Swap(EventSend* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventSend* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventSend* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EventSend>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EventSend& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EventSend& from) { EventSend::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EventSend* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.nft.v1beta1.EventSend"; }

 protected:
  explicit EventSend(::google::protobuf::Arena* arena);
  EventSend(::google::protobuf::Arena* arena, const EventSend& from);
  EventSend(::google::protobuf::Arena* arena, EventSend&& from) noexcept
      : EventSend(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClassIdFieldNumber = 1,
    kIdFieldNumber = 2,
    kSenderFieldNumber = 3,
    kReceiverFieldNumber = 4,
  };
  // string class_id = 1 [json_name = "classId"];
  void clear_class_id() ;
  const std::string& class_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_id(Arg_&& arg, Args_... args);
  std::string* mutable_class_id();
  PROTOBUF_NODISCARD std::string* release_class_id();
  void set_allocated_class_id(std::string* value);

  private:
  const std::string& _internal_class_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_id(
      const std::string& value);
  std::string* _internal_mutable_class_id();

  public:
  // string id = 2 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string sender = 3 [json_name = "sender"];
  void clear_sender() ;
  const std::string& sender() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* value);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // string receiver = 4 [json_name = "receiver"];
  void clear_receiver() ;
  const std::string& receiver() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_receiver(Arg_&& arg, Args_... args);
  std::string* mutable_receiver();
  PROTOBUF_NODISCARD std::string* release_receiver();
  void set_allocated_receiver(std::string* value);

  private:
  const std::string& _internal_receiver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver(
      const std::string& value);
  std::string* _internal_mutable_receiver();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.EventSend)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      61, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EventSend& from_msg);
    ::google::protobuf::internal::ArenaStringPtr class_id_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr sender_;
    ::google::protobuf::internal::ArenaStringPtr receiver_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fevent_2eproto;
};
// -------------------------------------------------------------------

class EventMint final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.EventMint) */ {
 public:
  inline EventMint() : EventMint(nullptr) {}
  ~EventMint() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EventMint* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EventMint));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EventMint(
      ::google::protobuf::internal::ConstantInitialized);

  inline EventMint(const EventMint& from) : EventMint(nullptr, from) {}
  inline EventMint(EventMint&& from) noexcept
      : EventMint(nullptr, std::move(from)) {}
  inline EventMint& operator=(const EventMint& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventMint& operator=(EventMint&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventMint& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventMint* internal_default_instance() {
    return reinterpret_cast<const EventMint*>(
        &_EventMint_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(EventMint& a, EventMint& b) { a.Swap(&b); }
  inline void Swap(EventMint* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventMint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventMint* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EventMint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EventMint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EventMint& from) { EventMint::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EventMint* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.nft.v1beta1.EventMint"; }

 protected:
  explicit EventMint(::google::protobuf::Arena* arena);
  EventMint(::google::protobuf::Arena* arena, const EventMint& from);
  EventMint(::google::protobuf::Arena* arena, EventMint&& from) noexcept
      : EventMint(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClassIdFieldNumber = 1,
    kIdFieldNumber = 2,
    kOwnerFieldNumber = 3,
  };
  // string class_id = 1 [json_name = "classId"];
  void clear_class_id() ;
  const std::string& class_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_id(Arg_&& arg, Args_... args);
  std::string* mutable_class_id();
  PROTOBUF_NODISCARD std::string* release_class_id();
  void set_allocated_class_id(std::string* value);

  private:
  const std::string& _internal_class_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_id(
      const std::string& value);
  std::string* _internal_mutable_class_id();

  public:
  // string id = 2 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string owner = 3 [json_name = "owner"];
  void clear_owner() ;
  const std::string& owner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* value);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.EventMint)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EventMint& from_msg);
    ::google::protobuf::internal::ArenaStringPtr class_id_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr owner_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fevent_2eproto;
};
// -------------------------------------------------------------------

class EventBurn final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.EventBurn) */ {
 public:
  inline EventBurn() : EventBurn(nullptr) {}
  ~EventBurn() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EventBurn* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EventBurn));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EventBurn(
      ::google::protobuf::internal::ConstantInitialized);

  inline EventBurn(const EventBurn& from) : EventBurn(nullptr, from) {}
  inline EventBurn(EventBurn&& from) noexcept
      : EventBurn(nullptr, std::move(from)) {}
  inline EventBurn& operator=(const EventBurn& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventBurn& operator=(EventBurn&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventBurn& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventBurn* internal_default_instance() {
    return reinterpret_cast<const EventBurn*>(
        &_EventBurn_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(EventBurn& a, EventBurn& b) { a.Swap(&b); }
  inline void Swap(EventBurn* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventBurn* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventBurn* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EventBurn>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EventBurn& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EventBurn& from) { EventBurn::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EventBurn* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.nft.v1beta1.EventBurn"; }

 protected:
  explicit EventBurn(::google::protobuf::Arena* arena);
  EventBurn(::google::protobuf::Arena* arena, const EventBurn& from);
  EventBurn(::google::protobuf::Arena* arena, EventBurn&& from) noexcept
      : EventBurn(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClassIdFieldNumber = 1,
    kIdFieldNumber = 2,
    kOwnerFieldNumber = 3,
  };
  // string class_id = 1 [json_name = "classId"];
  void clear_class_id() ;
  const std::string& class_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_id(Arg_&& arg, Args_... args);
  std::string* mutable_class_id();
  PROTOBUF_NODISCARD std::string* release_class_id();
  void set_allocated_class_id(std::string* value);

  private:
  const std::string& _internal_class_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_id(
      const std::string& value);
  std::string* _internal_mutable_class_id();

  public:
  // string id = 2 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string owner = 3 [json_name = "owner"];
  void clear_owner() ;
  const std::string& owner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* value);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.EventBurn)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EventBurn& from_msg);
    ::google::protobuf::internal::ArenaStringPtr class_id_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr owner_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fevent_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EventSend

// string class_id = 1 [json_name = "classId"];
inline void EventSend::clear_class_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.ClearToEmpty();
}
inline const std::string& EventSend::class_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.EventSend.class_id)
  return _internal_class_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventSend::set_class_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.EventSend.class_id)
}
inline std::string* EventSend::mutable_class_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_class_id();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.EventSend.class_id)
  return _s;
}
inline const std::string& EventSend::_internal_class_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.class_id_.Get();
}
inline void EventSend::_internal_set_class_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.Set(value, GetArena());
}
inline std::string* EventSend::_internal_mutable_class_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.class_id_.Mutable( GetArena());
}
inline std::string* EventSend::release_class_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.EventSend.class_id)
  return _impl_.class_id_.Release();
}
inline void EventSend::set_allocated_class_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.class_id_.IsDefault()) {
    _impl_.class_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.EventSend.class_id)
}

// string id = 2 [json_name = "id"];
inline void EventSend::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& EventSend::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.EventSend.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventSend::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.EventSend.id)
}
inline std::string* EventSend::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.EventSend.id)
  return _s;
}
inline const std::string& EventSend::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void EventSend::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* EventSend::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* EventSend::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.EventSend.id)
  return _impl_.id_.Release();
}
inline void EventSend::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.EventSend.id)
}

// string sender = 3 [json_name = "sender"];
inline void EventSend::clear_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& EventSend::sender() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.EventSend.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventSend::set_sender(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.EventSend.sender)
}
inline std::string* EventSend::mutable_sender() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.EventSend.sender)
  return _s;
}
inline const std::string& EventSend::_internal_sender() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sender_.Get();
}
inline void EventSend::_internal_set_sender(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.Set(value, GetArena());
}
inline std::string* EventSend::_internal_mutable_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sender_.Mutable( GetArena());
}
inline std::string* EventSend::release_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.EventSend.sender)
  return _impl_.sender_.Release();
}
inline void EventSend::set_allocated_sender(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sender_.IsDefault()) {
    _impl_.sender_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.EventSend.sender)
}

// string receiver = 4 [json_name = "receiver"];
inline void EventSend::clear_receiver() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.receiver_.ClearToEmpty();
}
inline const std::string& EventSend::receiver() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.EventSend.receiver)
  return _internal_receiver();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventSend::set_receiver(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.receiver_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.EventSend.receiver)
}
inline std::string* EventSend::mutable_receiver() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_receiver();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.EventSend.receiver)
  return _s;
}
inline const std::string& EventSend::_internal_receiver() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.receiver_.Get();
}
inline void EventSend::_internal_set_receiver(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.receiver_.Set(value, GetArena());
}
inline std::string* EventSend::_internal_mutable_receiver() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.receiver_.Mutable( GetArena());
}
inline std::string* EventSend::release_receiver() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.EventSend.receiver)
  return _impl_.receiver_.Release();
}
inline void EventSend::set_allocated_receiver(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.receiver_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.receiver_.IsDefault()) {
    _impl_.receiver_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.EventSend.receiver)
}

// -------------------------------------------------------------------

// EventMint

// string class_id = 1 [json_name = "classId"];
inline void EventMint::clear_class_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.ClearToEmpty();
}
inline const std::string& EventMint::class_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.EventMint.class_id)
  return _internal_class_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventMint::set_class_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.EventMint.class_id)
}
inline std::string* EventMint::mutable_class_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_class_id();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.EventMint.class_id)
  return _s;
}
inline const std::string& EventMint::_internal_class_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.class_id_.Get();
}
inline void EventMint::_internal_set_class_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.Set(value, GetArena());
}
inline std::string* EventMint::_internal_mutable_class_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.class_id_.Mutable( GetArena());
}
inline std::string* EventMint::release_class_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.EventMint.class_id)
  return _impl_.class_id_.Release();
}
inline void EventMint::set_allocated_class_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.class_id_.IsDefault()) {
    _impl_.class_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.EventMint.class_id)
}

// string id = 2 [json_name = "id"];
inline void EventMint::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& EventMint::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.EventMint.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventMint::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.EventMint.id)
}
inline std::string* EventMint::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.EventMint.id)
  return _s;
}
inline const std::string& EventMint::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void EventMint::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* EventMint::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* EventMint::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.EventMint.id)
  return _impl_.id_.Release();
}
inline void EventMint::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.EventMint.id)
}

// string owner = 3 [json_name = "owner"];
inline void EventMint::clear_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& EventMint::owner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.EventMint.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventMint::set_owner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.EventMint.owner)
}
inline std::string* EventMint::mutable_owner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.EventMint.owner)
  return _s;
}
inline const std::string& EventMint::_internal_owner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.owner_.Get();
}
inline void EventMint::_internal_set_owner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(value, GetArena());
}
inline std::string* EventMint::_internal_mutable_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.owner_.Mutable( GetArena());
}
inline std::string* EventMint::release_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.EventMint.owner)
  return _impl_.owner_.Release();
}
inline void EventMint::set_allocated_owner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.EventMint.owner)
}

// -------------------------------------------------------------------

// EventBurn

// string class_id = 1 [json_name = "classId"];
inline void EventBurn::clear_class_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.ClearToEmpty();
}
inline const std::string& EventBurn::class_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.EventBurn.class_id)
  return _internal_class_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventBurn::set_class_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.EventBurn.class_id)
}
inline std::string* EventBurn::mutable_class_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_class_id();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.EventBurn.class_id)
  return _s;
}
inline const std::string& EventBurn::_internal_class_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.class_id_.Get();
}
inline void EventBurn::_internal_set_class_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.Set(value, GetArena());
}
inline std::string* EventBurn::_internal_mutable_class_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.class_id_.Mutable( GetArena());
}
inline std::string* EventBurn::release_class_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.EventBurn.class_id)
  return _impl_.class_id_.Release();
}
inline void EventBurn::set_allocated_class_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.class_id_.IsDefault()) {
    _impl_.class_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.EventBurn.class_id)
}

// string id = 2 [json_name = "id"];
inline void EventBurn::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& EventBurn::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.EventBurn.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventBurn::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.EventBurn.id)
}
inline std::string* EventBurn::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.EventBurn.id)
  return _s;
}
inline const std::string& EventBurn::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void EventBurn::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* EventBurn::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* EventBurn::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.EventBurn.id)
  return _impl_.id_.Release();
}
inline void EventBurn::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.EventBurn.id)
}

// string owner = 3 [json_name = "owner"];
inline void EventBurn::clear_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& EventBurn::owner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.EventBurn.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventBurn::set_owner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.EventBurn.owner)
}
inline std::string* EventBurn::mutable_owner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.EventBurn.owner)
  return _s;
}
inline const std::string& EventBurn::_internal_owner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.owner_.Get();
}
inline void EventBurn::_internal_set_owner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(value, GetArena());
}
inline std::string* EventBurn::_internal_mutable_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.owner_.Mutable( GetArena());
}
inline std::string* EventBurn::release_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.EventBurn.owner)
  return _impl_.owner_.Release();
}
inline void EventBurn::set_allocated_owner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.EventBurn.owner)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace nft
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2fnft_2fv1beta1_2fevent_2eproto_2epb_2eh
