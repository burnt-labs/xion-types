// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/nft/v1beta1/query.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2fnft_2fv1beta1_2fquery_2eproto_2epb_2eh
#define cosmos_2fnft_2fv1beta1_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cosmos/base/query/v1beta1/pagination.pb.h"
#include "google/api/annotations.pb.h"
#include "cosmos/nft/v1beta1/nft.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fnft_2fv1beta1_2fquery_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
namespace cosmos {
namespace nft {
namespace v1beta1 {
class QueryBalanceRequest;
struct QueryBalanceRequestDefaultTypeInternal;
extern QueryBalanceRequestDefaultTypeInternal _QueryBalanceRequest_default_instance_;
class QueryBalanceResponse;
struct QueryBalanceResponseDefaultTypeInternal;
extern QueryBalanceResponseDefaultTypeInternal _QueryBalanceResponse_default_instance_;
class QueryClassRequest;
struct QueryClassRequestDefaultTypeInternal;
extern QueryClassRequestDefaultTypeInternal _QueryClassRequest_default_instance_;
class QueryClassResponse;
struct QueryClassResponseDefaultTypeInternal;
extern QueryClassResponseDefaultTypeInternal _QueryClassResponse_default_instance_;
class QueryClassesRequest;
struct QueryClassesRequestDefaultTypeInternal;
extern QueryClassesRequestDefaultTypeInternal _QueryClassesRequest_default_instance_;
class QueryClassesResponse;
struct QueryClassesResponseDefaultTypeInternal;
extern QueryClassesResponseDefaultTypeInternal _QueryClassesResponse_default_instance_;
class QueryNFTRequest;
struct QueryNFTRequestDefaultTypeInternal;
extern QueryNFTRequestDefaultTypeInternal _QueryNFTRequest_default_instance_;
class QueryNFTResponse;
struct QueryNFTResponseDefaultTypeInternal;
extern QueryNFTResponseDefaultTypeInternal _QueryNFTResponse_default_instance_;
class QueryNFTsRequest;
struct QueryNFTsRequestDefaultTypeInternal;
extern QueryNFTsRequestDefaultTypeInternal _QueryNFTsRequest_default_instance_;
class QueryNFTsResponse;
struct QueryNFTsResponseDefaultTypeInternal;
extern QueryNFTsResponseDefaultTypeInternal _QueryNFTsResponse_default_instance_;
class QueryOwnerRequest;
struct QueryOwnerRequestDefaultTypeInternal;
extern QueryOwnerRequestDefaultTypeInternal _QueryOwnerRequest_default_instance_;
class QueryOwnerResponse;
struct QueryOwnerResponseDefaultTypeInternal;
extern QueryOwnerResponseDefaultTypeInternal _QueryOwnerResponse_default_instance_;
class QuerySupplyRequest;
struct QuerySupplyRequestDefaultTypeInternal;
extern QuerySupplyRequestDefaultTypeInternal _QuerySupplyRequest_default_instance_;
class QuerySupplyResponse;
struct QuerySupplyResponseDefaultTypeInternal;
extern QuerySupplyResponseDefaultTypeInternal _QuerySupplyResponse_default_instance_;
}  // namespace v1beta1
}  // namespace nft
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace nft {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class QuerySupplyResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.QuerySupplyResponse) */ {
 public:
  inline QuerySupplyResponse() : QuerySupplyResponse(nullptr) {}
  ~QuerySupplyResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QuerySupplyResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QuerySupplyResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QuerySupplyResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline QuerySupplyResponse(const QuerySupplyResponse& from) : QuerySupplyResponse(nullptr, from) {}
  inline QuerySupplyResponse(QuerySupplyResponse&& from) noexcept
      : QuerySupplyResponse(nullptr, std::move(from)) {}
  inline QuerySupplyResponse& operator=(const QuerySupplyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySupplyResponse& operator=(QuerySupplyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuerySupplyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuerySupplyResponse* internal_default_instance() {
    return reinterpret_cast<const QuerySupplyResponse*>(
        &_QuerySupplyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(QuerySupplyResponse& a, QuerySupplyResponse& b) { a.Swap(&b); }
  inline void Swap(QuerySupplyResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySupplyResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuerySupplyResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QuerySupplyResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QuerySupplyResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QuerySupplyResponse& from) { QuerySupplyResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QuerySupplyResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.nft.v1beta1.QuerySupplyResponse"; }

 protected:
  explicit QuerySupplyResponse(::google::protobuf::Arena* arena);
  QuerySupplyResponse(::google::protobuf::Arena* arena, const QuerySupplyResponse& from);
  QuerySupplyResponse(::google::protobuf::Arena* arena, QuerySupplyResponse&& from) noexcept
      : QuerySupplyResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAmountFieldNumber = 1,
  };
  // uint64 amount = 1 [json_name = "amount"];
  void clear_amount() ;
  ::uint64_t amount() const;
  void set_amount(::uint64_t value);

  private:
  ::uint64_t _internal_amount() const;
  void _internal_set_amount(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.QuerySupplyResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QuerySupplyResponse& from_msg);
    ::uint64_t amount_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
};
// -------------------------------------------------------------------

class QuerySupplyRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.QuerySupplyRequest) */ {
 public:
  inline QuerySupplyRequest() : QuerySupplyRequest(nullptr) {}
  ~QuerySupplyRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QuerySupplyRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QuerySupplyRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QuerySupplyRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline QuerySupplyRequest(const QuerySupplyRequest& from) : QuerySupplyRequest(nullptr, from) {}
  inline QuerySupplyRequest(QuerySupplyRequest&& from) noexcept
      : QuerySupplyRequest(nullptr, std::move(from)) {}
  inline QuerySupplyRequest& operator=(const QuerySupplyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySupplyRequest& operator=(QuerySupplyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuerySupplyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuerySupplyRequest* internal_default_instance() {
    return reinterpret_cast<const QuerySupplyRequest*>(
        &_QuerySupplyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(QuerySupplyRequest& a, QuerySupplyRequest& b) { a.Swap(&b); }
  inline void Swap(QuerySupplyRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySupplyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuerySupplyRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QuerySupplyRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QuerySupplyRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QuerySupplyRequest& from) { QuerySupplyRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QuerySupplyRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.nft.v1beta1.QuerySupplyRequest"; }

 protected:
  explicit QuerySupplyRequest(::google::protobuf::Arena* arena);
  QuerySupplyRequest(::google::protobuf::Arena* arena, const QuerySupplyRequest& from);
  QuerySupplyRequest(::google::protobuf::Arena* arena, QuerySupplyRequest&& from) noexcept
      : QuerySupplyRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClassIdFieldNumber = 1,
  };
  // string class_id = 1 [json_name = "classId"];
  void clear_class_id() ;
  const std::string& class_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_id(Arg_&& arg, Args_... args);
  std::string* mutable_class_id();
  PROTOBUF_NODISCARD std::string* release_class_id();
  void set_allocated_class_id(std::string* value);

  private:
  const std::string& _internal_class_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_id(
      const std::string& value);
  std::string* _internal_mutable_class_id();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.QuerySupplyRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      54, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QuerySupplyRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr class_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
};
// -------------------------------------------------------------------

class QueryOwnerResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.QueryOwnerResponse) */ {
 public:
  inline QueryOwnerResponse() : QueryOwnerResponse(nullptr) {}
  ~QueryOwnerResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QueryOwnerResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QueryOwnerResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueryOwnerResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueryOwnerResponse(const QueryOwnerResponse& from) : QueryOwnerResponse(nullptr, from) {}
  inline QueryOwnerResponse(QueryOwnerResponse&& from) noexcept
      : QueryOwnerResponse(nullptr, std::move(from)) {}
  inline QueryOwnerResponse& operator=(const QueryOwnerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryOwnerResponse& operator=(QueryOwnerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryOwnerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryOwnerResponse* internal_default_instance() {
    return reinterpret_cast<const QueryOwnerResponse*>(
        &_QueryOwnerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(QueryOwnerResponse& a, QueryOwnerResponse& b) { a.Swap(&b); }
  inline void Swap(QueryOwnerResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryOwnerResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryOwnerResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QueryOwnerResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryOwnerResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueryOwnerResponse& from) { QueryOwnerResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QueryOwnerResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.nft.v1beta1.QueryOwnerResponse"; }

 protected:
  explicit QueryOwnerResponse(::google::protobuf::Arena* arena);
  QueryOwnerResponse(::google::protobuf::Arena* arena, const QueryOwnerResponse& from);
  QueryOwnerResponse(::google::protobuf::Arena* arena, QueryOwnerResponse&& from) noexcept
      : QueryOwnerResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOwnerFieldNumber = 1,
  };
  // string owner = 1 [json_name = "owner"];
  void clear_owner() ;
  const std::string& owner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* value);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.QueryOwnerResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QueryOwnerResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr owner_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
};
// -------------------------------------------------------------------

class QueryOwnerRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.QueryOwnerRequest) */ {
 public:
  inline QueryOwnerRequest() : QueryOwnerRequest(nullptr) {}
  ~QueryOwnerRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QueryOwnerRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QueryOwnerRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueryOwnerRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueryOwnerRequest(const QueryOwnerRequest& from) : QueryOwnerRequest(nullptr, from) {}
  inline QueryOwnerRequest(QueryOwnerRequest&& from) noexcept
      : QueryOwnerRequest(nullptr, std::move(from)) {}
  inline QueryOwnerRequest& operator=(const QueryOwnerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryOwnerRequest& operator=(QueryOwnerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryOwnerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryOwnerRequest* internal_default_instance() {
    return reinterpret_cast<const QueryOwnerRequest*>(
        &_QueryOwnerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(QueryOwnerRequest& a, QueryOwnerRequest& b) { a.Swap(&b); }
  inline void Swap(QueryOwnerRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryOwnerRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryOwnerRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QueryOwnerRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryOwnerRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueryOwnerRequest& from) { QueryOwnerRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QueryOwnerRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.nft.v1beta1.QueryOwnerRequest"; }

 protected:
  explicit QueryOwnerRequest(::google::protobuf::Arena* arena);
  QueryOwnerRequest(::google::protobuf::Arena* arena, const QueryOwnerRequest& from);
  QueryOwnerRequest(::google::protobuf::Arena* arena, QueryOwnerRequest&& from) noexcept
      : QueryOwnerRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClassIdFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string class_id = 1 [json_name = "classId"];
  void clear_class_id() ;
  const std::string& class_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_id(Arg_&& arg, Args_... args);
  std::string* mutable_class_id();
  PROTOBUF_NODISCARD std::string* release_class_id();
  void set_allocated_class_id(std::string* value);

  private:
  const std::string& _internal_class_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_id(
      const std::string& value);
  std::string* _internal_mutable_class_id();

  public:
  // string id = 2 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.QueryOwnerRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      55, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QueryOwnerRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr class_id_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
};
// -------------------------------------------------------------------

class QueryNFTRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.QueryNFTRequest) */ {
 public:
  inline QueryNFTRequest() : QueryNFTRequest(nullptr) {}
  ~QueryNFTRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QueryNFTRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QueryNFTRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueryNFTRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueryNFTRequest(const QueryNFTRequest& from) : QueryNFTRequest(nullptr, from) {}
  inline QueryNFTRequest(QueryNFTRequest&& from) noexcept
      : QueryNFTRequest(nullptr, std::move(from)) {}
  inline QueryNFTRequest& operator=(const QueryNFTRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryNFTRequest& operator=(QueryNFTRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryNFTRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryNFTRequest* internal_default_instance() {
    return reinterpret_cast<const QueryNFTRequest*>(
        &_QueryNFTRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(QueryNFTRequest& a, QueryNFTRequest& b) { a.Swap(&b); }
  inline void Swap(QueryNFTRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryNFTRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryNFTRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QueryNFTRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryNFTRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueryNFTRequest& from) { QueryNFTRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QueryNFTRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.nft.v1beta1.QueryNFTRequest"; }

 protected:
  explicit QueryNFTRequest(::google::protobuf::Arena* arena);
  QueryNFTRequest(::google::protobuf::Arena* arena, const QueryNFTRequest& from);
  QueryNFTRequest(::google::protobuf::Arena* arena, QueryNFTRequest&& from) noexcept
      : QueryNFTRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClassIdFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string class_id = 1 [json_name = "classId"];
  void clear_class_id() ;
  const std::string& class_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_id(Arg_&& arg, Args_... args);
  std::string* mutable_class_id();
  PROTOBUF_NODISCARD std::string* release_class_id();
  void set_allocated_class_id(std::string* value);

  private:
  const std::string& _internal_class_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_id(
      const std::string& value);
  std::string* _internal_mutable_class_id();

  public:
  // string id = 2 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.QueryNFTRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      53, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QueryNFTRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr class_id_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
};
// -------------------------------------------------------------------

class QueryClassRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.QueryClassRequest) */ {
 public:
  inline QueryClassRequest() : QueryClassRequest(nullptr) {}
  ~QueryClassRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QueryClassRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QueryClassRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueryClassRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueryClassRequest(const QueryClassRequest& from) : QueryClassRequest(nullptr, from) {}
  inline QueryClassRequest(QueryClassRequest&& from) noexcept
      : QueryClassRequest(nullptr, std::move(from)) {}
  inline QueryClassRequest& operator=(const QueryClassRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryClassRequest& operator=(QueryClassRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryClassRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryClassRequest* internal_default_instance() {
    return reinterpret_cast<const QueryClassRequest*>(
        &_QueryClassRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(QueryClassRequest& a, QueryClassRequest& b) { a.Swap(&b); }
  inline void Swap(QueryClassRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryClassRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryClassRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QueryClassRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryClassRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueryClassRequest& from) { QueryClassRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QueryClassRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.nft.v1beta1.QueryClassRequest"; }

 protected:
  explicit QueryClassRequest(::google::protobuf::Arena* arena);
  QueryClassRequest(::google::protobuf::Arena* arena, const QueryClassRequest& from);
  QueryClassRequest(::google::protobuf::Arena* arena, QueryClassRequest&& from) noexcept
      : QueryClassRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClassIdFieldNumber = 1,
  };
  // string class_id = 1 [json_name = "classId"];
  void clear_class_id() ;
  const std::string& class_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_id(Arg_&& arg, Args_... args);
  std::string* mutable_class_id();
  PROTOBUF_NODISCARD std::string* release_class_id();
  void set_allocated_class_id(std::string* value);

  private:
  const std::string& _internal_class_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_id(
      const std::string& value);
  std::string* _internal_mutable_class_id();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.QueryClassRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      53, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QueryClassRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr class_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
};
// -------------------------------------------------------------------

class QueryBalanceResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.QueryBalanceResponse) */ {
 public:
  inline QueryBalanceResponse() : QueryBalanceResponse(nullptr) {}
  ~QueryBalanceResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QueryBalanceResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QueryBalanceResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueryBalanceResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueryBalanceResponse(const QueryBalanceResponse& from) : QueryBalanceResponse(nullptr, from) {}
  inline QueryBalanceResponse(QueryBalanceResponse&& from) noexcept
      : QueryBalanceResponse(nullptr, std::move(from)) {}
  inline QueryBalanceResponse& operator=(const QueryBalanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryBalanceResponse& operator=(QueryBalanceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryBalanceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryBalanceResponse* internal_default_instance() {
    return reinterpret_cast<const QueryBalanceResponse*>(
        &_QueryBalanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(QueryBalanceResponse& a, QueryBalanceResponse& b) { a.Swap(&b); }
  inline void Swap(QueryBalanceResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryBalanceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryBalanceResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QueryBalanceResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryBalanceResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueryBalanceResponse& from) { QueryBalanceResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QueryBalanceResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.nft.v1beta1.QueryBalanceResponse"; }

 protected:
  explicit QueryBalanceResponse(::google::protobuf::Arena* arena);
  QueryBalanceResponse(::google::protobuf::Arena* arena, const QueryBalanceResponse& from);
  QueryBalanceResponse(::google::protobuf::Arena* arena, QueryBalanceResponse&& from) noexcept
      : QueryBalanceResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAmountFieldNumber = 1,
  };
  // uint64 amount = 1 [json_name = "amount"];
  void clear_amount() ;
  ::uint64_t amount() const;
  void set_amount(::uint64_t value);

  private:
  ::uint64_t _internal_amount() const;
  void _internal_set_amount(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.QueryBalanceResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QueryBalanceResponse& from_msg);
    ::uint64_t amount_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
};
// -------------------------------------------------------------------

class QueryBalanceRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.QueryBalanceRequest) */ {
 public:
  inline QueryBalanceRequest() : QueryBalanceRequest(nullptr) {}
  ~QueryBalanceRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QueryBalanceRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QueryBalanceRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueryBalanceRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueryBalanceRequest(const QueryBalanceRequest& from) : QueryBalanceRequest(nullptr, from) {}
  inline QueryBalanceRequest(QueryBalanceRequest&& from) noexcept
      : QueryBalanceRequest(nullptr, std::move(from)) {}
  inline QueryBalanceRequest& operator=(const QueryBalanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryBalanceRequest& operator=(QueryBalanceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryBalanceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryBalanceRequest* internal_default_instance() {
    return reinterpret_cast<const QueryBalanceRequest*>(
        &_QueryBalanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(QueryBalanceRequest& a, QueryBalanceRequest& b) { a.Swap(&b); }
  inline void Swap(QueryBalanceRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryBalanceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryBalanceRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QueryBalanceRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryBalanceRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueryBalanceRequest& from) { QueryBalanceRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QueryBalanceRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.nft.v1beta1.QueryBalanceRequest"; }

 protected:
  explicit QueryBalanceRequest(::google::protobuf::Arena* arena);
  QueryBalanceRequest(::google::protobuf::Arena* arena, const QueryBalanceRequest& from);
  QueryBalanceRequest(::google::protobuf::Arena* arena, QueryBalanceRequest&& from) noexcept
      : QueryBalanceRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClassIdFieldNumber = 1,
    kOwnerFieldNumber = 2,
  };
  // string class_id = 1 [json_name = "classId"];
  void clear_class_id() ;
  const std::string& class_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_id(Arg_&& arg, Args_... args);
  std::string* mutable_class_id();
  PROTOBUF_NODISCARD std::string* release_class_id();
  void set_allocated_class_id(std::string* value);

  private:
  const std::string& _internal_class_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_id(
      const std::string& value);
  std::string* _internal_mutable_class_id();

  public:
  // string owner = 2 [json_name = "owner"];
  void clear_owner() ;
  const std::string& owner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* value);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.QueryBalanceRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      60, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QueryBalanceRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr class_id_;
    ::google::protobuf::internal::ArenaStringPtr owner_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
};
// -------------------------------------------------------------------

class QueryNFTsRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.QueryNFTsRequest) */ {
 public:
  inline QueryNFTsRequest() : QueryNFTsRequest(nullptr) {}
  ~QueryNFTsRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QueryNFTsRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QueryNFTsRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueryNFTsRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueryNFTsRequest(const QueryNFTsRequest& from) : QueryNFTsRequest(nullptr, from) {}
  inline QueryNFTsRequest(QueryNFTsRequest&& from) noexcept
      : QueryNFTsRequest(nullptr, std::move(from)) {}
  inline QueryNFTsRequest& operator=(const QueryNFTsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryNFTsRequest& operator=(QueryNFTsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryNFTsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryNFTsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryNFTsRequest*>(
        &_QueryNFTsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(QueryNFTsRequest& a, QueryNFTsRequest& b) { a.Swap(&b); }
  inline void Swap(QueryNFTsRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryNFTsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryNFTsRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QueryNFTsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryNFTsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueryNFTsRequest& from) { QueryNFTsRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QueryNFTsRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.nft.v1beta1.QueryNFTsRequest"; }

 protected:
  explicit QueryNFTsRequest(::google::protobuf::Arena* arena);
  QueryNFTsRequest(::google::protobuf::Arena* arena, const QueryNFTsRequest& from);
  QueryNFTsRequest(::google::protobuf::Arena* arena, QueryNFTsRequest&& from) noexcept
      : QueryNFTsRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClassIdFieldNumber = 1,
    kOwnerFieldNumber = 2,
    kPaginationFieldNumber = 3,
  };
  // string class_id = 1 [json_name = "classId"];
  void clear_class_id() ;
  const std::string& class_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_id(Arg_&& arg, Args_... args);
  std::string* mutable_class_id();
  PROTOBUF_NODISCARD std::string* release_class_id();
  void set_allocated_class_id(std::string* value);

  private:
  const std::string& _internal_class_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_id(
      const std::string& value);
  std::string* _internal_mutable_class_id();

  public:
  // string owner = 2 [json_name = "owner"];
  void clear_owner() ;
  const std::string& owner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* value);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // .cosmos.base.query.v1beta1.PageRequest pagination = 3 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* value);
  void unsafe_arena_set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* value);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();

  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.QueryNFTsRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      57, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QueryNFTsRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr class_id_;
    ::google::protobuf::internal::ArenaStringPtr owner_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
};
// -------------------------------------------------------------------

class QueryClassesRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.QueryClassesRequest) */ {
 public:
  inline QueryClassesRequest() : QueryClassesRequest(nullptr) {}
  ~QueryClassesRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QueryClassesRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QueryClassesRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueryClassesRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueryClassesRequest(const QueryClassesRequest& from) : QueryClassesRequest(nullptr, from) {}
  inline QueryClassesRequest(QueryClassesRequest&& from) noexcept
      : QueryClassesRequest(nullptr, std::move(from)) {}
  inline QueryClassesRequest& operator=(const QueryClassesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryClassesRequest& operator=(QueryClassesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryClassesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryClassesRequest* internal_default_instance() {
    return reinterpret_cast<const QueryClassesRequest*>(
        &_QueryClassesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(QueryClassesRequest& a, QueryClassesRequest& b) { a.Swap(&b); }
  inline void Swap(QueryClassesRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryClassesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryClassesRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QueryClassesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryClassesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueryClassesRequest& from) { QueryClassesRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QueryClassesRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.nft.v1beta1.QueryClassesRequest"; }

 protected:
  explicit QueryClassesRequest(::google::protobuf::Arena* arena);
  QueryClassesRequest(::google::protobuf::Arena* arena, const QueryClassesRequest& from);
  QueryClassesRequest(::google::protobuf::Arena* arena, QueryClassesRequest&& from) noexcept
      : QueryClassesRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPaginationFieldNumber = 1,
  };
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* value);
  void unsafe_arena_set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* value);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();

  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.QueryClassesRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QueryClassesRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
};
// -------------------------------------------------------------------

class QueryNFTsResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.QueryNFTsResponse) */ {
 public:
  inline QueryNFTsResponse() : QueryNFTsResponse(nullptr) {}
  ~QueryNFTsResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QueryNFTsResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QueryNFTsResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueryNFTsResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueryNFTsResponse(const QueryNFTsResponse& from) : QueryNFTsResponse(nullptr, from) {}
  inline QueryNFTsResponse(QueryNFTsResponse&& from) noexcept
      : QueryNFTsResponse(nullptr, std::move(from)) {}
  inline QueryNFTsResponse& operator=(const QueryNFTsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryNFTsResponse& operator=(QueryNFTsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryNFTsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryNFTsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryNFTsResponse*>(
        &_QueryNFTsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(QueryNFTsResponse& a, QueryNFTsResponse& b) { a.Swap(&b); }
  inline void Swap(QueryNFTsResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryNFTsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryNFTsResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QueryNFTsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryNFTsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueryNFTsResponse& from) { QueryNFTsResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QueryNFTsResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.nft.v1beta1.QueryNFTsResponse"; }

 protected:
  explicit QueryNFTsResponse(::google::protobuf::Arena* arena);
  QueryNFTsResponse(::google::protobuf::Arena* arena, const QueryNFTsResponse& from);
  QueryNFTsResponse(::google::protobuf::Arena* arena, QueryNFTsResponse&& from) noexcept
      : QueryNFTsResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNftsFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .cosmos.nft.v1beta1.NFT nfts = 1 [json_name = "nfts"];
  int nfts_size() const;
  private:
  int _internal_nfts_size() const;

  public:
  void clear_nfts() ;
  ::cosmos::nft::v1beta1::NFT* mutable_nfts(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::nft::v1beta1::NFT>* mutable_nfts();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::nft::v1beta1::NFT>& _internal_nfts() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::nft::v1beta1::NFT>* _internal_mutable_nfts();
  public:
  const ::cosmos::nft::v1beta1::NFT& nfts(int index) const;
  ::cosmos::nft::v1beta1::NFT* add_nfts();
  const ::google::protobuf::RepeatedPtrField<::cosmos::nft::v1beta1::NFT>& nfts() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* value);
  void unsafe_arena_set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* value);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();

  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.QueryNFTsResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QueryNFTsResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::cosmos::nft::v1beta1::NFT > nfts_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
};
// -------------------------------------------------------------------

class QueryNFTResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.QueryNFTResponse) */ {
 public:
  inline QueryNFTResponse() : QueryNFTResponse(nullptr) {}
  ~QueryNFTResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QueryNFTResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QueryNFTResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueryNFTResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueryNFTResponse(const QueryNFTResponse& from) : QueryNFTResponse(nullptr, from) {}
  inline QueryNFTResponse(QueryNFTResponse&& from) noexcept
      : QueryNFTResponse(nullptr, std::move(from)) {}
  inline QueryNFTResponse& operator=(const QueryNFTResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryNFTResponse& operator=(QueryNFTResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryNFTResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryNFTResponse* internal_default_instance() {
    return reinterpret_cast<const QueryNFTResponse*>(
        &_QueryNFTResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(QueryNFTResponse& a, QueryNFTResponse& b) { a.Swap(&b); }
  inline void Swap(QueryNFTResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryNFTResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryNFTResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QueryNFTResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryNFTResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueryNFTResponse& from) { QueryNFTResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QueryNFTResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.nft.v1beta1.QueryNFTResponse"; }

 protected:
  explicit QueryNFTResponse(::google::protobuf::Arena* arena);
  QueryNFTResponse(::google::protobuf::Arena* arena, const QueryNFTResponse& from);
  QueryNFTResponse(::google::protobuf::Arena* arena, QueryNFTResponse&& from) noexcept
      : QueryNFTResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNftFieldNumber = 1,
  };
  // .cosmos.nft.v1beta1.NFT nft = 1 [json_name = "nft"];
  bool has_nft() const;
  void clear_nft() ;
  const ::cosmos::nft::v1beta1::NFT& nft() const;
  PROTOBUF_NODISCARD ::cosmos::nft::v1beta1::NFT* release_nft();
  ::cosmos::nft::v1beta1::NFT* mutable_nft();
  void set_allocated_nft(::cosmos::nft::v1beta1::NFT* value);
  void unsafe_arena_set_allocated_nft(::cosmos::nft::v1beta1::NFT* value);
  ::cosmos::nft::v1beta1::NFT* unsafe_arena_release_nft();

  private:
  const ::cosmos::nft::v1beta1::NFT& _internal_nft() const;
  ::cosmos::nft::v1beta1::NFT* _internal_mutable_nft();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.QueryNFTResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QueryNFTResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::cosmos::nft::v1beta1::NFT* nft_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
};
// -------------------------------------------------------------------

class QueryClassesResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.QueryClassesResponse) */ {
 public:
  inline QueryClassesResponse() : QueryClassesResponse(nullptr) {}
  ~QueryClassesResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QueryClassesResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QueryClassesResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueryClassesResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueryClassesResponse(const QueryClassesResponse& from) : QueryClassesResponse(nullptr, from) {}
  inline QueryClassesResponse(QueryClassesResponse&& from) noexcept
      : QueryClassesResponse(nullptr, std::move(from)) {}
  inline QueryClassesResponse& operator=(const QueryClassesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryClassesResponse& operator=(QueryClassesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryClassesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryClassesResponse* internal_default_instance() {
    return reinterpret_cast<const QueryClassesResponse*>(
        &_QueryClassesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(QueryClassesResponse& a, QueryClassesResponse& b) { a.Swap(&b); }
  inline void Swap(QueryClassesResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryClassesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryClassesResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QueryClassesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryClassesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueryClassesResponse& from) { QueryClassesResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QueryClassesResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.nft.v1beta1.QueryClassesResponse"; }

 protected:
  explicit QueryClassesResponse(::google::protobuf::Arena* arena);
  QueryClassesResponse(::google::protobuf::Arena* arena, const QueryClassesResponse& from);
  QueryClassesResponse(::google::protobuf::Arena* arena, QueryClassesResponse&& from) noexcept
      : QueryClassesResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClassesFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .cosmos.nft.v1beta1.Class classes = 1 [json_name = "classes"];
  int classes_size() const;
  private:
  int _internal_classes_size() const;

  public:
  void clear_classes() ;
  ::cosmos::nft::v1beta1::Class* mutable_classes(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::nft::v1beta1::Class>* mutable_classes();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::nft::v1beta1::Class>& _internal_classes() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::nft::v1beta1::Class>* _internal_mutable_classes();
  public:
  const ::cosmos::nft::v1beta1::Class& classes(int index) const;
  ::cosmos::nft::v1beta1::Class* add_classes();
  const ::google::protobuf::RepeatedPtrField<::cosmos::nft::v1beta1::Class>& classes() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* value);
  void unsafe_arena_set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* value);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();

  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.QueryClassesResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QueryClassesResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::cosmos::nft::v1beta1::Class > classes_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
};
// -------------------------------------------------------------------

class QueryClassResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.QueryClassResponse) */ {
 public:
  inline QueryClassResponse() : QueryClassResponse(nullptr) {}
  ~QueryClassResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QueryClassResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QueryClassResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueryClassResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueryClassResponse(const QueryClassResponse& from) : QueryClassResponse(nullptr, from) {}
  inline QueryClassResponse(QueryClassResponse&& from) noexcept
      : QueryClassResponse(nullptr, std::move(from)) {}
  inline QueryClassResponse& operator=(const QueryClassResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryClassResponse& operator=(QueryClassResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryClassResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryClassResponse* internal_default_instance() {
    return reinterpret_cast<const QueryClassResponse*>(
        &_QueryClassResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(QueryClassResponse& a, QueryClassResponse& b) { a.Swap(&b); }
  inline void Swap(QueryClassResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryClassResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryClassResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QueryClassResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryClassResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueryClassResponse& from) { QueryClassResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QueryClassResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.nft.v1beta1.QueryClassResponse"; }

 protected:
  explicit QueryClassResponse(::google::protobuf::Arena* arena);
  QueryClassResponse(::google::protobuf::Arena* arena, const QueryClassResponse& from);
  QueryClassResponse(::google::protobuf::Arena* arena, QueryClassResponse&& from) noexcept
      : QueryClassResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClassFieldNumber = 1,
  };
  // .cosmos.nft.v1beta1.Class class = 1 [json_name = "class"];
  bool has_class_() const;
  void clear_class_() ;
  const ::cosmos::nft::v1beta1::Class& class_() const;
  PROTOBUF_NODISCARD ::cosmos::nft::v1beta1::Class* release_class_();
  ::cosmos::nft::v1beta1::Class* mutable_class_();
  void set_allocated_class_(::cosmos::nft::v1beta1::Class* value);
  void unsafe_arena_set_allocated_class_(::cosmos::nft::v1beta1::Class* value);
  ::cosmos::nft::v1beta1::Class* unsafe_arena_release_class_();

  private:
  const ::cosmos::nft::v1beta1::Class& _internal_class_() const;
  ::cosmos::nft::v1beta1::Class* _internal_mutable_class_();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.QueryClassResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QueryClassResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::cosmos::nft::v1beta1::Class* class__;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryBalanceRequest

// string class_id = 1 [json_name = "classId"];
inline void QueryBalanceRequest::clear_class_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.ClearToEmpty();
}
inline const std::string& QueryBalanceRequest::class_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryBalanceRequest.class_id)
  return _internal_class_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryBalanceRequest::set_class_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.QueryBalanceRequest.class_id)
}
inline std::string* QueryBalanceRequest::mutable_class_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_class_id();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryBalanceRequest.class_id)
  return _s;
}
inline const std::string& QueryBalanceRequest::_internal_class_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.class_id_.Get();
}
inline void QueryBalanceRequest::_internal_set_class_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.Set(value, GetArena());
}
inline std::string* QueryBalanceRequest::_internal_mutable_class_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.class_id_.Mutable( GetArena());
}
inline std::string* QueryBalanceRequest::release_class_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryBalanceRequest.class_id)
  return _impl_.class_id_.Release();
}
inline void QueryBalanceRequest::set_allocated_class_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.class_id_.IsDefault()) {
    _impl_.class_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryBalanceRequest.class_id)
}

// string owner = 2 [json_name = "owner"];
inline void QueryBalanceRequest::clear_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& QueryBalanceRequest::owner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryBalanceRequest.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryBalanceRequest::set_owner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.QueryBalanceRequest.owner)
}
inline std::string* QueryBalanceRequest::mutable_owner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryBalanceRequest.owner)
  return _s;
}
inline const std::string& QueryBalanceRequest::_internal_owner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.owner_.Get();
}
inline void QueryBalanceRequest::_internal_set_owner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(value, GetArena());
}
inline std::string* QueryBalanceRequest::_internal_mutable_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.owner_.Mutable( GetArena());
}
inline std::string* QueryBalanceRequest::release_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryBalanceRequest.owner)
  return _impl_.owner_.Release();
}
inline void QueryBalanceRequest::set_allocated_owner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryBalanceRequest.owner)
}

// -------------------------------------------------------------------

// QueryBalanceResponse

// uint64 amount = 1 [json_name = "amount"];
inline void QueryBalanceResponse::clear_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = ::uint64_t{0u};
}
inline ::uint64_t QueryBalanceResponse::amount() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryBalanceResponse.amount)
  return _internal_amount();
}
inline void QueryBalanceResponse::set_amount(::uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.QueryBalanceResponse.amount)
}
inline ::uint64_t QueryBalanceResponse::_internal_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_;
}
inline void QueryBalanceResponse::_internal_set_amount(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = value;
}

// -------------------------------------------------------------------

// QueryOwnerRequest

// string class_id = 1 [json_name = "classId"];
inline void QueryOwnerRequest::clear_class_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.ClearToEmpty();
}
inline const std::string& QueryOwnerRequest::class_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryOwnerRequest.class_id)
  return _internal_class_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryOwnerRequest::set_class_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.QueryOwnerRequest.class_id)
}
inline std::string* QueryOwnerRequest::mutable_class_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_class_id();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryOwnerRequest.class_id)
  return _s;
}
inline const std::string& QueryOwnerRequest::_internal_class_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.class_id_.Get();
}
inline void QueryOwnerRequest::_internal_set_class_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.Set(value, GetArena());
}
inline std::string* QueryOwnerRequest::_internal_mutable_class_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.class_id_.Mutable( GetArena());
}
inline std::string* QueryOwnerRequest::release_class_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryOwnerRequest.class_id)
  return _impl_.class_id_.Release();
}
inline void QueryOwnerRequest::set_allocated_class_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.class_id_.IsDefault()) {
    _impl_.class_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryOwnerRequest.class_id)
}

// string id = 2 [json_name = "id"];
inline void QueryOwnerRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& QueryOwnerRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryOwnerRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryOwnerRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.QueryOwnerRequest.id)
}
inline std::string* QueryOwnerRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryOwnerRequest.id)
  return _s;
}
inline const std::string& QueryOwnerRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void QueryOwnerRequest::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* QueryOwnerRequest::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* QueryOwnerRequest::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryOwnerRequest.id)
  return _impl_.id_.Release();
}
inline void QueryOwnerRequest::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryOwnerRequest.id)
}

// -------------------------------------------------------------------

// QueryOwnerResponse

// string owner = 1 [json_name = "owner"];
inline void QueryOwnerResponse::clear_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& QueryOwnerResponse::owner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryOwnerResponse.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryOwnerResponse::set_owner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.QueryOwnerResponse.owner)
}
inline std::string* QueryOwnerResponse::mutable_owner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryOwnerResponse.owner)
  return _s;
}
inline const std::string& QueryOwnerResponse::_internal_owner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.owner_.Get();
}
inline void QueryOwnerResponse::_internal_set_owner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(value, GetArena());
}
inline std::string* QueryOwnerResponse::_internal_mutable_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.owner_.Mutable( GetArena());
}
inline std::string* QueryOwnerResponse::release_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryOwnerResponse.owner)
  return _impl_.owner_.Release();
}
inline void QueryOwnerResponse::set_allocated_owner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryOwnerResponse.owner)
}

// -------------------------------------------------------------------

// QuerySupplyRequest

// string class_id = 1 [json_name = "classId"];
inline void QuerySupplyRequest::clear_class_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.ClearToEmpty();
}
inline const std::string& QuerySupplyRequest::class_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QuerySupplyRequest.class_id)
  return _internal_class_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QuerySupplyRequest::set_class_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.QuerySupplyRequest.class_id)
}
inline std::string* QuerySupplyRequest::mutable_class_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_class_id();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QuerySupplyRequest.class_id)
  return _s;
}
inline const std::string& QuerySupplyRequest::_internal_class_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.class_id_.Get();
}
inline void QuerySupplyRequest::_internal_set_class_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.Set(value, GetArena());
}
inline std::string* QuerySupplyRequest::_internal_mutable_class_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.class_id_.Mutable( GetArena());
}
inline std::string* QuerySupplyRequest::release_class_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QuerySupplyRequest.class_id)
  return _impl_.class_id_.Release();
}
inline void QuerySupplyRequest::set_allocated_class_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.class_id_.IsDefault()) {
    _impl_.class_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QuerySupplyRequest.class_id)
}

// -------------------------------------------------------------------

// QuerySupplyResponse

// uint64 amount = 1 [json_name = "amount"];
inline void QuerySupplyResponse::clear_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = ::uint64_t{0u};
}
inline ::uint64_t QuerySupplyResponse::amount() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QuerySupplyResponse.amount)
  return _internal_amount();
}
inline void QuerySupplyResponse::set_amount(::uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.QuerySupplyResponse.amount)
}
inline ::uint64_t QuerySupplyResponse::_internal_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_;
}
inline void QuerySupplyResponse::_internal_set_amount(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = value;
}

// -------------------------------------------------------------------

// QueryNFTsRequest

// string class_id = 1 [json_name = "classId"];
inline void QueryNFTsRequest::clear_class_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.ClearToEmpty();
}
inline const std::string& QueryNFTsRequest::class_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryNFTsRequest.class_id)
  return _internal_class_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryNFTsRequest::set_class_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.QueryNFTsRequest.class_id)
}
inline std::string* QueryNFTsRequest::mutable_class_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_class_id();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryNFTsRequest.class_id)
  return _s;
}
inline const std::string& QueryNFTsRequest::_internal_class_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.class_id_.Get();
}
inline void QueryNFTsRequest::_internal_set_class_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.Set(value, GetArena());
}
inline std::string* QueryNFTsRequest::_internal_mutable_class_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.class_id_.Mutable( GetArena());
}
inline std::string* QueryNFTsRequest::release_class_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryNFTsRequest.class_id)
  return _impl_.class_id_.Release();
}
inline void QueryNFTsRequest::set_allocated_class_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.class_id_.IsDefault()) {
    _impl_.class_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryNFTsRequest.class_id)
}

// string owner = 2 [json_name = "owner"];
inline void QueryNFTsRequest::clear_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& QueryNFTsRequest::owner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryNFTsRequest.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryNFTsRequest::set_owner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.QueryNFTsRequest.owner)
}
inline std::string* QueryNFTsRequest::mutable_owner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryNFTsRequest.owner)
  return _s;
}
inline const std::string& QueryNFTsRequest::_internal_owner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.owner_.Get();
}
inline void QueryNFTsRequest::_internal_set_owner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(value, GetArena());
}
inline std::string* QueryNFTsRequest::_internal_mutable_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.owner_.Mutable( GetArena());
}
inline std::string* QueryNFTsRequest::release_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryNFTsRequest.owner)
  return _impl_.owner_.Release();
}
inline void QueryNFTsRequest::set_allocated_owner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryNFTsRequest.owner)
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 3 [json_name = "pagination"];
inline bool QueryNFTsRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryNFTsRequest::_internal_pagination() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryNFTsRequest::pagination() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryNFTsRequest.pagination)
  return _internal_pagination();
}
inline void QueryNFTsRequest::unsafe_arena_set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = reinterpret_cast<::cosmos::base::query::v1beta1::PageRequest*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.nft.v1beta1.QueryNFTsRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryNFTsRequest::release_pagination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* released = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryNFTsRequest::unsafe_arena_release_pagination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryNFTsRequest.pagination)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryNFTsRequest::_internal_mutable_pagination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pagination_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::base::query::v1beta1::PageRequest>(GetArena());
    _impl_.pagination_ = reinterpret_cast<::cosmos::base::query::v1beta1::PageRequest*>(p);
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryNFTsRequest::mutable_pagination() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryNFTsRequest.pagination)
  return _msg;
}
inline void QueryNFTsRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pagination_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pagination_ = reinterpret_cast<::cosmos::base::query::v1beta1::PageRequest*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryNFTsRequest.pagination)
}

// -------------------------------------------------------------------

// QueryNFTsResponse

// repeated .cosmos.nft.v1beta1.NFT nfts = 1 [json_name = "nfts"];
inline int QueryNFTsResponse::_internal_nfts_size() const {
  return _internal_nfts().size();
}
inline int QueryNFTsResponse::nfts_size() const {
  return _internal_nfts_size();
}
inline ::cosmos::nft::v1beta1::NFT* QueryNFTsResponse::mutable_nfts(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryNFTsResponse.nfts)
  return _internal_mutable_nfts()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::nft::v1beta1::NFT>* QueryNFTsResponse::mutable_nfts()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.nft.v1beta1.QueryNFTsResponse.nfts)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_nfts();
}
inline const ::cosmos::nft::v1beta1::NFT& QueryNFTsResponse::nfts(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryNFTsResponse.nfts)
  return _internal_nfts().Get(index);
}
inline ::cosmos::nft::v1beta1::NFT* QueryNFTsResponse::add_nfts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::nft::v1beta1::NFT* _add = _internal_mutable_nfts()->Add();
  // @@protoc_insertion_point(field_add:cosmos.nft.v1beta1.QueryNFTsResponse.nfts)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::nft::v1beta1::NFT>& QueryNFTsResponse::nfts() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.nft.v1beta1.QueryNFTsResponse.nfts)
  return _internal_nfts();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::nft::v1beta1::NFT>&
QueryNFTsResponse::_internal_nfts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nfts_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::nft::v1beta1::NFT>*
QueryNFTsResponse::_internal_mutable_nfts() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.nfts_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryNFTsResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryNFTsResponse::_internal_pagination() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryNFTsResponse::pagination() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryNFTsResponse.pagination)
  return _internal_pagination();
}
inline void QueryNFTsResponse::unsafe_arena_set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = reinterpret_cast<::cosmos::base::query::v1beta1::PageResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.nft.v1beta1.QueryNFTsResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryNFTsResponse::release_pagination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* released = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryNFTsResponse::unsafe_arena_release_pagination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryNFTsResponse.pagination)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryNFTsResponse::_internal_mutable_pagination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pagination_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::base::query::v1beta1::PageResponse>(GetArena());
    _impl_.pagination_ = reinterpret_cast<::cosmos::base::query::v1beta1::PageResponse*>(p);
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryNFTsResponse::mutable_pagination() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryNFTsResponse.pagination)
  return _msg;
}
inline void QueryNFTsResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pagination_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pagination_ = reinterpret_cast<::cosmos::base::query::v1beta1::PageResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryNFTsResponse.pagination)
}

// -------------------------------------------------------------------

// QueryNFTRequest

// string class_id = 1 [json_name = "classId"];
inline void QueryNFTRequest::clear_class_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.ClearToEmpty();
}
inline const std::string& QueryNFTRequest::class_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryNFTRequest.class_id)
  return _internal_class_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryNFTRequest::set_class_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.QueryNFTRequest.class_id)
}
inline std::string* QueryNFTRequest::mutable_class_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_class_id();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryNFTRequest.class_id)
  return _s;
}
inline const std::string& QueryNFTRequest::_internal_class_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.class_id_.Get();
}
inline void QueryNFTRequest::_internal_set_class_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.Set(value, GetArena());
}
inline std::string* QueryNFTRequest::_internal_mutable_class_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.class_id_.Mutable( GetArena());
}
inline std::string* QueryNFTRequest::release_class_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryNFTRequest.class_id)
  return _impl_.class_id_.Release();
}
inline void QueryNFTRequest::set_allocated_class_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.class_id_.IsDefault()) {
    _impl_.class_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryNFTRequest.class_id)
}

// string id = 2 [json_name = "id"];
inline void QueryNFTRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& QueryNFTRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryNFTRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryNFTRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.QueryNFTRequest.id)
}
inline std::string* QueryNFTRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryNFTRequest.id)
  return _s;
}
inline const std::string& QueryNFTRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void QueryNFTRequest::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* QueryNFTRequest::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* QueryNFTRequest::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryNFTRequest.id)
  return _impl_.id_.Release();
}
inline void QueryNFTRequest::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryNFTRequest.id)
}

// -------------------------------------------------------------------

// QueryNFTResponse

// .cosmos.nft.v1beta1.NFT nft = 1 [json_name = "nft"];
inline bool QueryNFTResponse::has_nft() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nft_ != nullptr);
  return value;
}
inline const ::cosmos::nft::v1beta1::NFT& QueryNFTResponse::_internal_nft() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::nft::v1beta1::NFT* p = _impl_.nft_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::nft::v1beta1::NFT&>(::cosmos::nft::v1beta1::_NFT_default_instance_);
}
inline const ::cosmos::nft::v1beta1::NFT& QueryNFTResponse::nft() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryNFTResponse.nft)
  return _internal_nft();
}
inline void QueryNFTResponse::unsafe_arena_set_allocated_nft(::cosmos::nft::v1beta1::NFT* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.nft_);
  }
  _impl_.nft_ = reinterpret_cast<::cosmos::nft::v1beta1::NFT*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.nft.v1beta1.QueryNFTResponse.nft)
}
inline ::cosmos::nft::v1beta1::NFT* QueryNFTResponse::release_nft() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::nft::v1beta1::NFT* released = _impl_.nft_;
  _impl_.nft_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::nft::v1beta1::NFT* QueryNFTResponse::unsafe_arena_release_nft() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryNFTResponse.nft)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::nft::v1beta1::NFT* temp = _impl_.nft_;
  _impl_.nft_ = nullptr;
  return temp;
}
inline ::cosmos::nft::v1beta1::NFT* QueryNFTResponse::_internal_mutable_nft() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.nft_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::nft::v1beta1::NFT>(GetArena());
    _impl_.nft_ = reinterpret_cast<::cosmos::nft::v1beta1::NFT*>(p);
  }
  return _impl_.nft_;
}
inline ::cosmos::nft::v1beta1::NFT* QueryNFTResponse::mutable_nft() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::nft::v1beta1::NFT* _msg = _internal_mutable_nft();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryNFTResponse.nft)
  return _msg;
}
inline void QueryNFTResponse::set_allocated_nft(::cosmos::nft::v1beta1::NFT* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.nft_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.nft_ = reinterpret_cast<::cosmos::nft::v1beta1::NFT*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryNFTResponse.nft)
}

// -------------------------------------------------------------------

// QueryClassRequest

// string class_id = 1 [json_name = "classId"];
inline void QueryClassRequest::clear_class_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.ClearToEmpty();
}
inline const std::string& QueryClassRequest::class_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryClassRequest.class_id)
  return _internal_class_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryClassRequest::set_class_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.QueryClassRequest.class_id)
}
inline std::string* QueryClassRequest::mutable_class_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_class_id();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryClassRequest.class_id)
  return _s;
}
inline const std::string& QueryClassRequest::_internal_class_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.class_id_.Get();
}
inline void QueryClassRequest::_internal_set_class_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.Set(value, GetArena());
}
inline std::string* QueryClassRequest::_internal_mutable_class_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.class_id_.Mutable( GetArena());
}
inline std::string* QueryClassRequest::release_class_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryClassRequest.class_id)
  return _impl_.class_id_.Release();
}
inline void QueryClassRequest::set_allocated_class_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.class_id_.IsDefault()) {
    _impl_.class_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryClassRequest.class_id)
}

// -------------------------------------------------------------------

// QueryClassResponse

// .cosmos.nft.v1beta1.Class class = 1 [json_name = "class"];
inline bool QueryClassResponse::has_class_() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.class__ != nullptr);
  return value;
}
inline const ::cosmos::nft::v1beta1::Class& QueryClassResponse::_internal_class_() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::nft::v1beta1::Class* p = _impl_.class__;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::nft::v1beta1::Class&>(::cosmos::nft::v1beta1::_Class_default_instance_);
}
inline const ::cosmos::nft::v1beta1::Class& QueryClassResponse::class_() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryClassResponse.class)
  return _internal_class_();
}
inline void QueryClassResponse::unsafe_arena_set_allocated_class_(::cosmos::nft::v1beta1::Class* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.class__);
  }
  _impl_.class__ = reinterpret_cast<::cosmos::nft::v1beta1::Class*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.nft.v1beta1.QueryClassResponse.class)
}
inline ::cosmos::nft::v1beta1::Class* QueryClassResponse::release_class_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::nft::v1beta1::Class* released = _impl_.class__;
  _impl_.class__ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::nft::v1beta1::Class* QueryClassResponse::unsafe_arena_release_class_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryClassResponse.class)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::nft::v1beta1::Class* temp = _impl_.class__;
  _impl_.class__ = nullptr;
  return temp;
}
inline ::cosmos::nft::v1beta1::Class* QueryClassResponse::_internal_mutable_class_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.class__ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::nft::v1beta1::Class>(GetArena());
    _impl_.class__ = reinterpret_cast<::cosmos::nft::v1beta1::Class*>(p);
  }
  return _impl_.class__;
}
inline ::cosmos::nft::v1beta1::Class* QueryClassResponse::mutable_class_() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::nft::v1beta1::Class* _msg = _internal_mutable_class_();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryClassResponse.class)
  return _msg;
}
inline void QueryClassResponse::set_allocated_class_(::cosmos::nft::v1beta1::Class* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.class__);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.class__ = reinterpret_cast<::cosmos::nft::v1beta1::Class*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryClassResponse.class)
}

// -------------------------------------------------------------------

// QueryClassesRequest

// .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
inline bool QueryClassesRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryClassesRequest::_internal_pagination() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryClassesRequest::pagination() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryClassesRequest.pagination)
  return _internal_pagination();
}
inline void QueryClassesRequest::unsafe_arena_set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = reinterpret_cast<::cosmos::base::query::v1beta1::PageRequest*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.nft.v1beta1.QueryClassesRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryClassesRequest::release_pagination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* released = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryClassesRequest::unsafe_arena_release_pagination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryClassesRequest.pagination)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryClassesRequest::_internal_mutable_pagination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pagination_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::base::query::v1beta1::PageRequest>(GetArena());
    _impl_.pagination_ = reinterpret_cast<::cosmos::base::query::v1beta1::PageRequest*>(p);
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryClassesRequest::mutable_pagination() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryClassesRequest.pagination)
  return _msg;
}
inline void QueryClassesRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pagination_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pagination_ = reinterpret_cast<::cosmos::base::query::v1beta1::PageRequest*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryClassesRequest.pagination)
}

// -------------------------------------------------------------------

// QueryClassesResponse

// repeated .cosmos.nft.v1beta1.Class classes = 1 [json_name = "classes"];
inline int QueryClassesResponse::_internal_classes_size() const {
  return _internal_classes().size();
}
inline int QueryClassesResponse::classes_size() const {
  return _internal_classes_size();
}
inline ::cosmos::nft::v1beta1::Class* QueryClassesResponse::mutable_classes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryClassesResponse.classes)
  return _internal_mutable_classes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::nft::v1beta1::Class>* QueryClassesResponse::mutable_classes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.nft.v1beta1.QueryClassesResponse.classes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_classes();
}
inline const ::cosmos::nft::v1beta1::Class& QueryClassesResponse::classes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryClassesResponse.classes)
  return _internal_classes().Get(index);
}
inline ::cosmos::nft::v1beta1::Class* QueryClassesResponse::add_classes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::nft::v1beta1::Class* _add = _internal_mutable_classes()->Add();
  // @@protoc_insertion_point(field_add:cosmos.nft.v1beta1.QueryClassesResponse.classes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::nft::v1beta1::Class>& QueryClassesResponse::classes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.nft.v1beta1.QueryClassesResponse.classes)
  return _internal_classes();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::nft::v1beta1::Class>&
QueryClassesResponse::_internal_classes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.classes_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::nft::v1beta1::Class>*
QueryClassesResponse::_internal_mutable_classes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.classes_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryClassesResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryClassesResponse::_internal_pagination() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryClassesResponse::pagination() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryClassesResponse.pagination)
  return _internal_pagination();
}
inline void QueryClassesResponse::unsafe_arena_set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = reinterpret_cast<::cosmos::base::query::v1beta1::PageResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.nft.v1beta1.QueryClassesResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryClassesResponse::release_pagination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* released = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryClassesResponse::unsafe_arena_release_pagination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryClassesResponse.pagination)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryClassesResponse::_internal_mutable_pagination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pagination_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::base::query::v1beta1::PageResponse>(GetArena());
    _impl_.pagination_ = reinterpret_cast<::cosmos::base::query::v1beta1::PageResponse*>(p);
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryClassesResponse::mutable_pagination() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryClassesResponse.pagination)
  return _msg;
}
inline void QueryClassesResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pagination_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pagination_ = reinterpret_cast<::cosmos::base::query::v1beta1::PageResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryClassesResponse.pagination)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace nft
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2fnft_2fv1beta1_2fquery_2eproto_2epb_2eh
