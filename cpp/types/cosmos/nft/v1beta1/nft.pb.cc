// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/nft/v1beta1/nft.proto
// Protobuf C++ Version: 5.29.4

#include "cosmos/nft/v1beta1/nft.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace cosmos {
namespace nft {
namespace v1beta1 {

inline constexpr NFT::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        class_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        uri_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        uri_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        data_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR NFT::NFT(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct NFTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NFTDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NFTDefaultTypeInternal() {}
  union {
    NFT _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NFTDefaultTypeInternal _NFT_default_instance_;

inline constexpr Class::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        uri_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        uri_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        data_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Class::Class(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ClassDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClassDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClassDefaultTypeInternal() {}
  union {
    Class _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClassDefaultTypeInternal _Class_default_instance_;
}  // namespace v1beta1
}  // namespace nft
}  // namespace cosmos
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fnft_2fv1beta1_2fnft_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fnft_2fv1beta1_2fnft_2eproto = nullptr;
const ::uint32_t
    TableStruct_cosmos_2fnft_2fv1beta1_2fnft_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::Class, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::Class, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::Class, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::Class, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::Class, _impl_.symbol_),
        PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::Class, _impl_.description_),
        PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::Class, _impl_.uri_),
        PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::Class, _impl_.uri_hash_),
        PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::Class, _impl_.data_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::NFT, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::NFT, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::NFT, _impl_.class_id_),
        PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::NFT, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::NFT, _impl_.uri_),
        PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::NFT, _impl_.uri_hash_),
        PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::NFT, _impl_.data_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 15, -1, sizeof(::cosmos::nft::v1beta1::Class)},
        {22, 35, -1, sizeof(::cosmos::nft::v1beta1::NFT)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::nft::v1beta1::_Class_default_instance_._instance,
    &::cosmos::nft::v1beta1::_NFT_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fnft_2fv1beta1_2fnft_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\034cosmos/nft/v1beta1/nft.proto\022\022cosmos.n"
    "ft.v1beta1\032\031google/protobuf/any.proto\"\274\001"
    "\n\005Class\022\016\n\002id\030\001 \001(\tR\002id\022\022\n\004name\030\002 \001(\tR\004n"
    "ame\022\026\n\006symbol\030\003 \001(\tR\006symbol\022 \n\013descripti"
    "on\030\004 \001(\tR\013description\022\020\n\003uri\030\005 \001(\tR\003uri\022"
    "\031\n\010uri_hash\030\006 \001(\tR\007uriHash\022(\n\004data\030\007 \001(\013"
    "2\024.google.protobuf.AnyR\004data\"\207\001\n\003NFT\022\031\n\010"
    "class_id\030\001 \001(\tR\007classId\022\016\n\002id\030\002 \001(\tR\002id\022"
    "\020\n\003uri\030\003 \001(\tR\003uri\022\031\n\010uri_hash\030\004 \001(\tR\007uri"
    "Hash\022(\n\004data\030\n \001(\0132\024.google.protobuf.Any"
    "R\004dataB\024Z\022cosmossdk.io/x/nftb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fnft_2fv1beta1_2fnft_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fnft_2fv1beta1_2fnft_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_cosmos_2fnft_2fv1beta1_2fnft_2eproto = {
    false,
    false,
    436,
    descriptor_table_protodef_cosmos_2fnft_2fv1beta1_2fnft_2eproto,
    "cosmos/nft/v1beta1/nft.proto",
    &descriptor_table_cosmos_2fnft_2fv1beta1_2fnft_2eproto_once,
    descriptor_table_cosmos_2fnft_2fv1beta1_2fnft_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fnft_2fv1beta1_2fnft_2eproto::offsets,
    file_level_enum_descriptors_cosmos_2fnft_2fv1beta1_2fnft_2eproto,
    file_level_service_descriptors_cosmos_2fnft_2fv1beta1_2fnft_2eproto,
};
namespace cosmos {
namespace nft {
namespace v1beta1 {
// ===================================================================

class Class::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Class>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Class, _impl_._has_bits_);
};

void Class::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Class::Class(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.nft.v1beta1.Class)
}
inline PROTOBUF_NDEBUG_INLINE Class::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::nft::v1beta1::Class& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        id_(arena, from.id_),
        name_(arena, from.name_),
        symbol_(arena, from.symbol_),
        description_(arena, from.description_),
        uri_(arena, from.uri_),
        uri_hash_(arena, from.uri_hash_) {}

Class::Class(
    ::google::protobuf::Arena* arena,
    const Class& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Class* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.data_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Any>(
                              arena, *from._impl_.data_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:cosmos.nft.v1beta1.Class)
}
inline PROTOBUF_NDEBUG_INLINE Class::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        id_(arena),
        name_(arena),
        symbol_(arena),
        description_(arena),
        uri_(arena),
        uri_hash_(arena) {}

inline void Class::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.data_ = {};
}
Class::~Class() {
  // @@protoc_insertion_point(destructor:cosmos.nft.v1beta1.Class)
  SharedDtor(*this);
}
inline void Class::SharedDtor(MessageLite& self) {
  Class& this_ = static_cast<Class&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.symbol_.Destroy();
  this_._impl_.description_.Destroy();
  this_._impl_.uri_.Destroy();
  this_._impl_.uri_hash_.Destroy();
  delete this_._impl_.data_;
  this_._impl_.~Impl_();
}

inline void* Class::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Class(arena);
}
constexpr auto Class::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Class),
                                            alignof(Class));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Class::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Class_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Class::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Class>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Class::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Class>(), &Class::ByteSizeLong,
            &Class::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Class, _impl_._cached_size_),
        false,
    },
    &Class::kDescriptorMethods,
    &descriptor_table_cosmos_2fnft_2fv1beta1_2fnft_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Class::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 67, 2> Class::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Class, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::nft::v1beta1::Class>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string id = 1 [json_name = "id"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Class, _impl_.id_)}},
    // string name = 2 [json_name = "name"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Class, _impl_.name_)}},
    // string symbol = 3 [json_name = "symbol"];
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Class, _impl_.symbol_)}},
    // string description = 4 [json_name = "description"];
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Class, _impl_.description_)}},
    // string uri = 5 [json_name = "uri"];
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Class, _impl_.uri_)}},
    // string uri_hash = 6 [json_name = "uriHash"];
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Class, _impl_.uri_hash_)}},
    // .google.protobuf.Any data = 7 [json_name = "data"];
    {::_pbi::TcParser::FastMtS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(Class, _impl_.data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(Class, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 2 [json_name = "name"];
    {PROTOBUF_FIELD_OFFSET(Class, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string symbol = 3 [json_name = "symbol"];
    {PROTOBUF_FIELD_OFFSET(Class, _impl_.symbol_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string description = 4 [json_name = "description"];
    {PROTOBUF_FIELD_OFFSET(Class, _impl_.description_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string uri = 5 [json_name = "uri"];
    {PROTOBUF_FIELD_OFFSET(Class, _impl_.uri_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string uri_hash = 6 [json_name = "uriHash"];
    {PROTOBUF_FIELD_OFFSET(Class, _impl_.uri_hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Any data = 7 [json_name = "data"];
    {PROTOBUF_FIELD_OFFSET(Class, _impl_.data_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
  }}, {{
    "\30\2\4\6\13\3\10\0"
    "cosmos.nft.v1beta1.Class"
    "id"
    "name"
    "symbol"
    "description"
    "uri"
    "uri_hash"
  }},
};

PROTOBUF_NOINLINE void Class::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.nft.v1beta1.Class)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.symbol_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.uri_.ClearToEmpty();
  _impl_.uri_hash_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.data_ != nullptr);
    _impl_.data_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Class::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Class& this_ = static_cast<const Class&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Class::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Class& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.nft.v1beta1.Class)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string id = 1 [json_name = "id"];
          if (!this_._internal_id().empty()) {
            const std::string& _s = this_._internal_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.Class.id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string name = 2 [json_name = "name"];
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.Class.name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string symbol = 3 [json_name = "symbol"];
          if (!this_._internal_symbol().empty()) {
            const std::string& _s = this_._internal_symbol();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.Class.symbol");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string description = 4 [json_name = "description"];
          if (!this_._internal_description().empty()) {
            const std::string& _s = this_._internal_description();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.Class.description");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string uri = 5 [json_name = "uri"];
          if (!this_._internal_uri().empty()) {
            const std::string& _s = this_._internal_uri();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.Class.uri");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // string uri_hash = 6 [json_name = "uriHash"];
          if (!this_._internal_uri_hash().empty()) {
            const std::string& _s = this_._internal_uri_hash();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.Class.uri_hash");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Any data = 7 [json_name = "data"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.data_, this_._impl_.data_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.nft.v1beta1.Class)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Class::ByteSizeLong(const MessageLite& base) {
          const Class& this_ = static_cast<const Class&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Class::ByteSizeLong() const {
          const Class& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.nft.v1beta1.Class)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string id = 1 [json_name = "id"];
            if (!this_._internal_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_id());
            }
            // string name = 2 [json_name = "name"];
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // string symbol = 3 [json_name = "symbol"];
            if (!this_._internal_symbol().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_symbol());
            }
            // string description = 4 [json_name = "description"];
            if (!this_._internal_description().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_description());
            }
            // string uri = 5 [json_name = "uri"];
            if (!this_._internal_uri().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_uri());
            }
            // string uri_hash = 6 [json_name = "uriHash"];
            if (!this_._internal_uri_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_uri_hash());
            }
          }
           {
            // .google.protobuf.Any data = 7 [json_name = "data"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.data_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Class::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Class*>(&to_msg);
  auto& from = static_cast<const Class&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.nft.v1beta1.Class)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  if (!from._internal_uri_hash().empty()) {
    _this->_internal_set_uri_hash(from._internal_uri_hash());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.data_ != nullptr);
    if (_this->_impl_.data_ == nullptr) {
      _this->_impl_.data_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Any>(arena, *from._impl_.data_);
    } else {
      _this->_impl_.data_->MergeFrom(*from._impl_.data_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Class::CopyFrom(const Class& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.nft.v1beta1.Class)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Class::InternalSwap(Class* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uri_, &other->_impl_.uri_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uri_hash_, &other->_impl_.uri_hash_, arena);
  swap(_impl_.data_, other->_impl_.data_);
}

::google::protobuf::Metadata Class::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NFT::_Internal {
 public:
  using HasBits =
      decltype(std::declval<NFT>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(NFT, _impl_._has_bits_);
};

void NFT::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
NFT::NFT(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.nft.v1beta1.NFT)
}
inline PROTOBUF_NDEBUG_INLINE NFT::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::nft::v1beta1::NFT& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        class_id_(arena, from.class_id_),
        id_(arena, from.id_),
        uri_(arena, from.uri_),
        uri_hash_(arena, from.uri_hash_) {}

NFT::NFT(
    ::google::protobuf::Arena* arena,
    const NFT& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  NFT* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.data_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Any>(
                              arena, *from._impl_.data_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:cosmos.nft.v1beta1.NFT)
}
inline PROTOBUF_NDEBUG_INLINE NFT::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        class_id_(arena),
        id_(arena),
        uri_(arena),
        uri_hash_(arena) {}

inline void NFT::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.data_ = {};
}
NFT::~NFT() {
  // @@protoc_insertion_point(destructor:cosmos.nft.v1beta1.NFT)
  SharedDtor(*this);
}
inline void NFT::SharedDtor(MessageLite& self) {
  NFT& this_ = static_cast<NFT&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.class_id_.Destroy();
  this_._impl_.id_.Destroy();
  this_._impl_.uri_.Destroy();
  this_._impl_.uri_hash_.Destroy();
  delete this_._impl_.data_;
  this_._impl_.~Impl_();
}

inline void* NFT::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) NFT(arena);
}
constexpr auto NFT::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(NFT),
                                            alignof(NFT));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull NFT::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_NFT_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &NFT::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<NFT>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &NFT::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<NFT>(), &NFT::ByteSizeLong,
            &NFT::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(NFT, _impl_._cached_size_),
        false,
    },
    &NFT::kDescriptorMethods,
    &descriptor_table_cosmos_2fnft_2fv1beta1_2fnft_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* NFT::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 5, 1, 52, 2> NFT::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(NFT, _impl_._has_bits_),
    0, // no _extensions_
    10, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966768,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::nft::v1beta1::NFT>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string uri_hash = 4 [json_name = "uriHash"];
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(NFT, _impl_.uri_hash_)}},
    // string class_id = 1 [json_name = "classId"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(NFT, _impl_.class_id_)}},
    // string id = 2 [json_name = "id"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(NFT, _impl_.id_)}},
    // string uri = 3 [json_name = "uri"];
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(NFT, _impl_.uri_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string class_id = 1 [json_name = "classId"];
    {PROTOBUF_FIELD_OFFSET(NFT, _impl_.class_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string id = 2 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(NFT, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string uri = 3 [json_name = "uri"];
    {PROTOBUF_FIELD_OFFSET(NFT, _impl_.uri_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string uri_hash = 4 [json_name = "uriHash"];
    {PROTOBUF_FIELD_OFFSET(NFT, _impl_.uri_hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Any data = 10 [json_name = "data"];
    {PROTOBUF_FIELD_OFFSET(NFT, _impl_.data_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
  }}, {{
    "\26\10\2\3\10\0\0\0"
    "cosmos.nft.v1beta1.NFT"
    "class_id"
    "id"
    "uri"
    "uri_hash"
  }},
};

PROTOBUF_NOINLINE void NFT::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.nft.v1beta1.NFT)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.class_id_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  _impl_.uri_.ClearToEmpty();
  _impl_.uri_hash_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.data_ != nullptr);
    _impl_.data_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* NFT::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const NFT& this_ = static_cast<const NFT&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* NFT::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const NFT& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.nft.v1beta1.NFT)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string class_id = 1 [json_name = "classId"];
          if (!this_._internal_class_id().empty()) {
            const std::string& _s = this_._internal_class_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.NFT.class_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string id = 2 [json_name = "id"];
          if (!this_._internal_id().empty()) {
            const std::string& _s = this_._internal_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.NFT.id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string uri = 3 [json_name = "uri"];
          if (!this_._internal_uri().empty()) {
            const std::string& _s = this_._internal_uri();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.NFT.uri");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string uri_hash = 4 [json_name = "uriHash"];
          if (!this_._internal_uri_hash().empty()) {
            const std::string& _s = this_._internal_uri_hash();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.NFT.uri_hash");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Any data = 10 [json_name = "data"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                10, *this_._impl_.data_, this_._impl_.data_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.nft.v1beta1.NFT)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t NFT::ByteSizeLong(const MessageLite& base) {
          const NFT& this_ = static_cast<const NFT&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t NFT::ByteSizeLong() const {
          const NFT& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.nft.v1beta1.NFT)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string class_id = 1 [json_name = "classId"];
            if (!this_._internal_class_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_class_id());
            }
            // string id = 2 [json_name = "id"];
            if (!this_._internal_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_id());
            }
            // string uri = 3 [json_name = "uri"];
            if (!this_._internal_uri().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_uri());
            }
            // string uri_hash = 4 [json_name = "uriHash"];
            if (!this_._internal_uri_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_uri_hash());
            }
          }
           {
            // .google.protobuf.Any data = 10 [json_name = "data"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.data_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void NFT::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NFT*>(&to_msg);
  auto& from = static_cast<const NFT&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.nft.v1beta1.NFT)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_class_id().empty()) {
    _this->_internal_set_class_id(from._internal_class_id());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  if (!from._internal_uri_hash().empty()) {
    _this->_internal_set_uri_hash(from._internal_uri_hash());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.data_ != nullptr);
    if (_this->_impl_.data_ == nullptr) {
      _this->_impl_.data_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Any>(arena, *from._impl_.data_);
    } else {
      _this->_impl_.data_->MergeFrom(*from._impl_.data_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NFT::CopyFrom(const NFT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.nft.v1beta1.NFT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NFT::InternalSwap(NFT* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_id_, &other->_impl_.class_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uri_, &other->_impl_.uri_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uri_hash_, &other->_impl_.uri_hash_, arena);
  swap(_impl_.data_, other->_impl_.data_);
}

::google::protobuf::Metadata NFT::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace nft
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_cosmos_2fnft_2fv1beta1_2fnft_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
