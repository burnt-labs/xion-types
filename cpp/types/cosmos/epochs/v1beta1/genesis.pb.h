// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/epochs/v1beta1/genesis.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2fepochs_2fv1beta1_2fgenesis_2eproto_2epb_2eh
#define cosmos_2fepochs_2fv1beta1_2fgenesis_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/duration.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fepochs_2fv1beta1_2fgenesis_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fepochs_2fv1beta1_2fgenesis_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2fepochs_2fv1beta1_2fgenesis_2eproto;
namespace cosmos {
namespace epochs {
namespace v1beta1 {
class EpochInfo;
struct EpochInfoDefaultTypeInternal;
extern EpochInfoDefaultTypeInternal _EpochInfo_default_instance_;
class GenesisState;
struct GenesisStateDefaultTypeInternal;
extern GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
}  // namespace v1beta1
}  // namespace epochs
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace epochs {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class EpochInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.epochs.v1beta1.EpochInfo) */ {
 public:
  inline EpochInfo() : EpochInfo(nullptr) {}
  ~EpochInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EpochInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EpochInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EpochInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline EpochInfo(const EpochInfo& from) : EpochInfo(nullptr, from) {}
  inline EpochInfo(EpochInfo&& from) noexcept
      : EpochInfo(nullptr, std::move(from)) {}
  inline EpochInfo& operator=(const EpochInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EpochInfo& operator=(EpochInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EpochInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const EpochInfo* internal_default_instance() {
    return reinterpret_cast<const EpochInfo*>(
        &_EpochInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(EpochInfo& a, EpochInfo& b) { a.Swap(&b); }
  inline void Swap(EpochInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EpochInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EpochInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EpochInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EpochInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EpochInfo& from) { EpochInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EpochInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.epochs.v1beta1.EpochInfo"; }

 protected:
  explicit EpochInfo(::google::protobuf::Arena* arena);
  EpochInfo(::google::protobuf::Arena* arena, const EpochInfo& from);
  EpochInfo(::google::protobuf::Arena* arena, EpochInfo&& from) noexcept
      : EpochInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdentifierFieldNumber = 1,
    kStartTimeFieldNumber = 2,
    kDurationFieldNumber = 3,
    kCurrentEpochStartTimeFieldNumber = 5,
    kCurrentEpochFieldNumber = 4,
    kCurrentEpochStartHeightFieldNumber = 8,
    kEpochCountingStartedFieldNumber = 6,
  };
  // string identifier = 1 [json_name = "identifier"];
  void clear_identifier() ;
  const std::string& identifier() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identifier(Arg_&& arg, Args_... args);
  std::string* mutable_identifier();
  PROTOBUF_NODISCARD std::string* release_identifier();
  void set_allocated_identifier(std::string* value);

  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(
      const std::string& value);
  std::string* _internal_mutable_identifier();

  public:
  // .google.protobuf.Timestamp start_time = 2 [json_name = "startTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_start_time() const;
  void clear_start_time() ;
  const ::google::protobuf::Timestamp& start_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_start_time();
  ::google::protobuf::Timestamp* mutable_start_time();
  void set_allocated_start_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_start_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_start_time();

  private:
  const ::google::protobuf::Timestamp& _internal_start_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_start_time();

  public:
  // .google.protobuf.Duration duration = 3 [json_name = "duration", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "duration,omitempty", (.gogoproto.stdduration) = true];
  bool has_duration() const;
  void clear_duration() ;
  const ::google::protobuf::Duration& duration() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_duration();
  ::google::protobuf::Duration* mutable_duration();
  void set_allocated_duration(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_duration(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_duration();

  private:
  const ::google::protobuf::Duration& _internal_duration() const;
  ::google::protobuf::Duration* _internal_mutable_duration();

  public:
  // .google.protobuf.Timestamp current_epoch_start_time = 5 [json_name = "currentEpochStartTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_current_epoch_start_time() const;
  void clear_current_epoch_start_time() ;
  const ::google::protobuf::Timestamp& current_epoch_start_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_current_epoch_start_time();
  ::google::protobuf::Timestamp* mutable_current_epoch_start_time();
  void set_allocated_current_epoch_start_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_current_epoch_start_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_current_epoch_start_time();

  private:
  const ::google::protobuf::Timestamp& _internal_current_epoch_start_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_current_epoch_start_time();

  public:
  // int64 current_epoch = 4 [json_name = "currentEpoch"];
  void clear_current_epoch() ;
  ::int64_t current_epoch() const;
  void set_current_epoch(::int64_t value);

  private:
  ::int64_t _internal_current_epoch() const;
  void _internal_set_current_epoch(::int64_t value);

  public:
  // int64 current_epoch_start_height = 8 [json_name = "currentEpochStartHeight"];
  void clear_current_epoch_start_height() ;
  ::int64_t current_epoch_start_height() const;
  void set_current_epoch_start_height(::int64_t value);

  private:
  ::int64_t _internal_current_epoch_start_height() const;
  void _internal_set_current_epoch_start_height(::int64_t value);

  public:
  // bool epoch_counting_started = 6 [json_name = "epochCountingStarted"];
  void clear_epoch_counting_started() ;
  bool epoch_counting_started() const;
  void set_epoch_counting_started(bool value);

  private:
  bool _internal_epoch_counting_started() const;
  void _internal_set_epoch_counting_started(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.epochs.v1beta1.EpochInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 3,
      50, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EpochInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr identifier_;
    ::google::protobuf::Timestamp* start_time_;
    ::google::protobuf::Duration* duration_;
    ::google::protobuf::Timestamp* current_epoch_start_time_;
    ::int64_t current_epoch_;
    ::int64_t current_epoch_start_height_;
    bool epoch_counting_started_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fepochs_2fv1beta1_2fgenesis_2eproto;
};
// -------------------------------------------------------------------

class GenesisState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.epochs.v1beta1.GenesisState) */ {
 public:
  inline GenesisState() : GenesisState(nullptr) {}
  ~GenesisState() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GenesisState* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GenesisState));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GenesisState(
      ::google::protobuf::internal::ConstantInitialized);

  inline GenesisState(const GenesisState& from) : GenesisState(nullptr, from) {}
  inline GenesisState(GenesisState&& from) noexcept
      : GenesisState(nullptr, std::move(from)) {}
  inline GenesisState& operator=(const GenesisState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisState& operator=(GenesisState&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisState* internal_default_instance() {
    return reinterpret_cast<const GenesisState*>(
        &_GenesisState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(GenesisState& a, GenesisState& b) { a.Swap(&b); }
  inline void Swap(GenesisState* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenesisState* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GenesisState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GenesisState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GenesisState& from) { GenesisState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GenesisState* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.epochs.v1beta1.GenesisState"; }

 protected:
  explicit GenesisState(::google::protobuf::Arena* arena);
  GenesisState(::google::protobuf::Arena* arena, const GenesisState& from);
  GenesisState(::google::protobuf::Arena* arena, GenesisState&& from) noexcept
      : GenesisState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEpochsFieldNumber = 1,
  };
  // repeated .cosmos.epochs.v1beta1.EpochInfo epochs = 1 [json_name = "epochs", (.gogoproto.nullable) = false];
  int epochs_size() const;
  private:
  int _internal_epochs_size() const;

  public:
  void clear_epochs() ;
  ::cosmos::epochs::v1beta1::EpochInfo* mutable_epochs(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::epochs::v1beta1::EpochInfo>* mutable_epochs();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::epochs::v1beta1::EpochInfo>& _internal_epochs() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::epochs::v1beta1::EpochInfo>* _internal_mutable_epochs();
  public:
  const ::cosmos::epochs::v1beta1::EpochInfo& epochs(int index) const;
  ::cosmos::epochs::v1beta1::EpochInfo* add_epochs();
  const ::google::protobuf::RepeatedPtrField<::cosmos::epochs::v1beta1::EpochInfo>& epochs() const;
  // @@protoc_insertion_point(class_scope:cosmos.epochs.v1beta1.GenesisState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GenesisState& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::epochs::v1beta1::EpochInfo > epochs_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fepochs_2fv1beta1_2fgenesis_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EpochInfo

// string identifier = 1 [json_name = "identifier"];
inline void EpochInfo::clear_identifier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identifier_.ClearToEmpty();
}
inline const std::string& EpochInfo::identifier() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.epochs.v1beta1.EpochInfo.identifier)
  return _internal_identifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EpochInfo::set_identifier(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identifier_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.epochs.v1beta1.EpochInfo.identifier)
}
inline std::string* EpochInfo::mutable_identifier() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:cosmos.epochs.v1beta1.EpochInfo.identifier)
  return _s;
}
inline const std::string& EpochInfo::_internal_identifier() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.identifier_.Get();
}
inline void EpochInfo::_internal_set_identifier(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identifier_.Set(value, GetArena());
}
inline std::string* EpochInfo::_internal_mutable_identifier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.identifier_.Mutable( GetArena());
}
inline std::string* EpochInfo::release_identifier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.epochs.v1beta1.EpochInfo.identifier)
  return _impl_.identifier_.Release();
}
inline void EpochInfo::set_allocated_identifier(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identifier_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.identifier_.IsDefault()) {
    _impl_.identifier_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.epochs.v1beta1.EpochInfo.identifier)
}

// .google.protobuf.Timestamp start_time = 2 [json_name = "startTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool EpochInfo::has_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& EpochInfo::_internal_start_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& EpochInfo::start_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.epochs.v1beta1.EpochInfo.start_time)
  return _internal_start_time();
}
inline void EpochInfo::unsafe_arena_set_allocated_start_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.start_time_);
  }
  _impl_.start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.epochs.v1beta1.EpochInfo.start_time)
}
inline ::google::protobuf::Timestamp* EpochInfo::release_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* EpochInfo::unsafe_arena_release_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.epochs.v1beta1.EpochInfo.start_time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* EpochInfo::_internal_mutable_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.start_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.start_time_;
}
inline ::google::protobuf::Timestamp* EpochInfo::mutable_start_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:cosmos.epochs.v1beta1.EpochInfo.start_time)
  return _msg;
}
inline void EpochInfo::set_allocated_start_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.start_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.epochs.v1beta1.EpochInfo.start_time)
}

// .google.protobuf.Duration duration = 3 [json_name = "duration", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "duration,omitempty", (.gogoproto.stdduration) = true];
inline bool EpochInfo::has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.duration_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& EpochInfo::_internal_duration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Duration* p = _impl_.duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& EpochInfo::duration() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.epochs.v1beta1.EpochInfo.duration)
  return _internal_duration();
}
inline void EpochInfo::unsafe_arena_set_allocated_duration(::google::protobuf::Duration* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.duration_);
  }
  _impl_.duration_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.epochs.v1beta1.EpochInfo.duration)
}
inline ::google::protobuf::Duration* EpochInfo::release_duration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Duration* released = _impl_.duration_;
  _impl_.duration_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Duration* EpochInfo::unsafe_arena_release_duration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.epochs.v1beta1.EpochInfo.duration)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Duration* temp = _impl_.duration_;
  _impl_.duration_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* EpochInfo::_internal_mutable_duration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.duration_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Duration>(GetArena());
    _impl_.duration_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.duration_;
}
inline ::google::protobuf::Duration* EpochInfo::mutable_duration() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Duration* _msg = _internal_mutable_duration();
  // @@protoc_insertion_point(field_mutable:cosmos.epochs.v1beta1.EpochInfo.duration)
  return _msg;
}
inline void EpochInfo::set_allocated_duration(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.duration_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.duration_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.epochs.v1beta1.EpochInfo.duration)
}

// int64 current_epoch = 4 [json_name = "currentEpoch"];
inline void EpochInfo::clear_current_epoch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_epoch_ = ::int64_t{0};
}
inline ::int64_t EpochInfo::current_epoch() const {
  // @@protoc_insertion_point(field_get:cosmos.epochs.v1beta1.EpochInfo.current_epoch)
  return _internal_current_epoch();
}
inline void EpochInfo::set_current_epoch(::int64_t value) {
  _internal_set_current_epoch(value);
  // @@protoc_insertion_point(field_set:cosmos.epochs.v1beta1.EpochInfo.current_epoch)
}
inline ::int64_t EpochInfo::_internal_current_epoch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_epoch_;
}
inline void EpochInfo::_internal_set_current_epoch(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_epoch_ = value;
}

// .google.protobuf.Timestamp current_epoch_start_time = 5 [json_name = "currentEpochStartTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool EpochInfo::has_current_epoch_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.current_epoch_start_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& EpochInfo::_internal_current_epoch_start_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.current_epoch_start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& EpochInfo::current_epoch_start_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.epochs.v1beta1.EpochInfo.current_epoch_start_time)
  return _internal_current_epoch_start_time();
}
inline void EpochInfo::unsafe_arena_set_allocated_current_epoch_start_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_epoch_start_time_);
  }
  _impl_.current_epoch_start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.epochs.v1beta1.EpochInfo.current_epoch_start_time)
}
inline ::google::protobuf::Timestamp* EpochInfo::release_current_epoch_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* released = _impl_.current_epoch_start_time_;
  _impl_.current_epoch_start_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* EpochInfo::unsafe_arena_release_current_epoch_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.epochs.v1beta1.EpochInfo.current_epoch_start_time)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* temp = _impl_.current_epoch_start_time_;
  _impl_.current_epoch_start_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* EpochInfo::_internal_mutable_current_epoch_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.current_epoch_start_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.current_epoch_start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.current_epoch_start_time_;
}
inline ::google::protobuf::Timestamp* EpochInfo::mutable_current_epoch_start_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_current_epoch_start_time();
  // @@protoc_insertion_point(field_mutable:cosmos.epochs.v1beta1.EpochInfo.current_epoch_start_time)
  return _msg;
}
inline void EpochInfo::set_allocated_current_epoch_start_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_epoch_start_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.current_epoch_start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.epochs.v1beta1.EpochInfo.current_epoch_start_time)
}

// bool epoch_counting_started = 6 [json_name = "epochCountingStarted"];
inline void EpochInfo::clear_epoch_counting_started() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.epoch_counting_started_ = false;
}
inline bool EpochInfo::epoch_counting_started() const {
  // @@protoc_insertion_point(field_get:cosmos.epochs.v1beta1.EpochInfo.epoch_counting_started)
  return _internal_epoch_counting_started();
}
inline void EpochInfo::set_epoch_counting_started(bool value) {
  _internal_set_epoch_counting_started(value);
  // @@protoc_insertion_point(field_set:cosmos.epochs.v1beta1.EpochInfo.epoch_counting_started)
}
inline bool EpochInfo::_internal_epoch_counting_started() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.epoch_counting_started_;
}
inline void EpochInfo::_internal_set_epoch_counting_started(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.epoch_counting_started_ = value;
}

// int64 current_epoch_start_height = 8 [json_name = "currentEpochStartHeight"];
inline void EpochInfo::clear_current_epoch_start_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_epoch_start_height_ = ::int64_t{0};
}
inline ::int64_t EpochInfo::current_epoch_start_height() const {
  // @@protoc_insertion_point(field_get:cosmos.epochs.v1beta1.EpochInfo.current_epoch_start_height)
  return _internal_current_epoch_start_height();
}
inline void EpochInfo::set_current_epoch_start_height(::int64_t value) {
  _internal_set_current_epoch_start_height(value);
  // @@protoc_insertion_point(field_set:cosmos.epochs.v1beta1.EpochInfo.current_epoch_start_height)
}
inline ::int64_t EpochInfo::_internal_current_epoch_start_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_epoch_start_height_;
}
inline void EpochInfo::_internal_set_current_epoch_start_height(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_epoch_start_height_ = value;
}

// -------------------------------------------------------------------

// GenesisState

// repeated .cosmos.epochs.v1beta1.EpochInfo epochs = 1 [json_name = "epochs", (.gogoproto.nullable) = false];
inline int GenesisState::_internal_epochs_size() const {
  return _internal_epochs().size();
}
inline int GenesisState::epochs_size() const {
  return _internal_epochs_size();
}
inline void GenesisState::clear_epochs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.epochs_.Clear();
}
inline ::cosmos::epochs::v1beta1::EpochInfo* GenesisState::mutable_epochs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.epochs.v1beta1.GenesisState.epochs)
  return _internal_mutable_epochs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::epochs::v1beta1::EpochInfo>* GenesisState::mutable_epochs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.epochs.v1beta1.GenesisState.epochs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_epochs();
}
inline const ::cosmos::epochs::v1beta1::EpochInfo& GenesisState::epochs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.epochs.v1beta1.GenesisState.epochs)
  return _internal_epochs().Get(index);
}
inline ::cosmos::epochs::v1beta1::EpochInfo* GenesisState::add_epochs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::epochs::v1beta1::EpochInfo* _add = _internal_mutable_epochs()->Add();
  // @@protoc_insertion_point(field_add:cosmos.epochs.v1beta1.GenesisState.epochs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::epochs::v1beta1::EpochInfo>& GenesisState::epochs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.epochs.v1beta1.GenesisState.epochs)
  return _internal_epochs();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::epochs::v1beta1::EpochInfo>&
GenesisState::_internal_epochs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.epochs_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::epochs::v1beta1::EpochInfo>*
GenesisState::_internal_mutable_epochs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.epochs_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace epochs
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2fepochs_2fv1beta1_2fgenesis_2eproto_2epb_2eh
