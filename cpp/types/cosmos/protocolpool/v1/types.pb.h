// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/protocolpool/v1/types.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2fprotocolpool_2fv1_2ftypes_2eproto_2epb_2eh
#define cosmos_2fprotocolpool_2fv1_2ftypes_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fprotocolpool_2fv1_2ftypes_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fprotocolpool_2fv1_2ftypes_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2fprotocolpool_2fv1_2ftypes_2eproto;
namespace cosmos {
namespace protocolpool {
namespace v1 {
class ContinuousFund;
struct ContinuousFundDefaultTypeInternal;
extern ContinuousFundDefaultTypeInternal _ContinuousFund_default_instance_;
class Params;
struct ParamsDefaultTypeInternal;
extern ParamsDefaultTypeInternal _Params_default_instance_;
}  // namespace v1
}  // namespace protocolpool
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace protocolpool {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class Params final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.protocolpool.v1.Params) */ {
 public:
  inline Params() : Params(nullptr) {}
  ~Params() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Params* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Params));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Params(
      ::google::protobuf::internal::ConstantInitialized);

  inline Params(const Params& from) : Params(nullptr, from) {}
  inline Params(Params&& from) noexcept
      : Params(nullptr, std::move(from)) {}
  inline Params& operator=(const Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params& operator=(Params&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params* internal_default_instance() {
    return reinterpret_cast<const Params*>(
        &_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Params& a, Params& b) { a.Swap(&b); }
  inline void Swap(Params* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Params* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Params>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Params& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Params& from) { Params::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Params* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.protocolpool.v1.Params"; }

 protected:
  explicit Params(::google::protobuf::Arena* arena);
  Params(::google::protobuf::Arena* arena, const Params& from);
  Params(::google::protobuf::Arena* arena, Params&& from) noexcept
      : Params(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEnabledDistributionDenomsFieldNumber = 1,
    kDistributionFrequencyFieldNumber = 2,
  };
  // repeated string enabled_distribution_denoms = 1 [json_name = "enabledDistributionDenoms"];
  int enabled_distribution_denoms_size() const;
  private:
  int _internal_enabled_distribution_denoms_size() const;

  public:
  void clear_enabled_distribution_denoms() ;
  const std::string& enabled_distribution_denoms(int index) const;
  std::string* mutable_enabled_distribution_denoms(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_enabled_distribution_denoms(int index, Arg_&& value, Args_... args);
  std::string* add_enabled_distribution_denoms();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_enabled_distribution_denoms(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& enabled_distribution_denoms() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_enabled_distribution_denoms();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_enabled_distribution_denoms() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_enabled_distribution_denoms();

  public:
  // uint64 distribution_frequency = 2 [json_name = "distributionFrequency"];
  void clear_distribution_frequency() ;
  ::uint64_t distribution_frequency() const;
  void set_distribution_frequency(::uint64_t value);

  private:
  ::uint64_t _internal_distribution_frequency() const;
  void _internal_set_distribution_frequency(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.protocolpool.v1.Params)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      65, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Params& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> enabled_distribution_denoms_;
    ::uint64_t distribution_frequency_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fprotocolpool_2fv1_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ContinuousFund final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.protocolpool.v1.ContinuousFund) */ {
 public:
  inline ContinuousFund() : ContinuousFund(nullptr) {}
  ~ContinuousFund() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ContinuousFund* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ContinuousFund));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ContinuousFund(
      ::google::protobuf::internal::ConstantInitialized);

  inline ContinuousFund(const ContinuousFund& from) : ContinuousFund(nullptr, from) {}
  inline ContinuousFund(ContinuousFund&& from) noexcept
      : ContinuousFund(nullptr, std::move(from)) {}
  inline ContinuousFund& operator=(const ContinuousFund& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContinuousFund& operator=(ContinuousFund&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContinuousFund& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContinuousFund* internal_default_instance() {
    return reinterpret_cast<const ContinuousFund*>(
        &_ContinuousFund_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ContinuousFund& a, ContinuousFund& b) { a.Swap(&b); }
  inline void Swap(ContinuousFund* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContinuousFund* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContinuousFund* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ContinuousFund>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ContinuousFund& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ContinuousFund& from) { ContinuousFund::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ContinuousFund* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.protocolpool.v1.ContinuousFund"; }

 protected:
  explicit ContinuousFund(::google::protobuf::Arena* arena);
  ContinuousFund(::google::protobuf::Arena* arena, const ContinuousFund& from);
  ContinuousFund(::google::protobuf::Arena* arena, ContinuousFund&& from) noexcept
      : ContinuousFund(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRecipientFieldNumber = 1,
    kPercentageFieldNumber = 2,
    kExpiryFieldNumber = 3,
  };
  // string recipient = 1 [json_name = "recipient", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_recipient() ;
  const std::string& recipient() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recipient(Arg_&& arg, Args_... args);
  std::string* mutable_recipient();
  PROTOBUF_NODISCARD std::string* release_recipient();
  void set_allocated_recipient(std::string* value);

  private:
  const std::string& _internal_recipient() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recipient(
      const std::string& value);
  std::string* _internal_mutable_recipient();

  public:
  // string percentage = 2 [json_name = "percentage", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  void clear_percentage() ;
  const std::string& percentage() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_percentage(Arg_&& arg, Args_... args);
  std::string* mutable_percentage();
  PROTOBUF_NODISCARD std::string* release_percentage();
  void set_allocated_percentage(std::string* value);

  private:
  const std::string& _internal_percentage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_percentage(
      const std::string& value);
  std::string* _internal_mutable_percentage();

  public:
  // .google.protobuf.Timestamp expiry = 3 [json_name = "expiry", (.gogoproto.stdtime) = true];
  bool has_expiry() const;
  void clear_expiry() ;
  const ::google::protobuf::Timestamp& expiry() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_expiry();
  ::google::protobuf::Timestamp* mutable_expiry();
  void set_allocated_expiry(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_expiry(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_expiry();

  private:
  const ::google::protobuf::Timestamp& _internal_expiry() const;
  ::google::protobuf::Timestamp* _internal_mutable_expiry();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.protocolpool.v1.ContinuousFund)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      65, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ContinuousFund& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr recipient_;
    ::google::protobuf::internal::ArenaStringPtr percentage_;
    ::google::protobuf::Timestamp* expiry_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fprotocolpool_2fv1_2ftypes_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ContinuousFund

// string recipient = 1 [json_name = "recipient", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void ContinuousFund::clear_recipient() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_.ClearToEmpty();
}
inline const std::string& ContinuousFund::recipient() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.protocolpool.v1.ContinuousFund.recipient)
  return _internal_recipient();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ContinuousFund::set_recipient(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.protocolpool.v1.ContinuousFund.recipient)
}
inline std::string* ContinuousFund::mutable_recipient() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_recipient();
  // @@protoc_insertion_point(field_mutable:cosmos.protocolpool.v1.ContinuousFund.recipient)
  return _s;
}
inline const std::string& ContinuousFund::_internal_recipient() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recipient_.Get();
}
inline void ContinuousFund::_internal_set_recipient(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_.Set(value, GetArena());
}
inline std::string* ContinuousFund::_internal_mutable_recipient() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.recipient_.Mutable( GetArena());
}
inline std::string* ContinuousFund::release_recipient() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.protocolpool.v1.ContinuousFund.recipient)
  return _impl_.recipient_.Release();
}
inline void ContinuousFund::set_allocated_recipient(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.recipient_.IsDefault()) {
    _impl_.recipient_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.protocolpool.v1.ContinuousFund.recipient)
}

// string percentage = 2 [json_name = "percentage", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec"];
inline void ContinuousFund::clear_percentage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.percentage_.ClearToEmpty();
}
inline const std::string& ContinuousFund::percentage() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.protocolpool.v1.ContinuousFund.percentage)
  return _internal_percentage();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ContinuousFund::set_percentage(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.percentage_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.protocolpool.v1.ContinuousFund.percentage)
}
inline std::string* ContinuousFund::mutable_percentage() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_percentage();
  // @@protoc_insertion_point(field_mutable:cosmos.protocolpool.v1.ContinuousFund.percentage)
  return _s;
}
inline const std::string& ContinuousFund::_internal_percentage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.percentage_.Get();
}
inline void ContinuousFund::_internal_set_percentage(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.percentage_.Set(value, GetArena());
}
inline std::string* ContinuousFund::_internal_mutable_percentage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.percentage_.Mutable( GetArena());
}
inline std::string* ContinuousFund::release_percentage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.protocolpool.v1.ContinuousFund.percentage)
  return _impl_.percentage_.Release();
}
inline void ContinuousFund::set_allocated_percentage(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.percentage_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.percentage_.IsDefault()) {
    _impl_.percentage_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.protocolpool.v1.ContinuousFund.percentage)
}

// .google.protobuf.Timestamp expiry = 3 [json_name = "expiry", (.gogoproto.stdtime) = true];
inline bool ContinuousFund::has_expiry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.expiry_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& ContinuousFund::_internal_expiry() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.expiry_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& ContinuousFund::expiry() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.protocolpool.v1.ContinuousFund.expiry)
  return _internal_expiry();
}
inline void ContinuousFund::unsafe_arena_set_allocated_expiry(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expiry_);
  }
  _impl_.expiry_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.protocolpool.v1.ContinuousFund.expiry)
}
inline ::google::protobuf::Timestamp* ContinuousFund::release_expiry() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.expiry_;
  _impl_.expiry_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* ContinuousFund::unsafe_arena_release_expiry() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.protocolpool.v1.ContinuousFund.expiry)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.expiry_;
  _impl_.expiry_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ContinuousFund::_internal_mutable_expiry() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.expiry_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.expiry_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.expiry_;
}
inline ::google::protobuf::Timestamp* ContinuousFund::mutable_expiry() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_expiry();
  // @@protoc_insertion_point(field_mutable:cosmos.protocolpool.v1.ContinuousFund.expiry)
  return _msg;
}
inline void ContinuousFund::set_allocated_expiry(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expiry_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.expiry_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.protocolpool.v1.ContinuousFund.expiry)
}

// -------------------------------------------------------------------

// Params

// repeated string enabled_distribution_denoms = 1 [json_name = "enabledDistributionDenoms"];
inline int Params::_internal_enabled_distribution_denoms_size() const {
  return _internal_enabled_distribution_denoms().size();
}
inline int Params::enabled_distribution_denoms_size() const {
  return _internal_enabled_distribution_denoms_size();
}
inline void Params::clear_enabled_distribution_denoms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enabled_distribution_denoms_.Clear();
}
inline std::string* Params::add_enabled_distribution_denoms() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_enabled_distribution_denoms()->Add();
  // @@protoc_insertion_point(field_add_mutable:cosmos.protocolpool.v1.Params.enabled_distribution_denoms)
  return _s;
}
inline const std::string& Params::enabled_distribution_denoms(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.protocolpool.v1.Params.enabled_distribution_denoms)
  return _internal_enabled_distribution_denoms().Get(index);
}
inline std::string* Params::mutable_enabled_distribution_denoms(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.protocolpool.v1.Params.enabled_distribution_denoms)
  return _internal_mutable_enabled_distribution_denoms()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void Params::set_enabled_distribution_denoms(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_enabled_distribution_denoms()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:cosmos.protocolpool.v1.Params.enabled_distribution_denoms)
}
template <typename Arg_, typename... Args_>
inline void Params::add_enabled_distribution_denoms(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_enabled_distribution_denoms(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:cosmos.protocolpool.v1.Params.enabled_distribution_denoms)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Params::enabled_distribution_denoms() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.protocolpool.v1.Params.enabled_distribution_denoms)
  return _internal_enabled_distribution_denoms();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Params::mutable_enabled_distribution_denoms() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.protocolpool.v1.Params.enabled_distribution_denoms)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_enabled_distribution_denoms();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Params::_internal_enabled_distribution_denoms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enabled_distribution_denoms_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Params::_internal_mutable_enabled_distribution_denoms() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.enabled_distribution_denoms_;
}

// uint64 distribution_frequency = 2 [json_name = "distributionFrequency"];
inline void Params::clear_distribution_frequency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distribution_frequency_ = ::uint64_t{0u};
}
inline ::uint64_t Params::distribution_frequency() const {
  // @@protoc_insertion_point(field_get:cosmos.protocolpool.v1.Params.distribution_frequency)
  return _internal_distribution_frequency();
}
inline void Params::set_distribution_frequency(::uint64_t value) {
  _internal_set_distribution_frequency(value);
  // @@protoc_insertion_point(field_set:cosmos.protocolpool.v1.Params.distribution_frequency)
}
inline ::uint64_t Params::_internal_distribution_frequency() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.distribution_frequency_;
}
inline void Params::_internal_set_distribution_frequency(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distribution_frequency_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace protocolpool
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2fprotocolpool_2fv1_2ftypes_2eproto_2epb_2eh
