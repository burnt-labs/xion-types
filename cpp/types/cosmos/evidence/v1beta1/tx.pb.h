// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/evidence/v1beta1/tx.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2fevidence_2fv1beta1_2ftx_2eproto_2epb_2eh
#define cosmos_2fevidence_2fv1beta1_2ftx_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/any.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "cosmos/msg/v1/msg.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fevidence_2fv1beta1_2ftx_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fevidence_2fv1beta1_2ftx_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2fevidence_2fv1beta1_2ftx_2eproto;
namespace cosmos {
namespace evidence {
namespace v1beta1 {
class MsgSubmitEvidence;
struct MsgSubmitEvidenceDefaultTypeInternal;
extern MsgSubmitEvidenceDefaultTypeInternal _MsgSubmitEvidence_default_instance_;
class MsgSubmitEvidenceResponse;
struct MsgSubmitEvidenceResponseDefaultTypeInternal;
extern MsgSubmitEvidenceResponseDefaultTypeInternal _MsgSubmitEvidenceResponse_default_instance_;
}  // namespace v1beta1
}  // namespace evidence
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace evidence {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class MsgSubmitEvidenceResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse) */ {
 public:
  inline MsgSubmitEvidenceResponse() : MsgSubmitEvidenceResponse(nullptr) {}
  ~MsgSubmitEvidenceResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgSubmitEvidenceResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgSubmitEvidenceResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgSubmitEvidenceResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgSubmitEvidenceResponse(const MsgSubmitEvidenceResponse& from) : MsgSubmitEvidenceResponse(nullptr, from) {}
  inline MsgSubmitEvidenceResponse(MsgSubmitEvidenceResponse&& from) noexcept
      : MsgSubmitEvidenceResponse(nullptr, std::move(from)) {}
  inline MsgSubmitEvidenceResponse& operator=(const MsgSubmitEvidenceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSubmitEvidenceResponse& operator=(MsgSubmitEvidenceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgSubmitEvidenceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSubmitEvidenceResponse* internal_default_instance() {
    return reinterpret_cast<const MsgSubmitEvidenceResponse*>(
        &_MsgSubmitEvidenceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(MsgSubmitEvidenceResponse& a, MsgSubmitEvidenceResponse& b) { a.Swap(&b); }
  inline void Swap(MsgSubmitEvidenceResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSubmitEvidenceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgSubmitEvidenceResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgSubmitEvidenceResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgSubmitEvidenceResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgSubmitEvidenceResponse& from) { MsgSubmitEvidenceResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgSubmitEvidenceResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse"; }

 protected:
  explicit MsgSubmitEvidenceResponse(::google::protobuf::Arena* arena);
  MsgSubmitEvidenceResponse(::google::protobuf::Arena* arena, const MsgSubmitEvidenceResponse& from);
  MsgSubmitEvidenceResponse(::google::protobuf::Arena* arena, MsgSubmitEvidenceResponse&& from) noexcept
      : MsgSubmitEvidenceResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHashFieldNumber = 4,
  };
  // bytes hash = 4 [json_name = "hash"];
  void clear_hash() ;
  const std::string& hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hash(Arg_&& arg, Args_... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* value);

  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(
      const std::string& value);
  std::string* _internal_mutable_hash();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgSubmitEvidenceResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr hash_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fevidence_2fv1beta1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgSubmitEvidence final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.evidence.v1beta1.MsgSubmitEvidence) */ {
 public:
  inline MsgSubmitEvidence() : MsgSubmitEvidence(nullptr) {}
  ~MsgSubmitEvidence() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgSubmitEvidence* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgSubmitEvidence));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgSubmitEvidence(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgSubmitEvidence(const MsgSubmitEvidence& from) : MsgSubmitEvidence(nullptr, from) {}
  inline MsgSubmitEvidence(MsgSubmitEvidence&& from) noexcept
      : MsgSubmitEvidence(nullptr, std::move(from)) {}
  inline MsgSubmitEvidence& operator=(const MsgSubmitEvidence& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSubmitEvidence& operator=(MsgSubmitEvidence&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgSubmitEvidence& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSubmitEvidence* internal_default_instance() {
    return reinterpret_cast<const MsgSubmitEvidence*>(
        &_MsgSubmitEvidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MsgSubmitEvidence& a, MsgSubmitEvidence& b) { a.Swap(&b); }
  inline void Swap(MsgSubmitEvidence* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSubmitEvidence* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgSubmitEvidence* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgSubmitEvidence>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgSubmitEvidence& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgSubmitEvidence& from) { MsgSubmitEvidence::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgSubmitEvidence* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.evidence.v1beta1.MsgSubmitEvidence"; }

 protected:
  explicit MsgSubmitEvidence(::google::protobuf::Arena* arena);
  MsgSubmitEvidence(::google::protobuf::Arena* arena, const MsgSubmitEvidence& from);
  MsgSubmitEvidence(::google::protobuf::Arena* arena, MsgSubmitEvidence&& from) noexcept
      : MsgSubmitEvidence(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSubmitterFieldNumber = 1,
    kEvidenceFieldNumber = 2,
  };
  // string submitter = 1 [json_name = "submitter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_submitter() ;
  const std::string& submitter() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_submitter(Arg_&& arg, Args_... args);
  std::string* mutable_submitter();
  PROTOBUF_NODISCARD std::string* release_submitter();
  void set_allocated_submitter(std::string* value);

  private:
  const std::string& _internal_submitter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_submitter(
      const std::string& value);
  std::string* _internal_mutable_submitter();

  public:
  // .google.protobuf.Any evidence = 2 [json_name = "evidence", (.cosmos_proto.accepts_interface) = "cosmos.evidence.v1beta1.Evidence"];
  bool has_evidence() const;
  void clear_evidence() ;
  const ::google::protobuf::Any& evidence() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_evidence();
  ::google::protobuf::Any* mutable_evidence();
  void set_allocated_evidence(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_evidence(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_evidence();

  private:
  const ::google::protobuf::Any& _internal_evidence() const;
  ::google::protobuf::Any* _internal_mutable_evidence();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.evidence.v1beta1.MsgSubmitEvidence)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      59, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgSubmitEvidence& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr submitter_;
    ::google::protobuf::Any* evidence_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fevidence_2fv1beta1_2ftx_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MsgSubmitEvidence

// string submitter = 1 [json_name = "submitter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgSubmitEvidence::clear_submitter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.submitter_.ClearToEmpty();
}
inline const std::string& MsgSubmitEvidence::submitter() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.evidence.v1beta1.MsgSubmitEvidence.submitter)
  return _internal_submitter();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgSubmitEvidence::set_submitter(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.submitter_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.evidence.v1beta1.MsgSubmitEvidence.submitter)
}
inline std::string* MsgSubmitEvidence::mutable_submitter() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_submitter();
  // @@protoc_insertion_point(field_mutable:cosmos.evidence.v1beta1.MsgSubmitEvidence.submitter)
  return _s;
}
inline const std::string& MsgSubmitEvidence::_internal_submitter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.submitter_.Get();
}
inline void MsgSubmitEvidence::_internal_set_submitter(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.submitter_.Set(value, GetArena());
}
inline std::string* MsgSubmitEvidence::_internal_mutable_submitter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.submitter_.Mutable( GetArena());
}
inline std::string* MsgSubmitEvidence::release_submitter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.evidence.v1beta1.MsgSubmitEvidence.submitter)
  return _impl_.submitter_.Release();
}
inline void MsgSubmitEvidence::set_allocated_submitter(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.submitter_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.submitter_.IsDefault()) {
    _impl_.submitter_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.evidence.v1beta1.MsgSubmitEvidence.submitter)
}

// .google.protobuf.Any evidence = 2 [json_name = "evidence", (.cosmos_proto.accepts_interface) = "cosmos.evidence.v1beta1.Evidence"];
inline bool MsgSubmitEvidence::has_evidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.evidence_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& MsgSubmitEvidence::_internal_evidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Any* p = _impl_.evidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& MsgSubmitEvidence::evidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.evidence.v1beta1.MsgSubmitEvidence.evidence)
  return _internal_evidence();
}
inline void MsgSubmitEvidence::unsafe_arena_set_allocated_evidence(::google::protobuf::Any* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.evidence_);
  }
  _impl_.evidence_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.evidence.v1beta1.MsgSubmitEvidence.evidence)
}
inline ::google::protobuf::Any* MsgSubmitEvidence::release_evidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* released = _impl_.evidence_;
  _impl_.evidence_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Any* MsgSubmitEvidence::unsafe_arena_release_evidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.evidence.v1beta1.MsgSubmitEvidence.evidence)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* temp = _impl_.evidence_;
  _impl_.evidence_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* MsgSubmitEvidence::_internal_mutable_evidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.evidence_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Any>(GetArena());
    _impl_.evidence_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.evidence_;
}
inline ::google::protobuf::Any* MsgSubmitEvidence::mutable_evidence() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Any* _msg = _internal_mutable_evidence();
  // @@protoc_insertion_point(field_mutable:cosmos.evidence.v1beta1.MsgSubmitEvidence.evidence)
  return _msg;
}
inline void MsgSubmitEvidence::set_allocated_evidence(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.evidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.evidence_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.evidence.v1beta1.MsgSubmitEvidence.evidence)
}

// -------------------------------------------------------------------

// MsgSubmitEvidenceResponse

// bytes hash = 4 [json_name = "hash"];
inline void MsgSubmitEvidenceResponse::clear_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& MsgSubmitEvidenceResponse::hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse.hash)
  return _internal_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgSubmitEvidenceResponse::set_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse.hash)
}
inline std::string* MsgSubmitEvidenceResponse::mutable_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse.hash)
  return _s;
}
inline const std::string& MsgSubmitEvidenceResponse::_internal_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hash_.Get();
}
inline void MsgSubmitEvidenceResponse::_internal_set_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.Set(value, GetArena());
}
inline std::string* MsgSubmitEvidenceResponse::_internal_mutable_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hash_.Mutable( GetArena());
}
inline std::string* MsgSubmitEvidenceResponse::release_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse.hash)
  return _impl_.hash_.Release();
}
inline void MsgSubmitEvidenceResponse::set_allocated_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse.hash)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace evidence
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2fevidence_2fv1beta1_2ftx_2eproto_2epb_2eh
