// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/evidence/v1beta1/evidence.proto
// Protobuf C++ Version: 5.29.4

#include "cosmos/evidence/v1beta1/evidence.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace cosmos {
namespace evidence {
namespace v1beta1 {

inline constexpr Equivocation::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        consensus_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        time_{nullptr},
        height_{::int64_t{0}},
        power_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR Equivocation::Equivocation(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EquivocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EquivocationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EquivocationDefaultTypeInternal() {}
  union {
    Equivocation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EquivocationDefaultTypeInternal _Equivocation_default_instance_;
}  // namespace v1beta1
}  // namespace evidence
}  // namespace cosmos
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fevidence_2fv1beta1_2fevidence_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fevidence_2fv1beta1_2fevidence_2eproto = nullptr;
const ::uint32_t
    TableStruct_cosmos_2fevidence_2fv1beta1_2fevidence_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::Equivocation, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::Equivocation, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::Equivocation, _impl_.height_),
        PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::Equivocation, _impl_.time_),
        PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::Equivocation, _impl_.power_),
        PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::Equivocation, _impl_.consensus_address_),
        ~0u,
        0,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 12, -1, sizeof(::cosmos::evidence::v1beta1::Equivocation)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::evidence::v1beta1::_Equivocation_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fevidence_2fv1beta1_2fevidence_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n&cosmos/evidence/v1beta1/evidence.proto"
    "\022\027cosmos.evidence.v1beta1\032\021amino/amino.p"
    "roto\032\024gogoproto/gogo.proto\032\037google/proto"
    "buf/timestamp.proto\032\031cosmos_proto/cosmos"
    ".proto\"\350\001\n\014Equivocation\022\026\n\006height\030\001 \001(\003R"
    "\006height\022=\n\004time\030\002 \001(\0132\032.google.protobuf."
    "TimestampB\r\310\336\037\000\220\337\037\001\250\347\260*\001R\004time\022\024\n\005power\030"
    "\003 \001(\003R\005power\022E\n\021consensus_address\030\004 \001(\tB"
    "\030\322\264-\024cosmos.AddressStringR\020consensusAddr"
    "ess:$\210\240\037\000\350\240\037\000\212\347\260*\027cosmos-sdk/Equivocatio"
    "nB#Z\035cosmossdk.io/x/evidence/types\250\342\036\001b\006"
    "proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fevidence_2fv1beta1_2fevidence_2eproto_deps[4] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fevidence_2fv1beta1_2fevidence_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_cosmos_2fevidence_2fv1beta1_2fevidence_2eproto = {
    false,
    false,
    446,
    descriptor_table_protodef_cosmos_2fevidence_2fv1beta1_2fevidence_2eproto,
    "cosmos/evidence/v1beta1/evidence.proto",
    &descriptor_table_cosmos_2fevidence_2fv1beta1_2fevidence_2eproto_once,
    descriptor_table_cosmos_2fevidence_2fv1beta1_2fevidence_2eproto_deps,
    4,
    1,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fevidence_2fv1beta1_2fevidence_2eproto::offsets,
    file_level_enum_descriptors_cosmos_2fevidence_2fv1beta1_2fevidence_2eproto,
    file_level_service_descriptors_cosmos_2fevidence_2fv1beta1_2fevidence_2eproto,
};
namespace cosmos {
namespace evidence {
namespace v1beta1 {
// ===================================================================

class Equivocation::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Equivocation>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Equivocation, _impl_._has_bits_);
};

void Equivocation::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Equivocation::Equivocation(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.evidence.v1beta1.Equivocation)
}
inline PROTOBUF_NDEBUG_INLINE Equivocation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::evidence::v1beta1::Equivocation& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        consensus_address_(arena, from.consensus_address_) {}

Equivocation::Equivocation(
    ::google::protobuf::Arena* arena,
    const Equivocation& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Equivocation* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.time_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.time_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, height_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, height_),
           offsetof(Impl_, power_) -
               offsetof(Impl_, height_) +
               sizeof(Impl_::power_));

  // @@protoc_insertion_point(copy_constructor:cosmos.evidence.v1beta1.Equivocation)
}
inline PROTOBUF_NDEBUG_INLINE Equivocation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        consensus_address_(arena) {}

inline void Equivocation::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, time_),
           0,
           offsetof(Impl_, power_) -
               offsetof(Impl_, time_) +
               sizeof(Impl_::power_));
}
Equivocation::~Equivocation() {
  // @@protoc_insertion_point(destructor:cosmos.evidence.v1beta1.Equivocation)
  SharedDtor(*this);
}
inline void Equivocation::SharedDtor(MessageLite& self) {
  Equivocation& this_ = static_cast<Equivocation&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.consensus_address_.Destroy();
  delete this_._impl_.time_;
  this_._impl_.~Impl_();
}

inline void* Equivocation::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Equivocation(arena);
}
constexpr auto Equivocation::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Equivocation),
                                            alignof(Equivocation));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Equivocation::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Equivocation_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Equivocation::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Equivocation>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Equivocation::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Equivocation>(), &Equivocation::ByteSizeLong,
            &Equivocation::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Equivocation, _impl_._cached_size_),
        false,
    },
    &Equivocation::kDescriptorMethods,
    &descriptor_table_cosmos_2fevidence_2fv1beta1_2fevidence_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Equivocation::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 62, 2> Equivocation::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Equivocation, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::evidence::v1beta1::Equivocation>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string consensus_address = 4 [json_name = "consensusAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Equivocation, _impl_.consensus_address_)}},
    // int64 height = 1 [json_name = "height"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Equivocation, _impl_.height_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Equivocation, _impl_.height_)}},
    // .google.protobuf.Timestamp time = 2 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Equivocation, _impl_.time_)}},
    // int64 power = 3 [json_name = "power"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Equivocation, _impl_.power_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Equivocation, _impl_.power_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 height = 1 [json_name = "height"];
    {PROTOBUF_FIELD_OFFSET(Equivocation, _impl_.height_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .google.protobuf.Timestamp time = 2 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
    {PROTOBUF_FIELD_OFFSET(Equivocation, _impl_.time_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 power = 3 [json_name = "power"];
    {PROTOBUF_FIELD_OFFSET(Equivocation, _impl_.power_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string consensus_address = 4 [json_name = "consensusAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
    {PROTOBUF_FIELD_OFFSET(Equivocation, _impl_.consensus_address_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\44\0\0\0\21\0\0\0"
    "cosmos.evidence.v1beta1.Equivocation"
    "consensus_address"
  }},
};

PROTOBUF_NOINLINE void Equivocation::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.evidence.v1beta1.Equivocation)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.consensus_address_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.time_ != nullptr);
    _impl_.time_->Clear();
  }
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.power_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.power_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Equivocation::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Equivocation& this_ = static_cast<const Equivocation&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Equivocation::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Equivocation& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.evidence.v1beta1.Equivocation)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int64 height = 1 [json_name = "height"];
          if (this_._internal_height() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<1>(
                    stream, this_._internal_height(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp time = 2 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.time_, this_._impl_.time_->GetCachedSize(), target,
                stream);
          }

          // int64 power = 3 [json_name = "power"];
          if (this_._internal_power() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<3>(
                    stream, this_._internal_power(), target);
          }

          // string consensus_address = 4 [json_name = "consensusAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
          if (!this_._internal_consensus_address().empty()) {
            const std::string& _s = this_._internal_consensus_address();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.evidence.v1beta1.Equivocation.consensus_address");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.evidence.v1beta1.Equivocation)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Equivocation::ByteSizeLong(const MessageLite& base) {
          const Equivocation& this_ = static_cast<const Equivocation&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Equivocation::ByteSizeLong() const {
          const Equivocation& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.evidence.v1beta1.Equivocation)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string consensus_address = 4 [json_name = "consensusAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
            if (!this_._internal_consensus_address().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_consensus_address());
            }
          }
           {
            // .google.protobuf.Timestamp time = 2 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.time_);
            }
          }
           {
            // int64 height = 1 [json_name = "height"];
            if (this_._internal_height() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_height());
            }
            // int64 power = 3 [json_name = "power"];
            if (this_._internal_power() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_power());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Equivocation::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Equivocation*>(&to_msg);
  auto& from = static_cast<const Equivocation&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.evidence.v1beta1.Equivocation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_consensus_address().empty()) {
    _this->_internal_set_consensus_address(from._internal_consensus_address());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.time_ != nullptr);
    if (_this->_impl_.time_ == nullptr) {
      _this->_impl_.time_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.time_);
    } else {
      _this->_impl_.time_->MergeFrom(*from._impl_.time_);
    }
  }
  if (from._internal_height() != 0) {
    _this->_impl_.height_ = from._impl_.height_;
  }
  if (from._internal_power() != 0) {
    _this->_impl_.power_ = from._impl_.power_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Equivocation::CopyFrom(const Equivocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.evidence.v1beta1.Equivocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Equivocation::InternalSwap(Equivocation* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.consensus_address_, &other->_impl_.consensus_address_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Equivocation, _impl_.power_)
      + sizeof(Equivocation::_impl_.power_)
      - PROTOBUF_FIELD_OFFSET(Equivocation, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::google::protobuf::Metadata Equivocation::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace evidence
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_cosmos_2fevidence_2fv1beta1_2fevidence_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
