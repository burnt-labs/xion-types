// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/evidence/v1beta1/query.proto
// Protobuf C++ Version: 5.29.4

#include "cosmos/evidence/v1beta1/query.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace cosmos {
namespace evidence {
namespace v1beta1 {

inline constexpr QueryEvidenceRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : evidence_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR QueryEvidenceRequest::QueryEvidenceRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct QueryEvidenceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryEvidenceRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryEvidenceRequestDefaultTypeInternal() {}
  union {
    QueryEvidenceRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryEvidenceRequestDefaultTypeInternal _QueryEvidenceRequest_default_instance_;

inline constexpr QueryEvidenceResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        evidence_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR QueryEvidenceResponse::QueryEvidenceResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct QueryEvidenceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryEvidenceResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryEvidenceResponseDefaultTypeInternal() {}
  union {
    QueryEvidenceResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryEvidenceResponseDefaultTypeInternal _QueryEvidenceResponse_default_instance_;

inline constexpr QueryAllEvidenceResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        evidence_{},
        pagination_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR QueryAllEvidenceResponse::QueryAllEvidenceResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct QueryAllEvidenceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryAllEvidenceResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryAllEvidenceResponseDefaultTypeInternal() {}
  union {
    QueryAllEvidenceResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryAllEvidenceResponseDefaultTypeInternal _QueryAllEvidenceResponse_default_instance_;

inline constexpr QueryAllEvidenceRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        pagination_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR QueryAllEvidenceRequest::QueryAllEvidenceRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct QueryAllEvidenceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryAllEvidenceRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryAllEvidenceRequestDefaultTypeInternal() {}
  union {
    QueryAllEvidenceRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryAllEvidenceRequestDefaultTypeInternal _QueryAllEvidenceRequest_default_instance_;
}  // namespace v1beta1
}  // namespace evidence
}  // namespace cosmos
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fevidence_2fv1beta1_2fquery_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fevidence_2fv1beta1_2fquery_2eproto = nullptr;
const ::uint32_t
    TableStruct_cosmos_2fevidence_2fv1beta1_2fquery_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::QueryEvidenceRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::QueryEvidenceRequest, _impl_.evidence_hash_),
        PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::QueryEvidenceRequest, _impl_.hash_),
        PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::QueryEvidenceResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::QueryEvidenceResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::QueryEvidenceResponse, _impl_.evidence_),
        0,
        PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::QueryAllEvidenceRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::QueryAllEvidenceRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::QueryAllEvidenceRequest, _impl_.pagination_),
        0,
        PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::QueryAllEvidenceResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::QueryAllEvidenceResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::QueryAllEvidenceResponse, _impl_.evidence_),
        PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::QueryAllEvidenceResponse, _impl_.pagination_),
        ~0u,
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::cosmos::evidence::v1beta1::QueryEvidenceRequest)},
        {10, 19, -1, sizeof(::cosmos::evidence::v1beta1::QueryEvidenceResponse)},
        {20, 29, -1, sizeof(::cosmos::evidence::v1beta1::QueryAllEvidenceRequest)},
        {30, 40, -1, sizeof(::cosmos::evidence::v1beta1::QueryAllEvidenceResponse)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::evidence::v1beta1::_QueryEvidenceRequest_default_instance_._instance,
    &::cosmos::evidence::v1beta1::_QueryEvidenceResponse_default_instance_._instance,
    &::cosmos::evidence::v1beta1::_QueryAllEvidenceRequest_default_instance_._instance,
    &::cosmos::evidence::v1beta1::_QueryAllEvidenceResponse_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fevidence_2fv1beta1_2fquery_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n#cosmos/evidence/v1beta1/query.proto\022\027c"
    "osmos.evidence.v1beta1\032*cosmos/base/quer"
    "y/v1beta1/pagination.proto\032\031google/proto"
    "buf/any.proto\032\034google/api/annotations.pr"
    "oto\032\031cosmos_proto/cosmos.proto\"h\n\024QueryE"
    "videnceRequest\022\'\n\revidence_hash\030\001 \001(\014B\002\030"
    "\001R\014evidenceHash\022\'\n\004hash\030\002 \001(\tB\023\332\264-\017cosmo"
    "s-sdk 0.47R\004hash\"I\n\025QueryEvidenceRespons"
    "e\0220\n\010evidence\030\001 \001(\0132\024.google.protobuf.An"
    "yR\010evidence\"a\n\027QueryAllEvidenceRequest\022F"
    "\n\npagination\030\001 \001(\0132&.cosmos.base.query.v"
    "1beta1.PageRequestR\npagination\"\225\001\n\030Query"
    "AllEvidenceResponse\0220\n\010evidence\030\001 \003(\0132\024."
    "google.protobuf.AnyR\010evidence\022G\n\npaginat"
    "ion\030\002 \001(\0132\'.cosmos.base.query.v1beta1.Pa"
    "geResponseR\npagination2\305\002\n\005Query\022\233\001\n\010Evi"
    "dence\022-.cosmos.evidence.v1beta1.QueryEvi"
    "denceRequest\032..cosmos.evidence.v1beta1.Q"
    "ueryEvidenceResponse\"0\202\323\344\223\002*\022(/cosmos/ev"
    "idence/v1beta1/evidence/{hash}\022\235\001\n\013AllEv"
    "idence\0220.cosmos.evidence.v1beta1.QueryAl"
    "lEvidenceRequest\0321.cosmos.evidence.v1bet"
    "a1.QueryAllEvidenceResponse\")\202\323\344\223\002#\022!/co"
    "smos/evidence/v1beta1/evidenceB\037Z\035cosmos"
    "sdk.io/x/evidence/typesb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fevidence_2fv1beta1_2fquery_2eproto_deps[4] =
    {
        &::descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_google_2fapi_2fannotations_2eproto,
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fevidence_2fv1beta1_2fquery_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_cosmos_2fevidence_2fv1beta1_2fquery_2eproto = {
    false,
    false,
    991,
    descriptor_table_protodef_cosmos_2fevidence_2fv1beta1_2fquery_2eproto,
    "cosmos/evidence/v1beta1/query.proto",
    &descriptor_table_cosmos_2fevidence_2fv1beta1_2fquery_2eproto_once,
    descriptor_table_cosmos_2fevidence_2fv1beta1_2fquery_2eproto_deps,
    4,
    4,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fevidence_2fv1beta1_2fquery_2eproto::offsets,
    file_level_enum_descriptors_cosmos_2fevidence_2fv1beta1_2fquery_2eproto,
    file_level_service_descriptors_cosmos_2fevidence_2fv1beta1_2fquery_2eproto,
};
namespace cosmos {
namespace evidence {
namespace v1beta1 {
// ===================================================================

class QueryEvidenceRequest::_Internal {
 public:
};

QueryEvidenceRequest::QueryEvidenceRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.evidence.v1beta1.QueryEvidenceRequest)
}
inline PROTOBUF_NDEBUG_INLINE QueryEvidenceRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::evidence::v1beta1::QueryEvidenceRequest& from_msg)
      : evidence_hash_(arena, from.evidence_hash_),
        hash_(arena, from.hash_),
        _cached_size_{0} {}

QueryEvidenceRequest::QueryEvidenceRequest(
    ::google::protobuf::Arena* arena,
    const QueryEvidenceRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  QueryEvidenceRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:cosmos.evidence.v1beta1.QueryEvidenceRequest)
}
inline PROTOBUF_NDEBUG_INLINE QueryEvidenceRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : evidence_hash_(arena),
        hash_(arena),
        _cached_size_{0} {}

inline void QueryEvidenceRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
QueryEvidenceRequest::~QueryEvidenceRequest() {
  // @@protoc_insertion_point(destructor:cosmos.evidence.v1beta1.QueryEvidenceRequest)
  SharedDtor(*this);
}
inline void QueryEvidenceRequest::SharedDtor(MessageLite& self) {
  QueryEvidenceRequest& this_ = static_cast<QueryEvidenceRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.evidence_hash_.Destroy();
  this_._impl_.hash_.Destroy();
  this_._impl_.~Impl_();
}

inline void* QueryEvidenceRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) QueryEvidenceRequest(arena);
}
constexpr auto QueryEvidenceRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(QueryEvidenceRequest),
                                            alignof(QueryEvidenceRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull QueryEvidenceRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_QueryEvidenceRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &QueryEvidenceRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<QueryEvidenceRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &QueryEvidenceRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<QueryEvidenceRequest>(), &QueryEvidenceRequest::ByteSizeLong,
            &QueryEvidenceRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(QueryEvidenceRequest, _impl_._cached_size_),
        false,
    },
    &QueryEvidenceRequest::kDescriptorMethods,
    &descriptor_table_cosmos_2fevidence_2fv1beta1_2fquery_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* QueryEvidenceRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 57, 2> QueryEvidenceRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::evidence::v1beta1::QueryEvidenceRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string hash = 2 [json_name = "hash", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.47"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(QueryEvidenceRequest, _impl_.hash_)}},
    // bytes evidence_hash = 1 [json_name = "evidenceHash", deprecated = true];
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(QueryEvidenceRequest, _impl_.evidence_hash_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes evidence_hash = 1 [json_name = "evidenceHash", deprecated = true];
    {PROTOBUF_FIELD_OFFSET(QueryEvidenceRequest, _impl_.evidence_hash_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // string hash = 2 [json_name = "hash", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.47"];
    {PROTOBUF_FIELD_OFFSET(QueryEvidenceRequest, _impl_.hash_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\54\0\4\0\0\0\0\0"
    "cosmos.evidence.v1beta1.QueryEvidenceRequest"
    "hash"
  }},
};

PROTOBUF_NOINLINE void QueryEvidenceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.evidence.v1beta1.QueryEvidenceRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.evidence_hash_.ClearToEmpty();
  _impl_.hash_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* QueryEvidenceRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const QueryEvidenceRequest& this_ = static_cast<const QueryEvidenceRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* QueryEvidenceRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const QueryEvidenceRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.evidence.v1beta1.QueryEvidenceRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bytes evidence_hash = 1 [json_name = "evidenceHash", deprecated = true];
          if (!this_._internal_evidence_hash().empty()) {
            const std::string& _s = this_._internal_evidence_hash();
            target = stream->WriteBytesMaybeAliased(1, _s, target);
          }

          // string hash = 2 [json_name = "hash", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.47"];
          if (!this_._internal_hash().empty()) {
            const std::string& _s = this_._internal_hash();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.evidence.v1beta1.QueryEvidenceRequest.hash");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.evidence.v1beta1.QueryEvidenceRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t QueryEvidenceRequest::ByteSizeLong(const MessageLite& base) {
          const QueryEvidenceRequest& this_ = static_cast<const QueryEvidenceRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t QueryEvidenceRequest::ByteSizeLong() const {
          const QueryEvidenceRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.evidence.v1beta1.QueryEvidenceRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bytes evidence_hash = 1 [json_name = "evidenceHash", deprecated = true];
            if (!this_._internal_evidence_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_evidence_hash());
            }
            // string hash = 2 [json_name = "hash", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.47"];
            if (!this_._internal_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_hash());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void QueryEvidenceRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<QueryEvidenceRequest*>(&to_msg);
  auto& from = static_cast<const QueryEvidenceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.evidence.v1beta1.QueryEvidenceRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_evidence_hash().empty()) {
    _this->_internal_set_evidence_hash(from._internal_evidence_hash());
  }
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void QueryEvidenceRequest::CopyFrom(const QueryEvidenceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.evidence.v1beta1.QueryEvidenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void QueryEvidenceRequest::InternalSwap(QueryEvidenceRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.evidence_hash_, &other->_impl_.evidence_hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, &other->_impl_.hash_, arena);
}

::google::protobuf::Metadata QueryEvidenceRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class QueryEvidenceResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<QueryEvidenceResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(QueryEvidenceResponse, _impl_._has_bits_);
};

void QueryEvidenceResponse::clear_evidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.evidence_ != nullptr) _impl_.evidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryEvidenceResponse::QueryEvidenceResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.evidence.v1beta1.QueryEvidenceResponse)
}
inline PROTOBUF_NDEBUG_INLINE QueryEvidenceResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::evidence::v1beta1::QueryEvidenceResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

QueryEvidenceResponse::QueryEvidenceResponse(
    ::google::protobuf::Arena* arena,
    const QueryEvidenceResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  QueryEvidenceResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.evidence_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Any>(
                              arena, *from._impl_.evidence_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:cosmos.evidence.v1beta1.QueryEvidenceResponse)
}
inline PROTOBUF_NDEBUG_INLINE QueryEvidenceResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void QueryEvidenceResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.evidence_ = {};
}
QueryEvidenceResponse::~QueryEvidenceResponse() {
  // @@protoc_insertion_point(destructor:cosmos.evidence.v1beta1.QueryEvidenceResponse)
  SharedDtor(*this);
}
inline void QueryEvidenceResponse::SharedDtor(MessageLite& self) {
  QueryEvidenceResponse& this_ = static_cast<QueryEvidenceResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.evidence_;
  this_._impl_.~Impl_();
}

inline void* QueryEvidenceResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) QueryEvidenceResponse(arena);
}
constexpr auto QueryEvidenceResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(QueryEvidenceResponse),
                                            alignof(QueryEvidenceResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull QueryEvidenceResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_QueryEvidenceResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &QueryEvidenceResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<QueryEvidenceResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &QueryEvidenceResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<QueryEvidenceResponse>(), &QueryEvidenceResponse::ByteSizeLong,
            &QueryEvidenceResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(QueryEvidenceResponse, _impl_._cached_size_),
        false,
    },
    &QueryEvidenceResponse::kDescriptorMethods,
    &descriptor_table_cosmos_2fevidence_2fv1beta1_2fquery_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* QueryEvidenceResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> QueryEvidenceResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(QueryEvidenceResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::evidence::v1beta1::QueryEvidenceResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .google.protobuf.Any evidence = 1 [json_name = "evidence"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(QueryEvidenceResponse, _impl_.evidence_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Any evidence = 1 [json_name = "evidence"];
    {PROTOBUF_FIELD_OFFSET(QueryEvidenceResponse, _impl_.evidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void QueryEvidenceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.evidence.v1beta1.QueryEvidenceResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.evidence_ != nullptr);
    _impl_.evidence_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* QueryEvidenceResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const QueryEvidenceResponse& this_ = static_cast<const QueryEvidenceResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* QueryEvidenceResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const QueryEvidenceResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.evidence.v1beta1.QueryEvidenceResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Any evidence = 1 [json_name = "evidence"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.evidence_, this_._impl_.evidence_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.evidence.v1beta1.QueryEvidenceResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t QueryEvidenceResponse::ByteSizeLong(const MessageLite& base) {
          const QueryEvidenceResponse& this_ = static_cast<const QueryEvidenceResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t QueryEvidenceResponse::ByteSizeLong() const {
          const QueryEvidenceResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.evidence.v1beta1.QueryEvidenceResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .google.protobuf.Any evidence = 1 [json_name = "evidence"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.evidence_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void QueryEvidenceResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<QueryEvidenceResponse*>(&to_msg);
  auto& from = static_cast<const QueryEvidenceResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.evidence.v1beta1.QueryEvidenceResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.evidence_ != nullptr);
    if (_this->_impl_.evidence_ == nullptr) {
      _this->_impl_.evidence_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Any>(arena, *from._impl_.evidence_);
    } else {
      _this->_impl_.evidence_->MergeFrom(*from._impl_.evidence_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void QueryEvidenceResponse::CopyFrom(const QueryEvidenceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.evidence.v1beta1.QueryEvidenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void QueryEvidenceResponse::InternalSwap(QueryEvidenceResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.evidence_, other->_impl_.evidence_);
}

::google::protobuf::Metadata QueryEvidenceResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class QueryAllEvidenceRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<QueryAllEvidenceRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(QueryAllEvidenceRequest, _impl_._has_bits_);
};

void QueryAllEvidenceRequest::clear_pagination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryAllEvidenceRequest::QueryAllEvidenceRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.evidence.v1beta1.QueryAllEvidenceRequest)
}
inline PROTOBUF_NDEBUG_INLINE QueryAllEvidenceRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::evidence::v1beta1::QueryAllEvidenceRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

QueryAllEvidenceRequest::QueryAllEvidenceRequest(
    ::google::protobuf::Arena* arena,
    const QueryAllEvidenceRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  QueryAllEvidenceRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.pagination_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::cosmos::base::query::v1beta1::PageRequest>(
                              arena, *from._impl_.pagination_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:cosmos.evidence.v1beta1.QueryAllEvidenceRequest)
}
inline PROTOBUF_NDEBUG_INLINE QueryAllEvidenceRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void QueryAllEvidenceRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.pagination_ = {};
}
QueryAllEvidenceRequest::~QueryAllEvidenceRequest() {
  // @@protoc_insertion_point(destructor:cosmos.evidence.v1beta1.QueryAllEvidenceRequest)
  SharedDtor(*this);
}
inline void QueryAllEvidenceRequest::SharedDtor(MessageLite& self) {
  QueryAllEvidenceRequest& this_ = static_cast<QueryAllEvidenceRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.pagination_;
  this_._impl_.~Impl_();
}

inline void* QueryAllEvidenceRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) QueryAllEvidenceRequest(arena);
}
constexpr auto QueryAllEvidenceRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(QueryAllEvidenceRequest),
                                            alignof(QueryAllEvidenceRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull QueryAllEvidenceRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_QueryAllEvidenceRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &QueryAllEvidenceRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<QueryAllEvidenceRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &QueryAllEvidenceRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<QueryAllEvidenceRequest>(), &QueryAllEvidenceRequest::ByteSizeLong,
            &QueryAllEvidenceRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(QueryAllEvidenceRequest, _impl_._cached_size_),
        false,
    },
    &QueryAllEvidenceRequest::kDescriptorMethods,
    &descriptor_table_cosmos_2fevidence_2fv1beta1_2fquery_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* QueryAllEvidenceRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> QueryAllEvidenceRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(QueryAllEvidenceRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::evidence::v1beta1::QueryAllEvidenceRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(QueryAllEvidenceRequest, _impl_.pagination_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
    {PROTOBUF_FIELD_OFFSET(QueryAllEvidenceRequest, _impl_.pagination_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cosmos::base::query::v1beta1::PageRequest>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void QueryAllEvidenceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.evidence.v1beta1.QueryAllEvidenceRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* QueryAllEvidenceRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const QueryAllEvidenceRequest& this_ = static_cast<const QueryAllEvidenceRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* QueryAllEvidenceRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const QueryAllEvidenceRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.evidence.v1beta1.QueryAllEvidenceRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.pagination_, this_._impl_.pagination_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.evidence.v1beta1.QueryAllEvidenceRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t QueryAllEvidenceRequest::ByteSizeLong(const MessageLite& base) {
          const QueryAllEvidenceRequest& this_ = static_cast<const QueryAllEvidenceRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t QueryAllEvidenceRequest::ByteSizeLong() const {
          const QueryAllEvidenceRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.evidence.v1beta1.QueryAllEvidenceRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pagination_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void QueryAllEvidenceRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<QueryAllEvidenceRequest*>(&to_msg);
  auto& from = static_cast<const QueryAllEvidenceRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.evidence.v1beta1.QueryAllEvidenceRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.pagination_ != nullptr);
    if (_this->_impl_.pagination_ == nullptr) {
      _this->_impl_.pagination_ =
          ::google::protobuf::Message::CopyConstruct<::cosmos::base::query::v1beta1::PageRequest>(arena, *from._impl_.pagination_);
    } else {
      _this->_impl_.pagination_->MergeFrom(*from._impl_.pagination_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void QueryAllEvidenceRequest::CopyFrom(const QueryAllEvidenceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.evidence.v1beta1.QueryAllEvidenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void QueryAllEvidenceRequest::InternalSwap(QueryAllEvidenceRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::google::protobuf::Metadata QueryAllEvidenceRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class QueryAllEvidenceResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<QueryAllEvidenceResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(QueryAllEvidenceResponse, _impl_._has_bits_);
};

void QueryAllEvidenceResponse::clear_evidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.evidence_.Clear();
}
void QueryAllEvidenceResponse::clear_pagination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryAllEvidenceResponse::QueryAllEvidenceResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.evidence.v1beta1.QueryAllEvidenceResponse)
}
inline PROTOBUF_NDEBUG_INLINE QueryAllEvidenceResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::evidence::v1beta1::QueryAllEvidenceResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        evidence_{visibility, arena, from.evidence_} {}

QueryAllEvidenceResponse::QueryAllEvidenceResponse(
    ::google::protobuf::Arena* arena,
    const QueryAllEvidenceResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  QueryAllEvidenceResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.pagination_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::cosmos::base::query::v1beta1::PageResponse>(
                              arena, *from._impl_.pagination_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:cosmos.evidence.v1beta1.QueryAllEvidenceResponse)
}
inline PROTOBUF_NDEBUG_INLINE QueryAllEvidenceResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        evidence_{visibility, arena} {}

inline void QueryAllEvidenceResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.pagination_ = {};
}
QueryAllEvidenceResponse::~QueryAllEvidenceResponse() {
  // @@protoc_insertion_point(destructor:cosmos.evidence.v1beta1.QueryAllEvidenceResponse)
  SharedDtor(*this);
}
inline void QueryAllEvidenceResponse::SharedDtor(MessageLite& self) {
  QueryAllEvidenceResponse& this_ = static_cast<QueryAllEvidenceResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.pagination_;
  this_._impl_.~Impl_();
}

inline void* QueryAllEvidenceResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) QueryAllEvidenceResponse(arena);
}
constexpr auto QueryAllEvidenceResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(QueryAllEvidenceResponse, _impl_.evidence_) +
          decltype(QueryAllEvidenceResponse::_impl_.evidence_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(QueryAllEvidenceResponse), alignof(QueryAllEvidenceResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&QueryAllEvidenceResponse::PlacementNew_,
                                 sizeof(QueryAllEvidenceResponse),
                                 alignof(QueryAllEvidenceResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull QueryAllEvidenceResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_QueryAllEvidenceResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &QueryAllEvidenceResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<QueryAllEvidenceResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &QueryAllEvidenceResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<QueryAllEvidenceResponse>(), &QueryAllEvidenceResponse::ByteSizeLong,
            &QueryAllEvidenceResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(QueryAllEvidenceResponse, _impl_._cached_size_),
        false,
    },
    &QueryAllEvidenceResponse::kDescriptorMethods,
    &descriptor_table_cosmos_2fevidence_2fv1beta1_2fquery_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* QueryAllEvidenceResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> QueryAllEvidenceResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(QueryAllEvidenceResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::evidence::v1beta1::QueryAllEvidenceResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 1, PROTOBUF_FIELD_OFFSET(QueryAllEvidenceResponse, _impl_.pagination_)}},
    // repeated .google.protobuf.Any evidence = 1 [json_name = "evidence"];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(QueryAllEvidenceResponse, _impl_.evidence_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .google.protobuf.Any evidence = 1 [json_name = "evidence"];
    {PROTOBUF_FIELD_OFFSET(QueryAllEvidenceResponse, _impl_.evidence_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
    {PROTOBUF_FIELD_OFFSET(QueryAllEvidenceResponse, _impl_.pagination_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
    {::_pbi::TcParser::GetTable<::cosmos::base::query::v1beta1::PageResponse>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void QueryAllEvidenceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.evidence.v1beta1.QueryAllEvidenceResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.evidence_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* QueryAllEvidenceResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const QueryAllEvidenceResponse& this_ = static_cast<const QueryAllEvidenceResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* QueryAllEvidenceResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const QueryAllEvidenceResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.evidence.v1beta1.QueryAllEvidenceResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .google.protobuf.Any evidence = 1 [json_name = "evidence"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_evidence_size());
               i < n; i++) {
            const auto& repfield = this_._internal_evidence().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.pagination_, this_._impl_.pagination_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.evidence.v1beta1.QueryAllEvidenceResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t QueryAllEvidenceResponse::ByteSizeLong(const MessageLite& base) {
          const QueryAllEvidenceResponse& this_ = static_cast<const QueryAllEvidenceResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t QueryAllEvidenceResponse::ByteSizeLong() const {
          const QueryAllEvidenceResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.evidence.v1beta1.QueryAllEvidenceResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .google.protobuf.Any evidence = 1 [json_name = "evidence"];
            {
              total_size += 1UL * this_._internal_evidence_size();
              for (const auto& msg : this_._internal_evidence()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pagination_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void QueryAllEvidenceResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<QueryAllEvidenceResponse*>(&to_msg);
  auto& from = static_cast<const QueryAllEvidenceResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.evidence.v1beta1.QueryAllEvidenceResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_evidence()->MergeFrom(
      from._internal_evidence());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.pagination_ != nullptr);
    if (_this->_impl_.pagination_ == nullptr) {
      _this->_impl_.pagination_ =
          ::google::protobuf::Message::CopyConstruct<::cosmos::base::query::v1beta1::PageResponse>(arena, *from._impl_.pagination_);
    } else {
      _this->_impl_.pagination_->MergeFrom(*from._impl_.pagination_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void QueryAllEvidenceResponse::CopyFrom(const QueryAllEvidenceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.evidence.v1beta1.QueryAllEvidenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void QueryAllEvidenceResponse::InternalSwap(QueryAllEvidenceResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.evidence_.InternalSwap(&other->_impl_.evidence_);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::google::protobuf::Metadata QueryAllEvidenceResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace evidence
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_cosmos_2fevidence_2fv1beta1_2fquery_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
