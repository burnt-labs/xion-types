// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/base/tendermint/v1beta1/types.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto_2epb_2eh
#define cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "tendermint/types/types.pb.h"
#include "tendermint/types/evidence.pb.h"
#include "tendermint/version/types.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto;
namespace cosmos {
namespace base {
namespace tendermint {
namespace v1beta1 {
class Block;
struct BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
}  // namespace v1beta1
}  // namespace tendermint
}  // namespace base
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace base {
namespace tendermint {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class Header final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.base.tendermint.v1beta1.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Header* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Header));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Header(
      ::google::protobuf::internal::ConstantInitialized);

  inline Header(const Header& from) : Header(nullptr, from) {}
  inline Header(Header&& from) noexcept
      : Header(nullptr, std::move(from)) {}
  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
        &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Header& a, Header& b) { a.Swap(&b); }
  inline void Swap(Header* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Header* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Header>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Header& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Header& from) { Header::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Header* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.base.tendermint.v1beta1.Header"; }

 protected:
  explicit Header(::google::protobuf::Arena* arena);
  Header(::google::protobuf::Arena* arena, const Header& from);
  Header(::google::protobuf::Arena* arena, Header&& from) noexcept
      : Header(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChainIdFieldNumber = 2,
    kLastCommitHashFieldNumber = 6,
    kDataHashFieldNumber = 7,
    kValidatorsHashFieldNumber = 8,
    kNextValidatorsHashFieldNumber = 9,
    kConsensusHashFieldNumber = 10,
    kAppHashFieldNumber = 11,
    kLastResultsHashFieldNumber = 12,
    kEvidenceHashFieldNumber = 13,
    kProposerAddressFieldNumber = 14,
    kVersionFieldNumber = 1,
    kTimeFieldNumber = 4,
    kLastBlockIdFieldNumber = 5,
    kHeightFieldNumber = 3,
  };
  // string chain_id = 2 [json_name = "chainId", (.gogoproto.customname) = "ChainID"];
  void clear_chain_id() ;
  const std::string& chain_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chain_id(Arg_&& arg, Args_... args);
  std::string* mutable_chain_id();
  PROTOBUF_NODISCARD std::string* release_chain_id();
  void set_allocated_chain_id(std::string* value);

  private:
  const std::string& _internal_chain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chain_id(
      const std::string& value);
  std::string* _internal_mutable_chain_id();

  public:
  // bytes last_commit_hash = 6 [json_name = "lastCommitHash"];
  void clear_last_commit_hash() ;
  const std::string& last_commit_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_commit_hash(Arg_&& arg, Args_... args);
  std::string* mutable_last_commit_hash();
  PROTOBUF_NODISCARD std::string* release_last_commit_hash();
  void set_allocated_last_commit_hash(std::string* value);

  private:
  const std::string& _internal_last_commit_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_commit_hash(
      const std::string& value);
  std::string* _internal_mutable_last_commit_hash();

  public:
  // bytes data_hash = 7 [json_name = "dataHash"];
  void clear_data_hash() ;
  const std::string& data_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data_hash(Arg_&& arg, Args_... args);
  std::string* mutable_data_hash();
  PROTOBUF_NODISCARD std::string* release_data_hash();
  void set_allocated_data_hash(std::string* value);

  private:
  const std::string& _internal_data_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_hash(
      const std::string& value);
  std::string* _internal_mutable_data_hash();

  public:
  // bytes validators_hash = 8 [json_name = "validatorsHash"];
  void clear_validators_hash() ;
  const std::string& validators_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_validators_hash(Arg_&& arg, Args_... args);
  std::string* mutable_validators_hash();
  PROTOBUF_NODISCARD std::string* release_validators_hash();
  void set_allocated_validators_hash(std::string* value);

  private:
  const std::string& _internal_validators_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validators_hash(
      const std::string& value);
  std::string* _internal_mutable_validators_hash();

  public:
  // bytes next_validators_hash = 9 [json_name = "nextValidatorsHash"];
  void clear_next_validators_hash() ;
  const std::string& next_validators_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_next_validators_hash(Arg_&& arg, Args_... args);
  std::string* mutable_next_validators_hash();
  PROTOBUF_NODISCARD std::string* release_next_validators_hash();
  void set_allocated_next_validators_hash(std::string* value);

  private:
  const std::string& _internal_next_validators_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_validators_hash(
      const std::string& value);
  std::string* _internal_mutable_next_validators_hash();

  public:
  // bytes consensus_hash = 10 [json_name = "consensusHash"];
  void clear_consensus_hash() ;
  const std::string& consensus_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_consensus_hash(Arg_&& arg, Args_... args);
  std::string* mutable_consensus_hash();
  PROTOBUF_NODISCARD std::string* release_consensus_hash();
  void set_allocated_consensus_hash(std::string* value);

  private:
  const std::string& _internal_consensus_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_consensus_hash(
      const std::string& value);
  std::string* _internal_mutable_consensus_hash();

  public:
  // bytes app_hash = 11 [json_name = "appHash"];
  void clear_app_hash() ;
  const std::string& app_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_hash(Arg_&& arg, Args_... args);
  std::string* mutable_app_hash();
  PROTOBUF_NODISCARD std::string* release_app_hash();
  void set_allocated_app_hash(std::string* value);

  private:
  const std::string& _internal_app_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_hash(
      const std::string& value);
  std::string* _internal_mutable_app_hash();

  public:
  // bytes last_results_hash = 12 [json_name = "lastResultsHash"];
  void clear_last_results_hash() ;
  const std::string& last_results_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_results_hash(Arg_&& arg, Args_... args);
  std::string* mutable_last_results_hash();
  PROTOBUF_NODISCARD std::string* release_last_results_hash();
  void set_allocated_last_results_hash(std::string* value);

  private:
  const std::string& _internal_last_results_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_results_hash(
      const std::string& value);
  std::string* _internal_mutable_last_results_hash();

  public:
  // bytes evidence_hash = 13 [json_name = "evidenceHash"];
  void clear_evidence_hash() ;
  const std::string& evidence_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_evidence_hash(Arg_&& arg, Args_... args);
  std::string* mutable_evidence_hash();
  PROTOBUF_NODISCARD std::string* release_evidence_hash();
  void set_allocated_evidence_hash(std::string* value);

  private:
  const std::string& _internal_evidence_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_evidence_hash(
      const std::string& value);
  std::string* _internal_mutable_evidence_hash();

  public:
  // string proposer_address = 14 [json_name = "proposerAddress"];
  void clear_proposer_address() ;
  const std::string& proposer_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proposer_address(Arg_&& arg, Args_... args);
  std::string* mutable_proposer_address();
  PROTOBUF_NODISCARD std::string* release_proposer_address();
  void set_allocated_proposer_address(std::string* value);

  private:
  const std::string& _internal_proposer_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proposer_address(
      const std::string& value);
  std::string* _internal_mutable_proposer_address();

  public:
  // .tendermint.version.Consensus version = 1 [json_name = "version", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_version() const;
  void clear_version() ;
  const ::tendermint::version::Consensus& version() const;
  PROTOBUF_NODISCARD ::tendermint::version::Consensus* release_version();
  ::tendermint::version::Consensus* mutable_version();
  void set_allocated_version(::tendermint::version::Consensus* value);
  void unsafe_arena_set_allocated_version(::tendermint::version::Consensus* value);
  ::tendermint::version::Consensus* unsafe_arena_release_version();

  private:
  const ::tendermint::version::Consensus& _internal_version() const;
  ::tendermint::version::Consensus* _internal_mutable_version();

  public:
  // .google.protobuf.Timestamp time = 4 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  bool has_time() const;
  void clear_time() ;
  const ::google::protobuf::Timestamp& time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_time();

  private:
  const ::google::protobuf::Timestamp& _internal_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_time();

  public:
  // .tendermint.types.BlockID last_block_id = 5 [json_name = "lastBlockId", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_last_block_id() const;
  void clear_last_block_id() ;
  const ::tendermint::types::BlockID& last_block_id() const;
  PROTOBUF_NODISCARD ::tendermint::types::BlockID* release_last_block_id();
  ::tendermint::types::BlockID* mutable_last_block_id();
  void set_allocated_last_block_id(::tendermint::types::BlockID* value);
  void unsafe_arena_set_allocated_last_block_id(::tendermint::types::BlockID* value);
  ::tendermint::types::BlockID* unsafe_arena_release_last_block_id();

  private:
  const ::tendermint::types::BlockID& _internal_last_block_id() const;
  ::tendermint::types::BlockID* _internal_mutable_last_block_id();

  public:
  // int64 height = 3 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.tendermint.v1beta1.Header)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 14, 3,
      78, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Header& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr chain_id_;
    ::google::protobuf::internal::ArenaStringPtr last_commit_hash_;
    ::google::protobuf::internal::ArenaStringPtr data_hash_;
    ::google::protobuf::internal::ArenaStringPtr validators_hash_;
    ::google::protobuf::internal::ArenaStringPtr next_validators_hash_;
    ::google::protobuf::internal::ArenaStringPtr consensus_hash_;
    ::google::protobuf::internal::ArenaStringPtr app_hash_;
    ::google::protobuf::internal::ArenaStringPtr last_results_hash_;
    ::google::protobuf::internal::ArenaStringPtr evidence_hash_;
    ::google::protobuf::internal::ArenaStringPtr proposer_address_;
    ::tendermint::version::Consensus* version_;
    ::google::protobuf::Timestamp* time_;
    ::tendermint::types::BlockID* last_block_id_;
    ::int64_t height_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Block final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.base.tendermint.v1beta1.Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  ~Block() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Block* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Block));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Block(
      ::google::protobuf::internal::ConstantInitialized);

  inline Block(const Block& from) : Block(nullptr, from) {}
  inline Block(Block&& from) noexcept
      : Block(nullptr, std::move(from)) {}
  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
        &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Block& a, Block& b) { a.Swap(&b); }
  inline void Swap(Block* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Block* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Block>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Block& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Block& from) { Block::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Block* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.base.tendermint.v1beta1.Block"; }

 protected:
  explicit Block(::google::protobuf::Arena* arena);
  Block(::google::protobuf::Arena* arena, const Block& from);
  Block(::google::protobuf::Arena* arena, Block&& from) noexcept
      : Block(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeaderFieldNumber = 1,
    kDataFieldNumber = 2,
    kEvidenceFieldNumber = 3,
    kLastCommitFieldNumber = 4,
  };
  // .cosmos.base.tendermint.v1beta1.Header header = 1 [json_name = "header", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_header() const;
  void clear_header() ;
  const ::cosmos::base::tendermint::v1beta1::Header& header() const;
  PROTOBUF_NODISCARD ::cosmos::base::tendermint::v1beta1::Header* release_header();
  ::cosmos::base::tendermint::v1beta1::Header* mutable_header();
  void set_allocated_header(::cosmos::base::tendermint::v1beta1::Header* value);
  void unsafe_arena_set_allocated_header(::cosmos::base::tendermint::v1beta1::Header* value);
  ::cosmos::base::tendermint::v1beta1::Header* unsafe_arena_release_header();

  private:
  const ::cosmos::base::tendermint::v1beta1::Header& _internal_header() const;
  ::cosmos::base::tendermint::v1beta1::Header* _internal_mutable_header();

  public:
  // .tendermint.types.Data data = 2 [json_name = "data", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_data() const;
  void clear_data() ;
  const ::tendermint::types::Data& data() const;
  PROTOBUF_NODISCARD ::tendermint::types::Data* release_data();
  ::tendermint::types::Data* mutable_data();
  void set_allocated_data(::tendermint::types::Data* value);
  void unsafe_arena_set_allocated_data(::tendermint::types::Data* value);
  ::tendermint::types::Data* unsafe_arena_release_data();

  private:
  const ::tendermint::types::Data& _internal_data() const;
  ::tendermint::types::Data* _internal_mutable_data();

  public:
  // .tendermint.types.EvidenceList evidence = 3 [json_name = "evidence", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_evidence() const;
  void clear_evidence() ;
  const ::tendermint::types::EvidenceList& evidence() const;
  PROTOBUF_NODISCARD ::tendermint::types::EvidenceList* release_evidence();
  ::tendermint::types::EvidenceList* mutable_evidence();
  void set_allocated_evidence(::tendermint::types::EvidenceList* value);
  void unsafe_arena_set_allocated_evidence(::tendermint::types::EvidenceList* value);
  ::tendermint::types::EvidenceList* unsafe_arena_release_evidence();

  private:
  const ::tendermint::types::EvidenceList& _internal_evidence() const;
  ::tendermint::types::EvidenceList* _internal_mutable_evidence();

  public:
  // .tendermint.types.Commit last_commit = 4 [json_name = "lastCommit"];
  bool has_last_commit() const;
  void clear_last_commit() ;
  const ::tendermint::types::Commit& last_commit() const;
  PROTOBUF_NODISCARD ::tendermint::types::Commit* release_last_commit();
  ::tendermint::types::Commit* mutable_last_commit();
  void set_allocated_last_commit(::tendermint::types::Commit* value);
  void unsafe_arena_set_allocated_last_commit(::tendermint::types::Commit* value);
  ::tendermint::types::Commit* unsafe_arena_release_last_commit();

  private:
  const ::tendermint::types::Commit& _internal_last_commit() const;
  ::tendermint::types::Commit* _internal_mutable_last_commit();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.tendermint.v1beta1.Block)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 4,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Block& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::cosmos::base::tendermint::v1beta1::Header* header_;
    ::tendermint::types::Data* data_;
    ::tendermint::types::EvidenceList* evidence_;
    ::tendermint::types::Commit* last_commit_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Block

// .cosmos.base.tendermint.v1beta1.Header header = 1 [json_name = "header", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool Block::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline void Block::clear_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::base::tendermint::v1beta1::Header& Block::_internal_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::base::tendermint::v1beta1::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::tendermint::v1beta1::Header&>(::cosmos::base::tendermint::v1beta1::_Header_default_instance_);
}
inline const ::cosmos::base::tendermint::v1beta1::Header& Block::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.Block.header)
  return _internal_header();
}
inline void Block::unsafe_arena_set_allocated_header(::cosmos::base::tendermint::v1beta1::Header* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::cosmos::base::tendermint::v1beta1::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.tendermint.v1beta1.Block.header)
}
inline ::cosmos::base::tendermint::v1beta1::Header* Block::release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::tendermint::v1beta1::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::base::tendermint::v1beta1::Header* Block::unsafe_arena_release_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.Block.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::tendermint::v1beta1::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::cosmos::base::tendermint::v1beta1::Header* Block::_internal_mutable_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::base::tendermint::v1beta1::Header>(GetArena());
    _impl_.header_ = reinterpret_cast<::cosmos::base::tendermint::v1beta1::Header*>(p);
  }
  return _impl_.header_;
}
inline ::cosmos::base::tendermint::v1beta1::Header* Block::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::base::tendermint::v1beta1::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.Block.header)
  return _msg;
}
inline void Block::set_allocated_header(::cosmos::base::tendermint::v1beta1::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::cosmos::base::tendermint::v1beta1::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.Block.header)
}

// .tendermint.types.Data data = 2 [json_name = "data", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool Block::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline const ::tendermint::types::Data& Block::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::types::Data* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::Data&>(::tendermint::types::_Data_default_instance_);
}
inline const ::tendermint::types::Data& Block::data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.Block.data)
  return _internal_data();
}
inline void Block::unsafe_arena_set_allocated_data(::tendermint::types::Data* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = reinterpret_cast<::tendermint::types::Data*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.tendermint.v1beta1.Block.data)
}
inline ::tendermint::types::Data* Block::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::types::Data* released = _impl_.data_;
  _impl_.data_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::types::Data* Block::unsafe_arena_release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.Block.data)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::types::Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::tendermint::types::Data* Block::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::types::Data>(GetArena());
    _impl_.data_ = reinterpret_cast<::tendermint::types::Data*>(p);
  }
  return _impl_.data_;
}
inline ::tendermint::types::Data* Block::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tendermint::types::Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.Block.data)
  return _msg;
}
inline void Block::set_allocated_data(::tendermint::types::Data* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.data_ = reinterpret_cast<::tendermint::types::Data*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.Block.data)
}

// .tendermint.types.EvidenceList evidence = 3 [json_name = "evidence", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool Block::has_evidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.evidence_ != nullptr);
  return value;
}
inline const ::tendermint::types::EvidenceList& Block::_internal_evidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::types::EvidenceList* p = _impl_.evidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::EvidenceList&>(::tendermint::types::_EvidenceList_default_instance_);
}
inline const ::tendermint::types::EvidenceList& Block::evidence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.Block.evidence)
  return _internal_evidence();
}
inline void Block::unsafe_arena_set_allocated_evidence(::tendermint::types::EvidenceList* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.evidence_);
  }
  _impl_.evidence_ = reinterpret_cast<::tendermint::types::EvidenceList*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.tendermint.v1beta1.Block.evidence)
}
inline ::tendermint::types::EvidenceList* Block::release_evidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tendermint::types::EvidenceList* released = _impl_.evidence_;
  _impl_.evidence_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::types::EvidenceList* Block::unsafe_arena_release_evidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.Block.evidence)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tendermint::types::EvidenceList* temp = _impl_.evidence_;
  _impl_.evidence_ = nullptr;
  return temp;
}
inline ::tendermint::types::EvidenceList* Block::_internal_mutable_evidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.evidence_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::types::EvidenceList>(GetArena());
    _impl_.evidence_ = reinterpret_cast<::tendermint::types::EvidenceList*>(p);
  }
  return _impl_.evidence_;
}
inline ::tendermint::types::EvidenceList* Block::mutable_evidence() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::tendermint::types::EvidenceList* _msg = _internal_mutable_evidence();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.Block.evidence)
  return _msg;
}
inline void Block::set_allocated_evidence(::tendermint::types::EvidenceList* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.evidence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.evidence_ = reinterpret_cast<::tendermint::types::EvidenceList*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.Block.evidence)
}

// .tendermint.types.Commit last_commit = 4 [json_name = "lastCommit"];
inline bool Block::has_last_commit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_commit_ != nullptr);
  return value;
}
inline const ::tendermint::types::Commit& Block::_internal_last_commit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::types::Commit* p = _impl_.last_commit_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::Commit&>(::tendermint::types::_Commit_default_instance_);
}
inline const ::tendermint::types::Commit& Block::last_commit() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.Block.last_commit)
  return _internal_last_commit();
}
inline void Block::unsafe_arena_set_allocated_last_commit(::tendermint::types::Commit* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_commit_);
  }
  _impl_.last_commit_ = reinterpret_cast<::tendermint::types::Commit*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.tendermint.v1beta1.Block.last_commit)
}
inline ::tendermint::types::Commit* Block::release_last_commit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tendermint::types::Commit* released = _impl_.last_commit_;
  _impl_.last_commit_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::types::Commit* Block::unsafe_arena_release_last_commit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.Block.last_commit)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tendermint::types::Commit* temp = _impl_.last_commit_;
  _impl_.last_commit_ = nullptr;
  return temp;
}
inline ::tendermint::types::Commit* Block::_internal_mutable_last_commit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_commit_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::types::Commit>(GetArena());
    _impl_.last_commit_ = reinterpret_cast<::tendermint::types::Commit*>(p);
  }
  return _impl_.last_commit_;
}
inline ::tendermint::types::Commit* Block::mutable_last_commit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::tendermint::types::Commit* _msg = _internal_mutable_last_commit();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.Block.last_commit)
  return _msg;
}
inline void Block::set_allocated_last_commit(::tendermint::types::Commit* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_commit_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.last_commit_ = reinterpret_cast<::tendermint::types::Commit*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.Block.last_commit)
}

// -------------------------------------------------------------------

// Header

// .tendermint.version.Consensus version = 1 [json_name = "version", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool Header::has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.version_ != nullptr);
  return value;
}
inline const ::tendermint::version::Consensus& Header::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::version::Consensus* p = _impl_.version_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::version::Consensus&>(::tendermint::version::_Consensus_default_instance_);
}
inline const ::tendermint::version::Consensus& Header::version() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.Header.version)
  return _internal_version();
}
inline void Header::unsafe_arena_set_allocated_version(::tendermint::version::Consensus* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.version_);
  }
  _impl_.version_ = reinterpret_cast<::tendermint::version::Consensus*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.tendermint.v1beta1.Header.version)
}
inline ::tendermint::version::Consensus* Header::release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::version::Consensus* released = _impl_.version_;
  _impl_.version_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::version::Consensus* Header::unsafe_arena_release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.Header.version)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::version::Consensus* temp = _impl_.version_;
  _impl_.version_ = nullptr;
  return temp;
}
inline ::tendermint::version::Consensus* Header::_internal_mutable_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.version_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::version::Consensus>(GetArena());
    _impl_.version_ = reinterpret_cast<::tendermint::version::Consensus*>(p);
  }
  return _impl_.version_;
}
inline ::tendermint::version::Consensus* Header::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tendermint::version::Consensus* _msg = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.Header.version)
  return _msg;
}
inline void Header::set_allocated_version(::tendermint::version::Consensus* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.version_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.version_ = reinterpret_cast<::tendermint::version::Consensus*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.Header.version)
}

// string chain_id = 2 [json_name = "chainId", (.gogoproto.customname) = "ChainID"];
inline void Header::clear_chain_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_id_.ClearToEmpty();
}
inline const std::string& Header::chain_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.Header.chain_id)
  return _internal_chain_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_chain_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.Header.chain_id)
}
inline std::string* Header::mutable_chain_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chain_id();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.Header.chain_id)
  return _s;
}
inline const std::string& Header::_internal_chain_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chain_id_.Get();
}
inline void Header::_internal_set_chain_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_id_.Set(value, GetArena());
}
inline std::string* Header::_internal_mutable_chain_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.chain_id_.Mutable( GetArena());
}
inline std::string* Header::release_chain_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.Header.chain_id)
  return _impl_.chain_id_.Release();
}
inline void Header::set_allocated_chain_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chain_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.chain_id_.IsDefault()) {
    _impl_.chain_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.Header.chain_id)
}

// int64 height = 3 [json_name = "height"];
inline void Header::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t Header::height() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.Header.height)
  return _internal_height();
}
inline void Header::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.Header.height)
}
inline ::int64_t Header::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void Header::_internal_set_height(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// .google.protobuf.Timestamp time = 4 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
inline bool Header::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Header::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Header::time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.Header.time)
  return _internal_time();
}
inline void Header::unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.tendermint.v1beta1.Header.time)
}
inline ::google::protobuf::Timestamp* Header::release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.time_;
  _impl_.time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* Header::unsafe_arena_release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.Header.time)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Header::_internal_mutable_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.time_;
}
inline ::google::protobuf::Timestamp* Header::mutable_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.Header.time)
  return _msg;
}
inline void Header::set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.Header.time)
}

// .tendermint.types.BlockID last_block_id = 5 [json_name = "lastBlockId", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool Header::has_last_block_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_block_id_ != nullptr);
  return value;
}
inline const ::tendermint::types::BlockID& Header::_internal_last_block_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tendermint::types::BlockID* p = _impl_.last_block_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::BlockID&>(::tendermint::types::_BlockID_default_instance_);
}
inline const ::tendermint::types::BlockID& Header::last_block_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.Header.last_block_id)
  return _internal_last_block_id();
}
inline void Header::unsafe_arena_set_allocated_last_block_id(::tendermint::types::BlockID* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_block_id_);
  }
  _impl_.last_block_id_ = reinterpret_cast<::tendermint::types::BlockID*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.tendermint.v1beta1.Header.last_block_id)
}
inline ::tendermint::types::BlockID* Header::release_last_block_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tendermint::types::BlockID* released = _impl_.last_block_id_;
  _impl_.last_block_id_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tendermint::types::BlockID* Header::unsafe_arena_release_last_block_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.Header.last_block_id)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tendermint::types::BlockID* temp = _impl_.last_block_id_;
  _impl_.last_block_id_ = nullptr;
  return temp;
}
inline ::tendermint::types::BlockID* Header::_internal_mutable_last_block_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_block_id_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tendermint::types::BlockID>(GetArena());
    _impl_.last_block_id_ = reinterpret_cast<::tendermint::types::BlockID*>(p);
  }
  return _impl_.last_block_id_;
}
inline ::tendermint::types::BlockID* Header::mutable_last_block_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::tendermint::types::BlockID* _msg = _internal_mutable_last_block_id();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.Header.last_block_id)
  return _msg;
}
inline void Header::set_allocated_last_block_id(::tendermint::types::BlockID* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_block_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.last_block_id_ = reinterpret_cast<::tendermint::types::BlockID*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.Header.last_block_id)
}

// bytes last_commit_hash = 6 [json_name = "lastCommitHash"];
inline void Header::clear_last_commit_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_commit_hash_.ClearToEmpty();
}
inline const std::string& Header::last_commit_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.Header.last_commit_hash)
  return _internal_last_commit_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_last_commit_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_commit_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.Header.last_commit_hash)
}
inline std::string* Header::mutable_last_commit_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_commit_hash();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.Header.last_commit_hash)
  return _s;
}
inline const std::string& Header::_internal_last_commit_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_commit_hash_.Get();
}
inline void Header::_internal_set_last_commit_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_commit_hash_.Set(value, GetArena());
}
inline std::string* Header::_internal_mutable_last_commit_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_commit_hash_.Mutable( GetArena());
}
inline std::string* Header::release_last_commit_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.Header.last_commit_hash)
  return _impl_.last_commit_hash_.Release();
}
inline void Header::set_allocated_last_commit_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_commit_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_commit_hash_.IsDefault()) {
    _impl_.last_commit_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.Header.last_commit_hash)
}

// bytes data_hash = 7 [json_name = "dataHash"];
inline void Header::clear_data_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_hash_.ClearToEmpty();
}
inline const std::string& Header::data_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.Header.data_hash)
  return _internal_data_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_data_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.Header.data_hash)
}
inline std::string* Header::mutable_data_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data_hash();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.Header.data_hash)
  return _s;
}
inline const std::string& Header::_internal_data_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_hash_.Get();
}
inline void Header::_internal_set_data_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_hash_.Set(value, GetArena());
}
inline std::string* Header::_internal_mutable_data_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_hash_.Mutable( GetArena());
}
inline std::string* Header::release_data_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.Header.data_hash)
  return _impl_.data_hash_.Release();
}
inline void Header::set_allocated_data_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_hash_.IsDefault()) {
    _impl_.data_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.Header.data_hash)
}

// bytes validators_hash = 8 [json_name = "validatorsHash"];
inline void Header::clear_validators_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validators_hash_.ClearToEmpty();
}
inline const std::string& Header::validators_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.Header.validators_hash)
  return _internal_validators_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_validators_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validators_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.Header.validators_hash)
}
inline std::string* Header::mutable_validators_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_validators_hash();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.Header.validators_hash)
  return _s;
}
inline const std::string& Header::_internal_validators_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.validators_hash_.Get();
}
inline void Header::_internal_set_validators_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validators_hash_.Set(value, GetArena());
}
inline std::string* Header::_internal_mutable_validators_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.validators_hash_.Mutable( GetArena());
}
inline std::string* Header::release_validators_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.Header.validators_hash)
  return _impl_.validators_hash_.Release();
}
inline void Header::set_allocated_validators_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validators_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.validators_hash_.IsDefault()) {
    _impl_.validators_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.Header.validators_hash)
}

// bytes next_validators_hash = 9 [json_name = "nextValidatorsHash"];
inline void Header::clear_next_validators_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_validators_hash_.ClearToEmpty();
}
inline const std::string& Header::next_validators_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.Header.next_validators_hash)
  return _internal_next_validators_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_next_validators_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_validators_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.Header.next_validators_hash)
}
inline std::string* Header::mutable_next_validators_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_next_validators_hash();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.Header.next_validators_hash)
  return _s;
}
inline const std::string& Header::_internal_next_validators_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.next_validators_hash_.Get();
}
inline void Header::_internal_set_next_validators_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_validators_hash_.Set(value, GetArena());
}
inline std::string* Header::_internal_mutable_next_validators_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.next_validators_hash_.Mutable( GetArena());
}
inline std::string* Header::release_next_validators_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.Header.next_validators_hash)
  return _impl_.next_validators_hash_.Release();
}
inline void Header::set_allocated_next_validators_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_validators_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.next_validators_hash_.IsDefault()) {
    _impl_.next_validators_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.Header.next_validators_hash)
}

// bytes consensus_hash = 10 [json_name = "consensusHash"];
inline void Header::clear_consensus_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.consensus_hash_.ClearToEmpty();
}
inline const std::string& Header::consensus_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.Header.consensus_hash)
  return _internal_consensus_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_consensus_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.consensus_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.Header.consensus_hash)
}
inline std::string* Header::mutable_consensus_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_consensus_hash();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.Header.consensus_hash)
  return _s;
}
inline const std::string& Header::_internal_consensus_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.consensus_hash_.Get();
}
inline void Header::_internal_set_consensus_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.consensus_hash_.Set(value, GetArena());
}
inline std::string* Header::_internal_mutable_consensus_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.consensus_hash_.Mutable( GetArena());
}
inline std::string* Header::release_consensus_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.Header.consensus_hash)
  return _impl_.consensus_hash_.Release();
}
inline void Header::set_allocated_consensus_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.consensus_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.consensus_hash_.IsDefault()) {
    _impl_.consensus_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.Header.consensus_hash)
}

// bytes app_hash = 11 [json_name = "appHash"];
inline void Header::clear_app_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_hash_.ClearToEmpty();
}
inline const std::string& Header::app_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.Header.app_hash)
  return _internal_app_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_app_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.Header.app_hash)
}
inline std::string* Header::mutable_app_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_app_hash();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.Header.app_hash)
  return _s;
}
inline const std::string& Header::_internal_app_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.app_hash_.Get();
}
inline void Header::_internal_set_app_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_hash_.Set(value, GetArena());
}
inline std::string* Header::_internal_mutable_app_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.app_hash_.Mutable( GetArena());
}
inline std::string* Header::release_app_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.Header.app_hash)
  return _impl_.app_hash_.Release();
}
inline void Header::set_allocated_app_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.app_hash_.IsDefault()) {
    _impl_.app_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.Header.app_hash)
}

// bytes last_results_hash = 12 [json_name = "lastResultsHash"];
inline void Header::clear_last_results_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_results_hash_.ClearToEmpty();
}
inline const std::string& Header::last_results_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.Header.last_results_hash)
  return _internal_last_results_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_last_results_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_results_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.Header.last_results_hash)
}
inline std::string* Header::mutable_last_results_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_results_hash();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.Header.last_results_hash)
  return _s;
}
inline const std::string& Header::_internal_last_results_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_results_hash_.Get();
}
inline void Header::_internal_set_last_results_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_results_hash_.Set(value, GetArena());
}
inline std::string* Header::_internal_mutable_last_results_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_results_hash_.Mutable( GetArena());
}
inline std::string* Header::release_last_results_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.Header.last_results_hash)
  return _impl_.last_results_hash_.Release();
}
inline void Header::set_allocated_last_results_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_results_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_results_hash_.IsDefault()) {
    _impl_.last_results_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.Header.last_results_hash)
}

// bytes evidence_hash = 13 [json_name = "evidenceHash"];
inline void Header::clear_evidence_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.evidence_hash_.ClearToEmpty();
}
inline const std::string& Header::evidence_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.Header.evidence_hash)
  return _internal_evidence_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_evidence_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.evidence_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.Header.evidence_hash)
}
inline std::string* Header::mutable_evidence_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_evidence_hash();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.Header.evidence_hash)
  return _s;
}
inline const std::string& Header::_internal_evidence_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.evidence_hash_.Get();
}
inline void Header::_internal_set_evidence_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.evidence_hash_.Set(value, GetArena());
}
inline std::string* Header::_internal_mutable_evidence_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.evidence_hash_.Mutable( GetArena());
}
inline std::string* Header::release_evidence_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.Header.evidence_hash)
  return _impl_.evidence_hash_.Release();
}
inline void Header::set_allocated_evidence_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.evidence_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.evidence_hash_.IsDefault()) {
    _impl_.evidence_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.Header.evidence_hash)
}

// string proposer_address = 14 [json_name = "proposerAddress"];
inline void Header::clear_proposer_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposer_address_.ClearToEmpty();
}
inline const std::string& Header::proposer_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.Header.proposer_address)
  return _internal_proposer_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_proposer_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposer_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.Header.proposer_address)
}
inline std::string* Header::mutable_proposer_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_proposer_address();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.Header.proposer_address)
  return _s;
}
inline const std::string& Header::_internal_proposer_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proposer_address_.Get();
}
inline void Header::_internal_set_proposer_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposer_address_.Set(value, GetArena());
}
inline std::string* Header::_internal_mutable_proposer_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.proposer_address_.Mutable( GetArena());
}
inline std::string* Header::release_proposer_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.Header.proposer_address)
  return _impl_.proposer_address_.Release();
}
inline void Header::set_allocated_proposer_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposer_address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.proposer_address_.IsDefault()) {
    _impl_.proposer_address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.Header.proposer_address)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace tendermint
}  // namespace base
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto_2epb_2eh
