// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/base/tendermint/v1beta1/types.proto
// Protobuf C++ Version: 5.29.4

#include "cosmos/base/tendermint/v1beta1/types.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace cosmos {
namespace base {
namespace tendermint {
namespace v1beta1 {

inline constexpr Header::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        chain_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        last_commit_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        data_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        validators_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        next_validators_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        consensus_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        app_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        last_results_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        evidence_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        proposer_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        version_{nullptr},
        time_{nullptr},
        last_block_id_{nullptr},
        height_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR Header::Header(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderDefaultTypeInternal _Header_default_instance_;

inline constexpr Block::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        data_{nullptr},
        evidence_{nullptr},
        last_commit_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Block::Block(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockDefaultTypeInternal() {}
  union {
    Block _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockDefaultTypeInternal _Block_default_instance_;
}  // namespace v1beta1
}  // namespace tendermint
}  // namespace base
}  // namespace cosmos
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto = nullptr;
const ::uint32_t
    TableStruct_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Block, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Block, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Block, _impl_.header_),
        PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Block, _impl_.data_),
        PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Block, _impl_.evidence_),
        PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Block, _impl_.last_commit_),
        0,
        1,
        2,
        3,
        PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.chain_id_),
        PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.height_),
        PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.time_),
        PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.last_block_id_),
        PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.last_commit_hash_),
        PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.data_hash_),
        PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.validators_hash_),
        PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.next_validators_hash_),
        PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.consensus_hash_),
        PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.app_hash_),
        PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.last_results_hash_),
        PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.evidence_hash_),
        PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.proposer_address_),
        0,
        ~0u,
        ~0u,
        1,
        2,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 12, -1, sizeof(::cosmos::base::tendermint::v1beta1::Block)},
        {16, 38, -1, sizeof(::cosmos::base::tendermint::v1beta1::Header)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::base::tendermint::v1beta1::_Block_default_instance_._instance,
    &::cosmos::base::tendermint::v1beta1::_Header_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n*cosmos/base/tendermint/v1beta1/types.p"
    "roto\022\036cosmos.base.tendermint.v1beta1\032\024go"
    "goproto/gogo.proto\032\034tendermint/types/typ"
    "es.proto\032\037tendermint/types/evidence.prot"
    "o\032\036tendermint/version/types.proto\032\037googl"
    "e/protobuf/timestamp.proto\032\021amino/amino."
    "proto\"\213\002\n\005Block\022I\n\006header\030\001 \001(\0132&.cosmos"
    ".base.tendermint.v1beta1.HeaderB\t\310\336\037\000\250\347\260"
    "*\001R\006header\0225\n\004data\030\002 \001(\0132\026.tendermint.ty"
    "pes.DataB\t\310\336\037\000\250\347\260*\001R\004data\022E\n\010evidence\030\003 "
    "\001(\0132\036.tendermint.types.EvidenceListB\t\310\336\037"
    "\000\250\347\260*\001R\010evidence\0229\n\013last_commit\030\004 \001(\0132\030."
    "tendermint.types.CommitR\nlastCommit\"\365\004\n\006"
    "Header\022B\n\007version\030\001 \001(\0132\035.tendermint.ver"
    "sion.ConsensusB\t\310\336\037\000\250\347\260*\001R\007version\022&\n\010ch"
    "ain_id\030\002 \001(\tB\013\342\336\037\007ChainIDR\007chainId\022\026\n\006he"
    "ight\030\003 \001(\003R\006height\022=\n\004time\030\004 \001(\0132\032.googl"
    "e.protobuf.TimestampB\r\310\336\037\000\220\337\037\001\250\347\260*\001R\004tim"
    "e\022H\n\rlast_block_id\030\005 \001(\0132\031.tendermint.ty"
    "pes.BlockIDB\t\310\336\037\000\250\347\260*\001R\013lastBlockId\022(\n\020l"
    "ast_commit_hash\030\006 \001(\014R\016lastCommitHash\022\033\n"
    "\tdata_hash\030\007 \001(\014R\010dataHash\022\'\n\017validators"
    "_hash\030\010 \001(\014R\016validatorsHash\0220\n\024next_vali"
    "dators_hash\030\t \001(\014R\022nextValidatorsHash\022%\n"
    "\016consensus_hash\030\n \001(\014R\rconsensusHash\022\031\n\010"
    "app_hash\030\013 \001(\014R\007appHash\022*\n\021last_results_"
    "hash\030\014 \001(\014R\017lastResultsHash\022#\n\revidence_"
    "hash\030\r \001(\014R\014evidenceHash\022)\n\020proposer_add"
    "ress\030\016 \001(\tR\017proposerAddressB5Z3github.co"
    "m/cosmos/cosmos-sdk/client/grpc/cmtservi"
    "ceb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto_deps[6] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
        &::descriptor_table_tendermint_2ftypes_2fevidence_2eproto,
        &::descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
        &::descriptor_table_tendermint_2fversion_2ftypes_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto = {
    false,
    false,
    1210,
    descriptor_table_protodef_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto,
    "cosmos/base/tendermint/v1beta1/types.proto",
    &descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto_once,
    descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto_deps,
    6,
    2,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto::offsets,
    file_level_enum_descriptors_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto,
    file_level_service_descriptors_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto,
};
namespace cosmos {
namespace base {
namespace tendermint {
namespace v1beta1 {
// ===================================================================

class Block::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Block>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Block, _impl_._has_bits_);
};

void Block::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Block::clear_evidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.evidence_ != nullptr) _impl_.evidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Block::clear_last_commit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_commit_ != nullptr) _impl_.last_commit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
Block::Block(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.tendermint.v1beta1.Block)
}
inline PROTOBUF_NDEBUG_INLINE Block::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::base::tendermint::v1beta1::Block& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Block::Block(
    ::google::protobuf::Arena* arena,
    const Block& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Block* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::cosmos::base::tendermint::v1beta1::Header>(
                              arena, *from._impl_.header_)
                        : nullptr;
  _impl_.data_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tendermint::types::Data>(
                              arena, *from._impl_.data_)
                        : nullptr;
  _impl_.evidence_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::tendermint::types::EvidenceList>(
                              arena, *from._impl_.evidence_)
                        : nullptr;
  _impl_.last_commit_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::tendermint::types::Commit>(
                              arena, *from._impl_.last_commit_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:cosmos.base.tendermint.v1beta1.Block)
}
inline PROTOBUF_NDEBUG_INLINE Block::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Block::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, last_commit_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::last_commit_));
}
Block::~Block() {
  // @@protoc_insertion_point(destructor:cosmos.base.tendermint.v1beta1.Block)
  SharedDtor(*this);
}
inline void Block::SharedDtor(MessageLite& self) {
  Block& this_ = static_cast<Block&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.header_;
  delete this_._impl_.data_;
  delete this_._impl_.evidence_;
  delete this_._impl_.last_commit_;
  this_._impl_.~Impl_();
}

inline void* Block::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Block(arena);
}
constexpr auto Block::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Block),
                                            alignof(Block));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Block::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Block_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Block::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Block>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Block::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Block>(), &Block::ByteSizeLong,
            &Block::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Block, _impl_._cached_size_),
        false,
    },
    &Block::kDescriptorMethods,
    &descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Block::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> Block::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Block, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::base::tendermint::v1beta1::Block>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .tendermint.types.Commit last_commit = 4 [json_name = "lastCommit"];
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(Block, _impl_.last_commit_)}},
    // .cosmos.base.tendermint.v1beta1.Header header = 1 [json_name = "header", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Block, _impl_.header_)}},
    // .tendermint.types.Data data = 2 [json_name = "data", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Block, _impl_.data_)}},
    // .tendermint.types.EvidenceList evidence = 3 [json_name = "evidence", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Block, _impl_.evidence_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .cosmos.base.tendermint.v1beta1.Header header = 1 [json_name = "header", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    {PROTOBUF_FIELD_OFFSET(Block, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tendermint.types.Data data = 2 [json_name = "data", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    {PROTOBUF_FIELD_OFFSET(Block, _impl_.data_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tendermint.types.EvidenceList evidence = 3 [json_name = "evidence", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    {PROTOBUF_FIELD_OFFSET(Block, _impl_.evidence_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tendermint.types.Commit last_commit = 4 [json_name = "lastCommit"];
    {PROTOBUF_FIELD_OFFSET(Block, _impl_.last_commit_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cosmos::base::tendermint::v1beta1::Header>()},
    {::_pbi::TcParser::GetTable<::tendermint::types::Data>()},
    {::_pbi::TcParser::GetTable<::tendermint::types::EvidenceList>()},
    {::_pbi::TcParser::GetTable<::tendermint::types::Commit>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.tendermint.v1beta1.Block)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.data_ != nullptr);
      _impl_.data_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.evidence_ != nullptr);
      _impl_.evidence_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.last_commit_ != nullptr);
      _impl_.last_commit_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Block::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Block& this_ = static_cast<const Block&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Block::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Block& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.tendermint.v1beta1.Block)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .cosmos.base.tendermint.v1beta1.Header header = 1 [json_name = "header", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.header_, this_._impl_.header_->GetCachedSize(), target,
                stream);
          }

          // .tendermint.types.Data data = 2 [json_name = "data", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.data_, this_._impl_.data_->GetCachedSize(), target,
                stream);
          }

          // .tendermint.types.EvidenceList evidence = 3 [json_name = "evidence", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.evidence_, this_._impl_.evidence_->GetCachedSize(), target,
                stream);
          }

          // .tendermint.types.Commit last_commit = 4 [json_name = "lastCommit"];
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.last_commit_, this_._impl_.last_commit_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.tendermint.v1beta1.Block)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Block::ByteSizeLong(const MessageLite& base) {
          const Block& this_ = static_cast<const Block&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Block::ByteSizeLong() const {
          const Block& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.base.tendermint.v1beta1.Block)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000000fu) {
            // .cosmos.base.tendermint.v1beta1.Header header = 1 [json_name = "header", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.header_);
            }
            // .tendermint.types.Data data = 2 [json_name = "data", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.data_);
            }
            // .tendermint.types.EvidenceList evidence = 3 [json_name = "evidence", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.evidence_);
            }
            // .tendermint.types.Commit last_commit = 4 [json_name = "lastCommit"];
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.last_commit_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Block::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Block*>(&to_msg);
  auto& from = static_cast<const Block&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.tendermint.v1beta1.Block)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.header_ != nullptr);
      if (_this->_impl_.header_ == nullptr) {
        _this->_impl_.header_ =
            ::google::protobuf::Message::CopyConstruct<::cosmos::base::tendermint::v1beta1::Header>(arena, *from._impl_.header_);
      } else {
        _this->_impl_.header_->MergeFrom(*from._impl_.header_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.data_ != nullptr);
      if (_this->_impl_.data_ == nullptr) {
        _this->_impl_.data_ =
            ::google::protobuf::Message::CopyConstruct<::tendermint::types::Data>(arena, *from._impl_.data_);
      } else {
        _this->_impl_.data_->MergeFrom(*from._impl_.data_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.evidence_ != nullptr);
      if (_this->_impl_.evidence_ == nullptr) {
        _this->_impl_.evidence_ =
            ::google::protobuf::Message::CopyConstruct<::tendermint::types::EvidenceList>(arena, *from._impl_.evidence_);
      } else {
        _this->_impl_.evidence_->MergeFrom(*from._impl_.evidence_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.last_commit_ != nullptr);
      if (_this->_impl_.last_commit_ == nullptr) {
        _this->_impl_.last_commit_ =
            ::google::protobuf::Message::CopyConstruct<::tendermint::types::Commit>(arena, *from._impl_.last_commit_);
      } else {
        _this->_impl_.last_commit_->MergeFrom(*from._impl_.last_commit_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.tendermint.v1beta1.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Block::InternalSwap(Block* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Block, _impl_.last_commit_)
      + sizeof(Block::_impl_.last_commit_)
      - PROTOBUF_FIELD_OFFSET(Block, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata Block::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Header::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Header>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Header, _impl_._has_bits_);
};

void Header::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.version_ != nullptr) _impl_.version_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Header::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Header::clear_last_block_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_block_id_ != nullptr) _impl_.last_block_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
Header::Header(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.tendermint.v1beta1.Header)
}
inline PROTOBUF_NDEBUG_INLINE Header::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::base::tendermint::v1beta1::Header& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        chain_id_(arena, from.chain_id_),
        last_commit_hash_(arena, from.last_commit_hash_),
        data_hash_(arena, from.data_hash_),
        validators_hash_(arena, from.validators_hash_),
        next_validators_hash_(arena, from.next_validators_hash_),
        consensus_hash_(arena, from.consensus_hash_),
        app_hash_(arena, from.app_hash_),
        last_results_hash_(arena, from.last_results_hash_),
        evidence_hash_(arena, from.evidence_hash_),
        proposer_address_(arena, from.proposer_address_) {}

Header::Header(
    ::google::protobuf::Arena* arena,
    const Header& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Header* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.version_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tendermint::version::Consensus>(
                              arena, *from._impl_.version_)
                        : nullptr;
  _impl_.time_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.time_)
                        : nullptr;
  _impl_.last_block_id_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::tendermint::types::BlockID>(
                              arena, *from._impl_.last_block_id_)
                        : nullptr;
  _impl_.height_ = from._impl_.height_;

  // @@protoc_insertion_point(copy_constructor:cosmos.base.tendermint.v1beta1.Header)
}
inline PROTOBUF_NDEBUG_INLINE Header::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        chain_id_(arena),
        last_commit_hash_(arena),
        data_hash_(arena),
        validators_hash_(arena),
        next_validators_hash_(arena),
        consensus_hash_(arena),
        app_hash_(arena),
        last_results_hash_(arena),
        evidence_hash_(arena),
        proposer_address_(arena) {}

inline void Header::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, version_),
           0,
           offsetof(Impl_, height_) -
               offsetof(Impl_, version_) +
               sizeof(Impl_::height_));
}
Header::~Header() {
  // @@protoc_insertion_point(destructor:cosmos.base.tendermint.v1beta1.Header)
  SharedDtor(*this);
}
inline void Header::SharedDtor(MessageLite& self) {
  Header& this_ = static_cast<Header&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.chain_id_.Destroy();
  this_._impl_.last_commit_hash_.Destroy();
  this_._impl_.data_hash_.Destroy();
  this_._impl_.validators_hash_.Destroy();
  this_._impl_.next_validators_hash_.Destroy();
  this_._impl_.consensus_hash_.Destroy();
  this_._impl_.app_hash_.Destroy();
  this_._impl_.last_results_hash_.Destroy();
  this_._impl_.evidence_hash_.Destroy();
  this_._impl_.proposer_address_.Destroy();
  delete this_._impl_.version_;
  delete this_._impl_.time_;
  delete this_._impl_.last_block_id_;
  this_._impl_.~Impl_();
}

inline void* Header::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Header(arena);
}
constexpr auto Header::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Header),
                                            alignof(Header));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Header::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Header_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Header::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Header>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Header::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Header>(), &Header::ByteSizeLong,
            &Header::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Header, _impl_._cached_size_),
        false,
    },
    &Header::kDescriptorMethods,
    &descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Header::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 14, 3, 78, 2> Header::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Header, _impl_._has_bits_),
    0, // no _extensions_
    14, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950912,  // skipmap
    offsetof(decltype(_table_), field_entries),
    14,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::base::tendermint::v1beta1::Header>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .tendermint.version.Consensus version = 1 [json_name = "version", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.version_)}},
    // string chain_id = 2 [json_name = "chainId", (.gogoproto.customname) = "ChainID"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.chain_id_)}},
    // int64 height = 3 [json_name = "height"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Header, _impl_.height_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.height_)}},
    // .google.protobuf.Timestamp time = 4 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(Header, _impl_.time_)}},
    // .tendermint.types.BlockID last_block_id = 5 [json_name = "lastBlockId", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 2, PROTOBUF_FIELD_OFFSET(Header, _impl_.last_block_id_)}},
    // bytes last_commit_hash = 6 [json_name = "lastCommitHash"];
    {::_pbi::TcParser::FastBS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.last_commit_hash_)}},
    // bytes data_hash = 7 [json_name = "dataHash"];
    {::_pbi::TcParser::FastBS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.data_hash_)}},
    // bytes validators_hash = 8 [json_name = "validatorsHash"];
    {::_pbi::TcParser::FastBS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.validators_hash_)}},
    // bytes next_validators_hash = 9 [json_name = "nextValidatorsHash"];
    {::_pbi::TcParser::FastBS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.next_validators_hash_)}},
    // bytes consensus_hash = 10 [json_name = "consensusHash"];
    {::_pbi::TcParser::FastBS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.consensus_hash_)}},
    // bytes app_hash = 11 [json_name = "appHash"];
    {::_pbi::TcParser::FastBS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.app_hash_)}},
    // bytes last_results_hash = 12 [json_name = "lastResultsHash"];
    {::_pbi::TcParser::FastBS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.last_results_hash_)}},
    // bytes evidence_hash = 13 [json_name = "evidenceHash"];
    {::_pbi::TcParser::FastBS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.evidence_hash_)}},
    // string proposer_address = 14 [json_name = "proposerAddress"];
    {::_pbi::TcParser::FastUS1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.proposer_address_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .tendermint.version.Consensus version = 1 [json_name = "version", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.version_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string chain_id = 2 [json_name = "chainId", (.gogoproto.customname) = "ChainID"];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.chain_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 height = 3 [json_name = "height"];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.height_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .google.protobuf.Timestamp time = 4 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.time_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tendermint.types.BlockID last_block_id = 5 [json_name = "lastBlockId", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.last_block_id_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes last_commit_hash = 6 [json_name = "lastCommitHash"];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.last_commit_hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes data_hash = 7 [json_name = "dataHash"];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.data_hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes validators_hash = 8 [json_name = "validatorsHash"];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.validators_hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes next_validators_hash = 9 [json_name = "nextValidatorsHash"];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.next_validators_hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes consensus_hash = 10 [json_name = "consensusHash"];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.consensus_hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes app_hash = 11 [json_name = "appHash"];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.app_hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes last_results_hash = 12 [json_name = "lastResultsHash"];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.last_results_hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes evidence_hash = 13 [json_name = "evidenceHash"];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.evidence_hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // string proposer_address = 14 [json_name = "proposerAddress"];
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.proposer_address_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tendermint::version::Consensus>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tendermint::types::BlockID>()},
  }}, {{
    "\45\0\10\0\0\0\0\0\0\0\0\0\0\0\20\0"
    "cosmos.base.tendermint.v1beta1.Header"
    "chain_id"
    "proposer_address"
  }},
};

PROTOBUF_NOINLINE void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.tendermint.v1beta1.Header)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chain_id_.ClearToEmpty();
  _impl_.last_commit_hash_.ClearToEmpty();
  _impl_.data_hash_.ClearToEmpty();
  _impl_.validators_hash_.ClearToEmpty();
  _impl_.next_validators_hash_.ClearToEmpty();
  _impl_.consensus_hash_.ClearToEmpty();
  _impl_.app_hash_.ClearToEmpty();
  _impl_.last_results_hash_.ClearToEmpty();
  _impl_.evidence_hash_.ClearToEmpty();
  _impl_.proposer_address_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.version_ != nullptr);
      _impl_.version_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.last_block_id_ != nullptr);
      _impl_.last_block_id_->Clear();
    }
  }
  _impl_.height_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Header::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Header& this_ = static_cast<const Header&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Header::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Header& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.tendermint.v1beta1.Header)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tendermint.version.Consensus version = 1 [json_name = "version", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.version_, this_._impl_.version_->GetCachedSize(), target,
                stream);
          }

          // string chain_id = 2 [json_name = "chainId", (.gogoproto.customname) = "ChainID"];
          if (!this_._internal_chain_id().empty()) {
            const std::string& _s = this_._internal_chain_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.base.tendermint.v1beta1.Header.chain_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // int64 height = 3 [json_name = "height"];
          if (this_._internal_height() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<3>(
                    stream, this_._internal_height(), target);
          }

          // .google.protobuf.Timestamp time = 4 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.time_, this_._impl_.time_->GetCachedSize(), target,
                stream);
          }

          // .tendermint.types.BlockID last_block_id = 5 [json_name = "lastBlockId", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.last_block_id_, this_._impl_.last_block_id_->GetCachedSize(), target,
                stream);
          }

          // bytes last_commit_hash = 6 [json_name = "lastCommitHash"];
          if (!this_._internal_last_commit_hash().empty()) {
            const std::string& _s = this_._internal_last_commit_hash();
            target = stream->WriteBytesMaybeAliased(6, _s, target);
          }

          // bytes data_hash = 7 [json_name = "dataHash"];
          if (!this_._internal_data_hash().empty()) {
            const std::string& _s = this_._internal_data_hash();
            target = stream->WriteBytesMaybeAliased(7, _s, target);
          }

          // bytes validators_hash = 8 [json_name = "validatorsHash"];
          if (!this_._internal_validators_hash().empty()) {
            const std::string& _s = this_._internal_validators_hash();
            target = stream->WriteBytesMaybeAliased(8, _s, target);
          }

          // bytes next_validators_hash = 9 [json_name = "nextValidatorsHash"];
          if (!this_._internal_next_validators_hash().empty()) {
            const std::string& _s = this_._internal_next_validators_hash();
            target = stream->WriteBytesMaybeAliased(9, _s, target);
          }

          // bytes consensus_hash = 10 [json_name = "consensusHash"];
          if (!this_._internal_consensus_hash().empty()) {
            const std::string& _s = this_._internal_consensus_hash();
            target = stream->WriteBytesMaybeAliased(10, _s, target);
          }

          // bytes app_hash = 11 [json_name = "appHash"];
          if (!this_._internal_app_hash().empty()) {
            const std::string& _s = this_._internal_app_hash();
            target = stream->WriteBytesMaybeAliased(11, _s, target);
          }

          // bytes last_results_hash = 12 [json_name = "lastResultsHash"];
          if (!this_._internal_last_results_hash().empty()) {
            const std::string& _s = this_._internal_last_results_hash();
            target = stream->WriteBytesMaybeAliased(12, _s, target);
          }

          // bytes evidence_hash = 13 [json_name = "evidenceHash"];
          if (!this_._internal_evidence_hash().empty()) {
            const std::string& _s = this_._internal_evidence_hash();
            target = stream->WriteBytesMaybeAliased(13, _s, target);
          }

          // string proposer_address = 14 [json_name = "proposerAddress"];
          if (!this_._internal_proposer_address().empty()) {
            const std::string& _s = this_._internal_proposer_address();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.base.tendermint.v1beta1.Header.proposer_address");
            target = stream->WriteStringMaybeAliased(14, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.tendermint.v1beta1.Header)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Header::ByteSizeLong(const MessageLite& base) {
          const Header& this_ = static_cast<const Header&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Header::ByteSizeLong() const {
          const Header& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.base.tendermint.v1beta1.Header)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string chain_id = 2 [json_name = "chainId", (.gogoproto.customname) = "ChainID"];
            if (!this_._internal_chain_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_chain_id());
            }
            // bytes last_commit_hash = 6 [json_name = "lastCommitHash"];
            if (!this_._internal_last_commit_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_last_commit_hash());
            }
            // bytes data_hash = 7 [json_name = "dataHash"];
            if (!this_._internal_data_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_data_hash());
            }
            // bytes validators_hash = 8 [json_name = "validatorsHash"];
            if (!this_._internal_validators_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_validators_hash());
            }
            // bytes next_validators_hash = 9 [json_name = "nextValidatorsHash"];
            if (!this_._internal_next_validators_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_next_validators_hash());
            }
            // bytes consensus_hash = 10 [json_name = "consensusHash"];
            if (!this_._internal_consensus_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_consensus_hash());
            }
            // bytes app_hash = 11 [json_name = "appHash"];
            if (!this_._internal_app_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_app_hash());
            }
            // bytes last_results_hash = 12 [json_name = "lastResultsHash"];
            if (!this_._internal_last_results_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_last_results_hash());
            }
            // bytes evidence_hash = 13 [json_name = "evidenceHash"];
            if (!this_._internal_evidence_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_evidence_hash());
            }
            // string proposer_address = 14 [json_name = "proposerAddress"];
            if (!this_._internal_proposer_address().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_proposer_address());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .tendermint.version.Consensus version = 1 [json_name = "version", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.version_);
            }
            // .google.protobuf.Timestamp time = 4 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.time_);
            }
            // .tendermint.types.BlockID last_block_id = 5 [json_name = "lastBlockId", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.last_block_id_);
            }
          }
           {
            // int64 height = 3 [json_name = "height"];
            if (this_._internal_height() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_height());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Header::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Header*>(&to_msg);
  auto& from = static_cast<const Header&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.tendermint.v1beta1.Header)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chain_id().empty()) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  if (!from._internal_last_commit_hash().empty()) {
    _this->_internal_set_last_commit_hash(from._internal_last_commit_hash());
  }
  if (!from._internal_data_hash().empty()) {
    _this->_internal_set_data_hash(from._internal_data_hash());
  }
  if (!from._internal_validators_hash().empty()) {
    _this->_internal_set_validators_hash(from._internal_validators_hash());
  }
  if (!from._internal_next_validators_hash().empty()) {
    _this->_internal_set_next_validators_hash(from._internal_next_validators_hash());
  }
  if (!from._internal_consensus_hash().empty()) {
    _this->_internal_set_consensus_hash(from._internal_consensus_hash());
  }
  if (!from._internal_app_hash().empty()) {
    _this->_internal_set_app_hash(from._internal_app_hash());
  }
  if (!from._internal_last_results_hash().empty()) {
    _this->_internal_set_last_results_hash(from._internal_last_results_hash());
  }
  if (!from._internal_evidence_hash().empty()) {
    _this->_internal_set_evidence_hash(from._internal_evidence_hash());
  }
  if (!from._internal_proposer_address().empty()) {
    _this->_internal_set_proposer_address(from._internal_proposer_address());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.version_ != nullptr);
      if (_this->_impl_.version_ == nullptr) {
        _this->_impl_.version_ =
            ::google::protobuf::Message::CopyConstruct<::tendermint::version::Consensus>(arena, *from._impl_.version_);
      } else {
        _this->_impl_.version_->MergeFrom(*from._impl_.version_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.time_ != nullptr);
      if (_this->_impl_.time_ == nullptr) {
        _this->_impl_.time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.time_);
      } else {
        _this->_impl_.time_->MergeFrom(*from._impl_.time_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.last_block_id_ != nullptr);
      if (_this->_impl_.last_block_id_ == nullptr) {
        _this->_impl_.last_block_id_ =
            ::google::protobuf::Message::CopyConstruct<::tendermint::types::BlockID>(arena, *from._impl_.last_block_id_);
      } else {
        _this->_impl_.last_block_id_->MergeFrom(*from._impl_.last_block_id_);
      }
    }
  }
  if (from._internal_height() != 0) {
    _this->_impl_.height_ = from._impl_.height_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.tendermint.v1beta1.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Header::InternalSwap(Header* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.chain_id_, &other->_impl_.chain_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.last_commit_hash_, &other->_impl_.last_commit_hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_hash_, &other->_impl_.data_hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.validators_hash_, &other->_impl_.validators_hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.next_validators_hash_, &other->_impl_.next_validators_hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.consensus_hash_, &other->_impl_.consensus_hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.app_hash_, &other->_impl_.app_hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.last_results_hash_, &other->_impl_.last_results_hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.evidence_hash_, &other->_impl_.evidence_hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proposer_address_, &other->_impl_.proposer_address_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, _impl_.height_)
      + sizeof(Header::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(Header, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::google::protobuf::Metadata Header::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace tendermint
}  // namespace base
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
