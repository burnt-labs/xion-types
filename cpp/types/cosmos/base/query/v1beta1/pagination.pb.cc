// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/base/query/v1beta1/pagination.proto
// Protobuf C++ Version: 5.29.4

#include "cosmos/base/query/v1beta1/pagination.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace cosmos {
namespace base {
namespace query {
namespace v1beta1 {

inline constexpr PageResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : next_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        total_{::uint64_t{0u}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PageResponse::PageResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PageResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PageResponseDefaultTypeInternal() {}
  union {
    PageResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PageResponseDefaultTypeInternal _PageResponse_default_instance_;

inline constexpr PageRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        offset_{::uint64_t{0u}},
        limit_{::uint64_t{0u}},
        count_total_{false},
        reverse_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PageRequest::PageRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PageRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PageRequestDefaultTypeInternal() {}
  union {
    PageRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PageRequestDefaultTypeInternal _PageRequest_default_instance_;
}  // namespace v1beta1
}  // namespace query
}  // namespace base
}  // namespace cosmos
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto = nullptr;
const ::uint32_t
    TableStruct_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cosmos::base::query::v1beta1::PageRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::base::query::v1beta1::PageRequest, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::cosmos::base::query::v1beta1::PageRequest, _impl_.offset_),
        PROTOBUF_FIELD_OFFSET(::cosmos::base::query::v1beta1::PageRequest, _impl_.limit_),
        PROTOBUF_FIELD_OFFSET(::cosmos::base::query::v1beta1::PageRequest, _impl_.count_total_),
        PROTOBUF_FIELD_OFFSET(::cosmos::base::query::v1beta1::PageRequest, _impl_.reverse_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cosmos::base::query::v1beta1::PageResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::base::query::v1beta1::PageResponse, _impl_.next_key_),
        PROTOBUF_FIELD_OFFSET(::cosmos::base::query::v1beta1::PageResponse, _impl_.total_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::cosmos::base::query::v1beta1::PageRequest)},
        {13, -1, -1, sizeof(::cosmos::base::query::v1beta1::PageResponse)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::base::query::v1beta1::_PageRequest_default_instance_._instance,
    &::cosmos::base::query::v1beta1::_PageResponse_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n*cosmos/base/query/v1beta1/pagination.p"
    "roto\022\031cosmos.base.query.v1beta1\"\210\001\n\013Page"
    "Request\022\020\n\003key\030\001 \001(\014R\003key\022\026\n\006offset\030\002 \001("
    "\004R\006offset\022\024\n\005limit\030\003 \001(\004R\005limit\022\037\n\013count"
    "_total\030\004 \001(\010R\ncountTotal\022\030\n\007reverse\030\005 \001("
    "\010R\007reverse\"\?\n\014PageResponse\022\031\n\010next_key\030\001"
    " \001(\014R\007nextKey\022\024\n\005total\030\002 \001(\004R\005totalB*Z(g"
    "ithub.com/cosmos/cosmos-sdk/types/queryb"
    "\006proto3"
};
static ::absl::once_flag descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto = {
    false,
    false,
    327,
    descriptor_table_protodef_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto,
    "cosmos/base/query/v1beta1/pagination.proto",
    &descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto::offsets,
    file_level_enum_descriptors_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto,
    file_level_service_descriptors_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto,
};
namespace cosmos {
namespace base {
namespace query {
namespace v1beta1 {
// ===================================================================

class PageRequest::_Internal {
 public:
};

PageRequest::PageRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.query.v1beta1.PageRequest)
}
inline PROTOBUF_NDEBUG_INLINE PageRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::base::query::v1beta1::PageRequest& from_msg)
      : key_(arena, from.key_),
        _cached_size_{0} {}

PageRequest::PageRequest(
    ::google::protobuf::Arena* arena,
    const PageRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PageRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, offset_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, offset_),
           offsetof(Impl_, reverse_) -
               offsetof(Impl_, offset_) +
               sizeof(Impl_::reverse_));

  // @@protoc_insertion_point(copy_constructor:cosmos.base.query.v1beta1.PageRequest)
}
inline PROTOBUF_NDEBUG_INLINE PageRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : key_(arena),
        _cached_size_{0} {}

inline void PageRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, offset_),
           0,
           offsetof(Impl_, reverse_) -
               offsetof(Impl_, offset_) +
               sizeof(Impl_::reverse_));
}
PageRequest::~PageRequest() {
  // @@protoc_insertion_point(destructor:cosmos.base.query.v1beta1.PageRequest)
  SharedDtor(*this);
}
inline void PageRequest::SharedDtor(MessageLite& self) {
  PageRequest& this_ = static_cast<PageRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.key_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PageRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PageRequest(arena);
}
constexpr auto PageRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(PageRequest),
                                            alignof(PageRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PageRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PageRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PageRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PageRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PageRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PageRequest>(), &PageRequest::ByteSizeLong,
            &PageRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PageRequest, _impl_._cached_size_),
        false,
    },
    &PageRequest::kDescriptorMethods,
    &descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PageRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> PageRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::base::query::v1beta1::PageRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bytes key = 1 [json_name = "key"];
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PageRequest, _impl_.key_)}},
    // uint64 offset = 2 [json_name = "offset"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(PageRequest, _impl_.offset_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PageRequest, _impl_.offset_)}},
    // uint64 limit = 3 [json_name = "limit"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(PageRequest, _impl_.limit_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(PageRequest, _impl_.limit_)}},
    // bool count_total = 4 [json_name = "countTotal"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PageRequest, _impl_.count_total_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(PageRequest, _impl_.count_total_)}},
    // bool reverse = 5 [json_name = "reverse"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PageRequest, _impl_.reverse_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(PageRequest, _impl_.reverse_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes key = 1 [json_name = "key"];
    {PROTOBUF_FIELD_OFFSET(PageRequest, _impl_.key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // uint64 offset = 2 [json_name = "offset"];
    {PROTOBUF_FIELD_OFFSET(PageRequest, _impl_.offset_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 limit = 3 [json_name = "limit"];
    {PROTOBUF_FIELD_OFFSET(PageRequest, _impl_.limit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // bool count_total = 4 [json_name = "countTotal"];
    {PROTOBUF_FIELD_OFFSET(PageRequest, _impl_.count_total_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool reverse = 5 [json_name = "reverse"];
    {PROTOBUF_FIELD_OFFSET(PageRequest, _impl_.reverse_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void PageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.query.v1beta1.PageRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  ::memset(&_impl_.offset_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.reverse_) -
      reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.reverse_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PageRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PageRequest& this_ = static_cast<const PageRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PageRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PageRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.query.v1beta1.PageRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bytes key = 1 [json_name = "key"];
          if (!this_._internal_key().empty()) {
            const std::string& _s = this_._internal_key();
            target = stream->WriteBytesMaybeAliased(1, _s, target);
          }

          // uint64 offset = 2 [json_name = "offset"];
          if (this_._internal_offset() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                2, this_._internal_offset(), target);
          }

          // uint64 limit = 3 [json_name = "limit"];
          if (this_._internal_limit() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                3, this_._internal_limit(), target);
          }

          // bool count_total = 4 [json_name = "countTotal"];
          if (this_._internal_count_total() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_count_total(), target);
          }

          // bool reverse = 5 [json_name = "reverse"];
          if (this_._internal_reverse() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_reverse(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.query.v1beta1.PageRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PageRequest::ByteSizeLong(const MessageLite& base) {
          const PageRequest& this_ = static_cast<const PageRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PageRequest::ByteSizeLong() const {
          const PageRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.base.query.v1beta1.PageRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bytes key = 1 [json_name = "key"];
            if (!this_._internal_key().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_key());
            }
            // uint64 offset = 2 [json_name = "offset"];
            if (this_._internal_offset() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_offset());
            }
            // uint64 limit = 3 [json_name = "limit"];
            if (this_._internal_limit() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_limit());
            }
            // bool count_total = 4 [json_name = "countTotal"];
            if (this_._internal_count_total() != 0) {
              total_size += 2;
            }
            // bool reverse = 5 [json_name = "reverse"];
            if (this_._internal_reverse() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PageRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PageRequest*>(&to_msg);
  auto& from = static_cast<const PageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.query.v1beta1.PageRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_offset() != 0) {
    _this->_impl_.offset_ = from._impl_.offset_;
  }
  if (from._internal_limit() != 0) {
    _this->_impl_.limit_ = from._impl_.limit_;
  }
  if (from._internal_count_total() != 0) {
    _this->_impl_.count_total_ = from._impl_.count_total_;
  }
  if (from._internal_reverse() != 0) {
    _this->_impl_.reverse_ = from._impl_.reverse_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PageRequest::CopyFrom(const PageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.query.v1beta1.PageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PageRequest::InternalSwap(PageRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, &other->_impl_.key_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PageRequest, _impl_.reverse_)
      + sizeof(PageRequest::_impl_.reverse_)
      - PROTOBUF_FIELD_OFFSET(PageRequest, _impl_.offset_)>(
          reinterpret_cast<char*>(&_impl_.offset_),
          reinterpret_cast<char*>(&other->_impl_.offset_));
}

::google::protobuf::Metadata PageRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PageResponse::_Internal {
 public:
};

PageResponse::PageResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.query.v1beta1.PageResponse)
}
inline PROTOBUF_NDEBUG_INLINE PageResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::base::query::v1beta1::PageResponse& from_msg)
      : next_key_(arena, from.next_key_),
        _cached_size_{0} {}

PageResponse::PageResponse(
    ::google::protobuf::Arena* arena,
    const PageResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PageResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.total_ = from._impl_.total_;

  // @@protoc_insertion_point(copy_constructor:cosmos.base.query.v1beta1.PageResponse)
}
inline PROTOBUF_NDEBUG_INLINE PageResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : next_key_(arena),
        _cached_size_{0} {}

inline void PageResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.total_ = {};
}
PageResponse::~PageResponse() {
  // @@protoc_insertion_point(destructor:cosmos.base.query.v1beta1.PageResponse)
  SharedDtor(*this);
}
inline void PageResponse::SharedDtor(MessageLite& self) {
  PageResponse& this_ = static_cast<PageResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.next_key_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PageResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PageResponse(arena);
}
constexpr auto PageResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(PageResponse),
                                            alignof(PageResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PageResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PageResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PageResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PageResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PageResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PageResponse>(), &PageResponse::ByteSizeLong,
            &PageResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PageResponse, _impl_._cached_size_),
        false,
    },
    &PageResponse::kDescriptorMethods,
    &descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PageResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> PageResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::base::query::v1beta1::PageResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint64 total = 2 [json_name = "total"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(PageResponse, _impl_.total_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PageResponse, _impl_.total_)}},
    // bytes next_key = 1 [json_name = "nextKey"];
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PageResponse, _impl_.next_key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes next_key = 1 [json_name = "nextKey"];
    {PROTOBUF_FIELD_OFFSET(PageResponse, _impl_.next_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // uint64 total = 2 [json_name = "total"];
    {PROTOBUF_FIELD_OFFSET(PageResponse, _impl_.total_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void PageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.query.v1beta1.PageResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.next_key_.ClearToEmpty();
  _impl_.total_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PageResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PageResponse& this_ = static_cast<const PageResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PageResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PageResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.query.v1beta1.PageResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bytes next_key = 1 [json_name = "nextKey"];
          if (!this_._internal_next_key().empty()) {
            const std::string& _s = this_._internal_next_key();
            target = stream->WriteBytesMaybeAliased(1, _s, target);
          }

          // uint64 total = 2 [json_name = "total"];
          if (this_._internal_total() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                2, this_._internal_total(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.query.v1beta1.PageResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PageResponse::ByteSizeLong(const MessageLite& base) {
          const PageResponse& this_ = static_cast<const PageResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PageResponse::ByteSizeLong() const {
          const PageResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.base.query.v1beta1.PageResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bytes next_key = 1 [json_name = "nextKey"];
            if (!this_._internal_next_key().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_next_key());
            }
            // uint64 total = 2 [json_name = "total"];
            if (this_._internal_total() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_total());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PageResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PageResponse*>(&to_msg);
  auto& from = static_cast<const PageResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.query.v1beta1.PageResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_next_key().empty()) {
    _this->_internal_set_next_key(from._internal_next_key());
  }
  if (from._internal_total() != 0) {
    _this->_impl_.total_ = from._impl_.total_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PageResponse::CopyFrom(const PageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.query.v1beta1.PageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PageResponse::InternalSwap(PageResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.next_key_, &other->_impl_.next_key_, arena);
        swap(_impl_.total_, other->_impl_.total_);
}

::google::protobuf::Metadata PageResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace query
}  // namespace base
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
