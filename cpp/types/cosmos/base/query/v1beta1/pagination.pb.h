// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/base/query/v1beta1/pagination.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto_2epb_2eh
#define cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cosmos_proto/cosmos.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto;
namespace cosmos {
namespace base {
namespace query {
namespace v1beta1 {
class PageRequest;
struct PageRequestDefaultTypeInternal;
extern PageRequestDefaultTypeInternal _PageRequest_default_instance_;
class PageResponse;
struct PageResponseDefaultTypeInternal;
extern PageResponseDefaultTypeInternal _PageResponse_default_instance_;
}  // namespace v1beta1
}  // namespace query
}  // namespace base
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace base {
namespace query {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class PageResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.base.query.v1beta1.PageResponse) */ {
 public:
  inline PageResponse() : PageResponse(nullptr) {}
  ~PageResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PageResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PageResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PageResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PageResponse(const PageResponse& from) : PageResponse(nullptr, from) {}
  inline PageResponse(PageResponse&& from) noexcept
      : PageResponse(nullptr, std::move(from)) {}
  inline PageResponse& operator=(const PageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageResponse& operator=(PageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PageResponse* internal_default_instance() {
    return reinterpret_cast<const PageResponse*>(
        &_PageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(PageResponse& a, PageResponse& b) { a.Swap(&b); }
  inline void Swap(PageResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PageResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PageResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PageResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PageResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PageResponse& from) { PageResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PageResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.base.query.v1beta1.PageResponse"; }

 protected:
  explicit PageResponse(::google::protobuf::Arena* arena);
  PageResponse(::google::protobuf::Arena* arena, const PageResponse& from);
  PageResponse(::google::protobuf::Arena* arena, PageResponse&& from) noexcept
      : PageResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNextKeyFieldNumber = 1,
    kTotalFieldNumber = 2,
  };
  // bytes next_key = 1 [json_name = "nextKey"];
  void clear_next_key() ;
  const std::string& next_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_next_key(Arg_&& arg, Args_... args);
  std::string* mutable_next_key();
  PROTOBUF_NODISCARD std::string* release_next_key();
  void set_allocated_next_key(std::string* value);

  private:
  const std::string& _internal_next_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_key(
      const std::string& value);
  std::string* _internal_mutable_next_key();

  public:
  // uint64 total = 2 [json_name = "total"];
  void clear_total() ;
  ::uint64_t total() const;
  void set_total(::uint64_t value);

  private:
  ::uint64_t _internal_total() const;
  void _internal_set_total(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.query.v1beta1.PageResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PageResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr next_key_;
    ::uint64_t total_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto;
};
// -------------------------------------------------------------------

class PageRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.base.query.v1beta1.PageRequest) */ {
 public:
  inline PageRequest() : PageRequest(nullptr) {}
  ~PageRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PageRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PageRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PageRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PageRequest(const PageRequest& from) : PageRequest(nullptr, from) {}
  inline PageRequest(PageRequest&& from) noexcept
      : PageRequest(nullptr, std::move(from)) {}
  inline PageRequest& operator=(const PageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageRequest& operator=(PageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PageRequest* internal_default_instance() {
    return reinterpret_cast<const PageRequest*>(
        &_PageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(PageRequest& a, PageRequest& b) { a.Swap(&b); }
  inline void Swap(PageRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PageRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PageRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PageRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PageRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PageRequest& from) { PageRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PageRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.base.query.v1beta1.PageRequest"; }

 protected:
  explicit PageRequest(::google::protobuf::Arena* arena);
  PageRequest(::google::protobuf::Arena* arena, const PageRequest& from);
  PageRequest(::google::protobuf::Arena* arena, PageRequest&& from) noexcept
      : PageRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeyFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kLimitFieldNumber = 3,
    kCountTotalFieldNumber = 4,
    kReverseFieldNumber = 5,
  };
  // bytes key = 1 [json_name = "key"];
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // uint64 offset = 2 [json_name = "offset"];
  void clear_offset() ;
  ::uint64_t offset() const;
  void set_offset(::uint64_t value);

  private:
  ::uint64_t _internal_offset() const;
  void _internal_set_offset(::uint64_t value);

  public:
  // uint64 limit = 3 [json_name = "limit"];
  void clear_limit() ;
  ::uint64_t limit() const;
  void set_limit(::uint64_t value);

  private:
  ::uint64_t _internal_limit() const;
  void _internal_set_limit(::uint64_t value);

  public:
  // bool count_total = 4 [json_name = "countTotal"];
  void clear_count_total() ;
  bool count_total() const;
  void set_count_total(bool value);

  private:
  bool _internal_count_total() const;
  void _internal_set_count_total(bool value);

  public:
  // bool reverse = 5 [json_name = "reverse", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.43"];
  void clear_reverse() ;
  bool reverse() const;
  void set_reverse(bool value);

  private:
  bool _internal_reverse() const;
  void _internal_set_reverse(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.query.v1beta1.PageRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PageRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::uint64_t offset_;
    ::uint64_t limit_;
    bool count_total_;
    bool reverse_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PageRequest

// bytes key = 1 [json_name = "key"];
inline void PageRequest::clear_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& PageRequest::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.query.v1beta1.PageRequest.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PageRequest::set_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.query.v1beta1.PageRequest.key)
}
inline std::string* PageRequest::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:cosmos.base.query.v1beta1.PageRequest.key)
  return _s;
}
inline const std::string& PageRequest::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_.Get();
}
inline void PageRequest::_internal_set_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(value, GetArena());
}
inline std::string* PageRequest::_internal_mutable_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* PageRequest::release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.query.v1beta1.PageRequest.key)
  return _impl_.key_.Release();
}
inline void PageRequest::set_allocated_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.query.v1beta1.PageRequest.key)
}

// uint64 offset = 2 [json_name = "offset"];
inline void PageRequest::clear_offset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.offset_ = ::uint64_t{0u};
}
inline ::uint64_t PageRequest::offset() const {
  // @@protoc_insertion_point(field_get:cosmos.base.query.v1beta1.PageRequest.offset)
  return _internal_offset();
}
inline void PageRequest::set_offset(::uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:cosmos.base.query.v1beta1.PageRequest.offset)
}
inline ::uint64_t PageRequest::_internal_offset() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.offset_;
}
inline void PageRequest::_internal_set_offset(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.offset_ = value;
}

// uint64 limit = 3 [json_name = "limit"];
inline void PageRequest::clear_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = ::uint64_t{0u};
}
inline ::uint64_t PageRequest::limit() const {
  // @@protoc_insertion_point(field_get:cosmos.base.query.v1beta1.PageRequest.limit)
  return _internal_limit();
}
inline void PageRequest::set_limit(::uint64_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:cosmos.base.query.v1beta1.PageRequest.limit)
}
inline ::uint64_t PageRequest::_internal_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.limit_;
}
inline void PageRequest::_internal_set_limit(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = value;
}

// bool count_total = 4 [json_name = "countTotal"];
inline void PageRequest::clear_count_total() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_total_ = false;
}
inline bool PageRequest::count_total() const {
  // @@protoc_insertion_point(field_get:cosmos.base.query.v1beta1.PageRequest.count_total)
  return _internal_count_total();
}
inline void PageRequest::set_count_total(bool value) {
  _internal_set_count_total(value);
  // @@protoc_insertion_point(field_set:cosmos.base.query.v1beta1.PageRequest.count_total)
}
inline bool PageRequest::_internal_count_total() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.count_total_;
}
inline void PageRequest::_internal_set_count_total(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_total_ = value;
}

// bool reverse = 5 [json_name = "reverse", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.43"];
inline void PageRequest::clear_reverse() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reverse_ = false;
}
inline bool PageRequest::reverse() const {
  // @@protoc_insertion_point(field_get:cosmos.base.query.v1beta1.PageRequest.reverse)
  return _internal_reverse();
}
inline void PageRequest::set_reverse(bool value) {
  _internal_set_reverse(value);
  // @@protoc_insertion_point(field_set:cosmos.base.query.v1beta1.PageRequest.reverse)
}
inline bool PageRequest::_internal_reverse() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reverse_;
}
inline void PageRequest::_internal_set_reverse(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reverse_ = value;
}

// -------------------------------------------------------------------

// PageResponse

// bytes next_key = 1 [json_name = "nextKey"];
inline void PageResponse::clear_next_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_key_.ClearToEmpty();
}
inline const std::string& PageResponse::next_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.query.v1beta1.PageResponse.next_key)
  return _internal_next_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PageResponse::set_next_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.query.v1beta1.PageResponse.next_key)
}
inline std::string* PageResponse::mutable_next_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_next_key();
  // @@protoc_insertion_point(field_mutable:cosmos.base.query.v1beta1.PageResponse.next_key)
  return _s;
}
inline const std::string& PageResponse::_internal_next_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.next_key_.Get();
}
inline void PageResponse::_internal_set_next_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_key_.Set(value, GetArena());
}
inline std::string* PageResponse::_internal_mutable_next_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.next_key_.Mutable( GetArena());
}
inline std::string* PageResponse::release_next_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.query.v1beta1.PageResponse.next_key)
  return _impl_.next_key_.Release();
}
inline void PageResponse::set_allocated_next_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.next_key_.IsDefault()) {
    _impl_.next_key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.query.v1beta1.PageResponse.next_key)
}

// uint64 total = 2 [json_name = "total"];
inline void PageResponse::clear_total() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_ = ::uint64_t{0u};
}
inline ::uint64_t PageResponse::total() const {
  // @@protoc_insertion_point(field_get:cosmos.base.query.v1beta1.PageResponse.total)
  return _internal_total();
}
inline void PageResponse::set_total(::uint64_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:cosmos.base.query.v1beta1.PageResponse.total)
}
inline ::uint64_t PageResponse::_internal_total() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_;
}
inline void PageResponse::_internal_set_total(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace query
}  // namespace base
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto_2epb_2eh
