// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/base/abci/v1beta1/abci.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto_2epb_2eh
#define cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "tendermint/abci/types.pb.h"
#include "tendermint/types/block.pb.h"
#include "google/protobuf/any.pb.h"
#include "cosmos_proto/cosmos.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto;
namespace cosmos {
namespace base {
namespace abci {
namespace v1beta1 {
class ABCIMessageLog;
struct ABCIMessageLogDefaultTypeInternal;
extern ABCIMessageLogDefaultTypeInternal _ABCIMessageLog_default_instance_;
class Attribute;
struct AttributeDefaultTypeInternal;
extern AttributeDefaultTypeInternal _Attribute_default_instance_;
class GasInfo;
struct GasInfoDefaultTypeInternal;
extern GasInfoDefaultTypeInternal _GasInfo_default_instance_;
class MsgData;
struct MsgDataDefaultTypeInternal;
extern MsgDataDefaultTypeInternal _MsgData_default_instance_;
class Result;
struct ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class SearchBlocksResult;
struct SearchBlocksResultDefaultTypeInternal;
extern SearchBlocksResultDefaultTypeInternal _SearchBlocksResult_default_instance_;
class SearchTxsResult;
struct SearchTxsResultDefaultTypeInternal;
extern SearchTxsResultDefaultTypeInternal _SearchTxsResult_default_instance_;
class SimulationResponse;
struct SimulationResponseDefaultTypeInternal;
extern SimulationResponseDefaultTypeInternal _SimulationResponse_default_instance_;
class StringEvent;
struct StringEventDefaultTypeInternal;
extern StringEventDefaultTypeInternal _StringEvent_default_instance_;
class TxMsgData;
struct TxMsgDataDefaultTypeInternal;
extern TxMsgDataDefaultTypeInternal _TxMsgData_default_instance_;
class TxResponse;
struct TxResponseDefaultTypeInternal;
extern TxResponseDefaultTypeInternal _TxResponse_default_instance_;
}  // namespace v1beta1
}  // namespace abci
}  // namespace base
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace base {
namespace abci {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class MsgData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.base.abci.v1beta1.MsgData) */ {
 public:
  inline MsgData() : MsgData(nullptr) {}
  ~MsgData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgData(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgData(const MsgData& from) : MsgData(nullptr, from) {}
  inline MsgData(MsgData&& from) noexcept
      : MsgData(nullptr, std::move(from)) {}
  inline MsgData& operator=(const MsgData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgData& operator=(MsgData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgData* internal_default_instance() {
    return reinterpret_cast<const MsgData*>(
        &_MsgData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(MsgData& a, MsgData& b) { a.Swap(&b); }
  inline void Swap(MsgData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgData& from) { MsgData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.base.abci.v1beta1.MsgData"; }

 protected:
  explicit MsgData(::google::protobuf::Arena* arena);
  MsgData(::google::protobuf::Arena* arena, const MsgData& from);
  MsgData(::google::protobuf::Arena* arena, MsgData&& from) noexcept
      : MsgData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMsgTypeFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string msg_type = 1 [json_name = "msgType"];
  void clear_msg_type() ;
  const std::string& msg_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg_type(Arg_&& arg, Args_... args);
  std::string* mutable_msg_type();
  PROTOBUF_NODISCARD std::string* release_msg_type();
  void set_allocated_msg_type(std::string* value);

  private:
  const std::string& _internal_msg_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_type(
      const std::string& value);
  std::string* _internal_mutable_msg_type();

  public:
  // bytes data = 2 [json_name = "data"];
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.abci.v1beta1.MsgData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgData& from_msg);
    ::google::protobuf::internal::ArenaStringPtr msg_type_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto;
};
// -------------------------------------------------------------------

class GasInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.base.abci.v1beta1.GasInfo) */ {
 public:
  inline GasInfo() : GasInfo(nullptr) {}
  ~GasInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GasInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GasInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GasInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline GasInfo(const GasInfo& from) : GasInfo(nullptr, from) {}
  inline GasInfo(GasInfo&& from) noexcept
      : GasInfo(nullptr, std::move(from)) {}
  inline GasInfo& operator=(const GasInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GasInfo& operator=(GasInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GasInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GasInfo* internal_default_instance() {
    return reinterpret_cast<const GasInfo*>(
        &_GasInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(GasInfo& a, GasInfo& b) { a.Swap(&b); }
  inline void Swap(GasInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GasInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GasInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GasInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GasInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GasInfo& from) { GasInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GasInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.base.abci.v1beta1.GasInfo"; }

 protected:
  explicit GasInfo(::google::protobuf::Arena* arena);
  GasInfo(::google::protobuf::Arena* arena, const GasInfo& from);
  GasInfo(::google::protobuf::Arena* arena, GasInfo&& from) noexcept
      : GasInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGasWantedFieldNumber = 1,
    kGasUsedFieldNumber = 2,
  };
  // uint64 gas_wanted = 1 [json_name = "gasWanted"];
  void clear_gas_wanted() ;
  ::uint64_t gas_wanted() const;
  void set_gas_wanted(::uint64_t value);

  private:
  ::uint64_t _internal_gas_wanted() const;
  void _internal_set_gas_wanted(::uint64_t value);

  public:
  // uint64 gas_used = 2 [json_name = "gasUsed"];
  void clear_gas_used() ;
  ::uint64_t gas_used() const;
  void set_gas_used(::uint64_t value);

  private:
  ::uint64_t _internal_gas_used() const;
  void _internal_set_gas_used(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.abci.v1beta1.GasInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GasInfo& from_msg);
    ::uint64_t gas_wanted_;
    ::uint64_t gas_used_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto;
};
// -------------------------------------------------------------------

class Attribute final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.base.abci.v1beta1.Attribute) */ {
 public:
  inline Attribute() : Attribute(nullptr) {}
  ~Attribute() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Attribute* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Attribute));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Attribute(
      ::google::protobuf::internal::ConstantInitialized);

  inline Attribute(const Attribute& from) : Attribute(nullptr, from) {}
  inline Attribute(Attribute&& from) noexcept
      : Attribute(nullptr, std::move(from)) {}
  inline Attribute& operator=(const Attribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attribute& operator=(Attribute&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Attribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const Attribute* internal_default_instance() {
    return reinterpret_cast<const Attribute*>(
        &_Attribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Attribute& a, Attribute& b) { a.Swap(&b); }
  inline void Swap(Attribute* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Attribute* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Attribute* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Attribute>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Attribute& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Attribute& from) { Attribute::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Attribute* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.base.abci.v1beta1.Attribute"; }

 protected:
  explicit Attribute(::google::protobuf::Arena* arena);
  Attribute(::google::protobuf::Arena* arena, const Attribute& from);
  Attribute(::google::protobuf::Arena* arena, Attribute&& from) noexcept
      : Attribute(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1 [json_name = "key"];
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // string value = 2 [json_name = "value"];
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.abci.v1beta1.Attribute)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Attribute& from_msg);
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto;
};
// -------------------------------------------------------------------

class TxMsgData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.base.abci.v1beta1.TxMsgData) */ {
 public:
  inline TxMsgData() : TxMsgData(nullptr) {}
  ~TxMsgData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TxMsgData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TxMsgData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TxMsgData(
      ::google::protobuf::internal::ConstantInitialized);

  inline TxMsgData(const TxMsgData& from) : TxMsgData(nullptr, from) {}
  inline TxMsgData(TxMsgData&& from) noexcept
      : TxMsgData(nullptr, std::move(from)) {}
  inline TxMsgData& operator=(const TxMsgData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxMsgData& operator=(TxMsgData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxMsgData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxMsgData* internal_default_instance() {
    return reinterpret_cast<const TxMsgData*>(
        &_TxMsgData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(TxMsgData& a, TxMsgData& b) { a.Swap(&b); }
  inline void Swap(TxMsgData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxMsgData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxMsgData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TxMsgData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TxMsgData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TxMsgData& from) { TxMsgData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TxMsgData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.base.abci.v1beta1.TxMsgData"; }

 protected:
  explicit TxMsgData(::google::protobuf::Arena* arena);
  TxMsgData(::google::protobuf::Arena* arena, const TxMsgData& from);
  TxMsgData(::google::protobuf::Arena* arena, TxMsgData&& from) noexcept
      : TxMsgData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
    kMsgResponsesFieldNumber = 2,
  };
  // repeated .cosmos.base.abci.v1beta1.MsgData data = 1 [json_name = "data", deprecated = true];
  [[deprecated]]  int data_size() const;
  private:
  int _internal_data_size() const;

  public:
  [[deprecated]]  void clear_data() ;
  [[deprecated]] ::cosmos::base::abci::v1beta1::MsgData* mutable_data(int index);
  [[deprecated]] ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::MsgData>* mutable_data();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::MsgData>& _internal_data() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::MsgData>* _internal_mutable_data();
  public:
  [[deprecated]] const ::cosmos::base::abci::v1beta1::MsgData& data(int index) const;
  [[deprecated]] ::cosmos::base::abci::v1beta1::MsgData* add_data();
  [[deprecated]] const ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::MsgData>& data() const;
  // repeated .google.protobuf.Any msg_responses = 2 [json_name = "msgResponses", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.46"];
  int msg_responses_size() const;
  private:
  int _internal_msg_responses_size() const;

  public:
  void clear_msg_responses() ;
  ::google::protobuf::Any* mutable_msg_responses(int index);
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* mutable_msg_responses();

  private:
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& _internal_msg_responses() const;
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* _internal_mutable_msg_responses();
  public:
  const ::google::protobuf::Any& msg_responses(int index) const;
  ::google::protobuf::Any* add_msg_responses();
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& msg_responses() const;
  // @@protoc_insertion_point(class_scope:cosmos.base.abci.v1beta1.TxMsgData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TxMsgData& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::base::abci::v1beta1::MsgData > data_;
    ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > msg_responses_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto;
};
// -------------------------------------------------------------------

class StringEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.base.abci.v1beta1.StringEvent) */ {
 public:
  inline StringEvent() : StringEvent(nullptr) {}
  ~StringEvent() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StringEvent* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StringEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StringEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline StringEvent(const StringEvent& from) : StringEvent(nullptr, from) {}
  inline StringEvent(StringEvent&& from) noexcept
      : StringEvent(nullptr, std::move(from)) {}
  inline StringEvent& operator=(const StringEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringEvent& operator=(StringEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringEvent* internal_default_instance() {
    return reinterpret_cast<const StringEvent*>(
        &_StringEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(StringEvent& a, StringEvent& b) { a.Swap(&b); }
  inline void Swap(StringEvent* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringEvent* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StringEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StringEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StringEvent& from) { StringEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StringEvent* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.base.abci.v1beta1.StringEvent"; }

 protected:
  explicit StringEvent(::google::protobuf::Arena* arena);
  StringEvent(::google::protobuf::Arena* arena, const StringEvent& from);
  StringEvent(::google::protobuf::Arena* arena, StringEvent&& from) noexcept
      : StringEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAttributesFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .cosmos.base.abci.v1beta1.Attribute attributes = 2 [json_name = "attributes", (.gogoproto.nullable) = false];
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;

  public:
  void clear_attributes() ;
  ::cosmos::base::abci::v1beta1::Attribute* mutable_attributes(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::Attribute>* mutable_attributes();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::Attribute>& _internal_attributes() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::Attribute>* _internal_mutable_attributes();
  public:
  const ::cosmos::base::abci::v1beta1::Attribute& attributes(int index) const;
  ::cosmos::base::abci::v1beta1::Attribute* add_attributes();
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::Attribute>& attributes() const;
  // string type = 1 [json_name = "type"];
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.abci.v1beta1.StringEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StringEvent& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::base::abci::v1beta1::Attribute > attributes_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto;
};
// -------------------------------------------------------------------

class Result final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.base.abci.v1beta1.Result) */ {
 public:
  inline Result() : Result(nullptr) {}
  ~Result() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Result* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Result));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Result(
      ::google::protobuf::internal::ConstantInitialized);

  inline Result(const Result& from) : Result(nullptr, from) {}
  inline Result(Result&& from) noexcept
      : Result(nullptr, std::move(from)) {}
  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
        &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Result& a, Result& b) { a.Swap(&b); }
  inline void Swap(Result* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Result* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Result>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Result& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Result& from) { Result::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Result* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.base.abci.v1beta1.Result"; }

 protected:
  explicit Result(::google::protobuf::Arena* arena);
  Result(::google::protobuf::Arena* arena, const Result& from);
  Result(::google::protobuf::Arena* arena, Result&& from) noexcept
      : Result(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEventsFieldNumber = 3,
    kMsgResponsesFieldNumber = 4,
    kDataFieldNumber = 1,
    kLogFieldNumber = 2,
  };
  // repeated .tendermint.abci.Event events = 3 [json_name = "events", (.gogoproto.nullable) = false];
  int events_size() const;
  private:
  int _internal_events_size() const;

  public:
  void clear_events() ;
  ::tendermint::abci::Event* mutable_events(int index);
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>* mutable_events();

  private:
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>& _internal_events() const;
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>* _internal_mutable_events();
  public:
  const ::tendermint::abci::Event& events(int index) const;
  ::tendermint::abci::Event* add_events();
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>& events() const;
  // repeated .google.protobuf.Any msg_responses = 4 [json_name = "msgResponses", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.46"];
  int msg_responses_size() const;
  private:
  int _internal_msg_responses_size() const;

  public:
  void clear_msg_responses() ;
  ::google::protobuf::Any* mutable_msg_responses(int index);
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* mutable_msg_responses();

  private:
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& _internal_msg_responses() const;
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* _internal_mutable_msg_responses();
  public:
  const ::google::protobuf::Any& msg_responses(int index) const;
  ::google::protobuf::Any* add_msg_responses();
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& msg_responses() const;
  // bytes data = 1 [json_name = "data", deprecated = true];
  [[deprecated]]  void clear_data() ;
  [[deprecated]] const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_data(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_data();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_data();
  [[deprecated]] void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // string log = 2 [json_name = "log"];
  void clear_log() ;
  const std::string& log() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_log(Arg_&& arg, Args_... args);
  std::string* mutable_log();
  PROTOBUF_NODISCARD std::string* release_log();
  void set_allocated_log(std::string* value);

  private:
  const std::string& _internal_log() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log(
      const std::string& value);
  std::string* _internal_mutable_log();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.abci.v1beta1.Result)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      43, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Result& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tendermint::abci::Event > events_;
    ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > msg_responses_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::ArenaStringPtr log_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto;
};
// -------------------------------------------------------------------

class ABCIMessageLog final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.base.abci.v1beta1.ABCIMessageLog) */ {
 public:
  inline ABCIMessageLog() : ABCIMessageLog(nullptr) {}
  ~ABCIMessageLog() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ABCIMessageLog* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ABCIMessageLog));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ABCIMessageLog(
      ::google::protobuf::internal::ConstantInitialized);

  inline ABCIMessageLog(const ABCIMessageLog& from) : ABCIMessageLog(nullptr, from) {}
  inline ABCIMessageLog(ABCIMessageLog&& from) noexcept
      : ABCIMessageLog(nullptr, std::move(from)) {}
  inline ABCIMessageLog& operator=(const ABCIMessageLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline ABCIMessageLog& operator=(ABCIMessageLog&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ABCIMessageLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const ABCIMessageLog* internal_default_instance() {
    return reinterpret_cast<const ABCIMessageLog*>(
        &_ABCIMessageLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ABCIMessageLog& a, ABCIMessageLog& b) { a.Swap(&b); }
  inline void Swap(ABCIMessageLog* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ABCIMessageLog* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ABCIMessageLog* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ABCIMessageLog>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ABCIMessageLog& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ABCIMessageLog& from) { ABCIMessageLog::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ABCIMessageLog* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.base.abci.v1beta1.ABCIMessageLog"; }

 protected:
  explicit ABCIMessageLog(::google::protobuf::Arena* arena);
  ABCIMessageLog(::google::protobuf::Arena* arena, const ABCIMessageLog& from);
  ABCIMessageLog(::google::protobuf::Arena* arena, ABCIMessageLog&& from) noexcept
      : ABCIMessageLog(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEventsFieldNumber = 3,
    kLogFieldNumber = 2,
    kMsgIndexFieldNumber = 1,
  };
  // repeated .cosmos.base.abci.v1beta1.StringEvent events = 3 [json_name = "events", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "StringEvents"];
  int events_size() const;
  private:
  int _internal_events_size() const;

  public:
  void clear_events() ;
  ::cosmos::base::abci::v1beta1::StringEvent* mutable_events(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::StringEvent>* mutable_events();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::StringEvent>& _internal_events() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::StringEvent>* _internal_mutable_events();
  public:
  const ::cosmos::base::abci::v1beta1::StringEvent& events(int index) const;
  ::cosmos::base::abci::v1beta1::StringEvent* add_events();
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::StringEvent>& events() const;
  // string log = 2 [json_name = "log"];
  void clear_log() ;
  const std::string& log() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_log(Arg_&& arg, Args_... args);
  std::string* mutable_log();
  PROTOBUF_NODISCARD std::string* release_log();
  void set_allocated_log(std::string* value);

  private:
  const std::string& _internal_log() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log(
      const std::string& value);
  std::string* _internal_mutable_log();

  public:
  // uint32 msg_index = 1 [json_name = "msgIndex", (.gogoproto.jsontag) = "msg_index"];
  void clear_msg_index() ;
  ::uint32_t msg_index() const;
  void set_msg_index(::uint32_t value);

  private:
  ::uint32_t _internal_msg_index() const;
  void _internal_set_msg_index(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.abci.v1beta1.ABCIMessageLog)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ABCIMessageLog& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::base::abci::v1beta1::StringEvent > events_;
    ::google::protobuf::internal::ArenaStringPtr log_;
    ::uint32_t msg_index_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto;
};
// -------------------------------------------------------------------

class TxResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.base.abci.v1beta1.TxResponse) */ {
 public:
  inline TxResponse() : TxResponse(nullptr) {}
  ~TxResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TxResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TxResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TxResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline TxResponse(const TxResponse& from) : TxResponse(nullptr, from) {}
  inline TxResponse(TxResponse&& from) noexcept
      : TxResponse(nullptr, std::move(from)) {}
  inline TxResponse& operator=(const TxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxResponse& operator=(TxResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxResponse* internal_default_instance() {
    return reinterpret_cast<const TxResponse*>(
        &_TxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(TxResponse& a, TxResponse& b) { a.Swap(&b); }
  inline void Swap(TxResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TxResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TxResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TxResponse& from) { TxResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TxResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.base.abci.v1beta1.TxResponse"; }

 protected:
  explicit TxResponse(::google::protobuf::Arena* arena);
  TxResponse(::google::protobuf::Arena* arena, const TxResponse& from);
  TxResponse(::google::protobuf::Arena* arena, TxResponse&& from) noexcept
      : TxResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLogsFieldNumber = 7,
    kEventsFieldNumber = 13,
    kTxhashFieldNumber = 2,
    kCodespaceFieldNumber = 3,
    kDataFieldNumber = 5,
    kRawLogFieldNumber = 6,
    kInfoFieldNumber = 8,
    kTimestampFieldNumber = 12,
    kTxFieldNumber = 11,
    kHeightFieldNumber = 1,
    kGasWantedFieldNumber = 9,
    kGasUsedFieldNumber = 10,
    kCodeFieldNumber = 4,
  };
  // repeated .cosmos.base.abci.v1beta1.ABCIMessageLog logs = 7 [json_name = "logs", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ABCIMessageLogs"];
  int logs_size() const;
  private:
  int _internal_logs_size() const;

  public:
  void clear_logs() ;
  ::cosmos::base::abci::v1beta1::ABCIMessageLog* mutable_logs(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::ABCIMessageLog>* mutable_logs();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::ABCIMessageLog>& _internal_logs() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::ABCIMessageLog>* _internal_mutable_logs();
  public:
  const ::cosmos::base::abci::v1beta1::ABCIMessageLog& logs(int index) const;
  ::cosmos::base::abci::v1beta1::ABCIMessageLog* add_logs();
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::ABCIMessageLog>& logs() const;
  // repeated .tendermint.abci.Event events = 13 [json_name = "events", (.gogoproto.nullable) = false, (.cosmos_proto.field_added_in) = "cosmos-sdk 0.45"];
  int events_size() const;
  private:
  int _internal_events_size() const;

  public:
  void clear_events() ;
  ::tendermint::abci::Event* mutable_events(int index);
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>* mutable_events();

  private:
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>& _internal_events() const;
  ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>* _internal_mutable_events();
  public:
  const ::tendermint::abci::Event& events(int index) const;
  ::tendermint::abci::Event* add_events();
  const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>& events() const;
  // string txhash = 2 [json_name = "txhash", (.gogoproto.customname) = "TxHash"];
  void clear_txhash() ;
  const std::string& txhash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_txhash(Arg_&& arg, Args_... args);
  std::string* mutable_txhash();
  PROTOBUF_NODISCARD std::string* release_txhash();
  void set_allocated_txhash(std::string* value);

  private:
  const std::string& _internal_txhash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_txhash(
      const std::string& value);
  std::string* _internal_mutable_txhash();

  public:
  // string codespace = 3 [json_name = "codespace"];
  void clear_codespace() ;
  const std::string& codespace() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_codespace(Arg_&& arg, Args_... args);
  std::string* mutable_codespace();
  PROTOBUF_NODISCARD std::string* release_codespace();
  void set_allocated_codespace(std::string* value);

  private:
  const std::string& _internal_codespace() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_codespace(
      const std::string& value);
  std::string* _internal_mutable_codespace();

  public:
  // string data = 5 [json_name = "data"];
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // string raw_log = 6 [json_name = "rawLog"];
  void clear_raw_log() ;
  const std::string& raw_log() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_raw_log(Arg_&& arg, Args_... args);
  std::string* mutable_raw_log();
  PROTOBUF_NODISCARD std::string* release_raw_log();
  void set_allocated_raw_log(std::string* value);

  private:
  const std::string& _internal_raw_log() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw_log(
      const std::string& value);
  std::string* _internal_mutable_raw_log();

  public:
  // string info = 8 [json_name = "info"];
  void clear_info() ;
  const std::string& info() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_info(Arg_&& arg, Args_... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* value);

  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(
      const std::string& value);
  std::string* _internal_mutable_info();

  public:
  // string timestamp = 12 [json_name = "timestamp"];
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // .google.protobuf.Any tx = 11 [json_name = "tx"];
  bool has_tx() const;
  void clear_tx() ;
  const ::google::protobuf::Any& tx() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_tx();
  ::google::protobuf::Any* mutable_tx();
  void set_allocated_tx(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_tx(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_tx();

  private:
  const ::google::protobuf::Any& _internal_tx() const;
  ::google::protobuf::Any* _internal_mutable_tx();

  public:
  // int64 height = 1 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // int64 gas_wanted = 9 [json_name = "gasWanted"];
  void clear_gas_wanted() ;
  ::int64_t gas_wanted() const;
  void set_gas_wanted(::int64_t value);

  private:
  ::int64_t _internal_gas_wanted() const;
  void _internal_set_gas_wanted(::int64_t value);

  public:
  // int64 gas_used = 10 [json_name = "gasUsed"];
  void clear_gas_used() ;
  ::int64_t gas_used() const;
  void set_gas_used(::int64_t value);

  private:
  ::int64_t _internal_gas_used() const;
  void _internal_set_gas_used(::int64_t value);

  public:
  // uint32 code = 4 [json_name = "code"];
  void clear_code() ;
  ::uint32_t code() const;
  void set_code(::uint32_t value);

  private:
  ::uint32_t _internal_code() const;
  void _internal_set_code(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.abci.v1beta1.TxResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 3,
      91, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TxResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::cosmos::base::abci::v1beta1::ABCIMessageLog > logs_;
    ::google::protobuf::RepeatedPtrField< ::tendermint::abci::Event > events_;
    ::google::protobuf::internal::ArenaStringPtr txhash_;
    ::google::protobuf::internal::ArenaStringPtr codespace_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::ArenaStringPtr raw_log_;
    ::google::protobuf::internal::ArenaStringPtr info_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::Any* tx_;
    ::int64_t height_;
    ::int64_t gas_wanted_;
    ::int64_t gas_used_;
    ::uint32_t code_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto;
};
// -------------------------------------------------------------------

class SimulationResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.base.abci.v1beta1.SimulationResponse) */ {
 public:
  inline SimulationResponse() : SimulationResponse(nullptr) {}
  ~SimulationResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SimulationResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SimulationResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SimulationResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SimulationResponse(const SimulationResponse& from) : SimulationResponse(nullptr, from) {}
  inline SimulationResponse(SimulationResponse&& from) noexcept
      : SimulationResponse(nullptr, std::move(from)) {}
  inline SimulationResponse& operator=(const SimulationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationResponse& operator=(SimulationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimulationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimulationResponse* internal_default_instance() {
    return reinterpret_cast<const SimulationResponse*>(
        &_SimulationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(SimulationResponse& a, SimulationResponse& b) { a.Swap(&b); }
  inline void Swap(SimulationResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimulationResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SimulationResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SimulationResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SimulationResponse& from) { SimulationResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SimulationResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.base.abci.v1beta1.SimulationResponse"; }

 protected:
  explicit SimulationResponse(::google::protobuf::Arena* arena);
  SimulationResponse(::google::protobuf::Arena* arena, const SimulationResponse& from);
  SimulationResponse(::google::protobuf::Arena* arena, SimulationResponse&& from) noexcept
      : SimulationResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGasInfoFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // .cosmos.base.abci.v1beta1.GasInfo gas_info = 1 [json_name = "gasInfo", (.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  bool has_gas_info() const;
  void clear_gas_info() ;
  const ::cosmos::base::abci::v1beta1::GasInfo& gas_info() const;
  PROTOBUF_NODISCARD ::cosmos::base::abci::v1beta1::GasInfo* release_gas_info();
  ::cosmos::base::abci::v1beta1::GasInfo* mutable_gas_info();
  void set_allocated_gas_info(::cosmos::base::abci::v1beta1::GasInfo* value);
  void unsafe_arena_set_allocated_gas_info(::cosmos::base::abci::v1beta1::GasInfo* value);
  ::cosmos::base::abci::v1beta1::GasInfo* unsafe_arena_release_gas_info();

  private:
  const ::cosmos::base::abci::v1beta1::GasInfo& _internal_gas_info() const;
  ::cosmos::base::abci::v1beta1::GasInfo* _internal_mutable_gas_info();

  public:
  // .cosmos.base.abci.v1beta1.Result result = 2 [json_name = "result"];
  bool has_result() const;
  void clear_result() ;
  const ::cosmos::base::abci::v1beta1::Result& result() const;
  PROTOBUF_NODISCARD ::cosmos::base::abci::v1beta1::Result* release_result();
  ::cosmos::base::abci::v1beta1::Result* mutable_result();
  void set_allocated_result(::cosmos::base::abci::v1beta1::Result* value);
  void unsafe_arena_set_allocated_result(::cosmos::base::abci::v1beta1::Result* value);
  ::cosmos::base::abci::v1beta1::Result* unsafe_arena_release_result();

  private:
  const ::cosmos::base::abci::v1beta1::Result& _internal_result() const;
  ::cosmos::base::abci::v1beta1::Result* _internal_mutable_result();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.abci.v1beta1.SimulationResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SimulationResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::cosmos::base::abci::v1beta1::GasInfo* gas_info_;
    ::cosmos::base::abci::v1beta1::Result* result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto;
};
// -------------------------------------------------------------------

class SearchTxsResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.base.abci.v1beta1.SearchTxsResult) */ {
 public:
  inline SearchTxsResult() : SearchTxsResult(nullptr) {}
  ~SearchTxsResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SearchTxsResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SearchTxsResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SearchTxsResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline SearchTxsResult(const SearchTxsResult& from) : SearchTxsResult(nullptr, from) {}
  inline SearchTxsResult(SearchTxsResult&& from) noexcept
      : SearchTxsResult(nullptr, std::move(from)) {}
  inline SearchTxsResult& operator=(const SearchTxsResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchTxsResult& operator=(SearchTxsResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchTxsResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchTxsResult* internal_default_instance() {
    return reinterpret_cast<const SearchTxsResult*>(
        &_SearchTxsResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(SearchTxsResult& a, SearchTxsResult& b) { a.Swap(&b); }
  inline void Swap(SearchTxsResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchTxsResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchTxsResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SearchTxsResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SearchTxsResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SearchTxsResult& from) { SearchTxsResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SearchTxsResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.base.abci.v1beta1.SearchTxsResult"; }

 protected:
  explicit SearchTxsResult(::google::protobuf::Arena* arena);
  SearchTxsResult(::google::protobuf::Arena* arena, const SearchTxsResult& from);
  SearchTxsResult(::google::protobuf::Arena* arena, SearchTxsResult&& from) noexcept
      : SearchTxsResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTxsFieldNumber = 6,
    kTotalCountFieldNumber = 1,
    kCountFieldNumber = 2,
    kPageNumberFieldNumber = 3,
    kPageTotalFieldNumber = 4,
    kLimitFieldNumber = 5,
  };
  // repeated .cosmos.base.abci.v1beta1.TxResponse txs = 6 [json_name = "txs"];
  int txs_size() const;
  private:
  int _internal_txs_size() const;

  public:
  void clear_txs() ;
  ::cosmos::base::abci::v1beta1::TxResponse* mutable_txs(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::TxResponse>* mutable_txs();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::TxResponse>& _internal_txs() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::TxResponse>* _internal_mutable_txs();
  public:
  const ::cosmos::base::abci::v1beta1::TxResponse& txs(int index) const;
  ::cosmos::base::abci::v1beta1::TxResponse* add_txs();
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::TxResponse>& txs() const;
  // uint64 total_count = 1 [json_name = "totalCount"];
  void clear_total_count() ;
  ::uint64_t total_count() const;
  void set_total_count(::uint64_t value);

  private:
  ::uint64_t _internal_total_count() const;
  void _internal_set_total_count(::uint64_t value);

  public:
  // uint64 count = 2 [json_name = "count"];
  void clear_count() ;
  ::uint64_t count() const;
  void set_count(::uint64_t value);

  private:
  ::uint64_t _internal_count() const;
  void _internal_set_count(::uint64_t value);

  public:
  // uint64 page_number = 3 [json_name = "pageNumber"];
  void clear_page_number() ;
  ::uint64_t page_number() const;
  void set_page_number(::uint64_t value);

  private:
  ::uint64_t _internal_page_number() const;
  void _internal_set_page_number(::uint64_t value);

  public:
  // uint64 page_total = 4 [json_name = "pageTotal"];
  void clear_page_total() ;
  ::uint64_t page_total() const;
  void set_page_total(::uint64_t value);

  private:
  ::uint64_t _internal_page_total() const;
  void _internal_set_page_total(::uint64_t value);

  public:
  // uint64 limit = 5 [json_name = "limit"];
  void clear_limit() ;
  ::uint64_t limit() const;
  void set_limit(::uint64_t value);

  private:
  ::uint64_t _internal_limit() const;
  void _internal_set_limit(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.abci.v1beta1.SearchTxsResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SearchTxsResult& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::base::abci::v1beta1::TxResponse > txs_;
    ::uint64_t total_count_;
    ::uint64_t count_;
    ::uint64_t page_number_;
    ::uint64_t page_total_;
    ::uint64_t limit_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto;
};
// -------------------------------------------------------------------

class SearchBlocksResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.base.abci.v1beta1.SearchBlocksResult) */ {
 public:
  inline SearchBlocksResult() : SearchBlocksResult(nullptr) {}
  ~SearchBlocksResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SearchBlocksResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SearchBlocksResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SearchBlocksResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline SearchBlocksResult(const SearchBlocksResult& from) : SearchBlocksResult(nullptr, from) {}
  inline SearchBlocksResult(SearchBlocksResult&& from) noexcept
      : SearchBlocksResult(nullptr, std::move(from)) {}
  inline SearchBlocksResult& operator=(const SearchBlocksResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchBlocksResult& operator=(SearchBlocksResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchBlocksResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchBlocksResult* internal_default_instance() {
    return reinterpret_cast<const SearchBlocksResult*>(
        &_SearchBlocksResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(SearchBlocksResult& a, SearchBlocksResult& b) { a.Swap(&b); }
  inline void Swap(SearchBlocksResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchBlocksResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchBlocksResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SearchBlocksResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SearchBlocksResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SearchBlocksResult& from) { SearchBlocksResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SearchBlocksResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.base.abci.v1beta1.SearchBlocksResult"; }

 protected:
  explicit SearchBlocksResult(::google::protobuf::Arena* arena);
  SearchBlocksResult(::google::protobuf::Arena* arena, const SearchBlocksResult& from);
  SearchBlocksResult(::google::protobuf::Arena* arena, SearchBlocksResult&& from) noexcept
      : SearchBlocksResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBlocksFieldNumber = 6,
    kTotalCountFieldNumber = 1,
    kCountFieldNumber = 2,
    kPageNumberFieldNumber = 3,
    kPageTotalFieldNumber = 4,
    kLimitFieldNumber = 5,
  };
  // repeated .tendermint.types.Block blocks = 6 [json_name = "blocks"];
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;

  public:
  void clear_blocks() ;
  ::tendermint::types::Block* mutable_blocks(int index);
  ::google::protobuf::RepeatedPtrField<::tendermint::types::Block>* mutable_blocks();

  private:
  const ::google::protobuf::RepeatedPtrField<::tendermint::types::Block>& _internal_blocks() const;
  ::google::protobuf::RepeatedPtrField<::tendermint::types::Block>* _internal_mutable_blocks();
  public:
  const ::tendermint::types::Block& blocks(int index) const;
  ::tendermint::types::Block* add_blocks();
  const ::google::protobuf::RepeatedPtrField<::tendermint::types::Block>& blocks() const;
  // int64 total_count = 1 [json_name = "totalCount"];
  void clear_total_count() ;
  ::int64_t total_count() const;
  void set_total_count(::int64_t value);

  private:
  ::int64_t _internal_total_count() const;
  void _internal_set_total_count(::int64_t value);

  public:
  // int64 count = 2 [json_name = "count"];
  void clear_count() ;
  ::int64_t count() const;
  void set_count(::int64_t value);

  private:
  ::int64_t _internal_count() const;
  void _internal_set_count(::int64_t value);

  public:
  // int64 page_number = 3 [json_name = "pageNumber"];
  void clear_page_number() ;
  ::int64_t page_number() const;
  void set_page_number(::int64_t value);

  private:
  ::int64_t _internal_page_number() const;
  void _internal_set_page_number(::int64_t value);

  public:
  // int64 page_total = 4 [json_name = "pageTotal"];
  void clear_page_total() ;
  ::int64_t page_total() const;
  void set_page_total(::int64_t value);

  private:
  ::int64_t _internal_page_total() const;
  void _internal_set_page_total(::int64_t value);

  public:
  // int64 limit = 5 [json_name = "limit"];
  void clear_limit() ;
  ::int64_t limit() const;
  void set_limit(::int64_t value);

  private:
  ::int64_t _internal_limit() const;
  void _internal_set_limit(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.abci.v1beta1.SearchBlocksResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SearchBlocksResult& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tendermint::types::Block > blocks_;
    ::int64_t total_count_;
    ::int64_t count_;
    ::int64_t page_number_;
    ::int64_t page_total_;
    ::int64_t limit_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TxResponse

// int64 height = 1 [json_name = "height"];
inline void TxResponse::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t TxResponse::height() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxResponse.height)
  return _internal_height();
}
inline void TxResponse::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.TxResponse.height)
}
inline ::int64_t TxResponse::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void TxResponse::_internal_set_height(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// string txhash = 2 [json_name = "txhash", (.gogoproto.customname) = "TxHash"];
inline void TxResponse::clear_txhash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.txhash_.ClearToEmpty();
}
inline const std::string& TxResponse::txhash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxResponse.txhash)
  return _internal_txhash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TxResponse::set_txhash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.txhash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.TxResponse.txhash)
}
inline std::string* TxResponse::mutable_txhash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_txhash();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.TxResponse.txhash)
  return _s;
}
inline const std::string& TxResponse::_internal_txhash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.txhash_.Get();
}
inline void TxResponse::_internal_set_txhash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.txhash_.Set(value, GetArena());
}
inline std::string* TxResponse::_internal_mutable_txhash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.txhash_.Mutable( GetArena());
}
inline std::string* TxResponse::release_txhash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.TxResponse.txhash)
  return _impl_.txhash_.Release();
}
inline void TxResponse::set_allocated_txhash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.txhash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.txhash_.IsDefault()) {
    _impl_.txhash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.TxResponse.txhash)
}

// string codespace = 3 [json_name = "codespace"];
inline void TxResponse::clear_codespace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.codespace_.ClearToEmpty();
}
inline const std::string& TxResponse::codespace() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxResponse.codespace)
  return _internal_codespace();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TxResponse::set_codespace(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.codespace_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.TxResponse.codespace)
}
inline std::string* TxResponse::mutable_codespace() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_codespace();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.TxResponse.codespace)
  return _s;
}
inline const std::string& TxResponse::_internal_codespace() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.codespace_.Get();
}
inline void TxResponse::_internal_set_codespace(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.codespace_.Set(value, GetArena());
}
inline std::string* TxResponse::_internal_mutable_codespace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.codespace_.Mutable( GetArena());
}
inline std::string* TxResponse::release_codespace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.TxResponse.codespace)
  return _impl_.codespace_.Release();
}
inline void TxResponse::set_allocated_codespace(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.codespace_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.codespace_.IsDefault()) {
    _impl_.codespace_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.TxResponse.codespace)
}

// uint32 code = 4 [json_name = "code"];
inline void TxResponse::clear_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = 0u;
}
inline ::uint32_t TxResponse::code() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxResponse.code)
  return _internal_code();
}
inline void TxResponse::set_code(::uint32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.TxResponse.code)
}
inline ::uint32_t TxResponse::_internal_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.code_;
}
inline void TxResponse::_internal_set_code(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = value;
}

// string data = 5 [json_name = "data"];
inline void TxResponse::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& TxResponse::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxResponse.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TxResponse::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.TxResponse.data)
}
inline std::string* TxResponse::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.TxResponse.data)
  return _s;
}
inline const std::string& TxResponse::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void TxResponse::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* TxResponse::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* TxResponse::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.TxResponse.data)
  return _impl_.data_.Release();
}
inline void TxResponse::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.TxResponse.data)
}

// string raw_log = 6 [json_name = "rawLog"];
inline void TxResponse::clear_raw_log() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.raw_log_.ClearToEmpty();
}
inline const std::string& TxResponse::raw_log() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxResponse.raw_log)
  return _internal_raw_log();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TxResponse::set_raw_log(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.raw_log_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.TxResponse.raw_log)
}
inline std::string* TxResponse::mutable_raw_log() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_raw_log();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.TxResponse.raw_log)
  return _s;
}
inline const std::string& TxResponse::_internal_raw_log() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.raw_log_.Get();
}
inline void TxResponse::_internal_set_raw_log(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.raw_log_.Set(value, GetArena());
}
inline std::string* TxResponse::_internal_mutable_raw_log() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.raw_log_.Mutable( GetArena());
}
inline std::string* TxResponse::release_raw_log() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.TxResponse.raw_log)
  return _impl_.raw_log_.Release();
}
inline void TxResponse::set_allocated_raw_log(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.raw_log_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.raw_log_.IsDefault()) {
    _impl_.raw_log_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.TxResponse.raw_log)
}

// repeated .cosmos.base.abci.v1beta1.ABCIMessageLog logs = 7 [json_name = "logs", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ABCIMessageLogs"];
inline int TxResponse::_internal_logs_size() const {
  return _internal_logs().size();
}
inline int TxResponse::logs_size() const {
  return _internal_logs_size();
}
inline void TxResponse::clear_logs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.logs_.Clear();
}
inline ::cosmos::base::abci::v1beta1::ABCIMessageLog* TxResponse::mutable_logs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.TxResponse.logs)
  return _internal_mutable_logs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::ABCIMessageLog>* TxResponse::mutable_logs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.abci.v1beta1.TxResponse.logs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_logs();
}
inline const ::cosmos::base::abci::v1beta1::ABCIMessageLog& TxResponse::logs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxResponse.logs)
  return _internal_logs().Get(index);
}
inline ::cosmos::base::abci::v1beta1::ABCIMessageLog* TxResponse::add_logs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::base::abci::v1beta1::ABCIMessageLog* _add = _internal_mutable_logs()->Add();
  // @@protoc_insertion_point(field_add:cosmos.base.abci.v1beta1.TxResponse.logs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::ABCIMessageLog>& TxResponse::logs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.base.abci.v1beta1.TxResponse.logs)
  return _internal_logs();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::ABCIMessageLog>&
TxResponse::_internal_logs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.logs_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::ABCIMessageLog>*
TxResponse::_internal_mutable_logs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.logs_;
}

// string info = 8 [json_name = "info"];
inline void TxResponse::clear_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.info_.ClearToEmpty();
}
inline const std::string& TxResponse::info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxResponse.info)
  return _internal_info();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TxResponse::set_info(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.info_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.TxResponse.info)
}
inline std::string* TxResponse::mutable_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.TxResponse.info)
  return _s;
}
inline const std::string& TxResponse::_internal_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.info_.Get();
}
inline void TxResponse::_internal_set_info(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.info_.Set(value, GetArena());
}
inline std::string* TxResponse::_internal_mutable_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.info_.Mutable( GetArena());
}
inline std::string* TxResponse::release_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.TxResponse.info)
  return _impl_.info_.Release();
}
inline void TxResponse::set_allocated_info(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.info_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.info_.IsDefault()) {
    _impl_.info_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.TxResponse.info)
}

// int64 gas_wanted = 9 [json_name = "gasWanted"];
inline void TxResponse::clear_gas_wanted() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gas_wanted_ = ::int64_t{0};
}
inline ::int64_t TxResponse::gas_wanted() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxResponse.gas_wanted)
  return _internal_gas_wanted();
}
inline void TxResponse::set_gas_wanted(::int64_t value) {
  _internal_set_gas_wanted(value);
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.TxResponse.gas_wanted)
}
inline ::int64_t TxResponse::_internal_gas_wanted() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gas_wanted_;
}
inline void TxResponse::_internal_set_gas_wanted(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gas_wanted_ = value;
}

// int64 gas_used = 10 [json_name = "gasUsed"];
inline void TxResponse::clear_gas_used() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gas_used_ = ::int64_t{0};
}
inline ::int64_t TxResponse::gas_used() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxResponse.gas_used)
  return _internal_gas_used();
}
inline void TxResponse::set_gas_used(::int64_t value) {
  _internal_set_gas_used(value);
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.TxResponse.gas_used)
}
inline ::int64_t TxResponse::_internal_gas_used() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gas_used_;
}
inline void TxResponse::_internal_set_gas_used(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gas_used_ = value;
}

// .google.protobuf.Any tx = 11 [json_name = "tx"];
inline bool TxResponse::has_tx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tx_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& TxResponse::_internal_tx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Any* p = _impl_.tx_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& TxResponse::tx() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxResponse.tx)
  return _internal_tx();
}
inline void TxResponse::unsafe_arena_set_allocated_tx(::google::protobuf::Any* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tx_);
  }
  _impl_.tx_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.abci.v1beta1.TxResponse.tx)
}
inline ::google::protobuf::Any* TxResponse::release_tx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* released = _impl_.tx_;
  _impl_.tx_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Any* TxResponse::unsafe_arena_release_tx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.TxResponse.tx)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* temp = _impl_.tx_;
  _impl_.tx_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* TxResponse::_internal_mutable_tx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tx_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Any>(GetArena());
    _impl_.tx_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.tx_;
}
inline ::google::protobuf::Any* TxResponse::mutable_tx() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Any* _msg = _internal_mutable_tx();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.TxResponse.tx)
  return _msg;
}
inline void TxResponse::set_allocated_tx(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tx_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.tx_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.TxResponse.tx)
}

// string timestamp = 12 [json_name = "timestamp"];
inline void TxResponse::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& TxResponse::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxResponse.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TxResponse::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.TxResponse.timestamp)
}
inline std::string* TxResponse::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.TxResponse.timestamp)
  return _s;
}
inline const std::string& TxResponse::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void TxResponse::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* TxResponse::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* TxResponse::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.TxResponse.timestamp)
  return _impl_.timestamp_.Release();
}
inline void TxResponse::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.TxResponse.timestamp)
}

// repeated .tendermint.abci.Event events = 13 [json_name = "events", (.gogoproto.nullable) = false, (.cosmos_proto.field_added_in) = "cosmos-sdk 0.45"];
inline int TxResponse::_internal_events_size() const {
  return _internal_events().size();
}
inline int TxResponse::events_size() const {
  return _internal_events_size();
}
inline ::tendermint::abci::Event* TxResponse::mutable_events(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.TxResponse.events)
  return _internal_mutable_events()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>* TxResponse::mutable_events()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.abci.v1beta1.TxResponse.events)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_events();
}
inline const ::tendermint::abci::Event& TxResponse::events(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxResponse.events)
  return _internal_events().Get(index);
}
inline ::tendermint::abci::Event* TxResponse::add_events() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tendermint::abci::Event* _add = _internal_mutable_events()->Add();
  // @@protoc_insertion_point(field_add:cosmos.base.abci.v1beta1.TxResponse.events)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>& TxResponse::events() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.base.abci.v1beta1.TxResponse.events)
  return _internal_events();
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>&
TxResponse::_internal_events() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.events_;
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>*
TxResponse::_internal_mutable_events() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.events_;
}

// -------------------------------------------------------------------

// ABCIMessageLog

// uint32 msg_index = 1 [json_name = "msgIndex", (.gogoproto.jsontag) = "msg_index"];
inline void ABCIMessageLog::clear_msg_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_index_ = 0u;
}
inline ::uint32_t ABCIMessageLog::msg_index() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.ABCIMessageLog.msg_index)
  return _internal_msg_index();
}
inline void ABCIMessageLog::set_msg_index(::uint32_t value) {
  _internal_set_msg_index(value);
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.ABCIMessageLog.msg_index)
}
inline ::uint32_t ABCIMessageLog::_internal_msg_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.msg_index_;
}
inline void ABCIMessageLog::_internal_set_msg_index(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_index_ = value;
}

// string log = 2 [json_name = "log"];
inline void ABCIMessageLog::clear_log() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_.ClearToEmpty();
}
inline const std::string& ABCIMessageLog::log() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.ABCIMessageLog.log)
  return _internal_log();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ABCIMessageLog::set_log(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.ABCIMessageLog.log)
}
inline std::string* ABCIMessageLog::mutable_log() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_log();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.ABCIMessageLog.log)
  return _s;
}
inline const std::string& ABCIMessageLog::_internal_log() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_.Get();
}
inline void ABCIMessageLog::_internal_set_log(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_.Set(value, GetArena());
}
inline std::string* ABCIMessageLog::_internal_mutable_log() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.log_.Mutable( GetArena());
}
inline std::string* ABCIMessageLog::release_log() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.ABCIMessageLog.log)
  return _impl_.log_.Release();
}
inline void ABCIMessageLog::set_allocated_log(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.log_.IsDefault()) {
    _impl_.log_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.ABCIMessageLog.log)
}

// repeated .cosmos.base.abci.v1beta1.StringEvent events = 3 [json_name = "events", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "StringEvents"];
inline int ABCIMessageLog::_internal_events_size() const {
  return _internal_events().size();
}
inline int ABCIMessageLog::events_size() const {
  return _internal_events_size();
}
inline void ABCIMessageLog::clear_events() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.events_.Clear();
}
inline ::cosmos::base::abci::v1beta1::StringEvent* ABCIMessageLog::mutable_events(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.ABCIMessageLog.events)
  return _internal_mutable_events()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::StringEvent>* ABCIMessageLog::mutable_events()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.abci.v1beta1.ABCIMessageLog.events)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_events();
}
inline const ::cosmos::base::abci::v1beta1::StringEvent& ABCIMessageLog::events(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.ABCIMessageLog.events)
  return _internal_events().Get(index);
}
inline ::cosmos::base::abci::v1beta1::StringEvent* ABCIMessageLog::add_events() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::base::abci::v1beta1::StringEvent* _add = _internal_mutable_events()->Add();
  // @@protoc_insertion_point(field_add:cosmos.base.abci.v1beta1.ABCIMessageLog.events)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::StringEvent>& ABCIMessageLog::events() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.base.abci.v1beta1.ABCIMessageLog.events)
  return _internal_events();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::StringEvent>&
ABCIMessageLog::_internal_events() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.events_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::StringEvent>*
ABCIMessageLog::_internal_mutable_events() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.events_;
}

// -------------------------------------------------------------------

// StringEvent

// string type = 1 [json_name = "type"];
inline void StringEvent::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& StringEvent::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.StringEvent.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StringEvent::set_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.StringEvent.type)
}
inline std::string* StringEvent::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.StringEvent.type)
  return _s;
}
inline const std::string& StringEvent::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.type_.Get();
}
inline void StringEvent::_internal_set_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.Set(value, GetArena());
}
inline std::string* StringEvent::_internal_mutable_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* StringEvent::release_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.StringEvent.type)
  return _impl_.type_.Release();
}
inline void StringEvent::set_allocated_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.StringEvent.type)
}

// repeated .cosmos.base.abci.v1beta1.Attribute attributes = 2 [json_name = "attributes", (.gogoproto.nullable) = false];
inline int StringEvent::_internal_attributes_size() const {
  return _internal_attributes().size();
}
inline int StringEvent::attributes_size() const {
  return _internal_attributes_size();
}
inline void StringEvent::clear_attributes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attributes_.Clear();
}
inline ::cosmos::base::abci::v1beta1::Attribute* StringEvent::mutable_attributes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.StringEvent.attributes)
  return _internal_mutable_attributes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::Attribute>* StringEvent::mutable_attributes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.abci.v1beta1.StringEvent.attributes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_attributes();
}
inline const ::cosmos::base::abci::v1beta1::Attribute& StringEvent::attributes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.StringEvent.attributes)
  return _internal_attributes().Get(index);
}
inline ::cosmos::base::abci::v1beta1::Attribute* StringEvent::add_attributes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::base::abci::v1beta1::Attribute* _add = _internal_mutable_attributes()->Add();
  // @@protoc_insertion_point(field_add:cosmos.base.abci.v1beta1.StringEvent.attributes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::Attribute>& StringEvent::attributes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.base.abci.v1beta1.StringEvent.attributes)
  return _internal_attributes();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::Attribute>&
StringEvent::_internal_attributes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attributes_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::Attribute>*
StringEvent::_internal_mutable_attributes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.attributes_;
}

// -------------------------------------------------------------------

// Attribute

// string key = 1 [json_name = "key"];
inline void Attribute::clear_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& Attribute::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.Attribute.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Attribute::set_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.Attribute.key)
}
inline std::string* Attribute::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.Attribute.key)
  return _s;
}
inline const std::string& Attribute::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_.Get();
}
inline void Attribute::_internal_set_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(value, GetArena());
}
inline std::string* Attribute::_internal_mutable_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* Attribute::release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.Attribute.key)
  return _impl_.key_.Release();
}
inline void Attribute::set_allocated_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.Attribute.key)
}

// string value = 2 [json_name = "value"];
inline void Attribute::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& Attribute::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.Attribute.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Attribute::set_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.Attribute.value)
}
inline std::string* Attribute::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.Attribute.value)
  return _s;
}
inline const std::string& Attribute::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_.Get();
}
inline void Attribute::_internal_set_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(value, GetArena());
}
inline std::string* Attribute::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* Attribute::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.Attribute.value)
  return _impl_.value_.Release();
}
inline void Attribute::set_allocated_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.Attribute.value)
}

// -------------------------------------------------------------------

// GasInfo

// uint64 gas_wanted = 1 [json_name = "gasWanted"];
inline void GasInfo::clear_gas_wanted() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gas_wanted_ = ::uint64_t{0u};
}
inline ::uint64_t GasInfo::gas_wanted() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.GasInfo.gas_wanted)
  return _internal_gas_wanted();
}
inline void GasInfo::set_gas_wanted(::uint64_t value) {
  _internal_set_gas_wanted(value);
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.GasInfo.gas_wanted)
}
inline ::uint64_t GasInfo::_internal_gas_wanted() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gas_wanted_;
}
inline void GasInfo::_internal_set_gas_wanted(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gas_wanted_ = value;
}

// uint64 gas_used = 2 [json_name = "gasUsed"];
inline void GasInfo::clear_gas_used() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gas_used_ = ::uint64_t{0u};
}
inline ::uint64_t GasInfo::gas_used() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.GasInfo.gas_used)
  return _internal_gas_used();
}
inline void GasInfo::set_gas_used(::uint64_t value) {
  _internal_set_gas_used(value);
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.GasInfo.gas_used)
}
inline ::uint64_t GasInfo::_internal_gas_used() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gas_used_;
}
inline void GasInfo::_internal_set_gas_used(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gas_used_ = value;
}

// -------------------------------------------------------------------

// Result

// bytes data = 1 [json_name = "data", deprecated = true];
inline void Result::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Result::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.Result.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Result::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.Result.data)
}
inline std::string* Result::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.Result.data)
  return _s;
}
inline const std::string& Result::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void Result::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* Result::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* Result::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.Result.data)
  return _impl_.data_.Release();
}
inline void Result::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.Result.data)
}

// string log = 2 [json_name = "log"];
inline void Result::clear_log() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_.ClearToEmpty();
}
inline const std::string& Result::log() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.Result.log)
  return _internal_log();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Result::set_log(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.Result.log)
}
inline std::string* Result::mutable_log() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_log();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.Result.log)
  return _s;
}
inline const std::string& Result::_internal_log() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_.Get();
}
inline void Result::_internal_set_log(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_.Set(value, GetArena());
}
inline std::string* Result::_internal_mutable_log() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.log_.Mutable( GetArena());
}
inline std::string* Result::release_log() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.Result.log)
  return _impl_.log_.Release();
}
inline void Result::set_allocated_log(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.log_.IsDefault()) {
    _impl_.log_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.Result.log)
}

// repeated .tendermint.abci.Event events = 3 [json_name = "events", (.gogoproto.nullable) = false];
inline int Result::_internal_events_size() const {
  return _internal_events().size();
}
inline int Result::events_size() const {
  return _internal_events_size();
}
inline ::tendermint::abci::Event* Result::mutable_events(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.Result.events)
  return _internal_mutable_events()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>* Result::mutable_events()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.abci.v1beta1.Result.events)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_events();
}
inline const ::tendermint::abci::Event& Result::events(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.Result.events)
  return _internal_events().Get(index);
}
inline ::tendermint::abci::Event* Result::add_events() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tendermint::abci::Event* _add = _internal_mutable_events()->Add();
  // @@protoc_insertion_point(field_add:cosmos.base.abci.v1beta1.Result.events)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>& Result::events() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.base.abci.v1beta1.Result.events)
  return _internal_events();
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>&
Result::_internal_events() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.events_;
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::abci::Event>*
Result::_internal_mutable_events() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.events_;
}

// repeated .google.protobuf.Any msg_responses = 4 [json_name = "msgResponses", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.46"];
inline int Result::_internal_msg_responses_size() const {
  return _internal_msg_responses().size();
}
inline int Result::msg_responses_size() const {
  return _internal_msg_responses_size();
}
inline ::google::protobuf::Any* Result::mutable_msg_responses(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.Result.msg_responses)
  return _internal_mutable_msg_responses()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* Result::mutable_msg_responses()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.abci.v1beta1.Result.msg_responses)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_msg_responses();
}
inline const ::google::protobuf::Any& Result::msg_responses(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.Result.msg_responses)
  return _internal_msg_responses().Get(index);
}
inline ::google::protobuf::Any* Result::add_msg_responses() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::Any* _add = _internal_mutable_msg_responses()->Add();
  // @@protoc_insertion_point(field_add:cosmos.base.abci.v1beta1.Result.msg_responses)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& Result::msg_responses() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.base.abci.v1beta1.Result.msg_responses)
  return _internal_msg_responses();
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>&
Result::_internal_msg_responses() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.msg_responses_;
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>*
Result::_internal_mutable_msg_responses() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.msg_responses_;
}

// -------------------------------------------------------------------

// SimulationResponse

// .cosmos.base.abci.v1beta1.GasInfo gas_info = 1 [json_name = "gasInfo", (.gogoproto.nullable) = false, (.gogoproto.embed) = true];
inline bool SimulationResponse::has_gas_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gas_info_ != nullptr);
  return value;
}
inline void SimulationResponse::clear_gas_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gas_info_ != nullptr) _impl_.gas_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::base::abci::v1beta1::GasInfo& SimulationResponse::_internal_gas_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::base::abci::v1beta1::GasInfo* p = _impl_.gas_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::abci::v1beta1::GasInfo&>(::cosmos::base::abci::v1beta1::_GasInfo_default_instance_);
}
inline const ::cosmos::base::abci::v1beta1::GasInfo& SimulationResponse::gas_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.SimulationResponse.gas_info)
  return _internal_gas_info();
}
inline void SimulationResponse::unsafe_arena_set_allocated_gas_info(::cosmos::base::abci::v1beta1::GasInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gas_info_);
  }
  _impl_.gas_info_ = reinterpret_cast<::cosmos::base::abci::v1beta1::GasInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.abci.v1beta1.SimulationResponse.gas_info)
}
inline ::cosmos::base::abci::v1beta1::GasInfo* SimulationResponse::release_gas_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::abci::v1beta1::GasInfo* released = _impl_.gas_info_;
  _impl_.gas_info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::base::abci::v1beta1::GasInfo* SimulationResponse::unsafe_arena_release_gas_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.SimulationResponse.gas_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::abci::v1beta1::GasInfo* temp = _impl_.gas_info_;
  _impl_.gas_info_ = nullptr;
  return temp;
}
inline ::cosmos::base::abci::v1beta1::GasInfo* SimulationResponse::_internal_mutable_gas_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gas_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::base::abci::v1beta1::GasInfo>(GetArena());
    _impl_.gas_info_ = reinterpret_cast<::cosmos::base::abci::v1beta1::GasInfo*>(p);
  }
  return _impl_.gas_info_;
}
inline ::cosmos::base::abci::v1beta1::GasInfo* SimulationResponse::mutable_gas_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::base::abci::v1beta1::GasInfo* _msg = _internal_mutable_gas_info();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.SimulationResponse.gas_info)
  return _msg;
}
inline void SimulationResponse::set_allocated_gas_info(::cosmos::base::abci::v1beta1::GasInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.gas_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.gas_info_ = reinterpret_cast<::cosmos::base::abci::v1beta1::GasInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.SimulationResponse.gas_info)
}

// .cosmos.base.abci.v1beta1.Result result = 2 [json_name = "result"];
inline bool SimulationResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline void SimulationResponse::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cosmos::base::abci::v1beta1::Result& SimulationResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::base::abci::v1beta1::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::abci::v1beta1::Result&>(::cosmos::base::abci::v1beta1::_Result_default_instance_);
}
inline const ::cosmos::base::abci::v1beta1::Result& SimulationResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.SimulationResponse.result)
  return _internal_result();
}
inline void SimulationResponse::unsafe_arena_set_allocated_result(::cosmos::base::abci::v1beta1::Result* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::cosmos::base::abci::v1beta1::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.abci.v1beta1.SimulationResponse.result)
}
inline ::cosmos::base::abci::v1beta1::Result* SimulationResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::base::abci::v1beta1::Result* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::base::abci::v1beta1::Result* SimulationResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.SimulationResponse.result)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::base::abci::v1beta1::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::cosmos::base::abci::v1beta1::Result* SimulationResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::base::abci::v1beta1::Result>(GetArena());
    _impl_.result_ = reinterpret_cast<::cosmos::base::abci::v1beta1::Result*>(p);
  }
  return _impl_.result_;
}
inline ::cosmos::base::abci::v1beta1::Result* SimulationResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::cosmos::base::abci::v1beta1::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.SimulationResponse.result)
  return _msg;
}
inline void SimulationResponse::set_allocated_result(::cosmos::base::abci::v1beta1::Result* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.result_ = reinterpret_cast<::cosmos::base::abci::v1beta1::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.SimulationResponse.result)
}

// -------------------------------------------------------------------

// MsgData

// string msg_type = 1 [json_name = "msgType"];
inline void MsgData::clear_msg_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_type_.ClearToEmpty();
}
inline const std::string& MsgData::msg_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.MsgData.msg_type)
  return _internal_msg_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgData::set_msg_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.MsgData.msg_type)
}
inline std::string* MsgData::mutable_msg_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_msg_type();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.MsgData.msg_type)
  return _s;
}
inline const std::string& MsgData::_internal_msg_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.msg_type_.Get();
}
inline void MsgData::_internal_set_msg_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_type_.Set(value, GetArena());
}
inline std::string* MsgData::_internal_mutable_msg_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.msg_type_.Mutable( GetArena());
}
inline std::string* MsgData::release_msg_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.MsgData.msg_type)
  return _impl_.msg_type_.Release();
}
inline void MsgData::set_allocated_msg_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.msg_type_.IsDefault()) {
    _impl_.msg_type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.MsgData.msg_type)
}

// bytes data = 2 [json_name = "data"];
inline void MsgData::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& MsgData::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.MsgData.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgData::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.MsgData.data)
}
inline std::string* MsgData::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.MsgData.data)
  return _s;
}
inline const std::string& MsgData::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void MsgData::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* MsgData::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* MsgData::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.MsgData.data)
  return _impl_.data_.Release();
}
inline void MsgData::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.MsgData.data)
}

// -------------------------------------------------------------------

// TxMsgData

// repeated .cosmos.base.abci.v1beta1.MsgData data = 1 [json_name = "data", deprecated = true];
inline int TxMsgData::_internal_data_size() const {
  return _internal_data().size();
}
inline int TxMsgData::data_size() const {
  return _internal_data_size();
}
inline void TxMsgData::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Clear();
}
inline ::cosmos::base::abci::v1beta1::MsgData* TxMsgData::mutable_data(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.TxMsgData.data)
  return _internal_mutable_data()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::MsgData>* TxMsgData::mutable_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.abci.v1beta1.TxMsgData.data)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_data();
}
inline const ::cosmos::base::abci::v1beta1::MsgData& TxMsgData::data(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxMsgData.data)
  return _internal_data().Get(index);
}
inline ::cosmos::base::abci::v1beta1::MsgData* TxMsgData::add_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::base::abci::v1beta1::MsgData* _add = _internal_mutable_data()->Add();
  // @@protoc_insertion_point(field_add:cosmos.base.abci.v1beta1.TxMsgData.data)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::MsgData>& TxMsgData::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.base.abci.v1beta1.TxMsgData.data)
  return _internal_data();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::MsgData>&
TxMsgData::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::MsgData>*
TxMsgData::_internal_mutable_data() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.data_;
}

// repeated .google.protobuf.Any msg_responses = 2 [json_name = "msgResponses", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.46"];
inline int TxMsgData::_internal_msg_responses_size() const {
  return _internal_msg_responses().size();
}
inline int TxMsgData::msg_responses_size() const {
  return _internal_msg_responses_size();
}
inline ::google::protobuf::Any* TxMsgData::mutable_msg_responses(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.TxMsgData.msg_responses)
  return _internal_mutable_msg_responses()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* TxMsgData::mutable_msg_responses()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.abci.v1beta1.TxMsgData.msg_responses)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_msg_responses();
}
inline const ::google::protobuf::Any& TxMsgData::msg_responses(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxMsgData.msg_responses)
  return _internal_msg_responses().Get(index);
}
inline ::google::protobuf::Any* TxMsgData::add_msg_responses() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::Any* _add = _internal_mutable_msg_responses()->Add();
  // @@protoc_insertion_point(field_add:cosmos.base.abci.v1beta1.TxMsgData.msg_responses)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& TxMsgData::msg_responses() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.base.abci.v1beta1.TxMsgData.msg_responses)
  return _internal_msg_responses();
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>&
TxMsgData::_internal_msg_responses() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.msg_responses_;
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>*
TxMsgData::_internal_mutable_msg_responses() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.msg_responses_;
}

// -------------------------------------------------------------------

// SearchTxsResult

// uint64 total_count = 1 [json_name = "totalCount"];
inline void SearchTxsResult::clear_total_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_count_ = ::uint64_t{0u};
}
inline ::uint64_t SearchTxsResult::total_count() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.SearchTxsResult.total_count)
  return _internal_total_count();
}
inline void SearchTxsResult::set_total_count(::uint64_t value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.SearchTxsResult.total_count)
}
inline ::uint64_t SearchTxsResult::_internal_total_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_count_;
}
inline void SearchTxsResult::_internal_set_total_count(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_count_ = value;
}

// uint64 count = 2 [json_name = "count"];
inline void SearchTxsResult::clear_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_ = ::uint64_t{0u};
}
inline ::uint64_t SearchTxsResult::count() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.SearchTxsResult.count)
  return _internal_count();
}
inline void SearchTxsResult::set_count(::uint64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.SearchTxsResult.count)
}
inline ::uint64_t SearchTxsResult::_internal_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.count_;
}
inline void SearchTxsResult::_internal_set_count(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_ = value;
}

// uint64 page_number = 3 [json_name = "pageNumber"];
inline void SearchTxsResult::clear_page_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.page_number_ = ::uint64_t{0u};
}
inline ::uint64_t SearchTxsResult::page_number() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.SearchTxsResult.page_number)
  return _internal_page_number();
}
inline void SearchTxsResult::set_page_number(::uint64_t value) {
  _internal_set_page_number(value);
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.SearchTxsResult.page_number)
}
inline ::uint64_t SearchTxsResult::_internal_page_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.page_number_;
}
inline void SearchTxsResult::_internal_set_page_number(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.page_number_ = value;
}

// uint64 page_total = 4 [json_name = "pageTotal"];
inline void SearchTxsResult::clear_page_total() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.page_total_ = ::uint64_t{0u};
}
inline ::uint64_t SearchTxsResult::page_total() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.SearchTxsResult.page_total)
  return _internal_page_total();
}
inline void SearchTxsResult::set_page_total(::uint64_t value) {
  _internal_set_page_total(value);
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.SearchTxsResult.page_total)
}
inline ::uint64_t SearchTxsResult::_internal_page_total() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.page_total_;
}
inline void SearchTxsResult::_internal_set_page_total(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.page_total_ = value;
}

// uint64 limit = 5 [json_name = "limit"];
inline void SearchTxsResult::clear_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = ::uint64_t{0u};
}
inline ::uint64_t SearchTxsResult::limit() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.SearchTxsResult.limit)
  return _internal_limit();
}
inline void SearchTxsResult::set_limit(::uint64_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.SearchTxsResult.limit)
}
inline ::uint64_t SearchTxsResult::_internal_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.limit_;
}
inline void SearchTxsResult::_internal_set_limit(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = value;
}

// repeated .cosmos.base.abci.v1beta1.TxResponse txs = 6 [json_name = "txs"];
inline int SearchTxsResult::_internal_txs_size() const {
  return _internal_txs().size();
}
inline int SearchTxsResult::txs_size() const {
  return _internal_txs_size();
}
inline void SearchTxsResult::clear_txs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.txs_.Clear();
}
inline ::cosmos::base::abci::v1beta1::TxResponse* SearchTxsResult::mutable_txs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.SearchTxsResult.txs)
  return _internal_mutable_txs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::TxResponse>* SearchTxsResult::mutable_txs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.abci.v1beta1.SearchTxsResult.txs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_txs();
}
inline const ::cosmos::base::abci::v1beta1::TxResponse& SearchTxsResult::txs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.SearchTxsResult.txs)
  return _internal_txs().Get(index);
}
inline ::cosmos::base::abci::v1beta1::TxResponse* SearchTxsResult::add_txs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::base::abci::v1beta1::TxResponse* _add = _internal_mutable_txs()->Add();
  // @@protoc_insertion_point(field_add:cosmos.base.abci.v1beta1.SearchTxsResult.txs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::TxResponse>& SearchTxsResult::txs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.base.abci.v1beta1.SearchTxsResult.txs)
  return _internal_txs();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::TxResponse>&
SearchTxsResult::_internal_txs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.txs_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::abci::v1beta1::TxResponse>*
SearchTxsResult::_internal_mutable_txs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.txs_;
}

// -------------------------------------------------------------------

// SearchBlocksResult

// int64 total_count = 1 [json_name = "totalCount"];
inline void SearchBlocksResult::clear_total_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_count_ = ::int64_t{0};
}
inline ::int64_t SearchBlocksResult::total_count() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.SearchBlocksResult.total_count)
  return _internal_total_count();
}
inline void SearchBlocksResult::set_total_count(::int64_t value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.SearchBlocksResult.total_count)
}
inline ::int64_t SearchBlocksResult::_internal_total_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_count_;
}
inline void SearchBlocksResult::_internal_set_total_count(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_count_ = value;
}

// int64 count = 2 [json_name = "count"];
inline void SearchBlocksResult::clear_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_ = ::int64_t{0};
}
inline ::int64_t SearchBlocksResult::count() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.SearchBlocksResult.count)
  return _internal_count();
}
inline void SearchBlocksResult::set_count(::int64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.SearchBlocksResult.count)
}
inline ::int64_t SearchBlocksResult::_internal_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.count_;
}
inline void SearchBlocksResult::_internal_set_count(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_ = value;
}

// int64 page_number = 3 [json_name = "pageNumber"];
inline void SearchBlocksResult::clear_page_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.page_number_ = ::int64_t{0};
}
inline ::int64_t SearchBlocksResult::page_number() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.SearchBlocksResult.page_number)
  return _internal_page_number();
}
inline void SearchBlocksResult::set_page_number(::int64_t value) {
  _internal_set_page_number(value);
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.SearchBlocksResult.page_number)
}
inline ::int64_t SearchBlocksResult::_internal_page_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.page_number_;
}
inline void SearchBlocksResult::_internal_set_page_number(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.page_number_ = value;
}

// int64 page_total = 4 [json_name = "pageTotal"];
inline void SearchBlocksResult::clear_page_total() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.page_total_ = ::int64_t{0};
}
inline ::int64_t SearchBlocksResult::page_total() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.SearchBlocksResult.page_total)
  return _internal_page_total();
}
inline void SearchBlocksResult::set_page_total(::int64_t value) {
  _internal_set_page_total(value);
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.SearchBlocksResult.page_total)
}
inline ::int64_t SearchBlocksResult::_internal_page_total() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.page_total_;
}
inline void SearchBlocksResult::_internal_set_page_total(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.page_total_ = value;
}

// int64 limit = 5 [json_name = "limit"];
inline void SearchBlocksResult::clear_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = ::int64_t{0};
}
inline ::int64_t SearchBlocksResult::limit() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.SearchBlocksResult.limit)
  return _internal_limit();
}
inline void SearchBlocksResult::set_limit(::int64_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.SearchBlocksResult.limit)
}
inline ::int64_t SearchBlocksResult::_internal_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.limit_;
}
inline void SearchBlocksResult::_internal_set_limit(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = value;
}

// repeated .tendermint.types.Block blocks = 6 [json_name = "blocks"];
inline int SearchBlocksResult::_internal_blocks_size() const {
  return _internal_blocks().size();
}
inline int SearchBlocksResult::blocks_size() const {
  return _internal_blocks_size();
}
inline ::tendermint::types::Block* SearchBlocksResult::mutable_blocks(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.SearchBlocksResult.blocks)
  return _internal_mutable_blocks()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::types::Block>* SearchBlocksResult::mutable_blocks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.abci.v1beta1.SearchBlocksResult.blocks)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_blocks();
}
inline const ::tendermint::types::Block& SearchBlocksResult::blocks(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.SearchBlocksResult.blocks)
  return _internal_blocks().Get(index);
}
inline ::tendermint::types::Block* SearchBlocksResult::add_blocks() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tendermint::types::Block* _add = _internal_mutable_blocks()->Add();
  // @@protoc_insertion_point(field_add:cosmos.base.abci.v1beta1.SearchBlocksResult.blocks)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::types::Block>& SearchBlocksResult::blocks() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.base.abci.v1beta1.SearchBlocksResult.blocks)
  return _internal_blocks();
}
inline const ::google::protobuf::RepeatedPtrField<::tendermint::types::Block>&
SearchBlocksResult::_internal_blocks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.blocks_;
}
inline ::google::protobuf::RepeatedPtrField<::tendermint::types::Block>*
SearchBlocksResult::_internal_mutable_blocks() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.blocks_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace abci
}  // namespace base
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto_2epb_2eh
