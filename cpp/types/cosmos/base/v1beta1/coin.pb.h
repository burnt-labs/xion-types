// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/base/v1beta1/coin.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2fbase_2fv1beta1_2fcoin_2eproto_2epb_2eh
#define cosmos_2fbase_2fv1beta1_2fcoin_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fbase_2fv1beta1_2fcoin_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fbase_2fv1beta1_2fcoin_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto;
namespace cosmos {
namespace base {
namespace v1beta1 {
class Coin;
struct CoinDefaultTypeInternal;
extern CoinDefaultTypeInternal _Coin_default_instance_;
class DecCoin;
struct DecCoinDefaultTypeInternal;
extern DecCoinDefaultTypeInternal _DecCoin_default_instance_;
class DecProto;
struct DecProtoDefaultTypeInternal;
extern DecProtoDefaultTypeInternal _DecProto_default_instance_;
class IntProto;
struct IntProtoDefaultTypeInternal;
extern IntProtoDefaultTypeInternal _IntProto_default_instance_;
}  // namespace v1beta1
}  // namespace base
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace base {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class IntProto final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.base.v1beta1.IntProto) */ {
 public:
  inline IntProto() : IntProto(nullptr) {}
  ~IntProto() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(IntProto* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(IntProto));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IntProto(
      ::google::protobuf::internal::ConstantInitialized);

  inline IntProto(const IntProto& from) : IntProto(nullptr, from) {}
  inline IntProto(IntProto&& from) noexcept
      : IntProto(nullptr, std::move(from)) {}
  inline IntProto& operator=(const IntProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntProto& operator=(IntProto&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntProto* internal_default_instance() {
    return reinterpret_cast<const IntProto*>(
        &_IntProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(IntProto& a, IntProto& b) { a.Swap(&b); }
  inline void Swap(IntProto* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntProto* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<IntProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IntProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const IntProto& from) { IntProto::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(IntProto* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.base.v1beta1.IntProto"; }

 protected:
  explicit IntProto(::google::protobuf::Arena* arena);
  IntProto(::google::protobuf::Arena* arena, const IntProto& from);
  IntProto(::google::protobuf::Arena* arena, IntProto&& from) noexcept
      : IntProto(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIntFieldNumber = 1,
  };
  // string int = 1 [json_name = "int", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
  void clear_int_() ;
  const std::string& int_() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_int_(Arg_&& arg, Args_... args);
  std::string* mutable_int_();
  PROTOBUF_NODISCARD std::string* release_int_();
  void set_allocated_int_(std::string* value);

  private:
  const std::string& _internal_int_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_int_(
      const std::string& value);
  std::string* _internal_mutable_int_();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.v1beta1.IntProto)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const IntProto& from_msg);
    ::google::protobuf::internal::ArenaStringPtr int__;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fv1beta1_2fcoin_2eproto;
};
// -------------------------------------------------------------------

class DecProto final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.base.v1beta1.DecProto) */ {
 public:
  inline DecProto() : DecProto(nullptr) {}
  ~DecProto() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DecProto* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DecProto));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DecProto(
      ::google::protobuf::internal::ConstantInitialized);

  inline DecProto(const DecProto& from) : DecProto(nullptr, from) {}
  inline DecProto(DecProto&& from) noexcept
      : DecProto(nullptr, std::move(from)) {}
  inline DecProto& operator=(const DecProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecProto& operator=(DecProto&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DecProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const DecProto* internal_default_instance() {
    return reinterpret_cast<const DecProto*>(
        &_DecProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(DecProto& a, DecProto& b) { a.Swap(&b); }
  inline void Swap(DecProto* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DecProto* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DecProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DecProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DecProto& from) { DecProto::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DecProto* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.base.v1beta1.DecProto"; }

 protected:
  explicit DecProto(::google::protobuf::Arena* arena);
  DecProto(::google::protobuf::Arena* arena, const DecProto& from);
  DecProto(::google::protobuf::Arena* arena, DecProto&& from) noexcept
      : DecProto(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDecFieldNumber = 1,
  };
  // string dec = 1 [json_name = "dec", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  void clear_dec() ;
  const std::string& dec() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dec(Arg_&& arg, Args_... args);
  std::string* mutable_dec();
  PROTOBUF_NODISCARD std::string* release_dec();
  void set_allocated_dec(std::string* value);

  private:
  const std::string& _internal_dec() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dec(
      const std::string& value);
  std::string* _internal_mutable_dec();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.v1beta1.DecProto)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DecProto& from_msg);
    ::google::protobuf::internal::ArenaStringPtr dec_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fv1beta1_2fcoin_2eproto;
};
// -------------------------------------------------------------------

class DecCoin final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.base.v1beta1.DecCoin) */ {
 public:
  inline DecCoin() : DecCoin(nullptr) {}
  ~DecCoin() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DecCoin* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DecCoin));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DecCoin(
      ::google::protobuf::internal::ConstantInitialized);

  inline DecCoin(const DecCoin& from) : DecCoin(nullptr, from) {}
  inline DecCoin(DecCoin&& from) noexcept
      : DecCoin(nullptr, std::move(from)) {}
  inline DecCoin& operator=(const DecCoin& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecCoin& operator=(DecCoin&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DecCoin& default_instance() {
    return *internal_default_instance();
  }
  static inline const DecCoin* internal_default_instance() {
    return reinterpret_cast<const DecCoin*>(
        &_DecCoin_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(DecCoin& a, DecCoin& b) { a.Swap(&b); }
  inline void Swap(DecCoin* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecCoin* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DecCoin* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DecCoin>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DecCoin& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DecCoin& from) { DecCoin::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DecCoin* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.base.v1beta1.DecCoin"; }

 protected:
  explicit DecCoin(::google::protobuf::Arena* arena);
  DecCoin(::google::protobuf::Arena* arena, const DecCoin& from);
  DecCoin(::google::protobuf::Arena* arena, DecCoin&& from) noexcept
      : DecCoin(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDenomFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string denom = 1 [json_name = "denom"];
  void clear_denom() ;
  const std::string& denom() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_denom(Arg_&& arg, Args_... args);
  std::string* mutable_denom();
  PROTOBUF_NODISCARD std::string* release_denom();
  void set_allocated_denom(std::string* value);

  private:
  const std::string& _internal_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_denom(
      const std::string& value);
  std::string* _internal_mutable_denom();

  public:
  // string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  void clear_amount() ;
  const std::string& amount() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_amount(Arg_&& arg, Args_... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* value);

  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(
      const std::string& value);
  std::string* _internal_mutable_amount();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.v1beta1.DecCoin)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      47, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DecCoin& from_msg);
    ::google::protobuf::internal::ArenaStringPtr denom_;
    ::google::protobuf::internal::ArenaStringPtr amount_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fv1beta1_2fcoin_2eproto;
};
// -------------------------------------------------------------------

class Coin final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.base.v1beta1.Coin) */ {
 public:
  inline Coin() : Coin(nullptr) {}
  ~Coin() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Coin* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Coin));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Coin(
      ::google::protobuf::internal::ConstantInitialized);

  inline Coin(const Coin& from) : Coin(nullptr, from) {}
  inline Coin(Coin&& from) noexcept
      : Coin(nullptr, std::move(from)) {}
  inline Coin& operator=(const Coin& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coin& operator=(Coin&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Coin& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coin* internal_default_instance() {
    return reinterpret_cast<const Coin*>(
        &_Coin_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Coin& a, Coin& b) { a.Swap(&b); }
  inline void Swap(Coin* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coin* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Coin* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Coin>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Coin& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Coin& from) { Coin::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Coin* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.base.v1beta1.Coin"; }

 protected:
  explicit Coin(::google::protobuf::Arena* arena);
  Coin(::google::protobuf::Arena* arena, const Coin& from);
  Coin(::google::protobuf::Arena* arena, Coin&& from) noexcept
      : Coin(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDenomFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string denom = 1 [json_name = "denom"];
  void clear_denom() ;
  const std::string& denom() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_denom(Arg_&& arg, Args_... args);
  std::string* mutable_denom();
  PROTOBUF_NODISCARD std::string* release_denom();
  void set_allocated_denom(std::string* value);

  private:
  const std::string& _internal_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_denom(
      const std::string& value);
  std::string* _internal_mutable_denom();

  public:
  // string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int", (.amino.dont_omitempty) = true];
  void clear_amount() ;
  const std::string& amount() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_amount(Arg_&& arg, Args_... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* value);

  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(
      const std::string& value);
  std::string* _internal_mutable_amount();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.v1beta1.Coin)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      44, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Coin& from_msg);
    ::google::protobuf::internal::ArenaStringPtr denom_;
    ::google::protobuf::internal::ArenaStringPtr amount_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fv1beta1_2fcoin_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Coin

// string denom = 1 [json_name = "denom"];
inline void Coin::clear_denom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.denom_.ClearToEmpty();
}
inline const std::string& Coin::denom() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.v1beta1.Coin.denom)
  return _internal_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Coin::set_denom(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.denom_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.v1beta1.Coin.denom)
}
inline std::string* Coin::mutable_denom() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_denom();
  // @@protoc_insertion_point(field_mutable:cosmos.base.v1beta1.Coin.denom)
  return _s;
}
inline const std::string& Coin::_internal_denom() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.denom_.Get();
}
inline void Coin::_internal_set_denom(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.denom_.Set(value, GetArena());
}
inline std::string* Coin::_internal_mutable_denom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.denom_.Mutable( GetArena());
}
inline std::string* Coin::release_denom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.v1beta1.Coin.denom)
  return _impl_.denom_.Release();
}
inline void Coin::set_allocated_denom(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.denom_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.denom_.IsDefault()) {
    _impl_.denom_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.v1beta1.Coin.denom)
}

// string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int", (.amino.dont_omitempty) = true];
inline void Coin::clear_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_.ClearToEmpty();
}
inline const std::string& Coin::amount() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.v1beta1.Coin.amount)
  return _internal_amount();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Coin::set_amount(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.v1beta1.Coin.amount)
}
inline std::string* Coin::mutable_amount() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:cosmos.base.v1beta1.Coin.amount)
  return _s;
}
inline const std::string& Coin::_internal_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_.Get();
}
inline void Coin::_internal_set_amount(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_.Set(value, GetArena());
}
inline std::string* Coin::_internal_mutable_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.amount_.Mutable( GetArena());
}
inline std::string* Coin::release_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.v1beta1.Coin.amount)
  return _impl_.amount_.Release();
}
inline void Coin::set_allocated_amount(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.amount_.IsDefault()) {
    _impl_.amount_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.v1beta1.Coin.amount)
}

// -------------------------------------------------------------------

// DecCoin

// string denom = 1 [json_name = "denom"];
inline void DecCoin::clear_denom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.denom_.ClearToEmpty();
}
inline const std::string& DecCoin::denom() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.v1beta1.DecCoin.denom)
  return _internal_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DecCoin::set_denom(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.denom_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.v1beta1.DecCoin.denom)
}
inline std::string* DecCoin::mutable_denom() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_denom();
  // @@protoc_insertion_point(field_mutable:cosmos.base.v1beta1.DecCoin.denom)
  return _s;
}
inline const std::string& DecCoin::_internal_denom() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.denom_.Get();
}
inline void DecCoin::_internal_set_denom(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.denom_.Set(value, GetArena());
}
inline std::string* DecCoin::_internal_mutable_denom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.denom_.Mutable( GetArena());
}
inline std::string* DecCoin::release_denom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.v1beta1.DecCoin.denom)
  return _impl_.denom_.Release();
}
inline void DecCoin::set_allocated_denom(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.denom_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.denom_.IsDefault()) {
    _impl_.denom_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.v1beta1.DecCoin.denom)
}

// string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec"];
inline void DecCoin::clear_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_.ClearToEmpty();
}
inline const std::string& DecCoin::amount() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.v1beta1.DecCoin.amount)
  return _internal_amount();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DecCoin::set_amount(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.v1beta1.DecCoin.amount)
}
inline std::string* DecCoin::mutable_amount() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:cosmos.base.v1beta1.DecCoin.amount)
  return _s;
}
inline const std::string& DecCoin::_internal_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_.Get();
}
inline void DecCoin::_internal_set_amount(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_.Set(value, GetArena());
}
inline std::string* DecCoin::_internal_mutable_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.amount_.Mutable( GetArena());
}
inline std::string* DecCoin::release_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.v1beta1.DecCoin.amount)
  return _impl_.amount_.Release();
}
inline void DecCoin::set_allocated_amount(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.amount_.IsDefault()) {
    _impl_.amount_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.v1beta1.DecCoin.amount)
}

// -------------------------------------------------------------------

// IntProto

// string int = 1 [json_name = "int", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
inline void IntProto::clear_int_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int__.ClearToEmpty();
}
inline const std::string& IntProto::int_() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.v1beta1.IntProto.int)
  return _internal_int_();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IntProto::set_int_(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int__.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.v1beta1.IntProto.int)
}
inline std::string* IntProto::mutable_int_() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_int_();
  // @@protoc_insertion_point(field_mutable:cosmos.base.v1beta1.IntProto.int)
  return _s;
}
inline const std::string& IntProto::_internal_int_() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.int__.Get();
}
inline void IntProto::_internal_set_int_(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int__.Set(value, GetArena());
}
inline std::string* IntProto::_internal_mutable_int_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.int__.Mutable( GetArena());
}
inline std::string* IntProto::release_int_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.v1beta1.IntProto.int)
  return _impl_.int__.Release();
}
inline void IntProto::set_allocated_int_(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int__.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.int__.IsDefault()) {
    _impl_.int__.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.v1beta1.IntProto.int)
}

// -------------------------------------------------------------------

// DecProto

// string dec = 1 [json_name = "dec", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec"];
inline void DecProto::clear_dec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dec_.ClearToEmpty();
}
inline const std::string& DecProto::dec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.base.v1beta1.DecProto.dec)
  return _internal_dec();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DecProto::set_dec(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dec_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.base.v1beta1.DecProto.dec)
}
inline std::string* DecProto::mutable_dec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dec();
  // @@protoc_insertion_point(field_mutable:cosmos.base.v1beta1.DecProto.dec)
  return _s;
}
inline const std::string& DecProto::_internal_dec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dec_.Get();
}
inline void DecProto::_internal_set_dec(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dec_.Set(value, GetArena());
}
inline std::string* DecProto::_internal_mutable_dec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.dec_.Mutable( GetArena());
}
inline std::string* DecProto::release_dec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.base.v1beta1.DecProto.dec)
  return _impl_.dec_.Release();
}
inline void DecProto::set_allocated_dec(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dec_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.dec_.IsDefault()) {
    _impl_.dec_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.v1beta1.DecProto.dec)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace base
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2fbase_2fv1beta1_2fcoin_2eproto_2epb_2eh
