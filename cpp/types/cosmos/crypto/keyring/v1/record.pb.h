// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/crypto/keyring/v1/record.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto_2epb_2eh
#define cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/any.pb.h"
#include "cosmos/crypto/hd/v1/hd.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto;
namespace cosmos {
namespace crypto {
namespace keyring {
namespace v1 {
class Record;
struct RecordDefaultTypeInternal;
extern RecordDefaultTypeInternal _Record_default_instance_;
class Record_Ledger;
struct Record_LedgerDefaultTypeInternal;
extern Record_LedgerDefaultTypeInternal _Record_Ledger_default_instance_;
class Record_Local;
struct Record_LocalDefaultTypeInternal;
extern Record_LocalDefaultTypeInternal _Record_Local_default_instance_;
class Record_Multi;
struct Record_MultiDefaultTypeInternal;
extern Record_MultiDefaultTypeInternal _Record_Multi_default_instance_;
class Record_Offline;
struct Record_OfflineDefaultTypeInternal;
extern Record_OfflineDefaultTypeInternal _Record_Offline_default_instance_;
}  // namespace v1
}  // namespace keyring
}  // namespace crypto
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace crypto {
namespace keyring {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class Record_Offline final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cosmos.crypto.keyring.v1.Record.Offline) */ {
 public:
  inline Record_Offline() : Record_Offline(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Record_Offline* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Record_Offline));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Record_Offline(
      ::google::protobuf::internal::ConstantInitialized);

  inline Record_Offline(const Record_Offline& from) : Record_Offline(nullptr, from) {}
  inline Record_Offline(Record_Offline&& from) noexcept
      : Record_Offline(nullptr, std::move(from)) {}
  inline Record_Offline& operator=(const Record_Offline& from) {
    CopyFrom(from);
    return *this;
  }
  inline Record_Offline& operator=(Record_Offline&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Record_Offline& default_instance() {
    return *internal_default_instance();
  }
  static inline const Record_Offline* internal_default_instance() {
    return reinterpret_cast<const Record_Offline*>(
        &_Record_Offline_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Record_Offline& a, Record_Offline& b) { a.Swap(&b); }
  inline void Swap(Record_Offline* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Record_Offline* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Record_Offline* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Record_Offline>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Record_Offline& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Record_Offline& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.crypto.keyring.v1.Record.Offline"; }

 protected:
  explicit Record_Offline(::google::protobuf::Arena* arena);
  Record_Offline(::google::protobuf::Arena* arena, const Record_Offline& from);
  Record_Offline(::google::protobuf::Arena* arena, Record_Offline&& from) noexcept
      : Record_Offline(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cosmos.crypto.keyring.v1.Record.Offline)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Record_Offline& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto;
};
// -------------------------------------------------------------------

class Record_Multi final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cosmos.crypto.keyring.v1.Record.Multi) */ {
 public:
  inline Record_Multi() : Record_Multi(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Record_Multi* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Record_Multi));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Record_Multi(
      ::google::protobuf::internal::ConstantInitialized);

  inline Record_Multi(const Record_Multi& from) : Record_Multi(nullptr, from) {}
  inline Record_Multi(Record_Multi&& from) noexcept
      : Record_Multi(nullptr, std::move(from)) {}
  inline Record_Multi& operator=(const Record_Multi& from) {
    CopyFrom(from);
    return *this;
  }
  inline Record_Multi& operator=(Record_Multi&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Record_Multi& default_instance() {
    return *internal_default_instance();
  }
  static inline const Record_Multi* internal_default_instance() {
    return reinterpret_cast<const Record_Multi*>(
        &_Record_Multi_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Record_Multi& a, Record_Multi& b) { a.Swap(&b); }
  inline void Swap(Record_Multi* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Record_Multi* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Record_Multi* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Record_Multi>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Record_Multi& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Record_Multi& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.crypto.keyring.v1.Record.Multi"; }

 protected:
  explicit Record_Multi(::google::protobuf::Arena* arena);
  Record_Multi(::google::protobuf::Arena* arena, const Record_Multi& from);
  Record_Multi(::google::protobuf::Arena* arena, Record_Multi&& from) noexcept
      : Record_Multi(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cosmos.crypto.keyring.v1.Record.Multi)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Record_Multi& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto;
};
// -------------------------------------------------------------------

class Record_Local final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.crypto.keyring.v1.Record.Local) */ {
 public:
  inline Record_Local() : Record_Local(nullptr) {}
  ~Record_Local() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Record_Local* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Record_Local));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Record_Local(
      ::google::protobuf::internal::ConstantInitialized);

  inline Record_Local(const Record_Local& from) : Record_Local(nullptr, from) {}
  inline Record_Local(Record_Local&& from) noexcept
      : Record_Local(nullptr, std::move(from)) {}
  inline Record_Local& operator=(const Record_Local& from) {
    CopyFrom(from);
    return *this;
  }
  inline Record_Local& operator=(Record_Local&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Record_Local& default_instance() {
    return *internal_default_instance();
  }
  static inline const Record_Local* internal_default_instance() {
    return reinterpret_cast<const Record_Local*>(
        &_Record_Local_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Record_Local& a, Record_Local& b) { a.Swap(&b); }
  inline void Swap(Record_Local* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Record_Local* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Record_Local* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Record_Local>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Record_Local& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Record_Local& from) { Record_Local::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Record_Local* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.crypto.keyring.v1.Record.Local"; }

 protected:
  explicit Record_Local(::google::protobuf::Arena* arena);
  Record_Local(::google::protobuf::Arena* arena, const Record_Local& from);
  Record_Local(::google::protobuf::Arena* arena, Record_Local&& from) noexcept
      : Record_Local(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPrivKeyFieldNumber = 1,
  };
  // .google.protobuf.Any priv_key = 1 [json_name = "privKey"];
  bool has_priv_key() const;
  void clear_priv_key() ;
  const ::google::protobuf::Any& priv_key() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_priv_key();
  ::google::protobuf::Any* mutable_priv_key();
  void set_allocated_priv_key(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_priv_key(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_priv_key();

  private:
  const ::google::protobuf::Any& _internal_priv_key() const;
  ::google::protobuf::Any* _internal_mutable_priv_key();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.crypto.keyring.v1.Record.Local)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Record_Local& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Any* priv_key_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto;
};
// -------------------------------------------------------------------

class Record_Ledger final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.crypto.keyring.v1.Record.Ledger) */ {
 public:
  inline Record_Ledger() : Record_Ledger(nullptr) {}
  ~Record_Ledger() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Record_Ledger* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Record_Ledger));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Record_Ledger(
      ::google::protobuf::internal::ConstantInitialized);

  inline Record_Ledger(const Record_Ledger& from) : Record_Ledger(nullptr, from) {}
  inline Record_Ledger(Record_Ledger&& from) noexcept
      : Record_Ledger(nullptr, std::move(from)) {}
  inline Record_Ledger& operator=(const Record_Ledger& from) {
    CopyFrom(from);
    return *this;
  }
  inline Record_Ledger& operator=(Record_Ledger&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Record_Ledger& default_instance() {
    return *internal_default_instance();
  }
  static inline const Record_Ledger* internal_default_instance() {
    return reinterpret_cast<const Record_Ledger*>(
        &_Record_Ledger_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Record_Ledger& a, Record_Ledger& b) { a.Swap(&b); }
  inline void Swap(Record_Ledger* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Record_Ledger* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Record_Ledger* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Record_Ledger>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Record_Ledger& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Record_Ledger& from) { Record_Ledger::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Record_Ledger* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.crypto.keyring.v1.Record.Ledger"; }

 protected:
  explicit Record_Ledger(::google::protobuf::Arena* arena);
  Record_Ledger(::google::protobuf::Arena* arena, const Record_Ledger& from);
  Record_Ledger(::google::protobuf::Arena* arena, Record_Ledger&& from) noexcept
      : Record_Ledger(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPathFieldNumber = 1,
  };
  // .cosmos.crypto.hd.v1.BIP44Params path = 1 [json_name = "path"];
  bool has_path() const;
  void clear_path() ;
  const ::cosmos::crypto::hd::v1::BIP44Params& path() const;
  PROTOBUF_NODISCARD ::cosmos::crypto::hd::v1::BIP44Params* release_path();
  ::cosmos::crypto::hd::v1::BIP44Params* mutable_path();
  void set_allocated_path(::cosmos::crypto::hd::v1::BIP44Params* value);
  void unsafe_arena_set_allocated_path(::cosmos::crypto::hd::v1::BIP44Params* value);
  ::cosmos::crypto::hd::v1::BIP44Params* unsafe_arena_release_path();

  private:
  const ::cosmos::crypto::hd::v1::BIP44Params& _internal_path() const;
  ::cosmos::crypto::hd::v1::BIP44Params* _internal_mutable_path();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.crypto.keyring.v1.Record.Ledger)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Record_Ledger& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::cosmos::crypto::hd::v1::BIP44Params* path_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto;
};
// -------------------------------------------------------------------

class Record final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.crypto.keyring.v1.Record) */ {
 public:
  inline Record() : Record(nullptr) {}
  ~Record() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Record* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Record));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Record(
      ::google::protobuf::internal::ConstantInitialized);

  inline Record(const Record& from) : Record(nullptr, from) {}
  inline Record(Record&& from) noexcept
      : Record(nullptr, std::move(from)) {}
  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }
  inline Record& operator=(Record&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Record& default_instance() {
    return *internal_default_instance();
  }
  enum ItemCase {
    kLocal = 3,
    kLedger = 4,
    kMulti = 5,
    kOffline = 6,
    ITEM_NOT_SET = 0,
  };
  static inline const Record* internal_default_instance() {
    return reinterpret_cast<const Record*>(
        &_Record_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Record& a, Record& b) { a.Swap(&b); }
  inline void Swap(Record* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Record* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Record* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Record>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Record& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Record& from) { Record::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Record* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.crypto.keyring.v1.Record"; }

 protected:
  explicit Record(::google::protobuf::Arena* arena);
  Record(::google::protobuf::Arena* arena, const Record& from);
  Record(::google::protobuf::Arena* arena, Record&& from) noexcept
      : Record(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Local = Record_Local;
  using Ledger = Record_Ledger;
  using Multi = Record_Multi;
  using Offline = Record_Offline;

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kPubKeyFieldNumber = 2,
    kLocalFieldNumber = 3,
    kLedgerFieldNumber = 4,
    kMultiFieldNumber = 5,
    kOfflineFieldNumber = 6,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .google.protobuf.Any pub_key = 2 [json_name = "pubKey"];
  bool has_pub_key() const;
  void clear_pub_key() ;
  const ::google::protobuf::Any& pub_key() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_pub_key();
  ::google::protobuf::Any* mutable_pub_key();
  void set_allocated_pub_key(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_pub_key(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_pub_key();

  private:
  const ::google::protobuf::Any& _internal_pub_key() const;
  ::google::protobuf::Any* _internal_mutable_pub_key();

  public:
  // .cosmos.crypto.keyring.v1.Record.Local local = 3 [json_name = "local"];
  bool has_local() const;
  private:
  bool _internal_has_local() const;

  public:
  void clear_local() ;
  const ::cosmos::crypto::keyring::v1::Record_Local& local() const;
  PROTOBUF_NODISCARD ::cosmos::crypto::keyring::v1::Record_Local* release_local();
  ::cosmos::crypto::keyring::v1::Record_Local* mutable_local();
  void set_allocated_local(::cosmos::crypto::keyring::v1::Record_Local* value);
  void unsafe_arena_set_allocated_local(::cosmos::crypto::keyring::v1::Record_Local* value);
  ::cosmos::crypto::keyring::v1::Record_Local* unsafe_arena_release_local();

  private:
  const ::cosmos::crypto::keyring::v1::Record_Local& _internal_local() const;
  ::cosmos::crypto::keyring::v1::Record_Local* _internal_mutable_local();

  public:
  // .cosmos.crypto.keyring.v1.Record.Ledger ledger = 4 [json_name = "ledger"];
  bool has_ledger() const;
  private:
  bool _internal_has_ledger() const;

  public:
  void clear_ledger() ;
  const ::cosmos::crypto::keyring::v1::Record_Ledger& ledger() const;
  PROTOBUF_NODISCARD ::cosmos::crypto::keyring::v1::Record_Ledger* release_ledger();
  ::cosmos::crypto::keyring::v1::Record_Ledger* mutable_ledger();
  void set_allocated_ledger(::cosmos::crypto::keyring::v1::Record_Ledger* value);
  void unsafe_arena_set_allocated_ledger(::cosmos::crypto::keyring::v1::Record_Ledger* value);
  ::cosmos::crypto::keyring::v1::Record_Ledger* unsafe_arena_release_ledger();

  private:
  const ::cosmos::crypto::keyring::v1::Record_Ledger& _internal_ledger() const;
  ::cosmos::crypto::keyring::v1::Record_Ledger* _internal_mutable_ledger();

  public:
  // .cosmos.crypto.keyring.v1.Record.Multi multi = 5 [json_name = "multi"];
  bool has_multi() const;
  private:
  bool _internal_has_multi() const;

  public:
  void clear_multi() ;
  const ::cosmos::crypto::keyring::v1::Record_Multi& multi() const;
  PROTOBUF_NODISCARD ::cosmos::crypto::keyring::v1::Record_Multi* release_multi();
  ::cosmos::crypto::keyring::v1::Record_Multi* mutable_multi();
  void set_allocated_multi(::cosmos::crypto::keyring::v1::Record_Multi* value);
  void unsafe_arena_set_allocated_multi(::cosmos::crypto::keyring::v1::Record_Multi* value);
  ::cosmos::crypto::keyring::v1::Record_Multi* unsafe_arena_release_multi();

  private:
  const ::cosmos::crypto::keyring::v1::Record_Multi& _internal_multi() const;
  ::cosmos::crypto::keyring::v1::Record_Multi* _internal_mutable_multi();

  public:
  // .cosmos.crypto.keyring.v1.Record.Offline offline = 6 [json_name = "offline"];
  bool has_offline() const;
  private:
  bool _internal_has_offline() const;

  public:
  void clear_offline() ;
  const ::cosmos::crypto::keyring::v1::Record_Offline& offline() const;
  PROTOBUF_NODISCARD ::cosmos::crypto::keyring::v1::Record_Offline* release_offline();
  ::cosmos::crypto::keyring::v1::Record_Offline* mutable_offline();
  void set_allocated_offline(::cosmos::crypto::keyring::v1::Record_Offline* value);
  void unsafe_arena_set_allocated_offline(::cosmos::crypto::keyring::v1::Record_Offline* value);
  ::cosmos::crypto::keyring::v1::Record_Offline* unsafe_arena_release_offline();

  private:
  const ::cosmos::crypto::keyring::v1::Record_Offline& _internal_offline() const;
  ::cosmos::crypto::keyring::v1::Record_Offline* _internal_mutable_offline();

  public:
  void clear_item();
  ItemCase item_case() const;
  // @@protoc_insertion_point(class_scope:cosmos.crypto.keyring.v1.Record)
 private:
  class _Internal;
  void set_has_local();
  void set_has_ledger();
  void set_has_multi();
  void set_has_offline();
  inline bool has_item() const;
  inline void clear_has_item();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 6, 5,
      44, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Record& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::Any* pub_key_;
    union ItemUnion {
      constexpr ItemUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::cosmos::crypto::keyring::v1::Record_Local* local_;
      ::cosmos::crypto::keyring::v1::Record_Ledger* ledger_;
      ::cosmos::crypto::keyring::v1::Record_Multi* multi_;
      ::cosmos::crypto::keyring::v1::Record_Offline* offline_;
    } item_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Record_Local

// .google.protobuf.Any priv_key = 1 [json_name = "privKey"];
inline bool Record_Local::has_priv_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.priv_key_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& Record_Local::_internal_priv_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Any* p = _impl_.priv_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& Record_Local::priv_key() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.crypto.keyring.v1.Record.Local.priv_key)
  return _internal_priv_key();
}
inline void Record_Local::unsafe_arena_set_allocated_priv_key(::google::protobuf::Any* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.priv_key_);
  }
  _impl_.priv_key_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.crypto.keyring.v1.Record.Local.priv_key)
}
inline ::google::protobuf::Any* Record_Local::release_priv_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* released = _impl_.priv_key_;
  _impl_.priv_key_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Any* Record_Local::unsafe_arena_release_priv_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.crypto.keyring.v1.Record.Local.priv_key)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* temp = _impl_.priv_key_;
  _impl_.priv_key_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* Record_Local::_internal_mutable_priv_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.priv_key_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Any>(GetArena());
    _impl_.priv_key_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.priv_key_;
}
inline ::google::protobuf::Any* Record_Local::mutable_priv_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Any* _msg = _internal_mutable_priv_key();
  // @@protoc_insertion_point(field_mutable:cosmos.crypto.keyring.v1.Record.Local.priv_key)
  return _msg;
}
inline void Record_Local::set_allocated_priv_key(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.priv_key_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.priv_key_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.crypto.keyring.v1.Record.Local.priv_key)
}

// -------------------------------------------------------------------

// Record_Ledger

// .cosmos.crypto.hd.v1.BIP44Params path = 1 [json_name = "path"];
inline bool Record_Ledger::has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.path_ != nullptr);
  return value;
}
inline const ::cosmos::crypto::hd::v1::BIP44Params& Record_Ledger::_internal_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::crypto::hd::v1::BIP44Params* p = _impl_.path_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::crypto::hd::v1::BIP44Params&>(::cosmos::crypto::hd::v1::_BIP44Params_default_instance_);
}
inline const ::cosmos::crypto::hd::v1::BIP44Params& Record_Ledger::path() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.crypto.keyring.v1.Record.Ledger.path)
  return _internal_path();
}
inline void Record_Ledger::unsafe_arena_set_allocated_path(::cosmos::crypto::hd::v1::BIP44Params* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.path_);
  }
  _impl_.path_ = reinterpret_cast<::cosmos::crypto::hd::v1::BIP44Params*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.crypto.keyring.v1.Record.Ledger.path)
}
inline ::cosmos::crypto::hd::v1::BIP44Params* Record_Ledger::release_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::crypto::hd::v1::BIP44Params* released = _impl_.path_;
  _impl_.path_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::crypto::hd::v1::BIP44Params* Record_Ledger::unsafe_arena_release_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.crypto.keyring.v1.Record.Ledger.path)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::crypto::hd::v1::BIP44Params* temp = _impl_.path_;
  _impl_.path_ = nullptr;
  return temp;
}
inline ::cosmos::crypto::hd::v1::BIP44Params* Record_Ledger::_internal_mutable_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.path_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::crypto::hd::v1::BIP44Params>(GetArena());
    _impl_.path_ = reinterpret_cast<::cosmos::crypto::hd::v1::BIP44Params*>(p);
  }
  return _impl_.path_;
}
inline ::cosmos::crypto::hd::v1::BIP44Params* Record_Ledger::mutable_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::crypto::hd::v1::BIP44Params* _msg = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:cosmos.crypto.keyring.v1.Record.Ledger.path)
  return _msg;
}
inline void Record_Ledger::set_allocated_path(::cosmos::crypto::hd::v1::BIP44Params* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.path_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.path_ = reinterpret_cast<::cosmos::crypto::hd::v1::BIP44Params*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.crypto.keyring.v1.Record.Ledger.path)
}

// -------------------------------------------------------------------

// Record_Multi

// -------------------------------------------------------------------

// Record_Offline

// -------------------------------------------------------------------

// Record

// string name = 1 [json_name = "name"];
inline void Record::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Record::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.crypto.keyring.v1.Record.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Record::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.crypto.keyring.v1.Record.name)
}
inline std::string* Record::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cosmos.crypto.keyring.v1.Record.name)
  return _s;
}
inline const std::string& Record::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Record::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Record::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Record::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.crypto.keyring.v1.Record.name)
  return _impl_.name_.Release();
}
inline void Record::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.crypto.keyring.v1.Record.name)
}

// .google.protobuf.Any pub_key = 2 [json_name = "pubKey"];
inline bool Record::has_pub_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pub_key_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& Record::_internal_pub_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Any* p = _impl_.pub_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& Record::pub_key() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.crypto.keyring.v1.Record.pub_key)
  return _internal_pub_key();
}
inline void Record::unsafe_arena_set_allocated_pub_key(::google::protobuf::Any* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pub_key_);
  }
  _impl_.pub_key_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.crypto.keyring.v1.Record.pub_key)
}
inline ::google::protobuf::Any* Record::release_pub_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* released = _impl_.pub_key_;
  _impl_.pub_key_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Any* Record::unsafe_arena_release_pub_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.crypto.keyring.v1.Record.pub_key)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* temp = _impl_.pub_key_;
  _impl_.pub_key_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* Record::_internal_mutable_pub_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pub_key_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Any>(GetArena());
    _impl_.pub_key_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.pub_key_;
}
inline ::google::protobuf::Any* Record::mutable_pub_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Any* _msg = _internal_mutable_pub_key();
  // @@protoc_insertion_point(field_mutable:cosmos.crypto.keyring.v1.Record.pub_key)
  return _msg;
}
inline void Record::set_allocated_pub_key(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pub_key_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pub_key_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.crypto.keyring.v1.Record.pub_key)
}

// .cosmos.crypto.keyring.v1.Record.Local local = 3 [json_name = "local"];
inline bool Record::has_local() const {
  return item_case() == kLocal;
}
inline bool Record::_internal_has_local() const {
  return item_case() == kLocal;
}
inline void Record::set_has_local() {
  _impl_._oneof_case_[0] = kLocal;
}
inline void Record::clear_local() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (item_case() == kLocal) {
    if (GetArena() == nullptr) {
      delete _impl_.item_.local_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.item_.local_);
    }
    clear_has_item();
  }
}
inline ::cosmos::crypto::keyring::v1::Record_Local* Record::release_local() {
  // @@protoc_insertion_point(field_release:cosmos.crypto.keyring.v1.Record.local)
  if (item_case() == kLocal) {
    clear_has_item();
    auto* temp = _impl_.item_.local_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.local_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cosmos::crypto::keyring::v1::Record_Local& Record::_internal_local() const {
  return item_case() == kLocal ? *_impl_.item_.local_ : reinterpret_cast<::cosmos::crypto::keyring::v1::Record_Local&>(::cosmos::crypto::keyring::v1::_Record_Local_default_instance_);
}
inline const ::cosmos::crypto::keyring::v1::Record_Local& Record::local() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.crypto.keyring.v1.Record.local)
  return _internal_local();
}
inline ::cosmos::crypto::keyring::v1::Record_Local* Record::unsafe_arena_release_local() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmos.crypto.keyring.v1.Record.local)
  if (item_case() == kLocal) {
    clear_has_item();
    auto* temp = _impl_.item_.local_;
    _impl_.item_.local_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Record::unsafe_arena_set_allocated_local(::cosmos::crypto::keyring::v1::Record_Local* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_item();
  if (value) {
    set_has_local();
    _impl_.item_.local_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.crypto.keyring.v1.Record.local)
}
inline ::cosmos::crypto::keyring::v1::Record_Local* Record::_internal_mutable_local() {
  if (item_case() != kLocal) {
    clear_item();
    set_has_local();
    _impl_.item_.local_ =
        ::google::protobuf::Message::DefaultConstruct<::cosmos::crypto::keyring::v1::Record_Local>(GetArena());
  }
  return _impl_.item_.local_;
}
inline ::cosmos::crypto::keyring::v1::Record_Local* Record::mutable_local() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cosmos::crypto::keyring::v1::Record_Local* _msg = _internal_mutable_local();
  // @@protoc_insertion_point(field_mutable:cosmos.crypto.keyring.v1.Record.local)
  return _msg;
}

// .cosmos.crypto.keyring.v1.Record.Ledger ledger = 4 [json_name = "ledger"];
inline bool Record::has_ledger() const {
  return item_case() == kLedger;
}
inline bool Record::_internal_has_ledger() const {
  return item_case() == kLedger;
}
inline void Record::set_has_ledger() {
  _impl_._oneof_case_[0] = kLedger;
}
inline void Record::clear_ledger() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (item_case() == kLedger) {
    if (GetArena() == nullptr) {
      delete _impl_.item_.ledger_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.item_.ledger_);
    }
    clear_has_item();
  }
}
inline ::cosmos::crypto::keyring::v1::Record_Ledger* Record::release_ledger() {
  // @@protoc_insertion_point(field_release:cosmos.crypto.keyring.v1.Record.ledger)
  if (item_case() == kLedger) {
    clear_has_item();
    auto* temp = _impl_.item_.ledger_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.ledger_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cosmos::crypto::keyring::v1::Record_Ledger& Record::_internal_ledger() const {
  return item_case() == kLedger ? *_impl_.item_.ledger_ : reinterpret_cast<::cosmos::crypto::keyring::v1::Record_Ledger&>(::cosmos::crypto::keyring::v1::_Record_Ledger_default_instance_);
}
inline const ::cosmos::crypto::keyring::v1::Record_Ledger& Record::ledger() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.crypto.keyring.v1.Record.ledger)
  return _internal_ledger();
}
inline ::cosmos::crypto::keyring::v1::Record_Ledger* Record::unsafe_arena_release_ledger() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmos.crypto.keyring.v1.Record.ledger)
  if (item_case() == kLedger) {
    clear_has_item();
    auto* temp = _impl_.item_.ledger_;
    _impl_.item_.ledger_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Record::unsafe_arena_set_allocated_ledger(::cosmos::crypto::keyring::v1::Record_Ledger* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_item();
  if (value) {
    set_has_ledger();
    _impl_.item_.ledger_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.crypto.keyring.v1.Record.ledger)
}
inline ::cosmos::crypto::keyring::v1::Record_Ledger* Record::_internal_mutable_ledger() {
  if (item_case() != kLedger) {
    clear_item();
    set_has_ledger();
    _impl_.item_.ledger_ =
        ::google::protobuf::Message::DefaultConstruct<::cosmos::crypto::keyring::v1::Record_Ledger>(GetArena());
  }
  return _impl_.item_.ledger_;
}
inline ::cosmos::crypto::keyring::v1::Record_Ledger* Record::mutable_ledger() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cosmos::crypto::keyring::v1::Record_Ledger* _msg = _internal_mutable_ledger();
  // @@protoc_insertion_point(field_mutable:cosmos.crypto.keyring.v1.Record.ledger)
  return _msg;
}

// .cosmos.crypto.keyring.v1.Record.Multi multi = 5 [json_name = "multi"];
inline bool Record::has_multi() const {
  return item_case() == kMulti;
}
inline bool Record::_internal_has_multi() const {
  return item_case() == kMulti;
}
inline void Record::set_has_multi() {
  _impl_._oneof_case_[0] = kMulti;
}
inline void Record::clear_multi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (item_case() == kMulti) {
    if (GetArena() == nullptr) {
      delete _impl_.item_.multi_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.item_.multi_);
    }
    clear_has_item();
  }
}
inline ::cosmos::crypto::keyring::v1::Record_Multi* Record::release_multi() {
  // @@protoc_insertion_point(field_release:cosmos.crypto.keyring.v1.Record.multi)
  if (item_case() == kMulti) {
    clear_has_item();
    auto* temp = _impl_.item_.multi_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.multi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cosmos::crypto::keyring::v1::Record_Multi& Record::_internal_multi() const {
  return item_case() == kMulti ? *_impl_.item_.multi_ : reinterpret_cast<::cosmos::crypto::keyring::v1::Record_Multi&>(::cosmos::crypto::keyring::v1::_Record_Multi_default_instance_);
}
inline const ::cosmos::crypto::keyring::v1::Record_Multi& Record::multi() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.crypto.keyring.v1.Record.multi)
  return _internal_multi();
}
inline ::cosmos::crypto::keyring::v1::Record_Multi* Record::unsafe_arena_release_multi() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmos.crypto.keyring.v1.Record.multi)
  if (item_case() == kMulti) {
    clear_has_item();
    auto* temp = _impl_.item_.multi_;
    _impl_.item_.multi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Record::unsafe_arena_set_allocated_multi(::cosmos::crypto::keyring::v1::Record_Multi* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_item();
  if (value) {
    set_has_multi();
    _impl_.item_.multi_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.crypto.keyring.v1.Record.multi)
}
inline ::cosmos::crypto::keyring::v1::Record_Multi* Record::_internal_mutable_multi() {
  if (item_case() != kMulti) {
    clear_item();
    set_has_multi();
    _impl_.item_.multi_ =
        ::google::protobuf::Message::DefaultConstruct<::cosmos::crypto::keyring::v1::Record_Multi>(GetArena());
  }
  return _impl_.item_.multi_;
}
inline ::cosmos::crypto::keyring::v1::Record_Multi* Record::mutable_multi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cosmos::crypto::keyring::v1::Record_Multi* _msg = _internal_mutable_multi();
  // @@protoc_insertion_point(field_mutable:cosmos.crypto.keyring.v1.Record.multi)
  return _msg;
}

// .cosmos.crypto.keyring.v1.Record.Offline offline = 6 [json_name = "offline"];
inline bool Record::has_offline() const {
  return item_case() == kOffline;
}
inline bool Record::_internal_has_offline() const {
  return item_case() == kOffline;
}
inline void Record::set_has_offline() {
  _impl_._oneof_case_[0] = kOffline;
}
inline void Record::clear_offline() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (item_case() == kOffline) {
    if (GetArena() == nullptr) {
      delete _impl_.item_.offline_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.item_.offline_);
    }
    clear_has_item();
  }
}
inline ::cosmos::crypto::keyring::v1::Record_Offline* Record::release_offline() {
  // @@protoc_insertion_point(field_release:cosmos.crypto.keyring.v1.Record.offline)
  if (item_case() == kOffline) {
    clear_has_item();
    auto* temp = _impl_.item_.offline_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.offline_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cosmos::crypto::keyring::v1::Record_Offline& Record::_internal_offline() const {
  return item_case() == kOffline ? *_impl_.item_.offline_ : reinterpret_cast<::cosmos::crypto::keyring::v1::Record_Offline&>(::cosmos::crypto::keyring::v1::_Record_Offline_default_instance_);
}
inline const ::cosmos::crypto::keyring::v1::Record_Offline& Record::offline() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.crypto.keyring.v1.Record.offline)
  return _internal_offline();
}
inline ::cosmos::crypto::keyring::v1::Record_Offline* Record::unsafe_arena_release_offline() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmos.crypto.keyring.v1.Record.offline)
  if (item_case() == kOffline) {
    clear_has_item();
    auto* temp = _impl_.item_.offline_;
    _impl_.item_.offline_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Record::unsafe_arena_set_allocated_offline(::cosmos::crypto::keyring::v1::Record_Offline* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_item();
  if (value) {
    set_has_offline();
    _impl_.item_.offline_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.crypto.keyring.v1.Record.offline)
}
inline ::cosmos::crypto::keyring::v1::Record_Offline* Record::_internal_mutable_offline() {
  if (item_case() != kOffline) {
    clear_item();
    set_has_offline();
    _impl_.item_.offline_ =
        ::google::protobuf::Message::DefaultConstruct<::cosmos::crypto::keyring::v1::Record_Offline>(GetArena());
  }
  return _impl_.item_.offline_;
}
inline ::cosmos::crypto::keyring::v1::Record_Offline* Record::mutable_offline() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cosmos::crypto::keyring::v1::Record_Offline* _msg = _internal_mutable_offline();
  // @@protoc_insertion_point(field_mutable:cosmos.crypto.keyring.v1.Record.offline)
  return _msg;
}

inline bool Record::has_item() const {
  return item_case() != ITEM_NOT_SET;
}
inline void Record::clear_has_item() {
  _impl_._oneof_case_[0] = ITEM_NOT_SET;
}
inline Record::ItemCase Record::item_case() const {
  return Record::ItemCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace keyring
}  // namespace crypto
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto_2epb_2eh
