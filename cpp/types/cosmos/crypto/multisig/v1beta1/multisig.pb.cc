// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/crypto/multisig/v1beta1/multisig.proto
// Protobuf C++ Version: 5.29.4

#include "cosmos/crypto/multisig/v1beta1/multisig.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace cosmos {
namespace crypto {
namespace multisig {
namespace v1beta1 {

inline constexpr MultiSignature::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : signatures_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MultiSignature::MultiSignature(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MultiSignatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiSignatureDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiSignatureDefaultTypeInternal() {}
  union {
    MultiSignature _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiSignatureDefaultTypeInternal _MultiSignature_default_instance_;

inline constexpr CompactBitArray::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : elems_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        extra_bits_stored_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CompactBitArray::CompactBitArray(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CompactBitArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompactBitArrayDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompactBitArrayDefaultTypeInternal() {}
  union {
    CompactBitArray _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompactBitArrayDefaultTypeInternal _CompactBitArray_default_instance_;
}  // namespace v1beta1
}  // namespace multisig
}  // namespace crypto
}  // namespace cosmos
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto = nullptr;
const ::uint32_t
    TableStruct_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cosmos::crypto::multisig::v1beta1::MultiSignature, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::crypto::multisig::v1beta1::MultiSignature, _impl_.signatures_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cosmos::crypto::multisig::v1beta1::CompactBitArray, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::crypto::multisig::v1beta1::CompactBitArray, _impl_.extra_bits_stored_),
        PROTOBUF_FIELD_OFFSET(::cosmos::crypto::multisig::v1beta1::CompactBitArray, _impl_.elems_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::cosmos::crypto::multisig::v1beta1::MultiSignature)},
        {9, -1, -1, sizeof(::cosmos::crypto::multisig::v1beta1::CompactBitArray)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::crypto::multisig::v1beta1::_MultiSignature_default_instance_._instance,
    &::cosmos::crypto::multisig::v1beta1::_CompactBitArray_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n-cosmos/crypto/multisig/v1beta1/multisi"
    "g.proto\022\036cosmos.crypto.multisig.v1beta1\032"
    "\024gogoproto/gogo.proto\"6\n\016MultiSignature\022"
    "\036\n\nsignatures\030\001 \003(\014R\nsignatures:\004\320\241\037\001\"Y\n"
    "\017CompactBitArray\022*\n\021extra_bits_stored\030\001 "
    "\001(\rR\017extraBitsStored\022\024\n\005elems\030\002 \001(\014R\005ele"
    "ms:\004\230\240\037\000B+Z)github.com/cosmos/cosmos-sdk"
    "/crypto/typesb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto_deps[1] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto = {
    false,
    false,
    301,
    descriptor_table_protodef_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto,
    "cosmos/crypto/multisig/v1beta1/multisig.proto",
    &descriptor_table_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto_once,
    descriptor_table_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto::offsets,
    file_level_enum_descriptors_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto,
    file_level_service_descriptors_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto,
};
namespace cosmos {
namespace crypto {
namespace multisig {
namespace v1beta1 {
// ===================================================================

class MultiSignature::_Internal {
 public:
};

MultiSignature::MultiSignature(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.crypto.multisig.v1beta1.MultiSignature)
}
inline PROTOBUF_NDEBUG_INLINE MultiSignature::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::crypto::multisig::v1beta1::MultiSignature& from_msg)
      : signatures_{visibility, arena, from.signatures_},
        _cached_size_{0} {}

MultiSignature::MultiSignature(
    ::google::protobuf::Arena* arena,
    const MultiSignature& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MultiSignature* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:cosmos.crypto.multisig.v1beta1.MultiSignature)
}
inline PROTOBUF_NDEBUG_INLINE MultiSignature::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : signatures_{visibility, arena},
        _cached_size_{0} {}

inline void MultiSignature::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
MultiSignature::~MultiSignature() {
  // @@protoc_insertion_point(destructor:cosmos.crypto.multisig.v1beta1.MultiSignature)
  SharedDtor(*this);
}
inline void MultiSignature::SharedDtor(MessageLite& self) {
  MultiSignature& this_ = static_cast<MultiSignature&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* MultiSignature::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MultiSignature(arena);
}
constexpr auto MultiSignature::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(MultiSignature, _impl_.signatures_) +
          decltype(MultiSignature::_impl_.signatures_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(MultiSignature), alignof(MultiSignature), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&MultiSignature::PlacementNew_,
                                 sizeof(MultiSignature),
                                 alignof(MultiSignature));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MultiSignature::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MultiSignature_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MultiSignature::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MultiSignature>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MultiSignature::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MultiSignature>(), &MultiSignature::ByteSizeLong,
            &MultiSignature::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MultiSignature, _impl_._cached_size_),
        false,
    },
    &MultiSignature::kDescriptorMethods,
    &descriptor_table_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MultiSignature::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> MultiSignature::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::crypto::multisig::v1beta1::MultiSignature>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated bytes signatures = 1 [json_name = "signatures"];
    {::_pbi::TcParser::FastBR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MultiSignature, _impl_.signatures_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated bytes signatures = 1 [json_name = "signatures"];
    {PROTOBUF_FIELD_OFFSET(MultiSignature, _impl_.signatures_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void MultiSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.crypto.multisig.v1beta1.MultiSignature)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signatures_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MultiSignature::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MultiSignature& this_ = static_cast<const MultiSignature&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MultiSignature::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MultiSignature& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.crypto.multisig.v1beta1.MultiSignature)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated bytes signatures = 1 [json_name = "signatures"];
          for (int i = 0, n = this_._internal_signatures_size(); i < n; ++i) {
            const auto& s = this_._internal_signatures().Get(i);
            target = stream->WriteBytes(1, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.crypto.multisig.v1beta1.MultiSignature)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MultiSignature::ByteSizeLong(const MessageLite& base) {
          const MultiSignature& this_ = static_cast<const MultiSignature&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MultiSignature::ByteSizeLong() const {
          const MultiSignature& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.crypto.multisig.v1beta1.MultiSignature)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated bytes signatures = 1 [json_name = "signatures"];
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_signatures().size());
              for (int i = 0, n = this_._internal_signatures().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
                    this_._internal_signatures().Get(i));
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MultiSignature::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MultiSignature*>(&to_msg);
  auto& from = static_cast<const MultiSignature&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.crypto.multisig.v1beta1.MultiSignature)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_signatures()->MergeFrom(from._internal_signatures());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MultiSignature::CopyFrom(const MultiSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.crypto.multisig.v1beta1.MultiSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MultiSignature::InternalSwap(MultiSignature* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.signatures_.InternalSwap(&other->_impl_.signatures_);
}

::google::protobuf::Metadata MultiSignature::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CompactBitArray::_Internal {
 public:
};

CompactBitArray::CompactBitArray(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.crypto.multisig.v1beta1.CompactBitArray)
}
inline PROTOBUF_NDEBUG_INLINE CompactBitArray::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::crypto::multisig::v1beta1::CompactBitArray& from_msg)
      : elems_(arena, from.elems_),
        _cached_size_{0} {}

CompactBitArray::CompactBitArray(
    ::google::protobuf::Arena* arena,
    const CompactBitArray& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CompactBitArray* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.extra_bits_stored_ = from._impl_.extra_bits_stored_;

  // @@protoc_insertion_point(copy_constructor:cosmos.crypto.multisig.v1beta1.CompactBitArray)
}
inline PROTOBUF_NDEBUG_INLINE CompactBitArray::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : elems_(arena),
        _cached_size_{0} {}

inline void CompactBitArray::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.extra_bits_stored_ = {};
}
CompactBitArray::~CompactBitArray() {
  // @@protoc_insertion_point(destructor:cosmos.crypto.multisig.v1beta1.CompactBitArray)
  SharedDtor(*this);
}
inline void CompactBitArray::SharedDtor(MessageLite& self) {
  CompactBitArray& this_ = static_cast<CompactBitArray&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.elems_.Destroy();
  this_._impl_.~Impl_();
}

inline void* CompactBitArray::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CompactBitArray(arena);
}
constexpr auto CompactBitArray::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CompactBitArray),
                                            alignof(CompactBitArray));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CompactBitArray::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CompactBitArray_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CompactBitArray::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CompactBitArray>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CompactBitArray::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CompactBitArray>(), &CompactBitArray::ByteSizeLong,
            &CompactBitArray::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CompactBitArray, _impl_._cached_size_),
        false,
    },
    &CompactBitArray::kDescriptorMethods,
    &descriptor_table_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CompactBitArray::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> CompactBitArray::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::crypto::multisig::v1beta1::CompactBitArray>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bytes elems = 2 [json_name = "elems"];
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CompactBitArray, _impl_.elems_)}},
    // uint32 extra_bits_stored = 1 [json_name = "extraBitsStored"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CompactBitArray, _impl_.extra_bits_stored_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CompactBitArray, _impl_.extra_bits_stored_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 extra_bits_stored = 1 [json_name = "extraBitsStored"];
    {PROTOBUF_FIELD_OFFSET(CompactBitArray, _impl_.extra_bits_stored_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // bytes elems = 2 [json_name = "elems"];
    {PROTOBUF_FIELD_OFFSET(CompactBitArray, _impl_.elems_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void CompactBitArray::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.crypto.multisig.v1beta1.CompactBitArray)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.elems_.ClearToEmpty();
  _impl_.extra_bits_stored_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CompactBitArray::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CompactBitArray& this_ = static_cast<const CompactBitArray&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CompactBitArray::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CompactBitArray& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.crypto.multisig.v1beta1.CompactBitArray)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 extra_bits_stored = 1 [json_name = "extraBitsStored"];
          if (this_._internal_extra_bits_stored() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_extra_bits_stored(), target);
          }

          // bytes elems = 2 [json_name = "elems"];
          if (!this_._internal_elems().empty()) {
            const std::string& _s = this_._internal_elems();
            target = stream->WriteBytesMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.crypto.multisig.v1beta1.CompactBitArray)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CompactBitArray::ByteSizeLong(const MessageLite& base) {
          const CompactBitArray& this_ = static_cast<const CompactBitArray&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CompactBitArray::ByteSizeLong() const {
          const CompactBitArray& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.crypto.multisig.v1beta1.CompactBitArray)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bytes elems = 2 [json_name = "elems"];
            if (!this_._internal_elems().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_elems());
            }
            // uint32 extra_bits_stored = 1 [json_name = "extraBitsStored"];
            if (this_._internal_extra_bits_stored() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_extra_bits_stored());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CompactBitArray::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CompactBitArray*>(&to_msg);
  auto& from = static_cast<const CompactBitArray&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.crypto.multisig.v1beta1.CompactBitArray)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_elems().empty()) {
    _this->_internal_set_elems(from._internal_elems());
  }
  if (from._internal_extra_bits_stored() != 0) {
    _this->_impl_.extra_bits_stored_ = from._impl_.extra_bits_stored_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CompactBitArray::CopyFrom(const CompactBitArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.crypto.multisig.v1beta1.CompactBitArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CompactBitArray::InternalSwap(CompactBitArray* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.elems_, &other->_impl_.elems_, arena);
        swap(_impl_.extra_bits_stored_, other->_impl_.extra_bits_stored_);
}

::google::protobuf::Metadata CompactBitArray::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace multisig
}  // namespace crypto
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
