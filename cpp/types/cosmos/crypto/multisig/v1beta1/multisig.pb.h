// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/crypto/multisig/v1beta1/multisig.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto_2epb_2eh
#define cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto;
namespace cosmos {
namespace crypto {
namespace multisig {
namespace v1beta1 {
class CompactBitArray;
struct CompactBitArrayDefaultTypeInternal;
extern CompactBitArrayDefaultTypeInternal _CompactBitArray_default_instance_;
class MultiSignature;
struct MultiSignatureDefaultTypeInternal;
extern MultiSignatureDefaultTypeInternal _MultiSignature_default_instance_;
}  // namespace v1beta1
}  // namespace multisig
}  // namespace crypto
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace crypto {
namespace multisig {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class MultiSignature final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.crypto.multisig.v1beta1.MultiSignature) */ {
 public:
  inline MultiSignature() : MultiSignature(nullptr) {}
  ~MultiSignature() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MultiSignature* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MultiSignature));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MultiSignature(
      ::google::protobuf::internal::ConstantInitialized);

  inline MultiSignature(const MultiSignature& from) : MultiSignature(nullptr, from) {}
  inline MultiSignature(MultiSignature&& from) noexcept
      : MultiSignature(nullptr, std::move(from)) {}
  inline MultiSignature& operator=(const MultiSignature& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiSignature& operator=(MultiSignature&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiSignature& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiSignature* internal_default_instance() {
    return reinterpret_cast<const MultiSignature*>(
        &_MultiSignature_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MultiSignature& a, MultiSignature& b) { a.Swap(&b); }
  inline void Swap(MultiSignature* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiSignature* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiSignature* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MultiSignature>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MultiSignature& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MultiSignature& from) { MultiSignature::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MultiSignature* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.crypto.multisig.v1beta1.MultiSignature"; }

 protected:
  explicit MultiSignature(::google::protobuf::Arena* arena);
  MultiSignature(::google::protobuf::Arena* arena, const MultiSignature& from);
  MultiSignature(::google::protobuf::Arena* arena, MultiSignature&& from) noexcept
      : MultiSignature(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSignaturesFieldNumber = 1,
  };
  // repeated bytes signatures = 1 [json_name = "signatures"];
  int signatures_size() const;
  private:
  int _internal_signatures_size() const;

  public:
  void clear_signatures() ;
  const std::string& signatures(int index) const;
  std::string* mutable_signatures(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signatures(int index, Arg_&& value, Args_... args);
  std::string* add_signatures();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_signatures(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& signatures() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_signatures();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_signatures() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_signatures();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.crypto.multisig.v1beta1.MultiSignature)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MultiSignature& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> signatures_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto;
};
// -------------------------------------------------------------------

class CompactBitArray final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.crypto.multisig.v1beta1.CompactBitArray) */ {
 public:
  inline CompactBitArray() : CompactBitArray(nullptr) {}
  ~CompactBitArray() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CompactBitArray* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CompactBitArray));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CompactBitArray(
      ::google::protobuf::internal::ConstantInitialized);

  inline CompactBitArray(const CompactBitArray& from) : CompactBitArray(nullptr, from) {}
  inline CompactBitArray(CompactBitArray&& from) noexcept
      : CompactBitArray(nullptr, std::move(from)) {}
  inline CompactBitArray& operator=(const CompactBitArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompactBitArray& operator=(CompactBitArray&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompactBitArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompactBitArray* internal_default_instance() {
    return reinterpret_cast<const CompactBitArray*>(
        &_CompactBitArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(CompactBitArray& a, CompactBitArray& b) { a.Swap(&b); }
  inline void Swap(CompactBitArray* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompactBitArray* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompactBitArray* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CompactBitArray>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CompactBitArray& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CompactBitArray& from) { CompactBitArray::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CompactBitArray* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.crypto.multisig.v1beta1.CompactBitArray"; }

 protected:
  explicit CompactBitArray(::google::protobuf::Arena* arena);
  CompactBitArray(::google::protobuf::Arena* arena, const CompactBitArray& from);
  CompactBitArray(::google::protobuf::Arena* arena, CompactBitArray&& from) noexcept
      : CompactBitArray(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kElemsFieldNumber = 2,
    kExtraBitsStoredFieldNumber = 1,
  };
  // bytes elems = 2 [json_name = "elems"];
  void clear_elems() ;
  const std::string& elems() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_elems(Arg_&& arg, Args_... args);
  std::string* mutable_elems();
  PROTOBUF_NODISCARD std::string* release_elems();
  void set_allocated_elems(std::string* value);

  private:
  const std::string& _internal_elems() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_elems(
      const std::string& value);
  std::string* _internal_mutable_elems();

  public:
  // uint32 extra_bits_stored = 1 [json_name = "extraBitsStored"];
  void clear_extra_bits_stored() ;
  ::uint32_t extra_bits_stored() const;
  void set_extra_bits_stored(::uint32_t value);

  private:
  ::uint32_t _internal_extra_bits_stored() const;
  void _internal_set_extra_bits_stored(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.crypto.multisig.v1beta1.CompactBitArray)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CompactBitArray& from_msg);
    ::google::protobuf::internal::ArenaStringPtr elems_;
    ::uint32_t extra_bits_stored_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MultiSignature

// repeated bytes signatures = 1 [json_name = "signatures"];
inline int MultiSignature::_internal_signatures_size() const {
  return _internal_signatures().size();
}
inline int MultiSignature::signatures_size() const {
  return _internal_signatures_size();
}
inline void MultiSignature::clear_signatures() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signatures_.Clear();
}
inline std::string* MultiSignature::add_signatures() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_signatures()->Add();
  // @@protoc_insertion_point(field_add_mutable:cosmos.crypto.multisig.v1beta1.MultiSignature.signatures)
  return _s;
}
inline const std::string& MultiSignature::signatures(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.crypto.multisig.v1beta1.MultiSignature.signatures)
  return _internal_signatures().Get(index);
}
inline std::string* MultiSignature::mutable_signatures(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.crypto.multisig.v1beta1.MultiSignature.signatures)
  return _internal_mutable_signatures()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void MultiSignature::set_signatures(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_signatures()->Mutable(index),
      std::forward<Arg_>(value), args... , ::google::protobuf::internal::BytesTag{});
  // @@protoc_insertion_point(field_set:cosmos.crypto.multisig.v1beta1.MultiSignature.signatures)
}
template <typename Arg_, typename... Args_>
inline void MultiSignature::add_signatures(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_signatures(),
                               std::forward<Arg_>(value),
                               args... , ::google::protobuf::internal::BytesTag{});
  // @@protoc_insertion_point(field_add:cosmos.crypto.multisig.v1beta1.MultiSignature.signatures)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MultiSignature::signatures() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.crypto.multisig.v1beta1.MultiSignature.signatures)
  return _internal_signatures();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MultiSignature::mutable_signatures() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.crypto.multisig.v1beta1.MultiSignature.signatures)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_signatures();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MultiSignature::_internal_signatures() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.signatures_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MultiSignature::_internal_mutable_signatures() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.signatures_;
}

// -------------------------------------------------------------------

// CompactBitArray

// uint32 extra_bits_stored = 1 [json_name = "extraBitsStored"];
inline void CompactBitArray::clear_extra_bits_stored() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extra_bits_stored_ = 0u;
}
inline ::uint32_t CompactBitArray::extra_bits_stored() const {
  // @@protoc_insertion_point(field_get:cosmos.crypto.multisig.v1beta1.CompactBitArray.extra_bits_stored)
  return _internal_extra_bits_stored();
}
inline void CompactBitArray::set_extra_bits_stored(::uint32_t value) {
  _internal_set_extra_bits_stored(value);
  // @@protoc_insertion_point(field_set:cosmos.crypto.multisig.v1beta1.CompactBitArray.extra_bits_stored)
}
inline ::uint32_t CompactBitArray::_internal_extra_bits_stored() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.extra_bits_stored_;
}
inline void CompactBitArray::_internal_set_extra_bits_stored(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extra_bits_stored_ = value;
}

// bytes elems = 2 [json_name = "elems"];
inline void CompactBitArray::clear_elems() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.elems_.ClearToEmpty();
}
inline const std::string& CompactBitArray::elems() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.crypto.multisig.v1beta1.CompactBitArray.elems)
  return _internal_elems();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CompactBitArray::set_elems(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.elems_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.crypto.multisig.v1beta1.CompactBitArray.elems)
}
inline std::string* CompactBitArray::mutable_elems() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_elems();
  // @@protoc_insertion_point(field_mutable:cosmos.crypto.multisig.v1beta1.CompactBitArray.elems)
  return _s;
}
inline const std::string& CompactBitArray::_internal_elems() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.elems_.Get();
}
inline void CompactBitArray::_internal_set_elems(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.elems_.Set(value, GetArena());
}
inline std::string* CompactBitArray::_internal_mutable_elems() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.elems_.Mutable( GetArena());
}
inline std::string* CompactBitArray::release_elems() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.crypto.multisig.v1beta1.CompactBitArray.elems)
  return _impl_.elems_.Release();
}
inline void CompactBitArray::set_allocated_elems(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.elems_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.elems_.IsDefault()) {
    _impl_.elems_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.crypto.multisig.v1beta1.CompactBitArray.elems)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace multisig
}  // namespace crypto
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto_2epb_2eh
