// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/crypto/multisig/keys.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2fcrypto_2fmultisig_2fkeys_2eproto_2epb_2eh
#define cosmos_2fcrypto_2fmultisig_2fkeys_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/any.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fcrypto_2fmultisig_2fkeys_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fcrypto_2fmultisig_2fkeys_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2fcrypto_2fmultisig_2fkeys_2eproto;
namespace cosmos {
namespace crypto {
namespace multisig {
class LegacyAminoPubKey;
struct LegacyAminoPubKeyDefaultTypeInternal;
extern LegacyAminoPubKeyDefaultTypeInternal _LegacyAminoPubKey_default_instance_;
}  // namespace multisig
}  // namespace crypto
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace crypto {
namespace multisig {

// ===================================================================


// -------------------------------------------------------------------

class LegacyAminoPubKey final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.crypto.multisig.LegacyAminoPubKey) */ {
 public:
  inline LegacyAminoPubKey() : LegacyAminoPubKey(nullptr) {}
  ~LegacyAminoPubKey() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LegacyAminoPubKey* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LegacyAminoPubKey));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LegacyAminoPubKey(
      ::google::protobuf::internal::ConstantInitialized);

  inline LegacyAminoPubKey(const LegacyAminoPubKey& from) : LegacyAminoPubKey(nullptr, from) {}
  inline LegacyAminoPubKey(LegacyAminoPubKey&& from) noexcept
      : LegacyAminoPubKey(nullptr, std::move(from)) {}
  inline LegacyAminoPubKey& operator=(const LegacyAminoPubKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline LegacyAminoPubKey& operator=(LegacyAminoPubKey&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LegacyAminoPubKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const LegacyAminoPubKey* internal_default_instance() {
    return reinterpret_cast<const LegacyAminoPubKey*>(
        &_LegacyAminoPubKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(LegacyAminoPubKey& a, LegacyAminoPubKey& b) { a.Swap(&b); }
  inline void Swap(LegacyAminoPubKey* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LegacyAminoPubKey* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LegacyAminoPubKey* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LegacyAminoPubKey>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LegacyAminoPubKey& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LegacyAminoPubKey& from) { LegacyAminoPubKey::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LegacyAminoPubKey* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.crypto.multisig.LegacyAminoPubKey"; }

 protected:
  explicit LegacyAminoPubKey(::google::protobuf::Arena* arena);
  LegacyAminoPubKey(::google::protobuf::Arena* arena, const LegacyAminoPubKey& from);
  LegacyAminoPubKey(::google::protobuf::Arena* arena, LegacyAminoPubKey&& from) noexcept
      : LegacyAminoPubKey(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPublicKeysFieldNumber = 2,
    kThresholdFieldNumber = 1,
  };
  // repeated .google.protobuf.Any public_keys = 2 [json_name = "publicKeys", (.gogoproto.customname) = "PubKeys", (.amino.field_name) = "pubkeys"];
  int public_keys_size() const;
  private:
  int _internal_public_keys_size() const;

  public:
  void clear_public_keys() ;
  ::google::protobuf::Any* mutable_public_keys(int index);
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* mutable_public_keys();

  private:
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& _internal_public_keys() const;
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* _internal_mutable_public_keys();
  public:
  const ::google::protobuf::Any& public_keys(int index) const;
  ::google::protobuf::Any* add_public_keys();
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& public_keys() const;
  // uint32 threshold = 1 [json_name = "threshold"];
  void clear_threshold() ;
  ::uint32_t threshold() const;
  void set_threshold(::uint32_t value);

  private:
  ::uint32_t _internal_threshold() const;
  void _internal_set_threshold(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.crypto.multisig.LegacyAminoPubKey)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LegacyAminoPubKey& from_msg);
    ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > public_keys_;
    ::uint32_t threshold_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fcrypto_2fmultisig_2fkeys_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LegacyAminoPubKey

// uint32 threshold = 1 [json_name = "threshold"];
inline void LegacyAminoPubKey::clear_threshold() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.threshold_ = 0u;
}
inline ::uint32_t LegacyAminoPubKey::threshold() const {
  // @@protoc_insertion_point(field_get:cosmos.crypto.multisig.LegacyAminoPubKey.threshold)
  return _internal_threshold();
}
inline void LegacyAminoPubKey::set_threshold(::uint32_t value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:cosmos.crypto.multisig.LegacyAminoPubKey.threshold)
}
inline ::uint32_t LegacyAminoPubKey::_internal_threshold() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.threshold_;
}
inline void LegacyAminoPubKey::_internal_set_threshold(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.threshold_ = value;
}

// repeated .google.protobuf.Any public_keys = 2 [json_name = "publicKeys", (.gogoproto.customname) = "PubKeys", (.amino.field_name) = "pubkeys"];
inline int LegacyAminoPubKey::_internal_public_keys_size() const {
  return _internal_public_keys().size();
}
inline int LegacyAminoPubKey::public_keys_size() const {
  return _internal_public_keys_size();
}
inline ::google::protobuf::Any* LegacyAminoPubKey::mutable_public_keys(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.crypto.multisig.LegacyAminoPubKey.public_keys)
  return _internal_mutable_public_keys()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* LegacyAminoPubKey::mutable_public_keys()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.crypto.multisig.LegacyAminoPubKey.public_keys)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_public_keys();
}
inline const ::google::protobuf::Any& LegacyAminoPubKey::public_keys(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.crypto.multisig.LegacyAminoPubKey.public_keys)
  return _internal_public_keys().Get(index);
}
inline ::google::protobuf::Any* LegacyAminoPubKey::add_public_keys() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::Any* _add = _internal_mutable_public_keys()->Add();
  // @@protoc_insertion_point(field_add:cosmos.crypto.multisig.LegacyAminoPubKey.public_keys)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& LegacyAminoPubKey::public_keys() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.crypto.multisig.LegacyAminoPubKey.public_keys)
  return _internal_public_keys();
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>&
LegacyAminoPubKey::_internal_public_keys() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.public_keys_;
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>*
LegacyAminoPubKey::_internal_mutable_public_keys() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.public_keys_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace multisig
}  // namespace crypto
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2fcrypto_2fmultisig_2fkeys_2eproto_2epb_2eh
