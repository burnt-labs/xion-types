// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/params/v1beta1/query.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2fparams_2fv1beta1_2fquery_2eproto_2epb_2eh
#define cosmos_2fparams_2fv1beta1_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/api/annotations.pb.h"
#include "cosmos/params/v1beta1/params.pb.h"
#include "amino/amino.pb.h"
#include "cosmos_proto/cosmos.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fparams_2fv1beta1_2fquery_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fparams_2fv1beta1_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2fparams_2fv1beta1_2fquery_2eproto;
namespace cosmos {
namespace params {
namespace v1beta1 {
class QueryParamsRequest;
struct QueryParamsRequestDefaultTypeInternal;
extern QueryParamsRequestDefaultTypeInternal _QueryParamsRequest_default_instance_;
class QueryParamsResponse;
struct QueryParamsResponseDefaultTypeInternal;
extern QueryParamsResponseDefaultTypeInternal _QueryParamsResponse_default_instance_;
class QuerySubspacesRequest;
struct QuerySubspacesRequestDefaultTypeInternal;
extern QuerySubspacesRequestDefaultTypeInternal _QuerySubspacesRequest_default_instance_;
class QuerySubspacesResponse;
struct QuerySubspacesResponseDefaultTypeInternal;
extern QuerySubspacesResponseDefaultTypeInternal _QuerySubspacesResponse_default_instance_;
class Subspace;
struct SubspaceDefaultTypeInternal;
extern SubspaceDefaultTypeInternal _Subspace_default_instance_;
}  // namespace v1beta1
}  // namespace params
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace params {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class Subspace final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.params.v1beta1.Subspace) */ {
 public:
  inline Subspace() : Subspace(nullptr) {}
  ~Subspace() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Subspace* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Subspace));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Subspace(
      ::google::protobuf::internal::ConstantInitialized);

  inline Subspace(const Subspace& from) : Subspace(nullptr, from) {}
  inline Subspace(Subspace&& from) noexcept
      : Subspace(nullptr, std::move(from)) {}
  inline Subspace& operator=(const Subspace& from) {
    CopyFrom(from);
    return *this;
  }
  inline Subspace& operator=(Subspace&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Subspace& default_instance() {
    return *internal_default_instance();
  }
  static inline const Subspace* internal_default_instance() {
    return reinterpret_cast<const Subspace*>(
        &_Subspace_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Subspace& a, Subspace& b) { a.Swap(&b); }
  inline void Swap(Subspace* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Subspace* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Subspace* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Subspace>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Subspace& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Subspace& from) { Subspace::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Subspace* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.params.v1beta1.Subspace"; }

 protected:
  explicit Subspace(::google::protobuf::Arena* arena);
  Subspace(::google::protobuf::Arena* arena, const Subspace& from);
  Subspace(::google::protobuf::Arena* arena, Subspace&& from) noexcept
      : Subspace(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeysFieldNumber = 2,
    kSubspaceFieldNumber = 1,
  };
  // repeated string keys = 2 [json_name = "keys"];
  int keys_size() const;
  private:
  int _internal_keys_size() const;

  public:
  void clear_keys() ;
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_keys(int index, Arg_&& value, Args_... args);
  std::string* add_keys();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_keys(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& keys() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_keys();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_keys() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_keys();

  public:
  // string subspace = 1 [json_name = "subspace"];
  void clear_subspace() ;
  const std::string& subspace() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subspace(Arg_&& arg, Args_... args);
  std::string* mutable_subspace();
  PROTOBUF_NODISCARD std::string* release_subspace();
  void set_allocated_subspace(std::string* value);

  private:
  const std::string& _internal_subspace() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subspace(
      const std::string& value);
  std::string* _internal_mutable_subspace();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.params.v1beta1.Subspace)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Subspace& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> keys_;
    ::google::protobuf::internal::ArenaStringPtr subspace_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fparams_2fv1beta1_2fquery_2eproto;
};
// -------------------------------------------------------------------

class QuerySubspacesRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cosmos.params.v1beta1.QuerySubspacesRequest) */ {
 public:
  inline QuerySubspacesRequest() : QuerySubspacesRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QuerySubspacesRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QuerySubspacesRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QuerySubspacesRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline QuerySubspacesRequest(const QuerySubspacesRequest& from) : QuerySubspacesRequest(nullptr, from) {}
  inline QuerySubspacesRequest(QuerySubspacesRequest&& from) noexcept
      : QuerySubspacesRequest(nullptr, std::move(from)) {}
  inline QuerySubspacesRequest& operator=(const QuerySubspacesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySubspacesRequest& operator=(QuerySubspacesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuerySubspacesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuerySubspacesRequest* internal_default_instance() {
    return reinterpret_cast<const QuerySubspacesRequest*>(
        &_QuerySubspacesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(QuerySubspacesRequest& a, QuerySubspacesRequest& b) { a.Swap(&b); }
  inline void Swap(QuerySubspacesRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySubspacesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuerySubspacesRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<QuerySubspacesRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QuerySubspacesRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QuerySubspacesRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.params.v1beta1.QuerySubspacesRequest"; }

 protected:
  explicit QuerySubspacesRequest(::google::protobuf::Arena* arena);
  QuerySubspacesRequest(::google::protobuf::Arena* arena, const QuerySubspacesRequest& from);
  QuerySubspacesRequest(::google::protobuf::Arena* arena, QuerySubspacesRequest&& from) noexcept
      : QuerySubspacesRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cosmos.params.v1beta1.QuerySubspacesRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QuerySubspacesRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_cosmos_2fparams_2fv1beta1_2fquery_2eproto;
};
// -------------------------------------------------------------------

class QueryParamsRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.params.v1beta1.QueryParamsRequest) */ {
 public:
  inline QueryParamsRequest() : QueryParamsRequest(nullptr) {}
  ~QueryParamsRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QueryParamsRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QueryParamsRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueryParamsRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueryParamsRequest(const QueryParamsRequest& from) : QueryParamsRequest(nullptr, from) {}
  inline QueryParamsRequest(QueryParamsRequest&& from) noexcept
      : QueryParamsRequest(nullptr, std::move(from)) {}
  inline QueryParamsRequest& operator=(const QueryParamsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryParamsRequest& operator=(QueryParamsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryParamsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryParamsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryParamsRequest*>(
        &_QueryParamsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(QueryParamsRequest& a, QueryParamsRequest& b) { a.Swap(&b); }
  inline void Swap(QueryParamsRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryParamsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryParamsRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QueryParamsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryParamsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueryParamsRequest& from) { QueryParamsRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QueryParamsRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.params.v1beta1.QueryParamsRequest"; }

 protected:
  explicit QueryParamsRequest(::google::protobuf::Arena* arena);
  QueryParamsRequest(::google::protobuf::Arena* arena, const QueryParamsRequest& from);
  QueryParamsRequest(::google::protobuf::Arena* arena, QueryParamsRequest&& from) noexcept
      : QueryParamsRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSubspaceFieldNumber = 1,
    kKeyFieldNumber = 2,
  };
  // string subspace = 1 [json_name = "subspace"];
  void clear_subspace() ;
  const std::string& subspace() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subspace(Arg_&& arg, Args_... args);
  std::string* mutable_subspace();
  PROTOBUF_NODISCARD std::string* release_subspace();
  void set_allocated_subspace(std::string* value);

  private:
  const std::string& _internal_subspace() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subspace(
      const std::string& value);
  std::string* _internal_mutable_subspace();

  public:
  // string key = 2 [json_name = "key"];
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.params.v1beta1.QueryParamsRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      60, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QueryParamsRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr subspace_;
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fparams_2fv1beta1_2fquery_2eproto;
};
// -------------------------------------------------------------------

class QuerySubspacesResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.params.v1beta1.QuerySubspacesResponse) */ {
 public:
  inline QuerySubspacesResponse() : QuerySubspacesResponse(nullptr) {}
  ~QuerySubspacesResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QuerySubspacesResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QuerySubspacesResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QuerySubspacesResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline QuerySubspacesResponse(const QuerySubspacesResponse& from) : QuerySubspacesResponse(nullptr, from) {}
  inline QuerySubspacesResponse(QuerySubspacesResponse&& from) noexcept
      : QuerySubspacesResponse(nullptr, std::move(from)) {}
  inline QuerySubspacesResponse& operator=(const QuerySubspacesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySubspacesResponse& operator=(QuerySubspacesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuerySubspacesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuerySubspacesResponse* internal_default_instance() {
    return reinterpret_cast<const QuerySubspacesResponse*>(
        &_QuerySubspacesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(QuerySubspacesResponse& a, QuerySubspacesResponse& b) { a.Swap(&b); }
  inline void Swap(QuerySubspacesResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySubspacesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuerySubspacesResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QuerySubspacesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QuerySubspacesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QuerySubspacesResponse& from) { QuerySubspacesResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QuerySubspacesResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.params.v1beta1.QuerySubspacesResponse"; }

 protected:
  explicit QuerySubspacesResponse(::google::protobuf::Arena* arena);
  QuerySubspacesResponse(::google::protobuf::Arena* arena, const QuerySubspacesResponse& from);
  QuerySubspacesResponse(::google::protobuf::Arena* arena, QuerySubspacesResponse&& from) noexcept
      : QuerySubspacesResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSubspacesFieldNumber = 1,
  };
  // repeated .cosmos.params.v1beta1.Subspace subspaces = 1 [json_name = "subspaces"];
  int subspaces_size() const;
  private:
  int _internal_subspaces_size() const;

  public:
  void clear_subspaces() ;
  ::cosmos::params::v1beta1::Subspace* mutable_subspaces(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::params::v1beta1::Subspace>* mutable_subspaces();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::params::v1beta1::Subspace>& _internal_subspaces() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::params::v1beta1::Subspace>* _internal_mutable_subspaces();
  public:
  const ::cosmos::params::v1beta1::Subspace& subspaces(int index) const;
  ::cosmos::params::v1beta1::Subspace* add_subspaces();
  const ::google::protobuf::RepeatedPtrField<::cosmos::params::v1beta1::Subspace>& subspaces() const;
  // @@protoc_insertion_point(class_scope:cosmos.params.v1beta1.QuerySubspacesResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QuerySubspacesResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::params::v1beta1::Subspace > subspaces_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fparams_2fv1beta1_2fquery_2eproto;
};
// -------------------------------------------------------------------

class QueryParamsResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.params.v1beta1.QueryParamsResponse) */ {
 public:
  inline QueryParamsResponse() : QueryParamsResponse(nullptr) {}
  ~QueryParamsResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QueryParamsResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QueryParamsResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueryParamsResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueryParamsResponse(const QueryParamsResponse& from) : QueryParamsResponse(nullptr, from) {}
  inline QueryParamsResponse(QueryParamsResponse&& from) noexcept
      : QueryParamsResponse(nullptr, std::move(from)) {}
  inline QueryParamsResponse& operator=(const QueryParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryParamsResponse& operator=(QueryParamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryParamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryParamsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryParamsResponse*>(
        &_QueryParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(QueryParamsResponse& a, QueryParamsResponse& b) { a.Swap(&b); }
  inline void Swap(QueryParamsResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryParamsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryParamsResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QueryParamsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryParamsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueryParamsResponse& from) { QueryParamsResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QueryParamsResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.params.v1beta1.QueryParamsResponse"; }

 protected:
  explicit QueryParamsResponse(::google::protobuf::Arena* arena);
  QueryParamsResponse(::google::protobuf::Arena* arena, const QueryParamsResponse& from);
  QueryParamsResponse(::google::protobuf::Arena* arena, QueryParamsResponse&& from) noexcept
      : QueryParamsResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kParamFieldNumber = 1,
  };
  // .cosmos.params.v1beta1.ParamChange param = 1 [json_name = "param", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_param() const;
  void clear_param() ;
  const ::cosmos::params::v1beta1::ParamChange& param() const;
  PROTOBUF_NODISCARD ::cosmos::params::v1beta1::ParamChange* release_param();
  ::cosmos::params::v1beta1::ParamChange* mutable_param();
  void set_allocated_param(::cosmos::params::v1beta1::ParamChange* value);
  void unsafe_arena_set_allocated_param(::cosmos::params::v1beta1::ParamChange* value);
  ::cosmos::params::v1beta1::ParamChange* unsafe_arena_release_param();

  private:
  const ::cosmos::params::v1beta1::ParamChange& _internal_param() const;
  ::cosmos::params::v1beta1::ParamChange* _internal_mutable_param();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.params.v1beta1.QueryParamsResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QueryParamsResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::cosmos::params::v1beta1::ParamChange* param_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fparams_2fv1beta1_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryParamsRequest

// string subspace = 1 [json_name = "subspace"];
inline void QueryParamsRequest::clear_subspace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subspace_.ClearToEmpty();
}
inline const std::string& QueryParamsRequest::subspace() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.params.v1beta1.QueryParamsRequest.subspace)
  return _internal_subspace();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryParamsRequest::set_subspace(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subspace_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.params.v1beta1.QueryParamsRequest.subspace)
}
inline std::string* QueryParamsRequest::mutable_subspace() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subspace();
  // @@protoc_insertion_point(field_mutable:cosmos.params.v1beta1.QueryParamsRequest.subspace)
  return _s;
}
inline const std::string& QueryParamsRequest::_internal_subspace() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subspace_.Get();
}
inline void QueryParamsRequest::_internal_set_subspace(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subspace_.Set(value, GetArena());
}
inline std::string* QueryParamsRequest::_internal_mutable_subspace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.subspace_.Mutable( GetArena());
}
inline std::string* QueryParamsRequest::release_subspace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.params.v1beta1.QueryParamsRequest.subspace)
  return _impl_.subspace_.Release();
}
inline void QueryParamsRequest::set_allocated_subspace(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subspace_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.subspace_.IsDefault()) {
    _impl_.subspace_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.params.v1beta1.QueryParamsRequest.subspace)
}

// string key = 2 [json_name = "key"];
inline void QueryParamsRequest::clear_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& QueryParamsRequest::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.params.v1beta1.QueryParamsRequest.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryParamsRequest::set_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.params.v1beta1.QueryParamsRequest.key)
}
inline std::string* QueryParamsRequest::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:cosmos.params.v1beta1.QueryParamsRequest.key)
  return _s;
}
inline const std::string& QueryParamsRequest::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_.Get();
}
inline void QueryParamsRequest::_internal_set_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(value, GetArena());
}
inline std::string* QueryParamsRequest::_internal_mutable_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* QueryParamsRequest::release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.params.v1beta1.QueryParamsRequest.key)
  return _impl_.key_.Release();
}
inline void QueryParamsRequest::set_allocated_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.params.v1beta1.QueryParamsRequest.key)
}

// -------------------------------------------------------------------

// QueryParamsResponse

// .cosmos.params.v1beta1.ParamChange param = 1 [json_name = "param", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool QueryParamsResponse::has_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.param_ != nullptr);
  return value;
}
inline const ::cosmos::params::v1beta1::ParamChange& QueryParamsResponse::_internal_param() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::params::v1beta1::ParamChange* p = _impl_.param_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::params::v1beta1::ParamChange&>(::cosmos::params::v1beta1::_ParamChange_default_instance_);
}
inline const ::cosmos::params::v1beta1::ParamChange& QueryParamsResponse::param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.params.v1beta1.QueryParamsResponse.param)
  return _internal_param();
}
inline void QueryParamsResponse::unsafe_arena_set_allocated_param(::cosmos::params::v1beta1::ParamChange* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.param_);
  }
  _impl_.param_ = reinterpret_cast<::cosmos::params::v1beta1::ParamChange*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.params.v1beta1.QueryParamsResponse.param)
}
inline ::cosmos::params::v1beta1::ParamChange* QueryParamsResponse::release_param() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::params::v1beta1::ParamChange* released = _impl_.param_;
  _impl_.param_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::params::v1beta1::ParamChange* QueryParamsResponse::unsafe_arena_release_param() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.params.v1beta1.QueryParamsResponse.param)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::params::v1beta1::ParamChange* temp = _impl_.param_;
  _impl_.param_ = nullptr;
  return temp;
}
inline ::cosmos::params::v1beta1::ParamChange* QueryParamsResponse::_internal_mutable_param() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.param_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::params::v1beta1::ParamChange>(GetArena());
    _impl_.param_ = reinterpret_cast<::cosmos::params::v1beta1::ParamChange*>(p);
  }
  return _impl_.param_;
}
inline ::cosmos::params::v1beta1::ParamChange* QueryParamsResponse::mutable_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::params::v1beta1::ParamChange* _msg = _internal_mutable_param();
  // @@protoc_insertion_point(field_mutable:cosmos.params.v1beta1.QueryParamsResponse.param)
  return _msg;
}
inline void QueryParamsResponse::set_allocated_param(::cosmos::params::v1beta1::ParamChange* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.param_ = reinterpret_cast<::cosmos::params::v1beta1::ParamChange*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.params.v1beta1.QueryParamsResponse.param)
}

// -------------------------------------------------------------------

// QuerySubspacesRequest

// -------------------------------------------------------------------

// QuerySubspacesResponse

// repeated .cosmos.params.v1beta1.Subspace subspaces = 1 [json_name = "subspaces"];
inline int QuerySubspacesResponse::_internal_subspaces_size() const {
  return _internal_subspaces().size();
}
inline int QuerySubspacesResponse::subspaces_size() const {
  return _internal_subspaces_size();
}
inline void QuerySubspacesResponse::clear_subspaces() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subspaces_.Clear();
}
inline ::cosmos::params::v1beta1::Subspace* QuerySubspacesResponse::mutable_subspaces(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.params.v1beta1.QuerySubspacesResponse.subspaces)
  return _internal_mutable_subspaces()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::params::v1beta1::Subspace>* QuerySubspacesResponse::mutable_subspaces()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.params.v1beta1.QuerySubspacesResponse.subspaces)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_subspaces();
}
inline const ::cosmos::params::v1beta1::Subspace& QuerySubspacesResponse::subspaces(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.params.v1beta1.QuerySubspacesResponse.subspaces)
  return _internal_subspaces().Get(index);
}
inline ::cosmos::params::v1beta1::Subspace* QuerySubspacesResponse::add_subspaces() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::params::v1beta1::Subspace* _add = _internal_mutable_subspaces()->Add();
  // @@protoc_insertion_point(field_add:cosmos.params.v1beta1.QuerySubspacesResponse.subspaces)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::params::v1beta1::Subspace>& QuerySubspacesResponse::subspaces() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.params.v1beta1.QuerySubspacesResponse.subspaces)
  return _internal_subspaces();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::params::v1beta1::Subspace>&
QuerySubspacesResponse::_internal_subspaces() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subspaces_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::params::v1beta1::Subspace>*
QuerySubspacesResponse::_internal_mutable_subspaces() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.subspaces_;
}

// -------------------------------------------------------------------

// Subspace

// string subspace = 1 [json_name = "subspace"];
inline void Subspace::clear_subspace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subspace_.ClearToEmpty();
}
inline const std::string& Subspace::subspace() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.params.v1beta1.Subspace.subspace)
  return _internal_subspace();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Subspace::set_subspace(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subspace_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.params.v1beta1.Subspace.subspace)
}
inline std::string* Subspace::mutable_subspace() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subspace();
  // @@protoc_insertion_point(field_mutable:cosmos.params.v1beta1.Subspace.subspace)
  return _s;
}
inline const std::string& Subspace::_internal_subspace() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subspace_.Get();
}
inline void Subspace::_internal_set_subspace(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subspace_.Set(value, GetArena());
}
inline std::string* Subspace::_internal_mutable_subspace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.subspace_.Mutable( GetArena());
}
inline std::string* Subspace::release_subspace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.params.v1beta1.Subspace.subspace)
  return _impl_.subspace_.Release();
}
inline void Subspace::set_allocated_subspace(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subspace_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.subspace_.IsDefault()) {
    _impl_.subspace_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.params.v1beta1.Subspace.subspace)
}

// repeated string keys = 2 [json_name = "keys"];
inline int Subspace::_internal_keys_size() const {
  return _internal_keys().size();
}
inline int Subspace::keys_size() const {
  return _internal_keys_size();
}
inline void Subspace::clear_keys() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.keys_.Clear();
}
inline std::string* Subspace::add_keys() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_keys()->Add();
  // @@protoc_insertion_point(field_add_mutable:cosmos.params.v1beta1.Subspace.keys)
  return _s;
}
inline const std::string& Subspace::keys(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.params.v1beta1.Subspace.keys)
  return _internal_keys().Get(index);
}
inline std::string* Subspace::mutable_keys(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.params.v1beta1.Subspace.keys)
  return _internal_mutable_keys()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void Subspace::set_keys(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_keys()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:cosmos.params.v1beta1.Subspace.keys)
}
template <typename Arg_, typename... Args_>
inline void Subspace::add_keys(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_keys(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:cosmos.params.v1beta1.Subspace.keys)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Subspace::keys() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.params.v1beta1.Subspace.keys)
  return _internal_keys();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Subspace::mutable_keys() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.params.v1beta1.Subspace.keys)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_keys();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Subspace::_internal_keys() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.keys_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Subspace::_internal_mutable_keys() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.keys_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace params
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2fparams_2fv1beta1_2fquery_2eproto_2epb_2eh
