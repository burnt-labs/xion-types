// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/autocli/v1/options.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2fautocli_2fv1_2foptions_2eproto_2epb_2eh
#define cosmos_2fautocli_2fv1_2foptions_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
#include "cosmos_proto/cosmos.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fautocli_2fv1_2foptions_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fautocli_2fv1_2foptions_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2fautocli_2fv1_2foptions_2eproto;
namespace cosmos {
namespace autocli {
namespace v1 {
class FlagOptions;
struct FlagOptionsDefaultTypeInternal;
extern FlagOptionsDefaultTypeInternal _FlagOptions_default_instance_;
class ModuleOptions;
struct ModuleOptionsDefaultTypeInternal;
extern ModuleOptionsDefaultTypeInternal _ModuleOptions_default_instance_;
class PositionalArgDescriptor;
struct PositionalArgDescriptorDefaultTypeInternal;
extern PositionalArgDescriptorDefaultTypeInternal _PositionalArgDescriptor_default_instance_;
class RpcCommandOptions;
struct RpcCommandOptionsDefaultTypeInternal;
extern RpcCommandOptionsDefaultTypeInternal _RpcCommandOptions_default_instance_;
class RpcCommandOptions_FlagOptionsEntry_DoNotUse;
struct RpcCommandOptions_FlagOptionsEntry_DoNotUseDefaultTypeInternal;
extern RpcCommandOptions_FlagOptionsEntry_DoNotUseDefaultTypeInternal _RpcCommandOptions_FlagOptionsEntry_DoNotUse_default_instance_;
class ServiceCommandDescriptor;
struct ServiceCommandDescriptorDefaultTypeInternal;
extern ServiceCommandDescriptorDefaultTypeInternal _ServiceCommandDescriptor_default_instance_;
class ServiceCommandDescriptor_SubCommandsEntry_DoNotUse;
struct ServiceCommandDescriptor_SubCommandsEntry_DoNotUseDefaultTypeInternal;
extern ServiceCommandDescriptor_SubCommandsEntry_DoNotUseDefaultTypeInternal _ServiceCommandDescriptor_SubCommandsEntry_DoNotUse_default_instance_;
}  // namespace v1
}  // namespace autocli
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace autocli {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class PositionalArgDescriptor final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.autocli.v1.PositionalArgDescriptor) */ {
 public:
  inline PositionalArgDescriptor() : PositionalArgDescriptor(nullptr) {}
  ~PositionalArgDescriptor() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PositionalArgDescriptor* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PositionalArgDescriptor));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PositionalArgDescriptor(
      ::google::protobuf::internal::ConstantInitialized);

  inline PositionalArgDescriptor(const PositionalArgDescriptor& from) : PositionalArgDescriptor(nullptr, from) {}
  inline PositionalArgDescriptor(PositionalArgDescriptor&& from) noexcept
      : PositionalArgDescriptor(nullptr, std::move(from)) {}
  inline PositionalArgDescriptor& operator=(const PositionalArgDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionalArgDescriptor& operator=(PositionalArgDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionalArgDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionalArgDescriptor* internal_default_instance() {
    return reinterpret_cast<const PositionalArgDescriptor*>(
        &_PositionalArgDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(PositionalArgDescriptor& a, PositionalArgDescriptor& b) { a.Swap(&b); }
  inline void Swap(PositionalArgDescriptor* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionalArgDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionalArgDescriptor* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PositionalArgDescriptor>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PositionalArgDescriptor& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PositionalArgDescriptor& from) { PositionalArgDescriptor::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PositionalArgDescriptor* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.autocli.v1.PositionalArgDescriptor"; }

 protected:
  explicit PositionalArgDescriptor(::google::protobuf::Arena* arena);
  PositionalArgDescriptor(::google::protobuf::Arena* arena, const PositionalArgDescriptor& from);
  PositionalArgDescriptor(::google::protobuf::Arena* arena, PositionalArgDescriptor&& from) noexcept
      : PositionalArgDescriptor(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kProtoFieldFieldNumber = 1,
    kVarargsFieldNumber = 2,
    kOptionalFieldNumber = 3,
  };
  // string proto_field = 1 [json_name = "protoField"];
  void clear_proto_field() ;
  const std::string& proto_field() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proto_field(Arg_&& arg, Args_... args);
  std::string* mutable_proto_field();
  PROTOBUF_NODISCARD std::string* release_proto_field();
  void set_allocated_proto_field(std::string* value);

  private:
  const std::string& _internal_proto_field() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proto_field(
      const std::string& value);
  std::string* _internal_mutable_proto_field();

  public:
  // bool varargs = 2 [json_name = "varargs"];
  void clear_varargs() ;
  bool varargs() const;
  void set_varargs(bool value);

  private:
  bool _internal_varargs() const;
  void _internal_set_varargs(bool value);

  public:
  // bool optional = 3 [json_name = "optional"];
  void clear_optional() ;
  bool optional() const;
  void set_optional(bool value);

  private:
  bool _internal_optional() const;
  void _internal_set_optional(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.autocli.v1.PositionalArgDescriptor)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      61, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PositionalArgDescriptor& from_msg);
    ::google::protobuf::internal::ArenaStringPtr proto_field_;
    bool varargs_;
    bool optional_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fautocli_2fv1_2foptions_2eproto;
};
// -------------------------------------------------------------------

class FlagOptions final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.autocli.v1.FlagOptions) */ {
 public:
  inline FlagOptions() : FlagOptions(nullptr) {}
  ~FlagOptions() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FlagOptions* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FlagOptions));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FlagOptions(
      ::google::protobuf::internal::ConstantInitialized);

  inline FlagOptions(const FlagOptions& from) : FlagOptions(nullptr, from) {}
  inline FlagOptions(FlagOptions&& from) noexcept
      : FlagOptions(nullptr, std::move(from)) {}
  inline FlagOptions& operator=(const FlagOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlagOptions& operator=(FlagOptions&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlagOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlagOptions* internal_default_instance() {
    return reinterpret_cast<const FlagOptions*>(
        &_FlagOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(FlagOptions& a, FlagOptions& b) { a.Swap(&b); }
  inline void Swap(FlagOptions* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlagOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlagOptions* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FlagOptions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FlagOptions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FlagOptions& from) { FlagOptions::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FlagOptions* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.autocli.v1.FlagOptions"; }

 protected:
  explicit FlagOptions(::google::protobuf::Arena* arena);
  FlagOptions(::google::protobuf::Arena* arena, const FlagOptions& from);
  FlagOptions(::google::protobuf::Arena* arena, FlagOptions&& from) noexcept
      : FlagOptions(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kShorthandFieldNumber = 2,
    kUsageFieldNumber = 3,
    kDefaultValueFieldNumber = 4,
    kDeprecatedFieldNumber = 6,
    kShorthandDeprecatedFieldNumber = 7,
    kHiddenFieldNumber = 8,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string shorthand = 2 [json_name = "shorthand"];
  void clear_shorthand() ;
  const std::string& shorthand() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_shorthand(Arg_&& arg, Args_... args);
  std::string* mutable_shorthand();
  PROTOBUF_NODISCARD std::string* release_shorthand();
  void set_allocated_shorthand(std::string* value);

  private:
  const std::string& _internal_shorthand() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shorthand(
      const std::string& value);
  std::string* _internal_mutable_shorthand();

  public:
  // string usage = 3 [json_name = "usage"];
  void clear_usage() ;
  const std::string& usage() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_usage(Arg_&& arg, Args_... args);
  std::string* mutable_usage();
  PROTOBUF_NODISCARD std::string* release_usage();
  void set_allocated_usage(std::string* value);

  private:
  const std::string& _internal_usage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usage(
      const std::string& value);
  std::string* _internal_mutable_usage();

  public:
  // string default_value = 4 [json_name = "defaultValue"];
  void clear_default_value() ;
  const std::string& default_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_default_value(Arg_&& arg, Args_... args);
  std::string* mutable_default_value();
  PROTOBUF_NODISCARD std::string* release_default_value();
  void set_allocated_default_value(std::string* value);

  private:
  const std::string& _internal_default_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_value(
      const std::string& value);
  std::string* _internal_mutable_default_value();

  public:
  // string deprecated = 6 [json_name = "deprecated"];
  void clear_deprecated() ;
  const std::string& deprecated() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_deprecated(Arg_&& arg, Args_... args);
  std::string* mutable_deprecated();
  PROTOBUF_NODISCARD std::string* release_deprecated();
  void set_allocated_deprecated(std::string* value);

  private:
  const std::string& _internal_deprecated() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deprecated(
      const std::string& value);
  std::string* _internal_mutable_deprecated();

  public:
  // string shorthand_deprecated = 7 [json_name = "shorthandDeprecated"];
  void clear_shorthand_deprecated() ;
  const std::string& shorthand_deprecated() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_shorthand_deprecated(Arg_&& arg, Args_... args);
  std::string* mutable_shorthand_deprecated();
  PROTOBUF_NODISCARD std::string* release_shorthand_deprecated();
  void set_allocated_shorthand_deprecated(std::string* value);

  private:
  const std::string& _internal_shorthand_deprecated() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shorthand_deprecated(
      const std::string& value);
  std::string* _internal_mutable_shorthand_deprecated();

  public:
  // bool hidden = 8 [json_name = "hidden"];
  void clear_hidden() ;
  bool hidden() const;
  void set_hidden(bool value);

  private:
  bool _internal_hidden() const;
  void _internal_set_hidden(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.autocli.v1.FlagOptions)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      99, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FlagOptions& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr shorthand_;
    ::google::protobuf::internal::ArenaStringPtr usage_;
    ::google::protobuf::internal::ArenaStringPtr default_value_;
    ::google::protobuf::internal::ArenaStringPtr deprecated_;
    ::google::protobuf::internal::ArenaStringPtr shorthand_deprecated_;
    bool hidden_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fautocli_2fv1_2foptions_2eproto;
};
// -------------------------------------------------------------------

class RpcCommandOptions_FlagOptionsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::google::protobuf::Message,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::google::protobuf::Message,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  RpcCommandOptions_FlagOptionsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RpcCommandOptions_FlagOptionsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit RpcCommandOptions_FlagOptionsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const RpcCommandOptions_FlagOptionsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const RpcCommandOptions_FlagOptionsEntry_DoNotUse*>(
        &_RpcCommandOptions_FlagOptionsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_cosmos_2fautocli_2fv1_2foptions_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      64, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class RpcCommandOptions final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.autocli.v1.RpcCommandOptions) */ {
 public:
  inline RpcCommandOptions() : RpcCommandOptions(nullptr) {}
  ~RpcCommandOptions() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RpcCommandOptions* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RpcCommandOptions));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RpcCommandOptions(
      ::google::protobuf::internal::ConstantInitialized);

  inline RpcCommandOptions(const RpcCommandOptions& from) : RpcCommandOptions(nullptr, from) {}
  inline RpcCommandOptions(RpcCommandOptions&& from) noexcept
      : RpcCommandOptions(nullptr, std::move(from)) {}
  inline RpcCommandOptions& operator=(const RpcCommandOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcCommandOptions& operator=(RpcCommandOptions&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcCommandOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcCommandOptions* internal_default_instance() {
    return reinterpret_cast<const RpcCommandOptions*>(
        &_RpcCommandOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(RpcCommandOptions& a, RpcCommandOptions& b) { a.Swap(&b); }
  inline void Swap(RpcCommandOptions* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcCommandOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcCommandOptions* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RpcCommandOptions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RpcCommandOptions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RpcCommandOptions& from) { RpcCommandOptions::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RpcCommandOptions* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.autocli.v1.RpcCommandOptions"; }

 protected:
  explicit RpcCommandOptions(::google::protobuf::Arena* arena);
  RpcCommandOptions(::google::protobuf::Arena* arena, const RpcCommandOptions& from);
  RpcCommandOptions(::google::protobuf::Arena* arena, RpcCommandOptions&& from) noexcept
      : RpcCommandOptions(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAliasFieldNumber = 6,
    kSuggestForFieldNumber = 7,
    kFlagOptionsFieldNumber = 10,
    kPositionalArgsFieldNumber = 11,
    kRpcMethodFieldNumber = 1,
    kUseFieldNumber = 2,
    kLongFieldNumber = 3,
    kShortFieldNumber = 4,
    kExampleFieldNumber = 5,
    kDeprecatedFieldNumber = 8,
    kVersionFieldNumber = 9,
    kSkipFieldNumber = 12,
    kGovProposalFieldNumber = 13,
  };
  // repeated string alias = 6 [json_name = "alias"];
  int alias_size() const;
  private:
  int _internal_alias_size() const;

  public:
  void clear_alias() ;
  const std::string& alias(int index) const;
  std::string* mutable_alias(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_alias(int index, Arg_&& value, Args_... args);
  std::string* add_alias();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_alias(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& alias() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_alias();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_alias() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_alias();

  public:
  // repeated string suggest_for = 7 [json_name = "suggestFor"];
  int suggest_for_size() const;
  private:
  int _internal_suggest_for_size() const;

  public:
  void clear_suggest_for() ;
  const std::string& suggest_for(int index) const;
  std::string* mutable_suggest_for(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_suggest_for(int index, Arg_&& value, Args_... args);
  std::string* add_suggest_for();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_suggest_for(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& suggest_for() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_suggest_for();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_suggest_for() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_suggest_for();

  public:
  // map<string, .cosmos.autocli.v1.FlagOptions> flag_options = 10 [json_name = "flagOptions"];
  int flag_options_size() const;
  private:
  int _internal_flag_options_size() const;

  public:
  void clear_flag_options() ;
  const ::google::protobuf::Map<std::string, ::cosmos::autocli::v1::FlagOptions>& flag_options() const;
  ::google::protobuf::Map<std::string, ::cosmos::autocli::v1::FlagOptions>* mutable_flag_options();

  private:
  const ::google::protobuf::Map<std::string, ::cosmos::autocli::v1::FlagOptions>& _internal_flag_options() const;
  ::google::protobuf::Map<std::string, ::cosmos::autocli::v1::FlagOptions>* _internal_mutable_flag_options();

  public:
  // repeated .cosmos.autocli.v1.PositionalArgDescriptor positional_args = 11 [json_name = "positionalArgs"];
  int positional_args_size() const;
  private:
  int _internal_positional_args_size() const;

  public:
  void clear_positional_args() ;
  ::cosmos::autocli::v1::PositionalArgDescriptor* mutable_positional_args(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::autocli::v1::PositionalArgDescriptor>* mutable_positional_args();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::autocli::v1::PositionalArgDescriptor>& _internal_positional_args() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::autocli::v1::PositionalArgDescriptor>* _internal_mutable_positional_args();
  public:
  const ::cosmos::autocli::v1::PositionalArgDescriptor& positional_args(int index) const;
  ::cosmos::autocli::v1::PositionalArgDescriptor* add_positional_args();
  const ::google::protobuf::RepeatedPtrField<::cosmos::autocli::v1::PositionalArgDescriptor>& positional_args() const;
  // string rpc_method = 1 [json_name = "rpcMethod"];
  void clear_rpc_method() ;
  const std::string& rpc_method() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rpc_method(Arg_&& arg, Args_... args);
  std::string* mutable_rpc_method();
  PROTOBUF_NODISCARD std::string* release_rpc_method();
  void set_allocated_rpc_method(std::string* value);

  private:
  const std::string& _internal_rpc_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rpc_method(
      const std::string& value);
  std::string* _internal_mutable_rpc_method();

  public:
  // string use = 2 [json_name = "use"];
  void clear_use() ;
  const std::string& use() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_use(Arg_&& arg, Args_... args);
  std::string* mutable_use();
  PROTOBUF_NODISCARD std::string* release_use();
  void set_allocated_use(std::string* value);

  private:
  const std::string& _internal_use() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_use(
      const std::string& value);
  std::string* _internal_mutable_use();

  public:
  // string long = 3 [json_name = "long"];
  void clear_long_() ;
  const std::string& long_() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_long_(Arg_&& arg, Args_... args);
  std::string* mutable_long_();
  PROTOBUF_NODISCARD std::string* release_long_();
  void set_allocated_long_(std::string* value);

  private:
  const std::string& _internal_long_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_long_(
      const std::string& value);
  std::string* _internal_mutable_long_();

  public:
  // string short = 4 [json_name = "short"];
  void clear_short_() ;
  const std::string& short_() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_short_(Arg_&& arg, Args_... args);
  std::string* mutable_short_();
  PROTOBUF_NODISCARD std::string* release_short_();
  void set_allocated_short_(std::string* value);

  private:
  const std::string& _internal_short_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_short_(
      const std::string& value);
  std::string* _internal_mutable_short_();

  public:
  // string example = 5 [json_name = "example"];
  void clear_example() ;
  const std::string& example() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_example(Arg_&& arg, Args_... args);
  std::string* mutable_example();
  PROTOBUF_NODISCARD std::string* release_example();
  void set_allocated_example(std::string* value);

  private:
  const std::string& _internal_example() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_example(
      const std::string& value);
  std::string* _internal_mutable_example();

  public:
  // string deprecated = 8 [json_name = "deprecated"];
  void clear_deprecated() ;
  const std::string& deprecated() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_deprecated(Arg_&& arg, Args_... args);
  std::string* mutable_deprecated();
  PROTOBUF_NODISCARD std::string* release_deprecated();
  void set_allocated_deprecated(std::string* value);

  private:
  const std::string& _internal_deprecated() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deprecated(
      const std::string& value);
  std::string* _internal_mutable_deprecated();

  public:
  // string version = 9 [json_name = "version"];
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // bool skip = 12 [json_name = "skip"];
  void clear_skip() ;
  bool skip() const;
  void set_skip(bool value);

  private:
  bool _internal_skip() const;
  void _internal_set_skip(bool value);

  public:
  // bool gov_proposal = 13 [json_name = "govProposal", (.cosmos_proto.field_added_in) = "client/v2 v2.0.0-beta.2"];
  void clear_gov_proposal() ;
  bool gov_proposal() const;
  void set_gov_proposal(bool value);

  private:
  bool _internal_gov_proposal() const;
  void _internal_set_gov_proposal(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.autocli.v1.RpcCommandOptions)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 3,
      126, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RpcCommandOptions& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> alias_;
    ::google::protobuf::RepeatedPtrField<std::string> suggest_for_;
    ::google::protobuf::internal::MapField<RpcCommandOptions_FlagOptionsEntry_DoNotUse, std::string, ::cosmos::autocli::v1::FlagOptions,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        flag_options_;
    ::google::protobuf::RepeatedPtrField< ::cosmos::autocli::v1::PositionalArgDescriptor > positional_args_;
    ::google::protobuf::internal::ArenaStringPtr rpc_method_;
    ::google::protobuf::internal::ArenaStringPtr use_;
    ::google::protobuf::internal::ArenaStringPtr long__;
    ::google::protobuf::internal::ArenaStringPtr short__;
    ::google::protobuf::internal::ArenaStringPtr example_;
    ::google::protobuf::internal::ArenaStringPtr deprecated_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    bool skip_;
    bool gov_proposal_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fautocli_2fv1_2foptions_2eproto;
};
// -------------------------------------------------------------------

class ServiceCommandDescriptor final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.autocli.v1.ServiceCommandDescriptor) */ {
 public:
  inline ServiceCommandDescriptor() : ServiceCommandDescriptor(nullptr) {}
  ~ServiceCommandDescriptor() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ServiceCommandDescriptor* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ServiceCommandDescriptor));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ServiceCommandDescriptor(
      ::google::protobuf::internal::ConstantInitialized);

  inline ServiceCommandDescriptor(const ServiceCommandDescriptor& from) : ServiceCommandDescriptor(nullptr, from) {}
  inline ServiceCommandDescriptor(ServiceCommandDescriptor&& from) noexcept
      : ServiceCommandDescriptor(nullptr, std::move(from)) {}
  inline ServiceCommandDescriptor& operator=(const ServiceCommandDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceCommandDescriptor& operator=(ServiceCommandDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceCommandDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceCommandDescriptor* internal_default_instance() {
    return reinterpret_cast<const ServiceCommandDescriptor*>(
        &_ServiceCommandDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ServiceCommandDescriptor& a, ServiceCommandDescriptor& b) { a.Swap(&b); }
  inline void Swap(ServiceCommandDescriptor* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceCommandDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceCommandDescriptor* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ServiceCommandDescriptor>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServiceCommandDescriptor& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ServiceCommandDescriptor& from) { ServiceCommandDescriptor::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ServiceCommandDescriptor* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.autocli.v1.ServiceCommandDescriptor"; }

 protected:
  explicit ServiceCommandDescriptor(::google::protobuf::Arena* arena);
  ServiceCommandDescriptor(::google::protobuf::Arena* arena, const ServiceCommandDescriptor& from);
  ServiceCommandDescriptor(::google::protobuf::Arena* arena, ServiceCommandDescriptor&& from) noexcept
      : ServiceCommandDescriptor(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRpcCommandOptionsFieldNumber = 2,
    kSubCommandsFieldNumber = 3,
    kServiceFieldNumber = 1,
    kShortFieldNumber = 5,
    kEnhanceCustomCommandFieldNumber = 4,
  };
  // repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];
  int rpc_command_options_size() const;
  private:
  int _internal_rpc_command_options_size() const;

  public:
  void clear_rpc_command_options() ;
  ::cosmos::autocli::v1::RpcCommandOptions* mutable_rpc_command_options(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::autocli::v1::RpcCommandOptions>* mutable_rpc_command_options();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::autocli::v1::RpcCommandOptions>& _internal_rpc_command_options() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::autocli::v1::RpcCommandOptions>* _internal_mutable_rpc_command_options();
  public:
  const ::cosmos::autocli::v1::RpcCommandOptions& rpc_command_options(int index) const;
  ::cosmos::autocli::v1::RpcCommandOptions* add_rpc_command_options();
  const ::google::protobuf::RepeatedPtrField<::cosmos::autocli::v1::RpcCommandOptions>& rpc_command_options() const;
  // map<string, .cosmos.autocli.v1.ServiceCommandDescriptor> sub_commands = 3 [json_name = "subCommands"];
  int sub_commands_size() const;
  private:
  int _internal_sub_commands_size() const;

  public:
  void clear_sub_commands() ;
  const ::google::protobuf::Map<std::string, ::cosmos::autocli::v1::ServiceCommandDescriptor>& sub_commands() const;
  ::google::protobuf::Map<std::string, ::cosmos::autocli::v1::ServiceCommandDescriptor>* mutable_sub_commands();

  private:
  const ::google::protobuf::Map<std::string, ::cosmos::autocli::v1::ServiceCommandDescriptor>& _internal_sub_commands() const;
  ::google::protobuf::Map<std::string, ::cosmos::autocli::v1::ServiceCommandDescriptor>* _internal_mutable_sub_commands();

  public:
  // string service = 1 [json_name = "service"];
  void clear_service() ;
  const std::string& service() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_service(Arg_&& arg, Args_... args);
  std::string* mutable_service();
  PROTOBUF_NODISCARD std::string* release_service();
  void set_allocated_service(std::string* value);

  private:
  const std::string& _internal_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service(
      const std::string& value);
  std::string* _internal_mutable_service();

  public:
  // string short = 5 [json_name = "short"];
  void clear_short_() ;
  const std::string& short_() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_short_(Arg_&& arg, Args_... args);
  std::string* mutable_short_();
  PROTOBUF_NODISCARD std::string* release_short_();
  void set_allocated_short_(std::string* value);

  private:
  const std::string& _internal_short_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_short_(
      const std::string& value);
  std::string* _internal_mutable_short_();

  public:
  // bool enhance_custom_command = 4 [json_name = "enhanceCustomCommand"];
  void clear_enhance_custom_command() ;
  bool enhance_custom_command() const;
  void set_enhance_custom_command(bool value);

  private:
  bool _internal_enhance_custom_command() const;
  void _internal_set_enhance_custom_command(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.autocli.v1.ServiceCommandDescriptor)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 3,
      75, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ServiceCommandDescriptor& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::autocli::v1::RpcCommandOptions > rpc_command_options_;
    ::google::protobuf::internal::MapField<ServiceCommandDescriptor_SubCommandsEntry_DoNotUse, std::string, ::cosmos::autocli::v1::ServiceCommandDescriptor,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        sub_commands_;
    ::google::protobuf::internal::ArenaStringPtr service_;
    ::google::protobuf::internal::ArenaStringPtr short__;
    bool enhance_custom_command_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fautocli_2fv1_2foptions_2eproto;
};
// -------------------------------------------------------------------

class ServiceCommandDescriptor_SubCommandsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::google::protobuf::Message,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::google::protobuf::Message,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  ServiceCommandDescriptor_SubCommandsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ServiceCommandDescriptor_SubCommandsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ServiceCommandDescriptor_SubCommandsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ServiceCommandDescriptor_SubCommandsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ServiceCommandDescriptor_SubCommandsEntry_DoNotUse*>(
        &_ServiceCommandDescriptor_SubCommandsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_cosmos_2fautocli_2fv1_2foptions_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      71, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class ModuleOptions final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.autocli.v1.ModuleOptions) */ {
 public:
  inline ModuleOptions() : ModuleOptions(nullptr) {}
  ~ModuleOptions() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ModuleOptions* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ModuleOptions));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ModuleOptions(
      ::google::protobuf::internal::ConstantInitialized);

  inline ModuleOptions(const ModuleOptions& from) : ModuleOptions(nullptr, from) {}
  inline ModuleOptions(ModuleOptions&& from) noexcept
      : ModuleOptions(nullptr, std::move(from)) {}
  inline ModuleOptions& operator=(const ModuleOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleOptions& operator=(ModuleOptions&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleOptions* internal_default_instance() {
    return reinterpret_cast<const ModuleOptions*>(
        &_ModuleOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ModuleOptions& a, ModuleOptions& b) { a.Swap(&b); }
  inline void Swap(ModuleOptions* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleOptions* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ModuleOptions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ModuleOptions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ModuleOptions& from) { ModuleOptions::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ModuleOptions* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.autocli.v1.ModuleOptions"; }

 protected:
  explicit ModuleOptions(::google::protobuf::Arena* arena);
  ModuleOptions(::google::protobuf::Arena* arena, const ModuleOptions& from);
  ModuleOptions(::google::protobuf::Arena* arena, ModuleOptions&& from) noexcept
      : ModuleOptions(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTxFieldNumber = 1,
    kQueryFieldNumber = 2,
  };
  // .cosmos.autocli.v1.ServiceCommandDescriptor tx = 1 [json_name = "tx"];
  bool has_tx() const;
  void clear_tx() ;
  const ::cosmos::autocli::v1::ServiceCommandDescriptor& tx() const;
  PROTOBUF_NODISCARD ::cosmos::autocli::v1::ServiceCommandDescriptor* release_tx();
  ::cosmos::autocli::v1::ServiceCommandDescriptor* mutable_tx();
  void set_allocated_tx(::cosmos::autocli::v1::ServiceCommandDescriptor* value);
  void unsafe_arena_set_allocated_tx(::cosmos::autocli::v1::ServiceCommandDescriptor* value);
  ::cosmos::autocli::v1::ServiceCommandDescriptor* unsafe_arena_release_tx();

  private:
  const ::cosmos::autocli::v1::ServiceCommandDescriptor& _internal_tx() const;
  ::cosmos::autocli::v1::ServiceCommandDescriptor* _internal_mutable_tx();

  public:
  // .cosmos.autocli.v1.ServiceCommandDescriptor query = 2 [json_name = "query"];
  bool has_query() const;
  void clear_query() ;
  const ::cosmos::autocli::v1::ServiceCommandDescriptor& query() const;
  PROTOBUF_NODISCARD ::cosmos::autocli::v1::ServiceCommandDescriptor* release_query();
  ::cosmos::autocli::v1::ServiceCommandDescriptor* mutable_query();
  void set_allocated_query(::cosmos::autocli::v1::ServiceCommandDescriptor* value);
  void unsafe_arena_set_allocated_query(::cosmos::autocli::v1::ServiceCommandDescriptor* value);
  ::cosmos::autocli::v1::ServiceCommandDescriptor* unsafe_arena_release_query();

  private:
  const ::cosmos::autocli::v1::ServiceCommandDescriptor& _internal_query() const;
  ::cosmos::autocli::v1::ServiceCommandDescriptor* _internal_mutable_query();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.autocli.v1.ModuleOptions)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ModuleOptions& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::cosmos::autocli::v1::ServiceCommandDescriptor* tx_;
    ::cosmos::autocli::v1::ServiceCommandDescriptor* query_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fautocli_2fv1_2foptions_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ModuleOptions

// .cosmos.autocli.v1.ServiceCommandDescriptor tx = 1 [json_name = "tx"];
inline bool ModuleOptions::has_tx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tx_ != nullptr);
  return value;
}
inline void ModuleOptions::clear_tx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tx_ != nullptr) _impl_.tx_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::autocli::v1::ServiceCommandDescriptor& ModuleOptions::_internal_tx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::autocli::v1::ServiceCommandDescriptor* p = _impl_.tx_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::autocli::v1::ServiceCommandDescriptor&>(::cosmos::autocli::v1::_ServiceCommandDescriptor_default_instance_);
}
inline const ::cosmos::autocli::v1::ServiceCommandDescriptor& ModuleOptions::tx() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.ModuleOptions.tx)
  return _internal_tx();
}
inline void ModuleOptions::unsafe_arena_set_allocated_tx(::cosmos::autocli::v1::ServiceCommandDescriptor* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tx_);
  }
  _impl_.tx_ = reinterpret_cast<::cosmos::autocli::v1::ServiceCommandDescriptor*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.autocli.v1.ModuleOptions.tx)
}
inline ::cosmos::autocli::v1::ServiceCommandDescriptor* ModuleOptions::release_tx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::autocli::v1::ServiceCommandDescriptor* released = _impl_.tx_;
  _impl_.tx_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::autocli::v1::ServiceCommandDescriptor* ModuleOptions::unsafe_arena_release_tx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.ModuleOptions.tx)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::autocli::v1::ServiceCommandDescriptor* temp = _impl_.tx_;
  _impl_.tx_ = nullptr;
  return temp;
}
inline ::cosmos::autocli::v1::ServiceCommandDescriptor* ModuleOptions::_internal_mutable_tx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tx_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::autocli::v1::ServiceCommandDescriptor>(GetArena());
    _impl_.tx_ = reinterpret_cast<::cosmos::autocli::v1::ServiceCommandDescriptor*>(p);
  }
  return _impl_.tx_;
}
inline ::cosmos::autocli::v1::ServiceCommandDescriptor* ModuleOptions::mutable_tx() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::autocli::v1::ServiceCommandDescriptor* _msg = _internal_mutable_tx();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.ModuleOptions.tx)
  return _msg;
}
inline void ModuleOptions::set_allocated_tx(::cosmos::autocli::v1::ServiceCommandDescriptor* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.tx_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.tx_ = reinterpret_cast<::cosmos::autocli::v1::ServiceCommandDescriptor*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.ModuleOptions.tx)
}

// .cosmos.autocli.v1.ServiceCommandDescriptor query = 2 [json_name = "query"];
inline bool ModuleOptions::has_query() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.query_ != nullptr);
  return value;
}
inline void ModuleOptions::clear_query() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.query_ != nullptr) _impl_.query_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cosmos::autocli::v1::ServiceCommandDescriptor& ModuleOptions::_internal_query() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::autocli::v1::ServiceCommandDescriptor* p = _impl_.query_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::autocli::v1::ServiceCommandDescriptor&>(::cosmos::autocli::v1::_ServiceCommandDescriptor_default_instance_);
}
inline const ::cosmos::autocli::v1::ServiceCommandDescriptor& ModuleOptions::query() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.ModuleOptions.query)
  return _internal_query();
}
inline void ModuleOptions::unsafe_arena_set_allocated_query(::cosmos::autocli::v1::ServiceCommandDescriptor* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.query_);
  }
  _impl_.query_ = reinterpret_cast<::cosmos::autocli::v1::ServiceCommandDescriptor*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.autocli.v1.ModuleOptions.query)
}
inline ::cosmos::autocli::v1::ServiceCommandDescriptor* ModuleOptions::release_query() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::autocli::v1::ServiceCommandDescriptor* released = _impl_.query_;
  _impl_.query_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::autocli::v1::ServiceCommandDescriptor* ModuleOptions::unsafe_arena_release_query() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.ModuleOptions.query)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::autocli::v1::ServiceCommandDescriptor* temp = _impl_.query_;
  _impl_.query_ = nullptr;
  return temp;
}
inline ::cosmos::autocli::v1::ServiceCommandDescriptor* ModuleOptions::_internal_mutable_query() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.query_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::autocli::v1::ServiceCommandDescriptor>(GetArena());
    _impl_.query_ = reinterpret_cast<::cosmos::autocli::v1::ServiceCommandDescriptor*>(p);
  }
  return _impl_.query_;
}
inline ::cosmos::autocli::v1::ServiceCommandDescriptor* ModuleOptions::mutable_query() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::cosmos::autocli::v1::ServiceCommandDescriptor* _msg = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.ModuleOptions.query)
  return _msg;
}
inline void ModuleOptions::set_allocated_query(::cosmos::autocli::v1::ServiceCommandDescriptor* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.query_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.query_ = reinterpret_cast<::cosmos::autocli::v1::ServiceCommandDescriptor*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.ModuleOptions.query)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ServiceCommandDescriptor

// string service = 1 [json_name = "service"];
inline void ServiceCommandDescriptor::clear_service() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_.ClearToEmpty();
}
inline const std::string& ServiceCommandDescriptor::service() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.ServiceCommandDescriptor.service)
  return _internal_service();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServiceCommandDescriptor::set_service(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.ServiceCommandDescriptor.service)
}
inline std::string* ServiceCommandDescriptor::mutable_service() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.ServiceCommandDescriptor.service)
  return _s;
}
inline const std::string& ServiceCommandDescriptor::_internal_service() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.service_.Get();
}
inline void ServiceCommandDescriptor::_internal_set_service(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_.Set(value, GetArena());
}
inline std::string* ServiceCommandDescriptor::_internal_mutable_service() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.service_.Mutable( GetArena());
}
inline std::string* ServiceCommandDescriptor::release_service() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.ServiceCommandDescriptor.service)
  return _impl_.service_.Release();
}
inline void ServiceCommandDescriptor::set_allocated_service(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.service_.IsDefault()) {
    _impl_.service_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.ServiceCommandDescriptor.service)
}

// repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];
inline int ServiceCommandDescriptor::_internal_rpc_command_options_size() const {
  return _internal_rpc_command_options().size();
}
inline int ServiceCommandDescriptor::rpc_command_options_size() const {
  return _internal_rpc_command_options_size();
}
inline void ServiceCommandDescriptor::clear_rpc_command_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpc_command_options_.Clear();
}
inline ::cosmos::autocli::v1::RpcCommandOptions* ServiceCommandDescriptor::mutable_rpc_command_options(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.ServiceCommandDescriptor.rpc_command_options)
  return _internal_mutable_rpc_command_options()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::autocli::v1::RpcCommandOptions>* ServiceCommandDescriptor::mutable_rpc_command_options()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.autocli.v1.ServiceCommandDescriptor.rpc_command_options)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_rpc_command_options();
}
inline const ::cosmos::autocli::v1::RpcCommandOptions& ServiceCommandDescriptor::rpc_command_options(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.ServiceCommandDescriptor.rpc_command_options)
  return _internal_rpc_command_options().Get(index);
}
inline ::cosmos::autocli::v1::RpcCommandOptions* ServiceCommandDescriptor::add_rpc_command_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::autocli::v1::RpcCommandOptions* _add = _internal_mutable_rpc_command_options()->Add();
  // @@protoc_insertion_point(field_add:cosmos.autocli.v1.ServiceCommandDescriptor.rpc_command_options)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::autocli::v1::RpcCommandOptions>& ServiceCommandDescriptor::rpc_command_options() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.autocli.v1.ServiceCommandDescriptor.rpc_command_options)
  return _internal_rpc_command_options();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::autocli::v1::RpcCommandOptions>&
ServiceCommandDescriptor::_internal_rpc_command_options() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rpc_command_options_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::autocli::v1::RpcCommandOptions>*
ServiceCommandDescriptor::_internal_mutable_rpc_command_options() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.rpc_command_options_;
}

// map<string, .cosmos.autocli.v1.ServiceCommandDescriptor> sub_commands = 3 [json_name = "subCommands"];
inline int ServiceCommandDescriptor::_internal_sub_commands_size() const {
  return _internal_sub_commands().size();
}
inline int ServiceCommandDescriptor::sub_commands_size() const {
  return _internal_sub_commands_size();
}
inline void ServiceCommandDescriptor::clear_sub_commands() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sub_commands_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::cosmos::autocli::v1::ServiceCommandDescriptor>& ServiceCommandDescriptor::_internal_sub_commands() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sub_commands_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::cosmos::autocli::v1::ServiceCommandDescriptor>& ServiceCommandDescriptor::sub_commands() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:cosmos.autocli.v1.ServiceCommandDescriptor.sub_commands)
  return _internal_sub_commands();
}
inline ::google::protobuf::Map<std::string, ::cosmos::autocli::v1::ServiceCommandDescriptor>* ServiceCommandDescriptor::_internal_mutable_sub_commands() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sub_commands_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::cosmos::autocli::v1::ServiceCommandDescriptor>* ServiceCommandDescriptor::mutable_sub_commands() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:cosmos.autocli.v1.ServiceCommandDescriptor.sub_commands)
  return _internal_mutable_sub_commands();
}

// bool enhance_custom_command = 4 [json_name = "enhanceCustomCommand"];
inline void ServiceCommandDescriptor::clear_enhance_custom_command() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enhance_custom_command_ = false;
}
inline bool ServiceCommandDescriptor::enhance_custom_command() const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.ServiceCommandDescriptor.enhance_custom_command)
  return _internal_enhance_custom_command();
}
inline void ServiceCommandDescriptor::set_enhance_custom_command(bool value) {
  _internal_set_enhance_custom_command(value);
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.ServiceCommandDescriptor.enhance_custom_command)
}
inline bool ServiceCommandDescriptor::_internal_enhance_custom_command() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enhance_custom_command_;
}
inline void ServiceCommandDescriptor::_internal_set_enhance_custom_command(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enhance_custom_command_ = value;
}

// string short = 5 [json_name = "short"];
inline void ServiceCommandDescriptor::clear_short_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.short__.ClearToEmpty();
}
inline const std::string& ServiceCommandDescriptor::short_() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.ServiceCommandDescriptor.short)
  return _internal_short_();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServiceCommandDescriptor::set_short_(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.short__.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.ServiceCommandDescriptor.short)
}
inline std::string* ServiceCommandDescriptor::mutable_short_() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_short_();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.ServiceCommandDescriptor.short)
  return _s;
}
inline const std::string& ServiceCommandDescriptor::_internal_short_() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.short__.Get();
}
inline void ServiceCommandDescriptor::_internal_set_short_(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.short__.Set(value, GetArena());
}
inline std::string* ServiceCommandDescriptor::_internal_mutable_short_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.short__.Mutable( GetArena());
}
inline std::string* ServiceCommandDescriptor::release_short_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.ServiceCommandDescriptor.short)
  return _impl_.short__.Release();
}
inline void ServiceCommandDescriptor::set_allocated_short_(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.short__.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.short__.IsDefault()) {
    _impl_.short__.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.ServiceCommandDescriptor.short)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RpcCommandOptions

// string rpc_method = 1 [json_name = "rpcMethod"];
inline void RpcCommandOptions::clear_rpc_method() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpc_method_.ClearToEmpty();
}
inline const std::string& RpcCommandOptions::rpc_method() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.RpcCommandOptions.rpc_method)
  return _internal_rpc_method();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcCommandOptions::set_rpc_method(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpc_method_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.RpcCommandOptions.rpc_method)
}
inline std::string* RpcCommandOptions::mutable_rpc_method() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rpc_method();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.RpcCommandOptions.rpc_method)
  return _s;
}
inline const std::string& RpcCommandOptions::_internal_rpc_method() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rpc_method_.Get();
}
inline void RpcCommandOptions::_internal_set_rpc_method(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpc_method_.Set(value, GetArena());
}
inline std::string* RpcCommandOptions::_internal_mutable_rpc_method() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.rpc_method_.Mutable( GetArena());
}
inline std::string* RpcCommandOptions::release_rpc_method() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.RpcCommandOptions.rpc_method)
  return _impl_.rpc_method_.Release();
}
inline void RpcCommandOptions::set_allocated_rpc_method(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpc_method_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.rpc_method_.IsDefault()) {
    _impl_.rpc_method_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.RpcCommandOptions.rpc_method)
}

// string use = 2 [json_name = "use"];
inline void RpcCommandOptions::clear_use() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_.ClearToEmpty();
}
inline const std::string& RpcCommandOptions::use() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.RpcCommandOptions.use)
  return _internal_use();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcCommandOptions::set_use(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.RpcCommandOptions.use)
}
inline std::string* RpcCommandOptions::mutable_use() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_use();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.RpcCommandOptions.use)
  return _s;
}
inline const std::string& RpcCommandOptions::_internal_use() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.use_.Get();
}
inline void RpcCommandOptions::_internal_set_use(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_.Set(value, GetArena());
}
inline std::string* RpcCommandOptions::_internal_mutable_use() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.use_.Mutable( GetArena());
}
inline std::string* RpcCommandOptions::release_use() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.RpcCommandOptions.use)
  return _impl_.use_.Release();
}
inline void RpcCommandOptions::set_allocated_use(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.use_.IsDefault()) {
    _impl_.use_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.RpcCommandOptions.use)
}

// string long = 3 [json_name = "long"];
inline void RpcCommandOptions::clear_long_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.long__.ClearToEmpty();
}
inline const std::string& RpcCommandOptions::long_() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.RpcCommandOptions.long)
  return _internal_long_();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcCommandOptions::set_long_(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.long__.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.RpcCommandOptions.long)
}
inline std::string* RpcCommandOptions::mutable_long_() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_long_();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.RpcCommandOptions.long)
  return _s;
}
inline const std::string& RpcCommandOptions::_internal_long_() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.long__.Get();
}
inline void RpcCommandOptions::_internal_set_long_(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.long__.Set(value, GetArena());
}
inline std::string* RpcCommandOptions::_internal_mutable_long_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.long__.Mutable( GetArena());
}
inline std::string* RpcCommandOptions::release_long_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.RpcCommandOptions.long)
  return _impl_.long__.Release();
}
inline void RpcCommandOptions::set_allocated_long_(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.long__.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.long__.IsDefault()) {
    _impl_.long__.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.RpcCommandOptions.long)
}

// string short = 4 [json_name = "short"];
inline void RpcCommandOptions::clear_short_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.short__.ClearToEmpty();
}
inline const std::string& RpcCommandOptions::short_() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.RpcCommandOptions.short)
  return _internal_short_();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcCommandOptions::set_short_(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.short__.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.RpcCommandOptions.short)
}
inline std::string* RpcCommandOptions::mutable_short_() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_short_();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.RpcCommandOptions.short)
  return _s;
}
inline const std::string& RpcCommandOptions::_internal_short_() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.short__.Get();
}
inline void RpcCommandOptions::_internal_set_short_(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.short__.Set(value, GetArena());
}
inline std::string* RpcCommandOptions::_internal_mutable_short_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.short__.Mutable( GetArena());
}
inline std::string* RpcCommandOptions::release_short_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.RpcCommandOptions.short)
  return _impl_.short__.Release();
}
inline void RpcCommandOptions::set_allocated_short_(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.short__.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.short__.IsDefault()) {
    _impl_.short__.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.RpcCommandOptions.short)
}

// string example = 5 [json_name = "example"];
inline void RpcCommandOptions::clear_example() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.example_.ClearToEmpty();
}
inline const std::string& RpcCommandOptions::example() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.RpcCommandOptions.example)
  return _internal_example();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcCommandOptions::set_example(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.example_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.RpcCommandOptions.example)
}
inline std::string* RpcCommandOptions::mutable_example() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_example();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.RpcCommandOptions.example)
  return _s;
}
inline const std::string& RpcCommandOptions::_internal_example() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.example_.Get();
}
inline void RpcCommandOptions::_internal_set_example(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.example_.Set(value, GetArena());
}
inline std::string* RpcCommandOptions::_internal_mutable_example() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.example_.Mutable( GetArena());
}
inline std::string* RpcCommandOptions::release_example() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.RpcCommandOptions.example)
  return _impl_.example_.Release();
}
inline void RpcCommandOptions::set_allocated_example(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.example_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.example_.IsDefault()) {
    _impl_.example_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.RpcCommandOptions.example)
}

// repeated string alias = 6 [json_name = "alias"];
inline int RpcCommandOptions::_internal_alias_size() const {
  return _internal_alias().size();
}
inline int RpcCommandOptions::alias_size() const {
  return _internal_alias_size();
}
inline void RpcCommandOptions::clear_alias() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alias_.Clear();
}
inline std::string* RpcCommandOptions::add_alias() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_alias()->Add();
  // @@protoc_insertion_point(field_add_mutable:cosmos.autocli.v1.RpcCommandOptions.alias)
  return _s;
}
inline const std::string& RpcCommandOptions::alias(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.RpcCommandOptions.alias)
  return _internal_alias().Get(index);
}
inline std::string* RpcCommandOptions::mutable_alias(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.RpcCommandOptions.alias)
  return _internal_mutable_alias()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void RpcCommandOptions::set_alias(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_alias()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.RpcCommandOptions.alias)
}
template <typename Arg_, typename... Args_>
inline void RpcCommandOptions::add_alias(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_alias(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:cosmos.autocli.v1.RpcCommandOptions.alias)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RpcCommandOptions::alias() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.autocli.v1.RpcCommandOptions.alias)
  return _internal_alias();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RpcCommandOptions::mutable_alias() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.autocli.v1.RpcCommandOptions.alias)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_alias();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RpcCommandOptions::_internal_alias() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.alias_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RpcCommandOptions::_internal_mutable_alias() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.alias_;
}

// repeated string suggest_for = 7 [json_name = "suggestFor"];
inline int RpcCommandOptions::_internal_suggest_for_size() const {
  return _internal_suggest_for().size();
}
inline int RpcCommandOptions::suggest_for_size() const {
  return _internal_suggest_for_size();
}
inline void RpcCommandOptions::clear_suggest_for() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.suggest_for_.Clear();
}
inline std::string* RpcCommandOptions::add_suggest_for() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_suggest_for()->Add();
  // @@protoc_insertion_point(field_add_mutable:cosmos.autocli.v1.RpcCommandOptions.suggest_for)
  return _s;
}
inline const std::string& RpcCommandOptions::suggest_for(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.RpcCommandOptions.suggest_for)
  return _internal_suggest_for().Get(index);
}
inline std::string* RpcCommandOptions::mutable_suggest_for(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.RpcCommandOptions.suggest_for)
  return _internal_mutable_suggest_for()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void RpcCommandOptions::set_suggest_for(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_suggest_for()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.RpcCommandOptions.suggest_for)
}
template <typename Arg_, typename... Args_>
inline void RpcCommandOptions::add_suggest_for(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_suggest_for(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:cosmos.autocli.v1.RpcCommandOptions.suggest_for)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RpcCommandOptions::suggest_for() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.autocli.v1.RpcCommandOptions.suggest_for)
  return _internal_suggest_for();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RpcCommandOptions::mutable_suggest_for() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.autocli.v1.RpcCommandOptions.suggest_for)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_suggest_for();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RpcCommandOptions::_internal_suggest_for() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.suggest_for_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RpcCommandOptions::_internal_mutable_suggest_for() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.suggest_for_;
}

// string deprecated = 8 [json_name = "deprecated"];
inline void RpcCommandOptions::clear_deprecated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deprecated_.ClearToEmpty();
}
inline const std::string& RpcCommandOptions::deprecated() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.RpcCommandOptions.deprecated)
  return _internal_deprecated();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcCommandOptions::set_deprecated(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deprecated_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.RpcCommandOptions.deprecated)
}
inline std::string* RpcCommandOptions::mutable_deprecated() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_deprecated();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.RpcCommandOptions.deprecated)
  return _s;
}
inline const std::string& RpcCommandOptions::_internal_deprecated() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.deprecated_.Get();
}
inline void RpcCommandOptions::_internal_set_deprecated(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deprecated_.Set(value, GetArena());
}
inline std::string* RpcCommandOptions::_internal_mutable_deprecated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.deprecated_.Mutable( GetArena());
}
inline std::string* RpcCommandOptions::release_deprecated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.RpcCommandOptions.deprecated)
  return _impl_.deprecated_.Release();
}
inline void RpcCommandOptions::set_allocated_deprecated(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deprecated_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.deprecated_.IsDefault()) {
    _impl_.deprecated_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.RpcCommandOptions.deprecated)
}

// string version = 9 [json_name = "version"];
inline void RpcCommandOptions::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& RpcCommandOptions::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.RpcCommandOptions.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcCommandOptions::set_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.RpcCommandOptions.version)
}
inline std::string* RpcCommandOptions::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.RpcCommandOptions.version)
  return _s;
}
inline const std::string& RpcCommandOptions::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_.Get();
}
inline void RpcCommandOptions::_internal_set_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(value, GetArena());
}
inline std::string* RpcCommandOptions::_internal_mutable_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* RpcCommandOptions::release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.RpcCommandOptions.version)
  return _impl_.version_.Release();
}
inline void RpcCommandOptions::set_allocated_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.RpcCommandOptions.version)
}

// map<string, .cosmos.autocli.v1.FlagOptions> flag_options = 10 [json_name = "flagOptions"];
inline int RpcCommandOptions::_internal_flag_options_size() const {
  return _internal_flag_options().size();
}
inline int RpcCommandOptions::flag_options_size() const {
  return _internal_flag_options_size();
}
inline void RpcCommandOptions::clear_flag_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.flag_options_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::cosmos::autocli::v1::FlagOptions>& RpcCommandOptions::_internal_flag_options() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.flag_options_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::cosmos::autocli::v1::FlagOptions>& RpcCommandOptions::flag_options() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:cosmos.autocli.v1.RpcCommandOptions.flag_options)
  return _internal_flag_options();
}
inline ::google::protobuf::Map<std::string, ::cosmos::autocli::v1::FlagOptions>* RpcCommandOptions::_internal_mutable_flag_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.flag_options_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::cosmos::autocli::v1::FlagOptions>* RpcCommandOptions::mutable_flag_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:cosmos.autocli.v1.RpcCommandOptions.flag_options)
  return _internal_mutable_flag_options();
}

// repeated .cosmos.autocli.v1.PositionalArgDescriptor positional_args = 11 [json_name = "positionalArgs"];
inline int RpcCommandOptions::_internal_positional_args_size() const {
  return _internal_positional_args().size();
}
inline int RpcCommandOptions::positional_args_size() const {
  return _internal_positional_args_size();
}
inline void RpcCommandOptions::clear_positional_args() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positional_args_.Clear();
}
inline ::cosmos::autocli::v1::PositionalArgDescriptor* RpcCommandOptions::mutable_positional_args(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.RpcCommandOptions.positional_args)
  return _internal_mutable_positional_args()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::autocli::v1::PositionalArgDescriptor>* RpcCommandOptions::mutable_positional_args()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.autocli.v1.RpcCommandOptions.positional_args)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_positional_args();
}
inline const ::cosmos::autocli::v1::PositionalArgDescriptor& RpcCommandOptions::positional_args(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.RpcCommandOptions.positional_args)
  return _internal_positional_args().Get(index);
}
inline ::cosmos::autocli::v1::PositionalArgDescriptor* RpcCommandOptions::add_positional_args() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::autocli::v1::PositionalArgDescriptor* _add = _internal_mutable_positional_args()->Add();
  // @@protoc_insertion_point(field_add:cosmos.autocli.v1.RpcCommandOptions.positional_args)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::autocli::v1::PositionalArgDescriptor>& RpcCommandOptions::positional_args() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.autocli.v1.RpcCommandOptions.positional_args)
  return _internal_positional_args();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::autocli::v1::PositionalArgDescriptor>&
RpcCommandOptions::_internal_positional_args() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.positional_args_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::autocli::v1::PositionalArgDescriptor>*
RpcCommandOptions::_internal_mutable_positional_args() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.positional_args_;
}

// bool skip = 12 [json_name = "skip"];
inline void RpcCommandOptions::clear_skip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.skip_ = false;
}
inline bool RpcCommandOptions::skip() const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.RpcCommandOptions.skip)
  return _internal_skip();
}
inline void RpcCommandOptions::set_skip(bool value) {
  _internal_set_skip(value);
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.RpcCommandOptions.skip)
}
inline bool RpcCommandOptions::_internal_skip() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.skip_;
}
inline void RpcCommandOptions::_internal_set_skip(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.skip_ = value;
}

// bool gov_proposal = 13 [json_name = "govProposal", (.cosmos_proto.field_added_in) = "client/v2 v2.0.0-beta.2"];
inline void RpcCommandOptions::clear_gov_proposal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gov_proposal_ = false;
}
inline bool RpcCommandOptions::gov_proposal() const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.RpcCommandOptions.gov_proposal)
  return _internal_gov_proposal();
}
inline void RpcCommandOptions::set_gov_proposal(bool value) {
  _internal_set_gov_proposal(value);
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.RpcCommandOptions.gov_proposal)
}
inline bool RpcCommandOptions::_internal_gov_proposal() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gov_proposal_;
}
inline void RpcCommandOptions::_internal_set_gov_proposal(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gov_proposal_ = value;
}

// -------------------------------------------------------------------

// FlagOptions

// string name = 1 [json_name = "name"];
inline void FlagOptions::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& FlagOptions::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.FlagOptions.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FlagOptions::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.FlagOptions.name)
}
inline std::string* FlagOptions::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.FlagOptions.name)
  return _s;
}
inline const std::string& FlagOptions::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void FlagOptions::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* FlagOptions::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* FlagOptions::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.FlagOptions.name)
  return _impl_.name_.Release();
}
inline void FlagOptions::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.FlagOptions.name)
}

// string shorthand = 2 [json_name = "shorthand"];
inline void FlagOptions::clear_shorthand() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shorthand_.ClearToEmpty();
}
inline const std::string& FlagOptions::shorthand() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.FlagOptions.shorthand)
  return _internal_shorthand();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FlagOptions::set_shorthand(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shorthand_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.FlagOptions.shorthand)
}
inline std::string* FlagOptions::mutable_shorthand() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_shorthand();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.FlagOptions.shorthand)
  return _s;
}
inline const std::string& FlagOptions::_internal_shorthand() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.shorthand_.Get();
}
inline void FlagOptions::_internal_set_shorthand(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shorthand_.Set(value, GetArena());
}
inline std::string* FlagOptions::_internal_mutable_shorthand() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.shorthand_.Mutable( GetArena());
}
inline std::string* FlagOptions::release_shorthand() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.FlagOptions.shorthand)
  return _impl_.shorthand_.Release();
}
inline void FlagOptions::set_allocated_shorthand(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shorthand_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.shorthand_.IsDefault()) {
    _impl_.shorthand_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.FlagOptions.shorthand)
}

// string usage = 3 [json_name = "usage"];
inline void FlagOptions::clear_usage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.usage_.ClearToEmpty();
}
inline const std::string& FlagOptions::usage() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.FlagOptions.usage)
  return _internal_usage();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FlagOptions::set_usage(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.usage_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.FlagOptions.usage)
}
inline std::string* FlagOptions::mutable_usage() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_usage();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.FlagOptions.usage)
  return _s;
}
inline const std::string& FlagOptions::_internal_usage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.usage_.Get();
}
inline void FlagOptions::_internal_set_usage(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.usage_.Set(value, GetArena());
}
inline std::string* FlagOptions::_internal_mutable_usage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.usage_.Mutable( GetArena());
}
inline std::string* FlagOptions::release_usage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.FlagOptions.usage)
  return _impl_.usage_.Release();
}
inline void FlagOptions::set_allocated_usage(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.usage_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.usage_.IsDefault()) {
    _impl_.usage_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.FlagOptions.usage)
}

// string default_value = 4 [json_name = "defaultValue"];
inline void FlagOptions::clear_default_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default_value_.ClearToEmpty();
}
inline const std::string& FlagOptions::default_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.FlagOptions.default_value)
  return _internal_default_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FlagOptions::set_default_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default_value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.FlagOptions.default_value)
}
inline std::string* FlagOptions::mutable_default_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_default_value();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.FlagOptions.default_value)
  return _s;
}
inline const std::string& FlagOptions::_internal_default_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.default_value_.Get();
}
inline void FlagOptions::_internal_set_default_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default_value_.Set(value, GetArena());
}
inline std::string* FlagOptions::_internal_mutable_default_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.default_value_.Mutable( GetArena());
}
inline std::string* FlagOptions::release_default_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.FlagOptions.default_value)
  return _impl_.default_value_.Release();
}
inline void FlagOptions::set_allocated_default_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default_value_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.default_value_.IsDefault()) {
    _impl_.default_value_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.FlagOptions.default_value)
}

// string deprecated = 6 [json_name = "deprecated"];
inline void FlagOptions::clear_deprecated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deprecated_.ClearToEmpty();
}
inline const std::string& FlagOptions::deprecated() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.FlagOptions.deprecated)
  return _internal_deprecated();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FlagOptions::set_deprecated(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deprecated_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.FlagOptions.deprecated)
}
inline std::string* FlagOptions::mutable_deprecated() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_deprecated();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.FlagOptions.deprecated)
  return _s;
}
inline const std::string& FlagOptions::_internal_deprecated() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.deprecated_.Get();
}
inline void FlagOptions::_internal_set_deprecated(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deprecated_.Set(value, GetArena());
}
inline std::string* FlagOptions::_internal_mutable_deprecated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.deprecated_.Mutable( GetArena());
}
inline std::string* FlagOptions::release_deprecated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.FlagOptions.deprecated)
  return _impl_.deprecated_.Release();
}
inline void FlagOptions::set_allocated_deprecated(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deprecated_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.deprecated_.IsDefault()) {
    _impl_.deprecated_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.FlagOptions.deprecated)
}

// string shorthand_deprecated = 7 [json_name = "shorthandDeprecated"];
inline void FlagOptions::clear_shorthand_deprecated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shorthand_deprecated_.ClearToEmpty();
}
inline const std::string& FlagOptions::shorthand_deprecated() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.FlagOptions.shorthand_deprecated)
  return _internal_shorthand_deprecated();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FlagOptions::set_shorthand_deprecated(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shorthand_deprecated_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.FlagOptions.shorthand_deprecated)
}
inline std::string* FlagOptions::mutable_shorthand_deprecated() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_shorthand_deprecated();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.FlagOptions.shorthand_deprecated)
  return _s;
}
inline const std::string& FlagOptions::_internal_shorthand_deprecated() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.shorthand_deprecated_.Get();
}
inline void FlagOptions::_internal_set_shorthand_deprecated(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shorthand_deprecated_.Set(value, GetArena());
}
inline std::string* FlagOptions::_internal_mutable_shorthand_deprecated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.shorthand_deprecated_.Mutable( GetArena());
}
inline std::string* FlagOptions::release_shorthand_deprecated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.FlagOptions.shorthand_deprecated)
  return _impl_.shorthand_deprecated_.Release();
}
inline void FlagOptions::set_allocated_shorthand_deprecated(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shorthand_deprecated_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.shorthand_deprecated_.IsDefault()) {
    _impl_.shorthand_deprecated_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.FlagOptions.shorthand_deprecated)
}

// bool hidden = 8 [json_name = "hidden"];
inline void FlagOptions::clear_hidden() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hidden_ = false;
}
inline bool FlagOptions::hidden() const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.FlagOptions.hidden)
  return _internal_hidden();
}
inline void FlagOptions::set_hidden(bool value) {
  _internal_set_hidden(value);
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.FlagOptions.hidden)
}
inline bool FlagOptions::_internal_hidden() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hidden_;
}
inline void FlagOptions::_internal_set_hidden(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hidden_ = value;
}

// -------------------------------------------------------------------

// PositionalArgDescriptor

// string proto_field = 1 [json_name = "protoField"];
inline void PositionalArgDescriptor::clear_proto_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proto_field_.ClearToEmpty();
}
inline const std::string& PositionalArgDescriptor::proto_field() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.PositionalArgDescriptor.proto_field)
  return _internal_proto_field();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PositionalArgDescriptor::set_proto_field(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proto_field_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.PositionalArgDescriptor.proto_field)
}
inline std::string* PositionalArgDescriptor::mutable_proto_field() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_proto_field();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.PositionalArgDescriptor.proto_field)
  return _s;
}
inline const std::string& PositionalArgDescriptor::_internal_proto_field() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proto_field_.Get();
}
inline void PositionalArgDescriptor::_internal_set_proto_field(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proto_field_.Set(value, GetArena());
}
inline std::string* PositionalArgDescriptor::_internal_mutable_proto_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.proto_field_.Mutable( GetArena());
}
inline std::string* PositionalArgDescriptor::release_proto_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.PositionalArgDescriptor.proto_field)
  return _impl_.proto_field_.Release();
}
inline void PositionalArgDescriptor::set_allocated_proto_field(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proto_field_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.proto_field_.IsDefault()) {
    _impl_.proto_field_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.PositionalArgDescriptor.proto_field)
}

// bool varargs = 2 [json_name = "varargs"];
inline void PositionalArgDescriptor::clear_varargs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.varargs_ = false;
}
inline bool PositionalArgDescriptor::varargs() const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.PositionalArgDescriptor.varargs)
  return _internal_varargs();
}
inline void PositionalArgDescriptor::set_varargs(bool value) {
  _internal_set_varargs(value);
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.PositionalArgDescriptor.varargs)
}
inline bool PositionalArgDescriptor::_internal_varargs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.varargs_;
}
inline void PositionalArgDescriptor::_internal_set_varargs(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.varargs_ = value;
}

// bool optional = 3 [json_name = "optional"];
inline void PositionalArgDescriptor::clear_optional() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_ = false;
}
inline bool PositionalArgDescriptor::optional() const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.PositionalArgDescriptor.optional)
  return _internal_optional();
}
inline void PositionalArgDescriptor::set_optional(bool value) {
  _internal_set_optional(value);
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.PositionalArgDescriptor.optional)
}
inline bool PositionalArgDescriptor::_internal_optional() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.optional_;
}
inline void PositionalArgDescriptor::_internal_set_optional(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace autocli
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2fautocli_2fv1_2foptions_2eproto_2epb_2eh
