// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/group/v1/tx.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2fgroup_2fv1_2ftx_2eproto_2epb_2eh
#define cosmos_2fgroup_2fv1_2ftx_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "google/protobuf/any.pb.h"
#include "cosmos/group/v1/types.pb.h"
#include "cosmos/msg/v1/msg.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fgroup_2fv1_2ftx_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2fgroup_2fv1_2ftx_2eproto;
namespace cosmos {
namespace group {
namespace v1 {
class MsgCreateGroup;
struct MsgCreateGroupDefaultTypeInternal;
extern MsgCreateGroupDefaultTypeInternal _MsgCreateGroup_default_instance_;
class MsgCreateGroupPolicy;
struct MsgCreateGroupPolicyDefaultTypeInternal;
extern MsgCreateGroupPolicyDefaultTypeInternal _MsgCreateGroupPolicy_default_instance_;
class MsgCreateGroupPolicyResponse;
struct MsgCreateGroupPolicyResponseDefaultTypeInternal;
extern MsgCreateGroupPolicyResponseDefaultTypeInternal _MsgCreateGroupPolicyResponse_default_instance_;
class MsgCreateGroupResponse;
struct MsgCreateGroupResponseDefaultTypeInternal;
extern MsgCreateGroupResponseDefaultTypeInternal _MsgCreateGroupResponse_default_instance_;
class MsgCreateGroupWithPolicy;
struct MsgCreateGroupWithPolicyDefaultTypeInternal;
extern MsgCreateGroupWithPolicyDefaultTypeInternal _MsgCreateGroupWithPolicy_default_instance_;
class MsgCreateGroupWithPolicyResponse;
struct MsgCreateGroupWithPolicyResponseDefaultTypeInternal;
extern MsgCreateGroupWithPolicyResponseDefaultTypeInternal _MsgCreateGroupWithPolicyResponse_default_instance_;
class MsgExec;
struct MsgExecDefaultTypeInternal;
extern MsgExecDefaultTypeInternal _MsgExec_default_instance_;
class MsgExecResponse;
struct MsgExecResponseDefaultTypeInternal;
extern MsgExecResponseDefaultTypeInternal _MsgExecResponse_default_instance_;
class MsgLeaveGroup;
struct MsgLeaveGroupDefaultTypeInternal;
extern MsgLeaveGroupDefaultTypeInternal _MsgLeaveGroup_default_instance_;
class MsgLeaveGroupResponse;
struct MsgLeaveGroupResponseDefaultTypeInternal;
extern MsgLeaveGroupResponseDefaultTypeInternal _MsgLeaveGroupResponse_default_instance_;
class MsgSubmitProposal;
struct MsgSubmitProposalDefaultTypeInternal;
extern MsgSubmitProposalDefaultTypeInternal _MsgSubmitProposal_default_instance_;
class MsgSubmitProposalResponse;
struct MsgSubmitProposalResponseDefaultTypeInternal;
extern MsgSubmitProposalResponseDefaultTypeInternal _MsgSubmitProposalResponse_default_instance_;
class MsgUpdateGroupAdmin;
struct MsgUpdateGroupAdminDefaultTypeInternal;
extern MsgUpdateGroupAdminDefaultTypeInternal _MsgUpdateGroupAdmin_default_instance_;
class MsgUpdateGroupAdminResponse;
struct MsgUpdateGroupAdminResponseDefaultTypeInternal;
extern MsgUpdateGroupAdminResponseDefaultTypeInternal _MsgUpdateGroupAdminResponse_default_instance_;
class MsgUpdateGroupMembers;
struct MsgUpdateGroupMembersDefaultTypeInternal;
extern MsgUpdateGroupMembersDefaultTypeInternal _MsgUpdateGroupMembers_default_instance_;
class MsgUpdateGroupMembersResponse;
struct MsgUpdateGroupMembersResponseDefaultTypeInternal;
extern MsgUpdateGroupMembersResponseDefaultTypeInternal _MsgUpdateGroupMembersResponse_default_instance_;
class MsgUpdateGroupMetadata;
struct MsgUpdateGroupMetadataDefaultTypeInternal;
extern MsgUpdateGroupMetadataDefaultTypeInternal _MsgUpdateGroupMetadata_default_instance_;
class MsgUpdateGroupMetadataResponse;
struct MsgUpdateGroupMetadataResponseDefaultTypeInternal;
extern MsgUpdateGroupMetadataResponseDefaultTypeInternal _MsgUpdateGroupMetadataResponse_default_instance_;
class MsgUpdateGroupPolicyAdmin;
struct MsgUpdateGroupPolicyAdminDefaultTypeInternal;
extern MsgUpdateGroupPolicyAdminDefaultTypeInternal _MsgUpdateGroupPolicyAdmin_default_instance_;
class MsgUpdateGroupPolicyAdminResponse;
struct MsgUpdateGroupPolicyAdminResponseDefaultTypeInternal;
extern MsgUpdateGroupPolicyAdminResponseDefaultTypeInternal _MsgUpdateGroupPolicyAdminResponse_default_instance_;
class MsgUpdateGroupPolicyDecisionPolicy;
struct MsgUpdateGroupPolicyDecisionPolicyDefaultTypeInternal;
extern MsgUpdateGroupPolicyDecisionPolicyDefaultTypeInternal _MsgUpdateGroupPolicyDecisionPolicy_default_instance_;
class MsgUpdateGroupPolicyDecisionPolicyResponse;
struct MsgUpdateGroupPolicyDecisionPolicyResponseDefaultTypeInternal;
extern MsgUpdateGroupPolicyDecisionPolicyResponseDefaultTypeInternal _MsgUpdateGroupPolicyDecisionPolicyResponse_default_instance_;
class MsgUpdateGroupPolicyMetadata;
struct MsgUpdateGroupPolicyMetadataDefaultTypeInternal;
extern MsgUpdateGroupPolicyMetadataDefaultTypeInternal _MsgUpdateGroupPolicyMetadata_default_instance_;
class MsgUpdateGroupPolicyMetadataResponse;
struct MsgUpdateGroupPolicyMetadataResponseDefaultTypeInternal;
extern MsgUpdateGroupPolicyMetadataResponseDefaultTypeInternal _MsgUpdateGroupPolicyMetadataResponse_default_instance_;
class MsgVote;
struct MsgVoteDefaultTypeInternal;
extern MsgVoteDefaultTypeInternal _MsgVote_default_instance_;
class MsgVoteResponse;
struct MsgVoteResponseDefaultTypeInternal;
extern MsgVoteResponseDefaultTypeInternal _MsgVoteResponse_default_instance_;
class MsgWithdrawProposal;
struct MsgWithdrawProposalDefaultTypeInternal;
extern MsgWithdrawProposalDefaultTypeInternal _MsgWithdrawProposal_default_instance_;
class MsgWithdrawProposalResponse;
struct MsgWithdrawProposalResponseDefaultTypeInternal;
extern MsgWithdrawProposalResponseDefaultTypeInternal _MsgWithdrawProposalResponse_default_instance_;
}  // namespace v1
}  // namespace group
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace group {
namespace v1 {
enum Exec : int {
  EXEC_UNSPECIFIED = 0,
  EXEC_TRY = 1,
  Exec_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Exec_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Exec_IsValid(int value);
extern const uint32_t Exec_internal_data_[];
constexpr Exec Exec_MIN = static_cast<Exec>(0);
constexpr Exec Exec_MAX = static_cast<Exec>(1);
constexpr int Exec_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
Exec_descriptor();
template <typename T>
const std::string& Exec_Name(T value) {
  static_assert(std::is_same<T, Exec>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Exec_Name().");
  return Exec_Name(static_cast<Exec>(value));
}
template <>
inline const std::string& Exec_Name(Exec value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Exec_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool Exec_Parse(absl::string_view name, Exec* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Exec>(
      Exec_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class MsgWithdrawProposalResponse final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgWithdrawProposalResponse) */ {
 public:
  inline MsgWithdrawProposalResponse() : MsgWithdrawProposalResponse(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgWithdrawProposalResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgWithdrawProposalResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgWithdrawProposalResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgWithdrawProposalResponse(const MsgWithdrawProposalResponse& from) : MsgWithdrawProposalResponse(nullptr, from) {}
  inline MsgWithdrawProposalResponse(MsgWithdrawProposalResponse&& from) noexcept
      : MsgWithdrawProposalResponse(nullptr, std::move(from)) {}
  inline MsgWithdrawProposalResponse& operator=(const MsgWithdrawProposalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgWithdrawProposalResponse& operator=(MsgWithdrawProposalResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgWithdrawProposalResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgWithdrawProposalResponse* internal_default_instance() {
    return reinterpret_cast<const MsgWithdrawProposalResponse*>(
        &_MsgWithdrawProposalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(MsgWithdrawProposalResponse& a, MsgWithdrawProposalResponse& b) { a.Swap(&b); }
  inline void Swap(MsgWithdrawProposalResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgWithdrawProposalResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgWithdrawProposalResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<MsgWithdrawProposalResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgWithdrawProposalResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgWithdrawProposalResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.MsgWithdrawProposalResponse"; }

 protected:
  explicit MsgWithdrawProposalResponse(::google::protobuf::Arena* arena);
  MsgWithdrawProposalResponse(::google::protobuf::Arena* arena, const MsgWithdrawProposalResponse& from);
  MsgWithdrawProposalResponse(::google::protobuf::Arena* arena, MsgWithdrawProposalResponse&& from) noexcept
      : MsgWithdrawProposalResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgWithdrawProposalResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgWithdrawProposalResponse& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgWithdrawProposal final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgWithdrawProposal) */ {
 public:
  inline MsgWithdrawProposal() : MsgWithdrawProposal(nullptr) {}
  ~MsgWithdrawProposal() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgWithdrawProposal* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgWithdrawProposal));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgWithdrawProposal(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgWithdrawProposal(const MsgWithdrawProposal& from) : MsgWithdrawProposal(nullptr, from) {}
  inline MsgWithdrawProposal(MsgWithdrawProposal&& from) noexcept
      : MsgWithdrawProposal(nullptr, std::move(from)) {}
  inline MsgWithdrawProposal& operator=(const MsgWithdrawProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgWithdrawProposal& operator=(MsgWithdrawProposal&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgWithdrawProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgWithdrawProposal* internal_default_instance() {
    return reinterpret_cast<const MsgWithdrawProposal*>(
        &_MsgWithdrawProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(MsgWithdrawProposal& a, MsgWithdrawProposal& b) { a.Swap(&b); }
  inline void Swap(MsgWithdrawProposal* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgWithdrawProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgWithdrawProposal* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgWithdrawProposal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgWithdrawProposal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgWithdrawProposal& from) { MsgWithdrawProposal::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgWithdrawProposal* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.MsgWithdrawProposal"; }

 protected:
  explicit MsgWithdrawProposal(::google::protobuf::Arena* arena);
  MsgWithdrawProposal(::google::protobuf::Arena* arena, const MsgWithdrawProposal& from);
  MsgWithdrawProposal(::google::protobuf::Arena* arena, MsgWithdrawProposal&& from) noexcept
      : MsgWithdrawProposal(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAddressFieldNumber = 2,
    kProposalIdFieldNumber = 1,
  };
  // string address = 2 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* value);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgWithdrawProposal)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgWithdrawProposal& from_msg);
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::uint64_t proposal_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgVoteResponse final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgVoteResponse) */ {
 public:
  inline MsgVoteResponse() : MsgVoteResponse(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgVoteResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgVoteResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgVoteResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgVoteResponse(const MsgVoteResponse& from) : MsgVoteResponse(nullptr, from) {}
  inline MsgVoteResponse(MsgVoteResponse&& from) noexcept
      : MsgVoteResponse(nullptr, std::move(from)) {}
  inline MsgVoteResponse& operator=(const MsgVoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgVoteResponse& operator=(MsgVoteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgVoteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgVoteResponse* internal_default_instance() {
    return reinterpret_cast<const MsgVoteResponse*>(
        &_MsgVoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(MsgVoteResponse& a, MsgVoteResponse& b) { a.Swap(&b); }
  inline void Swap(MsgVoteResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgVoteResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgVoteResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<MsgVoteResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgVoteResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgVoteResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.MsgVoteResponse"; }

 protected:
  explicit MsgVoteResponse(::google::protobuf::Arena* arena);
  MsgVoteResponse(::google::protobuf::Arena* arena, const MsgVoteResponse& from);
  MsgVoteResponse(::google::protobuf::Arena* arena, MsgVoteResponse&& from) noexcept
      : MsgVoteResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgVoteResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgVoteResponse& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgVote final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgVote) */ {
 public:
  inline MsgVote() : MsgVote(nullptr) {}
  ~MsgVote() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgVote* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgVote));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgVote(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgVote(const MsgVote& from) : MsgVote(nullptr, from) {}
  inline MsgVote(MsgVote&& from) noexcept
      : MsgVote(nullptr, std::move(from)) {}
  inline MsgVote& operator=(const MsgVote& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgVote& operator=(MsgVote&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgVote& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgVote* internal_default_instance() {
    return reinterpret_cast<const MsgVote*>(
        &_MsgVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(MsgVote& a, MsgVote& b) { a.Swap(&b); }
  inline void Swap(MsgVote* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgVote* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgVote* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgVote>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgVote& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgVote& from) { MsgVote::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgVote* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.MsgVote"; }

 protected:
  explicit MsgVote(::google::protobuf::Arena* arena);
  MsgVote(::google::protobuf::Arena* arena, const MsgVote& from);
  MsgVote(::google::protobuf::Arena* arena, MsgVote&& from) noexcept
      : MsgVote(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVoterFieldNumber = 2,
    kMetadataFieldNumber = 4,
    kProposalIdFieldNumber = 1,
    kOptionFieldNumber = 3,
    kExecFieldNumber = 5,
  };
  // string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_voter() ;
  const std::string& voter() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_voter(Arg_&& arg, Args_... args);
  std::string* mutable_voter();
  PROTOBUF_NODISCARD std::string* release_voter();
  void set_allocated_voter(std::string* value);

  private:
  const std::string& _internal_voter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_voter(
      const std::string& value);
  std::string* _internal_mutable_voter();

  public:
  // string metadata = 4 [json_name = "metadata"];
  void clear_metadata() ;
  const std::string& metadata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* value);

  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(
      const std::string& value);
  std::string* _internal_mutable_metadata();

  public:
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // .cosmos.group.v1.VoteOption option = 3 [json_name = "option"];
  void clear_option() ;
  ::cosmos::group::v1::VoteOption option() const;
  void set_option(::cosmos::group::v1::VoteOption value);

  private:
  ::cosmos::group::v1::VoteOption _internal_option() const;
  void _internal_set_option(::cosmos::group::v1::VoteOption value);

  public:
  // .cosmos.group.v1.Exec exec = 5 [json_name = "exec"];
  void clear_exec() ;
  ::cosmos::group::v1::Exec exec() const;
  void set_exec(::cosmos::group::v1::Exec value);

  private:
  ::cosmos::group::v1::Exec _internal_exec() const;
  void _internal_set_exec(::cosmos::group::v1::Exec value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgVote)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      45, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgVote& from_msg);
    ::google::protobuf::internal::ArenaStringPtr voter_;
    ::google::protobuf::internal::ArenaStringPtr metadata_;
    ::uint64_t proposal_id_;
    int option_;
    int exec_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgUpdateGroupPolicyMetadataResponse final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgUpdateGroupPolicyMetadataResponse) */ {
 public:
  inline MsgUpdateGroupPolicyMetadataResponse() : MsgUpdateGroupPolicyMetadataResponse(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgUpdateGroupPolicyMetadataResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgUpdateGroupPolicyMetadataResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateGroupPolicyMetadataResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgUpdateGroupPolicyMetadataResponse(const MsgUpdateGroupPolicyMetadataResponse& from) : MsgUpdateGroupPolicyMetadataResponse(nullptr, from) {}
  inline MsgUpdateGroupPolicyMetadataResponse(MsgUpdateGroupPolicyMetadataResponse&& from) noexcept
      : MsgUpdateGroupPolicyMetadataResponse(nullptr, std::move(from)) {}
  inline MsgUpdateGroupPolicyMetadataResponse& operator=(const MsgUpdateGroupPolicyMetadataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateGroupPolicyMetadataResponse& operator=(MsgUpdateGroupPolicyMetadataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateGroupPolicyMetadataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateGroupPolicyMetadataResponse* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateGroupPolicyMetadataResponse*>(
        &_MsgUpdateGroupPolicyMetadataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(MsgUpdateGroupPolicyMetadataResponse& a, MsgUpdateGroupPolicyMetadataResponse& b) { a.Swap(&b); }
  inline void Swap(MsgUpdateGroupPolicyMetadataResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateGroupPolicyMetadataResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateGroupPolicyMetadataResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<MsgUpdateGroupPolicyMetadataResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgUpdateGroupPolicyMetadataResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgUpdateGroupPolicyMetadataResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.MsgUpdateGroupPolicyMetadataResponse"; }

 protected:
  explicit MsgUpdateGroupPolicyMetadataResponse(::google::protobuf::Arena* arena);
  MsgUpdateGroupPolicyMetadataResponse(::google::protobuf::Arena* arena, const MsgUpdateGroupPolicyMetadataResponse& from);
  MsgUpdateGroupPolicyMetadataResponse(::google::protobuf::Arena* arena, MsgUpdateGroupPolicyMetadataResponse&& from) noexcept
      : MsgUpdateGroupPolicyMetadataResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgUpdateGroupPolicyMetadataResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgUpdateGroupPolicyMetadataResponse& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgUpdateGroupPolicyMetadata final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgUpdateGroupPolicyMetadata) */ {
 public:
  inline MsgUpdateGroupPolicyMetadata() : MsgUpdateGroupPolicyMetadata(nullptr) {}
  ~MsgUpdateGroupPolicyMetadata() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgUpdateGroupPolicyMetadata* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgUpdateGroupPolicyMetadata));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateGroupPolicyMetadata(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgUpdateGroupPolicyMetadata(const MsgUpdateGroupPolicyMetadata& from) : MsgUpdateGroupPolicyMetadata(nullptr, from) {}
  inline MsgUpdateGroupPolicyMetadata(MsgUpdateGroupPolicyMetadata&& from) noexcept
      : MsgUpdateGroupPolicyMetadata(nullptr, std::move(from)) {}
  inline MsgUpdateGroupPolicyMetadata& operator=(const MsgUpdateGroupPolicyMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateGroupPolicyMetadata& operator=(MsgUpdateGroupPolicyMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateGroupPolicyMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateGroupPolicyMetadata* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateGroupPolicyMetadata*>(
        &_MsgUpdateGroupPolicyMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(MsgUpdateGroupPolicyMetadata& a, MsgUpdateGroupPolicyMetadata& b) { a.Swap(&b); }
  inline void Swap(MsgUpdateGroupPolicyMetadata* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateGroupPolicyMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateGroupPolicyMetadata* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgUpdateGroupPolicyMetadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgUpdateGroupPolicyMetadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgUpdateGroupPolicyMetadata& from) { MsgUpdateGroupPolicyMetadata::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgUpdateGroupPolicyMetadata* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.MsgUpdateGroupPolicyMetadata"; }

 protected:
  explicit MsgUpdateGroupPolicyMetadata(::google::protobuf::Arena* arena);
  MsgUpdateGroupPolicyMetadata(::google::protobuf::Arena* arena, const MsgUpdateGroupPolicyMetadata& from);
  MsgUpdateGroupPolicyMetadata(::google::protobuf::Arena* arena, MsgUpdateGroupPolicyMetadata&& from) noexcept
      : MsgUpdateGroupPolicyMetadata(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAdminFieldNumber = 1,
    kGroupPolicyAddressFieldNumber = 2,
    kMetadataFieldNumber = 3,
  };
  // string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_admin() ;
  const std::string& admin() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_admin(Arg_&& arg, Args_... args);
  std::string* mutable_admin();
  PROTOBUF_NODISCARD std::string* release_admin();
  void set_allocated_admin(std::string* value);

  private:
  const std::string& _internal_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin(
      const std::string& value);
  std::string* _internal_mutable_admin();

  public:
  // string group_policy_address = 2 [json_name = "groupPolicyAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_group_policy_address() ;
  const std::string& group_policy_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_group_policy_address(Arg_&& arg, Args_... args);
  std::string* mutable_group_policy_address();
  PROTOBUF_NODISCARD std::string* release_group_policy_address();
  void set_allocated_group_policy_address(std::string* value);

  private:
  const std::string& _internal_group_policy_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_policy_address(
      const std::string& value);
  std::string* _internal_mutable_group_policy_address();

  public:
  // string metadata = 3 [json_name = "metadata"];
  void clear_metadata() ;
  const std::string& metadata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* value);

  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(
      const std::string& value);
  std::string* _internal_mutable_metadata();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgUpdateGroupPolicyMetadata)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      86, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgUpdateGroupPolicyMetadata& from_msg);
    ::google::protobuf::internal::ArenaStringPtr admin_;
    ::google::protobuf::internal::ArenaStringPtr group_policy_address_;
    ::google::protobuf::internal::ArenaStringPtr metadata_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgUpdateGroupPolicyDecisionPolicyResponse final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicyResponse) */ {
 public:
  inline MsgUpdateGroupPolicyDecisionPolicyResponse() : MsgUpdateGroupPolicyDecisionPolicyResponse(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgUpdateGroupPolicyDecisionPolicyResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgUpdateGroupPolicyDecisionPolicyResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateGroupPolicyDecisionPolicyResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgUpdateGroupPolicyDecisionPolicyResponse(const MsgUpdateGroupPolicyDecisionPolicyResponse& from) : MsgUpdateGroupPolicyDecisionPolicyResponse(nullptr, from) {}
  inline MsgUpdateGroupPolicyDecisionPolicyResponse(MsgUpdateGroupPolicyDecisionPolicyResponse&& from) noexcept
      : MsgUpdateGroupPolicyDecisionPolicyResponse(nullptr, std::move(from)) {}
  inline MsgUpdateGroupPolicyDecisionPolicyResponse& operator=(const MsgUpdateGroupPolicyDecisionPolicyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateGroupPolicyDecisionPolicyResponse& operator=(MsgUpdateGroupPolicyDecisionPolicyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateGroupPolicyDecisionPolicyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateGroupPolicyDecisionPolicyResponse* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateGroupPolicyDecisionPolicyResponse*>(
        &_MsgUpdateGroupPolicyDecisionPolicyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(MsgUpdateGroupPolicyDecisionPolicyResponse& a, MsgUpdateGroupPolicyDecisionPolicyResponse& b) { a.Swap(&b); }
  inline void Swap(MsgUpdateGroupPolicyDecisionPolicyResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateGroupPolicyDecisionPolicyResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateGroupPolicyDecisionPolicyResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<MsgUpdateGroupPolicyDecisionPolicyResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgUpdateGroupPolicyDecisionPolicyResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgUpdateGroupPolicyDecisionPolicyResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicyResponse"; }

 protected:
  explicit MsgUpdateGroupPolicyDecisionPolicyResponse(::google::protobuf::Arena* arena);
  MsgUpdateGroupPolicyDecisionPolicyResponse(::google::protobuf::Arena* arena, const MsgUpdateGroupPolicyDecisionPolicyResponse& from);
  MsgUpdateGroupPolicyDecisionPolicyResponse(::google::protobuf::Arena* arena, MsgUpdateGroupPolicyDecisionPolicyResponse&& from) noexcept
      : MsgUpdateGroupPolicyDecisionPolicyResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicyResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgUpdateGroupPolicyDecisionPolicyResponse& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgUpdateGroupPolicyAdminResponse final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgUpdateGroupPolicyAdminResponse) */ {
 public:
  inline MsgUpdateGroupPolicyAdminResponse() : MsgUpdateGroupPolicyAdminResponse(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgUpdateGroupPolicyAdminResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgUpdateGroupPolicyAdminResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateGroupPolicyAdminResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgUpdateGroupPolicyAdminResponse(const MsgUpdateGroupPolicyAdminResponse& from) : MsgUpdateGroupPolicyAdminResponse(nullptr, from) {}
  inline MsgUpdateGroupPolicyAdminResponse(MsgUpdateGroupPolicyAdminResponse&& from) noexcept
      : MsgUpdateGroupPolicyAdminResponse(nullptr, std::move(from)) {}
  inline MsgUpdateGroupPolicyAdminResponse& operator=(const MsgUpdateGroupPolicyAdminResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateGroupPolicyAdminResponse& operator=(MsgUpdateGroupPolicyAdminResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateGroupPolicyAdminResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateGroupPolicyAdminResponse* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateGroupPolicyAdminResponse*>(
        &_MsgUpdateGroupPolicyAdminResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(MsgUpdateGroupPolicyAdminResponse& a, MsgUpdateGroupPolicyAdminResponse& b) { a.Swap(&b); }
  inline void Swap(MsgUpdateGroupPolicyAdminResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateGroupPolicyAdminResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateGroupPolicyAdminResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<MsgUpdateGroupPolicyAdminResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgUpdateGroupPolicyAdminResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgUpdateGroupPolicyAdminResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.MsgUpdateGroupPolicyAdminResponse"; }

 protected:
  explicit MsgUpdateGroupPolicyAdminResponse(::google::protobuf::Arena* arena);
  MsgUpdateGroupPolicyAdminResponse(::google::protobuf::Arena* arena, const MsgUpdateGroupPolicyAdminResponse& from);
  MsgUpdateGroupPolicyAdminResponse(::google::protobuf::Arena* arena, MsgUpdateGroupPolicyAdminResponse&& from) noexcept
      : MsgUpdateGroupPolicyAdminResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgUpdateGroupPolicyAdminResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgUpdateGroupPolicyAdminResponse& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgUpdateGroupPolicyAdmin final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgUpdateGroupPolicyAdmin) */ {
 public:
  inline MsgUpdateGroupPolicyAdmin() : MsgUpdateGroupPolicyAdmin(nullptr) {}
  ~MsgUpdateGroupPolicyAdmin() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgUpdateGroupPolicyAdmin* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgUpdateGroupPolicyAdmin));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateGroupPolicyAdmin(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgUpdateGroupPolicyAdmin(const MsgUpdateGroupPolicyAdmin& from) : MsgUpdateGroupPolicyAdmin(nullptr, from) {}
  inline MsgUpdateGroupPolicyAdmin(MsgUpdateGroupPolicyAdmin&& from) noexcept
      : MsgUpdateGroupPolicyAdmin(nullptr, std::move(from)) {}
  inline MsgUpdateGroupPolicyAdmin& operator=(const MsgUpdateGroupPolicyAdmin& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateGroupPolicyAdmin& operator=(MsgUpdateGroupPolicyAdmin&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateGroupPolicyAdmin& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateGroupPolicyAdmin* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateGroupPolicyAdmin*>(
        &_MsgUpdateGroupPolicyAdmin_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(MsgUpdateGroupPolicyAdmin& a, MsgUpdateGroupPolicyAdmin& b) { a.Swap(&b); }
  inline void Swap(MsgUpdateGroupPolicyAdmin* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateGroupPolicyAdmin* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateGroupPolicyAdmin* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgUpdateGroupPolicyAdmin>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgUpdateGroupPolicyAdmin& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgUpdateGroupPolicyAdmin& from) { MsgUpdateGroupPolicyAdmin::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgUpdateGroupPolicyAdmin* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.MsgUpdateGroupPolicyAdmin"; }

 protected:
  explicit MsgUpdateGroupPolicyAdmin(::google::protobuf::Arena* arena);
  MsgUpdateGroupPolicyAdmin(::google::protobuf::Arena* arena, const MsgUpdateGroupPolicyAdmin& from);
  MsgUpdateGroupPolicyAdmin(::google::protobuf::Arena* arena, MsgUpdateGroupPolicyAdmin&& from) noexcept
      : MsgUpdateGroupPolicyAdmin(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAdminFieldNumber = 1,
    kGroupPolicyAddressFieldNumber = 2,
    kNewAdminFieldNumber = 3,
  };
  // string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_admin() ;
  const std::string& admin() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_admin(Arg_&& arg, Args_... args);
  std::string* mutable_admin();
  PROTOBUF_NODISCARD std::string* release_admin();
  void set_allocated_admin(std::string* value);

  private:
  const std::string& _internal_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin(
      const std::string& value);
  std::string* _internal_mutable_admin();

  public:
  // string group_policy_address = 2 [json_name = "groupPolicyAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_group_policy_address() ;
  const std::string& group_policy_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_group_policy_address(Arg_&& arg, Args_... args);
  std::string* mutable_group_policy_address();
  PROTOBUF_NODISCARD std::string* release_group_policy_address();
  void set_allocated_group_policy_address(std::string* value);

  private:
  const std::string& _internal_group_policy_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_policy_address(
      const std::string& value);
  std::string* _internal_mutable_group_policy_address();

  public:
  // string new_admin = 3 [json_name = "newAdmin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_new_admin() ;
  const std::string& new_admin() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_admin(Arg_&& arg, Args_... args);
  std::string* mutable_new_admin();
  PROTOBUF_NODISCARD std::string* release_new_admin();
  void set_allocated_new_admin(std::string* value);

  private:
  const std::string& _internal_new_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_admin(
      const std::string& value);
  std::string* _internal_mutable_new_admin();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgUpdateGroupPolicyAdmin)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      84, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgUpdateGroupPolicyAdmin& from_msg);
    ::google::protobuf::internal::ArenaStringPtr admin_;
    ::google::protobuf::internal::ArenaStringPtr group_policy_address_;
    ::google::protobuf::internal::ArenaStringPtr new_admin_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgUpdateGroupMetadataResponse final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgUpdateGroupMetadataResponse) */ {
 public:
  inline MsgUpdateGroupMetadataResponse() : MsgUpdateGroupMetadataResponse(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgUpdateGroupMetadataResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgUpdateGroupMetadataResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateGroupMetadataResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgUpdateGroupMetadataResponse(const MsgUpdateGroupMetadataResponse& from) : MsgUpdateGroupMetadataResponse(nullptr, from) {}
  inline MsgUpdateGroupMetadataResponse(MsgUpdateGroupMetadataResponse&& from) noexcept
      : MsgUpdateGroupMetadataResponse(nullptr, std::move(from)) {}
  inline MsgUpdateGroupMetadataResponse& operator=(const MsgUpdateGroupMetadataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateGroupMetadataResponse& operator=(MsgUpdateGroupMetadataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateGroupMetadataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateGroupMetadataResponse* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateGroupMetadataResponse*>(
        &_MsgUpdateGroupMetadataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(MsgUpdateGroupMetadataResponse& a, MsgUpdateGroupMetadataResponse& b) { a.Swap(&b); }
  inline void Swap(MsgUpdateGroupMetadataResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateGroupMetadataResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateGroupMetadataResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<MsgUpdateGroupMetadataResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgUpdateGroupMetadataResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgUpdateGroupMetadataResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.MsgUpdateGroupMetadataResponse"; }

 protected:
  explicit MsgUpdateGroupMetadataResponse(::google::protobuf::Arena* arena);
  MsgUpdateGroupMetadataResponse(::google::protobuf::Arena* arena, const MsgUpdateGroupMetadataResponse& from);
  MsgUpdateGroupMetadataResponse(::google::protobuf::Arena* arena, MsgUpdateGroupMetadataResponse&& from) noexcept
      : MsgUpdateGroupMetadataResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgUpdateGroupMetadataResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgUpdateGroupMetadataResponse& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgUpdateGroupMetadata final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgUpdateGroupMetadata) */ {
 public:
  inline MsgUpdateGroupMetadata() : MsgUpdateGroupMetadata(nullptr) {}
  ~MsgUpdateGroupMetadata() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgUpdateGroupMetadata* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgUpdateGroupMetadata));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateGroupMetadata(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgUpdateGroupMetadata(const MsgUpdateGroupMetadata& from) : MsgUpdateGroupMetadata(nullptr, from) {}
  inline MsgUpdateGroupMetadata(MsgUpdateGroupMetadata&& from) noexcept
      : MsgUpdateGroupMetadata(nullptr, std::move(from)) {}
  inline MsgUpdateGroupMetadata& operator=(const MsgUpdateGroupMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateGroupMetadata& operator=(MsgUpdateGroupMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateGroupMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateGroupMetadata* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateGroupMetadata*>(
        &_MsgUpdateGroupMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(MsgUpdateGroupMetadata& a, MsgUpdateGroupMetadata& b) { a.Swap(&b); }
  inline void Swap(MsgUpdateGroupMetadata* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateGroupMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateGroupMetadata* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgUpdateGroupMetadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgUpdateGroupMetadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgUpdateGroupMetadata& from) { MsgUpdateGroupMetadata::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgUpdateGroupMetadata* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.MsgUpdateGroupMetadata"; }

 protected:
  explicit MsgUpdateGroupMetadata(::google::protobuf::Arena* arena);
  MsgUpdateGroupMetadata(::google::protobuf::Arena* arena, const MsgUpdateGroupMetadata& from);
  MsgUpdateGroupMetadata(::google::protobuf::Arena* arena, MsgUpdateGroupMetadata&& from) noexcept
      : MsgUpdateGroupMetadata(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAdminFieldNumber = 1,
    kMetadataFieldNumber = 3,
    kGroupIdFieldNumber = 2,
  };
  // string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_admin() ;
  const std::string& admin() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_admin(Arg_&& arg, Args_... args);
  std::string* mutable_admin();
  PROTOBUF_NODISCARD std::string* release_admin();
  void set_allocated_admin(std::string* value);

  private:
  const std::string& _internal_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin(
      const std::string& value);
  std::string* _internal_mutable_admin();

  public:
  // string metadata = 3 [json_name = "metadata"];
  void clear_metadata() ;
  const std::string& metadata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* value);

  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(
      const std::string& value);
  std::string* _internal_mutable_metadata();

  public:
  // uint64 group_id = 2 [json_name = "groupId"];
  void clear_group_id() ;
  ::uint64_t group_id() const;
  void set_group_id(::uint64_t value);

  private:
  ::uint64_t _internal_group_id() const;
  void _internal_set_group_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgUpdateGroupMetadata)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      60, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgUpdateGroupMetadata& from_msg);
    ::google::protobuf::internal::ArenaStringPtr admin_;
    ::google::protobuf::internal::ArenaStringPtr metadata_;
    ::uint64_t group_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgUpdateGroupMembersResponse final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgUpdateGroupMembersResponse) */ {
 public:
  inline MsgUpdateGroupMembersResponse() : MsgUpdateGroupMembersResponse(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgUpdateGroupMembersResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgUpdateGroupMembersResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateGroupMembersResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgUpdateGroupMembersResponse(const MsgUpdateGroupMembersResponse& from) : MsgUpdateGroupMembersResponse(nullptr, from) {}
  inline MsgUpdateGroupMembersResponse(MsgUpdateGroupMembersResponse&& from) noexcept
      : MsgUpdateGroupMembersResponse(nullptr, std::move(from)) {}
  inline MsgUpdateGroupMembersResponse& operator=(const MsgUpdateGroupMembersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateGroupMembersResponse& operator=(MsgUpdateGroupMembersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateGroupMembersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateGroupMembersResponse* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateGroupMembersResponse*>(
        &_MsgUpdateGroupMembersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(MsgUpdateGroupMembersResponse& a, MsgUpdateGroupMembersResponse& b) { a.Swap(&b); }
  inline void Swap(MsgUpdateGroupMembersResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateGroupMembersResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateGroupMembersResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<MsgUpdateGroupMembersResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgUpdateGroupMembersResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgUpdateGroupMembersResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.MsgUpdateGroupMembersResponse"; }

 protected:
  explicit MsgUpdateGroupMembersResponse(::google::protobuf::Arena* arena);
  MsgUpdateGroupMembersResponse(::google::protobuf::Arena* arena, const MsgUpdateGroupMembersResponse& from);
  MsgUpdateGroupMembersResponse(::google::protobuf::Arena* arena, MsgUpdateGroupMembersResponse&& from) noexcept
      : MsgUpdateGroupMembersResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgUpdateGroupMembersResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgUpdateGroupMembersResponse& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgUpdateGroupAdminResponse final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgUpdateGroupAdminResponse) */ {
 public:
  inline MsgUpdateGroupAdminResponse() : MsgUpdateGroupAdminResponse(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgUpdateGroupAdminResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgUpdateGroupAdminResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateGroupAdminResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgUpdateGroupAdminResponse(const MsgUpdateGroupAdminResponse& from) : MsgUpdateGroupAdminResponse(nullptr, from) {}
  inline MsgUpdateGroupAdminResponse(MsgUpdateGroupAdminResponse&& from) noexcept
      : MsgUpdateGroupAdminResponse(nullptr, std::move(from)) {}
  inline MsgUpdateGroupAdminResponse& operator=(const MsgUpdateGroupAdminResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateGroupAdminResponse& operator=(MsgUpdateGroupAdminResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateGroupAdminResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateGroupAdminResponse* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateGroupAdminResponse*>(
        &_MsgUpdateGroupAdminResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(MsgUpdateGroupAdminResponse& a, MsgUpdateGroupAdminResponse& b) { a.Swap(&b); }
  inline void Swap(MsgUpdateGroupAdminResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateGroupAdminResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateGroupAdminResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<MsgUpdateGroupAdminResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgUpdateGroupAdminResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgUpdateGroupAdminResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.MsgUpdateGroupAdminResponse"; }

 protected:
  explicit MsgUpdateGroupAdminResponse(::google::protobuf::Arena* arena);
  MsgUpdateGroupAdminResponse(::google::protobuf::Arena* arena, const MsgUpdateGroupAdminResponse& from);
  MsgUpdateGroupAdminResponse(::google::protobuf::Arena* arena, MsgUpdateGroupAdminResponse&& from) noexcept
      : MsgUpdateGroupAdminResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgUpdateGroupAdminResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgUpdateGroupAdminResponse& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgUpdateGroupAdmin final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgUpdateGroupAdmin) */ {
 public:
  inline MsgUpdateGroupAdmin() : MsgUpdateGroupAdmin(nullptr) {}
  ~MsgUpdateGroupAdmin() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgUpdateGroupAdmin* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgUpdateGroupAdmin));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateGroupAdmin(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgUpdateGroupAdmin(const MsgUpdateGroupAdmin& from) : MsgUpdateGroupAdmin(nullptr, from) {}
  inline MsgUpdateGroupAdmin(MsgUpdateGroupAdmin&& from) noexcept
      : MsgUpdateGroupAdmin(nullptr, std::move(from)) {}
  inline MsgUpdateGroupAdmin& operator=(const MsgUpdateGroupAdmin& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateGroupAdmin& operator=(MsgUpdateGroupAdmin&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateGroupAdmin& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateGroupAdmin* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateGroupAdmin*>(
        &_MsgUpdateGroupAdmin_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(MsgUpdateGroupAdmin& a, MsgUpdateGroupAdmin& b) { a.Swap(&b); }
  inline void Swap(MsgUpdateGroupAdmin* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateGroupAdmin* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateGroupAdmin* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgUpdateGroupAdmin>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgUpdateGroupAdmin& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgUpdateGroupAdmin& from) { MsgUpdateGroupAdmin::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgUpdateGroupAdmin* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.MsgUpdateGroupAdmin"; }

 protected:
  explicit MsgUpdateGroupAdmin(::google::protobuf::Arena* arena);
  MsgUpdateGroupAdmin(::google::protobuf::Arena* arena, const MsgUpdateGroupAdmin& from);
  MsgUpdateGroupAdmin(::google::protobuf::Arena* arena, MsgUpdateGroupAdmin&& from) noexcept
      : MsgUpdateGroupAdmin(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAdminFieldNumber = 1,
    kNewAdminFieldNumber = 3,
    kGroupIdFieldNumber = 2,
  };
  // string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_admin() ;
  const std::string& admin() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_admin(Arg_&& arg, Args_... args);
  std::string* mutable_admin();
  PROTOBUF_NODISCARD std::string* release_admin();
  void set_allocated_admin(std::string* value);

  private:
  const std::string& _internal_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin(
      const std::string& value);
  std::string* _internal_mutable_admin();

  public:
  // string new_admin = 3 [json_name = "newAdmin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_new_admin() ;
  const std::string& new_admin() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_admin(Arg_&& arg, Args_... args);
  std::string* mutable_new_admin();
  PROTOBUF_NODISCARD std::string* release_new_admin();
  void set_allocated_new_admin(std::string* value);

  private:
  const std::string& _internal_new_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_admin(
      const std::string& value);
  std::string* _internal_mutable_new_admin();

  public:
  // uint64 group_id = 2 [json_name = "groupId"];
  void clear_group_id() ;
  ::uint64_t group_id() const;
  void set_group_id(::uint64_t value);

  private:
  ::uint64_t _internal_group_id() const;
  void _internal_set_group_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgUpdateGroupAdmin)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      58, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgUpdateGroupAdmin& from_msg);
    ::google::protobuf::internal::ArenaStringPtr admin_;
    ::google::protobuf::internal::ArenaStringPtr new_admin_;
    ::uint64_t group_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgSubmitProposalResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgSubmitProposalResponse) */ {
 public:
  inline MsgSubmitProposalResponse() : MsgSubmitProposalResponse(nullptr) {}
  ~MsgSubmitProposalResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgSubmitProposalResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgSubmitProposalResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgSubmitProposalResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgSubmitProposalResponse(const MsgSubmitProposalResponse& from) : MsgSubmitProposalResponse(nullptr, from) {}
  inline MsgSubmitProposalResponse(MsgSubmitProposalResponse&& from) noexcept
      : MsgSubmitProposalResponse(nullptr, std::move(from)) {}
  inline MsgSubmitProposalResponse& operator=(const MsgSubmitProposalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSubmitProposalResponse& operator=(MsgSubmitProposalResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgSubmitProposalResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSubmitProposalResponse* internal_default_instance() {
    return reinterpret_cast<const MsgSubmitProposalResponse*>(
        &_MsgSubmitProposalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(MsgSubmitProposalResponse& a, MsgSubmitProposalResponse& b) { a.Swap(&b); }
  inline void Swap(MsgSubmitProposalResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSubmitProposalResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgSubmitProposalResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgSubmitProposalResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgSubmitProposalResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgSubmitProposalResponse& from) { MsgSubmitProposalResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgSubmitProposalResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.MsgSubmitProposalResponse"; }

 protected:
  explicit MsgSubmitProposalResponse(::google::protobuf::Arena* arena);
  MsgSubmitProposalResponse(::google::protobuf::Arena* arena, const MsgSubmitProposalResponse& from);
  MsgSubmitProposalResponse(::google::protobuf::Arena* arena, MsgSubmitProposalResponse&& from) noexcept
      : MsgSubmitProposalResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kProposalIdFieldNumber = 1,
  };
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgSubmitProposalResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgSubmitProposalResponse& from_msg);
    ::uint64_t proposal_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgLeaveGroupResponse final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgLeaveGroupResponse) */ {
 public:
  inline MsgLeaveGroupResponse() : MsgLeaveGroupResponse(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgLeaveGroupResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgLeaveGroupResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgLeaveGroupResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgLeaveGroupResponse(const MsgLeaveGroupResponse& from) : MsgLeaveGroupResponse(nullptr, from) {}
  inline MsgLeaveGroupResponse(MsgLeaveGroupResponse&& from) noexcept
      : MsgLeaveGroupResponse(nullptr, std::move(from)) {}
  inline MsgLeaveGroupResponse& operator=(const MsgLeaveGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgLeaveGroupResponse& operator=(MsgLeaveGroupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgLeaveGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgLeaveGroupResponse* internal_default_instance() {
    return reinterpret_cast<const MsgLeaveGroupResponse*>(
        &_MsgLeaveGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 27;
  friend void swap(MsgLeaveGroupResponse& a, MsgLeaveGroupResponse& b) { a.Swap(&b); }
  inline void Swap(MsgLeaveGroupResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgLeaveGroupResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgLeaveGroupResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<MsgLeaveGroupResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgLeaveGroupResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgLeaveGroupResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.MsgLeaveGroupResponse"; }

 protected:
  explicit MsgLeaveGroupResponse(::google::protobuf::Arena* arena);
  MsgLeaveGroupResponse(::google::protobuf::Arena* arena, const MsgLeaveGroupResponse& from);
  MsgLeaveGroupResponse(::google::protobuf::Arena* arena, MsgLeaveGroupResponse&& from) noexcept
      : MsgLeaveGroupResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgLeaveGroupResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgLeaveGroupResponse& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgLeaveGroup final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgLeaveGroup) */ {
 public:
  inline MsgLeaveGroup() : MsgLeaveGroup(nullptr) {}
  ~MsgLeaveGroup() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgLeaveGroup* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgLeaveGroup));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgLeaveGroup(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgLeaveGroup(const MsgLeaveGroup& from) : MsgLeaveGroup(nullptr, from) {}
  inline MsgLeaveGroup(MsgLeaveGroup&& from) noexcept
      : MsgLeaveGroup(nullptr, std::move(from)) {}
  inline MsgLeaveGroup& operator=(const MsgLeaveGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgLeaveGroup& operator=(MsgLeaveGroup&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgLeaveGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgLeaveGroup* internal_default_instance() {
    return reinterpret_cast<const MsgLeaveGroup*>(
        &_MsgLeaveGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 26;
  friend void swap(MsgLeaveGroup& a, MsgLeaveGroup& b) { a.Swap(&b); }
  inline void Swap(MsgLeaveGroup* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgLeaveGroup* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgLeaveGroup* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgLeaveGroup>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgLeaveGroup& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgLeaveGroup& from) { MsgLeaveGroup::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgLeaveGroup* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.MsgLeaveGroup"; }

 protected:
  explicit MsgLeaveGroup(::google::protobuf::Arena* arena);
  MsgLeaveGroup(::google::protobuf::Arena* arena, const MsgLeaveGroup& from);
  MsgLeaveGroup(::google::protobuf::Arena* arena, MsgLeaveGroup&& from) noexcept
      : MsgLeaveGroup(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAddressFieldNumber = 1,
    kGroupIdFieldNumber = 2,
  };
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* value);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // uint64 group_id = 2 [json_name = "groupId"];
  void clear_group_id() ;
  ::uint64_t group_id() const;
  void set_group_id(::uint64_t value);

  private:
  ::uint64_t _internal_group_id() const;
  void _internal_set_group_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgLeaveGroup)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      45, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgLeaveGroup& from_msg);
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::uint64_t group_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgExecResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgExecResponse) */ {
 public:
  inline MsgExecResponse() : MsgExecResponse(nullptr) {}
  ~MsgExecResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgExecResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgExecResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgExecResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgExecResponse(const MsgExecResponse& from) : MsgExecResponse(nullptr, from) {}
  inline MsgExecResponse(MsgExecResponse&& from) noexcept
      : MsgExecResponse(nullptr, std::move(from)) {}
  inline MsgExecResponse& operator=(const MsgExecResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgExecResponse& operator=(MsgExecResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgExecResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgExecResponse* internal_default_instance() {
    return reinterpret_cast<const MsgExecResponse*>(
        &_MsgExecResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 25;
  friend void swap(MsgExecResponse& a, MsgExecResponse& b) { a.Swap(&b); }
  inline void Swap(MsgExecResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgExecResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgExecResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgExecResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgExecResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgExecResponse& from) { MsgExecResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgExecResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.MsgExecResponse"; }

 protected:
  explicit MsgExecResponse(::google::protobuf::Arena* arena);
  MsgExecResponse(::google::protobuf::Arena* arena, const MsgExecResponse& from);
  MsgExecResponse(::google::protobuf::Arena* arena, MsgExecResponse&& from) noexcept
      : MsgExecResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResultFieldNumber = 2,
  };
  // .cosmos.group.v1.ProposalExecutorResult result = 2 [json_name = "result"];
  void clear_result() ;
  ::cosmos::group::v1::ProposalExecutorResult result() const;
  void set_result(::cosmos::group::v1::ProposalExecutorResult value);

  private:
  ::cosmos::group::v1::ProposalExecutorResult _internal_result() const;
  void _internal_set_result(::cosmos::group::v1::ProposalExecutorResult value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgExecResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgExecResponse& from_msg);
    int result_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgExec final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgExec) */ {
 public:
  inline MsgExec() : MsgExec(nullptr) {}
  ~MsgExec() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgExec* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgExec));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgExec(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgExec(const MsgExec& from) : MsgExec(nullptr, from) {}
  inline MsgExec(MsgExec&& from) noexcept
      : MsgExec(nullptr, std::move(from)) {}
  inline MsgExec& operator=(const MsgExec& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgExec& operator=(MsgExec&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgExec& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgExec* internal_default_instance() {
    return reinterpret_cast<const MsgExec*>(
        &_MsgExec_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 24;
  friend void swap(MsgExec& a, MsgExec& b) { a.Swap(&b); }
  inline void Swap(MsgExec* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgExec* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgExec* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgExec>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgExec& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgExec& from) { MsgExec::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgExec* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.MsgExec"; }

 protected:
  explicit MsgExec(::google::protobuf::Arena* arena);
  MsgExec(::google::protobuf::Arena* arena, const MsgExec& from);
  MsgExec(::google::protobuf::Arena* arena, MsgExec&& from) noexcept
      : MsgExec(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kExecutorFieldNumber = 2,
    kProposalIdFieldNumber = 1,
  };
  // string executor = 2 [json_name = "executor", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_executor() ;
  const std::string& executor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_executor(Arg_&& arg, Args_... args);
  std::string* mutable_executor();
  PROTOBUF_NODISCARD std::string* release_executor();
  void set_allocated_executor(std::string* value);

  private:
  const std::string& _internal_executor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_executor(
      const std::string& value);
  std::string* _internal_mutable_executor();

  public:
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgExec)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgExec& from_msg);
    ::google::protobuf::internal::ArenaStringPtr executor_;
    ::uint64_t proposal_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgCreateGroupWithPolicyResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgCreateGroupWithPolicyResponse) */ {
 public:
  inline MsgCreateGroupWithPolicyResponse() : MsgCreateGroupWithPolicyResponse(nullptr) {}
  ~MsgCreateGroupWithPolicyResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgCreateGroupWithPolicyResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgCreateGroupWithPolicyResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgCreateGroupWithPolicyResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgCreateGroupWithPolicyResponse(const MsgCreateGroupWithPolicyResponse& from) : MsgCreateGroupWithPolicyResponse(nullptr, from) {}
  inline MsgCreateGroupWithPolicyResponse(MsgCreateGroupWithPolicyResponse&& from) noexcept
      : MsgCreateGroupWithPolicyResponse(nullptr, std::move(from)) {}
  inline MsgCreateGroupWithPolicyResponse& operator=(const MsgCreateGroupWithPolicyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCreateGroupWithPolicyResponse& operator=(MsgCreateGroupWithPolicyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgCreateGroupWithPolicyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgCreateGroupWithPolicyResponse* internal_default_instance() {
    return reinterpret_cast<const MsgCreateGroupWithPolicyResponse*>(
        &_MsgCreateGroupWithPolicyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(MsgCreateGroupWithPolicyResponse& a, MsgCreateGroupWithPolicyResponse& b) { a.Swap(&b); }
  inline void Swap(MsgCreateGroupWithPolicyResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCreateGroupWithPolicyResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgCreateGroupWithPolicyResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgCreateGroupWithPolicyResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgCreateGroupWithPolicyResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgCreateGroupWithPolicyResponse& from) { MsgCreateGroupWithPolicyResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgCreateGroupWithPolicyResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.MsgCreateGroupWithPolicyResponse"; }

 protected:
  explicit MsgCreateGroupWithPolicyResponse(::google::protobuf::Arena* arena);
  MsgCreateGroupWithPolicyResponse(::google::protobuf::Arena* arena, const MsgCreateGroupWithPolicyResponse& from);
  MsgCreateGroupWithPolicyResponse(::google::protobuf::Arena* arena, MsgCreateGroupWithPolicyResponse&& from) noexcept
      : MsgCreateGroupWithPolicyResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGroupPolicyAddressFieldNumber = 2,
    kGroupIdFieldNumber = 1,
  };
  // string group_policy_address = 2 [json_name = "groupPolicyAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_group_policy_address() ;
  const std::string& group_policy_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_group_policy_address(Arg_&& arg, Args_... args);
  std::string* mutable_group_policy_address();
  PROTOBUF_NODISCARD std::string* release_group_policy_address();
  void set_allocated_group_policy_address(std::string* value);

  private:
  const std::string& _internal_group_policy_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_policy_address(
      const std::string& value);
  std::string* _internal_mutable_group_policy_address();

  public:
  // uint64 group_id = 1 [json_name = "groupId"];
  void clear_group_id() ;
  ::uint64_t group_id() const;
  void set_group_id(::uint64_t value);

  private:
  ::uint64_t _internal_group_id() const;
  void _internal_set_group_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgCreateGroupWithPolicyResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      77, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgCreateGroupWithPolicyResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr group_policy_address_;
    ::uint64_t group_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgCreateGroupResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgCreateGroupResponse) */ {
 public:
  inline MsgCreateGroupResponse() : MsgCreateGroupResponse(nullptr) {}
  ~MsgCreateGroupResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgCreateGroupResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgCreateGroupResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgCreateGroupResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgCreateGroupResponse(const MsgCreateGroupResponse& from) : MsgCreateGroupResponse(nullptr, from) {}
  inline MsgCreateGroupResponse(MsgCreateGroupResponse&& from) noexcept
      : MsgCreateGroupResponse(nullptr, std::move(from)) {}
  inline MsgCreateGroupResponse& operator=(const MsgCreateGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCreateGroupResponse& operator=(MsgCreateGroupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgCreateGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgCreateGroupResponse* internal_default_instance() {
    return reinterpret_cast<const MsgCreateGroupResponse*>(
        &_MsgCreateGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(MsgCreateGroupResponse& a, MsgCreateGroupResponse& b) { a.Swap(&b); }
  inline void Swap(MsgCreateGroupResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCreateGroupResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgCreateGroupResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgCreateGroupResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgCreateGroupResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgCreateGroupResponse& from) { MsgCreateGroupResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgCreateGroupResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.MsgCreateGroupResponse"; }

 protected:
  explicit MsgCreateGroupResponse(::google::protobuf::Arena* arena);
  MsgCreateGroupResponse(::google::protobuf::Arena* arena, const MsgCreateGroupResponse& from);
  MsgCreateGroupResponse(::google::protobuf::Arena* arena, MsgCreateGroupResponse&& from) noexcept
      : MsgCreateGroupResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // uint64 group_id = 1 [json_name = "groupId"];
  void clear_group_id() ;
  ::uint64_t group_id() const;
  void set_group_id(::uint64_t value);

  private:
  ::uint64_t _internal_group_id() const;
  void _internal_set_group_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgCreateGroupResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgCreateGroupResponse& from_msg);
    ::uint64_t group_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgCreateGroupPolicyResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgCreateGroupPolicyResponse) */ {
 public:
  inline MsgCreateGroupPolicyResponse() : MsgCreateGroupPolicyResponse(nullptr) {}
  ~MsgCreateGroupPolicyResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgCreateGroupPolicyResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgCreateGroupPolicyResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgCreateGroupPolicyResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgCreateGroupPolicyResponse(const MsgCreateGroupPolicyResponse& from) : MsgCreateGroupPolicyResponse(nullptr, from) {}
  inline MsgCreateGroupPolicyResponse(MsgCreateGroupPolicyResponse&& from) noexcept
      : MsgCreateGroupPolicyResponse(nullptr, std::move(from)) {}
  inline MsgCreateGroupPolicyResponse& operator=(const MsgCreateGroupPolicyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCreateGroupPolicyResponse& operator=(MsgCreateGroupPolicyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgCreateGroupPolicyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgCreateGroupPolicyResponse* internal_default_instance() {
    return reinterpret_cast<const MsgCreateGroupPolicyResponse*>(
        &_MsgCreateGroupPolicyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(MsgCreateGroupPolicyResponse& a, MsgCreateGroupPolicyResponse& b) { a.Swap(&b); }
  inline void Swap(MsgCreateGroupPolicyResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCreateGroupPolicyResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgCreateGroupPolicyResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgCreateGroupPolicyResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgCreateGroupPolicyResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgCreateGroupPolicyResponse& from) { MsgCreateGroupPolicyResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgCreateGroupPolicyResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.MsgCreateGroupPolicyResponse"; }

 protected:
  explicit MsgCreateGroupPolicyResponse(::google::protobuf::Arena* arena);
  MsgCreateGroupPolicyResponse(::google::protobuf::Arena* arena, const MsgCreateGroupPolicyResponse& from);
  MsgCreateGroupPolicyResponse(::google::protobuf::Arena* arena, MsgCreateGroupPolicyResponse&& from) noexcept
      : MsgCreateGroupPolicyResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAddressFieldNumber = 1,
  };
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* value);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgCreateGroupPolicyResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      60, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgCreateGroupPolicyResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgUpdateGroupPolicyDecisionPolicy final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy) */ {
 public:
  inline MsgUpdateGroupPolicyDecisionPolicy() : MsgUpdateGroupPolicyDecisionPolicy(nullptr) {}
  ~MsgUpdateGroupPolicyDecisionPolicy() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgUpdateGroupPolicyDecisionPolicy* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgUpdateGroupPolicyDecisionPolicy));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateGroupPolicyDecisionPolicy(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgUpdateGroupPolicyDecisionPolicy(const MsgUpdateGroupPolicyDecisionPolicy& from) : MsgUpdateGroupPolicyDecisionPolicy(nullptr, from) {}
  inline MsgUpdateGroupPolicyDecisionPolicy(MsgUpdateGroupPolicyDecisionPolicy&& from) noexcept
      : MsgUpdateGroupPolicyDecisionPolicy(nullptr, std::move(from)) {}
  inline MsgUpdateGroupPolicyDecisionPolicy& operator=(const MsgUpdateGroupPolicyDecisionPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateGroupPolicyDecisionPolicy& operator=(MsgUpdateGroupPolicyDecisionPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateGroupPolicyDecisionPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateGroupPolicyDecisionPolicy* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateGroupPolicyDecisionPolicy*>(
        &_MsgUpdateGroupPolicyDecisionPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(MsgUpdateGroupPolicyDecisionPolicy& a, MsgUpdateGroupPolicyDecisionPolicy& b) { a.Swap(&b); }
  inline void Swap(MsgUpdateGroupPolicyDecisionPolicy* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateGroupPolicyDecisionPolicy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateGroupPolicyDecisionPolicy* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgUpdateGroupPolicyDecisionPolicy>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgUpdateGroupPolicyDecisionPolicy& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgUpdateGroupPolicyDecisionPolicy& from) { MsgUpdateGroupPolicyDecisionPolicy::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgUpdateGroupPolicyDecisionPolicy* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy"; }

 protected:
  explicit MsgUpdateGroupPolicyDecisionPolicy(::google::protobuf::Arena* arena);
  MsgUpdateGroupPolicyDecisionPolicy(::google::protobuf::Arena* arena, const MsgUpdateGroupPolicyDecisionPolicy& from);
  MsgUpdateGroupPolicyDecisionPolicy(::google::protobuf::Arena* arena, MsgUpdateGroupPolicyDecisionPolicy&& from) noexcept
      : MsgUpdateGroupPolicyDecisionPolicy(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAdminFieldNumber = 1,
    kGroupPolicyAddressFieldNumber = 2,
    kDecisionPolicyFieldNumber = 3,
  };
  // string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_admin() ;
  const std::string& admin() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_admin(Arg_&& arg, Args_... args);
  std::string* mutable_admin();
  PROTOBUF_NODISCARD std::string* release_admin();
  void set_allocated_admin(std::string* value);

  private:
  const std::string& _internal_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin(
      const std::string& value);
  std::string* _internal_mutable_admin();

  public:
  // string group_policy_address = 2 [json_name = "groupPolicyAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_group_policy_address() ;
  const std::string& group_policy_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_group_policy_address(Arg_&& arg, Args_... args);
  std::string* mutable_group_policy_address();
  PROTOBUF_NODISCARD std::string* release_group_policy_address();
  void set_allocated_group_policy_address(std::string* value);

  private:
  const std::string& _internal_group_policy_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_policy_address(
      const std::string& value);
  std::string* _internal_mutable_group_policy_address();

  public:
  // .google.protobuf.Any decision_policy = 3 [json_name = "decisionPolicy", (.cosmos_proto.accepts_interface) = "cosmos.group.v1.DecisionPolicy"];
  bool has_decision_policy() const;
  void clear_decision_policy() ;
  const ::google::protobuf::Any& decision_policy() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_decision_policy();
  ::google::protobuf::Any* mutable_decision_policy();
  void set_allocated_decision_policy(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_decision_policy(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_decision_policy();

  private:
  const ::google::protobuf::Any& _internal_decision_policy() const;
  ::google::protobuf::Any* _internal_mutable_decision_policy();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      84, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgUpdateGroupPolicyDecisionPolicy& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr admin_;
    ::google::protobuf::internal::ArenaStringPtr group_policy_address_;
    ::google::protobuf::Any* decision_policy_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgUpdateGroupMembers final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgUpdateGroupMembers) */ {
 public:
  inline MsgUpdateGroupMembers() : MsgUpdateGroupMembers(nullptr) {}
  ~MsgUpdateGroupMembers() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgUpdateGroupMembers* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgUpdateGroupMembers));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateGroupMembers(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgUpdateGroupMembers(const MsgUpdateGroupMembers& from) : MsgUpdateGroupMembers(nullptr, from) {}
  inline MsgUpdateGroupMembers(MsgUpdateGroupMembers&& from) noexcept
      : MsgUpdateGroupMembers(nullptr, std::move(from)) {}
  inline MsgUpdateGroupMembers& operator=(const MsgUpdateGroupMembers& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateGroupMembers& operator=(MsgUpdateGroupMembers&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateGroupMembers& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateGroupMembers* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateGroupMembers*>(
        &_MsgUpdateGroupMembers_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(MsgUpdateGroupMembers& a, MsgUpdateGroupMembers& b) { a.Swap(&b); }
  inline void Swap(MsgUpdateGroupMembers* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateGroupMembers* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateGroupMembers* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgUpdateGroupMembers>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgUpdateGroupMembers& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgUpdateGroupMembers& from) { MsgUpdateGroupMembers::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgUpdateGroupMembers* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.MsgUpdateGroupMembers"; }

 protected:
  explicit MsgUpdateGroupMembers(::google::protobuf::Arena* arena);
  MsgUpdateGroupMembers(::google::protobuf::Arena* arena, const MsgUpdateGroupMembers& from);
  MsgUpdateGroupMembers(::google::protobuf::Arena* arena, MsgUpdateGroupMembers&& from) noexcept
      : MsgUpdateGroupMembers(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMemberUpdatesFieldNumber = 3,
    kAdminFieldNumber = 1,
    kGroupIdFieldNumber = 2,
  };
  // repeated .cosmos.group.v1.MemberRequest member_updates = 3 [json_name = "memberUpdates", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int member_updates_size() const;
  private:
  int _internal_member_updates_size() const;

  public:
  void clear_member_updates() ;
  ::cosmos::group::v1::MemberRequest* mutable_member_updates(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::group::v1::MemberRequest>* mutable_member_updates();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::group::v1::MemberRequest>& _internal_member_updates() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::group::v1::MemberRequest>* _internal_mutable_member_updates();
  public:
  const ::cosmos::group::v1::MemberRequest& member_updates(int index) const;
  ::cosmos::group::v1::MemberRequest* add_member_updates();
  const ::google::protobuf::RepeatedPtrField<::cosmos::group::v1::MemberRequest>& member_updates() const;
  // string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_admin() ;
  const std::string& admin() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_admin(Arg_&& arg, Args_... args);
  std::string* mutable_admin();
  PROTOBUF_NODISCARD std::string* release_admin();
  void set_allocated_admin(std::string* value);

  private:
  const std::string& _internal_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin(
      const std::string& value);
  std::string* _internal_mutable_admin();

  public:
  // uint64 group_id = 2 [json_name = "groupId"];
  void clear_group_id() ;
  ::uint64_t group_id() const;
  void set_group_id(::uint64_t value);

  private:
  ::uint64_t _internal_group_id() const;
  void _internal_set_group_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgUpdateGroupMembers)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgUpdateGroupMembers& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::group::v1::MemberRequest > member_updates_;
    ::google::protobuf::internal::ArenaStringPtr admin_;
    ::uint64_t group_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgSubmitProposal final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgSubmitProposal) */ {
 public:
  inline MsgSubmitProposal() : MsgSubmitProposal(nullptr) {}
  ~MsgSubmitProposal() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgSubmitProposal* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgSubmitProposal));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgSubmitProposal(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgSubmitProposal(const MsgSubmitProposal& from) : MsgSubmitProposal(nullptr, from) {}
  inline MsgSubmitProposal(MsgSubmitProposal&& from) noexcept
      : MsgSubmitProposal(nullptr, std::move(from)) {}
  inline MsgSubmitProposal& operator=(const MsgSubmitProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSubmitProposal& operator=(MsgSubmitProposal&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgSubmitProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSubmitProposal* internal_default_instance() {
    return reinterpret_cast<const MsgSubmitProposal*>(
        &_MsgSubmitProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(MsgSubmitProposal& a, MsgSubmitProposal& b) { a.Swap(&b); }
  inline void Swap(MsgSubmitProposal* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSubmitProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgSubmitProposal* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgSubmitProposal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgSubmitProposal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgSubmitProposal& from) { MsgSubmitProposal::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgSubmitProposal* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.MsgSubmitProposal"; }

 protected:
  explicit MsgSubmitProposal(::google::protobuf::Arena* arena);
  MsgSubmitProposal(::google::protobuf::Arena* arena, const MsgSubmitProposal& from);
  MsgSubmitProposal(::google::protobuf::Arena* arena, MsgSubmitProposal&& from) noexcept
      : MsgSubmitProposal(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kProposersFieldNumber = 2,
    kMessagesFieldNumber = 4,
    kGroupPolicyAddressFieldNumber = 1,
    kMetadataFieldNumber = 3,
    kTitleFieldNumber = 6,
    kSummaryFieldNumber = 7,
    kExecFieldNumber = 5,
  };
  // repeated string proposers = 2 [json_name = "proposers"];
  int proposers_size() const;
  private:
  int _internal_proposers_size() const;

  public:
  void clear_proposers() ;
  const std::string& proposers(int index) const;
  std::string* mutable_proposers(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proposers(int index, Arg_&& value, Args_... args);
  std::string* add_proposers();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_proposers(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& proposers() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_proposers();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_proposers() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_proposers();

  public:
  // repeated .google.protobuf.Any messages = 4 [json_name = "messages"];
  int messages_size() const;
  private:
  int _internal_messages_size() const;

  public:
  void clear_messages() ;
  ::google::protobuf::Any* mutable_messages(int index);
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* mutable_messages();

  private:
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& _internal_messages() const;
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* _internal_mutable_messages();
  public:
  const ::google::protobuf::Any& messages(int index) const;
  ::google::protobuf::Any* add_messages();
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& messages() const;
  // string group_policy_address = 1 [json_name = "groupPolicyAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_group_policy_address() ;
  const std::string& group_policy_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_group_policy_address(Arg_&& arg, Args_... args);
  std::string* mutable_group_policy_address();
  PROTOBUF_NODISCARD std::string* release_group_policy_address();
  void set_allocated_group_policy_address(std::string* value);

  private:
  const std::string& _internal_group_policy_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_policy_address(
      const std::string& value);
  std::string* _internal_mutable_group_policy_address();

  public:
  // string metadata = 3 [json_name = "metadata"];
  void clear_metadata() ;
  const std::string& metadata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* value);

  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(
      const std::string& value);
  std::string* _internal_mutable_metadata();

  public:
  // string title = 6 [json_name = "title", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.47"];
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string summary = 7 [json_name = "summary", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.47"];
  void clear_summary() ;
  const std::string& summary() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_summary(Arg_&& arg, Args_... args);
  std::string* mutable_summary();
  PROTOBUF_NODISCARD std::string* release_summary();
  void set_allocated_summary(std::string* value);

  private:
  const std::string& _internal_summary() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_summary(
      const std::string& value);
  std::string* _internal_mutable_summary();

  public:
  // .cosmos.group.v1.Exec exec = 5 [json_name = "exec"];
  void clear_exec() ;
  ::cosmos::group::v1::Exec exec() const;
  void set_exec(::cosmos::group::v1::Exec value);

  private:
  ::cosmos::group::v1::Exec _internal_exec() const;
  void _internal_set_exec(::cosmos::group::v1::Exec value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgSubmitProposal)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      91, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgSubmitProposal& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> proposers_;
    ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > messages_;
    ::google::protobuf::internal::ArenaStringPtr group_policy_address_;
    ::google::protobuf::internal::ArenaStringPtr metadata_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr summary_;
    int exec_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgCreateGroupWithPolicy final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgCreateGroupWithPolicy) */ {
 public:
  inline MsgCreateGroupWithPolicy() : MsgCreateGroupWithPolicy(nullptr) {}
  ~MsgCreateGroupWithPolicy() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgCreateGroupWithPolicy* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgCreateGroupWithPolicy));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgCreateGroupWithPolicy(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgCreateGroupWithPolicy(const MsgCreateGroupWithPolicy& from) : MsgCreateGroupWithPolicy(nullptr, from) {}
  inline MsgCreateGroupWithPolicy(MsgCreateGroupWithPolicy&& from) noexcept
      : MsgCreateGroupWithPolicy(nullptr, std::move(from)) {}
  inline MsgCreateGroupWithPolicy& operator=(const MsgCreateGroupWithPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCreateGroupWithPolicy& operator=(MsgCreateGroupWithPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgCreateGroupWithPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgCreateGroupWithPolicy* internal_default_instance() {
    return reinterpret_cast<const MsgCreateGroupWithPolicy*>(
        &_MsgCreateGroupWithPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(MsgCreateGroupWithPolicy& a, MsgCreateGroupWithPolicy& b) { a.Swap(&b); }
  inline void Swap(MsgCreateGroupWithPolicy* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCreateGroupWithPolicy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgCreateGroupWithPolicy* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgCreateGroupWithPolicy>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgCreateGroupWithPolicy& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgCreateGroupWithPolicy& from) { MsgCreateGroupWithPolicy::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgCreateGroupWithPolicy* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.MsgCreateGroupWithPolicy"; }

 protected:
  explicit MsgCreateGroupWithPolicy(::google::protobuf::Arena* arena);
  MsgCreateGroupWithPolicy(::google::protobuf::Arena* arena, const MsgCreateGroupWithPolicy& from);
  MsgCreateGroupWithPolicy(::google::protobuf::Arena* arena, MsgCreateGroupWithPolicy&& from) noexcept
      : MsgCreateGroupWithPolicy(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMembersFieldNumber = 2,
    kAdminFieldNumber = 1,
    kGroupMetadataFieldNumber = 3,
    kGroupPolicyMetadataFieldNumber = 4,
    kDecisionPolicyFieldNumber = 6,
    kGroupPolicyAsAdminFieldNumber = 5,
  };
  // repeated .cosmos.group.v1.MemberRequest members = 2 [json_name = "members", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int members_size() const;
  private:
  int _internal_members_size() const;

  public:
  void clear_members() ;
  ::cosmos::group::v1::MemberRequest* mutable_members(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::group::v1::MemberRequest>* mutable_members();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::group::v1::MemberRequest>& _internal_members() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::group::v1::MemberRequest>* _internal_mutable_members();
  public:
  const ::cosmos::group::v1::MemberRequest& members(int index) const;
  ::cosmos::group::v1::MemberRequest* add_members();
  const ::google::protobuf::RepeatedPtrField<::cosmos::group::v1::MemberRequest>& members() const;
  // string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_admin() ;
  const std::string& admin() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_admin(Arg_&& arg, Args_... args);
  std::string* mutable_admin();
  PROTOBUF_NODISCARD std::string* release_admin();
  void set_allocated_admin(std::string* value);

  private:
  const std::string& _internal_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin(
      const std::string& value);
  std::string* _internal_mutable_admin();

  public:
  // string group_metadata = 3 [json_name = "groupMetadata"];
  void clear_group_metadata() ;
  const std::string& group_metadata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_group_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_group_metadata();
  PROTOBUF_NODISCARD std::string* release_group_metadata();
  void set_allocated_group_metadata(std::string* value);

  private:
  const std::string& _internal_group_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_metadata(
      const std::string& value);
  std::string* _internal_mutable_group_metadata();

  public:
  // string group_policy_metadata = 4 [json_name = "groupPolicyMetadata"];
  void clear_group_policy_metadata() ;
  const std::string& group_policy_metadata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_group_policy_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_group_policy_metadata();
  PROTOBUF_NODISCARD std::string* release_group_policy_metadata();
  void set_allocated_group_policy_metadata(std::string* value);

  private:
  const std::string& _internal_group_policy_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_policy_metadata(
      const std::string& value);
  std::string* _internal_mutable_group_policy_metadata();

  public:
  // .google.protobuf.Any decision_policy = 6 [json_name = "decisionPolicy", (.cosmos_proto.accepts_interface) = "cosmos.group.v1.DecisionPolicy"];
  bool has_decision_policy() const;
  void clear_decision_policy() ;
  const ::google::protobuf::Any& decision_policy() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_decision_policy();
  ::google::protobuf::Any* mutable_decision_policy();
  void set_allocated_decision_policy(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_decision_policy(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_decision_policy();

  private:
  const ::google::protobuf::Any& _internal_decision_policy() const;
  ::google::protobuf::Any* _internal_mutable_decision_policy();

  public:
  // bool group_policy_as_admin = 5 [json_name = "groupPolicyAsAdmin"];
  void clear_group_policy_as_admin() ;
  bool group_policy_as_admin() const;
  void set_group_policy_as_admin(bool value);

  private:
  bool _internal_group_policy_as_admin() const;
  void _internal_set_group_policy_as_admin(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgCreateGroupWithPolicy)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      89, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgCreateGroupWithPolicy& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::cosmos::group::v1::MemberRequest > members_;
    ::google::protobuf::internal::ArenaStringPtr admin_;
    ::google::protobuf::internal::ArenaStringPtr group_metadata_;
    ::google::protobuf::internal::ArenaStringPtr group_policy_metadata_;
    ::google::protobuf::Any* decision_policy_;
    bool group_policy_as_admin_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgCreateGroupPolicy final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgCreateGroupPolicy) */ {
 public:
  inline MsgCreateGroupPolicy() : MsgCreateGroupPolicy(nullptr) {}
  ~MsgCreateGroupPolicy() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgCreateGroupPolicy* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgCreateGroupPolicy));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgCreateGroupPolicy(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgCreateGroupPolicy(const MsgCreateGroupPolicy& from) : MsgCreateGroupPolicy(nullptr, from) {}
  inline MsgCreateGroupPolicy(MsgCreateGroupPolicy&& from) noexcept
      : MsgCreateGroupPolicy(nullptr, std::move(from)) {}
  inline MsgCreateGroupPolicy& operator=(const MsgCreateGroupPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCreateGroupPolicy& operator=(MsgCreateGroupPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgCreateGroupPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgCreateGroupPolicy* internal_default_instance() {
    return reinterpret_cast<const MsgCreateGroupPolicy*>(
        &_MsgCreateGroupPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(MsgCreateGroupPolicy& a, MsgCreateGroupPolicy& b) { a.Swap(&b); }
  inline void Swap(MsgCreateGroupPolicy* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCreateGroupPolicy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgCreateGroupPolicy* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgCreateGroupPolicy>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgCreateGroupPolicy& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgCreateGroupPolicy& from) { MsgCreateGroupPolicy::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgCreateGroupPolicy* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.MsgCreateGroupPolicy"; }

 protected:
  explicit MsgCreateGroupPolicy(::google::protobuf::Arena* arena);
  MsgCreateGroupPolicy(::google::protobuf::Arena* arena, const MsgCreateGroupPolicy& from);
  MsgCreateGroupPolicy(::google::protobuf::Arena* arena, MsgCreateGroupPolicy&& from) noexcept
      : MsgCreateGroupPolicy(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAdminFieldNumber = 1,
    kMetadataFieldNumber = 3,
    kDecisionPolicyFieldNumber = 4,
    kGroupIdFieldNumber = 2,
  };
  // string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_admin() ;
  const std::string& admin() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_admin(Arg_&& arg, Args_... args);
  std::string* mutable_admin();
  PROTOBUF_NODISCARD std::string* release_admin();
  void set_allocated_admin(std::string* value);

  private:
  const std::string& _internal_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin(
      const std::string& value);
  std::string* _internal_mutable_admin();

  public:
  // string metadata = 3 [json_name = "metadata"];
  void clear_metadata() ;
  const std::string& metadata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* value);

  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(
      const std::string& value);
  std::string* _internal_mutable_metadata();

  public:
  // .google.protobuf.Any decision_policy = 4 [json_name = "decisionPolicy", (.cosmos_proto.accepts_interface) = "cosmos.group.v1.DecisionPolicy"];
  bool has_decision_policy() const;
  void clear_decision_policy() ;
  const ::google::protobuf::Any& decision_policy() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_decision_policy();
  ::google::protobuf::Any* mutable_decision_policy();
  void set_allocated_decision_policy(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_decision_policy(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_decision_policy();

  private:
  const ::google::protobuf::Any& _internal_decision_policy() const;
  ::google::protobuf::Any* _internal_mutable_decision_policy();

  public:
  // uint64 group_id = 2 [json_name = "groupId"];
  void clear_group_id() ;
  ::uint64_t group_id() const;
  void set_group_id(::uint64_t value);

  private:
  ::uint64_t _internal_group_id() const;
  void _internal_set_group_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgCreateGroupPolicy)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      58, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgCreateGroupPolicy& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr admin_;
    ::google::protobuf::internal::ArenaStringPtr metadata_;
    ::google::protobuf::Any* decision_policy_;
    ::uint64_t group_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgCreateGroup final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgCreateGroup) */ {
 public:
  inline MsgCreateGroup() : MsgCreateGroup(nullptr) {}
  ~MsgCreateGroup() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MsgCreateGroup* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MsgCreateGroup));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MsgCreateGroup(
      ::google::protobuf::internal::ConstantInitialized);

  inline MsgCreateGroup(const MsgCreateGroup& from) : MsgCreateGroup(nullptr, from) {}
  inline MsgCreateGroup(MsgCreateGroup&& from) noexcept
      : MsgCreateGroup(nullptr, std::move(from)) {}
  inline MsgCreateGroup& operator=(const MsgCreateGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCreateGroup& operator=(MsgCreateGroup&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgCreateGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgCreateGroup* internal_default_instance() {
    return reinterpret_cast<const MsgCreateGroup*>(
        &_MsgCreateGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MsgCreateGroup& a, MsgCreateGroup& b) { a.Swap(&b); }
  inline void Swap(MsgCreateGroup* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCreateGroup* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgCreateGroup* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MsgCreateGroup>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MsgCreateGroup& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MsgCreateGroup& from) { MsgCreateGroup::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MsgCreateGroup* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.MsgCreateGroup"; }

 protected:
  explicit MsgCreateGroup(::google::protobuf::Arena* arena);
  MsgCreateGroup(::google::protobuf::Arena* arena, const MsgCreateGroup& from);
  MsgCreateGroup(::google::protobuf::Arena* arena, MsgCreateGroup&& from) noexcept
      : MsgCreateGroup(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMembersFieldNumber = 2,
    kAdminFieldNumber = 1,
    kMetadataFieldNumber = 3,
  };
  // repeated .cosmos.group.v1.MemberRequest members = 2 [json_name = "members", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int members_size() const;
  private:
  int _internal_members_size() const;

  public:
  void clear_members() ;
  ::cosmos::group::v1::MemberRequest* mutable_members(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::group::v1::MemberRequest>* mutable_members();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::group::v1::MemberRequest>& _internal_members() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::group::v1::MemberRequest>* _internal_mutable_members();
  public:
  const ::cosmos::group::v1::MemberRequest& members(int index) const;
  ::cosmos::group::v1::MemberRequest* add_members();
  const ::google::protobuf::RepeatedPtrField<::cosmos::group::v1::MemberRequest>& members() const;
  // string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_admin() ;
  const std::string& admin() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_admin(Arg_&& arg, Args_... args);
  std::string* mutable_admin();
  PROTOBUF_NODISCARD std::string* release_admin();
  void set_allocated_admin(std::string* value);

  private:
  const std::string& _internal_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin(
      const std::string& value);
  std::string* _internal_mutable_admin();

  public:
  // string metadata = 3 [json_name = "metadata"];
  void clear_metadata() ;
  const std::string& metadata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* value);

  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(
      const std::string& value);
  std::string* _internal_mutable_metadata();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgCreateGroup)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MsgCreateGroup& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::group::v1::MemberRequest > members_;
    ::google::protobuf::internal::ArenaStringPtr admin_;
    ::google::protobuf::internal::ArenaStringPtr metadata_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MsgCreateGroup

// string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgCreateGroup::clear_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.ClearToEmpty();
}
inline const std::string& MsgCreateGroup::admin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroup.admin)
  return _internal_admin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCreateGroup::set_admin(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgCreateGroup.admin)
}
inline std::string* MsgCreateGroup::mutable_admin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_admin();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgCreateGroup.admin)
  return _s;
}
inline const std::string& MsgCreateGroup::_internal_admin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.admin_.Get();
}
inline void MsgCreateGroup::_internal_set_admin(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.Set(value, GetArena());
}
inline std::string* MsgCreateGroup::_internal_mutable_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.admin_.Mutable( GetArena());
}
inline std::string* MsgCreateGroup::release_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgCreateGroup.admin)
  return _impl_.admin_.Release();
}
inline void MsgCreateGroup::set_allocated_admin(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.admin_.IsDefault()) {
    _impl_.admin_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgCreateGroup.admin)
}

// repeated .cosmos.group.v1.MemberRequest members = 2 [json_name = "members", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int MsgCreateGroup::_internal_members_size() const {
  return _internal_members().size();
}
inline int MsgCreateGroup::members_size() const {
  return _internal_members_size();
}
inline ::cosmos::group::v1::MemberRequest* MsgCreateGroup::mutable_members(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgCreateGroup.members)
  return _internal_mutable_members()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::group::v1::MemberRequest>* MsgCreateGroup::mutable_members()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.group.v1.MsgCreateGroup.members)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_members();
}
inline const ::cosmos::group::v1::MemberRequest& MsgCreateGroup::members(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroup.members)
  return _internal_members().Get(index);
}
inline ::cosmos::group::v1::MemberRequest* MsgCreateGroup::add_members() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::group::v1::MemberRequest* _add = _internal_mutable_members()->Add();
  // @@protoc_insertion_point(field_add:cosmos.group.v1.MsgCreateGroup.members)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::group::v1::MemberRequest>& MsgCreateGroup::members() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.group.v1.MsgCreateGroup.members)
  return _internal_members();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::group::v1::MemberRequest>&
MsgCreateGroup::_internal_members() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.members_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::group::v1::MemberRequest>*
MsgCreateGroup::_internal_mutable_members() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.members_;
}

// string metadata = 3 [json_name = "metadata"];
inline void MsgCreateGroup::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& MsgCreateGroup::metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroup.metadata)
  return _internal_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCreateGroup::set_metadata(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgCreateGroup.metadata)
}
inline std::string* MsgCreateGroup::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgCreateGroup.metadata)
  return _s;
}
inline const std::string& MsgCreateGroup::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.Get();
}
inline void MsgCreateGroup::_internal_set_metadata(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Set(value, GetArena());
}
inline std::string* MsgCreateGroup::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.Mutable( GetArena());
}
inline std::string* MsgCreateGroup::release_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgCreateGroup.metadata)
  return _impl_.metadata_.Release();
}
inline void MsgCreateGroup::set_allocated_metadata(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgCreateGroup.metadata)
}

// -------------------------------------------------------------------

// MsgCreateGroupResponse

// uint64 group_id = 1 [json_name = "groupId"];
inline void MsgCreateGroupResponse::clear_group_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_id_ = ::uint64_t{0u};
}
inline ::uint64_t MsgCreateGroupResponse::group_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroupResponse.group_id)
  return _internal_group_id();
}
inline void MsgCreateGroupResponse::set_group_id(::uint64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgCreateGroupResponse.group_id)
}
inline ::uint64_t MsgCreateGroupResponse::_internal_group_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_id_;
}
inline void MsgCreateGroupResponse::_internal_set_group_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_id_ = value;
}

// -------------------------------------------------------------------

// MsgUpdateGroupMembers

// string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateGroupMembers::clear_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.ClearToEmpty();
}
inline const std::string& MsgUpdateGroupMembers::admin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupMembers.admin)
  return _internal_admin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateGroupMembers::set_admin(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupMembers.admin)
}
inline std::string* MsgUpdateGroupMembers::mutable_admin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_admin();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupMembers.admin)
  return _s;
}
inline const std::string& MsgUpdateGroupMembers::_internal_admin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.admin_.Get();
}
inline void MsgUpdateGroupMembers::_internal_set_admin(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.Set(value, GetArena());
}
inline std::string* MsgUpdateGroupMembers::_internal_mutable_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.admin_.Mutable( GetArena());
}
inline std::string* MsgUpdateGroupMembers::release_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgUpdateGroupMembers.admin)
  return _impl_.admin_.Release();
}
inline void MsgUpdateGroupMembers::set_allocated_admin(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.admin_.IsDefault()) {
    _impl_.admin_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgUpdateGroupMembers.admin)
}

// uint64 group_id = 2 [json_name = "groupId"];
inline void MsgUpdateGroupMembers::clear_group_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_id_ = ::uint64_t{0u};
}
inline ::uint64_t MsgUpdateGroupMembers::group_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupMembers.group_id)
  return _internal_group_id();
}
inline void MsgUpdateGroupMembers::set_group_id(::uint64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupMembers.group_id)
}
inline ::uint64_t MsgUpdateGroupMembers::_internal_group_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_id_;
}
inline void MsgUpdateGroupMembers::_internal_set_group_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_id_ = value;
}

// repeated .cosmos.group.v1.MemberRequest member_updates = 3 [json_name = "memberUpdates", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int MsgUpdateGroupMembers::_internal_member_updates_size() const {
  return _internal_member_updates().size();
}
inline int MsgUpdateGroupMembers::member_updates_size() const {
  return _internal_member_updates_size();
}
inline ::cosmos::group::v1::MemberRequest* MsgUpdateGroupMembers::mutable_member_updates(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupMembers.member_updates)
  return _internal_mutable_member_updates()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::group::v1::MemberRequest>* MsgUpdateGroupMembers::mutable_member_updates()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.group.v1.MsgUpdateGroupMembers.member_updates)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_member_updates();
}
inline const ::cosmos::group::v1::MemberRequest& MsgUpdateGroupMembers::member_updates(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupMembers.member_updates)
  return _internal_member_updates().Get(index);
}
inline ::cosmos::group::v1::MemberRequest* MsgUpdateGroupMembers::add_member_updates() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::group::v1::MemberRequest* _add = _internal_mutable_member_updates()->Add();
  // @@protoc_insertion_point(field_add:cosmos.group.v1.MsgUpdateGroupMembers.member_updates)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::group::v1::MemberRequest>& MsgUpdateGroupMembers::member_updates() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.group.v1.MsgUpdateGroupMembers.member_updates)
  return _internal_member_updates();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::group::v1::MemberRequest>&
MsgUpdateGroupMembers::_internal_member_updates() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.member_updates_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::group::v1::MemberRequest>*
MsgUpdateGroupMembers::_internal_mutable_member_updates() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.member_updates_;
}

// -------------------------------------------------------------------

// MsgUpdateGroupMembersResponse

// -------------------------------------------------------------------

// MsgUpdateGroupAdmin

// string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateGroupAdmin::clear_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.ClearToEmpty();
}
inline const std::string& MsgUpdateGroupAdmin::admin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupAdmin.admin)
  return _internal_admin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateGroupAdmin::set_admin(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupAdmin.admin)
}
inline std::string* MsgUpdateGroupAdmin::mutable_admin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_admin();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupAdmin.admin)
  return _s;
}
inline const std::string& MsgUpdateGroupAdmin::_internal_admin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.admin_.Get();
}
inline void MsgUpdateGroupAdmin::_internal_set_admin(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.Set(value, GetArena());
}
inline std::string* MsgUpdateGroupAdmin::_internal_mutable_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.admin_.Mutable( GetArena());
}
inline std::string* MsgUpdateGroupAdmin::release_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgUpdateGroupAdmin.admin)
  return _impl_.admin_.Release();
}
inline void MsgUpdateGroupAdmin::set_allocated_admin(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.admin_.IsDefault()) {
    _impl_.admin_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgUpdateGroupAdmin.admin)
}

// uint64 group_id = 2 [json_name = "groupId"];
inline void MsgUpdateGroupAdmin::clear_group_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_id_ = ::uint64_t{0u};
}
inline ::uint64_t MsgUpdateGroupAdmin::group_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupAdmin.group_id)
  return _internal_group_id();
}
inline void MsgUpdateGroupAdmin::set_group_id(::uint64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupAdmin.group_id)
}
inline ::uint64_t MsgUpdateGroupAdmin::_internal_group_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_id_;
}
inline void MsgUpdateGroupAdmin::_internal_set_group_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_id_ = value;
}

// string new_admin = 3 [json_name = "newAdmin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateGroupAdmin::clear_new_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_admin_.ClearToEmpty();
}
inline const std::string& MsgUpdateGroupAdmin::new_admin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupAdmin.new_admin)
  return _internal_new_admin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateGroupAdmin::set_new_admin(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_admin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupAdmin.new_admin)
}
inline std::string* MsgUpdateGroupAdmin::mutable_new_admin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_new_admin();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupAdmin.new_admin)
  return _s;
}
inline const std::string& MsgUpdateGroupAdmin::_internal_new_admin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_admin_.Get();
}
inline void MsgUpdateGroupAdmin::_internal_set_new_admin(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_admin_.Set(value, GetArena());
}
inline std::string* MsgUpdateGroupAdmin::_internal_mutable_new_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.new_admin_.Mutable( GetArena());
}
inline std::string* MsgUpdateGroupAdmin::release_new_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgUpdateGroupAdmin.new_admin)
  return _impl_.new_admin_.Release();
}
inline void MsgUpdateGroupAdmin::set_allocated_new_admin(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_admin_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.new_admin_.IsDefault()) {
    _impl_.new_admin_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgUpdateGroupAdmin.new_admin)
}

// -------------------------------------------------------------------

// MsgUpdateGroupAdminResponse

// -------------------------------------------------------------------

// MsgUpdateGroupMetadata

// string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateGroupMetadata::clear_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.ClearToEmpty();
}
inline const std::string& MsgUpdateGroupMetadata::admin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupMetadata.admin)
  return _internal_admin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateGroupMetadata::set_admin(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupMetadata.admin)
}
inline std::string* MsgUpdateGroupMetadata::mutable_admin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_admin();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupMetadata.admin)
  return _s;
}
inline const std::string& MsgUpdateGroupMetadata::_internal_admin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.admin_.Get();
}
inline void MsgUpdateGroupMetadata::_internal_set_admin(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.Set(value, GetArena());
}
inline std::string* MsgUpdateGroupMetadata::_internal_mutable_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.admin_.Mutable( GetArena());
}
inline std::string* MsgUpdateGroupMetadata::release_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgUpdateGroupMetadata.admin)
  return _impl_.admin_.Release();
}
inline void MsgUpdateGroupMetadata::set_allocated_admin(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.admin_.IsDefault()) {
    _impl_.admin_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgUpdateGroupMetadata.admin)
}

// uint64 group_id = 2 [json_name = "groupId"];
inline void MsgUpdateGroupMetadata::clear_group_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_id_ = ::uint64_t{0u};
}
inline ::uint64_t MsgUpdateGroupMetadata::group_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupMetadata.group_id)
  return _internal_group_id();
}
inline void MsgUpdateGroupMetadata::set_group_id(::uint64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupMetadata.group_id)
}
inline ::uint64_t MsgUpdateGroupMetadata::_internal_group_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_id_;
}
inline void MsgUpdateGroupMetadata::_internal_set_group_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_id_ = value;
}

// string metadata = 3 [json_name = "metadata"];
inline void MsgUpdateGroupMetadata::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& MsgUpdateGroupMetadata::metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupMetadata.metadata)
  return _internal_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateGroupMetadata::set_metadata(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupMetadata.metadata)
}
inline std::string* MsgUpdateGroupMetadata::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupMetadata.metadata)
  return _s;
}
inline const std::string& MsgUpdateGroupMetadata::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.Get();
}
inline void MsgUpdateGroupMetadata::_internal_set_metadata(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Set(value, GetArena());
}
inline std::string* MsgUpdateGroupMetadata::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.Mutable( GetArena());
}
inline std::string* MsgUpdateGroupMetadata::release_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgUpdateGroupMetadata.metadata)
  return _impl_.metadata_.Release();
}
inline void MsgUpdateGroupMetadata::set_allocated_metadata(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgUpdateGroupMetadata.metadata)
}

// -------------------------------------------------------------------

// MsgUpdateGroupMetadataResponse

// -------------------------------------------------------------------

// MsgCreateGroupPolicy

// string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgCreateGroupPolicy::clear_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.ClearToEmpty();
}
inline const std::string& MsgCreateGroupPolicy::admin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroupPolicy.admin)
  return _internal_admin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCreateGroupPolicy::set_admin(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgCreateGroupPolicy.admin)
}
inline std::string* MsgCreateGroupPolicy::mutable_admin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_admin();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgCreateGroupPolicy.admin)
  return _s;
}
inline const std::string& MsgCreateGroupPolicy::_internal_admin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.admin_.Get();
}
inline void MsgCreateGroupPolicy::_internal_set_admin(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.Set(value, GetArena());
}
inline std::string* MsgCreateGroupPolicy::_internal_mutable_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.admin_.Mutable( GetArena());
}
inline std::string* MsgCreateGroupPolicy::release_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgCreateGroupPolicy.admin)
  return _impl_.admin_.Release();
}
inline void MsgCreateGroupPolicy::set_allocated_admin(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.admin_.IsDefault()) {
    _impl_.admin_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgCreateGroupPolicy.admin)
}

// uint64 group_id = 2 [json_name = "groupId"];
inline void MsgCreateGroupPolicy::clear_group_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_id_ = ::uint64_t{0u};
}
inline ::uint64_t MsgCreateGroupPolicy::group_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroupPolicy.group_id)
  return _internal_group_id();
}
inline void MsgCreateGroupPolicy::set_group_id(::uint64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgCreateGroupPolicy.group_id)
}
inline ::uint64_t MsgCreateGroupPolicy::_internal_group_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_id_;
}
inline void MsgCreateGroupPolicy::_internal_set_group_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_id_ = value;
}

// string metadata = 3 [json_name = "metadata"];
inline void MsgCreateGroupPolicy::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& MsgCreateGroupPolicy::metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroupPolicy.metadata)
  return _internal_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCreateGroupPolicy::set_metadata(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgCreateGroupPolicy.metadata)
}
inline std::string* MsgCreateGroupPolicy::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgCreateGroupPolicy.metadata)
  return _s;
}
inline const std::string& MsgCreateGroupPolicy::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.Get();
}
inline void MsgCreateGroupPolicy::_internal_set_metadata(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Set(value, GetArena());
}
inline std::string* MsgCreateGroupPolicy::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.Mutable( GetArena());
}
inline std::string* MsgCreateGroupPolicy::release_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgCreateGroupPolicy.metadata)
  return _impl_.metadata_.Release();
}
inline void MsgCreateGroupPolicy::set_allocated_metadata(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgCreateGroupPolicy.metadata)
}

// .google.protobuf.Any decision_policy = 4 [json_name = "decisionPolicy", (.cosmos_proto.accepts_interface) = "cosmos.group.v1.DecisionPolicy"];
inline bool MsgCreateGroupPolicy::has_decision_policy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.decision_policy_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& MsgCreateGroupPolicy::_internal_decision_policy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Any* p = _impl_.decision_policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& MsgCreateGroupPolicy::decision_policy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroupPolicy.decision_policy)
  return _internal_decision_policy();
}
inline void MsgCreateGroupPolicy::unsafe_arena_set_allocated_decision_policy(::google::protobuf::Any* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.decision_policy_);
  }
  _impl_.decision_policy_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.MsgCreateGroupPolicy.decision_policy)
}
inline ::google::protobuf::Any* MsgCreateGroupPolicy::release_decision_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* released = _impl_.decision_policy_;
  _impl_.decision_policy_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Any* MsgCreateGroupPolicy::unsafe_arena_release_decision_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgCreateGroupPolicy.decision_policy)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* temp = _impl_.decision_policy_;
  _impl_.decision_policy_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* MsgCreateGroupPolicy::_internal_mutable_decision_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.decision_policy_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Any>(GetArena());
    _impl_.decision_policy_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.decision_policy_;
}
inline ::google::protobuf::Any* MsgCreateGroupPolicy::mutable_decision_policy() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Any* _msg = _internal_mutable_decision_policy();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgCreateGroupPolicy.decision_policy)
  return _msg;
}
inline void MsgCreateGroupPolicy::set_allocated_decision_policy(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.decision_policy_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.decision_policy_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgCreateGroupPolicy.decision_policy)
}

// -------------------------------------------------------------------

// MsgCreateGroupPolicyResponse

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgCreateGroupPolicyResponse::clear_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.ClearToEmpty();
}
inline const std::string& MsgCreateGroupPolicyResponse::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroupPolicyResponse.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCreateGroupPolicyResponse::set_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgCreateGroupPolicyResponse.address)
}
inline std::string* MsgCreateGroupPolicyResponse::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgCreateGroupPolicyResponse.address)
  return _s;
}
inline const std::string& MsgCreateGroupPolicyResponse::_internal_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.address_.Get();
}
inline void MsgCreateGroupPolicyResponse::_internal_set_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(value, GetArena());
}
inline std::string* MsgCreateGroupPolicyResponse::_internal_mutable_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.address_.Mutable( GetArena());
}
inline std::string* MsgCreateGroupPolicyResponse::release_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgCreateGroupPolicyResponse.address)
  return _impl_.address_.Release();
}
inline void MsgCreateGroupPolicyResponse::set_allocated_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgCreateGroupPolicyResponse.address)
}

// -------------------------------------------------------------------

// MsgUpdateGroupPolicyAdmin

// string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateGroupPolicyAdmin::clear_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.ClearToEmpty();
}
inline const std::string& MsgUpdateGroupPolicyAdmin::admin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.admin)
  return _internal_admin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateGroupPolicyAdmin::set_admin(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.admin)
}
inline std::string* MsgUpdateGroupPolicyAdmin::mutable_admin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_admin();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.admin)
  return _s;
}
inline const std::string& MsgUpdateGroupPolicyAdmin::_internal_admin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.admin_.Get();
}
inline void MsgUpdateGroupPolicyAdmin::_internal_set_admin(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.Set(value, GetArena());
}
inline std::string* MsgUpdateGroupPolicyAdmin::_internal_mutable_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.admin_.Mutable( GetArena());
}
inline std::string* MsgUpdateGroupPolicyAdmin::release_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.admin)
  return _impl_.admin_.Release();
}
inline void MsgUpdateGroupPolicyAdmin::set_allocated_admin(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.admin_.IsDefault()) {
    _impl_.admin_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.admin)
}

// string group_policy_address = 2 [json_name = "groupPolicyAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateGroupPolicyAdmin::clear_group_policy_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_address_.ClearToEmpty();
}
inline const std::string& MsgUpdateGroupPolicyAdmin::group_policy_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.group_policy_address)
  return _internal_group_policy_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateGroupPolicyAdmin::set_group_policy_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.group_policy_address)
}
inline std::string* MsgUpdateGroupPolicyAdmin::mutable_group_policy_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_group_policy_address();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.group_policy_address)
  return _s;
}
inline const std::string& MsgUpdateGroupPolicyAdmin::_internal_group_policy_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_policy_address_.Get();
}
inline void MsgUpdateGroupPolicyAdmin::_internal_set_group_policy_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_address_.Set(value, GetArena());
}
inline std::string* MsgUpdateGroupPolicyAdmin::_internal_mutable_group_policy_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.group_policy_address_.Mutable( GetArena());
}
inline std::string* MsgUpdateGroupPolicyAdmin::release_group_policy_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.group_policy_address)
  return _impl_.group_policy_address_.Release();
}
inline void MsgUpdateGroupPolicyAdmin::set_allocated_group_policy_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.group_policy_address_.IsDefault()) {
    _impl_.group_policy_address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.group_policy_address)
}

// string new_admin = 3 [json_name = "newAdmin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateGroupPolicyAdmin::clear_new_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_admin_.ClearToEmpty();
}
inline const std::string& MsgUpdateGroupPolicyAdmin::new_admin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.new_admin)
  return _internal_new_admin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateGroupPolicyAdmin::set_new_admin(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_admin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.new_admin)
}
inline std::string* MsgUpdateGroupPolicyAdmin::mutable_new_admin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_new_admin();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.new_admin)
  return _s;
}
inline const std::string& MsgUpdateGroupPolicyAdmin::_internal_new_admin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_admin_.Get();
}
inline void MsgUpdateGroupPolicyAdmin::_internal_set_new_admin(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_admin_.Set(value, GetArena());
}
inline std::string* MsgUpdateGroupPolicyAdmin::_internal_mutable_new_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.new_admin_.Mutable( GetArena());
}
inline std::string* MsgUpdateGroupPolicyAdmin::release_new_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.new_admin)
  return _impl_.new_admin_.Release();
}
inline void MsgUpdateGroupPolicyAdmin::set_allocated_new_admin(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_admin_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.new_admin_.IsDefault()) {
    _impl_.new_admin_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.new_admin)
}

// -------------------------------------------------------------------

// MsgUpdateGroupPolicyAdminResponse

// -------------------------------------------------------------------

// MsgCreateGroupWithPolicy

// string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgCreateGroupWithPolicy::clear_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.ClearToEmpty();
}
inline const std::string& MsgCreateGroupWithPolicy::admin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroupWithPolicy.admin)
  return _internal_admin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCreateGroupWithPolicy::set_admin(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgCreateGroupWithPolicy.admin)
}
inline std::string* MsgCreateGroupWithPolicy::mutable_admin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_admin();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgCreateGroupWithPolicy.admin)
  return _s;
}
inline const std::string& MsgCreateGroupWithPolicy::_internal_admin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.admin_.Get();
}
inline void MsgCreateGroupWithPolicy::_internal_set_admin(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.Set(value, GetArena());
}
inline std::string* MsgCreateGroupWithPolicy::_internal_mutable_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.admin_.Mutable( GetArena());
}
inline std::string* MsgCreateGroupWithPolicy::release_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgCreateGroupWithPolicy.admin)
  return _impl_.admin_.Release();
}
inline void MsgCreateGroupWithPolicy::set_allocated_admin(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.admin_.IsDefault()) {
    _impl_.admin_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgCreateGroupWithPolicy.admin)
}

// repeated .cosmos.group.v1.MemberRequest members = 2 [json_name = "members", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int MsgCreateGroupWithPolicy::_internal_members_size() const {
  return _internal_members().size();
}
inline int MsgCreateGroupWithPolicy::members_size() const {
  return _internal_members_size();
}
inline ::cosmos::group::v1::MemberRequest* MsgCreateGroupWithPolicy::mutable_members(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgCreateGroupWithPolicy.members)
  return _internal_mutable_members()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::group::v1::MemberRequest>* MsgCreateGroupWithPolicy::mutable_members()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.group.v1.MsgCreateGroupWithPolicy.members)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_members();
}
inline const ::cosmos::group::v1::MemberRequest& MsgCreateGroupWithPolicy::members(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroupWithPolicy.members)
  return _internal_members().Get(index);
}
inline ::cosmos::group::v1::MemberRequest* MsgCreateGroupWithPolicy::add_members() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::group::v1::MemberRequest* _add = _internal_mutable_members()->Add();
  // @@protoc_insertion_point(field_add:cosmos.group.v1.MsgCreateGroupWithPolicy.members)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::group::v1::MemberRequest>& MsgCreateGroupWithPolicy::members() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.group.v1.MsgCreateGroupWithPolicy.members)
  return _internal_members();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::group::v1::MemberRequest>&
MsgCreateGroupWithPolicy::_internal_members() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.members_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::group::v1::MemberRequest>*
MsgCreateGroupWithPolicy::_internal_mutable_members() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.members_;
}

// string group_metadata = 3 [json_name = "groupMetadata"];
inline void MsgCreateGroupWithPolicy::clear_group_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_metadata_.ClearToEmpty();
}
inline const std::string& MsgCreateGroupWithPolicy::group_metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroupWithPolicy.group_metadata)
  return _internal_group_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCreateGroupWithPolicy::set_group_metadata(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgCreateGroupWithPolicy.group_metadata)
}
inline std::string* MsgCreateGroupWithPolicy::mutable_group_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_group_metadata();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgCreateGroupWithPolicy.group_metadata)
  return _s;
}
inline const std::string& MsgCreateGroupWithPolicy::_internal_group_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_metadata_.Get();
}
inline void MsgCreateGroupWithPolicy::_internal_set_group_metadata(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_metadata_.Set(value, GetArena());
}
inline std::string* MsgCreateGroupWithPolicy::_internal_mutable_group_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.group_metadata_.Mutable( GetArena());
}
inline std::string* MsgCreateGroupWithPolicy::release_group_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgCreateGroupWithPolicy.group_metadata)
  return _impl_.group_metadata_.Release();
}
inline void MsgCreateGroupWithPolicy::set_allocated_group_metadata(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_metadata_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.group_metadata_.IsDefault()) {
    _impl_.group_metadata_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgCreateGroupWithPolicy.group_metadata)
}

// string group_policy_metadata = 4 [json_name = "groupPolicyMetadata"];
inline void MsgCreateGroupWithPolicy::clear_group_policy_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_metadata_.ClearToEmpty();
}
inline const std::string& MsgCreateGroupWithPolicy::group_policy_metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroupWithPolicy.group_policy_metadata)
  return _internal_group_policy_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCreateGroupWithPolicy::set_group_policy_metadata(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgCreateGroupWithPolicy.group_policy_metadata)
}
inline std::string* MsgCreateGroupWithPolicy::mutable_group_policy_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_group_policy_metadata();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgCreateGroupWithPolicy.group_policy_metadata)
  return _s;
}
inline const std::string& MsgCreateGroupWithPolicy::_internal_group_policy_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_policy_metadata_.Get();
}
inline void MsgCreateGroupWithPolicy::_internal_set_group_policy_metadata(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_metadata_.Set(value, GetArena());
}
inline std::string* MsgCreateGroupWithPolicy::_internal_mutable_group_policy_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.group_policy_metadata_.Mutable( GetArena());
}
inline std::string* MsgCreateGroupWithPolicy::release_group_policy_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgCreateGroupWithPolicy.group_policy_metadata)
  return _impl_.group_policy_metadata_.Release();
}
inline void MsgCreateGroupWithPolicy::set_allocated_group_policy_metadata(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_metadata_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.group_policy_metadata_.IsDefault()) {
    _impl_.group_policy_metadata_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgCreateGroupWithPolicy.group_policy_metadata)
}

// bool group_policy_as_admin = 5 [json_name = "groupPolicyAsAdmin"];
inline void MsgCreateGroupWithPolicy::clear_group_policy_as_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_as_admin_ = false;
}
inline bool MsgCreateGroupWithPolicy::group_policy_as_admin() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroupWithPolicy.group_policy_as_admin)
  return _internal_group_policy_as_admin();
}
inline void MsgCreateGroupWithPolicy::set_group_policy_as_admin(bool value) {
  _internal_set_group_policy_as_admin(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgCreateGroupWithPolicy.group_policy_as_admin)
}
inline bool MsgCreateGroupWithPolicy::_internal_group_policy_as_admin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_policy_as_admin_;
}
inline void MsgCreateGroupWithPolicy::_internal_set_group_policy_as_admin(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_as_admin_ = value;
}

// .google.protobuf.Any decision_policy = 6 [json_name = "decisionPolicy", (.cosmos_proto.accepts_interface) = "cosmos.group.v1.DecisionPolicy"];
inline bool MsgCreateGroupWithPolicy::has_decision_policy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.decision_policy_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& MsgCreateGroupWithPolicy::_internal_decision_policy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Any* p = _impl_.decision_policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& MsgCreateGroupWithPolicy::decision_policy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroupWithPolicy.decision_policy)
  return _internal_decision_policy();
}
inline void MsgCreateGroupWithPolicy::unsafe_arena_set_allocated_decision_policy(::google::protobuf::Any* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.decision_policy_);
  }
  _impl_.decision_policy_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.MsgCreateGroupWithPolicy.decision_policy)
}
inline ::google::protobuf::Any* MsgCreateGroupWithPolicy::release_decision_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* released = _impl_.decision_policy_;
  _impl_.decision_policy_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Any* MsgCreateGroupWithPolicy::unsafe_arena_release_decision_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgCreateGroupWithPolicy.decision_policy)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* temp = _impl_.decision_policy_;
  _impl_.decision_policy_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* MsgCreateGroupWithPolicy::_internal_mutable_decision_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.decision_policy_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Any>(GetArena());
    _impl_.decision_policy_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.decision_policy_;
}
inline ::google::protobuf::Any* MsgCreateGroupWithPolicy::mutable_decision_policy() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Any* _msg = _internal_mutable_decision_policy();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgCreateGroupWithPolicy.decision_policy)
  return _msg;
}
inline void MsgCreateGroupWithPolicy::set_allocated_decision_policy(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.decision_policy_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.decision_policy_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgCreateGroupWithPolicy.decision_policy)
}

// -------------------------------------------------------------------

// MsgCreateGroupWithPolicyResponse

// uint64 group_id = 1 [json_name = "groupId"];
inline void MsgCreateGroupWithPolicyResponse::clear_group_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_id_ = ::uint64_t{0u};
}
inline ::uint64_t MsgCreateGroupWithPolicyResponse::group_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroupWithPolicyResponse.group_id)
  return _internal_group_id();
}
inline void MsgCreateGroupWithPolicyResponse::set_group_id(::uint64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgCreateGroupWithPolicyResponse.group_id)
}
inline ::uint64_t MsgCreateGroupWithPolicyResponse::_internal_group_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_id_;
}
inline void MsgCreateGroupWithPolicyResponse::_internal_set_group_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_id_ = value;
}

// string group_policy_address = 2 [json_name = "groupPolicyAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgCreateGroupWithPolicyResponse::clear_group_policy_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_address_.ClearToEmpty();
}
inline const std::string& MsgCreateGroupWithPolicyResponse::group_policy_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroupWithPolicyResponse.group_policy_address)
  return _internal_group_policy_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCreateGroupWithPolicyResponse::set_group_policy_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgCreateGroupWithPolicyResponse.group_policy_address)
}
inline std::string* MsgCreateGroupWithPolicyResponse::mutable_group_policy_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_group_policy_address();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgCreateGroupWithPolicyResponse.group_policy_address)
  return _s;
}
inline const std::string& MsgCreateGroupWithPolicyResponse::_internal_group_policy_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_policy_address_.Get();
}
inline void MsgCreateGroupWithPolicyResponse::_internal_set_group_policy_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_address_.Set(value, GetArena());
}
inline std::string* MsgCreateGroupWithPolicyResponse::_internal_mutable_group_policy_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.group_policy_address_.Mutable( GetArena());
}
inline std::string* MsgCreateGroupWithPolicyResponse::release_group_policy_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgCreateGroupWithPolicyResponse.group_policy_address)
  return _impl_.group_policy_address_.Release();
}
inline void MsgCreateGroupWithPolicyResponse::set_allocated_group_policy_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.group_policy_address_.IsDefault()) {
    _impl_.group_policy_address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgCreateGroupWithPolicyResponse.group_policy_address)
}

// -------------------------------------------------------------------

// MsgUpdateGroupPolicyDecisionPolicy

// string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateGroupPolicyDecisionPolicy::clear_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.ClearToEmpty();
}
inline const std::string& MsgUpdateGroupPolicyDecisionPolicy::admin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.admin)
  return _internal_admin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateGroupPolicyDecisionPolicy::set_admin(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.admin)
}
inline std::string* MsgUpdateGroupPolicyDecisionPolicy::mutable_admin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_admin();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.admin)
  return _s;
}
inline const std::string& MsgUpdateGroupPolicyDecisionPolicy::_internal_admin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.admin_.Get();
}
inline void MsgUpdateGroupPolicyDecisionPolicy::_internal_set_admin(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.Set(value, GetArena());
}
inline std::string* MsgUpdateGroupPolicyDecisionPolicy::_internal_mutable_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.admin_.Mutable( GetArena());
}
inline std::string* MsgUpdateGroupPolicyDecisionPolicy::release_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.admin)
  return _impl_.admin_.Release();
}
inline void MsgUpdateGroupPolicyDecisionPolicy::set_allocated_admin(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.admin_.IsDefault()) {
    _impl_.admin_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.admin)
}

// string group_policy_address = 2 [json_name = "groupPolicyAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateGroupPolicyDecisionPolicy::clear_group_policy_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_address_.ClearToEmpty();
}
inline const std::string& MsgUpdateGroupPolicyDecisionPolicy::group_policy_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.group_policy_address)
  return _internal_group_policy_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateGroupPolicyDecisionPolicy::set_group_policy_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.group_policy_address)
}
inline std::string* MsgUpdateGroupPolicyDecisionPolicy::mutable_group_policy_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_group_policy_address();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.group_policy_address)
  return _s;
}
inline const std::string& MsgUpdateGroupPolicyDecisionPolicy::_internal_group_policy_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_policy_address_.Get();
}
inline void MsgUpdateGroupPolicyDecisionPolicy::_internal_set_group_policy_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_address_.Set(value, GetArena());
}
inline std::string* MsgUpdateGroupPolicyDecisionPolicy::_internal_mutable_group_policy_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.group_policy_address_.Mutable( GetArena());
}
inline std::string* MsgUpdateGroupPolicyDecisionPolicy::release_group_policy_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.group_policy_address)
  return _impl_.group_policy_address_.Release();
}
inline void MsgUpdateGroupPolicyDecisionPolicy::set_allocated_group_policy_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.group_policy_address_.IsDefault()) {
    _impl_.group_policy_address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.group_policy_address)
}

// .google.protobuf.Any decision_policy = 3 [json_name = "decisionPolicy", (.cosmos_proto.accepts_interface) = "cosmos.group.v1.DecisionPolicy"];
inline bool MsgUpdateGroupPolicyDecisionPolicy::has_decision_policy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.decision_policy_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& MsgUpdateGroupPolicyDecisionPolicy::_internal_decision_policy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Any* p = _impl_.decision_policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& MsgUpdateGroupPolicyDecisionPolicy::decision_policy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.decision_policy)
  return _internal_decision_policy();
}
inline void MsgUpdateGroupPolicyDecisionPolicy::unsafe_arena_set_allocated_decision_policy(::google::protobuf::Any* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.decision_policy_);
  }
  _impl_.decision_policy_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.decision_policy)
}
inline ::google::protobuf::Any* MsgUpdateGroupPolicyDecisionPolicy::release_decision_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* released = _impl_.decision_policy_;
  _impl_.decision_policy_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Any* MsgUpdateGroupPolicyDecisionPolicy::unsafe_arena_release_decision_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.decision_policy)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* temp = _impl_.decision_policy_;
  _impl_.decision_policy_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* MsgUpdateGroupPolicyDecisionPolicy::_internal_mutable_decision_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.decision_policy_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Any>(GetArena());
    _impl_.decision_policy_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.decision_policy_;
}
inline ::google::protobuf::Any* MsgUpdateGroupPolicyDecisionPolicy::mutable_decision_policy() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Any* _msg = _internal_mutable_decision_policy();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.decision_policy)
  return _msg;
}
inline void MsgUpdateGroupPolicyDecisionPolicy::set_allocated_decision_policy(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.decision_policy_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.decision_policy_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.decision_policy)
}

// -------------------------------------------------------------------

// MsgUpdateGroupPolicyDecisionPolicyResponse

// -------------------------------------------------------------------

// MsgUpdateGroupPolicyMetadata

// string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateGroupPolicyMetadata::clear_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.ClearToEmpty();
}
inline const std::string& MsgUpdateGroupPolicyMetadata::admin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.admin)
  return _internal_admin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateGroupPolicyMetadata::set_admin(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.admin)
}
inline std::string* MsgUpdateGroupPolicyMetadata::mutable_admin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_admin();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.admin)
  return _s;
}
inline const std::string& MsgUpdateGroupPolicyMetadata::_internal_admin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.admin_.Get();
}
inline void MsgUpdateGroupPolicyMetadata::_internal_set_admin(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.Set(value, GetArena());
}
inline std::string* MsgUpdateGroupPolicyMetadata::_internal_mutable_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.admin_.Mutable( GetArena());
}
inline std::string* MsgUpdateGroupPolicyMetadata::release_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.admin)
  return _impl_.admin_.Release();
}
inline void MsgUpdateGroupPolicyMetadata::set_allocated_admin(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.admin_.IsDefault()) {
    _impl_.admin_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.admin)
}

// string group_policy_address = 2 [json_name = "groupPolicyAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateGroupPolicyMetadata::clear_group_policy_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_address_.ClearToEmpty();
}
inline const std::string& MsgUpdateGroupPolicyMetadata::group_policy_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.group_policy_address)
  return _internal_group_policy_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateGroupPolicyMetadata::set_group_policy_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.group_policy_address)
}
inline std::string* MsgUpdateGroupPolicyMetadata::mutable_group_policy_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_group_policy_address();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.group_policy_address)
  return _s;
}
inline const std::string& MsgUpdateGroupPolicyMetadata::_internal_group_policy_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_policy_address_.Get();
}
inline void MsgUpdateGroupPolicyMetadata::_internal_set_group_policy_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_address_.Set(value, GetArena());
}
inline std::string* MsgUpdateGroupPolicyMetadata::_internal_mutable_group_policy_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.group_policy_address_.Mutable( GetArena());
}
inline std::string* MsgUpdateGroupPolicyMetadata::release_group_policy_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.group_policy_address)
  return _impl_.group_policy_address_.Release();
}
inline void MsgUpdateGroupPolicyMetadata::set_allocated_group_policy_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.group_policy_address_.IsDefault()) {
    _impl_.group_policy_address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.group_policy_address)
}

// string metadata = 3 [json_name = "metadata"];
inline void MsgUpdateGroupPolicyMetadata::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& MsgUpdateGroupPolicyMetadata::metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.metadata)
  return _internal_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateGroupPolicyMetadata::set_metadata(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.metadata)
}
inline std::string* MsgUpdateGroupPolicyMetadata::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.metadata)
  return _s;
}
inline const std::string& MsgUpdateGroupPolicyMetadata::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.Get();
}
inline void MsgUpdateGroupPolicyMetadata::_internal_set_metadata(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Set(value, GetArena());
}
inline std::string* MsgUpdateGroupPolicyMetadata::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.Mutable( GetArena());
}
inline std::string* MsgUpdateGroupPolicyMetadata::release_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.metadata)
  return _impl_.metadata_.Release();
}
inline void MsgUpdateGroupPolicyMetadata::set_allocated_metadata(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.metadata)
}

// -------------------------------------------------------------------

// MsgUpdateGroupPolicyMetadataResponse

// -------------------------------------------------------------------

// MsgSubmitProposal

// string group_policy_address = 1 [json_name = "groupPolicyAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgSubmitProposal::clear_group_policy_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_address_.ClearToEmpty();
}
inline const std::string& MsgSubmitProposal::group_policy_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgSubmitProposal.group_policy_address)
  return _internal_group_policy_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgSubmitProposal::set_group_policy_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgSubmitProposal.group_policy_address)
}
inline std::string* MsgSubmitProposal::mutable_group_policy_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_group_policy_address();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgSubmitProposal.group_policy_address)
  return _s;
}
inline const std::string& MsgSubmitProposal::_internal_group_policy_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_policy_address_.Get();
}
inline void MsgSubmitProposal::_internal_set_group_policy_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_address_.Set(value, GetArena());
}
inline std::string* MsgSubmitProposal::_internal_mutable_group_policy_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.group_policy_address_.Mutable( GetArena());
}
inline std::string* MsgSubmitProposal::release_group_policy_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgSubmitProposal.group_policy_address)
  return _impl_.group_policy_address_.Release();
}
inline void MsgSubmitProposal::set_allocated_group_policy_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.group_policy_address_.IsDefault()) {
    _impl_.group_policy_address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgSubmitProposal.group_policy_address)
}

// repeated string proposers = 2 [json_name = "proposers"];
inline int MsgSubmitProposal::_internal_proposers_size() const {
  return _internal_proposers().size();
}
inline int MsgSubmitProposal::proposers_size() const {
  return _internal_proposers_size();
}
inline void MsgSubmitProposal::clear_proposers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposers_.Clear();
}
inline std::string* MsgSubmitProposal::add_proposers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_proposers()->Add();
  // @@protoc_insertion_point(field_add_mutable:cosmos.group.v1.MsgSubmitProposal.proposers)
  return _s;
}
inline const std::string& MsgSubmitProposal::proposers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgSubmitProposal.proposers)
  return _internal_proposers().Get(index);
}
inline std::string* MsgSubmitProposal::mutable_proposers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgSubmitProposal.proposers)
  return _internal_mutable_proposers()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void MsgSubmitProposal::set_proposers(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_proposers()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgSubmitProposal.proposers)
}
template <typename Arg_, typename... Args_>
inline void MsgSubmitProposal::add_proposers(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_proposers(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:cosmos.group.v1.MsgSubmitProposal.proposers)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MsgSubmitProposal::proposers() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.group.v1.MsgSubmitProposal.proposers)
  return _internal_proposers();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MsgSubmitProposal::mutable_proposers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.group.v1.MsgSubmitProposal.proposers)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_proposers();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MsgSubmitProposal::_internal_proposers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proposers_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MsgSubmitProposal::_internal_mutable_proposers() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.proposers_;
}

// string metadata = 3 [json_name = "metadata"];
inline void MsgSubmitProposal::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& MsgSubmitProposal::metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgSubmitProposal.metadata)
  return _internal_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgSubmitProposal::set_metadata(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgSubmitProposal.metadata)
}
inline std::string* MsgSubmitProposal::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgSubmitProposal.metadata)
  return _s;
}
inline const std::string& MsgSubmitProposal::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.Get();
}
inline void MsgSubmitProposal::_internal_set_metadata(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Set(value, GetArena());
}
inline std::string* MsgSubmitProposal::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.Mutable( GetArena());
}
inline std::string* MsgSubmitProposal::release_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgSubmitProposal.metadata)
  return _impl_.metadata_.Release();
}
inline void MsgSubmitProposal::set_allocated_metadata(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgSubmitProposal.metadata)
}

// repeated .google.protobuf.Any messages = 4 [json_name = "messages"];
inline int MsgSubmitProposal::_internal_messages_size() const {
  return _internal_messages().size();
}
inline int MsgSubmitProposal::messages_size() const {
  return _internal_messages_size();
}
inline ::google::protobuf::Any* MsgSubmitProposal::mutable_messages(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgSubmitProposal.messages)
  return _internal_mutable_messages()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* MsgSubmitProposal::mutable_messages()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.group.v1.MsgSubmitProposal.messages)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_messages();
}
inline const ::google::protobuf::Any& MsgSubmitProposal::messages(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgSubmitProposal.messages)
  return _internal_messages().Get(index);
}
inline ::google::protobuf::Any* MsgSubmitProposal::add_messages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::Any* _add = _internal_mutable_messages()->Add();
  // @@protoc_insertion_point(field_add:cosmos.group.v1.MsgSubmitProposal.messages)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& MsgSubmitProposal::messages() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.group.v1.MsgSubmitProposal.messages)
  return _internal_messages();
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>&
MsgSubmitProposal::_internal_messages() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.messages_;
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>*
MsgSubmitProposal::_internal_mutable_messages() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.messages_;
}

// .cosmos.group.v1.Exec exec = 5 [json_name = "exec"];
inline void MsgSubmitProposal::clear_exec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exec_ = 0;
}
inline ::cosmos::group::v1::Exec MsgSubmitProposal::exec() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgSubmitProposal.exec)
  return _internal_exec();
}
inline void MsgSubmitProposal::set_exec(::cosmos::group::v1::Exec value) {
  _internal_set_exec(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgSubmitProposal.exec)
}
inline ::cosmos::group::v1::Exec MsgSubmitProposal::_internal_exec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::cosmos::group::v1::Exec>(_impl_.exec_);
}
inline void MsgSubmitProposal::_internal_set_exec(::cosmos::group::v1::Exec value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exec_ = value;
}

// string title = 6 [json_name = "title", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.47"];
inline void MsgSubmitProposal::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& MsgSubmitProposal::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgSubmitProposal.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgSubmitProposal::set_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgSubmitProposal.title)
}
inline std::string* MsgSubmitProposal::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgSubmitProposal.title)
  return _s;
}
inline const std::string& MsgSubmitProposal::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void MsgSubmitProposal::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(value, GetArena());
}
inline std::string* MsgSubmitProposal::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* MsgSubmitProposal::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgSubmitProposal.title)
  return _impl_.title_.Release();
}
inline void MsgSubmitProposal::set_allocated_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgSubmitProposal.title)
}

// string summary = 7 [json_name = "summary", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.47"];
inline void MsgSubmitProposal::clear_summary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.summary_.ClearToEmpty();
}
inline const std::string& MsgSubmitProposal::summary() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgSubmitProposal.summary)
  return _internal_summary();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgSubmitProposal::set_summary(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.summary_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgSubmitProposal.summary)
}
inline std::string* MsgSubmitProposal::mutable_summary() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_summary();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgSubmitProposal.summary)
  return _s;
}
inline const std::string& MsgSubmitProposal::_internal_summary() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.summary_.Get();
}
inline void MsgSubmitProposal::_internal_set_summary(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.summary_.Set(value, GetArena());
}
inline std::string* MsgSubmitProposal::_internal_mutable_summary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.summary_.Mutable( GetArena());
}
inline std::string* MsgSubmitProposal::release_summary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgSubmitProposal.summary)
  return _impl_.summary_.Release();
}
inline void MsgSubmitProposal::set_allocated_summary(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.summary_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.summary_.IsDefault()) {
    _impl_.summary_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgSubmitProposal.summary)
}

// -------------------------------------------------------------------

// MsgSubmitProposalResponse

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void MsgSubmitProposalResponse::clear_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t MsgSubmitProposalResponse::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgSubmitProposalResponse.proposal_id)
  return _internal_proposal_id();
}
inline void MsgSubmitProposalResponse::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgSubmitProposalResponse.proposal_id)
}
inline ::uint64_t MsgSubmitProposalResponse::_internal_proposal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proposal_id_;
}
inline void MsgSubmitProposalResponse::_internal_set_proposal_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_ = value;
}

// -------------------------------------------------------------------

// MsgWithdrawProposal

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void MsgWithdrawProposal::clear_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t MsgWithdrawProposal::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgWithdrawProposal.proposal_id)
  return _internal_proposal_id();
}
inline void MsgWithdrawProposal::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgWithdrawProposal.proposal_id)
}
inline ::uint64_t MsgWithdrawProposal::_internal_proposal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proposal_id_;
}
inline void MsgWithdrawProposal::_internal_set_proposal_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_ = value;
}

// string address = 2 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgWithdrawProposal::clear_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.ClearToEmpty();
}
inline const std::string& MsgWithdrawProposal::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgWithdrawProposal.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgWithdrawProposal::set_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgWithdrawProposal.address)
}
inline std::string* MsgWithdrawProposal::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgWithdrawProposal.address)
  return _s;
}
inline const std::string& MsgWithdrawProposal::_internal_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.address_.Get();
}
inline void MsgWithdrawProposal::_internal_set_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(value, GetArena());
}
inline std::string* MsgWithdrawProposal::_internal_mutable_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.address_.Mutable( GetArena());
}
inline std::string* MsgWithdrawProposal::release_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgWithdrawProposal.address)
  return _impl_.address_.Release();
}
inline void MsgWithdrawProposal::set_allocated_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgWithdrawProposal.address)
}

// -------------------------------------------------------------------

// MsgWithdrawProposalResponse

// -------------------------------------------------------------------

// MsgVote

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void MsgVote::clear_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t MsgVote::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgVote.proposal_id)
  return _internal_proposal_id();
}
inline void MsgVote::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgVote.proposal_id)
}
inline ::uint64_t MsgVote::_internal_proposal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proposal_id_;
}
inline void MsgVote::_internal_set_proposal_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_ = value;
}

// string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgVote::clear_voter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voter_.ClearToEmpty();
}
inline const std::string& MsgVote::voter() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgVote.voter)
  return _internal_voter();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgVote::set_voter(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voter_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgVote.voter)
}
inline std::string* MsgVote::mutable_voter() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_voter();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgVote.voter)
  return _s;
}
inline const std::string& MsgVote::_internal_voter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.voter_.Get();
}
inline void MsgVote::_internal_set_voter(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voter_.Set(value, GetArena());
}
inline std::string* MsgVote::_internal_mutable_voter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.voter_.Mutable( GetArena());
}
inline std::string* MsgVote::release_voter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgVote.voter)
  return _impl_.voter_.Release();
}
inline void MsgVote::set_allocated_voter(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voter_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.voter_.IsDefault()) {
    _impl_.voter_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgVote.voter)
}

// .cosmos.group.v1.VoteOption option = 3 [json_name = "option"];
inline void MsgVote::clear_option() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.option_ = 0;
}
inline ::cosmos::group::v1::VoteOption MsgVote::option() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgVote.option)
  return _internal_option();
}
inline void MsgVote::set_option(::cosmos::group::v1::VoteOption value) {
  _internal_set_option(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgVote.option)
}
inline ::cosmos::group::v1::VoteOption MsgVote::_internal_option() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::cosmos::group::v1::VoteOption>(_impl_.option_);
}
inline void MsgVote::_internal_set_option(::cosmos::group::v1::VoteOption value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.option_ = value;
}

// string metadata = 4 [json_name = "metadata"];
inline void MsgVote::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& MsgVote::metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgVote.metadata)
  return _internal_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgVote::set_metadata(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgVote.metadata)
}
inline std::string* MsgVote::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgVote.metadata)
  return _s;
}
inline const std::string& MsgVote::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.Get();
}
inline void MsgVote::_internal_set_metadata(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Set(value, GetArena());
}
inline std::string* MsgVote::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.Mutable( GetArena());
}
inline std::string* MsgVote::release_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgVote.metadata)
  return _impl_.metadata_.Release();
}
inline void MsgVote::set_allocated_metadata(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgVote.metadata)
}

// .cosmos.group.v1.Exec exec = 5 [json_name = "exec"];
inline void MsgVote::clear_exec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exec_ = 0;
}
inline ::cosmos::group::v1::Exec MsgVote::exec() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgVote.exec)
  return _internal_exec();
}
inline void MsgVote::set_exec(::cosmos::group::v1::Exec value) {
  _internal_set_exec(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgVote.exec)
}
inline ::cosmos::group::v1::Exec MsgVote::_internal_exec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::cosmos::group::v1::Exec>(_impl_.exec_);
}
inline void MsgVote::_internal_set_exec(::cosmos::group::v1::Exec value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exec_ = value;
}

// -------------------------------------------------------------------

// MsgVoteResponse

// -------------------------------------------------------------------

// MsgExec

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void MsgExec::clear_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t MsgExec::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgExec.proposal_id)
  return _internal_proposal_id();
}
inline void MsgExec::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgExec.proposal_id)
}
inline ::uint64_t MsgExec::_internal_proposal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proposal_id_;
}
inline void MsgExec::_internal_set_proposal_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_ = value;
}

// string executor = 2 [json_name = "executor", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgExec::clear_executor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executor_.ClearToEmpty();
}
inline const std::string& MsgExec::executor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgExec.executor)
  return _internal_executor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgExec::set_executor(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgExec.executor)
}
inline std::string* MsgExec::mutable_executor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_executor();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgExec.executor)
  return _s;
}
inline const std::string& MsgExec::_internal_executor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.executor_.Get();
}
inline void MsgExec::_internal_set_executor(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executor_.Set(value, GetArena());
}
inline std::string* MsgExec::_internal_mutable_executor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.executor_.Mutable( GetArena());
}
inline std::string* MsgExec::release_executor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgExec.executor)
  return _impl_.executor_.Release();
}
inline void MsgExec::set_allocated_executor(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executor_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.executor_.IsDefault()) {
    _impl_.executor_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgExec.executor)
}

// -------------------------------------------------------------------

// MsgExecResponse

// .cosmos.group.v1.ProposalExecutorResult result = 2 [json_name = "result"];
inline void MsgExecResponse::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = 0;
}
inline ::cosmos::group::v1::ProposalExecutorResult MsgExecResponse::result() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgExecResponse.result)
  return _internal_result();
}
inline void MsgExecResponse::set_result(::cosmos::group::v1::ProposalExecutorResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgExecResponse.result)
}
inline ::cosmos::group::v1::ProposalExecutorResult MsgExecResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::cosmos::group::v1::ProposalExecutorResult>(_impl_.result_);
}
inline void MsgExecResponse::_internal_set_result(::cosmos::group::v1::ProposalExecutorResult value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = value;
}

// -------------------------------------------------------------------

// MsgLeaveGroup

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgLeaveGroup::clear_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.ClearToEmpty();
}
inline const std::string& MsgLeaveGroup::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgLeaveGroup.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgLeaveGroup::set_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgLeaveGroup.address)
}
inline std::string* MsgLeaveGroup::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgLeaveGroup.address)
  return _s;
}
inline const std::string& MsgLeaveGroup::_internal_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.address_.Get();
}
inline void MsgLeaveGroup::_internal_set_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(value, GetArena());
}
inline std::string* MsgLeaveGroup::_internal_mutable_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.address_.Mutable( GetArena());
}
inline std::string* MsgLeaveGroup::release_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgLeaveGroup.address)
  return _impl_.address_.Release();
}
inline void MsgLeaveGroup::set_allocated_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgLeaveGroup.address)
}

// uint64 group_id = 2 [json_name = "groupId"];
inline void MsgLeaveGroup::clear_group_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_id_ = ::uint64_t{0u};
}
inline ::uint64_t MsgLeaveGroup::group_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgLeaveGroup.group_id)
  return _internal_group_id();
}
inline void MsgLeaveGroup::set_group_id(::uint64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgLeaveGroup.group_id)
}
inline ::uint64_t MsgLeaveGroup::_internal_group_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_id_;
}
inline void MsgLeaveGroup::_internal_set_group_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_id_ = value;
}

// -------------------------------------------------------------------

// MsgLeaveGroupResponse

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace group
}  // namespace cosmos


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::cosmos::group::v1::Exec> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cosmos::group::v1::Exec>() {
  return ::cosmos::group::v1::Exec_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2fgroup_2fv1_2ftx_2eproto_2epb_2eh
