// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/group/v1/events.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2fgroup_2fv1_2fevents_2eproto_2epb_2eh
#define cosmos_2fgroup_2fv1_2fevents_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cosmos_proto/cosmos.pb.h"
#include "cosmos/group/v1/types.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fgroup_2fv1_2fevents_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fgroup_2fv1_2fevents_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2fgroup_2fv1_2fevents_2eproto;
namespace cosmos {
namespace group {
namespace v1 {
class EventCreateGroup;
struct EventCreateGroupDefaultTypeInternal;
extern EventCreateGroupDefaultTypeInternal _EventCreateGroup_default_instance_;
class EventCreateGroupPolicy;
struct EventCreateGroupPolicyDefaultTypeInternal;
extern EventCreateGroupPolicyDefaultTypeInternal _EventCreateGroupPolicy_default_instance_;
class EventExec;
struct EventExecDefaultTypeInternal;
extern EventExecDefaultTypeInternal _EventExec_default_instance_;
class EventLeaveGroup;
struct EventLeaveGroupDefaultTypeInternal;
extern EventLeaveGroupDefaultTypeInternal _EventLeaveGroup_default_instance_;
class EventProposalPruned;
struct EventProposalPrunedDefaultTypeInternal;
extern EventProposalPrunedDefaultTypeInternal _EventProposalPruned_default_instance_;
class EventSubmitProposal;
struct EventSubmitProposalDefaultTypeInternal;
extern EventSubmitProposalDefaultTypeInternal _EventSubmitProposal_default_instance_;
class EventTallyError;
struct EventTallyErrorDefaultTypeInternal;
extern EventTallyErrorDefaultTypeInternal _EventTallyError_default_instance_;
class EventUpdateGroup;
struct EventUpdateGroupDefaultTypeInternal;
extern EventUpdateGroupDefaultTypeInternal _EventUpdateGroup_default_instance_;
class EventUpdateGroupPolicy;
struct EventUpdateGroupPolicyDefaultTypeInternal;
extern EventUpdateGroupPolicyDefaultTypeInternal _EventUpdateGroupPolicy_default_instance_;
class EventVote;
struct EventVoteDefaultTypeInternal;
extern EventVoteDefaultTypeInternal _EventVote_default_instance_;
class EventWithdrawProposal;
struct EventWithdrawProposalDefaultTypeInternal;
extern EventWithdrawProposalDefaultTypeInternal _EventWithdrawProposal_default_instance_;
}  // namespace v1
}  // namespace group
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace group {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class EventWithdrawProposal final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.EventWithdrawProposal) */ {
 public:
  inline EventWithdrawProposal() : EventWithdrawProposal(nullptr) {}
  ~EventWithdrawProposal() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EventWithdrawProposal* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EventWithdrawProposal));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EventWithdrawProposal(
      ::google::protobuf::internal::ConstantInitialized);

  inline EventWithdrawProposal(const EventWithdrawProposal& from) : EventWithdrawProposal(nullptr, from) {}
  inline EventWithdrawProposal(EventWithdrawProposal&& from) noexcept
      : EventWithdrawProposal(nullptr, std::move(from)) {}
  inline EventWithdrawProposal& operator=(const EventWithdrawProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventWithdrawProposal& operator=(EventWithdrawProposal&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventWithdrawProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventWithdrawProposal* internal_default_instance() {
    return reinterpret_cast<const EventWithdrawProposal*>(
        &_EventWithdrawProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(EventWithdrawProposal& a, EventWithdrawProposal& b) { a.Swap(&b); }
  inline void Swap(EventWithdrawProposal* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventWithdrawProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventWithdrawProposal* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EventWithdrawProposal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EventWithdrawProposal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EventWithdrawProposal& from) { EventWithdrawProposal::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EventWithdrawProposal* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.EventWithdrawProposal"; }

 protected:
  explicit EventWithdrawProposal(::google::protobuf::Arena* arena);
  EventWithdrawProposal(::google::protobuf::Arena* arena, const EventWithdrawProposal& from);
  EventWithdrawProposal(::google::protobuf::Arena* arena, EventWithdrawProposal&& from) noexcept
      : EventWithdrawProposal(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kProposalIdFieldNumber = 1,
  };
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.EventWithdrawProposal)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EventWithdrawProposal& from_msg);
    ::uint64_t proposal_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fevents_2eproto;
};
// -------------------------------------------------------------------

class EventVote final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.EventVote) */ {
 public:
  inline EventVote() : EventVote(nullptr) {}
  ~EventVote() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EventVote* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EventVote));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EventVote(
      ::google::protobuf::internal::ConstantInitialized);

  inline EventVote(const EventVote& from) : EventVote(nullptr, from) {}
  inline EventVote(EventVote&& from) noexcept
      : EventVote(nullptr, std::move(from)) {}
  inline EventVote& operator=(const EventVote& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventVote& operator=(EventVote&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventVote& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventVote* internal_default_instance() {
    return reinterpret_cast<const EventVote*>(
        &_EventVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(EventVote& a, EventVote& b) { a.Swap(&b); }
  inline void Swap(EventVote* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventVote* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventVote* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EventVote>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EventVote& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EventVote& from) { EventVote::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EventVote* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.EventVote"; }

 protected:
  explicit EventVote(::google::protobuf::Arena* arena);
  EventVote(::google::protobuf::Arena* arena, const EventVote& from);
  EventVote(::google::protobuf::Arena* arena, EventVote&& from) noexcept
      : EventVote(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kProposalIdFieldNumber = 1,
  };
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.EventVote)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EventVote& from_msg);
    ::uint64_t proposal_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fevents_2eproto;
};
// -------------------------------------------------------------------

class EventUpdateGroupPolicy final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.EventUpdateGroupPolicy) */ {
 public:
  inline EventUpdateGroupPolicy() : EventUpdateGroupPolicy(nullptr) {}
  ~EventUpdateGroupPolicy() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EventUpdateGroupPolicy* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EventUpdateGroupPolicy));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EventUpdateGroupPolicy(
      ::google::protobuf::internal::ConstantInitialized);

  inline EventUpdateGroupPolicy(const EventUpdateGroupPolicy& from) : EventUpdateGroupPolicy(nullptr, from) {}
  inline EventUpdateGroupPolicy(EventUpdateGroupPolicy&& from) noexcept
      : EventUpdateGroupPolicy(nullptr, std::move(from)) {}
  inline EventUpdateGroupPolicy& operator=(const EventUpdateGroupPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventUpdateGroupPolicy& operator=(EventUpdateGroupPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventUpdateGroupPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventUpdateGroupPolicy* internal_default_instance() {
    return reinterpret_cast<const EventUpdateGroupPolicy*>(
        &_EventUpdateGroupPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(EventUpdateGroupPolicy& a, EventUpdateGroupPolicy& b) { a.Swap(&b); }
  inline void Swap(EventUpdateGroupPolicy* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventUpdateGroupPolicy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventUpdateGroupPolicy* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EventUpdateGroupPolicy>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EventUpdateGroupPolicy& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EventUpdateGroupPolicy& from) { EventUpdateGroupPolicy::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EventUpdateGroupPolicy* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.EventUpdateGroupPolicy"; }

 protected:
  explicit EventUpdateGroupPolicy(::google::protobuf::Arena* arena);
  EventUpdateGroupPolicy(::google::protobuf::Arena* arena, const EventUpdateGroupPolicy& from);
  EventUpdateGroupPolicy(::google::protobuf::Arena* arena, EventUpdateGroupPolicy&& from) noexcept
      : EventUpdateGroupPolicy(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAddressFieldNumber = 1,
  };
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* value);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.EventUpdateGroupPolicy)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      54, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EventUpdateGroupPolicy& from_msg);
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fevents_2eproto;
};
// -------------------------------------------------------------------

class EventUpdateGroup final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.EventUpdateGroup) */ {
 public:
  inline EventUpdateGroup() : EventUpdateGroup(nullptr) {}
  ~EventUpdateGroup() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EventUpdateGroup* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EventUpdateGroup));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EventUpdateGroup(
      ::google::protobuf::internal::ConstantInitialized);

  inline EventUpdateGroup(const EventUpdateGroup& from) : EventUpdateGroup(nullptr, from) {}
  inline EventUpdateGroup(EventUpdateGroup&& from) noexcept
      : EventUpdateGroup(nullptr, std::move(from)) {}
  inline EventUpdateGroup& operator=(const EventUpdateGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventUpdateGroup& operator=(EventUpdateGroup&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventUpdateGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventUpdateGroup* internal_default_instance() {
    return reinterpret_cast<const EventUpdateGroup*>(
        &_EventUpdateGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(EventUpdateGroup& a, EventUpdateGroup& b) { a.Swap(&b); }
  inline void Swap(EventUpdateGroup* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventUpdateGroup* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventUpdateGroup* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EventUpdateGroup>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EventUpdateGroup& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EventUpdateGroup& from) { EventUpdateGroup::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EventUpdateGroup* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.EventUpdateGroup"; }

 protected:
  explicit EventUpdateGroup(::google::protobuf::Arena* arena);
  EventUpdateGroup(::google::protobuf::Arena* arena, const EventUpdateGroup& from);
  EventUpdateGroup(::google::protobuf::Arena* arena, EventUpdateGroup&& from) noexcept
      : EventUpdateGroup(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // uint64 group_id = 1 [json_name = "groupId"];
  void clear_group_id() ;
  ::uint64_t group_id() const;
  void set_group_id(::uint64_t value);

  private:
  ::uint64_t _internal_group_id() const;
  void _internal_set_group_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.EventUpdateGroup)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EventUpdateGroup& from_msg);
    ::uint64_t group_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fevents_2eproto;
};
// -------------------------------------------------------------------

class EventTallyError final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.EventTallyError) */ {
 public:
  inline EventTallyError() : EventTallyError(nullptr) {}
  ~EventTallyError() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EventTallyError* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EventTallyError));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EventTallyError(
      ::google::protobuf::internal::ConstantInitialized);

  inline EventTallyError(const EventTallyError& from) : EventTallyError(nullptr, from) {}
  inline EventTallyError(EventTallyError&& from) noexcept
      : EventTallyError(nullptr, std::move(from)) {}
  inline EventTallyError& operator=(const EventTallyError& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventTallyError& operator=(EventTallyError&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventTallyError& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventTallyError* internal_default_instance() {
    return reinterpret_cast<const EventTallyError*>(
        &_EventTallyError_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(EventTallyError& a, EventTallyError& b) { a.Swap(&b); }
  inline void Swap(EventTallyError* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventTallyError* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventTallyError* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EventTallyError>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EventTallyError& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EventTallyError& from) { EventTallyError::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EventTallyError* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.EventTallyError"; }

 protected:
  explicit EventTallyError(::google::protobuf::Arena* arena);
  EventTallyError(::google::protobuf::Arena* arena, const EventTallyError& from);
  EventTallyError(::google::protobuf::Arena* arena, EventTallyError&& from) noexcept
      : EventTallyError(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorMessageFieldNumber = 2,
    kProposalIdFieldNumber = 1,
  };
  // string error_message = 2 [json_name = "errorMessage"];
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.EventTallyError)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      53, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EventTallyError& from_msg);
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    ::uint64_t proposal_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fevents_2eproto;
};
// -------------------------------------------------------------------

class EventSubmitProposal final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.EventSubmitProposal) */ {
 public:
  inline EventSubmitProposal() : EventSubmitProposal(nullptr) {}
  ~EventSubmitProposal() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EventSubmitProposal* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EventSubmitProposal));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EventSubmitProposal(
      ::google::protobuf::internal::ConstantInitialized);

  inline EventSubmitProposal(const EventSubmitProposal& from) : EventSubmitProposal(nullptr, from) {}
  inline EventSubmitProposal(EventSubmitProposal&& from) noexcept
      : EventSubmitProposal(nullptr, std::move(from)) {}
  inline EventSubmitProposal& operator=(const EventSubmitProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventSubmitProposal& operator=(EventSubmitProposal&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventSubmitProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventSubmitProposal* internal_default_instance() {
    return reinterpret_cast<const EventSubmitProposal*>(
        &_EventSubmitProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(EventSubmitProposal& a, EventSubmitProposal& b) { a.Swap(&b); }
  inline void Swap(EventSubmitProposal* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventSubmitProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventSubmitProposal* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EventSubmitProposal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EventSubmitProposal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EventSubmitProposal& from) { EventSubmitProposal::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EventSubmitProposal* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.EventSubmitProposal"; }

 protected:
  explicit EventSubmitProposal(::google::protobuf::Arena* arena);
  EventSubmitProposal(::google::protobuf::Arena* arena, const EventSubmitProposal& from);
  EventSubmitProposal(::google::protobuf::Arena* arena, EventSubmitProposal&& from) noexcept
      : EventSubmitProposal(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kProposalIdFieldNumber = 1,
  };
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.EventSubmitProposal)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EventSubmitProposal& from_msg);
    ::uint64_t proposal_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fevents_2eproto;
};
// -------------------------------------------------------------------

class EventLeaveGroup final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.EventLeaveGroup) */ {
 public:
  inline EventLeaveGroup() : EventLeaveGroup(nullptr) {}
  ~EventLeaveGroup() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EventLeaveGroup* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EventLeaveGroup));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EventLeaveGroup(
      ::google::protobuf::internal::ConstantInitialized);

  inline EventLeaveGroup(const EventLeaveGroup& from) : EventLeaveGroup(nullptr, from) {}
  inline EventLeaveGroup(EventLeaveGroup&& from) noexcept
      : EventLeaveGroup(nullptr, std::move(from)) {}
  inline EventLeaveGroup& operator=(const EventLeaveGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventLeaveGroup& operator=(EventLeaveGroup&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventLeaveGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventLeaveGroup* internal_default_instance() {
    return reinterpret_cast<const EventLeaveGroup*>(
        &_EventLeaveGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(EventLeaveGroup& a, EventLeaveGroup& b) { a.Swap(&b); }
  inline void Swap(EventLeaveGroup* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventLeaveGroup* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventLeaveGroup* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EventLeaveGroup>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EventLeaveGroup& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EventLeaveGroup& from) { EventLeaveGroup::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EventLeaveGroup* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.EventLeaveGroup"; }

 protected:
  explicit EventLeaveGroup(::google::protobuf::Arena* arena);
  EventLeaveGroup(::google::protobuf::Arena* arena, const EventLeaveGroup& from);
  EventLeaveGroup(::google::protobuf::Arena* arena, EventLeaveGroup&& from) noexcept
      : EventLeaveGroup(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAddressFieldNumber = 2,
    kGroupIdFieldNumber = 1,
  };
  // string address = 2 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* value);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // uint64 group_id = 1 [json_name = "groupId"];
  void clear_group_id() ;
  ::uint64_t group_id() const;
  void set_group_id(::uint64_t value);

  private:
  ::uint64_t _internal_group_id() const;
  void _internal_set_group_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.EventLeaveGroup)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      47, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EventLeaveGroup& from_msg);
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::uint64_t group_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fevents_2eproto;
};
// -------------------------------------------------------------------

class EventExec final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.EventExec) */ {
 public:
  inline EventExec() : EventExec(nullptr) {}
  ~EventExec() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EventExec* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EventExec));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EventExec(
      ::google::protobuf::internal::ConstantInitialized);

  inline EventExec(const EventExec& from) : EventExec(nullptr, from) {}
  inline EventExec(EventExec&& from) noexcept
      : EventExec(nullptr, std::move(from)) {}
  inline EventExec& operator=(const EventExec& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventExec& operator=(EventExec&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventExec& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventExec* internal_default_instance() {
    return reinterpret_cast<const EventExec*>(
        &_EventExec_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(EventExec& a, EventExec& b) { a.Swap(&b); }
  inline void Swap(EventExec* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventExec* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventExec* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EventExec>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EventExec& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EventExec& from) { EventExec::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EventExec* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.EventExec"; }

 protected:
  explicit EventExec(::google::protobuf::Arena* arena);
  EventExec(::google::protobuf::Arena* arena, const EventExec& from);
  EventExec(::google::protobuf::Arena* arena, EventExec&& from) noexcept
      : EventExec(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLogsFieldNumber = 3,
    kProposalIdFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // string logs = 3 [json_name = "logs"];
  void clear_logs() ;
  const std::string& logs() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_logs(Arg_&& arg, Args_... args);
  std::string* mutable_logs();
  PROTOBUF_NODISCARD std::string* release_logs();
  void set_allocated_logs(std::string* value);

  private:
  const std::string& _internal_logs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logs(
      const std::string& value);
  std::string* _internal_mutable_logs();

  public:
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // .cosmos.group.v1.ProposalExecutorResult result = 2 [json_name = "result"];
  void clear_result() ;
  ::cosmos::group::v1::ProposalExecutorResult result() const;
  void set_result(::cosmos::group::v1::ProposalExecutorResult value);

  private:
  ::cosmos::group::v1::ProposalExecutorResult _internal_result() const;
  void _internal_set_result(::cosmos::group::v1::ProposalExecutorResult value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.EventExec)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      38, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EventExec& from_msg);
    ::google::protobuf::internal::ArenaStringPtr logs_;
    ::uint64_t proposal_id_;
    int result_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fevents_2eproto;
};
// -------------------------------------------------------------------

class EventCreateGroupPolicy final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.EventCreateGroupPolicy) */ {
 public:
  inline EventCreateGroupPolicy() : EventCreateGroupPolicy(nullptr) {}
  ~EventCreateGroupPolicy() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EventCreateGroupPolicy* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EventCreateGroupPolicy));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EventCreateGroupPolicy(
      ::google::protobuf::internal::ConstantInitialized);

  inline EventCreateGroupPolicy(const EventCreateGroupPolicy& from) : EventCreateGroupPolicy(nullptr, from) {}
  inline EventCreateGroupPolicy(EventCreateGroupPolicy&& from) noexcept
      : EventCreateGroupPolicy(nullptr, std::move(from)) {}
  inline EventCreateGroupPolicy& operator=(const EventCreateGroupPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventCreateGroupPolicy& operator=(EventCreateGroupPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventCreateGroupPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventCreateGroupPolicy* internal_default_instance() {
    return reinterpret_cast<const EventCreateGroupPolicy*>(
        &_EventCreateGroupPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(EventCreateGroupPolicy& a, EventCreateGroupPolicy& b) { a.Swap(&b); }
  inline void Swap(EventCreateGroupPolicy* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventCreateGroupPolicy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventCreateGroupPolicy* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EventCreateGroupPolicy>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EventCreateGroupPolicy& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EventCreateGroupPolicy& from) { EventCreateGroupPolicy::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EventCreateGroupPolicy* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.EventCreateGroupPolicy"; }

 protected:
  explicit EventCreateGroupPolicy(::google::protobuf::Arena* arena);
  EventCreateGroupPolicy(::google::protobuf::Arena* arena, const EventCreateGroupPolicy& from);
  EventCreateGroupPolicy(::google::protobuf::Arena* arena, EventCreateGroupPolicy&& from) noexcept
      : EventCreateGroupPolicy(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAddressFieldNumber = 1,
  };
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* value);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.EventCreateGroupPolicy)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      54, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EventCreateGroupPolicy& from_msg);
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fevents_2eproto;
};
// -------------------------------------------------------------------

class EventCreateGroup final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.EventCreateGroup) */ {
 public:
  inline EventCreateGroup() : EventCreateGroup(nullptr) {}
  ~EventCreateGroup() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EventCreateGroup* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EventCreateGroup));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EventCreateGroup(
      ::google::protobuf::internal::ConstantInitialized);

  inline EventCreateGroup(const EventCreateGroup& from) : EventCreateGroup(nullptr, from) {}
  inline EventCreateGroup(EventCreateGroup&& from) noexcept
      : EventCreateGroup(nullptr, std::move(from)) {}
  inline EventCreateGroup& operator=(const EventCreateGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventCreateGroup& operator=(EventCreateGroup&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventCreateGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventCreateGroup* internal_default_instance() {
    return reinterpret_cast<const EventCreateGroup*>(
        &_EventCreateGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(EventCreateGroup& a, EventCreateGroup& b) { a.Swap(&b); }
  inline void Swap(EventCreateGroup* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventCreateGroup* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventCreateGroup* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EventCreateGroup>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EventCreateGroup& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EventCreateGroup& from) { EventCreateGroup::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EventCreateGroup* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.EventCreateGroup"; }

 protected:
  explicit EventCreateGroup(::google::protobuf::Arena* arena);
  EventCreateGroup(::google::protobuf::Arena* arena, const EventCreateGroup& from);
  EventCreateGroup(::google::protobuf::Arena* arena, EventCreateGroup&& from) noexcept
      : EventCreateGroup(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // uint64 group_id = 1 [json_name = "groupId"];
  void clear_group_id() ;
  ::uint64_t group_id() const;
  void set_group_id(::uint64_t value);

  private:
  ::uint64_t _internal_group_id() const;
  void _internal_set_group_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.EventCreateGroup)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EventCreateGroup& from_msg);
    ::uint64_t group_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fevents_2eproto;
};
// -------------------------------------------------------------------

class EventProposalPruned final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.EventProposalPruned) */ {
 public:
  inline EventProposalPruned() : EventProposalPruned(nullptr) {}
  ~EventProposalPruned() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EventProposalPruned* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EventProposalPruned));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EventProposalPruned(
      ::google::protobuf::internal::ConstantInitialized);

  inline EventProposalPruned(const EventProposalPruned& from) : EventProposalPruned(nullptr, from) {}
  inline EventProposalPruned(EventProposalPruned&& from) noexcept
      : EventProposalPruned(nullptr, std::move(from)) {}
  inline EventProposalPruned& operator=(const EventProposalPruned& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventProposalPruned& operator=(EventProposalPruned&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventProposalPruned& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventProposalPruned* internal_default_instance() {
    return reinterpret_cast<const EventProposalPruned*>(
        &_EventProposalPruned_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(EventProposalPruned& a, EventProposalPruned& b) { a.Swap(&b); }
  inline void Swap(EventProposalPruned* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventProposalPruned* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventProposalPruned* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EventProposalPruned>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EventProposalPruned& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EventProposalPruned& from) { EventProposalPruned::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EventProposalPruned* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.EventProposalPruned"; }

 protected:
  explicit EventProposalPruned(::google::protobuf::Arena* arena);
  EventProposalPruned(::google::protobuf::Arena* arena, const EventProposalPruned& from);
  EventProposalPruned(::google::protobuf::Arena* arena, EventProposalPruned&& from) noexcept
      : EventProposalPruned(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTallyResultFieldNumber = 3,
    kProposalIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .cosmos.group.v1.TallyResult tally_result = 3 [json_name = "tallyResult"];
  bool has_tally_result() const;
  void clear_tally_result() ;
  const ::cosmos::group::v1::TallyResult& tally_result() const;
  PROTOBUF_NODISCARD ::cosmos::group::v1::TallyResult* release_tally_result();
  ::cosmos::group::v1::TallyResult* mutable_tally_result();
  void set_allocated_tally_result(::cosmos::group::v1::TallyResult* value);
  void unsafe_arena_set_allocated_tally_result(::cosmos::group::v1::TallyResult* value);
  ::cosmos::group::v1::TallyResult* unsafe_arena_release_tally_result();

  private:
  const ::cosmos::group::v1::TallyResult& _internal_tally_result() const;
  ::cosmos::group::v1::TallyResult* _internal_mutable_tally_result();

  public:
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // .cosmos.group.v1.ProposalStatus status = 2 [json_name = "status"];
  void clear_status() ;
  ::cosmos::group::v1::ProposalStatus status() const;
  void set_status(::cosmos::group::v1::ProposalStatus value);

  private:
  ::cosmos::group::v1::ProposalStatus _internal_status() const;
  void _internal_set_status(::cosmos::group::v1::ProposalStatus value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.EventProposalPruned)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EventProposalPruned& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::cosmos::group::v1::TallyResult* tally_result_;
    ::uint64_t proposal_id_;
    int status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fevents_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EventCreateGroup

// uint64 group_id = 1 [json_name = "groupId"];
inline void EventCreateGroup::clear_group_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_id_ = ::uint64_t{0u};
}
inline ::uint64_t EventCreateGroup::group_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.EventCreateGroup.group_id)
  return _internal_group_id();
}
inline void EventCreateGroup::set_group_id(::uint64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.EventCreateGroup.group_id)
}
inline ::uint64_t EventCreateGroup::_internal_group_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_id_;
}
inline void EventCreateGroup::_internal_set_group_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_id_ = value;
}

// -------------------------------------------------------------------

// EventUpdateGroup

// uint64 group_id = 1 [json_name = "groupId"];
inline void EventUpdateGroup::clear_group_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_id_ = ::uint64_t{0u};
}
inline ::uint64_t EventUpdateGroup::group_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.EventUpdateGroup.group_id)
  return _internal_group_id();
}
inline void EventUpdateGroup::set_group_id(::uint64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.EventUpdateGroup.group_id)
}
inline ::uint64_t EventUpdateGroup::_internal_group_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_id_;
}
inline void EventUpdateGroup::_internal_set_group_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_id_ = value;
}

// -------------------------------------------------------------------

// EventCreateGroupPolicy

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void EventCreateGroupPolicy::clear_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.ClearToEmpty();
}
inline const std::string& EventCreateGroupPolicy::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.EventCreateGroupPolicy.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventCreateGroupPolicy::set_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.EventCreateGroupPolicy.address)
}
inline std::string* EventCreateGroupPolicy::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.EventCreateGroupPolicy.address)
  return _s;
}
inline const std::string& EventCreateGroupPolicy::_internal_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.address_.Get();
}
inline void EventCreateGroupPolicy::_internal_set_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(value, GetArena());
}
inline std::string* EventCreateGroupPolicy::_internal_mutable_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.address_.Mutable( GetArena());
}
inline std::string* EventCreateGroupPolicy::release_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.EventCreateGroupPolicy.address)
  return _impl_.address_.Release();
}
inline void EventCreateGroupPolicy::set_allocated_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.EventCreateGroupPolicy.address)
}

// -------------------------------------------------------------------

// EventUpdateGroupPolicy

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void EventUpdateGroupPolicy::clear_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.ClearToEmpty();
}
inline const std::string& EventUpdateGroupPolicy::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.EventUpdateGroupPolicy.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventUpdateGroupPolicy::set_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.EventUpdateGroupPolicy.address)
}
inline std::string* EventUpdateGroupPolicy::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.EventUpdateGroupPolicy.address)
  return _s;
}
inline const std::string& EventUpdateGroupPolicy::_internal_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.address_.Get();
}
inline void EventUpdateGroupPolicy::_internal_set_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(value, GetArena());
}
inline std::string* EventUpdateGroupPolicy::_internal_mutable_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.address_.Mutable( GetArena());
}
inline std::string* EventUpdateGroupPolicy::release_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.EventUpdateGroupPolicy.address)
  return _impl_.address_.Release();
}
inline void EventUpdateGroupPolicy::set_allocated_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.EventUpdateGroupPolicy.address)
}

// -------------------------------------------------------------------

// EventSubmitProposal

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void EventSubmitProposal::clear_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t EventSubmitProposal::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.EventSubmitProposal.proposal_id)
  return _internal_proposal_id();
}
inline void EventSubmitProposal::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.EventSubmitProposal.proposal_id)
}
inline ::uint64_t EventSubmitProposal::_internal_proposal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proposal_id_;
}
inline void EventSubmitProposal::_internal_set_proposal_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_ = value;
}

// -------------------------------------------------------------------

// EventWithdrawProposal

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void EventWithdrawProposal::clear_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t EventWithdrawProposal::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.EventWithdrawProposal.proposal_id)
  return _internal_proposal_id();
}
inline void EventWithdrawProposal::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.EventWithdrawProposal.proposal_id)
}
inline ::uint64_t EventWithdrawProposal::_internal_proposal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proposal_id_;
}
inline void EventWithdrawProposal::_internal_set_proposal_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_ = value;
}

// -------------------------------------------------------------------

// EventVote

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void EventVote::clear_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t EventVote::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.EventVote.proposal_id)
  return _internal_proposal_id();
}
inline void EventVote::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.EventVote.proposal_id)
}
inline ::uint64_t EventVote::_internal_proposal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proposal_id_;
}
inline void EventVote::_internal_set_proposal_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_ = value;
}

// -------------------------------------------------------------------

// EventExec

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void EventExec::clear_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t EventExec::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.EventExec.proposal_id)
  return _internal_proposal_id();
}
inline void EventExec::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.EventExec.proposal_id)
}
inline ::uint64_t EventExec::_internal_proposal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proposal_id_;
}
inline void EventExec::_internal_set_proposal_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_ = value;
}

// .cosmos.group.v1.ProposalExecutorResult result = 2 [json_name = "result"];
inline void EventExec::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = 0;
}
inline ::cosmos::group::v1::ProposalExecutorResult EventExec::result() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.EventExec.result)
  return _internal_result();
}
inline void EventExec::set_result(::cosmos::group::v1::ProposalExecutorResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.EventExec.result)
}
inline ::cosmos::group::v1::ProposalExecutorResult EventExec::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::cosmos::group::v1::ProposalExecutorResult>(_impl_.result_);
}
inline void EventExec::_internal_set_result(::cosmos::group::v1::ProposalExecutorResult value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = value;
}

// string logs = 3 [json_name = "logs"];
inline void EventExec::clear_logs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.logs_.ClearToEmpty();
}
inline const std::string& EventExec::logs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.EventExec.logs)
  return _internal_logs();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventExec::set_logs(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.logs_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.EventExec.logs)
}
inline std::string* EventExec::mutable_logs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_logs();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.EventExec.logs)
  return _s;
}
inline const std::string& EventExec::_internal_logs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.logs_.Get();
}
inline void EventExec::_internal_set_logs(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.logs_.Set(value, GetArena());
}
inline std::string* EventExec::_internal_mutable_logs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.logs_.Mutable( GetArena());
}
inline std::string* EventExec::release_logs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.EventExec.logs)
  return _impl_.logs_.Release();
}
inline void EventExec::set_allocated_logs(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.logs_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.logs_.IsDefault()) {
    _impl_.logs_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.EventExec.logs)
}

// -------------------------------------------------------------------

// EventLeaveGroup

// uint64 group_id = 1 [json_name = "groupId"];
inline void EventLeaveGroup::clear_group_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_id_ = ::uint64_t{0u};
}
inline ::uint64_t EventLeaveGroup::group_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.EventLeaveGroup.group_id)
  return _internal_group_id();
}
inline void EventLeaveGroup::set_group_id(::uint64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.EventLeaveGroup.group_id)
}
inline ::uint64_t EventLeaveGroup::_internal_group_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_id_;
}
inline void EventLeaveGroup::_internal_set_group_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_id_ = value;
}

// string address = 2 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void EventLeaveGroup::clear_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.ClearToEmpty();
}
inline const std::string& EventLeaveGroup::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.EventLeaveGroup.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventLeaveGroup::set_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.EventLeaveGroup.address)
}
inline std::string* EventLeaveGroup::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.EventLeaveGroup.address)
  return _s;
}
inline const std::string& EventLeaveGroup::_internal_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.address_.Get();
}
inline void EventLeaveGroup::_internal_set_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(value, GetArena());
}
inline std::string* EventLeaveGroup::_internal_mutable_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.address_.Mutable( GetArena());
}
inline std::string* EventLeaveGroup::release_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.EventLeaveGroup.address)
  return _impl_.address_.Release();
}
inline void EventLeaveGroup::set_allocated_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.EventLeaveGroup.address)
}

// -------------------------------------------------------------------

// EventProposalPruned

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void EventProposalPruned::clear_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t EventProposalPruned::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.EventProposalPruned.proposal_id)
  return _internal_proposal_id();
}
inline void EventProposalPruned::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.EventProposalPruned.proposal_id)
}
inline ::uint64_t EventProposalPruned::_internal_proposal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proposal_id_;
}
inline void EventProposalPruned::_internal_set_proposal_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_ = value;
}

// .cosmos.group.v1.ProposalStatus status = 2 [json_name = "status"];
inline void EventProposalPruned::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::cosmos::group::v1::ProposalStatus EventProposalPruned::status() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.EventProposalPruned.status)
  return _internal_status();
}
inline void EventProposalPruned::set_status(::cosmos::group::v1::ProposalStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.EventProposalPruned.status)
}
inline ::cosmos::group::v1::ProposalStatus EventProposalPruned::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::cosmos::group::v1::ProposalStatus>(_impl_.status_);
}
inline void EventProposalPruned::_internal_set_status(::cosmos::group::v1::ProposalStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// .cosmos.group.v1.TallyResult tally_result = 3 [json_name = "tallyResult"];
inline bool EventProposalPruned::has_tally_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tally_result_ != nullptr);
  return value;
}
inline const ::cosmos::group::v1::TallyResult& EventProposalPruned::_internal_tally_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::group::v1::TallyResult* p = _impl_.tally_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::group::v1::TallyResult&>(::cosmos::group::v1::_TallyResult_default_instance_);
}
inline const ::cosmos::group::v1::TallyResult& EventProposalPruned::tally_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.EventProposalPruned.tally_result)
  return _internal_tally_result();
}
inline void EventProposalPruned::unsafe_arena_set_allocated_tally_result(::cosmos::group::v1::TallyResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tally_result_);
  }
  _impl_.tally_result_ = reinterpret_cast<::cosmos::group::v1::TallyResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.EventProposalPruned.tally_result)
}
inline ::cosmos::group::v1::TallyResult* EventProposalPruned::release_tally_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::group::v1::TallyResult* released = _impl_.tally_result_;
  _impl_.tally_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::group::v1::TallyResult* EventProposalPruned::unsafe_arena_release_tally_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.EventProposalPruned.tally_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::group::v1::TallyResult* temp = _impl_.tally_result_;
  _impl_.tally_result_ = nullptr;
  return temp;
}
inline ::cosmos::group::v1::TallyResult* EventProposalPruned::_internal_mutable_tally_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.tally_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::group::v1::TallyResult>(GetArena());
    _impl_.tally_result_ = reinterpret_cast<::cosmos::group::v1::TallyResult*>(p);
  }
  return _impl_.tally_result_;
}
inline ::cosmos::group::v1::TallyResult* EventProposalPruned::mutable_tally_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::group::v1::TallyResult* _msg = _internal_mutable_tally_result();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.EventProposalPruned.tally_result)
  return _msg;
}
inline void EventProposalPruned::set_allocated_tally_result(::cosmos::group::v1::TallyResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tally_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.tally_result_ = reinterpret_cast<::cosmos::group::v1::TallyResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.EventProposalPruned.tally_result)
}

// -------------------------------------------------------------------

// EventTallyError

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void EventTallyError::clear_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t EventTallyError::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.EventTallyError.proposal_id)
  return _internal_proposal_id();
}
inline void EventTallyError::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.EventTallyError.proposal_id)
}
inline ::uint64_t EventTallyError::_internal_proposal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proposal_id_;
}
inline void EventTallyError::_internal_set_proposal_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_ = value;
}

// string error_message = 2 [json_name = "errorMessage"];
inline void EventTallyError::clear_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& EventTallyError::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.EventTallyError.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventTallyError::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.EventTallyError.error_message)
}
inline std::string* EventTallyError::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.EventTallyError.error_message)
  return _s;
}
inline const std::string& EventTallyError::_internal_error_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_message_.Get();
}
inline void EventTallyError::_internal_set_error_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* EventTallyError::_internal_mutable_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* EventTallyError::release_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.EventTallyError.error_message)
  return _impl_.error_message_.Release();
}
inline void EventTallyError::set_allocated_error_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.EventTallyError.error_message)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace group
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2fgroup_2fv1_2fevents_2eproto_2epb_2eh
