// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/group/v1/types.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2fgroup_2fv1_2ftypes_2eproto_2epb_2eh
#define cosmos_2fgroup_2fv1_2ftypes_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/duration.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "google/protobuf/any.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fgroup_2fv1_2ftypes_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fgroup_2fv1_2ftypes_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto;
namespace cosmos {
namespace group {
namespace v1 {
class DecisionPolicyWindows;
struct DecisionPolicyWindowsDefaultTypeInternal;
extern DecisionPolicyWindowsDefaultTypeInternal _DecisionPolicyWindows_default_instance_;
class GroupInfo;
struct GroupInfoDefaultTypeInternal;
extern GroupInfoDefaultTypeInternal _GroupInfo_default_instance_;
class GroupMember;
struct GroupMemberDefaultTypeInternal;
extern GroupMemberDefaultTypeInternal _GroupMember_default_instance_;
class GroupPolicyInfo;
struct GroupPolicyInfoDefaultTypeInternal;
extern GroupPolicyInfoDefaultTypeInternal _GroupPolicyInfo_default_instance_;
class Member;
struct MemberDefaultTypeInternal;
extern MemberDefaultTypeInternal _Member_default_instance_;
class MemberRequest;
struct MemberRequestDefaultTypeInternal;
extern MemberRequestDefaultTypeInternal _MemberRequest_default_instance_;
class PercentageDecisionPolicy;
struct PercentageDecisionPolicyDefaultTypeInternal;
extern PercentageDecisionPolicyDefaultTypeInternal _PercentageDecisionPolicy_default_instance_;
class Proposal;
struct ProposalDefaultTypeInternal;
extern ProposalDefaultTypeInternal _Proposal_default_instance_;
class TallyResult;
struct TallyResultDefaultTypeInternal;
extern TallyResultDefaultTypeInternal _TallyResult_default_instance_;
class ThresholdDecisionPolicy;
struct ThresholdDecisionPolicyDefaultTypeInternal;
extern ThresholdDecisionPolicyDefaultTypeInternal _ThresholdDecisionPolicy_default_instance_;
class Vote;
struct VoteDefaultTypeInternal;
extern VoteDefaultTypeInternal _Vote_default_instance_;
}  // namespace v1
}  // namespace group
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace group {
namespace v1 {
enum VoteOption : int {
  VOTE_OPTION_UNSPECIFIED = 0,
  VOTE_OPTION_YES = 1,
  VOTE_OPTION_ABSTAIN = 2,
  VOTE_OPTION_NO = 3,
  VOTE_OPTION_NO_WITH_VETO = 4,
  VoteOption_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  VoteOption_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool VoteOption_IsValid(int value);
extern const uint32_t VoteOption_internal_data_[];
constexpr VoteOption VoteOption_MIN = static_cast<VoteOption>(0);
constexpr VoteOption VoteOption_MAX = static_cast<VoteOption>(4);
constexpr int VoteOption_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
VoteOption_descriptor();
template <typename T>
const std::string& VoteOption_Name(T value) {
  static_assert(std::is_same<T, VoteOption>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to VoteOption_Name().");
  return VoteOption_Name(static_cast<VoteOption>(value));
}
template <>
inline const std::string& VoteOption_Name(VoteOption value) {
  return ::google::protobuf::internal::NameOfDenseEnum<VoteOption_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool VoteOption_Parse(absl::string_view name, VoteOption* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VoteOption>(
      VoteOption_descriptor(), name, value);
}
enum ProposalStatus : int {
  PROPOSAL_STATUS_UNSPECIFIED = 0,
  PROPOSAL_STATUS_SUBMITTED = 1,
  PROPOSAL_STATUS_ACCEPTED = 2,
  PROPOSAL_STATUS_REJECTED = 3,
  PROPOSAL_STATUS_ABORTED = 4,
  PROPOSAL_STATUS_WITHDRAWN = 5,
  ProposalStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ProposalStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ProposalStatus_IsValid(int value);
extern const uint32_t ProposalStatus_internal_data_[];
constexpr ProposalStatus ProposalStatus_MIN = static_cast<ProposalStatus>(0);
constexpr ProposalStatus ProposalStatus_MAX = static_cast<ProposalStatus>(5);
constexpr int ProposalStatus_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
ProposalStatus_descriptor();
template <typename T>
const std::string& ProposalStatus_Name(T value) {
  static_assert(std::is_same<T, ProposalStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ProposalStatus_Name().");
  return ProposalStatus_Name(static_cast<ProposalStatus>(value));
}
template <>
inline const std::string& ProposalStatus_Name(ProposalStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ProposalStatus_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool ProposalStatus_Parse(absl::string_view name, ProposalStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProposalStatus>(
      ProposalStatus_descriptor(), name, value);
}
enum ProposalExecutorResult : int {
  PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED = 0,
  PROPOSAL_EXECUTOR_RESULT_NOT_RUN = 1,
  PROPOSAL_EXECUTOR_RESULT_SUCCESS = 2,
  PROPOSAL_EXECUTOR_RESULT_FAILURE = 3,
  ProposalExecutorResult_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ProposalExecutorResult_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ProposalExecutorResult_IsValid(int value);
extern const uint32_t ProposalExecutorResult_internal_data_[];
constexpr ProposalExecutorResult ProposalExecutorResult_MIN = static_cast<ProposalExecutorResult>(0);
constexpr ProposalExecutorResult ProposalExecutorResult_MAX = static_cast<ProposalExecutorResult>(3);
constexpr int ProposalExecutorResult_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
ProposalExecutorResult_descriptor();
template <typename T>
const std::string& ProposalExecutorResult_Name(T value) {
  static_assert(std::is_same<T, ProposalExecutorResult>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ProposalExecutorResult_Name().");
  return ProposalExecutorResult_Name(static_cast<ProposalExecutorResult>(value));
}
template <>
inline const std::string& ProposalExecutorResult_Name(ProposalExecutorResult value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ProposalExecutorResult_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool ProposalExecutorResult_Parse(absl::string_view name, ProposalExecutorResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProposalExecutorResult>(
      ProposalExecutorResult_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TallyResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.TallyResult) */ {
 public:
  inline TallyResult() : TallyResult(nullptr) {}
  ~TallyResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TallyResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TallyResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TallyResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline TallyResult(const TallyResult& from) : TallyResult(nullptr, from) {}
  inline TallyResult(TallyResult&& from) noexcept
      : TallyResult(nullptr, std::move(from)) {}
  inline TallyResult& operator=(const TallyResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline TallyResult& operator=(TallyResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TallyResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const TallyResult* internal_default_instance() {
    return reinterpret_cast<const TallyResult*>(
        &_TallyResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(TallyResult& a, TallyResult& b) { a.Swap(&b); }
  inline void Swap(TallyResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TallyResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TallyResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TallyResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TallyResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TallyResult& from) { TallyResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TallyResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.TallyResult"; }

 protected:
  explicit TallyResult(::google::protobuf::Arena* arena);
  TallyResult(::google::protobuf::Arena* arena, const TallyResult& from);
  TallyResult(::google::protobuf::Arena* arena, TallyResult&& from) noexcept
      : TallyResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kYesCountFieldNumber = 1,
    kAbstainCountFieldNumber = 2,
    kNoCountFieldNumber = 3,
    kNoWithVetoCountFieldNumber = 4,
  };
  // string yes_count = 1 [json_name = "yesCount"];
  void clear_yes_count() ;
  const std::string& yes_count() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_yes_count(Arg_&& arg, Args_... args);
  std::string* mutable_yes_count();
  PROTOBUF_NODISCARD std::string* release_yes_count();
  void set_allocated_yes_count(std::string* value);

  private:
  const std::string& _internal_yes_count() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_yes_count(
      const std::string& value);
  std::string* _internal_mutable_yes_count();

  public:
  // string abstain_count = 2 [json_name = "abstainCount"];
  void clear_abstain_count() ;
  const std::string& abstain_count() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_abstain_count(Arg_&& arg, Args_... args);
  std::string* mutable_abstain_count();
  PROTOBUF_NODISCARD std::string* release_abstain_count();
  void set_allocated_abstain_count(std::string* value);

  private:
  const std::string& _internal_abstain_count() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_abstain_count(
      const std::string& value);
  std::string* _internal_mutable_abstain_count();

  public:
  // string no_count = 3 [json_name = "noCount"];
  void clear_no_count() ;
  const std::string& no_count() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_no_count(Arg_&& arg, Args_... args);
  std::string* mutable_no_count();
  PROTOBUF_NODISCARD std::string* release_no_count();
  void set_allocated_no_count(std::string* value);

  private:
  const std::string& _internal_no_count() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_no_count(
      const std::string& value);
  std::string* _internal_mutable_no_count();

  public:
  // string no_with_veto_count = 4 [json_name = "noWithVetoCount"];
  void clear_no_with_veto_count() ;
  const std::string& no_with_veto_count() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_no_with_veto_count(Arg_&& arg, Args_... args);
  std::string* mutable_no_with_veto_count();
  PROTOBUF_NODISCARD std::string* release_no_with_veto_count();
  void set_allocated_no_with_veto_count(std::string* value);

  private:
  const std::string& _internal_no_with_veto_count() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_no_with_veto_count(
      const std::string& value);
  std::string* _internal_mutable_no_with_veto_count();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.TallyResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      84, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TallyResult& from_msg);
    ::google::protobuf::internal::ArenaStringPtr yes_count_;
    ::google::protobuf::internal::ArenaStringPtr abstain_count_;
    ::google::protobuf::internal::ArenaStringPtr no_count_;
    ::google::protobuf::internal::ArenaStringPtr no_with_veto_count_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class MemberRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.MemberRequest) */ {
 public:
  inline MemberRequest() : MemberRequest(nullptr) {}
  ~MemberRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MemberRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MemberRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MemberRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline MemberRequest(const MemberRequest& from) : MemberRequest(nullptr, from) {}
  inline MemberRequest(MemberRequest&& from) noexcept
      : MemberRequest(nullptr, std::move(from)) {}
  inline MemberRequest& operator=(const MemberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberRequest& operator=(MemberRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemberRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemberRequest* internal_default_instance() {
    return reinterpret_cast<const MemberRequest*>(
        &_MemberRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(MemberRequest& a, MemberRequest& b) { a.Swap(&b); }
  inline void Swap(MemberRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemberRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemberRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MemberRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MemberRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MemberRequest& from) { MemberRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MemberRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.MemberRequest"; }

 protected:
  explicit MemberRequest(::google::protobuf::Arena* arena);
  MemberRequest(::google::protobuf::Arena* arena, const MemberRequest& from);
  MemberRequest(::google::protobuf::Arena* arena, MemberRequest&& from) noexcept
      : MemberRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAddressFieldNumber = 1,
    kWeightFieldNumber = 2,
    kMetadataFieldNumber = 3,
  };
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* value);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // string weight = 2 [json_name = "weight"];
  void clear_weight() ;
  const std::string& weight() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_weight(Arg_&& arg, Args_... args);
  std::string* mutable_weight();
  PROTOBUF_NODISCARD std::string* release_weight();
  void set_allocated_weight(std::string* value);

  private:
  const std::string& _internal_weight() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_weight(
      const std::string& value);
  std::string* _internal_mutable_weight();

  public:
  // string metadata = 3 [json_name = "metadata"];
  void clear_metadata() ;
  const std::string& metadata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* value);

  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(
      const std::string& value);
  std::string* _internal_mutable_metadata();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MemberRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      59, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MemberRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::google::protobuf::internal::ArenaStringPtr weight_;
    ::google::protobuf::internal::ArenaStringPtr metadata_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Vote final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.Vote) */ {
 public:
  inline Vote() : Vote(nullptr) {}
  ~Vote() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Vote* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Vote));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Vote(
      ::google::protobuf::internal::ConstantInitialized);

  inline Vote(const Vote& from) : Vote(nullptr, from) {}
  inline Vote(Vote&& from) noexcept
      : Vote(nullptr, std::move(from)) {}
  inline Vote& operator=(const Vote& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vote& operator=(Vote&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vote& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vote* internal_default_instance() {
    return reinterpret_cast<const Vote*>(
        &_Vote_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(Vote& a, Vote& b) { a.Swap(&b); }
  inline void Swap(Vote* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vote* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vote* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Vote>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Vote& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Vote& from) { Vote::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Vote* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.Vote"; }

 protected:
  explicit Vote(::google::protobuf::Arena* arena);
  Vote(::google::protobuf::Arena* arena, const Vote& from);
  Vote(::google::protobuf::Arena* arena, Vote&& from) noexcept
      : Vote(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVoterFieldNumber = 2,
    kMetadataFieldNumber = 4,
    kSubmitTimeFieldNumber = 5,
    kProposalIdFieldNumber = 1,
    kOptionFieldNumber = 3,
  };
  // string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_voter() ;
  const std::string& voter() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_voter(Arg_&& arg, Args_... args);
  std::string* mutable_voter();
  PROTOBUF_NODISCARD std::string* release_voter();
  void set_allocated_voter(std::string* value);

  private:
  const std::string& _internal_voter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_voter(
      const std::string& value);
  std::string* _internal_mutable_voter();

  public:
  // string metadata = 4 [json_name = "metadata"];
  void clear_metadata() ;
  const std::string& metadata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* value);

  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(
      const std::string& value);
  std::string* _internal_mutable_metadata();

  public:
  // .google.protobuf.Timestamp submit_time = 5 [json_name = "submitTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  bool has_submit_time() const;
  void clear_submit_time() ;
  const ::google::protobuf::Timestamp& submit_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_submit_time();
  ::google::protobuf::Timestamp* mutable_submit_time();
  void set_allocated_submit_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_submit_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_submit_time();

  private:
  const ::google::protobuf::Timestamp& _internal_submit_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_submit_time();

  public:
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // .cosmos.group.v1.VoteOption option = 3 [json_name = "option"];
  void clear_option() ;
  ::cosmos::group::v1::VoteOption option() const;
  void set_option(::cosmos::group::v1::VoteOption value);

  private:
  ::cosmos::group::v1::VoteOption _internal_option() const;
  void _internal_set_option(::cosmos::group::v1::VoteOption value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.Vote)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      42, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Vote& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr voter_;
    ::google::protobuf::internal::ArenaStringPtr metadata_;
    ::google::protobuf::Timestamp* submit_time_;
    ::uint64_t proposal_id_;
    int option_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Proposal final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.Proposal) */ {
 public:
  inline Proposal() : Proposal(nullptr) {}
  ~Proposal() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Proposal* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Proposal));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Proposal(
      ::google::protobuf::internal::ConstantInitialized);

  inline Proposal(const Proposal& from) : Proposal(nullptr, from) {}
  inline Proposal(Proposal&& from) noexcept
      : Proposal(nullptr, std::move(from)) {}
  inline Proposal& operator=(const Proposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proposal& operator=(Proposal&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Proposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const Proposal* internal_default_instance() {
    return reinterpret_cast<const Proposal*>(
        &_Proposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(Proposal& a, Proposal& b) { a.Swap(&b); }
  inline void Swap(Proposal* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Proposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Proposal* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Proposal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Proposal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Proposal& from) { Proposal::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Proposal* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.Proposal"; }

 protected:
  explicit Proposal(::google::protobuf::Arena* arena);
  Proposal(::google::protobuf::Arena* arena, const Proposal& from);
  Proposal(::google::protobuf::Arena* arena, Proposal&& from) noexcept
      : Proposal(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kProposersFieldNumber = 4,
    kMessagesFieldNumber = 12,
    kGroupPolicyAddressFieldNumber = 2,
    kMetadataFieldNumber = 3,
    kTitleFieldNumber = 13,
    kSummaryFieldNumber = 14,
    kSubmitTimeFieldNumber = 5,
    kFinalTallyResultFieldNumber = 9,
    kVotingPeriodEndFieldNumber = 10,
    kIdFieldNumber = 1,
    kGroupVersionFieldNumber = 6,
    kGroupPolicyVersionFieldNumber = 7,
    kStatusFieldNumber = 8,
    kExecutorResultFieldNumber = 11,
  };
  // repeated string proposers = 4 [json_name = "proposers", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  int proposers_size() const;
  private:
  int _internal_proposers_size() const;

  public:
  void clear_proposers() ;
  const std::string& proposers(int index) const;
  std::string* mutable_proposers(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proposers(int index, Arg_&& value, Args_... args);
  std::string* add_proposers();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_proposers(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& proposers() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_proposers();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_proposers() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_proposers();

  public:
  // repeated .google.protobuf.Any messages = 12 [json_name = "messages"];
  int messages_size() const;
  private:
  int _internal_messages_size() const;

  public:
  void clear_messages() ;
  ::google::protobuf::Any* mutable_messages(int index);
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* mutable_messages();

  private:
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& _internal_messages() const;
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* _internal_mutable_messages();
  public:
  const ::google::protobuf::Any& messages(int index) const;
  ::google::protobuf::Any* add_messages();
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& messages() const;
  // string group_policy_address = 2 [json_name = "groupPolicyAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_group_policy_address() ;
  const std::string& group_policy_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_group_policy_address(Arg_&& arg, Args_... args);
  std::string* mutable_group_policy_address();
  PROTOBUF_NODISCARD std::string* release_group_policy_address();
  void set_allocated_group_policy_address(std::string* value);

  private:
  const std::string& _internal_group_policy_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_policy_address(
      const std::string& value);
  std::string* _internal_mutable_group_policy_address();

  public:
  // string metadata = 3 [json_name = "metadata"];
  void clear_metadata() ;
  const std::string& metadata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* value);

  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(
      const std::string& value);
  std::string* _internal_mutable_metadata();

  public:
  // string title = 13 [json_name = "title", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.47"];
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string summary = 14 [json_name = "summary", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.47"];
  void clear_summary() ;
  const std::string& summary() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_summary(Arg_&& arg, Args_... args);
  std::string* mutable_summary();
  PROTOBUF_NODISCARD std::string* release_summary();
  void set_allocated_summary(std::string* value);

  private:
  const std::string& _internal_summary() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_summary(
      const std::string& value);
  std::string* _internal_mutable_summary();

  public:
  // .google.protobuf.Timestamp submit_time = 5 [json_name = "submitTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  bool has_submit_time() const;
  void clear_submit_time() ;
  const ::google::protobuf::Timestamp& submit_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_submit_time();
  ::google::protobuf::Timestamp* mutable_submit_time();
  void set_allocated_submit_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_submit_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_submit_time();

  private:
  const ::google::protobuf::Timestamp& _internal_submit_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_submit_time();

  public:
  // .cosmos.group.v1.TallyResult final_tally_result = 9 [json_name = "finalTallyResult", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_final_tally_result() const;
  void clear_final_tally_result() ;
  const ::cosmos::group::v1::TallyResult& final_tally_result() const;
  PROTOBUF_NODISCARD ::cosmos::group::v1::TallyResult* release_final_tally_result();
  ::cosmos::group::v1::TallyResult* mutable_final_tally_result();
  void set_allocated_final_tally_result(::cosmos::group::v1::TallyResult* value);
  void unsafe_arena_set_allocated_final_tally_result(::cosmos::group::v1::TallyResult* value);
  ::cosmos::group::v1::TallyResult* unsafe_arena_release_final_tally_result();

  private:
  const ::cosmos::group::v1::TallyResult& _internal_final_tally_result() const;
  ::cosmos::group::v1::TallyResult* _internal_mutable_final_tally_result();

  public:
  // .google.protobuf.Timestamp voting_period_end = 10 [json_name = "votingPeriodEnd", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  bool has_voting_period_end() const;
  void clear_voting_period_end() ;
  const ::google::protobuf::Timestamp& voting_period_end() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_voting_period_end();
  ::google::protobuf::Timestamp* mutable_voting_period_end();
  void set_allocated_voting_period_end(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_voting_period_end(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_voting_period_end();

  private:
  const ::google::protobuf::Timestamp& _internal_voting_period_end() const;
  ::google::protobuf::Timestamp* _internal_mutable_voting_period_end();

  public:
  // uint64 id = 1 [json_name = "id"];
  void clear_id() ;
  ::uint64_t id() const;
  void set_id(::uint64_t value);

  private:
  ::uint64_t _internal_id() const;
  void _internal_set_id(::uint64_t value);

  public:
  // uint64 group_version = 6 [json_name = "groupVersion"];
  void clear_group_version() ;
  ::uint64_t group_version() const;
  void set_group_version(::uint64_t value);

  private:
  ::uint64_t _internal_group_version() const;
  void _internal_set_group_version(::uint64_t value);

  public:
  // uint64 group_policy_version = 7 [json_name = "groupPolicyVersion"];
  void clear_group_policy_version() ;
  ::uint64_t group_policy_version() const;
  void set_group_policy_version(::uint64_t value);

  private:
  ::uint64_t _internal_group_policy_version() const;
  void _internal_set_group_policy_version(::uint64_t value);

  public:
  // .cosmos.group.v1.ProposalStatus status = 8 [json_name = "status"];
  void clear_status() ;
  ::cosmos::group::v1::ProposalStatus status() const;
  void set_status(::cosmos::group::v1::ProposalStatus value);

  private:
  ::cosmos::group::v1::ProposalStatus _internal_status() const;
  void _internal_set_status(::cosmos::group::v1::ProposalStatus value);

  public:
  // .cosmos.group.v1.ProposalExecutorResult executor_result = 11 [json_name = "executorResult"];
  void clear_executor_result() ;
  ::cosmos::group::v1::ProposalExecutorResult executor_result() const;
  void set_executor_result(::cosmos::group::v1::ProposalExecutorResult value);

  private:
  ::cosmos::group::v1::ProposalExecutorResult _internal_executor_result() const;
  void _internal_set_executor_result(::cosmos::group::v1::ProposalExecutorResult value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.Proposal)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 14, 4,
      90, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Proposal& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> proposers_;
    ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > messages_;
    ::google::protobuf::internal::ArenaStringPtr group_policy_address_;
    ::google::protobuf::internal::ArenaStringPtr metadata_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr summary_;
    ::google::protobuf::Timestamp* submit_time_;
    ::cosmos::group::v1::TallyResult* final_tally_result_;
    ::google::protobuf::Timestamp* voting_period_end_;
    ::uint64_t id_;
    ::uint64_t group_version_;
    ::uint64_t group_policy_version_;
    int status_;
    int executor_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Member final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.Member) */ {
 public:
  inline Member() : Member(nullptr) {}
  ~Member() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Member* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Member));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Member(
      ::google::protobuf::internal::ConstantInitialized);

  inline Member(const Member& from) : Member(nullptr, from) {}
  inline Member(Member&& from) noexcept
      : Member(nullptr, std::move(from)) {}
  inline Member& operator=(const Member& from) {
    CopyFrom(from);
    return *this;
  }
  inline Member& operator=(Member&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Member& default_instance() {
    return *internal_default_instance();
  }
  static inline const Member* internal_default_instance() {
    return reinterpret_cast<const Member*>(
        &_Member_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Member& a, Member& b) { a.Swap(&b); }
  inline void Swap(Member* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Member* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Member* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Member>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Member& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Member& from) { Member::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Member* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.Member"; }

 protected:
  explicit Member(::google::protobuf::Arena* arena);
  Member(::google::protobuf::Arena* arena, const Member& from);
  Member(::google::protobuf::Arena* arena, Member&& from) noexcept
      : Member(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAddressFieldNumber = 1,
    kWeightFieldNumber = 2,
    kMetadataFieldNumber = 3,
    kAddedAtFieldNumber = 4,
  };
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* value);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // string weight = 2 [json_name = "weight"];
  void clear_weight() ;
  const std::string& weight() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_weight(Arg_&& arg, Args_... args);
  std::string* mutable_weight();
  PROTOBUF_NODISCARD std::string* release_weight();
  void set_allocated_weight(std::string* value);

  private:
  const std::string& _internal_weight() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_weight(
      const std::string& value);
  std::string* _internal_mutable_weight();

  public:
  // string metadata = 3 [json_name = "metadata"];
  void clear_metadata() ;
  const std::string& metadata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* value);

  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(
      const std::string& value);
  std::string* _internal_mutable_metadata();

  public:
  // .google.protobuf.Timestamp added_at = 4 [json_name = "addedAt", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  bool has_added_at() const;
  void clear_added_at() ;
  const ::google::protobuf::Timestamp& added_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_added_at();
  ::google::protobuf::Timestamp* mutable_added_at();
  void set_allocated_added_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_added_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_added_at();

  private:
  const ::google::protobuf::Timestamp& _internal_added_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_added_at();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.Member)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Member& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::google::protobuf::internal::ArenaStringPtr weight_;
    ::google::protobuf::internal::ArenaStringPtr metadata_;
    ::google::protobuf::Timestamp* added_at_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class GroupPolicyInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.GroupPolicyInfo) */ {
 public:
  inline GroupPolicyInfo() : GroupPolicyInfo(nullptr) {}
  ~GroupPolicyInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GroupPolicyInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GroupPolicyInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GroupPolicyInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline GroupPolicyInfo(const GroupPolicyInfo& from) : GroupPolicyInfo(nullptr, from) {}
  inline GroupPolicyInfo(GroupPolicyInfo&& from) noexcept
      : GroupPolicyInfo(nullptr, std::move(from)) {}
  inline GroupPolicyInfo& operator=(const GroupPolicyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupPolicyInfo& operator=(GroupPolicyInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupPolicyInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupPolicyInfo* internal_default_instance() {
    return reinterpret_cast<const GroupPolicyInfo*>(
        &_GroupPolicyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(GroupPolicyInfo& a, GroupPolicyInfo& b) { a.Swap(&b); }
  inline void Swap(GroupPolicyInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupPolicyInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupPolicyInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GroupPolicyInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GroupPolicyInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GroupPolicyInfo& from) { GroupPolicyInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GroupPolicyInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.GroupPolicyInfo"; }

 protected:
  explicit GroupPolicyInfo(::google::protobuf::Arena* arena);
  GroupPolicyInfo(::google::protobuf::Arena* arena, const GroupPolicyInfo& from);
  GroupPolicyInfo(::google::protobuf::Arena* arena, GroupPolicyInfo&& from) noexcept
      : GroupPolicyInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAddressFieldNumber = 1,
    kAdminFieldNumber = 3,
    kMetadataFieldNumber = 4,
    kDecisionPolicyFieldNumber = 6,
    kCreatedAtFieldNumber = 7,
    kGroupIdFieldNumber = 2,
    kVersionFieldNumber = 5,
  };
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* value);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // string admin = 3 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_admin() ;
  const std::string& admin() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_admin(Arg_&& arg, Args_... args);
  std::string* mutable_admin();
  PROTOBUF_NODISCARD std::string* release_admin();
  void set_allocated_admin(std::string* value);

  private:
  const std::string& _internal_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin(
      const std::string& value);
  std::string* _internal_mutable_admin();

  public:
  // string metadata = 4 [json_name = "metadata"];
  void clear_metadata() ;
  const std::string& metadata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* value);

  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(
      const std::string& value);
  std::string* _internal_mutable_metadata();

  public:
  // .google.protobuf.Any decision_policy = 6 [json_name = "decisionPolicy", (.cosmos_proto.accepts_interface) = "cosmos.group.v1.DecisionPolicy"];
  bool has_decision_policy() const;
  void clear_decision_policy() ;
  const ::google::protobuf::Any& decision_policy() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_decision_policy();
  ::google::protobuf::Any* mutable_decision_policy();
  void set_allocated_decision_policy(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_decision_policy(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_decision_policy();

  private:
  const ::google::protobuf::Any& _internal_decision_policy() const;
  ::google::protobuf::Any* _internal_mutable_decision_policy();

  public:
  // .google.protobuf.Timestamp created_at = 7 [json_name = "createdAt", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  bool has_created_at() const;
  void clear_created_at() ;
  const ::google::protobuf::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_created_at();
  ::google::protobuf::Timestamp* mutable_created_at();
  void set_allocated_created_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_created_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_created_at();

  private:
  const ::google::protobuf::Timestamp& _internal_created_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_created_at();

  public:
  // uint64 group_id = 2 [json_name = "groupId"];
  void clear_group_id() ;
  ::uint64_t group_id() const;
  void set_group_id(::uint64_t value);

  private:
  ::uint64_t _internal_group_id() const;
  void _internal_set_group_id(::uint64_t value);

  public:
  // uint64 version = 5 [json_name = "version"];
  void clear_version() ;
  ::uint64_t version() const;
  void set_version(::uint64_t value);

  private:
  ::uint64_t _internal_version() const;
  void _internal_set_version(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.GroupPolicyInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 2,
      60, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GroupPolicyInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::google::protobuf::internal::ArenaStringPtr admin_;
    ::google::protobuf::internal::ArenaStringPtr metadata_;
    ::google::protobuf::Any* decision_policy_;
    ::google::protobuf::Timestamp* created_at_;
    ::uint64_t group_id_;
    ::uint64_t version_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class GroupInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.GroupInfo) */ {
 public:
  inline GroupInfo() : GroupInfo(nullptr) {}
  ~GroupInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GroupInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GroupInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GroupInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline GroupInfo(const GroupInfo& from) : GroupInfo(nullptr, from) {}
  inline GroupInfo(GroupInfo&& from) noexcept
      : GroupInfo(nullptr, std::move(from)) {}
  inline GroupInfo& operator=(const GroupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupInfo& operator=(GroupInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupInfo* internal_default_instance() {
    return reinterpret_cast<const GroupInfo*>(
        &_GroupInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(GroupInfo& a, GroupInfo& b) { a.Swap(&b); }
  inline void Swap(GroupInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GroupInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GroupInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GroupInfo& from) { GroupInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GroupInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.GroupInfo"; }

 protected:
  explicit GroupInfo(::google::protobuf::Arena* arena);
  GroupInfo(::google::protobuf::Arena* arena, const GroupInfo& from);
  GroupInfo(::google::protobuf::Arena* arena, GroupInfo&& from) noexcept
      : GroupInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAdminFieldNumber = 2,
    kMetadataFieldNumber = 3,
    kTotalWeightFieldNumber = 5,
    kCreatedAtFieldNumber = 6,
    kIdFieldNumber = 1,
    kVersionFieldNumber = 4,
  };
  // string admin = 2 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_admin() ;
  const std::string& admin() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_admin(Arg_&& arg, Args_... args);
  std::string* mutable_admin();
  PROTOBUF_NODISCARD std::string* release_admin();
  void set_allocated_admin(std::string* value);

  private:
  const std::string& _internal_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin(
      const std::string& value);
  std::string* _internal_mutable_admin();

  public:
  // string metadata = 3 [json_name = "metadata"];
  void clear_metadata() ;
  const std::string& metadata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* value);

  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(
      const std::string& value);
  std::string* _internal_mutable_metadata();

  public:
  // string total_weight = 5 [json_name = "totalWeight"];
  void clear_total_weight() ;
  const std::string& total_weight() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_total_weight(Arg_&& arg, Args_... args);
  std::string* mutable_total_weight();
  PROTOBUF_NODISCARD std::string* release_total_weight();
  void set_allocated_total_weight(std::string* value);

  private:
  const std::string& _internal_total_weight() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_total_weight(
      const std::string& value);
  std::string* _internal_mutable_total_weight();

  public:
  // .google.protobuf.Timestamp created_at = 6 [json_name = "createdAt", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  bool has_created_at() const;
  void clear_created_at() ;
  const ::google::protobuf::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_created_at();
  ::google::protobuf::Timestamp* mutable_created_at();
  void set_allocated_created_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_created_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_created_at();

  private:
  const ::google::protobuf::Timestamp& _internal_created_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_created_at();

  public:
  // uint64 id = 1 [json_name = "id"];
  void clear_id() ;
  ::uint64_t id() const;
  void set_id(::uint64_t value);

  private:
  ::uint64_t _internal_id() const;
  void _internal_set_id(::uint64_t value);

  public:
  // uint64 version = 4 [json_name = "version"];
  void clear_version() ;
  ::uint64_t version() const;
  void set_version(::uint64_t value);

  private:
  ::uint64_t _internal_version() const;
  void _internal_set_version(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.GroupInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      59, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GroupInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr admin_;
    ::google::protobuf::internal::ArenaStringPtr metadata_;
    ::google::protobuf::internal::ArenaStringPtr total_weight_;
    ::google::protobuf::Timestamp* created_at_;
    ::uint64_t id_;
    ::uint64_t version_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class DecisionPolicyWindows final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.DecisionPolicyWindows) */ {
 public:
  inline DecisionPolicyWindows() : DecisionPolicyWindows(nullptr) {}
  ~DecisionPolicyWindows() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DecisionPolicyWindows* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DecisionPolicyWindows));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DecisionPolicyWindows(
      ::google::protobuf::internal::ConstantInitialized);

  inline DecisionPolicyWindows(const DecisionPolicyWindows& from) : DecisionPolicyWindows(nullptr, from) {}
  inline DecisionPolicyWindows(DecisionPolicyWindows&& from) noexcept
      : DecisionPolicyWindows(nullptr, std::move(from)) {}
  inline DecisionPolicyWindows& operator=(const DecisionPolicyWindows& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecisionPolicyWindows& operator=(DecisionPolicyWindows&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DecisionPolicyWindows& default_instance() {
    return *internal_default_instance();
  }
  static inline const DecisionPolicyWindows* internal_default_instance() {
    return reinterpret_cast<const DecisionPolicyWindows*>(
        &_DecisionPolicyWindows_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(DecisionPolicyWindows& a, DecisionPolicyWindows& b) { a.Swap(&b); }
  inline void Swap(DecisionPolicyWindows* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecisionPolicyWindows* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DecisionPolicyWindows* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DecisionPolicyWindows>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DecisionPolicyWindows& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DecisionPolicyWindows& from) { DecisionPolicyWindows::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DecisionPolicyWindows* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.DecisionPolicyWindows"; }

 protected:
  explicit DecisionPolicyWindows(::google::protobuf::Arena* arena);
  DecisionPolicyWindows(::google::protobuf::Arena* arena, const DecisionPolicyWindows& from);
  DecisionPolicyWindows(::google::protobuf::Arena* arena, DecisionPolicyWindows&& from) noexcept
      : DecisionPolicyWindows(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVotingPeriodFieldNumber = 1,
    kMinExecutionPeriodFieldNumber = 2,
  };
  // .google.protobuf.Duration voting_period = 1 [json_name = "votingPeriod", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];
  bool has_voting_period() const;
  void clear_voting_period() ;
  const ::google::protobuf::Duration& voting_period() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_voting_period();
  ::google::protobuf::Duration* mutable_voting_period();
  void set_allocated_voting_period(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_voting_period(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_voting_period();

  private:
  const ::google::protobuf::Duration& _internal_voting_period() const;
  ::google::protobuf::Duration* _internal_mutable_voting_period();

  public:
  // .google.protobuf.Duration min_execution_period = 2 [json_name = "minExecutionPeriod", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];
  bool has_min_execution_period() const;
  void clear_min_execution_period() ;
  const ::google::protobuf::Duration& min_execution_period() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_min_execution_period();
  ::google::protobuf::Duration* mutable_min_execution_period();
  void set_allocated_min_execution_period(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_min_execution_period(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_min_execution_period();

  private:
  const ::google::protobuf::Duration& _internal_min_execution_period() const;
  ::google::protobuf::Duration* _internal_mutable_min_execution_period();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.DecisionPolicyWindows)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DecisionPolicyWindows& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Duration* voting_period_;
    ::google::protobuf::Duration* min_execution_period_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class ThresholdDecisionPolicy final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.ThresholdDecisionPolicy) */ {
 public:
  inline ThresholdDecisionPolicy() : ThresholdDecisionPolicy(nullptr) {}
  ~ThresholdDecisionPolicy() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ThresholdDecisionPolicy* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ThresholdDecisionPolicy));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ThresholdDecisionPolicy(
      ::google::protobuf::internal::ConstantInitialized);

  inline ThresholdDecisionPolicy(const ThresholdDecisionPolicy& from) : ThresholdDecisionPolicy(nullptr, from) {}
  inline ThresholdDecisionPolicy(ThresholdDecisionPolicy&& from) noexcept
      : ThresholdDecisionPolicy(nullptr, std::move(from)) {}
  inline ThresholdDecisionPolicy& operator=(const ThresholdDecisionPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThresholdDecisionPolicy& operator=(ThresholdDecisionPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThresholdDecisionPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThresholdDecisionPolicy* internal_default_instance() {
    return reinterpret_cast<const ThresholdDecisionPolicy*>(
        &_ThresholdDecisionPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ThresholdDecisionPolicy& a, ThresholdDecisionPolicy& b) { a.Swap(&b); }
  inline void Swap(ThresholdDecisionPolicy* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThresholdDecisionPolicy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThresholdDecisionPolicy* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ThresholdDecisionPolicy>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ThresholdDecisionPolicy& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ThresholdDecisionPolicy& from) { ThresholdDecisionPolicy::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ThresholdDecisionPolicy* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.ThresholdDecisionPolicy"; }

 protected:
  explicit ThresholdDecisionPolicy(::google::protobuf::Arena* arena);
  ThresholdDecisionPolicy(::google::protobuf::Arena* arena, const ThresholdDecisionPolicy& from);
  ThresholdDecisionPolicy(::google::protobuf::Arena* arena, ThresholdDecisionPolicy&& from) noexcept
      : ThresholdDecisionPolicy(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kThresholdFieldNumber = 1,
    kWindowsFieldNumber = 2,
  };
  // string threshold = 1 [json_name = "threshold"];
  void clear_threshold() ;
  const std::string& threshold() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_threshold(Arg_&& arg, Args_... args);
  std::string* mutable_threshold();
  PROTOBUF_NODISCARD std::string* release_threshold();
  void set_allocated_threshold(std::string* value);

  private:
  const std::string& _internal_threshold() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_threshold(
      const std::string& value);
  std::string* _internal_mutable_threshold();

  public:
  // .cosmos.group.v1.DecisionPolicyWindows windows = 2 [json_name = "windows"];
  bool has_windows() const;
  void clear_windows() ;
  const ::cosmos::group::v1::DecisionPolicyWindows& windows() const;
  PROTOBUF_NODISCARD ::cosmos::group::v1::DecisionPolicyWindows* release_windows();
  ::cosmos::group::v1::DecisionPolicyWindows* mutable_windows();
  void set_allocated_windows(::cosmos::group::v1::DecisionPolicyWindows* value);
  void unsafe_arena_set_allocated_windows(::cosmos::group::v1::DecisionPolicyWindows* value);
  ::cosmos::group::v1::DecisionPolicyWindows* unsafe_arena_release_windows();

  private:
  const ::cosmos::group::v1::DecisionPolicyWindows& _internal_windows() const;
  ::cosmos::group::v1::DecisionPolicyWindows* _internal_mutable_windows();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.ThresholdDecisionPolicy)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      57, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ThresholdDecisionPolicy& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr threshold_;
    ::cosmos::group::v1::DecisionPolicyWindows* windows_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class PercentageDecisionPolicy final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.PercentageDecisionPolicy) */ {
 public:
  inline PercentageDecisionPolicy() : PercentageDecisionPolicy(nullptr) {}
  ~PercentageDecisionPolicy() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PercentageDecisionPolicy* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PercentageDecisionPolicy));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PercentageDecisionPolicy(
      ::google::protobuf::internal::ConstantInitialized);

  inline PercentageDecisionPolicy(const PercentageDecisionPolicy& from) : PercentageDecisionPolicy(nullptr, from) {}
  inline PercentageDecisionPolicy(PercentageDecisionPolicy&& from) noexcept
      : PercentageDecisionPolicy(nullptr, std::move(from)) {}
  inline PercentageDecisionPolicy& operator=(const PercentageDecisionPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline PercentageDecisionPolicy& operator=(PercentageDecisionPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PercentageDecisionPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const PercentageDecisionPolicy* internal_default_instance() {
    return reinterpret_cast<const PercentageDecisionPolicy*>(
        &_PercentageDecisionPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(PercentageDecisionPolicy& a, PercentageDecisionPolicy& b) { a.Swap(&b); }
  inline void Swap(PercentageDecisionPolicy* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PercentageDecisionPolicy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PercentageDecisionPolicy* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PercentageDecisionPolicy>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PercentageDecisionPolicy& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PercentageDecisionPolicy& from) { PercentageDecisionPolicy::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PercentageDecisionPolicy* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.PercentageDecisionPolicy"; }

 protected:
  explicit PercentageDecisionPolicy(::google::protobuf::Arena* arena);
  PercentageDecisionPolicy(::google::protobuf::Arena* arena, const PercentageDecisionPolicy& from);
  PercentageDecisionPolicy(::google::protobuf::Arena* arena, PercentageDecisionPolicy&& from) noexcept
      : PercentageDecisionPolicy(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPercentageFieldNumber = 1,
    kWindowsFieldNumber = 2,
  };
  // string percentage = 1 [json_name = "percentage"];
  void clear_percentage() ;
  const std::string& percentage() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_percentage(Arg_&& arg, Args_... args);
  std::string* mutable_percentage();
  PROTOBUF_NODISCARD std::string* release_percentage();
  void set_allocated_percentage(std::string* value);

  private:
  const std::string& _internal_percentage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_percentage(
      const std::string& value);
  std::string* _internal_mutable_percentage();

  public:
  // .cosmos.group.v1.DecisionPolicyWindows windows = 2 [json_name = "windows"];
  bool has_windows() const;
  void clear_windows() ;
  const ::cosmos::group::v1::DecisionPolicyWindows& windows() const;
  PROTOBUF_NODISCARD ::cosmos::group::v1::DecisionPolicyWindows* release_windows();
  ::cosmos::group::v1::DecisionPolicyWindows* mutable_windows();
  void set_allocated_windows(::cosmos::group::v1::DecisionPolicyWindows* value);
  void unsafe_arena_set_allocated_windows(::cosmos::group::v1::DecisionPolicyWindows* value);
  ::cosmos::group::v1::DecisionPolicyWindows* unsafe_arena_release_windows();

  private:
  const ::cosmos::group::v1::DecisionPolicyWindows& _internal_windows() const;
  ::cosmos::group::v1::DecisionPolicyWindows* _internal_mutable_windows();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.PercentageDecisionPolicy)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      59, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PercentageDecisionPolicy& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr percentage_;
    ::cosmos::group::v1::DecisionPolicyWindows* windows_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class GroupMember final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.group.v1.GroupMember) */ {
 public:
  inline GroupMember() : GroupMember(nullptr) {}
  ~GroupMember() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GroupMember* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GroupMember));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GroupMember(
      ::google::protobuf::internal::ConstantInitialized);

  inline GroupMember(const GroupMember& from) : GroupMember(nullptr, from) {}
  inline GroupMember(GroupMember&& from) noexcept
      : GroupMember(nullptr, std::move(from)) {}
  inline GroupMember& operator=(const GroupMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupMember& operator=(GroupMember&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupMember* internal_default_instance() {
    return reinterpret_cast<const GroupMember*>(
        &_GroupMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(GroupMember& a, GroupMember& b) { a.Swap(&b); }
  inline void Swap(GroupMember* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupMember* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupMember* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GroupMember>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GroupMember& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GroupMember& from) { GroupMember::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GroupMember* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.group.v1.GroupMember"; }

 protected:
  explicit GroupMember(::google::protobuf::Arena* arena);
  GroupMember(::google::protobuf::Arena* arena, const GroupMember& from);
  GroupMember(::google::protobuf::Arena* arena, GroupMember&& from) noexcept
      : GroupMember(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMemberFieldNumber = 2,
    kGroupIdFieldNumber = 1,
  };
  // .cosmos.group.v1.Member member = 2 [json_name = "member"];
  bool has_member() const;
  void clear_member() ;
  const ::cosmos::group::v1::Member& member() const;
  PROTOBUF_NODISCARD ::cosmos::group::v1::Member* release_member();
  ::cosmos::group::v1::Member* mutable_member();
  void set_allocated_member(::cosmos::group::v1::Member* value);
  void unsafe_arena_set_allocated_member(::cosmos::group::v1::Member* value);
  ::cosmos::group::v1::Member* unsafe_arena_release_member();

  private:
  const ::cosmos::group::v1::Member& _internal_member() const;
  ::cosmos::group::v1::Member* _internal_mutable_member();

  public:
  // uint64 group_id = 1 [json_name = "groupId"];
  void clear_group_id() ;
  ::uint64_t group_id() const;
  void set_group_id(::uint64_t value);

  private:
  ::uint64_t _internal_group_id() const;
  void _internal_set_group_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.GroupMember)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GroupMember& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::cosmos::group::v1::Member* member_;
    ::uint64_t group_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftypes_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Member

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void Member::clear_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.ClearToEmpty();
}
inline const std::string& Member::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.Member.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Member::set_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.Member.address)
}
inline std::string* Member::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.Member.address)
  return _s;
}
inline const std::string& Member::_internal_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.address_.Get();
}
inline void Member::_internal_set_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(value, GetArena());
}
inline std::string* Member::_internal_mutable_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.address_.Mutable( GetArena());
}
inline std::string* Member::release_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.Member.address)
  return _impl_.address_.Release();
}
inline void Member::set_allocated_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.Member.address)
}

// string weight = 2 [json_name = "weight"];
inline void Member::clear_weight() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.weight_.ClearToEmpty();
}
inline const std::string& Member::weight() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.Member.weight)
  return _internal_weight();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Member::set_weight(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.weight_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.Member.weight)
}
inline std::string* Member::mutable_weight() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_weight();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.Member.weight)
  return _s;
}
inline const std::string& Member::_internal_weight() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.weight_.Get();
}
inline void Member::_internal_set_weight(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.weight_.Set(value, GetArena());
}
inline std::string* Member::_internal_mutable_weight() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.weight_.Mutable( GetArena());
}
inline std::string* Member::release_weight() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.Member.weight)
  return _impl_.weight_.Release();
}
inline void Member::set_allocated_weight(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.weight_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.weight_.IsDefault()) {
    _impl_.weight_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.Member.weight)
}

// string metadata = 3 [json_name = "metadata"];
inline void Member::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& Member::metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.Member.metadata)
  return _internal_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Member::set_metadata(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.Member.metadata)
}
inline std::string* Member::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.Member.metadata)
  return _s;
}
inline const std::string& Member::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.Get();
}
inline void Member::_internal_set_metadata(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Set(value, GetArena());
}
inline std::string* Member::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.Mutable( GetArena());
}
inline std::string* Member::release_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.Member.metadata)
  return _impl_.metadata_.Release();
}
inline void Member::set_allocated_metadata(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.Member.metadata)
}

// .google.protobuf.Timestamp added_at = 4 [json_name = "addedAt", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
inline bool Member::has_added_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.added_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Member::_internal_added_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.added_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Member::added_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.Member.added_at)
  return _internal_added_at();
}
inline void Member::unsafe_arena_set_allocated_added_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.added_at_);
  }
  _impl_.added_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.Member.added_at)
}
inline ::google::protobuf::Timestamp* Member::release_added_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.added_at_;
  _impl_.added_at_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* Member::unsafe_arena_release_added_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.Member.added_at)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.added_at_;
  _impl_.added_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Member::_internal_mutable_added_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.added_at_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.added_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.added_at_;
}
inline ::google::protobuf::Timestamp* Member::mutable_added_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_added_at();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.Member.added_at)
  return _msg;
}
inline void Member::set_allocated_added_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.added_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.added_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.Member.added_at)
}

// -------------------------------------------------------------------

// MemberRequest

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MemberRequest::clear_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.ClearToEmpty();
}
inline const std::string& MemberRequest::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MemberRequest.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MemberRequest::set_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MemberRequest.address)
}
inline std::string* MemberRequest::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MemberRequest.address)
  return _s;
}
inline const std::string& MemberRequest::_internal_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.address_.Get();
}
inline void MemberRequest::_internal_set_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(value, GetArena());
}
inline std::string* MemberRequest::_internal_mutable_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.address_.Mutable( GetArena());
}
inline std::string* MemberRequest::release_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MemberRequest.address)
  return _impl_.address_.Release();
}
inline void MemberRequest::set_allocated_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MemberRequest.address)
}

// string weight = 2 [json_name = "weight"];
inline void MemberRequest::clear_weight() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.weight_.ClearToEmpty();
}
inline const std::string& MemberRequest::weight() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MemberRequest.weight)
  return _internal_weight();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MemberRequest::set_weight(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.weight_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MemberRequest.weight)
}
inline std::string* MemberRequest::mutable_weight() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_weight();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MemberRequest.weight)
  return _s;
}
inline const std::string& MemberRequest::_internal_weight() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.weight_.Get();
}
inline void MemberRequest::_internal_set_weight(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.weight_.Set(value, GetArena());
}
inline std::string* MemberRequest::_internal_mutable_weight() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.weight_.Mutable( GetArena());
}
inline std::string* MemberRequest::release_weight() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MemberRequest.weight)
  return _impl_.weight_.Release();
}
inline void MemberRequest::set_allocated_weight(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.weight_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.weight_.IsDefault()) {
    _impl_.weight_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MemberRequest.weight)
}

// string metadata = 3 [json_name = "metadata"];
inline void MemberRequest::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& MemberRequest::metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MemberRequest.metadata)
  return _internal_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MemberRequest::set_metadata(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MemberRequest.metadata)
}
inline std::string* MemberRequest::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MemberRequest.metadata)
  return _s;
}
inline const std::string& MemberRequest::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.Get();
}
inline void MemberRequest::_internal_set_metadata(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Set(value, GetArena());
}
inline std::string* MemberRequest::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.Mutable( GetArena());
}
inline std::string* MemberRequest::release_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MemberRequest.metadata)
  return _impl_.metadata_.Release();
}
inline void MemberRequest::set_allocated_metadata(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MemberRequest.metadata)
}

// -------------------------------------------------------------------

// ThresholdDecisionPolicy

// string threshold = 1 [json_name = "threshold"];
inline void ThresholdDecisionPolicy::clear_threshold() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.threshold_.ClearToEmpty();
}
inline const std::string& ThresholdDecisionPolicy::threshold() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.ThresholdDecisionPolicy.threshold)
  return _internal_threshold();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ThresholdDecisionPolicy::set_threshold(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.threshold_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.ThresholdDecisionPolicy.threshold)
}
inline std::string* ThresholdDecisionPolicy::mutable_threshold() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_threshold();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.ThresholdDecisionPolicy.threshold)
  return _s;
}
inline const std::string& ThresholdDecisionPolicy::_internal_threshold() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.threshold_.Get();
}
inline void ThresholdDecisionPolicy::_internal_set_threshold(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.threshold_.Set(value, GetArena());
}
inline std::string* ThresholdDecisionPolicy::_internal_mutable_threshold() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.threshold_.Mutable( GetArena());
}
inline std::string* ThresholdDecisionPolicy::release_threshold() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.ThresholdDecisionPolicy.threshold)
  return _impl_.threshold_.Release();
}
inline void ThresholdDecisionPolicy::set_allocated_threshold(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.threshold_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.threshold_.IsDefault()) {
    _impl_.threshold_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.ThresholdDecisionPolicy.threshold)
}

// .cosmos.group.v1.DecisionPolicyWindows windows = 2 [json_name = "windows"];
inline bool ThresholdDecisionPolicy::has_windows() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.windows_ != nullptr);
  return value;
}
inline void ThresholdDecisionPolicy::clear_windows() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.windows_ != nullptr) _impl_.windows_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::group::v1::DecisionPolicyWindows& ThresholdDecisionPolicy::_internal_windows() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::group::v1::DecisionPolicyWindows* p = _impl_.windows_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::group::v1::DecisionPolicyWindows&>(::cosmos::group::v1::_DecisionPolicyWindows_default_instance_);
}
inline const ::cosmos::group::v1::DecisionPolicyWindows& ThresholdDecisionPolicy::windows() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.ThresholdDecisionPolicy.windows)
  return _internal_windows();
}
inline void ThresholdDecisionPolicy::unsafe_arena_set_allocated_windows(::cosmos::group::v1::DecisionPolicyWindows* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.windows_);
  }
  _impl_.windows_ = reinterpret_cast<::cosmos::group::v1::DecisionPolicyWindows*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.ThresholdDecisionPolicy.windows)
}
inline ::cosmos::group::v1::DecisionPolicyWindows* ThresholdDecisionPolicy::release_windows() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::group::v1::DecisionPolicyWindows* released = _impl_.windows_;
  _impl_.windows_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::group::v1::DecisionPolicyWindows* ThresholdDecisionPolicy::unsafe_arena_release_windows() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.ThresholdDecisionPolicy.windows)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::group::v1::DecisionPolicyWindows* temp = _impl_.windows_;
  _impl_.windows_ = nullptr;
  return temp;
}
inline ::cosmos::group::v1::DecisionPolicyWindows* ThresholdDecisionPolicy::_internal_mutable_windows() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.windows_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::group::v1::DecisionPolicyWindows>(GetArena());
    _impl_.windows_ = reinterpret_cast<::cosmos::group::v1::DecisionPolicyWindows*>(p);
  }
  return _impl_.windows_;
}
inline ::cosmos::group::v1::DecisionPolicyWindows* ThresholdDecisionPolicy::mutable_windows() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::group::v1::DecisionPolicyWindows* _msg = _internal_mutable_windows();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.ThresholdDecisionPolicy.windows)
  return _msg;
}
inline void ThresholdDecisionPolicy::set_allocated_windows(::cosmos::group::v1::DecisionPolicyWindows* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.windows_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.windows_ = reinterpret_cast<::cosmos::group::v1::DecisionPolicyWindows*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.ThresholdDecisionPolicy.windows)
}

// -------------------------------------------------------------------

// PercentageDecisionPolicy

// string percentage = 1 [json_name = "percentage"];
inline void PercentageDecisionPolicy::clear_percentage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.percentage_.ClearToEmpty();
}
inline const std::string& PercentageDecisionPolicy::percentage() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.PercentageDecisionPolicy.percentage)
  return _internal_percentage();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PercentageDecisionPolicy::set_percentage(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.percentage_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.PercentageDecisionPolicy.percentage)
}
inline std::string* PercentageDecisionPolicy::mutable_percentage() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_percentage();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.PercentageDecisionPolicy.percentage)
  return _s;
}
inline const std::string& PercentageDecisionPolicy::_internal_percentage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.percentage_.Get();
}
inline void PercentageDecisionPolicy::_internal_set_percentage(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.percentage_.Set(value, GetArena());
}
inline std::string* PercentageDecisionPolicy::_internal_mutable_percentage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.percentage_.Mutable( GetArena());
}
inline std::string* PercentageDecisionPolicy::release_percentage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.PercentageDecisionPolicy.percentage)
  return _impl_.percentage_.Release();
}
inline void PercentageDecisionPolicy::set_allocated_percentage(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.percentage_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.percentage_.IsDefault()) {
    _impl_.percentage_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.PercentageDecisionPolicy.percentage)
}

// .cosmos.group.v1.DecisionPolicyWindows windows = 2 [json_name = "windows"];
inline bool PercentageDecisionPolicy::has_windows() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.windows_ != nullptr);
  return value;
}
inline void PercentageDecisionPolicy::clear_windows() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.windows_ != nullptr) _impl_.windows_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::group::v1::DecisionPolicyWindows& PercentageDecisionPolicy::_internal_windows() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::group::v1::DecisionPolicyWindows* p = _impl_.windows_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::group::v1::DecisionPolicyWindows&>(::cosmos::group::v1::_DecisionPolicyWindows_default_instance_);
}
inline const ::cosmos::group::v1::DecisionPolicyWindows& PercentageDecisionPolicy::windows() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.PercentageDecisionPolicy.windows)
  return _internal_windows();
}
inline void PercentageDecisionPolicy::unsafe_arena_set_allocated_windows(::cosmos::group::v1::DecisionPolicyWindows* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.windows_);
  }
  _impl_.windows_ = reinterpret_cast<::cosmos::group::v1::DecisionPolicyWindows*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.PercentageDecisionPolicy.windows)
}
inline ::cosmos::group::v1::DecisionPolicyWindows* PercentageDecisionPolicy::release_windows() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::group::v1::DecisionPolicyWindows* released = _impl_.windows_;
  _impl_.windows_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::group::v1::DecisionPolicyWindows* PercentageDecisionPolicy::unsafe_arena_release_windows() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.PercentageDecisionPolicy.windows)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::group::v1::DecisionPolicyWindows* temp = _impl_.windows_;
  _impl_.windows_ = nullptr;
  return temp;
}
inline ::cosmos::group::v1::DecisionPolicyWindows* PercentageDecisionPolicy::_internal_mutable_windows() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.windows_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::group::v1::DecisionPolicyWindows>(GetArena());
    _impl_.windows_ = reinterpret_cast<::cosmos::group::v1::DecisionPolicyWindows*>(p);
  }
  return _impl_.windows_;
}
inline ::cosmos::group::v1::DecisionPolicyWindows* PercentageDecisionPolicy::mutable_windows() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::group::v1::DecisionPolicyWindows* _msg = _internal_mutable_windows();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.PercentageDecisionPolicy.windows)
  return _msg;
}
inline void PercentageDecisionPolicy::set_allocated_windows(::cosmos::group::v1::DecisionPolicyWindows* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.windows_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.windows_ = reinterpret_cast<::cosmos::group::v1::DecisionPolicyWindows*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.PercentageDecisionPolicy.windows)
}

// -------------------------------------------------------------------

// DecisionPolicyWindows

// .google.protobuf.Duration voting_period = 1 [json_name = "votingPeriod", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];
inline bool DecisionPolicyWindows::has_voting_period() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.voting_period_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& DecisionPolicyWindows::_internal_voting_period() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Duration* p = _impl_.voting_period_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& DecisionPolicyWindows::voting_period() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.DecisionPolicyWindows.voting_period)
  return _internal_voting_period();
}
inline void DecisionPolicyWindows::unsafe_arena_set_allocated_voting_period(::google::protobuf::Duration* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.voting_period_);
  }
  _impl_.voting_period_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.DecisionPolicyWindows.voting_period)
}
inline ::google::protobuf::Duration* DecisionPolicyWindows::release_voting_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* released = _impl_.voting_period_;
  _impl_.voting_period_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Duration* DecisionPolicyWindows::unsafe_arena_release_voting_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.DecisionPolicyWindows.voting_period)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* temp = _impl_.voting_period_;
  _impl_.voting_period_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* DecisionPolicyWindows::_internal_mutable_voting_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.voting_period_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Duration>(GetArena());
    _impl_.voting_period_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.voting_period_;
}
inline ::google::protobuf::Duration* DecisionPolicyWindows::mutable_voting_period() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Duration* _msg = _internal_mutable_voting_period();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.DecisionPolicyWindows.voting_period)
  return _msg;
}
inline void DecisionPolicyWindows::set_allocated_voting_period(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.voting_period_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.voting_period_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.DecisionPolicyWindows.voting_period)
}

// .google.protobuf.Duration min_execution_period = 2 [json_name = "minExecutionPeriod", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];
inline bool DecisionPolicyWindows::has_min_execution_period() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.min_execution_period_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& DecisionPolicyWindows::_internal_min_execution_period() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Duration* p = _impl_.min_execution_period_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& DecisionPolicyWindows::min_execution_period() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.DecisionPolicyWindows.min_execution_period)
  return _internal_min_execution_period();
}
inline void DecisionPolicyWindows::unsafe_arena_set_allocated_min_execution_period(::google::protobuf::Duration* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.min_execution_period_);
  }
  _impl_.min_execution_period_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.DecisionPolicyWindows.min_execution_period)
}
inline ::google::protobuf::Duration* DecisionPolicyWindows::release_min_execution_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Duration* released = _impl_.min_execution_period_;
  _impl_.min_execution_period_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Duration* DecisionPolicyWindows::unsafe_arena_release_min_execution_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.DecisionPolicyWindows.min_execution_period)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Duration* temp = _impl_.min_execution_period_;
  _impl_.min_execution_period_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* DecisionPolicyWindows::_internal_mutable_min_execution_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.min_execution_period_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Duration>(GetArena());
    _impl_.min_execution_period_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.min_execution_period_;
}
inline ::google::protobuf::Duration* DecisionPolicyWindows::mutable_min_execution_period() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Duration* _msg = _internal_mutable_min_execution_period();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.DecisionPolicyWindows.min_execution_period)
  return _msg;
}
inline void DecisionPolicyWindows::set_allocated_min_execution_period(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.min_execution_period_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.min_execution_period_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.DecisionPolicyWindows.min_execution_period)
}

// -------------------------------------------------------------------

// GroupInfo

// uint64 id = 1 [json_name = "id"];
inline void GroupInfo::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = ::uint64_t{0u};
}
inline ::uint64_t GroupInfo::id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.GroupInfo.id)
  return _internal_id();
}
inline void GroupInfo::set_id(::uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.GroupInfo.id)
}
inline ::uint64_t GroupInfo::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void GroupInfo::_internal_set_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// string admin = 2 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void GroupInfo::clear_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.ClearToEmpty();
}
inline const std::string& GroupInfo::admin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.GroupInfo.admin)
  return _internal_admin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GroupInfo::set_admin(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.GroupInfo.admin)
}
inline std::string* GroupInfo::mutable_admin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_admin();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.GroupInfo.admin)
  return _s;
}
inline const std::string& GroupInfo::_internal_admin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.admin_.Get();
}
inline void GroupInfo::_internal_set_admin(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.Set(value, GetArena());
}
inline std::string* GroupInfo::_internal_mutable_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.admin_.Mutable( GetArena());
}
inline std::string* GroupInfo::release_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.GroupInfo.admin)
  return _impl_.admin_.Release();
}
inline void GroupInfo::set_allocated_admin(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.admin_.IsDefault()) {
    _impl_.admin_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.GroupInfo.admin)
}

// string metadata = 3 [json_name = "metadata"];
inline void GroupInfo::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& GroupInfo::metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.GroupInfo.metadata)
  return _internal_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GroupInfo::set_metadata(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.GroupInfo.metadata)
}
inline std::string* GroupInfo::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.GroupInfo.metadata)
  return _s;
}
inline const std::string& GroupInfo::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.Get();
}
inline void GroupInfo::_internal_set_metadata(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Set(value, GetArena());
}
inline std::string* GroupInfo::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.Mutable( GetArena());
}
inline std::string* GroupInfo::release_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.GroupInfo.metadata)
  return _impl_.metadata_.Release();
}
inline void GroupInfo::set_allocated_metadata(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.GroupInfo.metadata)
}

// uint64 version = 4 [json_name = "version"];
inline void GroupInfo::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = ::uint64_t{0u};
}
inline ::uint64_t GroupInfo::version() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.GroupInfo.version)
  return _internal_version();
}
inline void GroupInfo::set_version(::uint64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.GroupInfo.version)
}
inline ::uint64_t GroupInfo::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_;
}
inline void GroupInfo::_internal_set_version(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = value;
}

// string total_weight = 5 [json_name = "totalWeight"];
inline void GroupInfo::clear_total_weight() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_weight_.ClearToEmpty();
}
inline const std::string& GroupInfo::total_weight() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.GroupInfo.total_weight)
  return _internal_total_weight();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GroupInfo::set_total_weight(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_weight_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.GroupInfo.total_weight)
}
inline std::string* GroupInfo::mutable_total_weight() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_total_weight();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.GroupInfo.total_weight)
  return _s;
}
inline const std::string& GroupInfo::_internal_total_weight() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_weight_.Get();
}
inline void GroupInfo::_internal_set_total_weight(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_weight_.Set(value, GetArena());
}
inline std::string* GroupInfo::_internal_mutable_total_weight() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.total_weight_.Mutable( GetArena());
}
inline std::string* GroupInfo::release_total_weight() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.GroupInfo.total_weight)
  return _impl_.total_weight_.Release();
}
inline void GroupInfo::set_allocated_total_weight(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_weight_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.total_weight_.IsDefault()) {
    _impl_.total_weight_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.GroupInfo.total_weight)
}

// .google.protobuf.Timestamp created_at = 6 [json_name = "createdAt", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
inline bool GroupInfo::has_created_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.created_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GroupInfo::_internal_created_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GroupInfo::created_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.GroupInfo.created_at)
  return _internal_created_at();
}
inline void GroupInfo::unsafe_arena_set_allocated_created_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.created_at_);
  }
  _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.GroupInfo.created_at)
}
inline ::google::protobuf::Timestamp* GroupInfo::release_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* GroupInfo::unsafe_arena_release_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.GroupInfo.created_at)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GroupInfo::_internal_mutable_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.created_at_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.created_at_;
}
inline ::google::protobuf::Timestamp* GroupInfo::mutable_created_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.GroupInfo.created_at)
  return _msg;
}
inline void GroupInfo::set_allocated_created_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.created_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.GroupInfo.created_at)
}

// -------------------------------------------------------------------

// GroupMember

// uint64 group_id = 1 [json_name = "groupId"];
inline void GroupMember::clear_group_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_id_ = ::uint64_t{0u};
}
inline ::uint64_t GroupMember::group_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.GroupMember.group_id)
  return _internal_group_id();
}
inline void GroupMember::set_group_id(::uint64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.GroupMember.group_id)
}
inline ::uint64_t GroupMember::_internal_group_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_id_;
}
inline void GroupMember::_internal_set_group_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_id_ = value;
}

// .cosmos.group.v1.Member member = 2 [json_name = "member"];
inline bool GroupMember::has_member() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.member_ != nullptr);
  return value;
}
inline void GroupMember::clear_member() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.member_ != nullptr) _impl_.member_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::group::v1::Member& GroupMember::_internal_member() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::group::v1::Member* p = _impl_.member_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::group::v1::Member&>(::cosmos::group::v1::_Member_default_instance_);
}
inline const ::cosmos::group::v1::Member& GroupMember::member() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.GroupMember.member)
  return _internal_member();
}
inline void GroupMember::unsafe_arena_set_allocated_member(::cosmos::group::v1::Member* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.member_);
  }
  _impl_.member_ = reinterpret_cast<::cosmos::group::v1::Member*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.GroupMember.member)
}
inline ::cosmos::group::v1::Member* GroupMember::release_member() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::group::v1::Member* released = _impl_.member_;
  _impl_.member_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::group::v1::Member* GroupMember::unsafe_arena_release_member() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.GroupMember.member)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::group::v1::Member* temp = _impl_.member_;
  _impl_.member_ = nullptr;
  return temp;
}
inline ::cosmos::group::v1::Member* GroupMember::_internal_mutable_member() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.member_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::group::v1::Member>(GetArena());
    _impl_.member_ = reinterpret_cast<::cosmos::group::v1::Member*>(p);
  }
  return _impl_.member_;
}
inline ::cosmos::group::v1::Member* GroupMember::mutable_member() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::group::v1::Member* _msg = _internal_mutable_member();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.GroupMember.member)
  return _msg;
}
inline void GroupMember::set_allocated_member(::cosmos::group::v1::Member* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.member_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.member_ = reinterpret_cast<::cosmos::group::v1::Member*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.GroupMember.member)
}

// -------------------------------------------------------------------

// GroupPolicyInfo

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void GroupPolicyInfo::clear_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.ClearToEmpty();
}
inline const std::string& GroupPolicyInfo::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.GroupPolicyInfo.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GroupPolicyInfo::set_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.GroupPolicyInfo.address)
}
inline std::string* GroupPolicyInfo::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.GroupPolicyInfo.address)
  return _s;
}
inline const std::string& GroupPolicyInfo::_internal_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.address_.Get();
}
inline void GroupPolicyInfo::_internal_set_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(value, GetArena());
}
inline std::string* GroupPolicyInfo::_internal_mutable_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.address_.Mutable( GetArena());
}
inline std::string* GroupPolicyInfo::release_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.GroupPolicyInfo.address)
  return _impl_.address_.Release();
}
inline void GroupPolicyInfo::set_allocated_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.GroupPolicyInfo.address)
}

// uint64 group_id = 2 [json_name = "groupId"];
inline void GroupPolicyInfo::clear_group_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_id_ = ::uint64_t{0u};
}
inline ::uint64_t GroupPolicyInfo::group_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.GroupPolicyInfo.group_id)
  return _internal_group_id();
}
inline void GroupPolicyInfo::set_group_id(::uint64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.GroupPolicyInfo.group_id)
}
inline ::uint64_t GroupPolicyInfo::_internal_group_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_id_;
}
inline void GroupPolicyInfo::_internal_set_group_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_id_ = value;
}

// string admin = 3 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void GroupPolicyInfo::clear_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.ClearToEmpty();
}
inline const std::string& GroupPolicyInfo::admin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.GroupPolicyInfo.admin)
  return _internal_admin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GroupPolicyInfo::set_admin(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.GroupPolicyInfo.admin)
}
inline std::string* GroupPolicyInfo::mutable_admin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_admin();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.GroupPolicyInfo.admin)
  return _s;
}
inline const std::string& GroupPolicyInfo::_internal_admin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.admin_.Get();
}
inline void GroupPolicyInfo::_internal_set_admin(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.Set(value, GetArena());
}
inline std::string* GroupPolicyInfo::_internal_mutable_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.admin_.Mutable( GetArena());
}
inline std::string* GroupPolicyInfo::release_admin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.GroupPolicyInfo.admin)
  return _impl_.admin_.Release();
}
inline void GroupPolicyInfo::set_allocated_admin(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.admin_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.admin_.IsDefault()) {
    _impl_.admin_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.GroupPolicyInfo.admin)
}

// string metadata = 4 [json_name = "metadata"];
inline void GroupPolicyInfo::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& GroupPolicyInfo::metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.GroupPolicyInfo.metadata)
  return _internal_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GroupPolicyInfo::set_metadata(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.GroupPolicyInfo.metadata)
}
inline std::string* GroupPolicyInfo::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.GroupPolicyInfo.metadata)
  return _s;
}
inline const std::string& GroupPolicyInfo::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.Get();
}
inline void GroupPolicyInfo::_internal_set_metadata(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Set(value, GetArena());
}
inline std::string* GroupPolicyInfo::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.Mutable( GetArena());
}
inline std::string* GroupPolicyInfo::release_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.GroupPolicyInfo.metadata)
  return _impl_.metadata_.Release();
}
inline void GroupPolicyInfo::set_allocated_metadata(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.GroupPolicyInfo.metadata)
}

// uint64 version = 5 [json_name = "version"];
inline void GroupPolicyInfo::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = ::uint64_t{0u};
}
inline ::uint64_t GroupPolicyInfo::version() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.GroupPolicyInfo.version)
  return _internal_version();
}
inline void GroupPolicyInfo::set_version(::uint64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.GroupPolicyInfo.version)
}
inline ::uint64_t GroupPolicyInfo::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_;
}
inline void GroupPolicyInfo::_internal_set_version(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = value;
}

// .google.protobuf.Any decision_policy = 6 [json_name = "decisionPolicy", (.cosmos_proto.accepts_interface) = "cosmos.group.v1.DecisionPolicy"];
inline bool GroupPolicyInfo::has_decision_policy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.decision_policy_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& GroupPolicyInfo::_internal_decision_policy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Any* p = _impl_.decision_policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& GroupPolicyInfo::decision_policy() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.GroupPolicyInfo.decision_policy)
  return _internal_decision_policy();
}
inline void GroupPolicyInfo::unsafe_arena_set_allocated_decision_policy(::google::protobuf::Any* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.decision_policy_);
  }
  _impl_.decision_policy_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.GroupPolicyInfo.decision_policy)
}
inline ::google::protobuf::Any* GroupPolicyInfo::release_decision_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* released = _impl_.decision_policy_;
  _impl_.decision_policy_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Any* GroupPolicyInfo::unsafe_arena_release_decision_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.GroupPolicyInfo.decision_policy)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* temp = _impl_.decision_policy_;
  _impl_.decision_policy_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* GroupPolicyInfo::_internal_mutable_decision_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.decision_policy_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Any>(GetArena());
    _impl_.decision_policy_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.decision_policy_;
}
inline ::google::protobuf::Any* GroupPolicyInfo::mutable_decision_policy() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Any* _msg = _internal_mutable_decision_policy();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.GroupPolicyInfo.decision_policy)
  return _msg;
}
inline void GroupPolicyInfo::set_allocated_decision_policy(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.decision_policy_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.decision_policy_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.GroupPolicyInfo.decision_policy)
}

// .google.protobuf.Timestamp created_at = 7 [json_name = "createdAt", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
inline bool GroupPolicyInfo::has_created_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.created_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GroupPolicyInfo::_internal_created_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GroupPolicyInfo::created_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.GroupPolicyInfo.created_at)
  return _internal_created_at();
}
inline void GroupPolicyInfo::unsafe_arena_set_allocated_created_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.created_at_);
  }
  _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.GroupPolicyInfo.created_at)
}
inline ::google::protobuf::Timestamp* GroupPolicyInfo::release_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* GroupPolicyInfo::unsafe_arena_release_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.GroupPolicyInfo.created_at)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GroupPolicyInfo::_internal_mutable_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.created_at_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.created_at_;
}
inline ::google::protobuf::Timestamp* GroupPolicyInfo::mutable_created_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.GroupPolicyInfo.created_at)
  return _msg;
}
inline void GroupPolicyInfo::set_allocated_created_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.created_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.GroupPolicyInfo.created_at)
}

// -------------------------------------------------------------------

// Proposal

// uint64 id = 1 [json_name = "id"];
inline void Proposal::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = ::uint64_t{0u};
}
inline ::uint64_t Proposal::id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.Proposal.id)
  return _internal_id();
}
inline void Proposal::set_id(::uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.Proposal.id)
}
inline ::uint64_t Proposal::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void Proposal::_internal_set_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// string group_policy_address = 2 [json_name = "groupPolicyAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void Proposal::clear_group_policy_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_address_.ClearToEmpty();
}
inline const std::string& Proposal::group_policy_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.Proposal.group_policy_address)
  return _internal_group_policy_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Proposal::set_group_policy_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.Proposal.group_policy_address)
}
inline std::string* Proposal::mutable_group_policy_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_group_policy_address();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.Proposal.group_policy_address)
  return _s;
}
inline const std::string& Proposal::_internal_group_policy_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_policy_address_.Get();
}
inline void Proposal::_internal_set_group_policy_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_address_.Set(value, GetArena());
}
inline std::string* Proposal::_internal_mutable_group_policy_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.group_policy_address_.Mutable( GetArena());
}
inline std::string* Proposal::release_group_policy_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.Proposal.group_policy_address)
  return _impl_.group_policy_address_.Release();
}
inline void Proposal::set_allocated_group_policy_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.group_policy_address_.IsDefault()) {
    _impl_.group_policy_address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.Proposal.group_policy_address)
}

// string metadata = 3 [json_name = "metadata"];
inline void Proposal::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& Proposal::metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.Proposal.metadata)
  return _internal_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Proposal::set_metadata(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.Proposal.metadata)
}
inline std::string* Proposal::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.Proposal.metadata)
  return _s;
}
inline const std::string& Proposal::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.Get();
}
inline void Proposal::_internal_set_metadata(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Set(value, GetArena());
}
inline std::string* Proposal::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.Mutable( GetArena());
}
inline std::string* Proposal::release_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.Proposal.metadata)
  return _impl_.metadata_.Release();
}
inline void Proposal::set_allocated_metadata(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.Proposal.metadata)
}

// repeated string proposers = 4 [json_name = "proposers", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline int Proposal::_internal_proposers_size() const {
  return _internal_proposers().size();
}
inline int Proposal::proposers_size() const {
  return _internal_proposers_size();
}
inline void Proposal::clear_proposers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposers_.Clear();
}
inline std::string* Proposal::add_proposers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_proposers()->Add();
  // @@protoc_insertion_point(field_add_mutable:cosmos.group.v1.Proposal.proposers)
  return _s;
}
inline const std::string& Proposal::proposers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.Proposal.proposers)
  return _internal_proposers().Get(index);
}
inline std::string* Proposal::mutable_proposers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.Proposal.proposers)
  return _internal_mutable_proposers()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void Proposal::set_proposers(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_proposers()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:cosmos.group.v1.Proposal.proposers)
}
template <typename Arg_, typename... Args_>
inline void Proposal::add_proposers(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_proposers(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:cosmos.group.v1.Proposal.proposers)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Proposal::proposers() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.group.v1.Proposal.proposers)
  return _internal_proposers();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Proposal::mutable_proposers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.group.v1.Proposal.proposers)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_proposers();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Proposal::_internal_proposers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proposers_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Proposal::_internal_mutable_proposers() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.proposers_;
}

// .google.protobuf.Timestamp submit_time = 5 [json_name = "submitTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
inline bool Proposal::has_submit_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.submit_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Proposal::_internal_submit_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.submit_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Proposal::submit_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.Proposal.submit_time)
  return _internal_submit_time();
}
inline void Proposal::unsafe_arena_set_allocated_submit_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.submit_time_);
  }
  _impl_.submit_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.Proposal.submit_time)
}
inline ::google::protobuf::Timestamp* Proposal::release_submit_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.submit_time_;
  _impl_.submit_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* Proposal::unsafe_arena_release_submit_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.Proposal.submit_time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.submit_time_;
  _impl_.submit_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Proposal::_internal_mutable_submit_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.submit_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.submit_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.submit_time_;
}
inline ::google::protobuf::Timestamp* Proposal::mutable_submit_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_submit_time();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.Proposal.submit_time)
  return _msg;
}
inline void Proposal::set_allocated_submit_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.submit_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.submit_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.Proposal.submit_time)
}

// uint64 group_version = 6 [json_name = "groupVersion"];
inline void Proposal::clear_group_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_version_ = ::uint64_t{0u};
}
inline ::uint64_t Proposal::group_version() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.Proposal.group_version)
  return _internal_group_version();
}
inline void Proposal::set_group_version(::uint64_t value) {
  _internal_set_group_version(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.Proposal.group_version)
}
inline ::uint64_t Proposal::_internal_group_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_version_;
}
inline void Proposal::_internal_set_group_version(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_version_ = value;
}

// uint64 group_policy_version = 7 [json_name = "groupPolicyVersion"];
inline void Proposal::clear_group_policy_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_version_ = ::uint64_t{0u};
}
inline ::uint64_t Proposal::group_policy_version() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.Proposal.group_policy_version)
  return _internal_group_policy_version();
}
inline void Proposal::set_group_policy_version(::uint64_t value) {
  _internal_set_group_policy_version(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.Proposal.group_policy_version)
}
inline ::uint64_t Proposal::_internal_group_policy_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_policy_version_;
}
inline void Proposal::_internal_set_group_policy_version(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_policy_version_ = value;
}

// .cosmos.group.v1.ProposalStatus status = 8 [json_name = "status"];
inline void Proposal::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::cosmos::group::v1::ProposalStatus Proposal::status() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.Proposal.status)
  return _internal_status();
}
inline void Proposal::set_status(::cosmos::group::v1::ProposalStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.Proposal.status)
}
inline ::cosmos::group::v1::ProposalStatus Proposal::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::cosmos::group::v1::ProposalStatus>(_impl_.status_);
}
inline void Proposal::_internal_set_status(::cosmos::group::v1::ProposalStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// .cosmos.group.v1.TallyResult final_tally_result = 9 [json_name = "finalTallyResult", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool Proposal::has_final_tally_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.final_tally_result_ != nullptr);
  return value;
}
inline void Proposal::clear_final_tally_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.final_tally_result_ != nullptr) _impl_.final_tally_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cosmos::group::v1::TallyResult& Proposal::_internal_final_tally_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::group::v1::TallyResult* p = _impl_.final_tally_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::group::v1::TallyResult&>(::cosmos::group::v1::_TallyResult_default_instance_);
}
inline const ::cosmos::group::v1::TallyResult& Proposal::final_tally_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.Proposal.final_tally_result)
  return _internal_final_tally_result();
}
inline void Proposal::unsafe_arena_set_allocated_final_tally_result(::cosmos::group::v1::TallyResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.final_tally_result_);
  }
  _impl_.final_tally_result_ = reinterpret_cast<::cosmos::group::v1::TallyResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.Proposal.final_tally_result)
}
inline ::cosmos::group::v1::TallyResult* Proposal::release_final_tally_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::group::v1::TallyResult* released = _impl_.final_tally_result_;
  _impl_.final_tally_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::group::v1::TallyResult* Proposal::unsafe_arena_release_final_tally_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.Proposal.final_tally_result)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::group::v1::TallyResult* temp = _impl_.final_tally_result_;
  _impl_.final_tally_result_ = nullptr;
  return temp;
}
inline ::cosmos::group::v1::TallyResult* Proposal::_internal_mutable_final_tally_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.final_tally_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::group::v1::TallyResult>(GetArena());
    _impl_.final_tally_result_ = reinterpret_cast<::cosmos::group::v1::TallyResult*>(p);
  }
  return _impl_.final_tally_result_;
}
inline ::cosmos::group::v1::TallyResult* Proposal::mutable_final_tally_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::cosmos::group::v1::TallyResult* _msg = _internal_mutable_final_tally_result();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.Proposal.final_tally_result)
  return _msg;
}
inline void Proposal::set_allocated_final_tally_result(::cosmos::group::v1::TallyResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.final_tally_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.final_tally_result_ = reinterpret_cast<::cosmos::group::v1::TallyResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.Proposal.final_tally_result)
}

// .google.protobuf.Timestamp voting_period_end = 10 [json_name = "votingPeriodEnd", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
inline bool Proposal::has_voting_period_end() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.voting_period_end_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Proposal::_internal_voting_period_end() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.voting_period_end_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Proposal::voting_period_end() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.Proposal.voting_period_end)
  return _internal_voting_period_end();
}
inline void Proposal::unsafe_arena_set_allocated_voting_period_end(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.voting_period_end_);
  }
  _impl_.voting_period_end_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.Proposal.voting_period_end)
}
inline ::google::protobuf::Timestamp* Proposal::release_voting_period_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* released = _impl_.voting_period_end_;
  _impl_.voting_period_end_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* Proposal::unsafe_arena_release_voting_period_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.Proposal.voting_period_end)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* temp = _impl_.voting_period_end_;
  _impl_.voting_period_end_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Proposal::_internal_mutable_voting_period_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.voting_period_end_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.voting_period_end_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.voting_period_end_;
}
inline ::google::protobuf::Timestamp* Proposal::mutable_voting_period_end() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_voting_period_end();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.Proposal.voting_period_end)
  return _msg;
}
inline void Proposal::set_allocated_voting_period_end(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.voting_period_end_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.voting_period_end_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.Proposal.voting_period_end)
}

// .cosmos.group.v1.ProposalExecutorResult executor_result = 11 [json_name = "executorResult"];
inline void Proposal::clear_executor_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executor_result_ = 0;
}
inline ::cosmos::group::v1::ProposalExecutorResult Proposal::executor_result() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.Proposal.executor_result)
  return _internal_executor_result();
}
inline void Proposal::set_executor_result(::cosmos::group::v1::ProposalExecutorResult value) {
  _internal_set_executor_result(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.Proposal.executor_result)
}
inline ::cosmos::group::v1::ProposalExecutorResult Proposal::_internal_executor_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::cosmos::group::v1::ProposalExecutorResult>(_impl_.executor_result_);
}
inline void Proposal::_internal_set_executor_result(::cosmos::group::v1::ProposalExecutorResult value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executor_result_ = value;
}

// repeated .google.protobuf.Any messages = 12 [json_name = "messages"];
inline int Proposal::_internal_messages_size() const {
  return _internal_messages().size();
}
inline int Proposal::messages_size() const {
  return _internal_messages_size();
}
inline ::google::protobuf::Any* Proposal::mutable_messages(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.Proposal.messages)
  return _internal_mutable_messages()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* Proposal::mutable_messages()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.group.v1.Proposal.messages)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_messages();
}
inline const ::google::protobuf::Any& Proposal::messages(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.Proposal.messages)
  return _internal_messages().Get(index);
}
inline ::google::protobuf::Any* Proposal::add_messages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::Any* _add = _internal_mutable_messages()->Add();
  // @@protoc_insertion_point(field_add:cosmos.group.v1.Proposal.messages)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& Proposal::messages() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.group.v1.Proposal.messages)
  return _internal_messages();
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>&
Proposal::_internal_messages() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.messages_;
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>*
Proposal::_internal_mutable_messages() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.messages_;
}

// string title = 13 [json_name = "title", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.47"];
inline void Proposal::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Proposal::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.Proposal.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Proposal::set_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.Proposal.title)
}
inline std::string* Proposal::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.Proposal.title)
  return _s;
}
inline const std::string& Proposal::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void Proposal::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(value, GetArena());
}
inline std::string* Proposal::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* Proposal::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.Proposal.title)
  return _impl_.title_.Release();
}
inline void Proposal::set_allocated_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.Proposal.title)
}

// string summary = 14 [json_name = "summary", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.47"];
inline void Proposal::clear_summary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.summary_.ClearToEmpty();
}
inline const std::string& Proposal::summary() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.Proposal.summary)
  return _internal_summary();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Proposal::set_summary(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.summary_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.Proposal.summary)
}
inline std::string* Proposal::mutable_summary() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_summary();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.Proposal.summary)
  return _s;
}
inline const std::string& Proposal::_internal_summary() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.summary_.Get();
}
inline void Proposal::_internal_set_summary(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.summary_.Set(value, GetArena());
}
inline std::string* Proposal::_internal_mutable_summary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.summary_.Mutable( GetArena());
}
inline std::string* Proposal::release_summary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.Proposal.summary)
  return _impl_.summary_.Release();
}
inline void Proposal::set_allocated_summary(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.summary_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.summary_.IsDefault()) {
    _impl_.summary_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.Proposal.summary)
}

// -------------------------------------------------------------------

// TallyResult

// string yes_count = 1 [json_name = "yesCount"];
inline void TallyResult::clear_yes_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yes_count_.ClearToEmpty();
}
inline const std::string& TallyResult::yes_count() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.TallyResult.yes_count)
  return _internal_yes_count();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TallyResult::set_yes_count(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yes_count_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.TallyResult.yes_count)
}
inline std::string* TallyResult::mutable_yes_count() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_yes_count();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.TallyResult.yes_count)
  return _s;
}
inline const std::string& TallyResult::_internal_yes_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.yes_count_.Get();
}
inline void TallyResult::_internal_set_yes_count(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yes_count_.Set(value, GetArena());
}
inline std::string* TallyResult::_internal_mutable_yes_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.yes_count_.Mutable( GetArena());
}
inline std::string* TallyResult::release_yes_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.TallyResult.yes_count)
  return _impl_.yes_count_.Release();
}
inline void TallyResult::set_allocated_yes_count(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yes_count_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.yes_count_.IsDefault()) {
    _impl_.yes_count_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.TallyResult.yes_count)
}

// string abstain_count = 2 [json_name = "abstainCount"];
inline void TallyResult::clear_abstain_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.abstain_count_.ClearToEmpty();
}
inline const std::string& TallyResult::abstain_count() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.TallyResult.abstain_count)
  return _internal_abstain_count();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TallyResult::set_abstain_count(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.abstain_count_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.TallyResult.abstain_count)
}
inline std::string* TallyResult::mutable_abstain_count() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_abstain_count();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.TallyResult.abstain_count)
  return _s;
}
inline const std::string& TallyResult::_internal_abstain_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.abstain_count_.Get();
}
inline void TallyResult::_internal_set_abstain_count(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.abstain_count_.Set(value, GetArena());
}
inline std::string* TallyResult::_internal_mutable_abstain_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.abstain_count_.Mutable( GetArena());
}
inline std::string* TallyResult::release_abstain_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.TallyResult.abstain_count)
  return _impl_.abstain_count_.Release();
}
inline void TallyResult::set_allocated_abstain_count(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.abstain_count_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.abstain_count_.IsDefault()) {
    _impl_.abstain_count_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.TallyResult.abstain_count)
}

// string no_count = 3 [json_name = "noCount"];
inline void TallyResult::clear_no_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.no_count_.ClearToEmpty();
}
inline const std::string& TallyResult::no_count() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.TallyResult.no_count)
  return _internal_no_count();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TallyResult::set_no_count(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.no_count_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.TallyResult.no_count)
}
inline std::string* TallyResult::mutable_no_count() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_no_count();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.TallyResult.no_count)
  return _s;
}
inline const std::string& TallyResult::_internal_no_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.no_count_.Get();
}
inline void TallyResult::_internal_set_no_count(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.no_count_.Set(value, GetArena());
}
inline std::string* TallyResult::_internal_mutable_no_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.no_count_.Mutable( GetArena());
}
inline std::string* TallyResult::release_no_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.TallyResult.no_count)
  return _impl_.no_count_.Release();
}
inline void TallyResult::set_allocated_no_count(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.no_count_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.no_count_.IsDefault()) {
    _impl_.no_count_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.TallyResult.no_count)
}

// string no_with_veto_count = 4 [json_name = "noWithVetoCount"];
inline void TallyResult::clear_no_with_veto_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.no_with_veto_count_.ClearToEmpty();
}
inline const std::string& TallyResult::no_with_veto_count() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.TallyResult.no_with_veto_count)
  return _internal_no_with_veto_count();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TallyResult::set_no_with_veto_count(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.no_with_veto_count_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.TallyResult.no_with_veto_count)
}
inline std::string* TallyResult::mutable_no_with_veto_count() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_no_with_veto_count();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.TallyResult.no_with_veto_count)
  return _s;
}
inline const std::string& TallyResult::_internal_no_with_veto_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.no_with_veto_count_.Get();
}
inline void TallyResult::_internal_set_no_with_veto_count(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.no_with_veto_count_.Set(value, GetArena());
}
inline std::string* TallyResult::_internal_mutable_no_with_veto_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.no_with_veto_count_.Mutable( GetArena());
}
inline std::string* TallyResult::release_no_with_veto_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.TallyResult.no_with_veto_count)
  return _impl_.no_with_veto_count_.Release();
}
inline void TallyResult::set_allocated_no_with_veto_count(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.no_with_veto_count_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.no_with_veto_count_.IsDefault()) {
    _impl_.no_with_veto_count_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.TallyResult.no_with_veto_count)
}

// -------------------------------------------------------------------

// Vote

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void Vote::clear_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t Vote::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.Vote.proposal_id)
  return _internal_proposal_id();
}
inline void Vote::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.Vote.proposal_id)
}
inline ::uint64_t Vote::_internal_proposal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proposal_id_;
}
inline void Vote::_internal_set_proposal_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_ = value;
}

// string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void Vote::clear_voter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voter_.ClearToEmpty();
}
inline const std::string& Vote::voter() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.Vote.voter)
  return _internal_voter();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Vote::set_voter(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voter_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.Vote.voter)
}
inline std::string* Vote::mutable_voter() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_voter();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.Vote.voter)
  return _s;
}
inline const std::string& Vote::_internal_voter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.voter_.Get();
}
inline void Vote::_internal_set_voter(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voter_.Set(value, GetArena());
}
inline std::string* Vote::_internal_mutable_voter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.voter_.Mutable( GetArena());
}
inline std::string* Vote::release_voter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.Vote.voter)
  return _impl_.voter_.Release();
}
inline void Vote::set_allocated_voter(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voter_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.voter_.IsDefault()) {
    _impl_.voter_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.Vote.voter)
}

// .cosmos.group.v1.VoteOption option = 3 [json_name = "option"];
inline void Vote::clear_option() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.option_ = 0;
}
inline ::cosmos::group::v1::VoteOption Vote::option() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.Vote.option)
  return _internal_option();
}
inline void Vote::set_option(::cosmos::group::v1::VoteOption value) {
  _internal_set_option(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.Vote.option)
}
inline ::cosmos::group::v1::VoteOption Vote::_internal_option() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::cosmos::group::v1::VoteOption>(_impl_.option_);
}
inline void Vote::_internal_set_option(::cosmos::group::v1::VoteOption value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.option_ = value;
}

// string metadata = 4 [json_name = "metadata"];
inline void Vote::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& Vote::metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.Vote.metadata)
  return _internal_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Vote::set_metadata(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.Vote.metadata)
}
inline std::string* Vote::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.Vote.metadata)
  return _s;
}
inline const std::string& Vote::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.Get();
}
inline void Vote::_internal_set_metadata(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Set(value, GetArena());
}
inline std::string* Vote::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.Mutable( GetArena());
}
inline std::string* Vote::release_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.Vote.metadata)
  return _impl_.metadata_.Release();
}
inline void Vote::set_allocated_metadata(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.Vote.metadata)
}

// .google.protobuf.Timestamp submit_time = 5 [json_name = "submitTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
inline bool Vote::has_submit_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.submit_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Vote::_internal_submit_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.submit_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Vote::submit_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.Vote.submit_time)
  return _internal_submit_time();
}
inline void Vote::unsafe_arena_set_allocated_submit_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.submit_time_);
  }
  _impl_.submit_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.Vote.submit_time)
}
inline ::google::protobuf::Timestamp* Vote::release_submit_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.submit_time_;
  _impl_.submit_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* Vote::unsafe_arena_release_submit_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.group.v1.Vote.submit_time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.submit_time_;
  _impl_.submit_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Vote::_internal_mutable_submit_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.submit_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.submit_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.submit_time_;
}
inline ::google::protobuf::Timestamp* Vote::mutable_submit_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_submit_time();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.Vote.submit_time)
  return _msg;
}
inline void Vote::set_allocated_submit_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.submit_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.submit_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.Vote.submit_time)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace group
}  // namespace cosmos


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::cosmos::group::v1::VoteOption> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cosmos::group::v1::VoteOption>() {
  return ::cosmos::group::v1::VoteOption_descriptor();
}
template <>
struct is_proto_enum<::cosmos::group::v1::ProposalStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cosmos::group::v1::ProposalStatus>() {
  return ::cosmos::group::v1::ProposalStatus_descriptor();
}
template <>
struct is_proto_enum<::cosmos::group::v1::ProposalExecutorResult> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cosmos::group::v1::ProposalExecutorResult>() {
  return ::cosmos::group::v1::ProposalExecutorResult_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2fgroup_2fv1_2ftypes_2eproto_2epb_2eh
