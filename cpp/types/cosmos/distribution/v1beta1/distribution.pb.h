// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/distribution/v1beta1/distribution.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_2epb_2eh
#define cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto;
namespace cosmos {
namespace distribution {
namespace v1beta1 {
class CommunityPoolSpendProposal;
struct CommunityPoolSpendProposalDefaultTypeInternal;
extern CommunityPoolSpendProposalDefaultTypeInternal _CommunityPoolSpendProposal_default_instance_;
class CommunityPoolSpendProposalWithDeposit;
struct CommunityPoolSpendProposalWithDepositDefaultTypeInternal;
extern CommunityPoolSpendProposalWithDepositDefaultTypeInternal _CommunityPoolSpendProposalWithDeposit_default_instance_;
class DelegationDelegatorReward;
struct DelegationDelegatorRewardDefaultTypeInternal;
extern DelegationDelegatorRewardDefaultTypeInternal _DelegationDelegatorReward_default_instance_;
class DelegatorStartingInfo;
struct DelegatorStartingInfoDefaultTypeInternal;
extern DelegatorStartingInfoDefaultTypeInternal _DelegatorStartingInfo_default_instance_;
class FeePool;
struct FeePoolDefaultTypeInternal;
extern FeePoolDefaultTypeInternal _FeePool_default_instance_;
class Params;
struct ParamsDefaultTypeInternal;
extern ParamsDefaultTypeInternal _Params_default_instance_;
class ValidatorAccumulatedCommission;
struct ValidatorAccumulatedCommissionDefaultTypeInternal;
extern ValidatorAccumulatedCommissionDefaultTypeInternal _ValidatorAccumulatedCommission_default_instance_;
class ValidatorCurrentRewards;
struct ValidatorCurrentRewardsDefaultTypeInternal;
extern ValidatorCurrentRewardsDefaultTypeInternal _ValidatorCurrentRewards_default_instance_;
class ValidatorHistoricalRewards;
struct ValidatorHistoricalRewardsDefaultTypeInternal;
extern ValidatorHistoricalRewardsDefaultTypeInternal _ValidatorHistoricalRewards_default_instance_;
class ValidatorOutstandingRewards;
struct ValidatorOutstandingRewardsDefaultTypeInternal;
extern ValidatorOutstandingRewardsDefaultTypeInternal _ValidatorOutstandingRewards_default_instance_;
class ValidatorSlashEvent;
struct ValidatorSlashEventDefaultTypeInternal;
extern ValidatorSlashEventDefaultTypeInternal _ValidatorSlashEvent_default_instance_;
class ValidatorSlashEvents;
struct ValidatorSlashEventsDefaultTypeInternal;
extern ValidatorSlashEventsDefaultTypeInternal _ValidatorSlashEvents_default_instance_;
}  // namespace v1beta1
}  // namespace distribution
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace distribution {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class ValidatorSlashEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.distribution.v1beta1.ValidatorSlashEvent) */ {
 public:
  inline ValidatorSlashEvent() : ValidatorSlashEvent(nullptr) {}
  ~ValidatorSlashEvent() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ValidatorSlashEvent* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ValidatorSlashEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ValidatorSlashEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline ValidatorSlashEvent(const ValidatorSlashEvent& from) : ValidatorSlashEvent(nullptr, from) {}
  inline ValidatorSlashEvent(ValidatorSlashEvent&& from) noexcept
      : ValidatorSlashEvent(nullptr, std::move(from)) {}
  inline ValidatorSlashEvent& operator=(const ValidatorSlashEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatorSlashEvent& operator=(ValidatorSlashEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidatorSlashEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidatorSlashEvent* internal_default_instance() {
    return reinterpret_cast<const ValidatorSlashEvent*>(
        &_ValidatorSlashEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(ValidatorSlashEvent& a, ValidatorSlashEvent& b) { a.Swap(&b); }
  inline void Swap(ValidatorSlashEvent* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatorSlashEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidatorSlashEvent* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ValidatorSlashEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ValidatorSlashEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ValidatorSlashEvent& from) { ValidatorSlashEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ValidatorSlashEvent* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.distribution.v1beta1.ValidatorSlashEvent"; }

 protected:
  explicit ValidatorSlashEvent(::google::protobuf::Arena* arena);
  ValidatorSlashEvent(::google::protobuf::Arena* arena, const ValidatorSlashEvent& from);
  ValidatorSlashEvent(::google::protobuf::Arena* arena, ValidatorSlashEvent&& from) noexcept
      : ValidatorSlashEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFractionFieldNumber = 2,
    kValidatorPeriodFieldNumber = 1,
  };
  // string fraction = 2 [json_name = "fraction", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  void clear_fraction() ;
  const std::string& fraction() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fraction(Arg_&& arg, Args_... args);
  std::string* mutable_fraction();
  PROTOBUF_NODISCARD std::string* release_fraction();
  void set_allocated_fraction(std::string* value);

  private:
  const std::string& _internal_fraction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fraction(
      const std::string& value);
  std::string* _internal_mutable_fraction();

  public:
  // uint64 validator_period = 1 [json_name = "validatorPeriod"];
  void clear_validator_period() ;
  ::uint64_t validator_period() const;
  void set_validator_period(::uint64_t value);

  private:
  ::uint64_t _internal_validator_period() const;
  void _internal_set_validator_period(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.distribution.v1beta1.ValidatorSlashEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      64, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ValidatorSlashEvent& from_msg);
    ::google::protobuf::internal::ArenaStringPtr fraction_;
    ::uint64_t validator_period_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto;
};
// -------------------------------------------------------------------

class Params final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.distribution.v1beta1.Params) */ {
 public:
  inline Params() : Params(nullptr) {}
  ~Params() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Params* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Params));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Params(
      ::google::protobuf::internal::ConstantInitialized);

  inline Params(const Params& from) : Params(nullptr, from) {}
  inline Params(Params&& from) noexcept
      : Params(nullptr, std::move(from)) {}
  inline Params& operator=(const Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params& operator=(Params&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params* internal_default_instance() {
    return reinterpret_cast<const Params*>(
        &_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Params& a, Params& b) { a.Swap(&b); }
  inline void Swap(Params* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Params* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Params>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Params& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Params& from) { Params::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Params* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.distribution.v1beta1.Params"; }

 protected:
  explicit Params(::google::protobuf::Arena* arena);
  Params(::google::protobuf::Arena* arena, const Params& from);
  Params(::google::protobuf::Arena* arena, Params&& from) noexcept
      : Params(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCommunityTaxFieldNumber = 1,
    kBaseProposerRewardFieldNumber = 2,
    kBonusProposerRewardFieldNumber = 3,
    kWithdrawAddrEnabledFieldNumber = 4,
  };
  // string community_tax = 1 [json_name = "communityTax", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec", (.amino.dont_omitempty) = true];
  void clear_community_tax() ;
  const std::string& community_tax() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_community_tax(Arg_&& arg, Args_... args);
  std::string* mutable_community_tax();
  PROTOBUF_NODISCARD std::string* release_community_tax();
  void set_allocated_community_tax(std::string* value);

  private:
  const std::string& _internal_community_tax() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_community_tax(
      const std::string& value);
  std::string* _internal_mutable_community_tax();

  public:
  // string base_proposer_reward = 2 [json_name = "baseProposerReward", deprecated = true, (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec", (.amino.dont_omitempty) = true];
  [[deprecated]]  void clear_base_proposer_reward() ;
  [[deprecated]] const std::string& base_proposer_reward() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_base_proposer_reward(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_base_proposer_reward();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_base_proposer_reward();
  [[deprecated]] void set_allocated_base_proposer_reward(std::string* value);

  private:
  const std::string& _internal_base_proposer_reward() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base_proposer_reward(
      const std::string& value);
  std::string* _internal_mutable_base_proposer_reward();

  public:
  // string bonus_proposer_reward = 3 [json_name = "bonusProposerReward", deprecated = true, (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec", (.amino.dont_omitempty) = true];
  [[deprecated]]  void clear_bonus_proposer_reward() ;
  [[deprecated]] const std::string& bonus_proposer_reward() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_bonus_proposer_reward(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_bonus_proposer_reward();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_bonus_proposer_reward();
  [[deprecated]] void set_allocated_bonus_proposer_reward(std::string* value);

  private:
  const std::string& _internal_bonus_proposer_reward() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bonus_proposer_reward(
      const std::string& value);
  std::string* _internal_mutable_bonus_proposer_reward();

  public:
  // bool withdraw_addr_enabled = 4 [json_name = "withdrawAddrEnabled"];
  void clear_withdraw_addr_enabled() ;
  bool withdraw_addr_enabled() const;
  void set_withdraw_addr_enabled(bool value);

  private:
  bool _internal_withdraw_addr_enabled() const;
  void _internal_set_withdraw_addr_enabled(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.distribution.v1beta1.Params)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      97, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Params& from_msg);
    ::google::protobuf::internal::ArenaStringPtr community_tax_;
    ::google::protobuf::internal::ArenaStringPtr base_proposer_reward_;
    ::google::protobuf::internal::ArenaStringPtr bonus_proposer_reward_;
    bool withdraw_addr_enabled_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto;
};
// -------------------------------------------------------------------

class DelegatorStartingInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.distribution.v1beta1.DelegatorStartingInfo) */ {
 public:
  inline DelegatorStartingInfo() : DelegatorStartingInfo(nullptr) {}
  ~DelegatorStartingInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DelegatorStartingInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DelegatorStartingInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DelegatorStartingInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline DelegatorStartingInfo(const DelegatorStartingInfo& from) : DelegatorStartingInfo(nullptr, from) {}
  inline DelegatorStartingInfo(DelegatorStartingInfo&& from) noexcept
      : DelegatorStartingInfo(nullptr, std::move(from)) {}
  inline DelegatorStartingInfo& operator=(const DelegatorStartingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelegatorStartingInfo& operator=(DelegatorStartingInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelegatorStartingInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelegatorStartingInfo* internal_default_instance() {
    return reinterpret_cast<const DelegatorStartingInfo*>(
        &_DelegatorStartingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(DelegatorStartingInfo& a, DelegatorStartingInfo& b) { a.Swap(&b); }
  inline void Swap(DelegatorStartingInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelegatorStartingInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DelegatorStartingInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DelegatorStartingInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DelegatorStartingInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DelegatorStartingInfo& from) { DelegatorStartingInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DelegatorStartingInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.distribution.v1beta1.DelegatorStartingInfo"; }

 protected:
  explicit DelegatorStartingInfo(::google::protobuf::Arena* arena);
  DelegatorStartingInfo(::google::protobuf::Arena* arena, const DelegatorStartingInfo& from);
  DelegatorStartingInfo(::google::protobuf::Arena* arena, DelegatorStartingInfo&& from) noexcept
      : DelegatorStartingInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStakeFieldNumber = 2,
    kPreviousPeriodFieldNumber = 1,
    kHeightFieldNumber = 3,
  };
  // string stake = 2 [json_name = "stake", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec", (.amino.dont_omitempty) = true];
  void clear_stake() ;
  const std::string& stake() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stake(Arg_&& arg, Args_... args);
  std::string* mutable_stake();
  PROTOBUF_NODISCARD std::string* release_stake();
  void set_allocated_stake(std::string* value);

  private:
  const std::string& _internal_stake() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stake(
      const std::string& value);
  std::string* _internal_mutable_stake();

  public:
  // uint64 previous_period = 1 [json_name = "previousPeriod"];
  void clear_previous_period() ;
  ::uint64_t previous_period() const;
  void set_previous_period(::uint64_t value);

  private:
  ::uint64_t _internal_previous_period() const;
  void _internal_set_previous_period(::uint64_t value);

  public:
  // uint64 height = 3 [json_name = "height", (.gogoproto.jsontag) = "creation_height", (.amino.field_name) = "creation_height", (.amino.dont_omitempty) = true];
  void clear_height() ;
  ::uint64_t height() const;
  void set_height(::uint64_t value);

  private:
  ::uint64_t _internal_height() const;
  void _internal_set_height(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.distribution.v1beta1.DelegatorStartingInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      63, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DelegatorStartingInfo& from_msg);
    ::google::protobuf::internal::ArenaStringPtr stake_;
    ::uint64_t previous_period_;
    ::uint64_t height_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto;
};
// -------------------------------------------------------------------

class CommunityPoolSpendProposalWithDeposit final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit) */ {
 public:
  inline CommunityPoolSpendProposalWithDeposit() : CommunityPoolSpendProposalWithDeposit(nullptr) {}
  ~CommunityPoolSpendProposalWithDeposit() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CommunityPoolSpendProposalWithDeposit* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CommunityPoolSpendProposalWithDeposit));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CommunityPoolSpendProposalWithDeposit(
      ::google::protobuf::internal::ConstantInitialized);

  inline CommunityPoolSpendProposalWithDeposit(const CommunityPoolSpendProposalWithDeposit& from) : CommunityPoolSpendProposalWithDeposit(nullptr, from) {}
  inline CommunityPoolSpendProposalWithDeposit(CommunityPoolSpendProposalWithDeposit&& from) noexcept
      : CommunityPoolSpendProposalWithDeposit(nullptr, std::move(from)) {}
  inline CommunityPoolSpendProposalWithDeposit& operator=(const CommunityPoolSpendProposalWithDeposit& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommunityPoolSpendProposalWithDeposit& operator=(CommunityPoolSpendProposalWithDeposit&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommunityPoolSpendProposalWithDeposit& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommunityPoolSpendProposalWithDeposit* internal_default_instance() {
    return reinterpret_cast<const CommunityPoolSpendProposalWithDeposit*>(
        &_CommunityPoolSpendProposalWithDeposit_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(CommunityPoolSpendProposalWithDeposit& a, CommunityPoolSpendProposalWithDeposit& b) { a.Swap(&b); }
  inline void Swap(CommunityPoolSpendProposalWithDeposit* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommunityPoolSpendProposalWithDeposit* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommunityPoolSpendProposalWithDeposit* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CommunityPoolSpendProposalWithDeposit>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CommunityPoolSpendProposalWithDeposit& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CommunityPoolSpendProposalWithDeposit& from) { CommunityPoolSpendProposalWithDeposit::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CommunityPoolSpendProposalWithDeposit* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit"; }

 protected:
  explicit CommunityPoolSpendProposalWithDeposit(::google::protobuf::Arena* arena);
  CommunityPoolSpendProposalWithDeposit(::google::protobuf::Arena* arena, const CommunityPoolSpendProposalWithDeposit& from);
  CommunityPoolSpendProposalWithDeposit(::google::protobuf::Arena* arena, CommunityPoolSpendProposalWithDeposit&& from) noexcept
      : CommunityPoolSpendProposalWithDeposit(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kRecipientFieldNumber = 3,
    kAmountFieldNumber = 4,
    kDepositFieldNumber = 5,
  };
  // string title = 1 [json_name = "title"];
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 2 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // string recipient = 3 [json_name = "recipient"];
  void clear_recipient() ;
  const std::string& recipient() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recipient(Arg_&& arg, Args_... args);
  std::string* mutable_recipient();
  PROTOBUF_NODISCARD std::string* release_recipient();
  void set_allocated_recipient(std::string* value);

  private:
  const std::string& _internal_recipient() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recipient(
      const std::string& value);
  std::string* _internal_mutable_recipient();

  public:
  // string amount = 4 [json_name = "amount"];
  void clear_amount() ;
  const std::string& amount() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_amount(Arg_&& arg, Args_... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* value);

  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(
      const std::string& value);
  std::string* _internal_mutable_amount();

  public:
  // string deposit = 5 [json_name = "deposit"];
  void clear_deposit() ;
  const std::string& deposit() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_deposit(Arg_&& arg, Args_... args);
  std::string* mutable_deposit();
  PROTOBUF_NODISCARD std::string* release_deposit();
  void set_allocated_deposit(std::string* value);

  private:
  const std::string& _internal_deposit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deposit(
      const std::string& value);
  std::string* _internal_mutable_deposit();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      112, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CommunityPoolSpendProposalWithDeposit& from_msg);
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr recipient_;
    ::google::protobuf::internal::ArenaStringPtr amount_;
    ::google::protobuf::internal::ArenaStringPtr deposit_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto;
};
// -------------------------------------------------------------------

class ValidatorSlashEvents final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.distribution.v1beta1.ValidatorSlashEvents) */ {
 public:
  inline ValidatorSlashEvents() : ValidatorSlashEvents(nullptr) {}
  ~ValidatorSlashEvents() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ValidatorSlashEvents* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ValidatorSlashEvents));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ValidatorSlashEvents(
      ::google::protobuf::internal::ConstantInitialized);

  inline ValidatorSlashEvents(const ValidatorSlashEvents& from) : ValidatorSlashEvents(nullptr, from) {}
  inline ValidatorSlashEvents(ValidatorSlashEvents&& from) noexcept
      : ValidatorSlashEvents(nullptr, std::move(from)) {}
  inline ValidatorSlashEvents& operator=(const ValidatorSlashEvents& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatorSlashEvents& operator=(ValidatorSlashEvents&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidatorSlashEvents& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidatorSlashEvents* internal_default_instance() {
    return reinterpret_cast<const ValidatorSlashEvents*>(
        &_ValidatorSlashEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(ValidatorSlashEvents& a, ValidatorSlashEvents& b) { a.Swap(&b); }
  inline void Swap(ValidatorSlashEvents* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatorSlashEvents* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidatorSlashEvents* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ValidatorSlashEvents>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ValidatorSlashEvents& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ValidatorSlashEvents& from) { ValidatorSlashEvents::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ValidatorSlashEvents* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.distribution.v1beta1.ValidatorSlashEvents"; }

 protected:
  explicit ValidatorSlashEvents(::google::protobuf::Arena* arena);
  ValidatorSlashEvents(::google::protobuf::Arena* arena, const ValidatorSlashEvents& from);
  ValidatorSlashEvents(::google::protobuf::Arena* arena, ValidatorSlashEvents&& from) noexcept
      : ValidatorSlashEvents(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValidatorSlashEventsFieldNumber = 1,
  };
  // repeated .cosmos.distribution.v1beta1.ValidatorSlashEvent validator_slash_events = 1 [json_name = "validatorSlashEvents", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int validator_slash_events_size() const;
  private:
  int _internal_validator_slash_events_size() const;

  public:
  void clear_validator_slash_events() ;
  ::cosmos::distribution::v1beta1::ValidatorSlashEvent* mutable_validator_slash_events(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::distribution::v1beta1::ValidatorSlashEvent>* mutable_validator_slash_events();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::distribution::v1beta1::ValidatorSlashEvent>& _internal_validator_slash_events() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::distribution::v1beta1::ValidatorSlashEvent>* _internal_mutable_validator_slash_events();
  public:
  const ::cosmos::distribution::v1beta1::ValidatorSlashEvent& validator_slash_events(int index) const;
  ::cosmos::distribution::v1beta1::ValidatorSlashEvent* add_validator_slash_events();
  const ::google::protobuf::RepeatedPtrField<::cosmos::distribution::v1beta1::ValidatorSlashEvent>& validator_slash_events() const;
  // @@protoc_insertion_point(class_scope:cosmos.distribution.v1beta1.ValidatorSlashEvents)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ValidatorSlashEvents& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::distribution::v1beta1::ValidatorSlashEvent > validator_slash_events_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto;
};
// -------------------------------------------------------------------

class ValidatorOutstandingRewards final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.distribution.v1beta1.ValidatorOutstandingRewards) */ {
 public:
  inline ValidatorOutstandingRewards() : ValidatorOutstandingRewards(nullptr) {}
  ~ValidatorOutstandingRewards() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ValidatorOutstandingRewards* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ValidatorOutstandingRewards));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ValidatorOutstandingRewards(
      ::google::protobuf::internal::ConstantInitialized);

  inline ValidatorOutstandingRewards(const ValidatorOutstandingRewards& from) : ValidatorOutstandingRewards(nullptr, from) {}
  inline ValidatorOutstandingRewards(ValidatorOutstandingRewards&& from) noexcept
      : ValidatorOutstandingRewards(nullptr, std::move(from)) {}
  inline ValidatorOutstandingRewards& operator=(const ValidatorOutstandingRewards& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatorOutstandingRewards& operator=(ValidatorOutstandingRewards&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidatorOutstandingRewards& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidatorOutstandingRewards* internal_default_instance() {
    return reinterpret_cast<const ValidatorOutstandingRewards*>(
        &_ValidatorOutstandingRewards_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(ValidatorOutstandingRewards& a, ValidatorOutstandingRewards& b) { a.Swap(&b); }
  inline void Swap(ValidatorOutstandingRewards* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatorOutstandingRewards* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidatorOutstandingRewards* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ValidatorOutstandingRewards>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ValidatorOutstandingRewards& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ValidatorOutstandingRewards& from) { ValidatorOutstandingRewards::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ValidatorOutstandingRewards* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.distribution.v1beta1.ValidatorOutstandingRewards"; }

 protected:
  explicit ValidatorOutstandingRewards(::google::protobuf::Arena* arena);
  ValidatorOutstandingRewards(::google::protobuf::Arena* arena, const ValidatorOutstandingRewards& from);
  ValidatorOutstandingRewards(::google::protobuf::Arena* arena, ValidatorOutstandingRewards&& from) noexcept
      : ValidatorOutstandingRewards(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRewardsFieldNumber = 1,
  };
  // repeated .cosmos.base.v1beta1.DecCoin rewards = 1 [json_name = "rewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
  int rewards_size() const;
  private:
  int _internal_rewards_size() const;

  public:
  void clear_rewards() ;
  ::cosmos::base::v1beta1::DecCoin* mutable_rewards(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>* mutable_rewards();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>& _internal_rewards() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>* _internal_mutable_rewards();
  public:
  const ::cosmos::base::v1beta1::DecCoin& rewards(int index) const;
  ::cosmos::base::v1beta1::DecCoin* add_rewards();
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>& rewards() const;
  // @@protoc_insertion_point(class_scope:cosmos.distribution.v1beta1.ValidatorOutstandingRewards)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ValidatorOutstandingRewards& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::base::v1beta1::DecCoin > rewards_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto;
};
// -------------------------------------------------------------------

class ValidatorHistoricalRewards final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.distribution.v1beta1.ValidatorHistoricalRewards) */ {
 public:
  inline ValidatorHistoricalRewards() : ValidatorHistoricalRewards(nullptr) {}
  ~ValidatorHistoricalRewards() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ValidatorHistoricalRewards* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ValidatorHistoricalRewards));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ValidatorHistoricalRewards(
      ::google::protobuf::internal::ConstantInitialized);

  inline ValidatorHistoricalRewards(const ValidatorHistoricalRewards& from) : ValidatorHistoricalRewards(nullptr, from) {}
  inline ValidatorHistoricalRewards(ValidatorHistoricalRewards&& from) noexcept
      : ValidatorHistoricalRewards(nullptr, std::move(from)) {}
  inline ValidatorHistoricalRewards& operator=(const ValidatorHistoricalRewards& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatorHistoricalRewards& operator=(ValidatorHistoricalRewards&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidatorHistoricalRewards& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidatorHistoricalRewards* internal_default_instance() {
    return reinterpret_cast<const ValidatorHistoricalRewards*>(
        &_ValidatorHistoricalRewards_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ValidatorHistoricalRewards& a, ValidatorHistoricalRewards& b) { a.Swap(&b); }
  inline void Swap(ValidatorHistoricalRewards* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatorHistoricalRewards* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidatorHistoricalRewards* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ValidatorHistoricalRewards>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ValidatorHistoricalRewards& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ValidatorHistoricalRewards& from) { ValidatorHistoricalRewards::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ValidatorHistoricalRewards* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.distribution.v1beta1.ValidatorHistoricalRewards"; }

 protected:
  explicit ValidatorHistoricalRewards(::google::protobuf::Arena* arena);
  ValidatorHistoricalRewards(::google::protobuf::Arena* arena, const ValidatorHistoricalRewards& from);
  ValidatorHistoricalRewards(::google::protobuf::Arena* arena, ValidatorHistoricalRewards&& from) noexcept
      : ValidatorHistoricalRewards(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCumulativeRewardRatioFieldNumber = 1,
    kReferenceCountFieldNumber = 2,
  };
  // repeated .cosmos.base.v1beta1.DecCoin cumulative_reward_ratio = 1 [json_name = "cumulativeRewardRatio", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
  int cumulative_reward_ratio_size() const;
  private:
  int _internal_cumulative_reward_ratio_size() const;

  public:
  void clear_cumulative_reward_ratio() ;
  ::cosmos::base::v1beta1::DecCoin* mutable_cumulative_reward_ratio(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>* mutable_cumulative_reward_ratio();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>& _internal_cumulative_reward_ratio() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>* _internal_mutable_cumulative_reward_ratio();
  public:
  const ::cosmos::base::v1beta1::DecCoin& cumulative_reward_ratio(int index) const;
  ::cosmos::base::v1beta1::DecCoin* add_cumulative_reward_ratio();
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>& cumulative_reward_ratio() const;
  // uint32 reference_count = 2 [json_name = "referenceCount"];
  void clear_reference_count() ;
  ::uint32_t reference_count() const;
  void set_reference_count(::uint32_t value);

  private:
  ::uint32_t _internal_reference_count() const;
  void _internal_set_reference_count(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.distribution.v1beta1.ValidatorHistoricalRewards)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ValidatorHistoricalRewards& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::base::v1beta1::DecCoin > cumulative_reward_ratio_;
    ::uint32_t reference_count_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto;
};
// -------------------------------------------------------------------

class ValidatorCurrentRewards final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.distribution.v1beta1.ValidatorCurrentRewards) */ {
 public:
  inline ValidatorCurrentRewards() : ValidatorCurrentRewards(nullptr) {}
  ~ValidatorCurrentRewards() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ValidatorCurrentRewards* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ValidatorCurrentRewards));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ValidatorCurrentRewards(
      ::google::protobuf::internal::ConstantInitialized);

  inline ValidatorCurrentRewards(const ValidatorCurrentRewards& from) : ValidatorCurrentRewards(nullptr, from) {}
  inline ValidatorCurrentRewards(ValidatorCurrentRewards&& from) noexcept
      : ValidatorCurrentRewards(nullptr, std::move(from)) {}
  inline ValidatorCurrentRewards& operator=(const ValidatorCurrentRewards& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatorCurrentRewards& operator=(ValidatorCurrentRewards&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidatorCurrentRewards& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidatorCurrentRewards* internal_default_instance() {
    return reinterpret_cast<const ValidatorCurrentRewards*>(
        &_ValidatorCurrentRewards_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ValidatorCurrentRewards& a, ValidatorCurrentRewards& b) { a.Swap(&b); }
  inline void Swap(ValidatorCurrentRewards* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatorCurrentRewards* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidatorCurrentRewards* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ValidatorCurrentRewards>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ValidatorCurrentRewards& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ValidatorCurrentRewards& from) { ValidatorCurrentRewards::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ValidatorCurrentRewards* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.distribution.v1beta1.ValidatorCurrentRewards"; }

 protected:
  explicit ValidatorCurrentRewards(::google::protobuf::Arena* arena);
  ValidatorCurrentRewards(::google::protobuf::Arena* arena, const ValidatorCurrentRewards& from);
  ValidatorCurrentRewards(::google::protobuf::Arena* arena, ValidatorCurrentRewards&& from) noexcept
      : ValidatorCurrentRewards(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRewardsFieldNumber = 1,
    kPeriodFieldNumber = 2,
  };
  // repeated .cosmos.base.v1beta1.DecCoin rewards = 1 [json_name = "rewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
  int rewards_size() const;
  private:
  int _internal_rewards_size() const;

  public:
  void clear_rewards() ;
  ::cosmos::base::v1beta1::DecCoin* mutable_rewards(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>* mutable_rewards();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>& _internal_rewards() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>* _internal_mutable_rewards();
  public:
  const ::cosmos::base::v1beta1::DecCoin& rewards(int index) const;
  ::cosmos::base::v1beta1::DecCoin* add_rewards();
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>& rewards() const;
  // uint64 period = 2 [json_name = "period"];
  void clear_period() ;
  ::uint64_t period() const;
  void set_period(::uint64_t value);

  private:
  ::uint64_t _internal_period() const;
  void _internal_set_period(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.distribution.v1beta1.ValidatorCurrentRewards)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ValidatorCurrentRewards& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::base::v1beta1::DecCoin > rewards_;
    ::uint64_t period_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto;
};
// -------------------------------------------------------------------

class ValidatorAccumulatedCommission final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.distribution.v1beta1.ValidatorAccumulatedCommission) */ {
 public:
  inline ValidatorAccumulatedCommission() : ValidatorAccumulatedCommission(nullptr) {}
  ~ValidatorAccumulatedCommission() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ValidatorAccumulatedCommission* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ValidatorAccumulatedCommission));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ValidatorAccumulatedCommission(
      ::google::protobuf::internal::ConstantInitialized);

  inline ValidatorAccumulatedCommission(const ValidatorAccumulatedCommission& from) : ValidatorAccumulatedCommission(nullptr, from) {}
  inline ValidatorAccumulatedCommission(ValidatorAccumulatedCommission&& from) noexcept
      : ValidatorAccumulatedCommission(nullptr, std::move(from)) {}
  inline ValidatorAccumulatedCommission& operator=(const ValidatorAccumulatedCommission& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatorAccumulatedCommission& operator=(ValidatorAccumulatedCommission&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidatorAccumulatedCommission& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidatorAccumulatedCommission* internal_default_instance() {
    return reinterpret_cast<const ValidatorAccumulatedCommission*>(
        &_ValidatorAccumulatedCommission_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(ValidatorAccumulatedCommission& a, ValidatorAccumulatedCommission& b) { a.Swap(&b); }
  inline void Swap(ValidatorAccumulatedCommission* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatorAccumulatedCommission* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidatorAccumulatedCommission* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ValidatorAccumulatedCommission>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ValidatorAccumulatedCommission& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ValidatorAccumulatedCommission& from) { ValidatorAccumulatedCommission::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ValidatorAccumulatedCommission* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.distribution.v1beta1.ValidatorAccumulatedCommission"; }

 protected:
  explicit ValidatorAccumulatedCommission(::google::protobuf::Arena* arena);
  ValidatorAccumulatedCommission(::google::protobuf::Arena* arena, const ValidatorAccumulatedCommission& from);
  ValidatorAccumulatedCommission(::google::protobuf::Arena* arena, ValidatorAccumulatedCommission&& from) noexcept
      : ValidatorAccumulatedCommission(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCommissionFieldNumber = 1,
  };
  // repeated .cosmos.base.v1beta1.DecCoin commission = 1 [json_name = "commission", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
  int commission_size() const;
  private:
  int _internal_commission_size() const;

  public:
  void clear_commission() ;
  ::cosmos::base::v1beta1::DecCoin* mutable_commission(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>* mutable_commission();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>& _internal_commission() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>* _internal_mutable_commission();
  public:
  const ::cosmos::base::v1beta1::DecCoin& commission(int index) const;
  ::cosmos::base::v1beta1::DecCoin* add_commission();
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>& commission() const;
  // @@protoc_insertion_point(class_scope:cosmos.distribution.v1beta1.ValidatorAccumulatedCommission)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ValidatorAccumulatedCommission& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::base::v1beta1::DecCoin > commission_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto;
};
// -------------------------------------------------------------------

class FeePool final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.distribution.v1beta1.FeePool) */ {
 public:
  inline FeePool() : FeePool(nullptr) {}
  ~FeePool() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FeePool* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FeePool));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FeePool(
      ::google::protobuf::internal::ConstantInitialized);

  inline FeePool(const FeePool& from) : FeePool(nullptr, from) {}
  inline FeePool(FeePool&& from) noexcept
      : FeePool(nullptr, std::move(from)) {}
  inline FeePool& operator=(const FeePool& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeePool& operator=(FeePool&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeePool& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeePool* internal_default_instance() {
    return reinterpret_cast<const FeePool*>(
        &_FeePool_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(FeePool& a, FeePool& b) { a.Swap(&b); }
  inline void Swap(FeePool* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeePool* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeePool* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FeePool>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FeePool& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FeePool& from) { FeePool::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FeePool* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.distribution.v1beta1.FeePool"; }

 protected:
  explicit FeePool(::google::protobuf::Arena* arena);
  FeePool(::google::protobuf::Arena* arena, const FeePool& from);
  FeePool(::google::protobuf::Arena* arena, FeePool&& from) noexcept
      : FeePool(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCommunityPoolFieldNumber = 1,
  };
  // repeated .cosmos.base.v1beta1.DecCoin community_pool = 1 [json_name = "communityPool", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
  int community_pool_size() const;
  private:
  int _internal_community_pool_size() const;

  public:
  void clear_community_pool() ;
  ::cosmos::base::v1beta1::DecCoin* mutable_community_pool(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>* mutable_community_pool();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>& _internal_community_pool() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>* _internal_mutable_community_pool();
  public:
  const ::cosmos::base::v1beta1::DecCoin& community_pool(int index) const;
  ::cosmos::base::v1beta1::DecCoin* add_community_pool();
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>& community_pool() const;
  // @@protoc_insertion_point(class_scope:cosmos.distribution.v1beta1.FeePool)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FeePool& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::base::v1beta1::DecCoin > community_pool_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto;
};
// -------------------------------------------------------------------

class DelegationDelegatorReward final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.distribution.v1beta1.DelegationDelegatorReward) */ {
 public:
  inline DelegationDelegatorReward() : DelegationDelegatorReward(nullptr) {}
  ~DelegationDelegatorReward() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DelegationDelegatorReward* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DelegationDelegatorReward));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DelegationDelegatorReward(
      ::google::protobuf::internal::ConstantInitialized);

  inline DelegationDelegatorReward(const DelegationDelegatorReward& from) : DelegationDelegatorReward(nullptr, from) {}
  inline DelegationDelegatorReward(DelegationDelegatorReward&& from) noexcept
      : DelegationDelegatorReward(nullptr, std::move(from)) {}
  inline DelegationDelegatorReward& operator=(const DelegationDelegatorReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelegationDelegatorReward& operator=(DelegationDelegatorReward&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelegationDelegatorReward& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelegationDelegatorReward* internal_default_instance() {
    return reinterpret_cast<const DelegationDelegatorReward*>(
        &_DelegationDelegatorReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(DelegationDelegatorReward& a, DelegationDelegatorReward& b) { a.Swap(&b); }
  inline void Swap(DelegationDelegatorReward* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelegationDelegatorReward* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DelegationDelegatorReward* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DelegationDelegatorReward>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DelegationDelegatorReward& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DelegationDelegatorReward& from) { DelegationDelegatorReward::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DelegationDelegatorReward* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.distribution.v1beta1.DelegationDelegatorReward"; }

 protected:
  explicit DelegationDelegatorReward(::google::protobuf::Arena* arena);
  DelegationDelegatorReward(::google::protobuf::Arena* arena, const DelegationDelegatorReward& from);
  DelegationDelegatorReward(::google::protobuf::Arena* arena, DelegationDelegatorReward&& from) noexcept
      : DelegationDelegatorReward(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRewardFieldNumber = 2,
    kValidatorAddressFieldNumber = 1,
  };
  // repeated .cosmos.base.v1beta1.DecCoin reward = 2 [json_name = "reward", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
  int reward_size() const;
  private:
  int _internal_reward_size() const;

  public:
  void clear_reward() ;
  ::cosmos::base::v1beta1::DecCoin* mutable_reward(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>* mutable_reward();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>& _internal_reward() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>* _internal_mutable_reward();
  public:
  const ::cosmos::base::v1beta1::DecCoin& reward(int index) const;
  ::cosmos::base::v1beta1::DecCoin* add_reward();
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>& reward() const;
  // string validator_address = 1 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.ValidatorAddressString"];
  void clear_validator_address() ;
  const std::string& validator_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_validator_address(Arg_&& arg, Args_... args);
  std::string* mutable_validator_address();
  PROTOBUF_NODISCARD std::string* release_validator_address();
  void set_allocated_validator_address(std::string* value);

  private:
  const std::string& _internal_validator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validator_address(
      const std::string& value);
  std::string* _internal_mutable_validator_address();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.distribution.v1beta1.DelegationDelegatorReward)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      79, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DelegationDelegatorReward& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::base::v1beta1::DecCoin > reward_;
    ::google::protobuf::internal::ArenaStringPtr validator_address_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto;
};
// -------------------------------------------------------------------

class CommunityPoolSpendProposal final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.distribution.v1beta1.CommunityPoolSpendProposal) */ {
 public:
  inline CommunityPoolSpendProposal() : CommunityPoolSpendProposal(nullptr) {}
  ~CommunityPoolSpendProposal() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CommunityPoolSpendProposal* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CommunityPoolSpendProposal));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CommunityPoolSpendProposal(
      ::google::protobuf::internal::ConstantInitialized);

  inline CommunityPoolSpendProposal(const CommunityPoolSpendProposal& from) : CommunityPoolSpendProposal(nullptr, from) {}
  inline CommunityPoolSpendProposal(CommunityPoolSpendProposal&& from) noexcept
      : CommunityPoolSpendProposal(nullptr, std::move(from)) {}
  inline CommunityPoolSpendProposal& operator=(const CommunityPoolSpendProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommunityPoolSpendProposal& operator=(CommunityPoolSpendProposal&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommunityPoolSpendProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommunityPoolSpendProposal* internal_default_instance() {
    return reinterpret_cast<const CommunityPoolSpendProposal*>(
        &_CommunityPoolSpendProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(CommunityPoolSpendProposal& a, CommunityPoolSpendProposal& b) { a.Swap(&b); }
  inline void Swap(CommunityPoolSpendProposal* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommunityPoolSpendProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommunityPoolSpendProposal* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CommunityPoolSpendProposal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CommunityPoolSpendProposal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CommunityPoolSpendProposal& from) { CommunityPoolSpendProposal::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CommunityPoolSpendProposal* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.distribution.v1beta1.CommunityPoolSpendProposal"; }

 protected:
  explicit CommunityPoolSpendProposal(::google::protobuf::Arena* arena);
  CommunityPoolSpendProposal(::google::protobuf::Arena* arena, const CommunityPoolSpendProposal& from);
  CommunityPoolSpendProposal(::google::protobuf::Arena* arena, CommunityPoolSpendProposal&& from) noexcept
      : CommunityPoolSpendProposal(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAmountFieldNumber = 4,
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kRecipientFieldNumber = 3,
  };
  // repeated .cosmos.base.v1beta1.Coin amount = 4 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
  int amount_size() const;
  private:
  int _internal_amount_size() const;

  public:
  void clear_amount() ;
  ::cosmos::base::v1beta1::Coin* mutable_amount(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* mutable_amount();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_amount() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_amount();
  public:
  const ::cosmos::base::v1beta1::Coin& amount(int index) const;
  ::cosmos::base::v1beta1::Coin* add_amount();
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& amount() const;
  // string title = 1 [json_name = "title"];
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 2 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // string recipient = 3 [json_name = "recipient"];
  void clear_recipient() ;
  const std::string& recipient() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recipient(Arg_&& arg, Args_... args);
  std::string* mutable_recipient();
  PROTOBUF_NODISCARD std::string* release_recipient();
  void set_allocated_recipient(std::string* value);

  private:
  const std::string& _internal_recipient() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recipient(
      const std::string& value);
  std::string* _internal_mutable_recipient();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.distribution.v1beta1.CommunityPoolSpendProposal)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      88, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CommunityPoolSpendProposal& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > amount_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr recipient_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Params

// string community_tax = 1 [json_name = "communityTax", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec", (.amino.dont_omitempty) = true];
inline void Params::clear_community_tax() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.community_tax_.ClearToEmpty();
}
inline const std::string& Params::community_tax() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.Params.community_tax)
  return _internal_community_tax();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_community_tax(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.community_tax_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.distribution.v1beta1.Params.community_tax)
}
inline std::string* Params::mutable_community_tax() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_community_tax();
  // @@protoc_insertion_point(field_mutable:cosmos.distribution.v1beta1.Params.community_tax)
  return _s;
}
inline const std::string& Params::_internal_community_tax() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.community_tax_.Get();
}
inline void Params::_internal_set_community_tax(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.community_tax_.Set(value, GetArena());
}
inline std::string* Params::_internal_mutable_community_tax() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.community_tax_.Mutable( GetArena());
}
inline std::string* Params::release_community_tax() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.distribution.v1beta1.Params.community_tax)
  return _impl_.community_tax_.Release();
}
inline void Params::set_allocated_community_tax(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.community_tax_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.community_tax_.IsDefault()) {
    _impl_.community_tax_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.distribution.v1beta1.Params.community_tax)
}

// string base_proposer_reward = 2 [json_name = "baseProposerReward", deprecated = true, (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec", (.amino.dont_omitempty) = true];
inline void Params::clear_base_proposer_reward() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_proposer_reward_.ClearToEmpty();
}
inline const std::string& Params::base_proposer_reward() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.Params.base_proposer_reward)
  return _internal_base_proposer_reward();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_base_proposer_reward(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_proposer_reward_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.distribution.v1beta1.Params.base_proposer_reward)
}
inline std::string* Params::mutable_base_proposer_reward() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_base_proposer_reward();
  // @@protoc_insertion_point(field_mutable:cosmos.distribution.v1beta1.Params.base_proposer_reward)
  return _s;
}
inline const std::string& Params::_internal_base_proposer_reward() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.base_proposer_reward_.Get();
}
inline void Params::_internal_set_base_proposer_reward(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_proposer_reward_.Set(value, GetArena());
}
inline std::string* Params::_internal_mutable_base_proposer_reward() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.base_proposer_reward_.Mutable( GetArena());
}
inline std::string* Params::release_base_proposer_reward() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.distribution.v1beta1.Params.base_proposer_reward)
  return _impl_.base_proposer_reward_.Release();
}
inline void Params::set_allocated_base_proposer_reward(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_proposer_reward_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.base_proposer_reward_.IsDefault()) {
    _impl_.base_proposer_reward_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.distribution.v1beta1.Params.base_proposer_reward)
}

// string bonus_proposer_reward = 3 [json_name = "bonusProposerReward", deprecated = true, (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec", (.amino.dont_omitempty) = true];
inline void Params::clear_bonus_proposer_reward() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bonus_proposer_reward_.ClearToEmpty();
}
inline const std::string& Params::bonus_proposer_reward() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.Params.bonus_proposer_reward)
  return _internal_bonus_proposer_reward();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_bonus_proposer_reward(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bonus_proposer_reward_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.distribution.v1beta1.Params.bonus_proposer_reward)
}
inline std::string* Params::mutable_bonus_proposer_reward() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bonus_proposer_reward();
  // @@protoc_insertion_point(field_mutable:cosmos.distribution.v1beta1.Params.bonus_proposer_reward)
  return _s;
}
inline const std::string& Params::_internal_bonus_proposer_reward() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bonus_proposer_reward_.Get();
}
inline void Params::_internal_set_bonus_proposer_reward(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bonus_proposer_reward_.Set(value, GetArena());
}
inline std::string* Params::_internal_mutable_bonus_proposer_reward() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.bonus_proposer_reward_.Mutable( GetArena());
}
inline std::string* Params::release_bonus_proposer_reward() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.distribution.v1beta1.Params.bonus_proposer_reward)
  return _impl_.bonus_proposer_reward_.Release();
}
inline void Params::set_allocated_bonus_proposer_reward(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bonus_proposer_reward_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.bonus_proposer_reward_.IsDefault()) {
    _impl_.bonus_proposer_reward_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.distribution.v1beta1.Params.bonus_proposer_reward)
}

// bool withdraw_addr_enabled = 4 [json_name = "withdrawAddrEnabled"];
inline void Params::clear_withdraw_addr_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.withdraw_addr_enabled_ = false;
}
inline bool Params::withdraw_addr_enabled() const {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.Params.withdraw_addr_enabled)
  return _internal_withdraw_addr_enabled();
}
inline void Params::set_withdraw_addr_enabled(bool value) {
  _internal_set_withdraw_addr_enabled(value);
  // @@protoc_insertion_point(field_set:cosmos.distribution.v1beta1.Params.withdraw_addr_enabled)
}
inline bool Params::_internal_withdraw_addr_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.withdraw_addr_enabled_;
}
inline void Params::_internal_set_withdraw_addr_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.withdraw_addr_enabled_ = value;
}

// -------------------------------------------------------------------

// ValidatorHistoricalRewards

// repeated .cosmos.base.v1beta1.DecCoin cumulative_reward_ratio = 1 [json_name = "cumulativeRewardRatio", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
inline int ValidatorHistoricalRewards::_internal_cumulative_reward_ratio_size() const {
  return _internal_cumulative_reward_ratio().size();
}
inline int ValidatorHistoricalRewards::cumulative_reward_ratio_size() const {
  return _internal_cumulative_reward_ratio_size();
}
inline ::cosmos::base::v1beta1::DecCoin* ValidatorHistoricalRewards::mutable_cumulative_reward_ratio(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.distribution.v1beta1.ValidatorHistoricalRewards.cumulative_reward_ratio)
  return _internal_mutable_cumulative_reward_ratio()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>* ValidatorHistoricalRewards::mutable_cumulative_reward_ratio()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.distribution.v1beta1.ValidatorHistoricalRewards.cumulative_reward_ratio)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_cumulative_reward_ratio();
}
inline const ::cosmos::base::v1beta1::DecCoin& ValidatorHistoricalRewards::cumulative_reward_ratio(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.ValidatorHistoricalRewards.cumulative_reward_ratio)
  return _internal_cumulative_reward_ratio().Get(index);
}
inline ::cosmos::base::v1beta1::DecCoin* ValidatorHistoricalRewards::add_cumulative_reward_ratio() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::base::v1beta1::DecCoin* _add = _internal_mutable_cumulative_reward_ratio()->Add();
  // @@protoc_insertion_point(field_add:cosmos.distribution.v1beta1.ValidatorHistoricalRewards.cumulative_reward_ratio)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>& ValidatorHistoricalRewards::cumulative_reward_ratio() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.distribution.v1beta1.ValidatorHistoricalRewards.cumulative_reward_ratio)
  return _internal_cumulative_reward_ratio();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>&
ValidatorHistoricalRewards::_internal_cumulative_reward_ratio() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cumulative_reward_ratio_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>*
ValidatorHistoricalRewards::_internal_mutable_cumulative_reward_ratio() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.cumulative_reward_ratio_;
}

// uint32 reference_count = 2 [json_name = "referenceCount"];
inline void ValidatorHistoricalRewards::clear_reference_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reference_count_ = 0u;
}
inline ::uint32_t ValidatorHistoricalRewards::reference_count() const {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.ValidatorHistoricalRewards.reference_count)
  return _internal_reference_count();
}
inline void ValidatorHistoricalRewards::set_reference_count(::uint32_t value) {
  _internal_set_reference_count(value);
  // @@protoc_insertion_point(field_set:cosmos.distribution.v1beta1.ValidatorHistoricalRewards.reference_count)
}
inline ::uint32_t ValidatorHistoricalRewards::_internal_reference_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reference_count_;
}
inline void ValidatorHistoricalRewards::_internal_set_reference_count(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reference_count_ = value;
}

// -------------------------------------------------------------------

// ValidatorCurrentRewards

// repeated .cosmos.base.v1beta1.DecCoin rewards = 1 [json_name = "rewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
inline int ValidatorCurrentRewards::_internal_rewards_size() const {
  return _internal_rewards().size();
}
inline int ValidatorCurrentRewards::rewards_size() const {
  return _internal_rewards_size();
}
inline ::cosmos::base::v1beta1::DecCoin* ValidatorCurrentRewards::mutable_rewards(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.distribution.v1beta1.ValidatorCurrentRewards.rewards)
  return _internal_mutable_rewards()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>* ValidatorCurrentRewards::mutable_rewards()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.distribution.v1beta1.ValidatorCurrentRewards.rewards)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_rewards();
}
inline const ::cosmos::base::v1beta1::DecCoin& ValidatorCurrentRewards::rewards(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.ValidatorCurrentRewards.rewards)
  return _internal_rewards().Get(index);
}
inline ::cosmos::base::v1beta1::DecCoin* ValidatorCurrentRewards::add_rewards() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::base::v1beta1::DecCoin* _add = _internal_mutable_rewards()->Add();
  // @@protoc_insertion_point(field_add:cosmos.distribution.v1beta1.ValidatorCurrentRewards.rewards)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>& ValidatorCurrentRewards::rewards() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.distribution.v1beta1.ValidatorCurrentRewards.rewards)
  return _internal_rewards();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>&
ValidatorCurrentRewards::_internal_rewards() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rewards_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>*
ValidatorCurrentRewards::_internal_mutable_rewards() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.rewards_;
}

// uint64 period = 2 [json_name = "period"];
inline void ValidatorCurrentRewards::clear_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.period_ = ::uint64_t{0u};
}
inline ::uint64_t ValidatorCurrentRewards::period() const {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.ValidatorCurrentRewards.period)
  return _internal_period();
}
inline void ValidatorCurrentRewards::set_period(::uint64_t value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:cosmos.distribution.v1beta1.ValidatorCurrentRewards.period)
}
inline ::uint64_t ValidatorCurrentRewards::_internal_period() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.period_;
}
inline void ValidatorCurrentRewards::_internal_set_period(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.period_ = value;
}

// -------------------------------------------------------------------

// ValidatorAccumulatedCommission

// repeated .cosmos.base.v1beta1.DecCoin commission = 1 [json_name = "commission", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
inline int ValidatorAccumulatedCommission::_internal_commission_size() const {
  return _internal_commission().size();
}
inline int ValidatorAccumulatedCommission::commission_size() const {
  return _internal_commission_size();
}
inline ::cosmos::base::v1beta1::DecCoin* ValidatorAccumulatedCommission::mutable_commission(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.distribution.v1beta1.ValidatorAccumulatedCommission.commission)
  return _internal_mutable_commission()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>* ValidatorAccumulatedCommission::mutable_commission()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.distribution.v1beta1.ValidatorAccumulatedCommission.commission)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_commission();
}
inline const ::cosmos::base::v1beta1::DecCoin& ValidatorAccumulatedCommission::commission(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.ValidatorAccumulatedCommission.commission)
  return _internal_commission().Get(index);
}
inline ::cosmos::base::v1beta1::DecCoin* ValidatorAccumulatedCommission::add_commission() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::base::v1beta1::DecCoin* _add = _internal_mutable_commission()->Add();
  // @@protoc_insertion_point(field_add:cosmos.distribution.v1beta1.ValidatorAccumulatedCommission.commission)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>& ValidatorAccumulatedCommission::commission() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.distribution.v1beta1.ValidatorAccumulatedCommission.commission)
  return _internal_commission();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>&
ValidatorAccumulatedCommission::_internal_commission() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.commission_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>*
ValidatorAccumulatedCommission::_internal_mutable_commission() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.commission_;
}

// -------------------------------------------------------------------

// ValidatorOutstandingRewards

// repeated .cosmos.base.v1beta1.DecCoin rewards = 1 [json_name = "rewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
inline int ValidatorOutstandingRewards::_internal_rewards_size() const {
  return _internal_rewards().size();
}
inline int ValidatorOutstandingRewards::rewards_size() const {
  return _internal_rewards_size();
}
inline ::cosmos::base::v1beta1::DecCoin* ValidatorOutstandingRewards::mutable_rewards(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.distribution.v1beta1.ValidatorOutstandingRewards.rewards)
  return _internal_mutable_rewards()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>* ValidatorOutstandingRewards::mutable_rewards()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.distribution.v1beta1.ValidatorOutstandingRewards.rewards)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_rewards();
}
inline const ::cosmos::base::v1beta1::DecCoin& ValidatorOutstandingRewards::rewards(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.ValidatorOutstandingRewards.rewards)
  return _internal_rewards().Get(index);
}
inline ::cosmos::base::v1beta1::DecCoin* ValidatorOutstandingRewards::add_rewards() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::base::v1beta1::DecCoin* _add = _internal_mutable_rewards()->Add();
  // @@protoc_insertion_point(field_add:cosmos.distribution.v1beta1.ValidatorOutstandingRewards.rewards)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>& ValidatorOutstandingRewards::rewards() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.distribution.v1beta1.ValidatorOutstandingRewards.rewards)
  return _internal_rewards();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>&
ValidatorOutstandingRewards::_internal_rewards() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rewards_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>*
ValidatorOutstandingRewards::_internal_mutable_rewards() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.rewards_;
}

// -------------------------------------------------------------------

// ValidatorSlashEvent

// uint64 validator_period = 1 [json_name = "validatorPeriod"];
inline void ValidatorSlashEvent::clear_validator_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validator_period_ = ::uint64_t{0u};
}
inline ::uint64_t ValidatorSlashEvent::validator_period() const {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.ValidatorSlashEvent.validator_period)
  return _internal_validator_period();
}
inline void ValidatorSlashEvent::set_validator_period(::uint64_t value) {
  _internal_set_validator_period(value);
  // @@protoc_insertion_point(field_set:cosmos.distribution.v1beta1.ValidatorSlashEvent.validator_period)
}
inline ::uint64_t ValidatorSlashEvent::_internal_validator_period() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.validator_period_;
}
inline void ValidatorSlashEvent::_internal_set_validator_period(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validator_period_ = value;
}

// string fraction = 2 [json_name = "fraction", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec"];
inline void ValidatorSlashEvent::clear_fraction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fraction_.ClearToEmpty();
}
inline const std::string& ValidatorSlashEvent::fraction() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.ValidatorSlashEvent.fraction)
  return _internal_fraction();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ValidatorSlashEvent::set_fraction(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fraction_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.distribution.v1beta1.ValidatorSlashEvent.fraction)
}
inline std::string* ValidatorSlashEvent::mutable_fraction() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_fraction();
  // @@protoc_insertion_point(field_mutable:cosmos.distribution.v1beta1.ValidatorSlashEvent.fraction)
  return _s;
}
inline const std::string& ValidatorSlashEvent::_internal_fraction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fraction_.Get();
}
inline void ValidatorSlashEvent::_internal_set_fraction(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fraction_.Set(value, GetArena());
}
inline std::string* ValidatorSlashEvent::_internal_mutable_fraction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.fraction_.Mutable( GetArena());
}
inline std::string* ValidatorSlashEvent::release_fraction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.distribution.v1beta1.ValidatorSlashEvent.fraction)
  return _impl_.fraction_.Release();
}
inline void ValidatorSlashEvent::set_allocated_fraction(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fraction_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.fraction_.IsDefault()) {
    _impl_.fraction_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.distribution.v1beta1.ValidatorSlashEvent.fraction)
}

// -------------------------------------------------------------------

// ValidatorSlashEvents

// repeated .cosmos.distribution.v1beta1.ValidatorSlashEvent validator_slash_events = 1 [json_name = "validatorSlashEvents", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int ValidatorSlashEvents::_internal_validator_slash_events_size() const {
  return _internal_validator_slash_events().size();
}
inline int ValidatorSlashEvents::validator_slash_events_size() const {
  return _internal_validator_slash_events_size();
}
inline void ValidatorSlashEvents::clear_validator_slash_events() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validator_slash_events_.Clear();
}
inline ::cosmos::distribution::v1beta1::ValidatorSlashEvent* ValidatorSlashEvents::mutable_validator_slash_events(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.distribution.v1beta1.ValidatorSlashEvents.validator_slash_events)
  return _internal_mutable_validator_slash_events()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::distribution::v1beta1::ValidatorSlashEvent>* ValidatorSlashEvents::mutable_validator_slash_events()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.distribution.v1beta1.ValidatorSlashEvents.validator_slash_events)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_validator_slash_events();
}
inline const ::cosmos::distribution::v1beta1::ValidatorSlashEvent& ValidatorSlashEvents::validator_slash_events(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.ValidatorSlashEvents.validator_slash_events)
  return _internal_validator_slash_events().Get(index);
}
inline ::cosmos::distribution::v1beta1::ValidatorSlashEvent* ValidatorSlashEvents::add_validator_slash_events() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::distribution::v1beta1::ValidatorSlashEvent* _add = _internal_mutable_validator_slash_events()->Add();
  // @@protoc_insertion_point(field_add:cosmos.distribution.v1beta1.ValidatorSlashEvents.validator_slash_events)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::distribution::v1beta1::ValidatorSlashEvent>& ValidatorSlashEvents::validator_slash_events() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.distribution.v1beta1.ValidatorSlashEvents.validator_slash_events)
  return _internal_validator_slash_events();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::distribution::v1beta1::ValidatorSlashEvent>&
ValidatorSlashEvents::_internal_validator_slash_events() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.validator_slash_events_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::distribution::v1beta1::ValidatorSlashEvent>*
ValidatorSlashEvents::_internal_mutable_validator_slash_events() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.validator_slash_events_;
}

// -------------------------------------------------------------------

// FeePool

// repeated .cosmos.base.v1beta1.DecCoin community_pool = 1 [json_name = "communityPool", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
inline int FeePool::_internal_community_pool_size() const {
  return _internal_community_pool().size();
}
inline int FeePool::community_pool_size() const {
  return _internal_community_pool_size();
}
inline ::cosmos::base::v1beta1::DecCoin* FeePool::mutable_community_pool(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.distribution.v1beta1.FeePool.community_pool)
  return _internal_mutable_community_pool()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>* FeePool::mutable_community_pool()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.distribution.v1beta1.FeePool.community_pool)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_community_pool();
}
inline const ::cosmos::base::v1beta1::DecCoin& FeePool::community_pool(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.FeePool.community_pool)
  return _internal_community_pool().Get(index);
}
inline ::cosmos::base::v1beta1::DecCoin* FeePool::add_community_pool() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::base::v1beta1::DecCoin* _add = _internal_mutable_community_pool()->Add();
  // @@protoc_insertion_point(field_add:cosmos.distribution.v1beta1.FeePool.community_pool)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>& FeePool::community_pool() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.distribution.v1beta1.FeePool.community_pool)
  return _internal_community_pool();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>&
FeePool::_internal_community_pool() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.community_pool_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>*
FeePool::_internal_mutable_community_pool() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.community_pool_;
}

// -------------------------------------------------------------------

// CommunityPoolSpendProposal

// string title = 1 [json_name = "title"];
inline void CommunityPoolSpendProposal::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& CommunityPoolSpendProposal::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.CommunityPoolSpendProposal.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommunityPoolSpendProposal::set_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.distribution.v1beta1.CommunityPoolSpendProposal.title)
}
inline std::string* CommunityPoolSpendProposal::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:cosmos.distribution.v1beta1.CommunityPoolSpendProposal.title)
  return _s;
}
inline const std::string& CommunityPoolSpendProposal::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void CommunityPoolSpendProposal::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(value, GetArena());
}
inline std::string* CommunityPoolSpendProposal::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* CommunityPoolSpendProposal::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.distribution.v1beta1.CommunityPoolSpendProposal.title)
  return _impl_.title_.Release();
}
inline void CommunityPoolSpendProposal::set_allocated_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.distribution.v1beta1.CommunityPoolSpendProposal.title)
}

// string description = 2 [json_name = "description"];
inline void CommunityPoolSpendProposal::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& CommunityPoolSpendProposal::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.CommunityPoolSpendProposal.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommunityPoolSpendProposal::set_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.distribution.v1beta1.CommunityPoolSpendProposal.description)
}
inline std::string* CommunityPoolSpendProposal::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:cosmos.distribution.v1beta1.CommunityPoolSpendProposal.description)
  return _s;
}
inline const std::string& CommunityPoolSpendProposal::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_.Get();
}
inline void CommunityPoolSpendProposal::_internal_set_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(value, GetArena());
}
inline std::string* CommunityPoolSpendProposal::_internal_mutable_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* CommunityPoolSpendProposal::release_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.distribution.v1beta1.CommunityPoolSpendProposal.description)
  return _impl_.description_.Release();
}
inline void CommunityPoolSpendProposal::set_allocated_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.distribution.v1beta1.CommunityPoolSpendProposal.description)
}

// string recipient = 3 [json_name = "recipient"];
inline void CommunityPoolSpendProposal::clear_recipient() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_.ClearToEmpty();
}
inline const std::string& CommunityPoolSpendProposal::recipient() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.CommunityPoolSpendProposal.recipient)
  return _internal_recipient();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommunityPoolSpendProposal::set_recipient(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.distribution.v1beta1.CommunityPoolSpendProposal.recipient)
}
inline std::string* CommunityPoolSpendProposal::mutable_recipient() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_recipient();
  // @@protoc_insertion_point(field_mutable:cosmos.distribution.v1beta1.CommunityPoolSpendProposal.recipient)
  return _s;
}
inline const std::string& CommunityPoolSpendProposal::_internal_recipient() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recipient_.Get();
}
inline void CommunityPoolSpendProposal::_internal_set_recipient(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_.Set(value, GetArena());
}
inline std::string* CommunityPoolSpendProposal::_internal_mutable_recipient() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.recipient_.Mutable( GetArena());
}
inline std::string* CommunityPoolSpendProposal::release_recipient() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.distribution.v1beta1.CommunityPoolSpendProposal.recipient)
  return _impl_.recipient_.Release();
}
inline void CommunityPoolSpendProposal::set_allocated_recipient(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.recipient_.IsDefault()) {
    _impl_.recipient_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.distribution.v1beta1.CommunityPoolSpendProposal.recipient)
}

// repeated .cosmos.base.v1beta1.Coin amount = 4 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
inline int CommunityPoolSpendProposal::_internal_amount_size() const {
  return _internal_amount().size();
}
inline int CommunityPoolSpendProposal::amount_size() const {
  return _internal_amount_size();
}
inline ::cosmos::base::v1beta1::Coin* CommunityPoolSpendProposal::mutable_amount(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.distribution.v1beta1.CommunityPoolSpendProposal.amount)
  return _internal_mutable_amount()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* CommunityPoolSpendProposal::mutable_amount()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.distribution.v1beta1.CommunityPoolSpendProposal.amount)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_amount();
}
inline const ::cosmos::base::v1beta1::Coin& CommunityPoolSpendProposal::amount(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.CommunityPoolSpendProposal.amount)
  return _internal_amount().Get(index);
}
inline ::cosmos::base::v1beta1::Coin* CommunityPoolSpendProposal::add_amount() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::base::v1beta1::Coin* _add = _internal_mutable_amount()->Add();
  // @@protoc_insertion_point(field_add:cosmos.distribution.v1beta1.CommunityPoolSpendProposal.amount)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& CommunityPoolSpendProposal::amount() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.distribution.v1beta1.CommunityPoolSpendProposal.amount)
  return _internal_amount();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
CommunityPoolSpendProposal::_internal_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
CommunityPoolSpendProposal::_internal_mutable_amount() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.amount_;
}

// -------------------------------------------------------------------

// DelegatorStartingInfo

// uint64 previous_period = 1 [json_name = "previousPeriod"];
inline void DelegatorStartingInfo::clear_previous_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.previous_period_ = ::uint64_t{0u};
}
inline ::uint64_t DelegatorStartingInfo::previous_period() const {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.DelegatorStartingInfo.previous_period)
  return _internal_previous_period();
}
inline void DelegatorStartingInfo::set_previous_period(::uint64_t value) {
  _internal_set_previous_period(value);
  // @@protoc_insertion_point(field_set:cosmos.distribution.v1beta1.DelegatorStartingInfo.previous_period)
}
inline ::uint64_t DelegatorStartingInfo::_internal_previous_period() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.previous_period_;
}
inline void DelegatorStartingInfo::_internal_set_previous_period(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.previous_period_ = value;
}

// string stake = 2 [json_name = "stake", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec", (.amino.dont_omitempty) = true];
inline void DelegatorStartingInfo::clear_stake() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stake_.ClearToEmpty();
}
inline const std::string& DelegatorStartingInfo::stake() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.DelegatorStartingInfo.stake)
  return _internal_stake();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DelegatorStartingInfo::set_stake(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stake_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.distribution.v1beta1.DelegatorStartingInfo.stake)
}
inline std::string* DelegatorStartingInfo::mutable_stake() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stake();
  // @@protoc_insertion_point(field_mutable:cosmos.distribution.v1beta1.DelegatorStartingInfo.stake)
  return _s;
}
inline const std::string& DelegatorStartingInfo::_internal_stake() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stake_.Get();
}
inline void DelegatorStartingInfo::_internal_set_stake(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stake_.Set(value, GetArena());
}
inline std::string* DelegatorStartingInfo::_internal_mutable_stake() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.stake_.Mutable( GetArena());
}
inline std::string* DelegatorStartingInfo::release_stake() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.distribution.v1beta1.DelegatorStartingInfo.stake)
  return _impl_.stake_.Release();
}
inline void DelegatorStartingInfo::set_allocated_stake(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stake_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.stake_.IsDefault()) {
    _impl_.stake_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.distribution.v1beta1.DelegatorStartingInfo.stake)
}

// uint64 height = 3 [json_name = "height", (.gogoproto.jsontag) = "creation_height", (.amino.field_name) = "creation_height", (.amino.dont_omitempty) = true];
inline void DelegatorStartingInfo::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = ::uint64_t{0u};
}
inline ::uint64_t DelegatorStartingInfo::height() const {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.DelegatorStartingInfo.height)
  return _internal_height();
}
inline void DelegatorStartingInfo::set_height(::uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:cosmos.distribution.v1beta1.DelegatorStartingInfo.height)
}
inline ::uint64_t DelegatorStartingInfo::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void DelegatorStartingInfo::_internal_set_height(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// -------------------------------------------------------------------

// DelegationDelegatorReward

// string validator_address = 1 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.ValidatorAddressString"];
inline void DelegationDelegatorReward::clear_validator_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validator_address_.ClearToEmpty();
}
inline const std::string& DelegationDelegatorReward::validator_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.DelegationDelegatorReward.validator_address)
  return _internal_validator_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DelegationDelegatorReward::set_validator_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validator_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.distribution.v1beta1.DelegationDelegatorReward.validator_address)
}
inline std::string* DelegationDelegatorReward::mutable_validator_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_validator_address();
  // @@protoc_insertion_point(field_mutable:cosmos.distribution.v1beta1.DelegationDelegatorReward.validator_address)
  return _s;
}
inline const std::string& DelegationDelegatorReward::_internal_validator_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.validator_address_.Get();
}
inline void DelegationDelegatorReward::_internal_set_validator_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validator_address_.Set(value, GetArena());
}
inline std::string* DelegationDelegatorReward::_internal_mutable_validator_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.validator_address_.Mutable( GetArena());
}
inline std::string* DelegationDelegatorReward::release_validator_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.distribution.v1beta1.DelegationDelegatorReward.validator_address)
  return _impl_.validator_address_.Release();
}
inline void DelegationDelegatorReward::set_allocated_validator_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validator_address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.validator_address_.IsDefault()) {
    _impl_.validator_address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.distribution.v1beta1.DelegationDelegatorReward.validator_address)
}

// repeated .cosmos.base.v1beta1.DecCoin reward = 2 [json_name = "reward", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
inline int DelegationDelegatorReward::_internal_reward_size() const {
  return _internal_reward().size();
}
inline int DelegationDelegatorReward::reward_size() const {
  return _internal_reward_size();
}
inline ::cosmos::base::v1beta1::DecCoin* DelegationDelegatorReward::mutable_reward(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.distribution.v1beta1.DelegationDelegatorReward.reward)
  return _internal_mutable_reward()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>* DelegationDelegatorReward::mutable_reward()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.distribution.v1beta1.DelegationDelegatorReward.reward)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_reward();
}
inline const ::cosmos::base::v1beta1::DecCoin& DelegationDelegatorReward::reward(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.DelegationDelegatorReward.reward)
  return _internal_reward().Get(index);
}
inline ::cosmos::base::v1beta1::DecCoin* DelegationDelegatorReward::add_reward() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::base::v1beta1::DecCoin* _add = _internal_mutable_reward()->Add();
  // @@protoc_insertion_point(field_add:cosmos.distribution.v1beta1.DelegationDelegatorReward.reward)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>& DelegationDelegatorReward::reward() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.distribution.v1beta1.DelegationDelegatorReward.reward)
  return _internal_reward();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>&
DelegationDelegatorReward::_internal_reward() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reward_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::DecCoin>*
DelegationDelegatorReward::_internal_mutable_reward() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.reward_;
}

// -------------------------------------------------------------------

// CommunityPoolSpendProposalWithDeposit

// string title = 1 [json_name = "title"];
inline void CommunityPoolSpendProposalWithDeposit::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& CommunityPoolSpendProposalWithDeposit::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommunityPoolSpendProposalWithDeposit::set_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.title)
}
inline std::string* CommunityPoolSpendProposalWithDeposit::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.title)
  return _s;
}
inline const std::string& CommunityPoolSpendProposalWithDeposit::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void CommunityPoolSpendProposalWithDeposit::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(value, GetArena());
}
inline std::string* CommunityPoolSpendProposalWithDeposit::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* CommunityPoolSpendProposalWithDeposit::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.title)
  return _impl_.title_.Release();
}
inline void CommunityPoolSpendProposalWithDeposit::set_allocated_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.title)
}

// string description = 2 [json_name = "description"];
inline void CommunityPoolSpendProposalWithDeposit::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& CommunityPoolSpendProposalWithDeposit::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommunityPoolSpendProposalWithDeposit::set_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.description)
}
inline std::string* CommunityPoolSpendProposalWithDeposit::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.description)
  return _s;
}
inline const std::string& CommunityPoolSpendProposalWithDeposit::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_.Get();
}
inline void CommunityPoolSpendProposalWithDeposit::_internal_set_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(value, GetArena());
}
inline std::string* CommunityPoolSpendProposalWithDeposit::_internal_mutable_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* CommunityPoolSpendProposalWithDeposit::release_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.description)
  return _impl_.description_.Release();
}
inline void CommunityPoolSpendProposalWithDeposit::set_allocated_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.description)
}

// string recipient = 3 [json_name = "recipient"];
inline void CommunityPoolSpendProposalWithDeposit::clear_recipient() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_.ClearToEmpty();
}
inline const std::string& CommunityPoolSpendProposalWithDeposit::recipient() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.recipient)
  return _internal_recipient();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommunityPoolSpendProposalWithDeposit::set_recipient(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.recipient)
}
inline std::string* CommunityPoolSpendProposalWithDeposit::mutable_recipient() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_recipient();
  // @@protoc_insertion_point(field_mutable:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.recipient)
  return _s;
}
inline const std::string& CommunityPoolSpendProposalWithDeposit::_internal_recipient() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recipient_.Get();
}
inline void CommunityPoolSpendProposalWithDeposit::_internal_set_recipient(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_.Set(value, GetArena());
}
inline std::string* CommunityPoolSpendProposalWithDeposit::_internal_mutable_recipient() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.recipient_.Mutable( GetArena());
}
inline std::string* CommunityPoolSpendProposalWithDeposit::release_recipient() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.recipient)
  return _impl_.recipient_.Release();
}
inline void CommunityPoolSpendProposalWithDeposit::set_allocated_recipient(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recipient_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.recipient_.IsDefault()) {
    _impl_.recipient_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.recipient)
}

// string amount = 4 [json_name = "amount"];
inline void CommunityPoolSpendProposalWithDeposit::clear_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_.ClearToEmpty();
}
inline const std::string& CommunityPoolSpendProposalWithDeposit::amount() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.amount)
  return _internal_amount();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommunityPoolSpendProposalWithDeposit::set_amount(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.amount)
}
inline std::string* CommunityPoolSpendProposalWithDeposit::mutable_amount() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.amount)
  return _s;
}
inline const std::string& CommunityPoolSpendProposalWithDeposit::_internal_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_.Get();
}
inline void CommunityPoolSpendProposalWithDeposit::_internal_set_amount(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_.Set(value, GetArena());
}
inline std::string* CommunityPoolSpendProposalWithDeposit::_internal_mutable_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.amount_.Mutable( GetArena());
}
inline std::string* CommunityPoolSpendProposalWithDeposit::release_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.amount)
  return _impl_.amount_.Release();
}
inline void CommunityPoolSpendProposalWithDeposit::set_allocated_amount(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.amount_.IsDefault()) {
    _impl_.amount_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.amount)
}

// string deposit = 5 [json_name = "deposit"];
inline void CommunityPoolSpendProposalWithDeposit::clear_deposit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deposit_.ClearToEmpty();
}
inline const std::string& CommunityPoolSpendProposalWithDeposit::deposit() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.deposit)
  return _internal_deposit();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommunityPoolSpendProposalWithDeposit::set_deposit(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deposit_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.deposit)
}
inline std::string* CommunityPoolSpendProposalWithDeposit::mutable_deposit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_deposit();
  // @@protoc_insertion_point(field_mutable:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.deposit)
  return _s;
}
inline const std::string& CommunityPoolSpendProposalWithDeposit::_internal_deposit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.deposit_.Get();
}
inline void CommunityPoolSpendProposalWithDeposit::_internal_set_deposit(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deposit_.Set(value, GetArena());
}
inline std::string* CommunityPoolSpendProposalWithDeposit::_internal_mutable_deposit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.deposit_.Mutable( GetArena());
}
inline std::string* CommunityPoolSpendProposalWithDeposit::release_deposit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.deposit)
  return _impl_.deposit_.Release();
}
inline void CommunityPoolSpendProposalWithDeposit::set_allocated_deposit(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deposit_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.deposit_.IsDefault()) {
    _impl_.deposit_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.deposit)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace distribution
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_2epb_2eh
