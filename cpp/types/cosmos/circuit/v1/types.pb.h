// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/circuit/v1/types.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2fcircuit_2fv1_2ftypes_2eproto_2epb_2eh
#define cosmos_2fcircuit_2fv1_2ftypes_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fcircuit_2fv1_2ftypes_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fcircuit_2fv1_2ftypes_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2fcircuit_2fv1_2ftypes_2eproto;
namespace cosmos {
namespace circuit {
namespace v1 {
class GenesisAccountPermissions;
struct GenesisAccountPermissionsDefaultTypeInternal;
extern GenesisAccountPermissionsDefaultTypeInternal _GenesisAccountPermissions_default_instance_;
class GenesisState;
struct GenesisStateDefaultTypeInternal;
extern GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
class Permissions;
struct PermissionsDefaultTypeInternal;
extern PermissionsDefaultTypeInternal _Permissions_default_instance_;
}  // namespace v1
}  // namespace circuit
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace circuit {
namespace v1 {
enum Permissions_Level : int {
  Permissions_Level_LEVEL_NONE_UNSPECIFIED = 0,
  Permissions_Level_LEVEL_SOME_MSGS = 1,
  Permissions_Level_LEVEL_ALL_MSGS = 2,
  Permissions_Level_LEVEL_SUPER_ADMIN = 3,
  Permissions_Level_Permissions_Level_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Permissions_Level_Permissions_Level_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Permissions_Level_IsValid(int value);
extern const uint32_t Permissions_Level_internal_data_[];
constexpr Permissions_Level Permissions_Level_Level_MIN = static_cast<Permissions_Level>(0);
constexpr Permissions_Level Permissions_Level_Level_MAX = static_cast<Permissions_Level>(3);
constexpr int Permissions_Level_Level_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
Permissions_Level_descriptor();
template <typename T>
const std::string& Permissions_Level_Name(T value) {
  static_assert(std::is_same<T, Permissions_Level>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Level_Name().");
  return Permissions_Level_Name(static_cast<Permissions_Level>(value));
}
template <>
inline const std::string& Permissions_Level_Name(Permissions_Level value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Permissions_Level_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool Permissions_Level_Parse(absl::string_view name, Permissions_Level* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Permissions_Level>(
      Permissions_Level_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Permissions final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.circuit.v1.Permissions) */ {
 public:
  inline Permissions() : Permissions(nullptr) {}
  ~Permissions() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Permissions* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Permissions));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Permissions(
      ::google::protobuf::internal::ConstantInitialized);

  inline Permissions(const Permissions& from) : Permissions(nullptr, from) {}
  inline Permissions(Permissions&& from) noexcept
      : Permissions(nullptr, std::move(from)) {}
  inline Permissions& operator=(const Permissions& from) {
    CopyFrom(from);
    return *this;
  }
  inline Permissions& operator=(Permissions&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Permissions& default_instance() {
    return *internal_default_instance();
  }
  static inline const Permissions* internal_default_instance() {
    return reinterpret_cast<const Permissions*>(
        &_Permissions_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Permissions& a, Permissions& b) { a.Swap(&b); }
  inline void Swap(Permissions* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Permissions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Permissions* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Permissions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Permissions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Permissions& from) { Permissions::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Permissions* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.circuit.v1.Permissions"; }

 protected:
  explicit Permissions(::google::protobuf::Arena* arena);
  Permissions(::google::protobuf::Arena* arena, const Permissions& from);
  Permissions(::google::protobuf::Arena* arena, Permissions&& from) noexcept
      : Permissions(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Level = Permissions_Level;
  static constexpr Level LEVEL_NONE_UNSPECIFIED = Permissions_Level_LEVEL_NONE_UNSPECIFIED;
  static constexpr Level LEVEL_SOME_MSGS = Permissions_Level_LEVEL_SOME_MSGS;
  static constexpr Level LEVEL_ALL_MSGS = Permissions_Level_LEVEL_ALL_MSGS;
  static constexpr Level LEVEL_SUPER_ADMIN = Permissions_Level_LEVEL_SUPER_ADMIN;
  static inline bool Level_IsValid(int value) {
    return Permissions_Level_IsValid(value);
  }
  static constexpr Level Level_MIN = Permissions_Level_Level_MIN;
  static constexpr Level Level_MAX = Permissions_Level_Level_MAX;
  static constexpr int Level_ARRAYSIZE = Permissions_Level_Level_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Level_descriptor() {
    return Permissions_Level_descriptor();
  }
  template <typename T>
  static inline const std::string& Level_Name(T value) {
    return Permissions_Level_Name(value);
  }
  static inline bool Level_Parse(absl::string_view name, Level* value) {
    return Permissions_Level_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kLimitTypeUrlsFieldNumber = 2,
    kLevelFieldNumber = 1,
  };
  // repeated string limit_type_urls = 2 [json_name = "limitTypeUrls"];
  int limit_type_urls_size() const;
  private:
  int _internal_limit_type_urls_size() const;

  public:
  void clear_limit_type_urls() ;
  const std::string& limit_type_urls(int index) const;
  std::string* mutable_limit_type_urls(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_limit_type_urls(int index, Arg_&& value, Args_... args);
  std::string* add_limit_type_urls();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_limit_type_urls(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& limit_type_urls() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_limit_type_urls();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_limit_type_urls() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_limit_type_urls();

  public:
  // .cosmos.circuit.v1.Permissions.Level level = 1 [json_name = "level"];
  void clear_level() ;
  ::cosmos::circuit::v1::Permissions_Level level() const;
  void set_level(::cosmos::circuit::v1::Permissions_Level value);

  private:
  ::cosmos::circuit::v1::Permissions_Level _internal_level() const;
  void _internal_set_level(::cosmos::circuit::v1::Permissions_Level value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.circuit.v1.Permissions)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      53, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Permissions& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> limit_type_urls_;
    int level_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fcircuit_2fv1_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class GenesisAccountPermissions final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.circuit.v1.GenesisAccountPermissions) */ {
 public:
  inline GenesisAccountPermissions() : GenesisAccountPermissions(nullptr) {}
  ~GenesisAccountPermissions() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GenesisAccountPermissions* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GenesisAccountPermissions));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GenesisAccountPermissions(
      ::google::protobuf::internal::ConstantInitialized);

  inline GenesisAccountPermissions(const GenesisAccountPermissions& from) : GenesisAccountPermissions(nullptr, from) {}
  inline GenesisAccountPermissions(GenesisAccountPermissions&& from) noexcept
      : GenesisAccountPermissions(nullptr, std::move(from)) {}
  inline GenesisAccountPermissions& operator=(const GenesisAccountPermissions& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisAccountPermissions& operator=(GenesisAccountPermissions&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisAccountPermissions& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisAccountPermissions* internal_default_instance() {
    return reinterpret_cast<const GenesisAccountPermissions*>(
        &_GenesisAccountPermissions_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(GenesisAccountPermissions& a, GenesisAccountPermissions& b) { a.Swap(&b); }
  inline void Swap(GenesisAccountPermissions* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisAccountPermissions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenesisAccountPermissions* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GenesisAccountPermissions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GenesisAccountPermissions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GenesisAccountPermissions& from) { GenesisAccountPermissions::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GenesisAccountPermissions* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.circuit.v1.GenesisAccountPermissions"; }

 protected:
  explicit GenesisAccountPermissions(::google::protobuf::Arena* arena);
  GenesisAccountPermissions(::google::protobuf::Arena* arena, const GenesisAccountPermissions& from);
  GenesisAccountPermissions(::google::protobuf::Arena* arena, GenesisAccountPermissions&& from) noexcept
      : GenesisAccountPermissions(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAddressFieldNumber = 1,
    kPermissionsFieldNumber = 2,
  };
  // string address = 1 [json_name = "address"];
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* value);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // .cosmos.circuit.v1.Permissions permissions = 2 [json_name = "permissions"];
  bool has_permissions() const;
  void clear_permissions() ;
  const ::cosmos::circuit::v1::Permissions& permissions() const;
  PROTOBUF_NODISCARD ::cosmos::circuit::v1::Permissions* release_permissions();
  ::cosmos::circuit::v1::Permissions* mutable_permissions();
  void set_allocated_permissions(::cosmos::circuit::v1::Permissions* value);
  void unsafe_arena_set_allocated_permissions(::cosmos::circuit::v1::Permissions* value);
  ::cosmos::circuit::v1::Permissions* unsafe_arena_release_permissions();

  private:
  const ::cosmos::circuit::v1::Permissions& _internal_permissions() const;
  ::cosmos::circuit::v1::Permissions* _internal_mutable_permissions();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.circuit.v1.GenesisAccountPermissions)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      59, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GenesisAccountPermissions& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::cosmos::circuit::v1::Permissions* permissions_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fcircuit_2fv1_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class GenesisState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.circuit.v1.GenesisState) */ {
 public:
  inline GenesisState() : GenesisState(nullptr) {}
  ~GenesisState() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GenesisState* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GenesisState));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GenesisState(
      ::google::protobuf::internal::ConstantInitialized);

  inline GenesisState(const GenesisState& from) : GenesisState(nullptr, from) {}
  inline GenesisState(GenesisState&& from) noexcept
      : GenesisState(nullptr, std::move(from)) {}
  inline GenesisState& operator=(const GenesisState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisState& operator=(GenesisState&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisState* internal_default_instance() {
    return reinterpret_cast<const GenesisState*>(
        &_GenesisState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(GenesisState& a, GenesisState& b) { a.Swap(&b); }
  inline void Swap(GenesisState* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenesisState* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GenesisState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GenesisState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GenesisState& from) { GenesisState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GenesisState* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.circuit.v1.GenesisState"; }

 protected:
  explicit GenesisState(::google::protobuf::Arena* arena);
  GenesisState(::google::protobuf::Arena* arena, const GenesisState& from);
  GenesisState(::google::protobuf::Arena* arena, GenesisState&& from) noexcept
      : GenesisState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAccountPermissionsFieldNumber = 1,
    kDisabledTypeUrlsFieldNumber = 2,
  };
  // repeated .cosmos.circuit.v1.GenesisAccountPermissions account_permissions = 1 [json_name = "accountPermissions"];
  int account_permissions_size() const;
  private:
  int _internal_account_permissions_size() const;

  public:
  void clear_account_permissions() ;
  ::cosmos::circuit::v1::GenesisAccountPermissions* mutable_account_permissions(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::circuit::v1::GenesisAccountPermissions>* mutable_account_permissions();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::circuit::v1::GenesisAccountPermissions>& _internal_account_permissions() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::circuit::v1::GenesisAccountPermissions>* _internal_mutable_account_permissions();
  public:
  const ::cosmos::circuit::v1::GenesisAccountPermissions& account_permissions(int index) const;
  ::cosmos::circuit::v1::GenesisAccountPermissions* add_account_permissions();
  const ::google::protobuf::RepeatedPtrField<::cosmos::circuit::v1::GenesisAccountPermissions>& account_permissions() const;
  // repeated string disabled_type_urls = 2 [json_name = "disabledTypeUrls"];
  int disabled_type_urls_size() const;
  private:
  int _internal_disabled_type_urls_size() const;

  public:
  void clear_disabled_type_urls() ;
  const std::string& disabled_type_urls(int index) const;
  std::string* mutable_disabled_type_urls(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_disabled_type_urls(int index, Arg_&& value, Args_... args);
  std::string* add_disabled_type_urls();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_disabled_type_urls(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& disabled_type_urls() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_disabled_type_urls();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_disabled_type_urls() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_disabled_type_urls();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.circuit.v1.GenesisState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      57, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GenesisState& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::circuit::v1::GenesisAccountPermissions > account_permissions_;
    ::google::protobuf::RepeatedPtrField<std::string> disabled_type_urls_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fcircuit_2fv1_2ftypes_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Permissions

// .cosmos.circuit.v1.Permissions.Level level = 1 [json_name = "level"];
inline void Permissions::clear_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.level_ = 0;
}
inline ::cosmos::circuit::v1::Permissions_Level Permissions::level() const {
  // @@protoc_insertion_point(field_get:cosmos.circuit.v1.Permissions.level)
  return _internal_level();
}
inline void Permissions::set_level(::cosmos::circuit::v1::Permissions_Level value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:cosmos.circuit.v1.Permissions.level)
}
inline ::cosmos::circuit::v1::Permissions_Level Permissions::_internal_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::cosmos::circuit::v1::Permissions_Level>(_impl_.level_);
}
inline void Permissions::_internal_set_level(::cosmos::circuit::v1::Permissions_Level value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.level_ = value;
}

// repeated string limit_type_urls = 2 [json_name = "limitTypeUrls"];
inline int Permissions::_internal_limit_type_urls_size() const {
  return _internal_limit_type_urls().size();
}
inline int Permissions::limit_type_urls_size() const {
  return _internal_limit_type_urls_size();
}
inline void Permissions::clear_limit_type_urls() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_type_urls_.Clear();
}
inline std::string* Permissions::add_limit_type_urls() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_limit_type_urls()->Add();
  // @@protoc_insertion_point(field_add_mutable:cosmos.circuit.v1.Permissions.limit_type_urls)
  return _s;
}
inline const std::string& Permissions::limit_type_urls(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.circuit.v1.Permissions.limit_type_urls)
  return _internal_limit_type_urls().Get(index);
}
inline std::string* Permissions::mutable_limit_type_urls(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.circuit.v1.Permissions.limit_type_urls)
  return _internal_mutable_limit_type_urls()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void Permissions::set_limit_type_urls(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_limit_type_urls()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:cosmos.circuit.v1.Permissions.limit_type_urls)
}
template <typename Arg_, typename... Args_>
inline void Permissions::add_limit_type_urls(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_limit_type_urls(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:cosmos.circuit.v1.Permissions.limit_type_urls)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Permissions::limit_type_urls() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.circuit.v1.Permissions.limit_type_urls)
  return _internal_limit_type_urls();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Permissions::mutable_limit_type_urls() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.circuit.v1.Permissions.limit_type_urls)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_limit_type_urls();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Permissions::_internal_limit_type_urls() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.limit_type_urls_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Permissions::_internal_mutable_limit_type_urls() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.limit_type_urls_;
}

// -------------------------------------------------------------------

// GenesisAccountPermissions

// string address = 1 [json_name = "address"];
inline void GenesisAccountPermissions::clear_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.ClearToEmpty();
}
inline const std::string& GenesisAccountPermissions::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.circuit.v1.GenesisAccountPermissions.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GenesisAccountPermissions::set_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.circuit.v1.GenesisAccountPermissions.address)
}
inline std::string* GenesisAccountPermissions::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.circuit.v1.GenesisAccountPermissions.address)
  return _s;
}
inline const std::string& GenesisAccountPermissions::_internal_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.address_.Get();
}
inline void GenesisAccountPermissions::_internal_set_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(value, GetArena());
}
inline std::string* GenesisAccountPermissions::_internal_mutable_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.address_.Mutable( GetArena());
}
inline std::string* GenesisAccountPermissions::release_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.circuit.v1.GenesisAccountPermissions.address)
  return _impl_.address_.Release();
}
inline void GenesisAccountPermissions::set_allocated_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.circuit.v1.GenesisAccountPermissions.address)
}

// .cosmos.circuit.v1.Permissions permissions = 2 [json_name = "permissions"];
inline bool GenesisAccountPermissions::has_permissions() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.permissions_ != nullptr);
  return value;
}
inline void GenesisAccountPermissions::clear_permissions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.permissions_ != nullptr) _impl_.permissions_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::circuit::v1::Permissions& GenesisAccountPermissions::_internal_permissions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::circuit::v1::Permissions* p = _impl_.permissions_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::circuit::v1::Permissions&>(::cosmos::circuit::v1::_Permissions_default_instance_);
}
inline const ::cosmos::circuit::v1::Permissions& GenesisAccountPermissions::permissions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.circuit.v1.GenesisAccountPermissions.permissions)
  return _internal_permissions();
}
inline void GenesisAccountPermissions::unsafe_arena_set_allocated_permissions(::cosmos::circuit::v1::Permissions* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.permissions_);
  }
  _impl_.permissions_ = reinterpret_cast<::cosmos::circuit::v1::Permissions*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.circuit.v1.GenesisAccountPermissions.permissions)
}
inline ::cosmos::circuit::v1::Permissions* GenesisAccountPermissions::release_permissions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::circuit::v1::Permissions* released = _impl_.permissions_;
  _impl_.permissions_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::circuit::v1::Permissions* GenesisAccountPermissions::unsafe_arena_release_permissions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.circuit.v1.GenesisAccountPermissions.permissions)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::circuit::v1::Permissions* temp = _impl_.permissions_;
  _impl_.permissions_ = nullptr;
  return temp;
}
inline ::cosmos::circuit::v1::Permissions* GenesisAccountPermissions::_internal_mutable_permissions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.permissions_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::circuit::v1::Permissions>(GetArena());
    _impl_.permissions_ = reinterpret_cast<::cosmos::circuit::v1::Permissions*>(p);
  }
  return _impl_.permissions_;
}
inline ::cosmos::circuit::v1::Permissions* GenesisAccountPermissions::mutable_permissions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::circuit::v1::Permissions* _msg = _internal_mutable_permissions();
  // @@protoc_insertion_point(field_mutable:cosmos.circuit.v1.GenesisAccountPermissions.permissions)
  return _msg;
}
inline void GenesisAccountPermissions::set_allocated_permissions(::cosmos::circuit::v1::Permissions* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.permissions_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.permissions_ = reinterpret_cast<::cosmos::circuit::v1::Permissions*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.circuit.v1.GenesisAccountPermissions.permissions)
}

// -------------------------------------------------------------------

// GenesisState

// repeated .cosmos.circuit.v1.GenesisAccountPermissions account_permissions = 1 [json_name = "accountPermissions"];
inline int GenesisState::_internal_account_permissions_size() const {
  return _internal_account_permissions().size();
}
inline int GenesisState::account_permissions_size() const {
  return _internal_account_permissions_size();
}
inline void GenesisState::clear_account_permissions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.account_permissions_.Clear();
}
inline ::cosmos::circuit::v1::GenesisAccountPermissions* GenesisState::mutable_account_permissions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.circuit.v1.GenesisState.account_permissions)
  return _internal_mutable_account_permissions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::circuit::v1::GenesisAccountPermissions>* GenesisState::mutable_account_permissions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.circuit.v1.GenesisState.account_permissions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_account_permissions();
}
inline const ::cosmos::circuit::v1::GenesisAccountPermissions& GenesisState::account_permissions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.circuit.v1.GenesisState.account_permissions)
  return _internal_account_permissions().Get(index);
}
inline ::cosmos::circuit::v1::GenesisAccountPermissions* GenesisState::add_account_permissions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::circuit::v1::GenesisAccountPermissions* _add = _internal_mutable_account_permissions()->Add();
  // @@protoc_insertion_point(field_add:cosmos.circuit.v1.GenesisState.account_permissions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::circuit::v1::GenesisAccountPermissions>& GenesisState::account_permissions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.circuit.v1.GenesisState.account_permissions)
  return _internal_account_permissions();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::circuit::v1::GenesisAccountPermissions>&
GenesisState::_internal_account_permissions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.account_permissions_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::circuit::v1::GenesisAccountPermissions>*
GenesisState::_internal_mutable_account_permissions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.account_permissions_;
}

// repeated string disabled_type_urls = 2 [json_name = "disabledTypeUrls"];
inline int GenesisState::_internal_disabled_type_urls_size() const {
  return _internal_disabled_type_urls().size();
}
inline int GenesisState::disabled_type_urls_size() const {
  return _internal_disabled_type_urls_size();
}
inline void GenesisState::clear_disabled_type_urls() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disabled_type_urls_.Clear();
}
inline std::string* GenesisState::add_disabled_type_urls() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_disabled_type_urls()->Add();
  // @@protoc_insertion_point(field_add_mutable:cosmos.circuit.v1.GenesisState.disabled_type_urls)
  return _s;
}
inline const std::string& GenesisState::disabled_type_urls(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.circuit.v1.GenesisState.disabled_type_urls)
  return _internal_disabled_type_urls().Get(index);
}
inline std::string* GenesisState::mutable_disabled_type_urls(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.circuit.v1.GenesisState.disabled_type_urls)
  return _internal_mutable_disabled_type_urls()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void GenesisState::set_disabled_type_urls(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_disabled_type_urls()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:cosmos.circuit.v1.GenesisState.disabled_type_urls)
}
template <typename Arg_, typename... Args_>
inline void GenesisState::add_disabled_type_urls(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_disabled_type_urls(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:cosmos.circuit.v1.GenesisState.disabled_type_urls)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GenesisState::disabled_type_urls() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.circuit.v1.GenesisState.disabled_type_urls)
  return _internal_disabled_type_urls();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GenesisState::mutable_disabled_type_urls() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.circuit.v1.GenesisState.disabled_type_urls)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_disabled_type_urls();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GenesisState::_internal_disabled_type_urls() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.disabled_type_urls_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GenesisState::_internal_mutable_disabled_type_urls() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.disabled_type_urls_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace circuit
}  // namespace cosmos


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::cosmos::circuit::v1::Permissions_Level> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cosmos::circuit::v1::Permissions_Level>() {
  return ::cosmos::circuit::v1::Permissions_Level_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2fcircuit_2fv1_2ftypes_2eproto_2epb_2eh
