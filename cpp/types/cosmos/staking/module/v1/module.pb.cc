// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/staking/module/v1/module.proto
// Protobuf C++ Version: 5.29.4

#include "cosmos/staking/module/v1/module.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace cosmos {
namespace staking {
namespace module {
namespace v1 {

inline constexpr Module::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : hooks_order_{},
        authority_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        bech32_prefix_validator_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        bech32_prefix_consensus_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Module::Module(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ModuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModuleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModuleDefaultTypeInternal() {}
  union {
    Module _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModuleDefaultTypeInternal _Module_default_instance_;
}  // namespace v1
}  // namespace module
}  // namespace staking
}  // namespace cosmos
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fstaking_2fmodule_2fv1_2fmodule_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fstaking_2fmodule_2fv1_2fmodule_2eproto = nullptr;
const ::uint32_t
    TableStruct_cosmos_2fstaking_2fmodule_2fv1_2fmodule_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cosmos::staking::module::v1::Module, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::staking::module::v1::Module, _impl_.hooks_order_),
        PROTOBUF_FIELD_OFFSET(::cosmos::staking::module::v1::Module, _impl_.authority_),
        PROTOBUF_FIELD_OFFSET(::cosmos::staking::module::v1::Module, _impl_.bech32_prefix_validator_),
        PROTOBUF_FIELD_OFFSET(::cosmos::staking::module::v1::Module, _impl_.bech32_prefix_consensus_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::cosmos::staking::module::v1::Module)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::staking::module::v1::_Module_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fstaking_2fmodule_2fv1_2fmodule_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n%cosmos/staking/module/v1/module.proto\022"
    "\030cosmos.staking.module.v1\032 cosmos/app/v1"
    "alpha1/module.proto\"\347\001\n\006Module\022\037\n\013hooks_"
    "order\030\001 \003(\tR\nhooksOrder\022\034\n\tauthority\030\002 \001"
    "(\tR\tauthority\0226\n\027bech32_prefix_validator"
    "\030\003 \001(\tR\025bech32PrefixValidator\0226\n\027bech32_"
    "prefix_consensus\030\004 \001(\tR\025bech32PrefixCons"
    "ensus:.\272\300\226\332\001(\n&github.com/cosmos/cosmos-"
    "sdk/x/stakingb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fstaking_2fmodule_2fv1_2fmodule_2eproto_deps[1] =
    {
        &::descriptor_table_cosmos_2fapp_2fv1alpha1_2fmodule_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fstaking_2fmodule_2fv1_2fmodule_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_cosmos_2fstaking_2fmodule_2fv1_2fmodule_2eproto = {
    false,
    false,
    341,
    descriptor_table_protodef_cosmos_2fstaking_2fmodule_2fv1_2fmodule_2eproto,
    "cosmos/staking/module/v1/module.proto",
    &descriptor_table_cosmos_2fstaking_2fmodule_2fv1_2fmodule_2eproto_once,
    descriptor_table_cosmos_2fstaking_2fmodule_2fv1_2fmodule_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fstaking_2fmodule_2fv1_2fmodule_2eproto::offsets,
    file_level_enum_descriptors_cosmos_2fstaking_2fmodule_2fv1_2fmodule_2eproto,
    file_level_service_descriptors_cosmos_2fstaking_2fmodule_2fv1_2fmodule_2eproto,
};
namespace cosmos {
namespace staking {
namespace module {
namespace v1 {
// ===================================================================

class Module::_Internal {
 public:
};

Module::Module(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.module.v1.Module)
}
inline PROTOBUF_NDEBUG_INLINE Module::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::staking::module::v1::Module& from_msg)
      : hooks_order_{visibility, arena, from.hooks_order_},
        authority_(arena, from.authority_),
        bech32_prefix_validator_(arena, from.bech32_prefix_validator_),
        bech32_prefix_consensus_(arena, from.bech32_prefix_consensus_),
        _cached_size_{0} {}

Module::Module(
    ::google::protobuf::Arena* arena,
    const Module& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Module* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:cosmos.staking.module.v1.Module)
}
inline PROTOBUF_NDEBUG_INLINE Module::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : hooks_order_{visibility, arena},
        authority_(arena),
        bech32_prefix_validator_(arena),
        bech32_prefix_consensus_(arena),
        _cached_size_{0} {}

inline void Module::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Module::~Module() {
  // @@protoc_insertion_point(destructor:cosmos.staking.module.v1.Module)
  SharedDtor(*this);
}
inline void Module::SharedDtor(MessageLite& self) {
  Module& this_ = static_cast<Module&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.authority_.Destroy();
  this_._impl_.bech32_prefix_validator_.Destroy();
  this_._impl_.bech32_prefix_consensus_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Module::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Module(arena);
}
constexpr auto Module::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Module, _impl_.hooks_order_) +
          decltype(Module::_impl_.hooks_order_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Module), alignof(Module), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Module::PlacementNew_,
                                 sizeof(Module),
                                 alignof(Module));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Module::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Module_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Module::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Module>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Module::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Module>(), &Module::ByteSizeLong,
            &Module::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Module, _impl_._cached_size_),
        false,
    },
    &Module::kDescriptorMethods,
    &descriptor_table_cosmos_2fstaking_2fmodule_2fv1_2fmodule_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Module::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 106, 2> Module::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::staking::module::v1::Module>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string bech32_prefix_consensus = 4 [json_name = "bech32PrefixConsensus"];
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Module, _impl_.bech32_prefix_consensus_)}},
    // repeated string hooks_order = 1 [json_name = "hooksOrder"];
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Module, _impl_.hooks_order_)}},
    // string authority = 2 [json_name = "authority"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Module, _impl_.authority_)}},
    // string bech32_prefix_validator = 3 [json_name = "bech32PrefixValidator"];
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Module, _impl_.bech32_prefix_validator_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string hooks_order = 1 [json_name = "hooksOrder"];
    {PROTOBUF_FIELD_OFFSET(Module, _impl_.hooks_order_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // string authority = 2 [json_name = "authority"];
    {PROTOBUF_FIELD_OFFSET(Module, _impl_.authority_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string bech32_prefix_validator = 3 [json_name = "bech32PrefixValidator"];
    {PROTOBUF_FIELD_OFFSET(Module, _impl_.bech32_prefix_validator_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string bech32_prefix_consensus = 4 [json_name = "bech32PrefixConsensus"];
    {PROTOBUF_FIELD_OFFSET(Module, _impl_.bech32_prefix_consensus_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\37\13\11\27\27\0\0\0"
    "cosmos.staking.module.v1.Module"
    "hooks_order"
    "authority"
    "bech32_prefix_validator"
    "bech32_prefix_consensus"
  }},
};

PROTOBUF_NOINLINE void Module::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.module.v1.Module)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hooks_order_.Clear();
  _impl_.authority_.ClearToEmpty();
  _impl_.bech32_prefix_validator_.ClearToEmpty();
  _impl_.bech32_prefix_consensus_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Module::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Module& this_ = static_cast<const Module&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Module::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Module& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.module.v1.Module)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated string hooks_order = 1 [json_name = "hooksOrder"];
          for (int i = 0, n = this_._internal_hooks_order_size(); i < n; ++i) {
            const auto& s = this_._internal_hooks_order().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.staking.module.v1.Module.hooks_order");
            target = stream->WriteString(1, s, target);
          }

          // string authority = 2 [json_name = "authority"];
          if (!this_._internal_authority().empty()) {
            const std::string& _s = this_._internal_authority();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.staking.module.v1.Module.authority");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string bech32_prefix_validator = 3 [json_name = "bech32PrefixValidator"];
          if (!this_._internal_bech32_prefix_validator().empty()) {
            const std::string& _s = this_._internal_bech32_prefix_validator();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.staking.module.v1.Module.bech32_prefix_validator");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string bech32_prefix_consensus = 4 [json_name = "bech32PrefixConsensus"];
          if (!this_._internal_bech32_prefix_consensus().empty()) {
            const std::string& _s = this_._internal_bech32_prefix_consensus();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.staking.module.v1.Module.bech32_prefix_consensus");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.module.v1.Module)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Module::ByteSizeLong(const MessageLite& base) {
          const Module& this_ = static_cast<const Module&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Module::ByteSizeLong() const {
          const Module& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.staking.module.v1.Module)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string hooks_order = 1 [json_name = "hooksOrder"];
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_hooks_order().size());
              for (int i = 0, n = this_._internal_hooks_order().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_hooks_order().Get(i));
              }
            }
          }
           {
            // string authority = 2 [json_name = "authority"];
            if (!this_._internal_authority().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_authority());
            }
            // string bech32_prefix_validator = 3 [json_name = "bech32PrefixValidator"];
            if (!this_._internal_bech32_prefix_validator().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_bech32_prefix_validator());
            }
            // string bech32_prefix_consensus = 4 [json_name = "bech32PrefixConsensus"];
            if (!this_._internal_bech32_prefix_consensus().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_bech32_prefix_consensus());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Module::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Module*>(&to_msg);
  auto& from = static_cast<const Module&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.module.v1.Module)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_hooks_order()->MergeFrom(from._internal_hooks_order());
  if (!from._internal_authority().empty()) {
    _this->_internal_set_authority(from._internal_authority());
  }
  if (!from._internal_bech32_prefix_validator().empty()) {
    _this->_internal_set_bech32_prefix_validator(from._internal_bech32_prefix_validator());
  }
  if (!from._internal_bech32_prefix_consensus().empty()) {
    _this->_internal_set_bech32_prefix_consensus(from._internal_bech32_prefix_consensus());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Module::CopyFrom(const Module& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.module.v1.Module)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Module::InternalSwap(Module* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hooks_order_.InternalSwap(&other->_impl_.hooks_order_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.authority_, &other->_impl_.authority_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bech32_prefix_validator_, &other->_impl_.bech32_prefix_validator_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bech32_prefix_consensus_, &other->_impl_.bech32_prefix_consensus_, arena);
}

::google::protobuf::Metadata Module::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace module
}  // namespace staking
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_cosmos_2fstaking_2fmodule_2fv1_2fmodule_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
