// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/staking/v1beta1/authz.proto
// Protobuf C++ Version: 5.29.4

#include "cosmos/staking/v1beta1/authz.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace cosmos {
namespace staking {
namespace v1beta1 {

inline constexpr StakeAuthorization_Validators::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : address_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StakeAuthorization_Validators::StakeAuthorization_Validators(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StakeAuthorization_ValidatorsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StakeAuthorization_ValidatorsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StakeAuthorization_ValidatorsDefaultTypeInternal() {}
  union {
    StakeAuthorization_Validators _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StakeAuthorization_ValidatorsDefaultTypeInternal _StakeAuthorization_Validators_default_instance_;

inline constexpr StakeAuthorization::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        max_tokens_{nullptr},
        authorization_type_{static_cast< ::cosmos::staking::v1beta1::AuthorizationType >(0)},
        validators_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR StakeAuthorization::StakeAuthorization(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StakeAuthorizationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StakeAuthorizationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StakeAuthorizationDefaultTypeInternal() {}
  union {
    StakeAuthorization _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StakeAuthorizationDefaultTypeInternal _StakeAuthorization_default_instance_;
}  // namespace v1beta1
}  // namespace staking
}  // namespace cosmos
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto = nullptr;
const ::uint32_t
    TableStruct_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::StakeAuthorization_Validators, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::StakeAuthorization_Validators, _impl_.address_),
        PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::StakeAuthorization, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::StakeAuthorization, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::StakeAuthorization, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::StakeAuthorization, _impl_.max_tokens_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::StakeAuthorization, _impl_.authorization_type_),
        PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::StakeAuthorization, _impl_.validators_),
        0,
        ~0u,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::cosmos::staking::v1beta1::StakeAuthorization_Validators)},
        {9, 22, -1, sizeof(::cosmos::staking::v1beta1::StakeAuthorization)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::staking::v1beta1::_StakeAuthorization_Validators_default_instance_._instance,
    &::cosmos::staking::v1beta1::_StakeAuthorization_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\"cosmos/staking/v1beta1/authz.proto\022\026co"
    "smos.staking.v1beta1\032\024gogoproto/gogo.pro"
    "to\032\031cosmos_proto/cosmos.proto\032\036cosmos/ba"
    "se/v1beta1/coin.proto\032\021amino/amino.proto"
    "\"\215\005\n\022StakeAuthorization\022e\n\nmax_tokens\030\001 "
    "\001(\0132\031.cosmos.base.v1beta1.CoinB+\252\337\037\'gith"
    "ub.com/cosmos/cosmos-sdk/types.CoinR\tmax"
    "Tokens\022\204\001\n\nallow_list\030\002 \001(\01325.cosmos.sta"
    "king.v1beta1.StakeAuthorization.Validato"
    "rsB,\262\347\260*\'cosmos-sdk/StakeAuthorization/A"
    "llowListH\000R\tallowList\022\201\001\n\tdeny_list\030\003 \001("
    "\01325.cosmos.staking.v1beta1.StakeAuthoriz"
    "ation.ValidatorsB+\262\347\260*&cosmos-sdk/StakeA"
    "uthorization/DenyListH\000R\010denyList\022X\n\022aut"
    "horization_type\030\004 \001(\0162).cosmos.staking.v"
    "1beta1.AuthorizationTypeR\021authorizationT"
    "ype\032@\n\nValidators\0222\n\007address\030\001 \003(\tB\030\322\264-\024"
    "cosmos.AddressStringR\007address:[\312\264-\"cosmo"
    "s.authz.v1beta1.Authorization\322\264-\017cosmos-"
    "sdk 0.43\212\347\260*\035cosmos-sdk/StakeAuthorizati"
    "onB\014\n\nvalidators*\322\001\n\021AuthorizationType\022\""
    "\n\036AUTHORIZATION_TYPE_UNSPECIFIED\020\000\022\037\n\033AU"
    "THORIZATION_TYPE_DELEGATE\020\001\022!\n\035AUTHORIZA"
    "TION_TYPE_UNDELEGATE\020\002\022!\n\035AUTHORIZATION_"
    "TYPE_REDELEGATE\020\003\0222\n.AUTHORIZATION_TYPE_"
    "CANCEL_UNBONDING_DELEGATION\020\004B.Z,github."
    "com/cosmos/cosmos-sdk/x/staking/typesb\006p"
    "roto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto_deps[4] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto = {
    false,
    false,
    1085,
    descriptor_table_protodef_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto,
    "cosmos/staking/v1beta1/authz.proto",
    &descriptor_table_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto_once,
    descriptor_table_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto_deps,
    4,
    2,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto::offsets,
    file_level_enum_descriptors_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto,
    file_level_service_descriptors_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto,
};
namespace cosmos {
namespace staking {
namespace v1beta1 {
const ::google::protobuf::EnumDescriptor* AuthorizationType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto);
  return file_level_enum_descriptors_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t AuthorizationType_internal_data_[] = {
    327680u, 0u, };
bool AuthorizationType_IsValid(int value) {
  return 0 <= value && value <= 4;
}
// ===================================================================

class StakeAuthorization_Validators::_Internal {
 public:
};

StakeAuthorization_Validators::StakeAuthorization_Validators(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.StakeAuthorization.Validators)
}
inline PROTOBUF_NDEBUG_INLINE StakeAuthorization_Validators::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::staking::v1beta1::StakeAuthorization_Validators& from_msg)
      : address_{visibility, arena, from.address_},
        _cached_size_{0} {}

StakeAuthorization_Validators::StakeAuthorization_Validators(
    ::google::protobuf::Arena* arena,
    const StakeAuthorization_Validators& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  StakeAuthorization_Validators* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.StakeAuthorization.Validators)
}
inline PROTOBUF_NDEBUG_INLINE StakeAuthorization_Validators::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : address_{visibility, arena},
        _cached_size_{0} {}

inline void StakeAuthorization_Validators::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
StakeAuthorization_Validators::~StakeAuthorization_Validators() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.StakeAuthorization.Validators)
  SharedDtor(*this);
}
inline void StakeAuthorization_Validators::SharedDtor(MessageLite& self) {
  StakeAuthorization_Validators& this_ = static_cast<StakeAuthorization_Validators&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* StakeAuthorization_Validators::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) StakeAuthorization_Validators(arena);
}
constexpr auto StakeAuthorization_Validators::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(StakeAuthorization_Validators, _impl_.address_) +
          decltype(StakeAuthorization_Validators::_impl_.address_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(StakeAuthorization_Validators), alignof(StakeAuthorization_Validators), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&StakeAuthorization_Validators::PlacementNew_,
                                 sizeof(StakeAuthorization_Validators),
                                 alignof(StakeAuthorization_Validators));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull StakeAuthorization_Validators::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_StakeAuthorization_Validators_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &StakeAuthorization_Validators::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<StakeAuthorization_Validators>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &StakeAuthorization_Validators::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<StakeAuthorization_Validators>(), &StakeAuthorization_Validators::ByteSizeLong,
            &StakeAuthorization_Validators::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(StakeAuthorization_Validators, _impl_._cached_size_),
        false,
    },
    &StakeAuthorization_Validators::kDescriptorMethods,
    &descriptor_table_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* StakeAuthorization_Validators::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 68, 2> StakeAuthorization_Validators::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::staking::v1beta1::StakeAuthorization_Validators>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(StakeAuthorization_Validators, _impl_.address_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
    {PROTOBUF_FIELD_OFFSET(StakeAuthorization_Validators, _impl_.address_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\64\7\0\0\0\0\0\0"
    "cosmos.staking.v1beta1.StakeAuthorization.Validators"
    "address"
  }},
};

PROTOBUF_NOINLINE void StakeAuthorization_Validators::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.StakeAuthorization.Validators)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* StakeAuthorization_Validators::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const StakeAuthorization_Validators& this_ = static_cast<const StakeAuthorization_Validators&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* StakeAuthorization_Validators::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const StakeAuthorization_Validators& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.StakeAuthorization.Validators)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
          for (int i = 0, n = this_._internal_address_size(); i < n; ++i) {
            const auto& s = this_._internal_address().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.StakeAuthorization.Validators.address");
            target = stream->WriteString(1, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.StakeAuthorization.Validators)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t StakeAuthorization_Validators::ByteSizeLong(const MessageLite& base) {
          const StakeAuthorization_Validators& this_ = static_cast<const StakeAuthorization_Validators&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t StakeAuthorization_Validators::ByteSizeLong() const {
          const StakeAuthorization_Validators& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.StakeAuthorization.Validators)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_address().size());
              for (int i = 0, n = this_._internal_address().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_address().Get(i));
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void StakeAuthorization_Validators::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StakeAuthorization_Validators*>(&to_msg);
  auto& from = static_cast<const StakeAuthorization_Validators&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.StakeAuthorization.Validators)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_address()->MergeFrom(from._internal_address());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StakeAuthorization_Validators::CopyFrom(const StakeAuthorization_Validators& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.StakeAuthorization.Validators)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StakeAuthorization_Validators::InternalSwap(StakeAuthorization_Validators* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.address_.InternalSwap(&other->_impl_.address_);
}

::google::protobuf::Metadata StakeAuthorization_Validators::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class StakeAuthorization::_Internal {
 public:
  using HasBits =
      decltype(std::declval<StakeAuthorization>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(StakeAuthorization, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::StakeAuthorization, _impl_._oneof_case_);
};

void StakeAuthorization::clear_max_tokens() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.max_tokens_ != nullptr) _impl_.max_tokens_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void StakeAuthorization::set_allocated_allow_list(::cosmos::staking::v1beta1::StakeAuthorization_Validators* allow_list) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_validators();
  if (allow_list) {
    ::google::protobuf::Arena* submessage_arena = allow_list->GetArena();
    if (message_arena != submessage_arena) {
      allow_list = ::google::protobuf::internal::GetOwnedMessage(message_arena, allow_list, submessage_arena);
    }
    set_has_allow_list();
    _impl_.validators_.allow_list_ = allow_list;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.StakeAuthorization.allow_list)
}
void StakeAuthorization::set_allocated_deny_list(::cosmos::staking::v1beta1::StakeAuthorization_Validators* deny_list) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_validators();
  if (deny_list) {
    ::google::protobuf::Arena* submessage_arena = deny_list->GetArena();
    if (message_arena != submessage_arena) {
      deny_list = ::google::protobuf::internal::GetOwnedMessage(message_arena, deny_list, submessage_arena);
    }
    set_has_deny_list();
    _impl_.validators_.deny_list_ = deny_list;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.StakeAuthorization.deny_list)
}
StakeAuthorization::StakeAuthorization(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.StakeAuthorization)
}
inline PROTOBUF_NDEBUG_INLINE StakeAuthorization::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::staking::v1beta1::StakeAuthorization& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        validators_{},
        _oneof_case_{from._oneof_case_[0]} {}

StakeAuthorization::StakeAuthorization(
    ::google::protobuf::Arena* arena,
    const StakeAuthorization& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  StakeAuthorization* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.max_tokens_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::cosmos::base::v1beta1::Coin>(
                              arena, *from._impl_.max_tokens_)
                        : nullptr;
  _impl_.authorization_type_ = from._impl_.authorization_type_;
  switch (validators_case()) {
    case VALIDATORS_NOT_SET:
      break;
      case kAllowList:
        _impl_.validators_.allow_list_ = ::google::protobuf::Message::CopyConstruct<::cosmos::staking::v1beta1::StakeAuthorization_Validators>(arena, *from._impl_.validators_.allow_list_);
        break;
      case kDenyList:
        _impl_.validators_.deny_list_ = ::google::protobuf::Message::CopyConstruct<::cosmos::staking::v1beta1::StakeAuthorization_Validators>(arena, *from._impl_.validators_.deny_list_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.StakeAuthorization)
}
inline PROTOBUF_NDEBUG_INLINE StakeAuthorization::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        validators_{},
        _oneof_case_{} {}

inline void StakeAuthorization::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, max_tokens_),
           0,
           offsetof(Impl_, authorization_type_) -
               offsetof(Impl_, max_tokens_) +
               sizeof(Impl_::authorization_type_));
}
StakeAuthorization::~StakeAuthorization() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.StakeAuthorization)
  SharedDtor(*this);
}
inline void StakeAuthorization::SharedDtor(MessageLite& self) {
  StakeAuthorization& this_ = static_cast<StakeAuthorization&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.max_tokens_;
  if (this_.has_validators()) {
    this_.clear_validators();
  }
  this_._impl_.~Impl_();
}

void StakeAuthorization::clear_validators() {
// @@protoc_insertion_point(one_of_clear_start:cosmos.staking.v1beta1.StakeAuthorization)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (validators_case()) {
    case kAllowList: {
      if (GetArena() == nullptr) {
        delete _impl_.validators_.allow_list_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.validators_.allow_list_);
      }
      break;
    }
    case kDenyList: {
      if (GetArena() == nullptr) {
        delete _impl_.validators_.deny_list_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.validators_.deny_list_);
      }
      break;
    }
    case VALIDATORS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALIDATORS_NOT_SET;
}


inline void* StakeAuthorization::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) StakeAuthorization(arena);
}
constexpr auto StakeAuthorization::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(StakeAuthorization),
                                            alignof(StakeAuthorization));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull StakeAuthorization::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_StakeAuthorization_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &StakeAuthorization::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<StakeAuthorization>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &StakeAuthorization::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<StakeAuthorization>(), &StakeAuthorization::ByteSizeLong,
            &StakeAuthorization::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(StakeAuthorization, _impl_._cached_size_),
        false,
    },
    &StakeAuthorization::kDescriptorMethods,
    &descriptor_table_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* StakeAuthorization::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 4, 3, 0, 2> StakeAuthorization::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StakeAuthorization, _impl_._has_bits_),
    0, // no _extensions_
    4, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::staking::v1beta1::StakeAuthorization>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .cosmos.staking.v1beta1.AuthorizationType authorization_type = 4 [json_name = "authorizationType"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StakeAuthorization, _impl_.authorization_type_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(StakeAuthorization, _impl_.authorization_type_)}},
    // .cosmos.base.v1beta1.Coin max_tokens = 1 [json_name = "maxTokens", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(StakeAuthorization, _impl_.max_tokens_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .cosmos.base.v1beta1.Coin max_tokens = 1 [json_name = "maxTokens", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];
    {PROTOBUF_FIELD_OFFSET(StakeAuthorization, _impl_.max_tokens_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2 [json_name = "allowList", (.amino.oneof_name) = "cosmos-sdk/StakeAuthorization/AllowList"];
    {PROTOBUF_FIELD_OFFSET(StakeAuthorization, _impl_.validators_.allow_list_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3 [json_name = "denyList", (.amino.oneof_name) = "cosmos-sdk/StakeAuthorization/DenyList"];
    {PROTOBUF_FIELD_OFFSET(StakeAuthorization, _impl_.validators_.deny_list_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cosmos.staking.v1beta1.AuthorizationType authorization_type = 4 [json_name = "authorizationType"];
    {PROTOBUF_FIELD_OFFSET(StakeAuthorization, _impl_.authorization_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cosmos::base::v1beta1::Coin>()},
    {::_pbi::TcParser::GetTable<::cosmos::staking::v1beta1::StakeAuthorization_Validators>()},
    {::_pbi::TcParser::GetTable<::cosmos::staking::v1beta1::StakeAuthorization_Validators>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void StakeAuthorization::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.StakeAuthorization)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.max_tokens_ != nullptr);
    _impl_.max_tokens_->Clear();
  }
  _impl_.authorization_type_ = 0;
  clear_validators();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* StakeAuthorization::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const StakeAuthorization& this_ = static_cast<const StakeAuthorization&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* StakeAuthorization::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const StakeAuthorization& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.StakeAuthorization)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .cosmos.base.v1beta1.Coin max_tokens = 1 [json_name = "maxTokens", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.max_tokens_, this_._impl_.max_tokens_->GetCachedSize(), target,
                stream);
          }

          switch (this_.validators_case()) {
            case kAllowList: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.validators_.allow_list_, this_._impl_.validators_.allow_list_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kDenyList: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  3, *this_._impl_.validators_.deny_list_, this_._impl_.validators_.deny_list_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          // .cosmos.staking.v1beta1.AuthorizationType authorization_type = 4 [json_name = "authorizationType"];
          if (this_._internal_authorization_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                4, this_._internal_authorization_type(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.StakeAuthorization)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t StakeAuthorization::ByteSizeLong(const MessageLite& base) {
          const StakeAuthorization& this_ = static_cast<const StakeAuthorization&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t StakeAuthorization::ByteSizeLong() const {
          const StakeAuthorization& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.StakeAuthorization)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .cosmos.base.v1beta1.Coin max_tokens = 1 [json_name = "maxTokens", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.max_tokens_);
            }
          }
           {
            // .cosmos.staking.v1beta1.AuthorizationType authorization_type = 4 [json_name = "authorizationType"];
            if (this_._internal_authorization_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_authorization_type());
            }
          }
          switch (this_.validators_case()) {
            // .cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2 [json_name = "allowList", (.amino.oneof_name) = "cosmos-sdk/StakeAuthorization/AllowList"];
            case kAllowList: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.validators_.allow_list_);
              break;
            }
            // .cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3 [json_name = "denyList", (.amino.oneof_name) = "cosmos-sdk/StakeAuthorization/DenyList"];
            case kDenyList: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.validators_.deny_list_);
              break;
            }
            case VALIDATORS_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void StakeAuthorization::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StakeAuthorization*>(&to_msg);
  auto& from = static_cast<const StakeAuthorization&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.StakeAuthorization)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.max_tokens_ != nullptr);
    if (_this->_impl_.max_tokens_ == nullptr) {
      _this->_impl_.max_tokens_ =
          ::google::protobuf::Message::CopyConstruct<::cosmos::base::v1beta1::Coin>(arena, *from._impl_.max_tokens_);
    } else {
      _this->_impl_.max_tokens_->MergeFrom(*from._impl_.max_tokens_);
    }
  }
  if (from._internal_authorization_type() != 0) {
    _this->_impl_.authorization_type_ = from._impl_.authorization_type_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_validators();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kAllowList: {
        if (oneof_needs_init) {
          _this->_impl_.validators_.allow_list_ =
              ::google::protobuf::Message::CopyConstruct<::cosmos::staking::v1beta1::StakeAuthorization_Validators>(arena, *from._impl_.validators_.allow_list_);
        } else {
          _this->_impl_.validators_.allow_list_->MergeFrom(from._internal_allow_list());
        }
        break;
      }
      case kDenyList: {
        if (oneof_needs_init) {
          _this->_impl_.validators_.deny_list_ =
              ::google::protobuf::Message::CopyConstruct<::cosmos::staking::v1beta1::StakeAuthorization_Validators>(arena, *from._impl_.validators_.deny_list_);
        } else {
          _this->_impl_.validators_.deny_list_->MergeFrom(from._internal_deny_list());
        }
        break;
      }
      case VALIDATORS_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StakeAuthorization::CopyFrom(const StakeAuthorization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.StakeAuthorization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StakeAuthorization::InternalSwap(StakeAuthorization* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StakeAuthorization, _impl_.authorization_type_)
      + sizeof(StakeAuthorization::_impl_.authorization_type_)
      - PROTOBUF_FIELD_OFFSET(StakeAuthorization, _impl_.max_tokens_)>(
          reinterpret_cast<char*>(&_impl_.max_tokens_),
          reinterpret_cast<char*>(&other->_impl_.max_tokens_));
  swap(_impl_.validators_, other->_impl_.validators_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata StakeAuthorization::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace staking
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
