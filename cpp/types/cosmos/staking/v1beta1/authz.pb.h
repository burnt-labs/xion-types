// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/staking/v1beta1/authz.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2fstaking_2fv1beta1_2fauthz_2eproto_2epb_2eh
#define cosmos_2fstaking_2fv1beta1_2fauthz_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto;
namespace cosmos {
namespace staking {
namespace v1beta1 {
class StakeAuthorization;
struct StakeAuthorizationDefaultTypeInternal;
extern StakeAuthorizationDefaultTypeInternal _StakeAuthorization_default_instance_;
class StakeAuthorization_Validators;
struct StakeAuthorization_ValidatorsDefaultTypeInternal;
extern StakeAuthorization_ValidatorsDefaultTypeInternal _StakeAuthorization_Validators_default_instance_;
}  // namespace v1beta1
}  // namespace staking
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace staking {
namespace v1beta1 {
enum AuthorizationType : int {
  AUTHORIZATION_TYPE_UNSPECIFIED = 0,
  AUTHORIZATION_TYPE_DELEGATE = 1,
  AUTHORIZATION_TYPE_UNDELEGATE = 2,
  AUTHORIZATION_TYPE_REDELEGATE = 3,
  AUTHORIZATION_TYPE_CANCEL_UNBONDING_DELEGATION = 4,
  AuthorizationType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AuthorizationType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AuthorizationType_IsValid(int value);
extern const uint32_t AuthorizationType_internal_data_[];
constexpr AuthorizationType AuthorizationType_MIN = static_cast<AuthorizationType>(0);
constexpr AuthorizationType AuthorizationType_MAX = static_cast<AuthorizationType>(4);
constexpr int AuthorizationType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
AuthorizationType_descriptor();
template <typename T>
const std::string& AuthorizationType_Name(T value) {
  static_assert(std::is_same<T, AuthorizationType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AuthorizationType_Name().");
  return AuthorizationType_Name(static_cast<AuthorizationType>(value));
}
template <>
inline const std::string& AuthorizationType_Name(AuthorizationType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AuthorizationType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool AuthorizationType_Parse(absl::string_view name, AuthorizationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AuthorizationType>(
      AuthorizationType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class StakeAuthorization_Validators final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.staking.v1beta1.StakeAuthorization.Validators) */ {
 public:
  inline StakeAuthorization_Validators() : StakeAuthorization_Validators(nullptr) {}
  ~StakeAuthorization_Validators() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StakeAuthorization_Validators* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StakeAuthorization_Validators));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StakeAuthorization_Validators(
      ::google::protobuf::internal::ConstantInitialized);

  inline StakeAuthorization_Validators(const StakeAuthorization_Validators& from) : StakeAuthorization_Validators(nullptr, from) {}
  inline StakeAuthorization_Validators(StakeAuthorization_Validators&& from) noexcept
      : StakeAuthorization_Validators(nullptr, std::move(from)) {}
  inline StakeAuthorization_Validators& operator=(const StakeAuthorization_Validators& from) {
    CopyFrom(from);
    return *this;
  }
  inline StakeAuthorization_Validators& operator=(StakeAuthorization_Validators&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StakeAuthorization_Validators& default_instance() {
    return *internal_default_instance();
  }
  static inline const StakeAuthorization_Validators* internal_default_instance() {
    return reinterpret_cast<const StakeAuthorization_Validators*>(
        &_StakeAuthorization_Validators_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(StakeAuthorization_Validators& a, StakeAuthorization_Validators& b) { a.Swap(&b); }
  inline void Swap(StakeAuthorization_Validators* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StakeAuthorization_Validators* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StakeAuthorization_Validators* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StakeAuthorization_Validators>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StakeAuthorization_Validators& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StakeAuthorization_Validators& from) { StakeAuthorization_Validators::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StakeAuthorization_Validators* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.staking.v1beta1.StakeAuthorization.Validators"; }

 protected:
  explicit StakeAuthorization_Validators(::google::protobuf::Arena* arena);
  StakeAuthorization_Validators(::google::protobuf::Arena* arena, const StakeAuthorization_Validators& from);
  StakeAuthorization_Validators(::google::protobuf::Arena* arena, StakeAuthorization_Validators&& from) noexcept
      : StakeAuthorization_Validators(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAddressFieldNumber = 1,
  };
  // repeated string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  int address_size() const;
  private:
  int _internal_address_size() const;

  public:
  void clear_address() ;
  const std::string& address(int index) const;
  std::string* mutable_address(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(int index, Arg_&& value, Args_... args);
  std::string* add_address();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_address(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& address() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_address();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_address() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_address();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.staking.v1beta1.StakeAuthorization.Validators)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      68, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StakeAuthorization_Validators& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> address_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto;
};
// -------------------------------------------------------------------

class StakeAuthorization final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.staking.v1beta1.StakeAuthorization) */ {
 public:
  inline StakeAuthorization() : StakeAuthorization(nullptr) {}
  ~StakeAuthorization() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StakeAuthorization* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StakeAuthorization));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StakeAuthorization(
      ::google::protobuf::internal::ConstantInitialized);

  inline StakeAuthorization(const StakeAuthorization& from) : StakeAuthorization(nullptr, from) {}
  inline StakeAuthorization(StakeAuthorization&& from) noexcept
      : StakeAuthorization(nullptr, std::move(from)) {}
  inline StakeAuthorization& operator=(const StakeAuthorization& from) {
    CopyFrom(from);
    return *this;
  }
  inline StakeAuthorization& operator=(StakeAuthorization&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StakeAuthorization& default_instance() {
    return *internal_default_instance();
  }
  enum ValidatorsCase {
    kAllowList = 2,
    kDenyList = 3,
    VALIDATORS_NOT_SET = 0,
  };
  static inline const StakeAuthorization* internal_default_instance() {
    return reinterpret_cast<const StakeAuthorization*>(
        &_StakeAuthorization_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(StakeAuthorization& a, StakeAuthorization& b) { a.Swap(&b); }
  inline void Swap(StakeAuthorization* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StakeAuthorization* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StakeAuthorization* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StakeAuthorization>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StakeAuthorization& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StakeAuthorization& from) { StakeAuthorization::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StakeAuthorization* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.staking.v1beta1.StakeAuthorization"; }

 protected:
  explicit StakeAuthorization(::google::protobuf::Arena* arena);
  StakeAuthorization(::google::protobuf::Arena* arena, const StakeAuthorization& from);
  StakeAuthorization(::google::protobuf::Arena* arena, StakeAuthorization&& from) noexcept
      : StakeAuthorization(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Validators = StakeAuthorization_Validators;

  // accessors -------------------------------------------------------
  enum : int {
    kMaxTokensFieldNumber = 1,
    kAuthorizationTypeFieldNumber = 4,
    kAllowListFieldNumber = 2,
    kDenyListFieldNumber = 3,
  };
  // .cosmos.base.v1beta1.Coin max_tokens = 1 [json_name = "maxTokens", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];
  bool has_max_tokens() const;
  void clear_max_tokens() ;
  const ::cosmos::base::v1beta1::Coin& max_tokens() const;
  PROTOBUF_NODISCARD ::cosmos::base::v1beta1::Coin* release_max_tokens();
  ::cosmos::base::v1beta1::Coin* mutable_max_tokens();
  void set_allocated_max_tokens(::cosmos::base::v1beta1::Coin* value);
  void unsafe_arena_set_allocated_max_tokens(::cosmos::base::v1beta1::Coin* value);
  ::cosmos::base::v1beta1::Coin* unsafe_arena_release_max_tokens();

  private:
  const ::cosmos::base::v1beta1::Coin& _internal_max_tokens() const;
  ::cosmos::base::v1beta1::Coin* _internal_mutable_max_tokens();

  public:
  // .cosmos.staking.v1beta1.AuthorizationType authorization_type = 4 [json_name = "authorizationType"];
  void clear_authorization_type() ;
  ::cosmos::staking::v1beta1::AuthorizationType authorization_type() const;
  void set_authorization_type(::cosmos::staking::v1beta1::AuthorizationType value);

  private:
  ::cosmos::staking::v1beta1::AuthorizationType _internal_authorization_type() const;
  void _internal_set_authorization_type(::cosmos::staking::v1beta1::AuthorizationType value);

  public:
  // .cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2 [json_name = "allowList", (.amino.oneof_name) = "cosmos-sdk/StakeAuthorization/AllowList"];
  bool has_allow_list() const;
  private:
  bool _internal_has_allow_list() const;

  public:
  void clear_allow_list() ;
  const ::cosmos::staking::v1beta1::StakeAuthorization_Validators& allow_list() const;
  PROTOBUF_NODISCARD ::cosmos::staking::v1beta1::StakeAuthorization_Validators* release_allow_list();
  ::cosmos::staking::v1beta1::StakeAuthorization_Validators* mutable_allow_list();
  void set_allocated_allow_list(::cosmos::staking::v1beta1::StakeAuthorization_Validators* value);
  void unsafe_arena_set_allocated_allow_list(::cosmos::staking::v1beta1::StakeAuthorization_Validators* value);
  ::cosmos::staking::v1beta1::StakeAuthorization_Validators* unsafe_arena_release_allow_list();

  private:
  const ::cosmos::staking::v1beta1::StakeAuthorization_Validators& _internal_allow_list() const;
  ::cosmos::staking::v1beta1::StakeAuthorization_Validators* _internal_mutable_allow_list();

  public:
  // .cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3 [json_name = "denyList", (.amino.oneof_name) = "cosmos-sdk/StakeAuthorization/DenyList"];
  bool has_deny_list() const;
  private:
  bool _internal_has_deny_list() const;

  public:
  void clear_deny_list() ;
  const ::cosmos::staking::v1beta1::StakeAuthorization_Validators& deny_list() const;
  PROTOBUF_NODISCARD ::cosmos::staking::v1beta1::StakeAuthorization_Validators* release_deny_list();
  ::cosmos::staking::v1beta1::StakeAuthorization_Validators* mutable_deny_list();
  void set_allocated_deny_list(::cosmos::staking::v1beta1::StakeAuthorization_Validators* value);
  void unsafe_arena_set_allocated_deny_list(::cosmos::staking::v1beta1::StakeAuthorization_Validators* value);
  ::cosmos::staking::v1beta1::StakeAuthorization_Validators* unsafe_arena_release_deny_list();

  private:
  const ::cosmos::staking::v1beta1::StakeAuthorization_Validators& _internal_deny_list() const;
  ::cosmos::staking::v1beta1::StakeAuthorization_Validators* _internal_mutable_deny_list();

  public:
  void clear_validators();
  ValidatorsCase validators_case() const;
  // @@protoc_insertion_point(class_scope:cosmos.staking.v1beta1.StakeAuthorization)
 private:
  class _Internal;
  void set_has_allow_list();
  void set_has_deny_list();
  inline bool has_validators() const;
  inline void clear_has_validators();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 4, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StakeAuthorization& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::cosmos::base::v1beta1::Coin* max_tokens_;
    int authorization_type_;
    union ValidatorsUnion {
      constexpr ValidatorsUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::cosmos::staking::v1beta1::StakeAuthorization_Validators* allow_list_;
      ::cosmos::staking::v1beta1::StakeAuthorization_Validators* deny_list_;
    } validators_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// StakeAuthorization_Validators

// repeated string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline int StakeAuthorization_Validators::_internal_address_size() const {
  return _internal_address().size();
}
inline int StakeAuthorization_Validators::address_size() const {
  return _internal_address_size();
}
inline void StakeAuthorization_Validators::clear_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Clear();
}
inline std::string* StakeAuthorization_Validators::add_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_address()->Add();
  // @@protoc_insertion_point(field_add_mutable:cosmos.staking.v1beta1.StakeAuthorization.Validators.address)
  return _s;
}
inline const std::string& StakeAuthorization_Validators::address(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.StakeAuthorization.Validators.address)
  return _internal_address().Get(index);
}
inline std::string* StakeAuthorization_Validators::mutable_address(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.StakeAuthorization.Validators.address)
  return _internal_mutable_address()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void StakeAuthorization_Validators::set_address(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_address()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.StakeAuthorization.Validators.address)
}
template <typename Arg_, typename... Args_>
inline void StakeAuthorization_Validators::add_address(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_address(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:cosmos.staking.v1beta1.StakeAuthorization.Validators.address)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
StakeAuthorization_Validators::address() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.staking.v1beta1.StakeAuthorization.Validators.address)
  return _internal_address();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
StakeAuthorization_Validators::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.staking.v1beta1.StakeAuthorization.Validators.address)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_address();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
StakeAuthorization_Validators::_internal_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.address_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
StakeAuthorization_Validators::_internal_mutable_address() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.address_;
}

// -------------------------------------------------------------------

// StakeAuthorization

// .cosmos.base.v1beta1.Coin max_tokens = 1 [json_name = "maxTokens", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];
inline bool StakeAuthorization::has_max_tokens() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.max_tokens_ != nullptr);
  return value;
}
inline const ::cosmos::base::v1beta1::Coin& StakeAuthorization::_internal_max_tokens() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::base::v1beta1::Coin* p = _impl_.max_tokens_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::v1beta1::Coin&>(::cosmos::base::v1beta1::_Coin_default_instance_);
}
inline const ::cosmos::base::v1beta1::Coin& StakeAuthorization::max_tokens() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.StakeAuthorization.max_tokens)
  return _internal_max_tokens();
}
inline void StakeAuthorization::unsafe_arena_set_allocated_max_tokens(::cosmos::base::v1beta1::Coin* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.max_tokens_);
  }
  _impl_.max_tokens_ = reinterpret_cast<::cosmos::base::v1beta1::Coin*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.staking.v1beta1.StakeAuthorization.max_tokens)
}
inline ::cosmos::base::v1beta1::Coin* StakeAuthorization::release_max_tokens() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* released = _impl_.max_tokens_;
  _impl_.max_tokens_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::base::v1beta1::Coin* StakeAuthorization::unsafe_arena_release_max_tokens() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.StakeAuthorization.max_tokens)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.max_tokens_;
  _impl_.max_tokens_ = nullptr;
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* StakeAuthorization::_internal_mutable_max_tokens() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.max_tokens_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::base::v1beta1::Coin>(GetArena());
    _impl_.max_tokens_ = reinterpret_cast<::cosmos::base::v1beta1::Coin*>(p);
  }
  return _impl_.max_tokens_;
}
inline ::cosmos::base::v1beta1::Coin* StakeAuthorization::mutable_max_tokens() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::base::v1beta1::Coin* _msg = _internal_mutable_max_tokens();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.StakeAuthorization.max_tokens)
  return _msg;
}
inline void StakeAuthorization::set_allocated_max_tokens(::cosmos::base::v1beta1::Coin* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.max_tokens_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.max_tokens_ = reinterpret_cast<::cosmos::base::v1beta1::Coin*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.StakeAuthorization.max_tokens)
}

// .cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2 [json_name = "allowList", (.amino.oneof_name) = "cosmos-sdk/StakeAuthorization/AllowList"];
inline bool StakeAuthorization::has_allow_list() const {
  return validators_case() == kAllowList;
}
inline bool StakeAuthorization::_internal_has_allow_list() const {
  return validators_case() == kAllowList;
}
inline void StakeAuthorization::set_has_allow_list() {
  _impl_._oneof_case_[0] = kAllowList;
}
inline void StakeAuthorization::clear_allow_list() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (validators_case() == kAllowList) {
    if (GetArena() == nullptr) {
      delete _impl_.validators_.allow_list_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.validators_.allow_list_);
    }
    clear_has_validators();
  }
}
inline ::cosmos::staking::v1beta1::StakeAuthorization_Validators* StakeAuthorization::release_allow_list() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.StakeAuthorization.allow_list)
  if (validators_case() == kAllowList) {
    clear_has_validators();
    auto* temp = _impl_.validators_.allow_list_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.validators_.allow_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cosmos::staking::v1beta1::StakeAuthorization_Validators& StakeAuthorization::_internal_allow_list() const {
  return validators_case() == kAllowList ? *_impl_.validators_.allow_list_ : reinterpret_cast<::cosmos::staking::v1beta1::StakeAuthorization_Validators&>(::cosmos::staking::v1beta1::_StakeAuthorization_Validators_default_instance_);
}
inline const ::cosmos::staking::v1beta1::StakeAuthorization_Validators& StakeAuthorization::allow_list() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.StakeAuthorization.allow_list)
  return _internal_allow_list();
}
inline ::cosmos::staking::v1beta1::StakeAuthorization_Validators* StakeAuthorization::unsafe_arena_release_allow_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmos.staking.v1beta1.StakeAuthorization.allow_list)
  if (validators_case() == kAllowList) {
    clear_has_validators();
    auto* temp = _impl_.validators_.allow_list_;
    _impl_.validators_.allow_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StakeAuthorization::unsafe_arena_set_allocated_allow_list(::cosmos::staking::v1beta1::StakeAuthorization_Validators* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_validators();
  if (value) {
    set_has_allow_list();
    _impl_.validators_.allow_list_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.staking.v1beta1.StakeAuthorization.allow_list)
}
inline ::cosmos::staking::v1beta1::StakeAuthorization_Validators* StakeAuthorization::_internal_mutable_allow_list() {
  if (validators_case() != kAllowList) {
    clear_validators();
    set_has_allow_list();
    _impl_.validators_.allow_list_ =
        ::google::protobuf::Message::DefaultConstruct<::cosmos::staking::v1beta1::StakeAuthorization_Validators>(GetArena());
  }
  return _impl_.validators_.allow_list_;
}
inline ::cosmos::staking::v1beta1::StakeAuthorization_Validators* StakeAuthorization::mutable_allow_list() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cosmos::staking::v1beta1::StakeAuthorization_Validators* _msg = _internal_mutable_allow_list();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.StakeAuthorization.allow_list)
  return _msg;
}

// .cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3 [json_name = "denyList", (.amino.oneof_name) = "cosmos-sdk/StakeAuthorization/DenyList"];
inline bool StakeAuthorization::has_deny_list() const {
  return validators_case() == kDenyList;
}
inline bool StakeAuthorization::_internal_has_deny_list() const {
  return validators_case() == kDenyList;
}
inline void StakeAuthorization::set_has_deny_list() {
  _impl_._oneof_case_[0] = kDenyList;
}
inline void StakeAuthorization::clear_deny_list() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (validators_case() == kDenyList) {
    if (GetArena() == nullptr) {
      delete _impl_.validators_.deny_list_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.validators_.deny_list_);
    }
    clear_has_validators();
  }
}
inline ::cosmos::staking::v1beta1::StakeAuthorization_Validators* StakeAuthorization::release_deny_list() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.StakeAuthorization.deny_list)
  if (validators_case() == kDenyList) {
    clear_has_validators();
    auto* temp = _impl_.validators_.deny_list_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.validators_.deny_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cosmos::staking::v1beta1::StakeAuthorization_Validators& StakeAuthorization::_internal_deny_list() const {
  return validators_case() == kDenyList ? *_impl_.validators_.deny_list_ : reinterpret_cast<::cosmos::staking::v1beta1::StakeAuthorization_Validators&>(::cosmos::staking::v1beta1::_StakeAuthorization_Validators_default_instance_);
}
inline const ::cosmos::staking::v1beta1::StakeAuthorization_Validators& StakeAuthorization::deny_list() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.StakeAuthorization.deny_list)
  return _internal_deny_list();
}
inline ::cosmos::staking::v1beta1::StakeAuthorization_Validators* StakeAuthorization::unsafe_arena_release_deny_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmos.staking.v1beta1.StakeAuthorization.deny_list)
  if (validators_case() == kDenyList) {
    clear_has_validators();
    auto* temp = _impl_.validators_.deny_list_;
    _impl_.validators_.deny_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StakeAuthorization::unsafe_arena_set_allocated_deny_list(::cosmos::staking::v1beta1::StakeAuthorization_Validators* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_validators();
  if (value) {
    set_has_deny_list();
    _impl_.validators_.deny_list_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.staking.v1beta1.StakeAuthorization.deny_list)
}
inline ::cosmos::staking::v1beta1::StakeAuthorization_Validators* StakeAuthorization::_internal_mutable_deny_list() {
  if (validators_case() != kDenyList) {
    clear_validators();
    set_has_deny_list();
    _impl_.validators_.deny_list_ =
        ::google::protobuf::Message::DefaultConstruct<::cosmos::staking::v1beta1::StakeAuthorization_Validators>(GetArena());
  }
  return _impl_.validators_.deny_list_;
}
inline ::cosmos::staking::v1beta1::StakeAuthorization_Validators* StakeAuthorization::mutable_deny_list() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cosmos::staking::v1beta1::StakeAuthorization_Validators* _msg = _internal_mutable_deny_list();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.StakeAuthorization.deny_list)
  return _msg;
}

// .cosmos.staking.v1beta1.AuthorizationType authorization_type = 4 [json_name = "authorizationType"];
inline void StakeAuthorization::clear_authorization_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.authorization_type_ = 0;
}
inline ::cosmos::staking::v1beta1::AuthorizationType StakeAuthorization::authorization_type() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.StakeAuthorization.authorization_type)
  return _internal_authorization_type();
}
inline void StakeAuthorization::set_authorization_type(::cosmos::staking::v1beta1::AuthorizationType value) {
  _internal_set_authorization_type(value);
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.StakeAuthorization.authorization_type)
}
inline ::cosmos::staking::v1beta1::AuthorizationType StakeAuthorization::_internal_authorization_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::cosmos::staking::v1beta1::AuthorizationType>(_impl_.authorization_type_);
}
inline void StakeAuthorization::_internal_set_authorization_type(::cosmos::staking::v1beta1::AuthorizationType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.authorization_type_ = value;
}

inline bool StakeAuthorization::has_validators() const {
  return validators_case() != VALIDATORS_NOT_SET;
}
inline void StakeAuthorization::clear_has_validators() {
  _impl_._oneof_case_[0] = VALIDATORS_NOT_SET;
}
inline StakeAuthorization::ValidatorsCase StakeAuthorization::validators_case() const {
  return StakeAuthorization::ValidatorsCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace staking
}  // namespace cosmos


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::cosmos::staking::v1beta1::AuthorizationType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cosmos::staking::v1beta1::AuthorizationType>() {
  return ::cosmos::staking::v1beta1::AuthorizationType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2fstaking_2fv1beta1_2fauthz_2eproto_2epb_2eh
