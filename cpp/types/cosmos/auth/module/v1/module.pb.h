// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/auth/module/v1/module.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2fauth_2fmodule_2fv1_2fmodule_2eproto_2epb_2eh
#define cosmos_2fauth_2fmodule_2fv1_2fmodule_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cosmos/app/v1alpha1/module.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fauth_2fmodule_2fv1_2fmodule_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fauth_2fmodule_2fv1_2fmodule_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2fauth_2fmodule_2fv1_2fmodule_2eproto;
namespace cosmos {
namespace auth {
namespace module {
namespace v1 {
class Module;
struct ModuleDefaultTypeInternal;
extern ModuleDefaultTypeInternal _Module_default_instance_;
class ModuleAccountPermission;
struct ModuleAccountPermissionDefaultTypeInternal;
extern ModuleAccountPermissionDefaultTypeInternal _ModuleAccountPermission_default_instance_;
}  // namespace v1
}  // namespace module
}  // namespace auth
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace auth {
namespace module {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class ModuleAccountPermission final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.auth.module.v1.ModuleAccountPermission) */ {
 public:
  inline ModuleAccountPermission() : ModuleAccountPermission(nullptr) {}
  ~ModuleAccountPermission() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ModuleAccountPermission* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ModuleAccountPermission));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ModuleAccountPermission(
      ::google::protobuf::internal::ConstantInitialized);

  inline ModuleAccountPermission(const ModuleAccountPermission& from) : ModuleAccountPermission(nullptr, from) {}
  inline ModuleAccountPermission(ModuleAccountPermission&& from) noexcept
      : ModuleAccountPermission(nullptr, std::move(from)) {}
  inline ModuleAccountPermission& operator=(const ModuleAccountPermission& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleAccountPermission& operator=(ModuleAccountPermission&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleAccountPermission& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleAccountPermission* internal_default_instance() {
    return reinterpret_cast<const ModuleAccountPermission*>(
        &_ModuleAccountPermission_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ModuleAccountPermission& a, ModuleAccountPermission& b) { a.Swap(&b); }
  inline void Swap(ModuleAccountPermission* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleAccountPermission* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleAccountPermission* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ModuleAccountPermission>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ModuleAccountPermission& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ModuleAccountPermission& from) { ModuleAccountPermission::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ModuleAccountPermission* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.auth.module.v1.ModuleAccountPermission"; }

 protected:
  explicit ModuleAccountPermission(::google::protobuf::Arena* arena);
  ModuleAccountPermission(::google::protobuf::Arena* arena, const ModuleAccountPermission& from);
  ModuleAccountPermission(::google::protobuf::Arena* arena, ModuleAccountPermission&& from) noexcept
      : ModuleAccountPermission(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPermissionsFieldNumber = 2,
    kAccountFieldNumber = 1,
  };
  // repeated string permissions = 2 [json_name = "permissions"];
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;

  public:
  void clear_permissions() ;
  const std::string& permissions(int index) const;
  std::string* mutable_permissions(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_permissions(int index, Arg_&& value, Args_... args);
  std::string* add_permissions();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_permissions(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& permissions() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_permissions();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_permissions() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_permissions();

  public:
  // string account = 1 [json_name = "account"];
  void clear_account() ;
  const std::string& account() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account(Arg_&& arg, Args_... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* value);

  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(
      const std::string& value);
  std::string* _internal_mutable_account();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.auth.module.v1.ModuleAccountPermission)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      72, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ModuleAccountPermission& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> permissions_;
    ::google::protobuf::internal::ArenaStringPtr account_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fauth_2fmodule_2fv1_2fmodule_2eproto;
};
// -------------------------------------------------------------------

class Module final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.auth.module.v1.Module) */ {
 public:
  inline Module() : Module(nullptr) {}
  ~Module() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Module* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Module));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Module(
      ::google::protobuf::internal::ConstantInitialized);

  inline Module(const Module& from) : Module(nullptr, from) {}
  inline Module(Module&& from) noexcept
      : Module(nullptr, std::move(from)) {}
  inline Module& operator=(const Module& from) {
    CopyFrom(from);
    return *this;
  }
  inline Module& operator=(Module&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Module& default_instance() {
    return *internal_default_instance();
  }
  static inline const Module* internal_default_instance() {
    return reinterpret_cast<const Module*>(
        &_Module_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Module& a, Module& b) { a.Swap(&b); }
  inline void Swap(Module* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Module* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Module* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Module>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Module& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Module& from) { Module::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Module* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.auth.module.v1.Module"; }

 protected:
  explicit Module(::google::protobuf::Arena* arena);
  Module(::google::protobuf::Arena* arena, const Module& from);
  Module(::google::protobuf::Arena* arena, Module&& from) noexcept
      : Module(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kModuleAccountPermissionsFieldNumber = 2,
    kBech32PrefixFieldNumber = 1,
    kAuthorityFieldNumber = 3,
    kEnableUnorderedTransactionsFieldNumber = 4,
  };
  // repeated .cosmos.auth.module.v1.ModuleAccountPermission module_account_permissions = 2 [json_name = "moduleAccountPermissions"];
  int module_account_permissions_size() const;
  private:
  int _internal_module_account_permissions_size() const;

  public:
  void clear_module_account_permissions() ;
  ::cosmos::auth::module::v1::ModuleAccountPermission* mutable_module_account_permissions(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::auth::module::v1::ModuleAccountPermission>* mutable_module_account_permissions();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::auth::module::v1::ModuleAccountPermission>& _internal_module_account_permissions() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::auth::module::v1::ModuleAccountPermission>* _internal_mutable_module_account_permissions();
  public:
  const ::cosmos::auth::module::v1::ModuleAccountPermission& module_account_permissions(int index) const;
  ::cosmos::auth::module::v1::ModuleAccountPermission* add_module_account_permissions();
  const ::google::protobuf::RepeatedPtrField<::cosmos::auth::module::v1::ModuleAccountPermission>& module_account_permissions() const;
  // string bech32_prefix = 1 [json_name = "bech32Prefix"];
  void clear_bech32_prefix() ;
  const std::string& bech32_prefix() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bech32_prefix(Arg_&& arg, Args_... args);
  std::string* mutable_bech32_prefix();
  PROTOBUF_NODISCARD std::string* release_bech32_prefix();
  void set_allocated_bech32_prefix(std::string* value);

  private:
  const std::string& _internal_bech32_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bech32_prefix(
      const std::string& value);
  std::string* _internal_mutable_bech32_prefix();

  public:
  // string authority = 3 [json_name = "authority"];
  void clear_authority() ;
  const std::string& authority() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_authority(Arg_&& arg, Args_... args);
  std::string* mutable_authority();
  PROTOBUF_NODISCARD std::string* release_authority();
  void set_allocated_authority(std::string* value);

  private:
  const std::string& _internal_authority() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authority(
      const std::string& value);
  std::string* _internal_mutable_authority();

  public:
  // bool enable_unordered_transactions = 4 [json_name = "enableUnorderedTransactions"];
  void clear_enable_unordered_transactions() ;
  bool enable_unordered_transactions() const;
  void set_enable_unordered_transactions(bool value);

  private:
  bool _internal_enable_unordered_transactions() const;
  void _internal_set_enable_unordered_transactions(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.auth.module.v1.Module)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      59, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Module& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::auth::module::v1::ModuleAccountPermission > module_account_permissions_;
    ::google::protobuf::internal::ArenaStringPtr bech32_prefix_;
    ::google::protobuf::internal::ArenaStringPtr authority_;
    bool enable_unordered_transactions_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fauth_2fmodule_2fv1_2fmodule_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Module

// string bech32_prefix = 1 [json_name = "bech32Prefix"];
inline void Module::clear_bech32_prefix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bech32_prefix_.ClearToEmpty();
}
inline const std::string& Module::bech32_prefix() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.auth.module.v1.Module.bech32_prefix)
  return _internal_bech32_prefix();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Module::set_bech32_prefix(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bech32_prefix_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.auth.module.v1.Module.bech32_prefix)
}
inline std::string* Module::mutable_bech32_prefix() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bech32_prefix();
  // @@protoc_insertion_point(field_mutable:cosmos.auth.module.v1.Module.bech32_prefix)
  return _s;
}
inline const std::string& Module::_internal_bech32_prefix() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bech32_prefix_.Get();
}
inline void Module::_internal_set_bech32_prefix(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bech32_prefix_.Set(value, GetArena());
}
inline std::string* Module::_internal_mutable_bech32_prefix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.bech32_prefix_.Mutable( GetArena());
}
inline std::string* Module::release_bech32_prefix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.auth.module.v1.Module.bech32_prefix)
  return _impl_.bech32_prefix_.Release();
}
inline void Module::set_allocated_bech32_prefix(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bech32_prefix_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.bech32_prefix_.IsDefault()) {
    _impl_.bech32_prefix_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.auth.module.v1.Module.bech32_prefix)
}

// repeated .cosmos.auth.module.v1.ModuleAccountPermission module_account_permissions = 2 [json_name = "moduleAccountPermissions"];
inline int Module::_internal_module_account_permissions_size() const {
  return _internal_module_account_permissions().size();
}
inline int Module::module_account_permissions_size() const {
  return _internal_module_account_permissions_size();
}
inline void Module::clear_module_account_permissions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.module_account_permissions_.Clear();
}
inline ::cosmos::auth::module::v1::ModuleAccountPermission* Module::mutable_module_account_permissions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.auth.module.v1.Module.module_account_permissions)
  return _internal_mutable_module_account_permissions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::auth::module::v1::ModuleAccountPermission>* Module::mutable_module_account_permissions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.auth.module.v1.Module.module_account_permissions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_module_account_permissions();
}
inline const ::cosmos::auth::module::v1::ModuleAccountPermission& Module::module_account_permissions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.auth.module.v1.Module.module_account_permissions)
  return _internal_module_account_permissions().Get(index);
}
inline ::cosmos::auth::module::v1::ModuleAccountPermission* Module::add_module_account_permissions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::auth::module::v1::ModuleAccountPermission* _add = _internal_mutable_module_account_permissions()->Add();
  // @@protoc_insertion_point(field_add:cosmos.auth.module.v1.Module.module_account_permissions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::auth::module::v1::ModuleAccountPermission>& Module::module_account_permissions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.auth.module.v1.Module.module_account_permissions)
  return _internal_module_account_permissions();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::auth::module::v1::ModuleAccountPermission>&
Module::_internal_module_account_permissions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.module_account_permissions_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::auth::module::v1::ModuleAccountPermission>*
Module::_internal_mutable_module_account_permissions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.module_account_permissions_;
}

// string authority = 3 [json_name = "authority"];
inline void Module::clear_authority() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.authority_.ClearToEmpty();
}
inline const std::string& Module::authority() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.auth.module.v1.Module.authority)
  return _internal_authority();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Module::set_authority(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.authority_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.auth.module.v1.Module.authority)
}
inline std::string* Module::mutable_authority() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_authority();
  // @@protoc_insertion_point(field_mutable:cosmos.auth.module.v1.Module.authority)
  return _s;
}
inline const std::string& Module::_internal_authority() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.authority_.Get();
}
inline void Module::_internal_set_authority(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.authority_.Set(value, GetArena());
}
inline std::string* Module::_internal_mutable_authority() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.authority_.Mutable( GetArena());
}
inline std::string* Module::release_authority() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.auth.module.v1.Module.authority)
  return _impl_.authority_.Release();
}
inline void Module::set_allocated_authority(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.authority_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.authority_.IsDefault()) {
    _impl_.authority_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.auth.module.v1.Module.authority)
}

// bool enable_unordered_transactions = 4 [json_name = "enableUnorderedTransactions"];
inline void Module::clear_enable_unordered_transactions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_unordered_transactions_ = false;
}
inline bool Module::enable_unordered_transactions() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.module.v1.Module.enable_unordered_transactions)
  return _internal_enable_unordered_transactions();
}
inline void Module::set_enable_unordered_transactions(bool value) {
  _internal_set_enable_unordered_transactions(value);
  // @@protoc_insertion_point(field_set:cosmos.auth.module.v1.Module.enable_unordered_transactions)
}
inline bool Module::_internal_enable_unordered_transactions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enable_unordered_transactions_;
}
inline void Module::_internal_set_enable_unordered_transactions(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enable_unordered_transactions_ = value;
}

// -------------------------------------------------------------------

// ModuleAccountPermission

// string account = 1 [json_name = "account"];
inline void ModuleAccountPermission::clear_account() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.account_.ClearToEmpty();
}
inline const std::string& ModuleAccountPermission::account() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.auth.module.v1.ModuleAccountPermission.account)
  return _internal_account();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModuleAccountPermission::set_account(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.account_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.auth.module.v1.ModuleAccountPermission.account)
}
inline std::string* ModuleAccountPermission::mutable_account() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:cosmos.auth.module.v1.ModuleAccountPermission.account)
  return _s;
}
inline const std::string& ModuleAccountPermission::_internal_account() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.account_.Get();
}
inline void ModuleAccountPermission::_internal_set_account(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.account_.Set(value, GetArena());
}
inline std::string* ModuleAccountPermission::_internal_mutable_account() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.account_.Mutable( GetArena());
}
inline std::string* ModuleAccountPermission::release_account() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.auth.module.v1.ModuleAccountPermission.account)
  return _impl_.account_.Release();
}
inline void ModuleAccountPermission::set_allocated_account(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.account_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.account_.IsDefault()) {
    _impl_.account_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.auth.module.v1.ModuleAccountPermission.account)
}

// repeated string permissions = 2 [json_name = "permissions"];
inline int ModuleAccountPermission::_internal_permissions_size() const {
  return _internal_permissions().size();
}
inline int ModuleAccountPermission::permissions_size() const {
  return _internal_permissions_size();
}
inline void ModuleAccountPermission::clear_permissions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.permissions_.Clear();
}
inline std::string* ModuleAccountPermission::add_permissions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_permissions()->Add();
  // @@protoc_insertion_point(field_add_mutable:cosmos.auth.module.v1.ModuleAccountPermission.permissions)
  return _s;
}
inline const std::string& ModuleAccountPermission::permissions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.auth.module.v1.ModuleAccountPermission.permissions)
  return _internal_permissions().Get(index);
}
inline std::string* ModuleAccountPermission::mutable_permissions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.auth.module.v1.ModuleAccountPermission.permissions)
  return _internal_mutable_permissions()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ModuleAccountPermission::set_permissions(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_permissions()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:cosmos.auth.module.v1.ModuleAccountPermission.permissions)
}
template <typename Arg_, typename... Args_>
inline void ModuleAccountPermission::add_permissions(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_permissions(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:cosmos.auth.module.v1.ModuleAccountPermission.permissions)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ModuleAccountPermission::permissions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.auth.module.v1.ModuleAccountPermission.permissions)
  return _internal_permissions();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ModuleAccountPermission::mutable_permissions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.auth.module.v1.ModuleAccountPermission.permissions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_permissions();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ModuleAccountPermission::_internal_permissions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.permissions_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ModuleAccountPermission::_internal_mutable_permissions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.permissions_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace module
}  // namespace auth
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2fauth_2fmodule_2fv1_2fmodule_2eproto_2epb_2eh
