// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/bank/v1beta1/bank.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2fbank_2fv1beta1_2fbank_2eproto_2epb_2eh
#define cosmos_2fbank_2fv1beta1_2fbank_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
#include "cosmos/msg/v1/msg.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fbank_2fv1beta1_2fbank_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fbank_2fv1beta1_2fbank_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2fbank_2fv1beta1_2fbank_2eproto;
namespace cosmos {
namespace bank {
namespace v1beta1 {
class DenomUnit;
struct DenomUnitDefaultTypeInternal;
extern DenomUnitDefaultTypeInternal _DenomUnit_default_instance_;
class Input;
struct InputDefaultTypeInternal;
extern InputDefaultTypeInternal _Input_default_instance_;
class Metadata;
struct MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class Output;
struct OutputDefaultTypeInternal;
extern OutputDefaultTypeInternal _Output_default_instance_;
class Params;
struct ParamsDefaultTypeInternal;
extern ParamsDefaultTypeInternal _Params_default_instance_;
class SendEnabled;
struct SendEnabledDefaultTypeInternal;
extern SendEnabledDefaultTypeInternal _SendEnabled_default_instance_;
class Supply;
struct SupplyDefaultTypeInternal;
extern SupplyDefaultTypeInternal _Supply_default_instance_;
}  // namespace v1beta1
}  // namespace bank
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace bank {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class SendEnabled final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.SendEnabled) */ {
 public:
  inline SendEnabled() : SendEnabled(nullptr) {}
  ~SendEnabled() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SendEnabled* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SendEnabled));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SendEnabled(
      ::google::protobuf::internal::ConstantInitialized);

  inline SendEnabled(const SendEnabled& from) : SendEnabled(nullptr, from) {}
  inline SendEnabled(SendEnabled&& from) noexcept
      : SendEnabled(nullptr, std::move(from)) {}
  inline SendEnabled& operator=(const SendEnabled& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendEnabled& operator=(SendEnabled&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendEnabled& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendEnabled* internal_default_instance() {
    return reinterpret_cast<const SendEnabled*>(
        &_SendEnabled_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SendEnabled& a, SendEnabled& b) { a.Swap(&b); }
  inline void Swap(SendEnabled* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendEnabled* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendEnabled* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SendEnabled>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SendEnabled& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SendEnabled& from) { SendEnabled::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SendEnabled* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.bank.v1beta1.SendEnabled"; }

 protected:
  explicit SendEnabled(::google::protobuf::Arena* arena);
  SendEnabled(::google::protobuf::Arena* arena, const SendEnabled& from);
  SendEnabled(::google::protobuf::Arena* arena, SendEnabled&& from) noexcept
      : SendEnabled(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDenomFieldNumber = 1,
    kEnabledFieldNumber = 2,
  };
  // string denom = 1 [json_name = "denom"];
  void clear_denom() ;
  const std::string& denom() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_denom(Arg_&& arg, Args_... args);
  std::string* mutable_denom();
  PROTOBUF_NODISCARD std::string* release_denom();
  void set_allocated_denom(std::string* value);

  private:
  const std::string& _internal_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_denom(
      const std::string& value);
  std::string* _internal_mutable_denom();

  public:
  // bool enabled = 2 [json_name = "enabled"];
  void clear_enabled() ;
  bool enabled() const;
  void set_enabled(bool value);

  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.SendEnabled)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      45, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SendEnabled& from_msg);
    ::google::protobuf::internal::ArenaStringPtr denom_;
    bool enabled_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fbank_2eproto;
};
// -------------------------------------------------------------------

class DenomUnit final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.DenomUnit) */ {
 public:
  inline DenomUnit() : DenomUnit(nullptr) {}
  ~DenomUnit() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DenomUnit* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DenomUnit));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DenomUnit(
      ::google::protobuf::internal::ConstantInitialized);

  inline DenomUnit(const DenomUnit& from) : DenomUnit(nullptr, from) {}
  inline DenomUnit(DenomUnit&& from) noexcept
      : DenomUnit(nullptr, std::move(from)) {}
  inline DenomUnit& operator=(const DenomUnit& from) {
    CopyFrom(from);
    return *this;
  }
  inline DenomUnit& operator=(DenomUnit&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DenomUnit& default_instance() {
    return *internal_default_instance();
  }
  static inline const DenomUnit* internal_default_instance() {
    return reinterpret_cast<const DenomUnit*>(
        &_DenomUnit_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(DenomUnit& a, DenomUnit& b) { a.Swap(&b); }
  inline void Swap(DenomUnit* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DenomUnit* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DenomUnit* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DenomUnit>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DenomUnit& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DenomUnit& from) { DenomUnit::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DenomUnit* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.bank.v1beta1.DenomUnit"; }

 protected:
  explicit DenomUnit(::google::protobuf::Arena* arena);
  DenomUnit(::google::protobuf::Arena* arena, const DenomUnit& from);
  DenomUnit(::google::protobuf::Arena* arena, DenomUnit&& from) noexcept
      : DenomUnit(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAliasesFieldNumber = 3,
    kDenomFieldNumber = 1,
    kExponentFieldNumber = 2,
  };
  // repeated string aliases = 3 [json_name = "aliases"];
  int aliases_size() const;
  private:
  int _internal_aliases_size() const;

  public:
  void clear_aliases() ;
  const std::string& aliases(int index) const;
  std::string* mutable_aliases(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_aliases(int index, Arg_&& value, Args_... args);
  std::string* add_aliases();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_aliases(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& aliases() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_aliases();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_aliases() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_aliases();

  public:
  // string denom = 1 [json_name = "denom"];
  void clear_denom() ;
  const std::string& denom() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_denom(Arg_&& arg, Args_... args);
  std::string* mutable_denom();
  PROTOBUF_NODISCARD std::string* release_denom();
  void set_allocated_denom(std::string* value);

  private:
  const std::string& _internal_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_denom(
      const std::string& value);
  std::string* _internal_mutable_denom();

  public:
  // uint32 exponent = 2 [json_name = "exponent"];
  void clear_exponent() ;
  ::uint32_t exponent() const;
  void set_exponent(::uint32_t value);

  private:
  ::uint32_t _internal_exponent() const;
  void _internal_set_exponent(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.DenomUnit)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      50, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DenomUnit& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> aliases_;
    ::google::protobuf::internal::ArenaStringPtr denom_;
    ::uint32_t exponent_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fbank_2eproto;
};
// -------------------------------------------------------------------

class Supply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.Supply) */ {
 public:
  inline Supply() : Supply(nullptr) {}
  ~Supply() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Supply* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Supply));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Supply(
      ::google::protobuf::internal::ConstantInitialized);

  inline Supply(const Supply& from) : Supply(nullptr, from) {}
  inline Supply(Supply&& from) noexcept
      : Supply(nullptr, std::move(from)) {}
  inline Supply& operator=(const Supply& from) {
    CopyFrom(from);
    return *this;
  }
  inline Supply& operator=(Supply&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Supply& default_instance() {
    return *internal_default_instance();
  }
  static inline const Supply* internal_default_instance() {
    return reinterpret_cast<const Supply*>(
        &_Supply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Supply& a, Supply& b) { a.Swap(&b); }
  inline void Swap(Supply* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Supply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Supply* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Supply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Supply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Supply& from) { Supply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Supply* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.bank.v1beta1.Supply"; }

 protected:
  explicit Supply(::google::protobuf::Arena* arena);
  Supply(::google::protobuf::Arena* arena, const Supply& from);
  Supply(::google::protobuf::Arena* arena, Supply&& from) noexcept
      : Supply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTotalFieldNumber = 1,
  };
  // repeated .cosmos.base.v1beta1.Coin total = 1 [json_name = "total", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
  int total_size() const;
  private:
  int _internal_total_size() const;

  public:
  void clear_total() ;
  ::cosmos::base::v1beta1::Coin* mutable_total(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* mutable_total();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_total() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_total();
  public:
  const ::cosmos::base::v1beta1::Coin& total(int index) const;
  ::cosmos::base::v1beta1::Coin* add_total();
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& total() const;
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.Supply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Supply& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > total_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fbank_2eproto;
};
// -------------------------------------------------------------------

class Params final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.Params) */ {
 public:
  inline Params() : Params(nullptr) {}
  ~Params() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Params* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Params));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Params(
      ::google::protobuf::internal::ConstantInitialized);

  inline Params(const Params& from) : Params(nullptr, from) {}
  inline Params(Params&& from) noexcept
      : Params(nullptr, std::move(from)) {}
  inline Params& operator=(const Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params& operator=(Params&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params* internal_default_instance() {
    return reinterpret_cast<const Params*>(
        &_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Params& a, Params& b) { a.Swap(&b); }
  inline void Swap(Params* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Params* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Params>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Params& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Params& from) { Params::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Params* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.bank.v1beta1.Params"; }

 protected:
  explicit Params(::google::protobuf::Arena* arena);
  Params(::google::protobuf::Arena* arena, const Params& from);
  Params(::google::protobuf::Arena* arena, Params&& from) noexcept
      : Params(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSendEnabledFieldNumber = 1,
    kDefaultSendEnabledFieldNumber = 2,
  };
  // repeated .cosmos.bank.v1beta1.SendEnabled send_enabled = 1 [json_name = "sendEnabled", deprecated = true];
  [[deprecated]]  int send_enabled_size() const;
  private:
  int _internal_send_enabled_size() const;

  public:
  [[deprecated]]  void clear_send_enabled() ;
  [[deprecated]] ::cosmos::bank::v1beta1::SendEnabled* mutable_send_enabled(int index);
  [[deprecated]] ::google::protobuf::RepeatedPtrField<::cosmos::bank::v1beta1::SendEnabled>* mutable_send_enabled();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::bank::v1beta1::SendEnabled>& _internal_send_enabled() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::bank::v1beta1::SendEnabled>* _internal_mutable_send_enabled();
  public:
  [[deprecated]] const ::cosmos::bank::v1beta1::SendEnabled& send_enabled(int index) const;
  [[deprecated]] ::cosmos::bank::v1beta1::SendEnabled* add_send_enabled();
  [[deprecated]] const ::google::protobuf::RepeatedPtrField<::cosmos::bank::v1beta1::SendEnabled>& send_enabled() const;
  // bool default_send_enabled = 2 [json_name = "defaultSendEnabled"];
  void clear_default_send_enabled() ;
  bool default_send_enabled() const;
  void set_default_send_enabled(bool value);

  private:
  bool _internal_default_send_enabled() const;
  void _internal_set_default_send_enabled(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.Params)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Params& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::bank::v1beta1::SendEnabled > send_enabled_;
    bool default_send_enabled_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fbank_2eproto;
};
// -------------------------------------------------------------------

class Output final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.Output) */ {
 public:
  inline Output() : Output(nullptr) {}
  ~Output() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Output* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Output));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Output(
      ::google::protobuf::internal::ConstantInitialized);

  inline Output(const Output& from) : Output(nullptr, from) {}
  inline Output(Output&& from) noexcept
      : Output(nullptr, std::move(from)) {}
  inline Output& operator=(const Output& from) {
    CopyFrom(from);
    return *this;
  }
  inline Output& operator=(Output&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Output& default_instance() {
    return *internal_default_instance();
  }
  static inline const Output* internal_default_instance() {
    return reinterpret_cast<const Output*>(
        &_Output_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Output& a, Output& b) { a.Swap(&b); }
  inline void Swap(Output* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Output* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Output* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Output>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Output& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Output& from) { Output::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Output* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.bank.v1beta1.Output"; }

 protected:
  explicit Output(::google::protobuf::Arena* arena);
  Output(::google::protobuf::Arena* arena, const Output& from);
  Output(::google::protobuf::Arena* arena, Output&& from) noexcept
      : Output(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCoinsFieldNumber = 2,
    kAddressFieldNumber = 1,
  };
  // repeated .cosmos.base.v1beta1.Coin coins = 2 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
  int coins_size() const;
  private:
  int _internal_coins_size() const;

  public:
  void clear_coins() ;
  ::cosmos::base::v1beta1::Coin* mutable_coins(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* mutable_coins();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_coins() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_coins();
  public:
  const ::cosmos::base::v1beta1::Coin& coins(int index) const;
  ::cosmos::base::v1beta1::Coin* add_coins();
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& coins() const;
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* value);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.Output)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      42, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Output& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > coins_;
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fbank_2eproto;
};
// -------------------------------------------------------------------

class Metadata final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.Metadata) */ {
 public:
  inline Metadata() : Metadata(nullptr) {}
  ~Metadata() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Metadata* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Metadata));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Metadata(
      ::google::protobuf::internal::ConstantInitialized);

  inline Metadata(const Metadata& from) : Metadata(nullptr, from) {}
  inline Metadata(Metadata&& from) noexcept
      : Metadata(nullptr, std::move(from)) {}
  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
        &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(Metadata& a, Metadata& b) { a.Swap(&b); }
  inline void Swap(Metadata* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metadata* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Metadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Metadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Metadata& from) { Metadata::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Metadata* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.bank.v1beta1.Metadata"; }

 protected:
  explicit Metadata(::google::protobuf::Arena* arena);
  Metadata(::google::protobuf::Arena* arena, const Metadata& from);
  Metadata(::google::protobuf::Arena* arena, Metadata&& from) noexcept
      : Metadata(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDenomUnitsFieldNumber = 2,
    kDescriptionFieldNumber = 1,
    kBaseFieldNumber = 3,
    kDisplayFieldNumber = 4,
    kNameFieldNumber = 5,
    kSymbolFieldNumber = 6,
    kUriFieldNumber = 7,
    kUriHashFieldNumber = 8,
  };
  // repeated .cosmos.bank.v1beta1.DenomUnit denom_units = 2 [json_name = "denomUnits"];
  int denom_units_size() const;
  private:
  int _internal_denom_units_size() const;

  public:
  void clear_denom_units() ;
  ::cosmos::bank::v1beta1::DenomUnit* mutable_denom_units(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::bank::v1beta1::DenomUnit>* mutable_denom_units();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::bank::v1beta1::DenomUnit>& _internal_denom_units() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::bank::v1beta1::DenomUnit>* _internal_mutable_denom_units();
  public:
  const ::cosmos::bank::v1beta1::DenomUnit& denom_units(int index) const;
  ::cosmos::bank::v1beta1::DenomUnit* add_denom_units();
  const ::google::protobuf::RepeatedPtrField<::cosmos::bank::v1beta1::DenomUnit>& denom_units() const;
  // string description = 1 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // string base = 3 [json_name = "base"];
  void clear_base() ;
  const std::string& base() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_base(Arg_&& arg, Args_... args);
  std::string* mutable_base();
  PROTOBUF_NODISCARD std::string* release_base();
  void set_allocated_base(std::string* value);

  private:
  const std::string& _internal_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base(
      const std::string& value);
  std::string* _internal_mutable_base();

  public:
  // string display = 4 [json_name = "display"];
  void clear_display() ;
  const std::string& display() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_display(Arg_&& arg, Args_... args);
  std::string* mutable_display();
  PROTOBUF_NODISCARD std::string* release_display();
  void set_allocated_display(std::string* value);

  private:
  const std::string& _internal_display() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display(
      const std::string& value);
  std::string* _internal_mutable_display();

  public:
  // string name = 5 [json_name = "name", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.43"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string symbol = 6 [json_name = "symbol", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.43"];
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string uri = 7 [json_name = "uri", (.gogoproto.customname) = "URI", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.46"];
  void clear_uri() ;
  const std::string& uri() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uri(Arg_&& arg, Args_... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* value);

  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(
      const std::string& value);
  std::string* _internal_mutable_uri();

  public:
  // string uri_hash = 8 [json_name = "uriHash", (.gogoproto.customname) = "URIHash", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.46"];
  void clear_uri_hash() ;
  const std::string& uri_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uri_hash(Arg_&& arg, Args_... args);
  std::string* mutable_uri_hash();
  PROTOBUF_NODISCARD std::string* release_uri_hash();
  void set_allocated_uri_hash(std::string* value);

  private:
  const std::string& _internal_uri_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri_hash(
      const std::string& value);
  std::string* _internal_mutable_uri_hash();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.Metadata)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 1,
      88, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Metadata& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::bank::v1beta1::DenomUnit > denom_units_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr base_;
    ::google::protobuf::internal::ArenaStringPtr display_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr uri_;
    ::google::protobuf::internal::ArenaStringPtr uri_hash_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fbank_2eproto;
};
// -------------------------------------------------------------------

class Input final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.Input) */ {
 public:
  inline Input() : Input(nullptr) {}
  ~Input() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Input* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Input));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Input(
      ::google::protobuf::internal::ConstantInitialized);

  inline Input(const Input& from) : Input(nullptr, from) {}
  inline Input(Input&& from) noexcept
      : Input(nullptr, std::move(from)) {}
  inline Input& operator=(const Input& from) {
    CopyFrom(from);
    return *this;
  }
  inline Input& operator=(Input&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Input& default_instance() {
    return *internal_default_instance();
  }
  static inline const Input* internal_default_instance() {
    return reinterpret_cast<const Input*>(
        &_Input_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Input& a, Input& b) { a.Swap(&b); }
  inline void Swap(Input* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Input* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Input* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Input>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Input& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Input& from) { Input::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Input* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.bank.v1beta1.Input"; }

 protected:
  explicit Input(::google::protobuf::Arena* arena);
  Input(::google::protobuf::Arena* arena, const Input& from);
  Input(::google::protobuf::Arena* arena, Input&& from) noexcept
      : Input(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCoinsFieldNumber = 2,
    kAddressFieldNumber = 1,
  };
  // repeated .cosmos.base.v1beta1.Coin coins = 2 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
  int coins_size() const;
  private:
  int _internal_coins_size() const;

  public:
  void clear_coins() ;
  ::cosmos::base::v1beta1::Coin* mutable_coins(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* mutable_coins();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_coins() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_coins();
  public:
  const ::cosmos::base::v1beta1::Coin& coins(int index) const;
  ::cosmos::base::v1beta1::Coin* add_coins();
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& coins() const;
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* value);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.Input)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      41, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Input& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > coins_;
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fbank_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Params

// repeated .cosmos.bank.v1beta1.SendEnabled send_enabled = 1 [json_name = "sendEnabled", deprecated = true];
inline int Params::_internal_send_enabled_size() const {
  return _internal_send_enabled().size();
}
inline int Params::send_enabled_size() const {
  return _internal_send_enabled_size();
}
inline void Params::clear_send_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.send_enabled_.Clear();
}
inline ::cosmos::bank::v1beta1::SendEnabled* Params::mutable_send_enabled(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Params.send_enabled)
  return _internal_mutable_send_enabled()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::bank::v1beta1::SendEnabled>* Params::mutable_send_enabled()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.bank.v1beta1.Params.send_enabled)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_send_enabled();
}
inline const ::cosmos::bank::v1beta1::SendEnabled& Params::send_enabled(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Params.send_enabled)
  return _internal_send_enabled().Get(index);
}
inline ::cosmos::bank::v1beta1::SendEnabled* Params::add_send_enabled() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::bank::v1beta1::SendEnabled* _add = _internal_mutable_send_enabled()->Add();
  // @@protoc_insertion_point(field_add:cosmos.bank.v1beta1.Params.send_enabled)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::bank::v1beta1::SendEnabled>& Params::send_enabled() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.bank.v1beta1.Params.send_enabled)
  return _internal_send_enabled();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::bank::v1beta1::SendEnabled>&
Params::_internal_send_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.send_enabled_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::bank::v1beta1::SendEnabled>*
Params::_internal_mutable_send_enabled() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.send_enabled_;
}

// bool default_send_enabled = 2 [json_name = "defaultSendEnabled"];
inline void Params::clear_default_send_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default_send_enabled_ = false;
}
inline bool Params::default_send_enabled() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Params.default_send_enabled)
  return _internal_default_send_enabled();
}
inline void Params::set_default_send_enabled(bool value) {
  _internal_set_default_send_enabled(value);
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.Params.default_send_enabled)
}
inline bool Params::_internal_default_send_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.default_send_enabled_;
}
inline void Params::_internal_set_default_send_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default_send_enabled_ = value;
}

// -------------------------------------------------------------------

// SendEnabled

// string denom = 1 [json_name = "denom"];
inline void SendEnabled::clear_denom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.denom_.ClearToEmpty();
}
inline const std::string& SendEnabled::denom() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.SendEnabled.denom)
  return _internal_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SendEnabled::set_denom(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.denom_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.SendEnabled.denom)
}
inline std::string* SendEnabled::mutable_denom() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_denom();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.SendEnabled.denom)
  return _s;
}
inline const std::string& SendEnabled::_internal_denom() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.denom_.Get();
}
inline void SendEnabled::_internal_set_denom(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.denom_.Set(value, GetArena());
}
inline std::string* SendEnabled::_internal_mutable_denom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.denom_.Mutable( GetArena());
}
inline std::string* SendEnabled::release_denom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.SendEnabled.denom)
  return _impl_.denom_.Release();
}
inline void SendEnabled::set_allocated_denom(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.denom_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.denom_.IsDefault()) {
    _impl_.denom_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.SendEnabled.denom)
}

// bool enabled = 2 [json_name = "enabled"];
inline void SendEnabled::clear_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enabled_ = false;
}
inline bool SendEnabled::enabled() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.SendEnabled.enabled)
  return _internal_enabled();
}
inline void SendEnabled::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.SendEnabled.enabled)
}
inline bool SendEnabled::_internal_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enabled_;
}
inline void SendEnabled::_internal_set_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enabled_ = value;
}

// -------------------------------------------------------------------

// Input

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void Input::clear_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.ClearToEmpty();
}
inline const std::string& Input::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Input.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Input::set_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.Input.address)
}
inline std::string* Input::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Input.address)
  return _s;
}
inline const std::string& Input::_internal_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.address_.Get();
}
inline void Input::_internal_set_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(value, GetArena());
}
inline std::string* Input::_internal_mutable_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.address_.Mutable( GetArena());
}
inline std::string* Input::release_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.Input.address)
  return _impl_.address_.Release();
}
inline void Input::set_allocated_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.Input.address)
}

// repeated .cosmos.base.v1beta1.Coin coins = 2 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
inline int Input::_internal_coins_size() const {
  return _internal_coins().size();
}
inline int Input::coins_size() const {
  return _internal_coins_size();
}
inline ::cosmos::base::v1beta1::Coin* Input::mutable_coins(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Input.coins)
  return _internal_mutable_coins()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* Input::mutable_coins()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.bank.v1beta1.Input.coins)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_coins();
}
inline const ::cosmos::base::v1beta1::Coin& Input::coins(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Input.coins)
  return _internal_coins().Get(index);
}
inline ::cosmos::base::v1beta1::Coin* Input::add_coins() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::base::v1beta1::Coin* _add = _internal_mutable_coins()->Add();
  // @@protoc_insertion_point(field_add:cosmos.bank.v1beta1.Input.coins)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& Input::coins() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.bank.v1beta1.Input.coins)
  return _internal_coins();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
Input::_internal_coins() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.coins_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
Input::_internal_mutable_coins() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.coins_;
}

// -------------------------------------------------------------------

// Output

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void Output::clear_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.ClearToEmpty();
}
inline const std::string& Output::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Output.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Output::set_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.Output.address)
}
inline std::string* Output::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Output.address)
  return _s;
}
inline const std::string& Output::_internal_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.address_.Get();
}
inline void Output::_internal_set_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(value, GetArena());
}
inline std::string* Output::_internal_mutable_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.address_.Mutable( GetArena());
}
inline std::string* Output::release_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.Output.address)
  return _impl_.address_.Release();
}
inline void Output::set_allocated_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.Output.address)
}

// repeated .cosmos.base.v1beta1.Coin coins = 2 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
inline int Output::_internal_coins_size() const {
  return _internal_coins().size();
}
inline int Output::coins_size() const {
  return _internal_coins_size();
}
inline ::cosmos::base::v1beta1::Coin* Output::mutable_coins(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Output.coins)
  return _internal_mutable_coins()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* Output::mutable_coins()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.bank.v1beta1.Output.coins)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_coins();
}
inline const ::cosmos::base::v1beta1::Coin& Output::coins(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Output.coins)
  return _internal_coins().Get(index);
}
inline ::cosmos::base::v1beta1::Coin* Output::add_coins() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::base::v1beta1::Coin* _add = _internal_mutable_coins()->Add();
  // @@protoc_insertion_point(field_add:cosmos.bank.v1beta1.Output.coins)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& Output::coins() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.bank.v1beta1.Output.coins)
  return _internal_coins();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
Output::_internal_coins() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.coins_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
Output::_internal_mutable_coins() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.coins_;
}

// -------------------------------------------------------------------

// Supply

// repeated .cosmos.base.v1beta1.Coin total = 1 [json_name = "total", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.encoding) = "legacy_coins", (.amino.dont_omitempty) = true];
inline int Supply::_internal_total_size() const {
  return _internal_total().size();
}
inline int Supply::total_size() const {
  return _internal_total_size();
}
inline ::cosmos::base::v1beta1::Coin* Supply::mutable_total(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Supply.total)
  return _internal_mutable_total()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* Supply::mutable_total()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.bank.v1beta1.Supply.total)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_total();
}
inline const ::cosmos::base::v1beta1::Coin& Supply::total(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Supply.total)
  return _internal_total().Get(index);
}
inline ::cosmos::base::v1beta1::Coin* Supply::add_total() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::base::v1beta1::Coin* _add = _internal_mutable_total()->Add();
  // @@protoc_insertion_point(field_add:cosmos.bank.v1beta1.Supply.total)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& Supply::total() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.bank.v1beta1.Supply.total)
  return _internal_total();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
Supply::_internal_total() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
Supply::_internal_mutable_total() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.total_;
}

// -------------------------------------------------------------------

// DenomUnit

// string denom = 1 [json_name = "denom"];
inline void DenomUnit::clear_denom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.denom_.ClearToEmpty();
}
inline const std::string& DenomUnit::denom() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.DenomUnit.denom)
  return _internal_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DenomUnit::set_denom(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.denom_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.DenomUnit.denom)
}
inline std::string* DenomUnit::mutable_denom() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_denom();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.DenomUnit.denom)
  return _s;
}
inline const std::string& DenomUnit::_internal_denom() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.denom_.Get();
}
inline void DenomUnit::_internal_set_denom(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.denom_.Set(value, GetArena());
}
inline std::string* DenomUnit::_internal_mutable_denom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.denom_.Mutable( GetArena());
}
inline std::string* DenomUnit::release_denom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.DenomUnit.denom)
  return _impl_.denom_.Release();
}
inline void DenomUnit::set_allocated_denom(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.denom_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.denom_.IsDefault()) {
    _impl_.denom_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.DenomUnit.denom)
}

// uint32 exponent = 2 [json_name = "exponent"];
inline void DenomUnit::clear_exponent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exponent_ = 0u;
}
inline ::uint32_t DenomUnit::exponent() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.DenomUnit.exponent)
  return _internal_exponent();
}
inline void DenomUnit::set_exponent(::uint32_t value) {
  _internal_set_exponent(value);
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.DenomUnit.exponent)
}
inline ::uint32_t DenomUnit::_internal_exponent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.exponent_;
}
inline void DenomUnit::_internal_set_exponent(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exponent_ = value;
}

// repeated string aliases = 3 [json_name = "aliases"];
inline int DenomUnit::_internal_aliases_size() const {
  return _internal_aliases().size();
}
inline int DenomUnit::aliases_size() const {
  return _internal_aliases_size();
}
inline void DenomUnit::clear_aliases() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.aliases_.Clear();
}
inline std::string* DenomUnit::add_aliases() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_aliases()->Add();
  // @@protoc_insertion_point(field_add_mutable:cosmos.bank.v1beta1.DenomUnit.aliases)
  return _s;
}
inline const std::string& DenomUnit::aliases(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.DenomUnit.aliases)
  return _internal_aliases().Get(index);
}
inline std::string* DenomUnit::mutable_aliases(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.DenomUnit.aliases)
  return _internal_mutable_aliases()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void DenomUnit::set_aliases(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_aliases()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.DenomUnit.aliases)
}
template <typename Arg_, typename... Args_>
inline void DenomUnit::add_aliases(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_aliases(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:cosmos.bank.v1beta1.DenomUnit.aliases)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DenomUnit::aliases() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.bank.v1beta1.DenomUnit.aliases)
  return _internal_aliases();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DenomUnit::mutable_aliases() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.bank.v1beta1.DenomUnit.aliases)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_aliases();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DenomUnit::_internal_aliases() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.aliases_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DenomUnit::_internal_mutable_aliases() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.aliases_;
}

// -------------------------------------------------------------------

// Metadata

// string description = 1 [json_name = "description"];
inline void Metadata::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Metadata::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Metadata.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.Metadata.description)
}
inline std::string* Metadata::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Metadata.description)
  return _s;
}
inline const std::string& Metadata::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_.Get();
}
inline void Metadata::_internal_set_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(value, GetArena());
}
inline std::string* Metadata::_internal_mutable_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* Metadata::release_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.Metadata.description)
  return _impl_.description_.Release();
}
inline void Metadata::set_allocated_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.Metadata.description)
}

// repeated .cosmos.bank.v1beta1.DenomUnit denom_units = 2 [json_name = "denomUnits"];
inline int Metadata::_internal_denom_units_size() const {
  return _internal_denom_units().size();
}
inline int Metadata::denom_units_size() const {
  return _internal_denom_units_size();
}
inline void Metadata::clear_denom_units() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.denom_units_.Clear();
}
inline ::cosmos::bank::v1beta1::DenomUnit* Metadata::mutable_denom_units(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Metadata.denom_units)
  return _internal_mutable_denom_units()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::bank::v1beta1::DenomUnit>* Metadata::mutable_denom_units()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.bank.v1beta1.Metadata.denom_units)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_denom_units();
}
inline const ::cosmos::bank::v1beta1::DenomUnit& Metadata::denom_units(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Metadata.denom_units)
  return _internal_denom_units().Get(index);
}
inline ::cosmos::bank::v1beta1::DenomUnit* Metadata::add_denom_units() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::bank::v1beta1::DenomUnit* _add = _internal_mutable_denom_units()->Add();
  // @@protoc_insertion_point(field_add:cosmos.bank.v1beta1.Metadata.denom_units)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::bank::v1beta1::DenomUnit>& Metadata::denom_units() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.bank.v1beta1.Metadata.denom_units)
  return _internal_denom_units();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::bank::v1beta1::DenomUnit>&
Metadata::_internal_denom_units() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.denom_units_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::bank::v1beta1::DenomUnit>*
Metadata::_internal_mutable_denom_units() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.denom_units_;
}

// string base = 3 [json_name = "base"];
inline void Metadata::clear_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_.ClearToEmpty();
}
inline const std::string& Metadata::base() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Metadata.base)
  return _internal_base();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_base(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.Metadata.base)
}
inline std::string* Metadata::mutable_base() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Metadata.base)
  return _s;
}
inline const std::string& Metadata::_internal_base() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.base_.Get();
}
inline void Metadata::_internal_set_base(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_.Set(value, GetArena());
}
inline std::string* Metadata::_internal_mutable_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.base_.Mutable( GetArena());
}
inline std::string* Metadata::release_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.Metadata.base)
  return _impl_.base_.Release();
}
inline void Metadata::set_allocated_base(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.base_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.base_.IsDefault()) {
    _impl_.base_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.Metadata.base)
}

// string display = 4 [json_name = "display"];
inline void Metadata::clear_display() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.display_.ClearToEmpty();
}
inline const std::string& Metadata::display() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Metadata.display)
  return _internal_display();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_display(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.display_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.Metadata.display)
}
inline std::string* Metadata::mutable_display() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_display();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Metadata.display)
  return _s;
}
inline const std::string& Metadata::_internal_display() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.display_.Get();
}
inline void Metadata::_internal_set_display(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.display_.Set(value, GetArena());
}
inline std::string* Metadata::_internal_mutable_display() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.display_.Mutable( GetArena());
}
inline std::string* Metadata::release_display() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.Metadata.display)
  return _impl_.display_.Release();
}
inline void Metadata::set_allocated_display(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.display_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.display_.IsDefault()) {
    _impl_.display_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.Metadata.display)
}

// string name = 5 [json_name = "name", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.43"];
inline void Metadata::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Metadata::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Metadata.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.Metadata.name)
}
inline std::string* Metadata::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Metadata.name)
  return _s;
}
inline const std::string& Metadata::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Metadata::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Metadata::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Metadata::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.Metadata.name)
  return _impl_.name_.Release();
}
inline void Metadata::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.Metadata.name)
}

// string symbol = 6 [json_name = "symbol", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.43"];
inline void Metadata::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& Metadata::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Metadata.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.Metadata.symbol)
}
inline std::string* Metadata::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Metadata.symbol)
  return _s;
}
inline const std::string& Metadata::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void Metadata::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* Metadata::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* Metadata::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.Metadata.symbol)
  return _impl_.symbol_.Release();
}
inline void Metadata::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.Metadata.symbol)
}

// string uri = 7 [json_name = "uri", (.gogoproto.customname) = "URI", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.46"];
inline void Metadata::clear_uri() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uri_.ClearToEmpty();
}
inline const std::string& Metadata::uri() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Metadata.uri)
  return _internal_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_uri(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uri_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.Metadata.uri)
}
inline std::string* Metadata::mutable_uri() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Metadata.uri)
  return _s;
}
inline const std::string& Metadata::_internal_uri() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uri_.Get();
}
inline void Metadata::_internal_set_uri(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uri_.Set(value, GetArena());
}
inline std::string* Metadata::_internal_mutable_uri() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.uri_.Mutable( GetArena());
}
inline std::string* Metadata::release_uri() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.Metadata.uri)
  return _impl_.uri_.Release();
}
inline void Metadata::set_allocated_uri(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uri_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.uri_.IsDefault()) {
    _impl_.uri_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.Metadata.uri)
}

// string uri_hash = 8 [json_name = "uriHash", (.gogoproto.customname) = "URIHash", (.cosmos_proto.field_added_in) = "cosmos-sdk 0.46"];
inline void Metadata::clear_uri_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uri_hash_.ClearToEmpty();
}
inline const std::string& Metadata::uri_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Metadata.uri_hash)
  return _internal_uri_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_uri_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uri_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.Metadata.uri_hash)
}
inline std::string* Metadata::mutable_uri_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uri_hash();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Metadata.uri_hash)
  return _s;
}
inline const std::string& Metadata::_internal_uri_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uri_hash_.Get();
}
inline void Metadata::_internal_set_uri_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uri_hash_.Set(value, GetArena());
}
inline std::string* Metadata::_internal_mutable_uri_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.uri_hash_.Mutable( GetArena());
}
inline std::string* Metadata::release_uri_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.Metadata.uri_hash)
  return _impl_.uri_hash_.Release();
}
inline void Metadata::set_allocated_uri_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uri_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.uri_hash_.IsDefault()) {
    _impl_.uri_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.Metadata.uri_hash)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace bank
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2fbank_2fv1beta1_2fbank_2eproto_2epb_2eh
