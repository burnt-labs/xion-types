// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/mint/v1beta1/mint.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2fmint_2fv1beta1_2fmint_2eproto_2epb_2eh
#define cosmos_2fmint_2fv1beta1_2fmint_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fmint_2fv1beta1_2fmint_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fmint_2fv1beta1_2fmint_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2fmint_2fv1beta1_2fmint_2eproto;
namespace cosmos {
namespace mint {
namespace v1beta1 {
class Minter;
struct MinterDefaultTypeInternal;
extern MinterDefaultTypeInternal _Minter_default_instance_;
class Params;
struct ParamsDefaultTypeInternal;
extern ParamsDefaultTypeInternal _Params_default_instance_;
}  // namespace v1beta1
}  // namespace mint
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace mint {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class Params final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.mint.v1beta1.Params) */ {
 public:
  inline Params() : Params(nullptr) {}
  ~Params() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Params* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Params));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Params(
      ::google::protobuf::internal::ConstantInitialized);

  inline Params(const Params& from) : Params(nullptr, from) {}
  inline Params(Params&& from) noexcept
      : Params(nullptr, std::move(from)) {}
  inline Params& operator=(const Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params& operator=(Params&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params* internal_default_instance() {
    return reinterpret_cast<const Params*>(
        &_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Params& a, Params& b) { a.Swap(&b); }
  inline void Swap(Params* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Params* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Params>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Params& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Params& from) { Params::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Params* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.mint.v1beta1.Params"; }

 protected:
  explicit Params(::google::protobuf::Arena* arena);
  Params(::google::protobuf::Arena* arena, const Params& from);
  Params(::google::protobuf::Arena* arena, Params&& from) noexcept
      : Params(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMintDenomFieldNumber = 1,
    kInflationRateChangeFieldNumber = 2,
    kInflationMaxFieldNumber = 3,
    kInflationMinFieldNumber = 4,
    kGoalBondedFieldNumber = 5,
    kBlocksPerYearFieldNumber = 6,
  };
  // string mint_denom = 1 [json_name = "mintDenom"];
  void clear_mint_denom() ;
  const std::string& mint_denom() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mint_denom(Arg_&& arg, Args_... args);
  std::string* mutable_mint_denom();
  PROTOBUF_NODISCARD std::string* release_mint_denom();
  void set_allocated_mint_denom(std::string* value);

  private:
  const std::string& _internal_mint_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mint_denom(
      const std::string& value);
  std::string* _internal_mutable_mint_denom();

  public:
  // string inflation_rate_change = 2 [json_name = "inflationRateChange", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec", (.amino.dont_omitempty) = true];
  void clear_inflation_rate_change() ;
  const std::string& inflation_rate_change() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_inflation_rate_change(Arg_&& arg, Args_... args);
  std::string* mutable_inflation_rate_change();
  PROTOBUF_NODISCARD std::string* release_inflation_rate_change();
  void set_allocated_inflation_rate_change(std::string* value);

  private:
  const std::string& _internal_inflation_rate_change() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inflation_rate_change(
      const std::string& value);
  std::string* _internal_mutable_inflation_rate_change();

  public:
  // string inflation_max = 3 [json_name = "inflationMax", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec", (.amino.dont_omitempty) = true];
  void clear_inflation_max() ;
  const std::string& inflation_max() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_inflation_max(Arg_&& arg, Args_... args);
  std::string* mutable_inflation_max();
  PROTOBUF_NODISCARD std::string* release_inflation_max();
  void set_allocated_inflation_max(std::string* value);

  private:
  const std::string& _internal_inflation_max() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inflation_max(
      const std::string& value);
  std::string* _internal_mutable_inflation_max();

  public:
  // string inflation_min = 4 [json_name = "inflationMin", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec", (.amino.dont_omitempty) = true];
  void clear_inflation_min() ;
  const std::string& inflation_min() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_inflation_min(Arg_&& arg, Args_... args);
  std::string* mutable_inflation_min();
  PROTOBUF_NODISCARD std::string* release_inflation_min();
  void set_allocated_inflation_min(std::string* value);

  private:
  const std::string& _internal_inflation_min() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inflation_min(
      const std::string& value);
  std::string* _internal_mutable_inflation_min();

  public:
  // string goal_bonded = 5 [json_name = "goalBonded", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec", (.amino.dont_omitempty) = true];
  void clear_goal_bonded() ;
  const std::string& goal_bonded() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_goal_bonded(Arg_&& arg, Args_... args);
  std::string* mutable_goal_bonded();
  PROTOBUF_NODISCARD std::string* release_goal_bonded();
  void set_allocated_goal_bonded(std::string* value);

  private:
  const std::string& _internal_goal_bonded() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_goal_bonded(
      const std::string& value);
  std::string* _internal_mutable_goal_bonded();

  public:
  // uint64 blocks_per_year = 6 [json_name = "blocksPerYear"];
  void clear_blocks_per_year() ;
  ::uint64_t blocks_per_year() const;
  void set_blocks_per_year(::uint64_t value);

  private:
  ::uint64_t _internal_blocks_per_year() const;
  void _internal_set_blocks_per_year(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.mint.v1beta1.Params)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      103, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Params& from_msg);
    ::google::protobuf::internal::ArenaStringPtr mint_denom_;
    ::google::protobuf::internal::ArenaStringPtr inflation_rate_change_;
    ::google::protobuf::internal::ArenaStringPtr inflation_max_;
    ::google::protobuf::internal::ArenaStringPtr inflation_min_;
    ::google::protobuf::internal::ArenaStringPtr goal_bonded_;
    ::uint64_t blocks_per_year_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fmint_2fv1beta1_2fmint_2eproto;
};
// -------------------------------------------------------------------

class Minter final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.mint.v1beta1.Minter) */ {
 public:
  inline Minter() : Minter(nullptr) {}
  ~Minter() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Minter* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Minter));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Minter(
      ::google::protobuf::internal::ConstantInitialized);

  inline Minter(const Minter& from) : Minter(nullptr, from) {}
  inline Minter(Minter&& from) noexcept
      : Minter(nullptr, std::move(from)) {}
  inline Minter& operator=(const Minter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Minter& operator=(Minter&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Minter& default_instance() {
    return *internal_default_instance();
  }
  static inline const Minter* internal_default_instance() {
    return reinterpret_cast<const Minter*>(
        &_Minter_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Minter& a, Minter& b) { a.Swap(&b); }
  inline void Swap(Minter* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Minter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Minter* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Minter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Minter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Minter& from) { Minter::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Minter* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.mint.v1beta1.Minter"; }

 protected:
  explicit Minter(::google::protobuf::Arena* arena);
  Minter(::google::protobuf::Arena* arena, const Minter& from);
  Minter(::google::protobuf::Arena* arena, Minter&& from) noexcept
      : Minter(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInflationFieldNumber = 1,
    kAnnualProvisionsFieldNumber = 2,
  };
  // string inflation = 1 [json_name = "inflation", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  void clear_inflation() ;
  const std::string& inflation() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_inflation(Arg_&& arg, Args_... args);
  std::string* mutable_inflation();
  PROTOBUF_NODISCARD std::string* release_inflation();
  void set_allocated_inflation(std::string* value);

  private:
  const std::string& _internal_inflation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inflation(
      const std::string& value);
  std::string* _internal_mutable_inflation();

  public:
  // string annual_provisions = 2 [json_name = "annualProvisions", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  void clear_annual_provisions() ;
  const std::string& annual_provisions() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_annual_provisions(Arg_&& arg, Args_... args);
  std::string* mutable_annual_provisions();
  PROTOBUF_NODISCARD std::string* release_annual_provisions();
  void set_allocated_annual_provisions(std::string* value);

  private:
  const std::string& _internal_annual_provisions() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_annual_provisions(
      const std::string& value);
  std::string* _internal_mutable_annual_provisions();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.mint.v1beta1.Minter)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      61, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Minter& from_msg);
    ::google::protobuf::internal::ArenaStringPtr inflation_;
    ::google::protobuf::internal::ArenaStringPtr annual_provisions_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fmint_2fv1beta1_2fmint_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Minter

// string inflation = 1 [json_name = "inflation", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec"];
inline void Minter::clear_inflation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inflation_.ClearToEmpty();
}
inline const std::string& Minter::inflation() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.mint.v1beta1.Minter.inflation)
  return _internal_inflation();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Minter::set_inflation(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inflation_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.mint.v1beta1.Minter.inflation)
}
inline std::string* Minter::mutable_inflation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_inflation();
  // @@protoc_insertion_point(field_mutable:cosmos.mint.v1beta1.Minter.inflation)
  return _s;
}
inline const std::string& Minter::_internal_inflation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.inflation_.Get();
}
inline void Minter::_internal_set_inflation(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inflation_.Set(value, GetArena());
}
inline std::string* Minter::_internal_mutable_inflation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.inflation_.Mutable( GetArena());
}
inline std::string* Minter::release_inflation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.mint.v1beta1.Minter.inflation)
  return _impl_.inflation_.Release();
}
inline void Minter::set_allocated_inflation(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inflation_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.inflation_.IsDefault()) {
    _impl_.inflation_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.mint.v1beta1.Minter.inflation)
}

// string annual_provisions = 2 [json_name = "annualProvisions", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec"];
inline void Minter::clear_annual_provisions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.annual_provisions_.ClearToEmpty();
}
inline const std::string& Minter::annual_provisions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.mint.v1beta1.Minter.annual_provisions)
  return _internal_annual_provisions();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Minter::set_annual_provisions(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.annual_provisions_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.mint.v1beta1.Minter.annual_provisions)
}
inline std::string* Minter::mutable_annual_provisions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_annual_provisions();
  // @@protoc_insertion_point(field_mutable:cosmos.mint.v1beta1.Minter.annual_provisions)
  return _s;
}
inline const std::string& Minter::_internal_annual_provisions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.annual_provisions_.Get();
}
inline void Minter::_internal_set_annual_provisions(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.annual_provisions_.Set(value, GetArena());
}
inline std::string* Minter::_internal_mutable_annual_provisions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.annual_provisions_.Mutable( GetArena());
}
inline std::string* Minter::release_annual_provisions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.mint.v1beta1.Minter.annual_provisions)
  return _impl_.annual_provisions_.Release();
}
inline void Minter::set_allocated_annual_provisions(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.annual_provisions_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.annual_provisions_.IsDefault()) {
    _impl_.annual_provisions_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.mint.v1beta1.Minter.annual_provisions)
}

// -------------------------------------------------------------------

// Params

// string mint_denom = 1 [json_name = "mintDenom"];
inline void Params::clear_mint_denom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mint_denom_.ClearToEmpty();
}
inline const std::string& Params::mint_denom() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.mint.v1beta1.Params.mint_denom)
  return _internal_mint_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_mint_denom(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mint_denom_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.mint.v1beta1.Params.mint_denom)
}
inline std::string* Params::mutable_mint_denom() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mint_denom();
  // @@protoc_insertion_point(field_mutable:cosmos.mint.v1beta1.Params.mint_denom)
  return _s;
}
inline const std::string& Params::_internal_mint_denom() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mint_denom_.Get();
}
inline void Params::_internal_set_mint_denom(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mint_denom_.Set(value, GetArena());
}
inline std::string* Params::_internal_mutable_mint_denom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.mint_denom_.Mutable( GetArena());
}
inline std::string* Params::release_mint_denom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.mint.v1beta1.Params.mint_denom)
  return _impl_.mint_denom_.Release();
}
inline void Params::set_allocated_mint_denom(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mint_denom_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.mint_denom_.IsDefault()) {
    _impl_.mint_denom_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.mint.v1beta1.Params.mint_denom)
}

// string inflation_rate_change = 2 [json_name = "inflationRateChange", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec", (.amino.dont_omitempty) = true];
inline void Params::clear_inflation_rate_change() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inflation_rate_change_.ClearToEmpty();
}
inline const std::string& Params::inflation_rate_change() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.mint.v1beta1.Params.inflation_rate_change)
  return _internal_inflation_rate_change();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_inflation_rate_change(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inflation_rate_change_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.mint.v1beta1.Params.inflation_rate_change)
}
inline std::string* Params::mutable_inflation_rate_change() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_inflation_rate_change();
  // @@protoc_insertion_point(field_mutable:cosmos.mint.v1beta1.Params.inflation_rate_change)
  return _s;
}
inline const std::string& Params::_internal_inflation_rate_change() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.inflation_rate_change_.Get();
}
inline void Params::_internal_set_inflation_rate_change(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inflation_rate_change_.Set(value, GetArena());
}
inline std::string* Params::_internal_mutable_inflation_rate_change() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.inflation_rate_change_.Mutable( GetArena());
}
inline std::string* Params::release_inflation_rate_change() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.mint.v1beta1.Params.inflation_rate_change)
  return _impl_.inflation_rate_change_.Release();
}
inline void Params::set_allocated_inflation_rate_change(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inflation_rate_change_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.inflation_rate_change_.IsDefault()) {
    _impl_.inflation_rate_change_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.mint.v1beta1.Params.inflation_rate_change)
}

// string inflation_max = 3 [json_name = "inflationMax", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec", (.amino.dont_omitempty) = true];
inline void Params::clear_inflation_max() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inflation_max_.ClearToEmpty();
}
inline const std::string& Params::inflation_max() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.mint.v1beta1.Params.inflation_max)
  return _internal_inflation_max();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_inflation_max(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inflation_max_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.mint.v1beta1.Params.inflation_max)
}
inline std::string* Params::mutable_inflation_max() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_inflation_max();
  // @@protoc_insertion_point(field_mutable:cosmos.mint.v1beta1.Params.inflation_max)
  return _s;
}
inline const std::string& Params::_internal_inflation_max() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.inflation_max_.Get();
}
inline void Params::_internal_set_inflation_max(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inflation_max_.Set(value, GetArena());
}
inline std::string* Params::_internal_mutable_inflation_max() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.inflation_max_.Mutable( GetArena());
}
inline std::string* Params::release_inflation_max() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.mint.v1beta1.Params.inflation_max)
  return _impl_.inflation_max_.Release();
}
inline void Params::set_allocated_inflation_max(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inflation_max_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.inflation_max_.IsDefault()) {
    _impl_.inflation_max_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.mint.v1beta1.Params.inflation_max)
}

// string inflation_min = 4 [json_name = "inflationMin", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec", (.amino.dont_omitempty) = true];
inline void Params::clear_inflation_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inflation_min_.ClearToEmpty();
}
inline const std::string& Params::inflation_min() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.mint.v1beta1.Params.inflation_min)
  return _internal_inflation_min();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_inflation_min(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inflation_min_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.mint.v1beta1.Params.inflation_min)
}
inline std::string* Params::mutable_inflation_min() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_inflation_min();
  // @@protoc_insertion_point(field_mutable:cosmos.mint.v1beta1.Params.inflation_min)
  return _s;
}
inline const std::string& Params::_internal_inflation_min() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.inflation_min_.Get();
}
inline void Params::_internal_set_inflation_min(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inflation_min_.Set(value, GetArena());
}
inline std::string* Params::_internal_mutable_inflation_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.inflation_min_.Mutable( GetArena());
}
inline std::string* Params::release_inflation_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.mint.v1beta1.Params.inflation_min)
  return _impl_.inflation_min_.Release();
}
inline void Params::set_allocated_inflation_min(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inflation_min_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.inflation_min_.IsDefault()) {
    _impl_.inflation_min_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.mint.v1beta1.Params.inflation_min)
}

// string goal_bonded = 5 [json_name = "goalBonded", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec", (.amino.dont_omitempty) = true];
inline void Params::clear_goal_bonded() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.goal_bonded_.ClearToEmpty();
}
inline const std::string& Params::goal_bonded() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.mint.v1beta1.Params.goal_bonded)
  return _internal_goal_bonded();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_goal_bonded(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.goal_bonded_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.mint.v1beta1.Params.goal_bonded)
}
inline std::string* Params::mutable_goal_bonded() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_goal_bonded();
  // @@protoc_insertion_point(field_mutable:cosmos.mint.v1beta1.Params.goal_bonded)
  return _s;
}
inline const std::string& Params::_internal_goal_bonded() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.goal_bonded_.Get();
}
inline void Params::_internal_set_goal_bonded(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.goal_bonded_.Set(value, GetArena());
}
inline std::string* Params::_internal_mutable_goal_bonded() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.goal_bonded_.Mutable( GetArena());
}
inline std::string* Params::release_goal_bonded() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.mint.v1beta1.Params.goal_bonded)
  return _impl_.goal_bonded_.Release();
}
inline void Params::set_allocated_goal_bonded(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.goal_bonded_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.goal_bonded_.IsDefault()) {
    _impl_.goal_bonded_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.mint.v1beta1.Params.goal_bonded)
}

// uint64 blocks_per_year = 6 [json_name = "blocksPerYear"];
inline void Params::clear_blocks_per_year() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.blocks_per_year_ = ::uint64_t{0u};
}
inline ::uint64_t Params::blocks_per_year() const {
  // @@protoc_insertion_point(field_get:cosmos.mint.v1beta1.Params.blocks_per_year)
  return _internal_blocks_per_year();
}
inline void Params::set_blocks_per_year(::uint64_t value) {
  _internal_set_blocks_per_year(value);
  // @@protoc_insertion_point(field_set:cosmos.mint.v1beta1.Params.blocks_per_year)
}
inline ::uint64_t Params::_internal_blocks_per_year() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.blocks_per_year_;
}
inline void Params::_internal_set_blocks_per_year(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.blocks_per_year_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace mint
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2fmint_2fv1beta1_2fmint_2eproto_2epb_2eh
