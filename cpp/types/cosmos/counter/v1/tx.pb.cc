// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/counter/v1/tx.proto
// Protobuf C++ Version: 5.29.4

#include "cosmos/counter/v1/tx.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace cosmos {
namespace counter {
namespace v1 {

inline constexpr MsgIncreaseCounter::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : signer_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        count_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MsgIncreaseCounter::MsgIncreaseCounter(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MsgIncreaseCounterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgIncreaseCounterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgIncreaseCounterDefaultTypeInternal() {}
  union {
    MsgIncreaseCounter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgIncreaseCounterDefaultTypeInternal _MsgIncreaseCounter_default_instance_;

inline constexpr MsgIncreaseCountResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : new_count_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MsgIncreaseCountResponse::MsgIncreaseCountResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MsgIncreaseCountResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgIncreaseCountResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgIncreaseCountResponseDefaultTypeInternal() {}
  union {
    MsgIncreaseCountResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgIncreaseCountResponseDefaultTypeInternal _MsgIncreaseCountResponse_default_instance_;
}  // namespace v1
}  // namespace counter
}  // namespace cosmos
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fcounter_2fv1_2ftx_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fcounter_2fv1_2ftx_2eproto = nullptr;
const ::uint32_t
    TableStruct_cosmos_2fcounter_2fv1_2ftx_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cosmos::counter::v1::MsgIncreaseCounter, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::counter::v1::MsgIncreaseCounter, _impl_.signer_),
        PROTOBUF_FIELD_OFFSET(::cosmos::counter::v1::MsgIncreaseCounter, _impl_.count_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cosmos::counter::v1::MsgIncreaseCountResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::counter::v1::MsgIncreaseCountResponse, _impl_.new_count_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::cosmos::counter::v1::MsgIncreaseCounter)},
        {10, -1, -1, sizeof(::cosmos::counter::v1::MsgIncreaseCountResponse)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::counter::v1::_MsgIncreaseCounter_default_instance_._instance,
    &::cosmos::counter::v1::_MsgIncreaseCountResponse_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fcounter_2fv1_2ftx_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\032cosmos/counter/v1/tx.proto\022\021cosmos.cou"
    "nter.v1\032\031cosmos_proto/cosmos.proto\032\027cosm"
    "os/msg/v1/msg.proto\032\021amino/amino.proto\"\211"
    "\001\n\022MsgIncreaseCounter\0220\n\006signer\030\001 \001(\tB\030\322"
    "\264-\024cosmos.AddressStringR\006signer\022\024\n\005count"
    "\030\002 \001(\003R\005count:+\202\347\260*\006signer\212\347\260*\033cosmos-sd"
    "k/increase_counter\"7\n\030MsgIncreaseCountRe"
    "sponse\022\033\n\tnew_count\030\001 \001(\003R\010newCount2q\n\003M"
    "sg\022c\n\rIncreaseCount\022%.cosmos.counter.v1."
    "MsgIncreaseCounter\032+.cosmos.counter.v1.M"
    "sgIncreaseCountResponse\032\005\200\347\260*\001B7Z5github"
    ".com/cosmos/cosmos-sdk/testutil/x/counte"
    "r/typesb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fcounter_2fv1_2ftx_2eproto_deps[3] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_cosmos_2fmsg_2fv1_2fmsg_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fcounter_2fv1_2ftx_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_cosmos_2fcounter_2fv1_2ftx_2eproto = {
    false,
    false,
    495,
    descriptor_table_protodef_cosmos_2fcounter_2fv1_2ftx_2eproto,
    "cosmos/counter/v1/tx.proto",
    &descriptor_table_cosmos_2fcounter_2fv1_2ftx_2eproto_once,
    descriptor_table_cosmos_2fcounter_2fv1_2ftx_2eproto_deps,
    3,
    2,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fcounter_2fv1_2ftx_2eproto::offsets,
    file_level_enum_descriptors_cosmos_2fcounter_2fv1_2ftx_2eproto,
    file_level_service_descriptors_cosmos_2fcounter_2fv1_2ftx_2eproto,
};
namespace cosmos {
namespace counter {
namespace v1 {
// ===================================================================

class MsgIncreaseCounter::_Internal {
 public:
};

MsgIncreaseCounter::MsgIncreaseCounter(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.counter.v1.MsgIncreaseCounter)
}
inline PROTOBUF_NDEBUG_INLINE MsgIncreaseCounter::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::counter::v1::MsgIncreaseCounter& from_msg)
      : signer_(arena, from.signer_),
        _cached_size_{0} {}

MsgIncreaseCounter::MsgIncreaseCounter(
    ::google::protobuf::Arena* arena,
    const MsgIncreaseCounter& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MsgIncreaseCounter* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.count_ = from._impl_.count_;

  // @@protoc_insertion_point(copy_constructor:cosmos.counter.v1.MsgIncreaseCounter)
}
inline PROTOBUF_NDEBUG_INLINE MsgIncreaseCounter::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : signer_(arena),
        _cached_size_{0} {}

inline void MsgIncreaseCounter::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.count_ = {};
}
MsgIncreaseCounter::~MsgIncreaseCounter() {
  // @@protoc_insertion_point(destructor:cosmos.counter.v1.MsgIncreaseCounter)
  SharedDtor(*this);
}
inline void MsgIncreaseCounter::SharedDtor(MessageLite& self) {
  MsgIncreaseCounter& this_ = static_cast<MsgIncreaseCounter&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.signer_.Destroy();
  this_._impl_.~Impl_();
}

inline void* MsgIncreaseCounter::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MsgIncreaseCounter(arena);
}
constexpr auto MsgIncreaseCounter::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MsgIncreaseCounter),
                                            alignof(MsgIncreaseCounter));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MsgIncreaseCounter::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MsgIncreaseCounter_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MsgIncreaseCounter::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MsgIncreaseCounter>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MsgIncreaseCounter::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MsgIncreaseCounter>(), &MsgIncreaseCounter::ByteSizeLong,
            &MsgIncreaseCounter::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MsgIncreaseCounter, _impl_._cached_size_),
        false,
    },
    &MsgIncreaseCounter::kDescriptorMethods,
    &descriptor_table_cosmos_2fcounter_2fv1_2ftx_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MsgIncreaseCounter::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 51, 2> MsgIncreaseCounter::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::counter::v1::MsgIncreaseCounter>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int64 count = 2 [json_name = "count"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MsgIncreaseCounter, _impl_.count_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(MsgIncreaseCounter, _impl_.count_)}},
    // string signer = 1 [json_name = "signer", (.cosmos_proto.scalar) = "cosmos.AddressString"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MsgIncreaseCounter, _impl_.signer_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string signer = 1 [json_name = "signer", (.cosmos_proto.scalar) = "cosmos.AddressString"];
    {PROTOBUF_FIELD_OFFSET(MsgIncreaseCounter, _impl_.signer_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 count = 2 [json_name = "count"];
    {PROTOBUF_FIELD_OFFSET(MsgIncreaseCounter, _impl_.count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
    "\44\6\0\0\0\0\0\0"
    "cosmos.counter.v1.MsgIncreaseCounter"
    "signer"
  }},
};

PROTOBUF_NOINLINE void MsgIncreaseCounter::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.counter.v1.MsgIncreaseCounter)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signer_.ClearToEmpty();
  _impl_.count_ = ::int64_t{0};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MsgIncreaseCounter::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MsgIncreaseCounter& this_ = static_cast<const MsgIncreaseCounter&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MsgIncreaseCounter::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MsgIncreaseCounter& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.counter.v1.MsgIncreaseCounter)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string signer = 1 [json_name = "signer", (.cosmos_proto.scalar) = "cosmos.AddressString"];
          if (!this_._internal_signer().empty()) {
            const std::string& _s = this_._internal_signer();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.counter.v1.MsgIncreaseCounter.signer");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // int64 count = 2 [json_name = "count"];
          if (this_._internal_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<2>(
                    stream, this_._internal_count(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.counter.v1.MsgIncreaseCounter)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MsgIncreaseCounter::ByteSizeLong(const MessageLite& base) {
          const MsgIncreaseCounter& this_ = static_cast<const MsgIncreaseCounter&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MsgIncreaseCounter::ByteSizeLong() const {
          const MsgIncreaseCounter& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.counter.v1.MsgIncreaseCounter)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string signer = 1 [json_name = "signer", (.cosmos_proto.scalar) = "cosmos.AddressString"];
            if (!this_._internal_signer().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_signer());
            }
            // int64 count = 2 [json_name = "count"];
            if (this_._internal_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_count());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MsgIncreaseCounter::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MsgIncreaseCounter*>(&to_msg);
  auto& from = static_cast<const MsgIncreaseCounter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.counter.v1.MsgIncreaseCounter)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signer().empty()) {
    _this->_internal_set_signer(from._internal_signer());
  }
  if (from._internal_count() != 0) {
    _this->_impl_.count_ = from._impl_.count_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MsgIncreaseCounter::CopyFrom(const MsgIncreaseCounter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.counter.v1.MsgIncreaseCounter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MsgIncreaseCounter::InternalSwap(MsgIncreaseCounter* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signer_, &other->_impl_.signer_, arena);
        swap(_impl_.count_, other->_impl_.count_);
}

::google::protobuf::Metadata MsgIncreaseCounter::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MsgIncreaseCountResponse::_Internal {
 public:
};

MsgIncreaseCountResponse::MsgIncreaseCountResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.counter.v1.MsgIncreaseCountResponse)
}
MsgIncreaseCountResponse::MsgIncreaseCountResponse(
    ::google::protobuf::Arena* arena, const MsgIncreaseCountResponse& from)
    : MsgIncreaseCountResponse(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE MsgIncreaseCountResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MsgIncreaseCountResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.new_count_ = {};
}
MsgIncreaseCountResponse::~MsgIncreaseCountResponse() {
  // @@protoc_insertion_point(destructor:cosmos.counter.v1.MsgIncreaseCountResponse)
  SharedDtor(*this);
}
inline void MsgIncreaseCountResponse::SharedDtor(MessageLite& self) {
  MsgIncreaseCountResponse& this_ = static_cast<MsgIncreaseCountResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* MsgIncreaseCountResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MsgIncreaseCountResponse(arena);
}
constexpr auto MsgIncreaseCountResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(MsgIncreaseCountResponse),
                                            alignof(MsgIncreaseCountResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MsgIncreaseCountResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MsgIncreaseCountResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MsgIncreaseCountResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MsgIncreaseCountResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MsgIncreaseCountResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MsgIncreaseCountResponse>(), &MsgIncreaseCountResponse::ByteSizeLong,
            &MsgIncreaseCountResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MsgIncreaseCountResponse, _impl_._cached_size_),
        false,
    },
    &MsgIncreaseCountResponse::kDescriptorMethods,
    &descriptor_table_cosmos_2fcounter_2fv1_2ftx_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MsgIncreaseCountResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> MsgIncreaseCountResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::counter::v1::MsgIncreaseCountResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int64 new_count = 1 [json_name = "newCount"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MsgIncreaseCountResponse, _impl_.new_count_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MsgIncreaseCountResponse, _impl_.new_count_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 new_count = 1 [json_name = "newCount"];
    {PROTOBUF_FIELD_OFFSET(MsgIncreaseCountResponse, _impl_.new_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void MsgIncreaseCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.counter.v1.MsgIncreaseCountResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.new_count_ = ::int64_t{0};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MsgIncreaseCountResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MsgIncreaseCountResponse& this_ = static_cast<const MsgIncreaseCountResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MsgIncreaseCountResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MsgIncreaseCountResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.counter.v1.MsgIncreaseCountResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int64 new_count = 1 [json_name = "newCount"];
          if (this_._internal_new_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<1>(
                    stream, this_._internal_new_count(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.counter.v1.MsgIncreaseCountResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MsgIncreaseCountResponse::ByteSizeLong(const MessageLite& base) {
          const MsgIncreaseCountResponse& this_ = static_cast<const MsgIncreaseCountResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MsgIncreaseCountResponse::ByteSizeLong() const {
          const MsgIncreaseCountResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.counter.v1.MsgIncreaseCountResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // int64 new_count = 1 [json_name = "newCount"];
            if (this_._internal_new_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_new_count());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MsgIncreaseCountResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MsgIncreaseCountResponse*>(&to_msg);
  auto& from = static_cast<const MsgIncreaseCountResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.counter.v1.MsgIncreaseCountResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_new_count() != 0) {
    _this->_impl_.new_count_ = from._impl_.new_count_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MsgIncreaseCountResponse::CopyFrom(const MsgIncreaseCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.counter.v1.MsgIncreaseCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MsgIncreaseCountResponse::InternalSwap(MsgIncreaseCountResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.new_count_, other->_impl_.new_count_);
}

::google::protobuf::Metadata MsgIncreaseCountResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace counter
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_cosmos_2fcounter_2fv1_2ftx_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
