// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/gov/v1beta1/gov.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2fgov_2fv1beta1_2fgov_2eproto_2epb_2eh
#define cosmos_2fgov_2fv1beta1_2fgov_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "cosmos/base/v1beta1/coin.pb.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "google/protobuf/any.pb.h"
#include "google/protobuf/duration.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fgov_2fv1beta1_2fgov_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fgov_2fv1beta1_2fgov_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2fgov_2fv1beta1_2fgov_2eproto;
namespace cosmos {
namespace gov {
namespace v1beta1 {
class Deposit;
struct DepositDefaultTypeInternal;
extern DepositDefaultTypeInternal _Deposit_default_instance_;
class DepositParams;
struct DepositParamsDefaultTypeInternal;
extern DepositParamsDefaultTypeInternal _DepositParams_default_instance_;
class Proposal;
struct ProposalDefaultTypeInternal;
extern ProposalDefaultTypeInternal _Proposal_default_instance_;
class TallyParams;
struct TallyParamsDefaultTypeInternal;
extern TallyParamsDefaultTypeInternal _TallyParams_default_instance_;
class TallyResult;
struct TallyResultDefaultTypeInternal;
extern TallyResultDefaultTypeInternal _TallyResult_default_instance_;
class TextProposal;
struct TextProposalDefaultTypeInternal;
extern TextProposalDefaultTypeInternal _TextProposal_default_instance_;
class Vote;
struct VoteDefaultTypeInternal;
extern VoteDefaultTypeInternal _Vote_default_instance_;
class VotingParams;
struct VotingParamsDefaultTypeInternal;
extern VotingParamsDefaultTypeInternal _VotingParams_default_instance_;
class WeightedVoteOption;
struct WeightedVoteOptionDefaultTypeInternal;
extern WeightedVoteOptionDefaultTypeInternal _WeightedVoteOption_default_instance_;
}  // namespace v1beta1
}  // namespace gov
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace gov {
namespace v1beta1 {
enum VoteOption : int {
  VOTE_OPTION_UNSPECIFIED = 0,
  VOTE_OPTION_YES = 1,
  VOTE_OPTION_ABSTAIN = 2,
  VOTE_OPTION_NO = 3,
  VOTE_OPTION_NO_WITH_VETO = 4,
  VoteOption_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  VoteOption_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool VoteOption_IsValid(int value);
extern const uint32_t VoteOption_internal_data_[];
constexpr VoteOption VoteOption_MIN = static_cast<VoteOption>(0);
constexpr VoteOption VoteOption_MAX = static_cast<VoteOption>(4);
constexpr int VoteOption_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
VoteOption_descriptor();
template <typename T>
const std::string& VoteOption_Name(T value) {
  static_assert(std::is_same<T, VoteOption>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to VoteOption_Name().");
  return VoteOption_Name(static_cast<VoteOption>(value));
}
template <>
inline const std::string& VoteOption_Name(VoteOption value) {
  return ::google::protobuf::internal::NameOfDenseEnum<VoteOption_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool VoteOption_Parse(absl::string_view name, VoteOption* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VoteOption>(
      VoteOption_descriptor(), name, value);
}
enum ProposalStatus : int {
  PROPOSAL_STATUS_UNSPECIFIED = 0,
  PROPOSAL_STATUS_DEPOSIT_PERIOD = 1,
  PROPOSAL_STATUS_VOTING_PERIOD = 2,
  PROPOSAL_STATUS_PASSED = 3,
  PROPOSAL_STATUS_REJECTED = 4,
  PROPOSAL_STATUS_FAILED = 5,
  ProposalStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ProposalStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ProposalStatus_IsValid(int value);
extern const uint32_t ProposalStatus_internal_data_[];
constexpr ProposalStatus ProposalStatus_MIN = static_cast<ProposalStatus>(0);
constexpr ProposalStatus ProposalStatus_MAX = static_cast<ProposalStatus>(5);
constexpr int ProposalStatus_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
ProposalStatus_descriptor();
template <typename T>
const std::string& ProposalStatus_Name(T value) {
  static_assert(std::is_same<T, ProposalStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ProposalStatus_Name().");
  return ProposalStatus_Name(static_cast<ProposalStatus>(value));
}
template <>
inline const std::string& ProposalStatus_Name(ProposalStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ProposalStatus_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool ProposalStatus_Parse(absl::string_view name, ProposalStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProposalStatus>(
      ProposalStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class WeightedVoteOption final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.gov.v1beta1.WeightedVoteOption) */ {
 public:
  inline WeightedVoteOption() : WeightedVoteOption(nullptr) {}
  ~WeightedVoteOption() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WeightedVoteOption* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WeightedVoteOption));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WeightedVoteOption(
      ::google::protobuf::internal::ConstantInitialized);

  inline WeightedVoteOption(const WeightedVoteOption& from) : WeightedVoteOption(nullptr, from) {}
  inline WeightedVoteOption(WeightedVoteOption&& from) noexcept
      : WeightedVoteOption(nullptr, std::move(from)) {}
  inline WeightedVoteOption& operator=(const WeightedVoteOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline WeightedVoteOption& operator=(WeightedVoteOption&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WeightedVoteOption& default_instance() {
    return *internal_default_instance();
  }
  static inline const WeightedVoteOption* internal_default_instance() {
    return reinterpret_cast<const WeightedVoteOption*>(
        &_WeightedVoteOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(WeightedVoteOption& a, WeightedVoteOption& b) { a.Swap(&b); }
  inline void Swap(WeightedVoteOption* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WeightedVoteOption* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WeightedVoteOption* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WeightedVoteOption>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WeightedVoteOption& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WeightedVoteOption& from) { WeightedVoteOption::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WeightedVoteOption* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.gov.v1beta1.WeightedVoteOption"; }

 protected:
  explicit WeightedVoteOption(::google::protobuf::Arena* arena);
  WeightedVoteOption(::google::protobuf::Arena* arena, const WeightedVoteOption& from);
  WeightedVoteOption(::google::protobuf::Arena* arena, WeightedVoteOption&& from) noexcept
      : WeightedVoteOption(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWeightFieldNumber = 2,
    kOptionFieldNumber = 1,
  };
  // string weight = 2 [json_name = "weight", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec", (.amino.dont_omitempty) = true];
  void clear_weight() ;
  const std::string& weight() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_weight(Arg_&& arg, Args_... args);
  std::string* mutable_weight();
  PROTOBUF_NODISCARD std::string* release_weight();
  void set_allocated_weight(std::string* value);

  private:
  const std::string& _internal_weight() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_weight(
      const std::string& value);
  std::string* _internal_mutable_weight();

  public:
  // .cosmos.gov.v1beta1.VoteOption option = 1 [json_name = "option"];
  void clear_option() ;
  ::cosmos::gov::v1beta1::VoteOption option() const;
  void set_option(::cosmos::gov::v1beta1::VoteOption value);

  private:
  ::cosmos::gov::v1beta1::VoteOption _internal_option() const;
  void _internal_set_option(::cosmos::gov::v1beta1::VoteOption value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1beta1.WeightedVoteOption)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WeightedVoteOption& from_msg);
    ::google::protobuf::internal::ArenaStringPtr weight_;
    int option_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1beta1_2fgov_2eproto;
};
// -------------------------------------------------------------------

class TextProposal final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.gov.v1beta1.TextProposal) */ {
 public:
  inline TextProposal() : TextProposal(nullptr) {}
  ~TextProposal() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TextProposal* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TextProposal));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TextProposal(
      ::google::protobuf::internal::ConstantInitialized);

  inline TextProposal(const TextProposal& from) : TextProposal(nullptr, from) {}
  inline TextProposal(TextProposal&& from) noexcept
      : TextProposal(nullptr, std::move(from)) {}
  inline TextProposal& operator=(const TextProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextProposal& operator=(TextProposal&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextProposal* internal_default_instance() {
    return reinterpret_cast<const TextProposal*>(
        &_TextProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(TextProposal& a, TextProposal& b) { a.Swap(&b); }
  inline void Swap(TextProposal* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextProposal* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TextProposal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TextProposal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TextProposal& from) { TextProposal::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TextProposal* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.gov.v1beta1.TextProposal"; }

 protected:
  explicit TextProposal(::google::protobuf::Arena* arena);
  TextProposal(::google::protobuf::Arena* arena, const TextProposal& from);
  TextProposal(::google::protobuf::Arena* arena, TextProposal&& from) noexcept
      : TextProposal(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // string title = 1 [json_name = "title"];
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 2 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1beta1.TextProposal)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      56, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TextProposal& from_msg);
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1beta1_2fgov_2eproto;
};
// -------------------------------------------------------------------

class TallyResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.gov.v1beta1.TallyResult) */ {
 public:
  inline TallyResult() : TallyResult(nullptr) {}
  ~TallyResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TallyResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TallyResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TallyResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline TallyResult(const TallyResult& from) : TallyResult(nullptr, from) {}
  inline TallyResult(TallyResult&& from) noexcept
      : TallyResult(nullptr, std::move(from)) {}
  inline TallyResult& operator=(const TallyResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline TallyResult& operator=(TallyResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TallyResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const TallyResult* internal_default_instance() {
    return reinterpret_cast<const TallyResult*>(
        &_TallyResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(TallyResult& a, TallyResult& b) { a.Swap(&b); }
  inline void Swap(TallyResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TallyResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TallyResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TallyResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TallyResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TallyResult& from) { TallyResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TallyResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.gov.v1beta1.TallyResult"; }

 protected:
  explicit TallyResult(::google::protobuf::Arena* arena);
  TallyResult(::google::protobuf::Arena* arena, const TallyResult& from);
  TallyResult(::google::protobuf::Arena* arena, TallyResult&& from) noexcept
      : TallyResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kYesFieldNumber = 1,
    kAbstainFieldNumber = 2,
    kNoFieldNumber = 3,
    kNoWithVetoFieldNumber = 4,
  };
  // string yes = 1 [json_name = "yes", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
  void clear_yes() ;
  const std::string& yes() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_yes(Arg_&& arg, Args_... args);
  std::string* mutable_yes();
  PROTOBUF_NODISCARD std::string* release_yes();
  void set_allocated_yes(std::string* value);

  private:
  const std::string& _internal_yes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_yes(
      const std::string& value);
  std::string* _internal_mutable_yes();

  public:
  // string abstain = 2 [json_name = "abstain", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
  void clear_abstain() ;
  const std::string& abstain() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_abstain(Arg_&& arg, Args_... args);
  std::string* mutable_abstain();
  PROTOBUF_NODISCARD std::string* release_abstain();
  void set_allocated_abstain(std::string* value);

  private:
  const std::string& _internal_abstain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_abstain(
      const std::string& value);
  std::string* _internal_mutable_abstain();

  public:
  // string no = 3 [json_name = "no", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
  void clear_no() ;
  const std::string& no() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_no(Arg_&& arg, Args_... args);
  std::string* mutable_no();
  PROTOBUF_NODISCARD std::string* release_no();
  void set_allocated_no(std::string* value);

  private:
  const std::string& _internal_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_no(
      const std::string& value);
  std::string* _internal_mutable_no();

  public:
  // string no_with_veto = 4 [json_name = "noWithVeto", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
  void clear_no_with_veto() ;
  const std::string& no_with_veto() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_no_with_veto(Arg_&& arg, Args_... args);
  std::string* mutable_no_with_veto();
  PROTOBUF_NODISCARD std::string* release_no_with_veto();
  void set_allocated_no_with_veto(std::string* value);

  private:
  const std::string& _internal_no_with_veto() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_no_with_veto(
      const std::string& value);
  std::string* _internal_mutable_no_with_veto();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1beta1.TallyResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      63, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TallyResult& from_msg);
    ::google::protobuf::internal::ArenaStringPtr yes_;
    ::google::protobuf::internal::ArenaStringPtr abstain_;
    ::google::protobuf::internal::ArenaStringPtr no_;
    ::google::protobuf::internal::ArenaStringPtr no_with_veto_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1beta1_2fgov_2eproto;
};
// -------------------------------------------------------------------

class TallyParams final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.gov.v1beta1.TallyParams) */ {
 public:
  inline TallyParams() : TallyParams(nullptr) {}
  ~TallyParams() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TallyParams* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TallyParams));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TallyParams(
      ::google::protobuf::internal::ConstantInitialized);

  inline TallyParams(const TallyParams& from) : TallyParams(nullptr, from) {}
  inline TallyParams(TallyParams&& from) noexcept
      : TallyParams(nullptr, std::move(from)) {}
  inline TallyParams& operator=(const TallyParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline TallyParams& operator=(TallyParams&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TallyParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const TallyParams* internal_default_instance() {
    return reinterpret_cast<const TallyParams*>(
        &_TallyParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(TallyParams& a, TallyParams& b) { a.Swap(&b); }
  inline void Swap(TallyParams* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TallyParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TallyParams* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TallyParams>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TallyParams& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TallyParams& from) { TallyParams::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TallyParams* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.gov.v1beta1.TallyParams"; }

 protected:
  explicit TallyParams(::google::protobuf::Arena* arena);
  TallyParams(::google::protobuf::Arena* arena, const TallyParams& from);
  TallyParams(::google::protobuf::Arena* arena, TallyParams&& from) noexcept
      : TallyParams(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kQuorumFieldNumber = 1,
    kThresholdFieldNumber = 2,
    kVetoThresholdFieldNumber = 3,
  };
  // bytes quorum = 1 [json_name = "quorum", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.jsontag) = "quorum,omitempty", (.cosmos_proto.scalar) = "cosmos.Dec"];
  void clear_quorum() ;
  const std::string& quorum() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_quorum(Arg_&& arg, Args_... args);
  std::string* mutable_quorum();
  PROTOBUF_NODISCARD std::string* release_quorum();
  void set_allocated_quorum(std::string* value);

  private:
  const std::string& _internal_quorum() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quorum(
      const std::string& value);
  std::string* _internal_mutable_quorum();

  public:
  // bytes threshold = 2 [json_name = "threshold", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.jsontag) = "threshold,omitempty", (.cosmos_proto.scalar) = "cosmos.Dec"];
  void clear_threshold() ;
  const std::string& threshold() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_threshold(Arg_&& arg, Args_... args);
  std::string* mutable_threshold();
  PROTOBUF_NODISCARD std::string* release_threshold();
  void set_allocated_threshold(std::string* value);

  private:
  const std::string& _internal_threshold() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_threshold(
      const std::string& value);
  std::string* _internal_mutable_threshold();

  public:
  // bytes veto_threshold = 3 [json_name = "vetoThreshold", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.jsontag) = "veto_threshold,omitempty", (.cosmos_proto.scalar) = "cosmos.Dec"];
  void clear_veto_threshold() ;
  const std::string& veto_threshold() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_veto_threshold(Arg_&& arg, Args_... args);
  std::string* mutable_veto_threshold();
  PROTOBUF_NODISCARD std::string* release_veto_threshold();
  void set_allocated_veto_threshold(std::string* value);

  private:
  const std::string& _internal_veto_threshold() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_veto_threshold(
      const std::string& value);
  std::string* _internal_mutable_veto_threshold();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1beta1.TallyParams)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TallyParams& from_msg);
    ::google::protobuf::internal::ArenaStringPtr quorum_;
    ::google::protobuf::internal::ArenaStringPtr threshold_;
    ::google::protobuf::internal::ArenaStringPtr veto_threshold_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1beta1_2fgov_2eproto;
};
// -------------------------------------------------------------------

class VotingParams final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.gov.v1beta1.VotingParams) */ {
 public:
  inline VotingParams() : VotingParams(nullptr) {}
  ~VotingParams() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(VotingParams* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(VotingParams));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VotingParams(
      ::google::protobuf::internal::ConstantInitialized);

  inline VotingParams(const VotingParams& from) : VotingParams(nullptr, from) {}
  inline VotingParams(VotingParams&& from) noexcept
      : VotingParams(nullptr, std::move(from)) {}
  inline VotingParams& operator=(const VotingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline VotingParams& operator=(VotingParams&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VotingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const VotingParams* internal_default_instance() {
    return reinterpret_cast<const VotingParams*>(
        &_VotingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(VotingParams& a, VotingParams& b) { a.Swap(&b); }
  inline void Swap(VotingParams* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VotingParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VotingParams* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<VotingParams>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VotingParams& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VotingParams& from) { VotingParams::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(VotingParams* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.gov.v1beta1.VotingParams"; }

 protected:
  explicit VotingParams(::google::protobuf::Arena* arena);
  VotingParams(::google::protobuf::Arena* arena, const VotingParams& from);
  VotingParams(::google::protobuf::Arena* arena, VotingParams&& from) noexcept
      : VotingParams(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVotingPeriodFieldNumber = 1,
  };
  // .google.protobuf.Duration voting_period = 1 [json_name = "votingPeriod", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "voting_period,omitempty", (.gogoproto.stdduration) = true];
  bool has_voting_period() const;
  void clear_voting_period() ;
  const ::google::protobuf::Duration& voting_period() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_voting_period();
  ::google::protobuf::Duration* mutable_voting_period();
  void set_allocated_voting_period(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_voting_period(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_voting_period();

  private:
  const ::google::protobuf::Duration& _internal_voting_period() const;
  ::google::protobuf::Duration* _internal_mutable_voting_period();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1beta1.VotingParams)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VotingParams& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Duration* voting_period_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1beta1_2fgov_2eproto;
};
// -------------------------------------------------------------------

class Vote final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.gov.v1beta1.Vote) */ {
 public:
  inline Vote() : Vote(nullptr) {}
  ~Vote() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Vote* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Vote));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Vote(
      ::google::protobuf::internal::ConstantInitialized);

  inline Vote(const Vote& from) : Vote(nullptr, from) {}
  inline Vote(Vote&& from) noexcept
      : Vote(nullptr, std::move(from)) {}
  inline Vote& operator=(const Vote& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vote& operator=(Vote&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vote& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vote* internal_default_instance() {
    return reinterpret_cast<const Vote*>(
        &_Vote_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Vote& a, Vote& b) { a.Swap(&b); }
  inline void Swap(Vote* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vote* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vote* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Vote>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Vote& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Vote& from) { Vote::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Vote* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.gov.v1beta1.Vote"; }

 protected:
  explicit Vote(::google::protobuf::Arena* arena);
  Vote(::google::protobuf::Arena* arena, const Vote& from);
  Vote(::google::protobuf::Arena* arena, Vote&& from) noexcept
      : Vote(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOptionsFieldNumber = 4,
    kVoterFieldNumber = 2,
    kProposalIdFieldNumber = 1,
    kOptionFieldNumber = 3,
  };
  // repeated .cosmos.gov.v1beta1.WeightedVoteOption options = 4 [json_name = "options", (.gogoproto.nullable) = false, (.cosmos_proto.field_added_in) = "cosmos-sdk 0.43", (.amino.dont_omitempty) = true];
  int options_size() const;
  private:
  int _internal_options_size() const;

  public:
  void clear_options() ;
  ::cosmos::gov::v1beta1::WeightedVoteOption* mutable_options(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::gov::v1beta1::WeightedVoteOption>* mutable_options();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::gov::v1beta1::WeightedVoteOption>& _internal_options() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::gov::v1beta1::WeightedVoteOption>* _internal_mutable_options();
  public:
  const ::cosmos::gov::v1beta1::WeightedVoteOption& options(int index) const;
  ::cosmos::gov::v1beta1::WeightedVoteOption* add_options();
  const ::google::protobuf::RepeatedPtrField<::cosmos::gov::v1beta1::WeightedVoteOption>& options() const;
  // string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_voter() ;
  const std::string& voter() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_voter(Arg_&& arg, Args_... args);
  std::string* mutable_voter();
  PROTOBUF_NODISCARD std::string* release_voter();
  void set_allocated_voter(std::string* value);

  private:
  const std::string& _internal_voter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_voter(
      const std::string& value);
  std::string* _internal_mutable_voter();

  public:
  // uint64 proposal_id = 1 [json_name = "proposalId", (.gogoproto.jsontag) = "id", (.amino.field_name) = "id", (.amino.dont_omitempty) = true];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // .cosmos.gov.v1beta1.VoteOption option = 3 [json_name = "option", deprecated = true];
  [[deprecated]]  void clear_option() ;
  [[deprecated]] ::cosmos::gov::v1beta1::VoteOption option() const;
  [[deprecated]] void set_option(::cosmos::gov::v1beta1::VoteOption value);

  private:
  ::cosmos::gov::v1beta1::VoteOption _internal_option() const;
  void _internal_set_option(::cosmos::gov::v1beta1::VoteOption value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1beta1.Vote)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      37, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Vote& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::gov::v1beta1::WeightedVoteOption > options_;
    ::google::protobuf::internal::ArenaStringPtr voter_;
    ::uint64_t proposal_id_;
    int option_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1beta1_2fgov_2eproto;
};
// -------------------------------------------------------------------

class Proposal final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.gov.v1beta1.Proposal) */ {
 public:
  inline Proposal() : Proposal(nullptr) {}
  ~Proposal() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Proposal* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Proposal));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Proposal(
      ::google::protobuf::internal::ConstantInitialized);

  inline Proposal(const Proposal& from) : Proposal(nullptr, from) {}
  inline Proposal(Proposal&& from) noexcept
      : Proposal(nullptr, std::move(from)) {}
  inline Proposal& operator=(const Proposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proposal& operator=(Proposal&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Proposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const Proposal* internal_default_instance() {
    return reinterpret_cast<const Proposal*>(
        &_Proposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Proposal& a, Proposal& b) { a.Swap(&b); }
  inline void Swap(Proposal* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Proposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Proposal* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Proposal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Proposal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Proposal& from) { Proposal::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Proposal* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.gov.v1beta1.Proposal"; }

 protected:
  explicit Proposal(::google::protobuf::Arena* arena);
  Proposal(::google::protobuf::Arena* arena, const Proposal& from);
  Proposal(::google::protobuf::Arena* arena, Proposal&& from) noexcept
      : Proposal(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTotalDepositFieldNumber = 7,
    kContentFieldNumber = 2,
    kFinalTallyResultFieldNumber = 4,
    kSubmitTimeFieldNumber = 5,
    kDepositEndTimeFieldNumber = 6,
    kVotingStartTimeFieldNumber = 8,
    kVotingEndTimeFieldNumber = 9,
    kProposalIdFieldNumber = 1,
    kStatusFieldNumber = 3,
  };
  // repeated .cosmos.base.v1beta1.Coin total_deposit = 7 [json_name = "totalDeposit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  int total_deposit_size() const;
  private:
  int _internal_total_deposit_size() const;

  public:
  void clear_total_deposit() ;
  ::cosmos::base::v1beta1::Coin* mutable_total_deposit(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* mutable_total_deposit();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_total_deposit() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_total_deposit();
  public:
  const ::cosmos::base::v1beta1::Coin& total_deposit(int index) const;
  ::cosmos::base::v1beta1::Coin* add_total_deposit();
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& total_deposit() const;
  // .google.protobuf.Any content = 2 [json_name = "content", (.cosmos_proto.accepts_interface) = "cosmos.gov.v1beta1.Content"];
  bool has_content() const;
  void clear_content() ;
  const ::google::protobuf::Any& content() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_content();
  ::google::protobuf::Any* mutable_content();
  void set_allocated_content(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_content(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_content();

  private:
  const ::google::protobuf::Any& _internal_content() const;
  ::google::protobuf::Any* _internal_mutable_content();

  public:
  // .cosmos.gov.v1beta1.TallyResult final_tally_result = 4 [json_name = "finalTallyResult", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_final_tally_result() const;
  void clear_final_tally_result() ;
  const ::cosmos::gov::v1beta1::TallyResult& final_tally_result() const;
  PROTOBUF_NODISCARD ::cosmos::gov::v1beta1::TallyResult* release_final_tally_result();
  ::cosmos::gov::v1beta1::TallyResult* mutable_final_tally_result();
  void set_allocated_final_tally_result(::cosmos::gov::v1beta1::TallyResult* value);
  void unsafe_arena_set_allocated_final_tally_result(::cosmos::gov::v1beta1::TallyResult* value);
  ::cosmos::gov::v1beta1::TallyResult* unsafe_arena_release_final_tally_result();

  private:
  const ::cosmos::gov::v1beta1::TallyResult& _internal_final_tally_result() const;
  ::cosmos::gov::v1beta1::TallyResult* _internal_mutable_final_tally_result();

  public:
  // .google.protobuf.Timestamp submit_time = 5 [json_name = "submitTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  bool has_submit_time() const;
  void clear_submit_time() ;
  const ::google::protobuf::Timestamp& submit_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_submit_time();
  ::google::protobuf::Timestamp* mutable_submit_time();
  void set_allocated_submit_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_submit_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_submit_time();

  private:
  const ::google::protobuf::Timestamp& _internal_submit_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_submit_time();

  public:
  // .google.protobuf.Timestamp deposit_end_time = 6 [json_name = "depositEndTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  bool has_deposit_end_time() const;
  void clear_deposit_end_time() ;
  const ::google::protobuf::Timestamp& deposit_end_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_deposit_end_time();
  ::google::protobuf::Timestamp* mutable_deposit_end_time();
  void set_allocated_deposit_end_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_deposit_end_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_deposit_end_time();

  private:
  const ::google::protobuf::Timestamp& _internal_deposit_end_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_deposit_end_time();

  public:
  // .google.protobuf.Timestamp voting_start_time = 8 [json_name = "votingStartTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  bool has_voting_start_time() const;
  void clear_voting_start_time() ;
  const ::google::protobuf::Timestamp& voting_start_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_voting_start_time();
  ::google::protobuf::Timestamp* mutable_voting_start_time();
  void set_allocated_voting_start_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_voting_start_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_voting_start_time();

  private:
  const ::google::protobuf::Timestamp& _internal_voting_start_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_voting_start_time();

  public:
  // .google.protobuf.Timestamp voting_end_time = 9 [json_name = "votingEndTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  bool has_voting_end_time() const;
  void clear_voting_end_time() ;
  const ::google::protobuf::Timestamp& voting_end_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_voting_end_time();
  ::google::protobuf::Timestamp* mutable_voting_end_time();
  void set_allocated_voting_end_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_voting_end_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_voting_end_time();

  private:
  const ::google::protobuf::Timestamp& _internal_voting_end_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_voting_end_time();

  public:
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // .cosmos.gov.v1beta1.ProposalStatus status = 3 [json_name = "status"];
  void clear_status() ;
  ::cosmos::gov::v1beta1::ProposalStatus status() const;
  void set_status(::cosmos::gov::v1beta1::ProposalStatus value);

  private:
  ::cosmos::gov::v1beta1::ProposalStatus _internal_status() const;
  void _internal_set_status(::cosmos::gov::v1beta1::ProposalStatus value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1beta1.Proposal)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 7,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Proposal& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > total_deposit_;
    ::google::protobuf::Any* content_;
    ::cosmos::gov::v1beta1::TallyResult* final_tally_result_;
    ::google::protobuf::Timestamp* submit_time_;
    ::google::protobuf::Timestamp* deposit_end_time_;
    ::google::protobuf::Timestamp* voting_start_time_;
    ::google::protobuf::Timestamp* voting_end_time_;
    ::uint64_t proposal_id_;
    int status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1beta1_2fgov_2eproto;
};
// -------------------------------------------------------------------

class DepositParams final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.gov.v1beta1.DepositParams) */ {
 public:
  inline DepositParams() : DepositParams(nullptr) {}
  ~DepositParams() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DepositParams* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DepositParams));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DepositParams(
      ::google::protobuf::internal::ConstantInitialized);

  inline DepositParams(const DepositParams& from) : DepositParams(nullptr, from) {}
  inline DepositParams(DepositParams&& from) noexcept
      : DepositParams(nullptr, std::move(from)) {}
  inline DepositParams& operator=(const DepositParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepositParams& operator=(DepositParams&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DepositParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const DepositParams* internal_default_instance() {
    return reinterpret_cast<const DepositParams*>(
        &_DepositParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(DepositParams& a, DepositParams& b) { a.Swap(&b); }
  inline void Swap(DepositParams* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DepositParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DepositParams* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DepositParams>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DepositParams& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DepositParams& from) { DepositParams::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DepositParams* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.gov.v1beta1.DepositParams"; }

 protected:
  explicit DepositParams(::google::protobuf::Arena* arena);
  DepositParams(::google::protobuf::Arena* arena, const DepositParams& from);
  DepositParams(::google::protobuf::Arena* arena, DepositParams&& from) noexcept
      : DepositParams(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMinDepositFieldNumber = 1,
    kMaxDepositPeriodFieldNumber = 2,
  };
  // repeated .cosmos.base.v1beta1.Coin min_deposit = 1 [json_name = "minDeposit", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "min_deposit,omitempty", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  int min_deposit_size() const;
  private:
  int _internal_min_deposit_size() const;

  public:
  void clear_min_deposit() ;
  ::cosmos::base::v1beta1::Coin* mutable_min_deposit(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* mutable_min_deposit();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_min_deposit() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_min_deposit();
  public:
  const ::cosmos::base::v1beta1::Coin& min_deposit(int index) const;
  ::cosmos::base::v1beta1::Coin* add_min_deposit();
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& min_deposit() const;
  // .google.protobuf.Duration max_deposit_period = 2 [json_name = "maxDepositPeriod", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "max_deposit_period,omitempty", (.gogoproto.stdduration) = true];
  bool has_max_deposit_period() const;
  void clear_max_deposit_period() ;
  const ::google::protobuf::Duration& max_deposit_period() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_max_deposit_period();
  ::google::protobuf::Duration* mutable_max_deposit_period();
  void set_allocated_max_deposit_period(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_max_deposit_period(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_max_deposit_period();

  private:
  const ::google::protobuf::Duration& _internal_max_deposit_period() const;
  ::google::protobuf::Duration* _internal_mutable_max_deposit_period();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1beta1.DepositParams)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DepositParams& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > min_deposit_;
    ::google::protobuf::Duration* max_deposit_period_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1beta1_2fgov_2eproto;
};
// -------------------------------------------------------------------

class Deposit final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.gov.v1beta1.Deposit) */ {
 public:
  inline Deposit() : Deposit(nullptr) {}
  ~Deposit() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Deposit* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Deposit));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Deposit(
      ::google::protobuf::internal::ConstantInitialized);

  inline Deposit(const Deposit& from) : Deposit(nullptr, from) {}
  inline Deposit(Deposit&& from) noexcept
      : Deposit(nullptr, std::move(from)) {}
  inline Deposit& operator=(const Deposit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Deposit& operator=(Deposit&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Deposit& default_instance() {
    return *internal_default_instance();
  }
  static inline const Deposit* internal_default_instance() {
    return reinterpret_cast<const Deposit*>(
        &_Deposit_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Deposit& a, Deposit& b) { a.Swap(&b); }
  inline void Swap(Deposit* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Deposit* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Deposit* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Deposit>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Deposit& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Deposit& from) { Deposit::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Deposit* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.gov.v1beta1.Deposit"; }

 protected:
  explicit Deposit(::google::protobuf::Arena* arena);
  Deposit(::google::protobuf::Arena* arena, const Deposit& from);
  Deposit(::google::protobuf::Arena* arena, Deposit&& from) noexcept
      : Deposit(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAmountFieldNumber = 3,
    kDepositorFieldNumber = 2,
    kProposalIdFieldNumber = 1,
  };
  // repeated .cosmos.base.v1beta1.Coin amount = 3 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  int amount_size() const;
  private:
  int _internal_amount_size() const;

  public:
  void clear_amount() ;
  ::cosmos::base::v1beta1::Coin* mutable_amount(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* mutable_amount();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_amount() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_amount();
  public:
  const ::cosmos::base::v1beta1::Coin& amount(int index) const;
  ::cosmos::base::v1beta1::Coin* add_amount();
  const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& amount() const;
  // string depositor = 2 [json_name = "depositor", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_depositor() ;
  const std::string& depositor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_depositor(Arg_&& arg, Args_... args);
  std::string* mutable_depositor();
  PROTOBUF_NODISCARD std::string* release_depositor();
  void set_allocated_depositor(std::string* value);

  private:
  const std::string& _internal_depositor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_depositor(
      const std::string& value);
  std::string* _internal_mutable_depositor();

  public:
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1beta1.Deposit)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      44, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Deposit& from_msg);
    ::google::protobuf::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > amount_;
    ::google::protobuf::internal::ArenaStringPtr depositor_;
    ::uint64_t proposal_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1beta1_2fgov_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// WeightedVoteOption

// .cosmos.gov.v1beta1.VoteOption option = 1 [json_name = "option"];
inline void WeightedVoteOption::clear_option() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.option_ = 0;
}
inline ::cosmos::gov::v1beta1::VoteOption WeightedVoteOption::option() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.WeightedVoteOption.option)
  return _internal_option();
}
inline void WeightedVoteOption::set_option(::cosmos::gov::v1beta1::VoteOption value) {
  _internal_set_option(value);
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.WeightedVoteOption.option)
}
inline ::cosmos::gov::v1beta1::VoteOption WeightedVoteOption::_internal_option() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::cosmos::gov::v1beta1::VoteOption>(_impl_.option_);
}
inline void WeightedVoteOption::_internal_set_option(::cosmos::gov::v1beta1::VoteOption value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.option_ = value;
}

// string weight = 2 [json_name = "weight", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec", (.amino.dont_omitempty) = true];
inline void WeightedVoteOption::clear_weight() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.weight_.ClearToEmpty();
}
inline const std::string& WeightedVoteOption::weight() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.WeightedVoteOption.weight)
  return _internal_weight();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WeightedVoteOption::set_weight(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.weight_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.WeightedVoteOption.weight)
}
inline std::string* WeightedVoteOption::mutable_weight() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_weight();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.WeightedVoteOption.weight)
  return _s;
}
inline const std::string& WeightedVoteOption::_internal_weight() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.weight_.Get();
}
inline void WeightedVoteOption::_internal_set_weight(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.weight_.Set(value, GetArena());
}
inline std::string* WeightedVoteOption::_internal_mutable_weight() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.weight_.Mutable( GetArena());
}
inline std::string* WeightedVoteOption::release_weight() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.WeightedVoteOption.weight)
  return _impl_.weight_.Release();
}
inline void WeightedVoteOption::set_allocated_weight(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.weight_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.weight_.IsDefault()) {
    _impl_.weight_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.WeightedVoteOption.weight)
}

// -------------------------------------------------------------------

// TextProposal

// string title = 1 [json_name = "title"];
inline void TextProposal::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& TextProposal::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.TextProposal.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TextProposal::set_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.TextProposal.title)
}
inline std::string* TextProposal::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.TextProposal.title)
  return _s;
}
inline const std::string& TextProposal::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void TextProposal::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(value, GetArena());
}
inline std::string* TextProposal::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* TextProposal::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.TextProposal.title)
  return _impl_.title_.Release();
}
inline void TextProposal::set_allocated_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.TextProposal.title)
}

// string description = 2 [json_name = "description"];
inline void TextProposal::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& TextProposal::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.TextProposal.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TextProposal::set_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.TextProposal.description)
}
inline std::string* TextProposal::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.TextProposal.description)
  return _s;
}
inline const std::string& TextProposal::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_.Get();
}
inline void TextProposal::_internal_set_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(value, GetArena());
}
inline std::string* TextProposal::_internal_mutable_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* TextProposal::release_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.TextProposal.description)
  return _impl_.description_.Release();
}
inline void TextProposal::set_allocated_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.TextProposal.description)
}

// -------------------------------------------------------------------

// Deposit

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void Deposit::clear_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t Deposit::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.Deposit.proposal_id)
  return _internal_proposal_id();
}
inline void Deposit::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.Deposit.proposal_id)
}
inline ::uint64_t Deposit::_internal_proposal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proposal_id_;
}
inline void Deposit::_internal_set_proposal_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_ = value;
}

// string depositor = 2 [json_name = "depositor", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void Deposit::clear_depositor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.depositor_.ClearToEmpty();
}
inline const std::string& Deposit::depositor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.Deposit.depositor)
  return _internal_depositor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Deposit::set_depositor(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.depositor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.Deposit.depositor)
}
inline std::string* Deposit::mutable_depositor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_depositor();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.Deposit.depositor)
  return _s;
}
inline const std::string& Deposit::_internal_depositor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.depositor_.Get();
}
inline void Deposit::_internal_set_depositor(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.depositor_.Set(value, GetArena());
}
inline std::string* Deposit::_internal_mutable_depositor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.depositor_.Mutable( GetArena());
}
inline std::string* Deposit::release_depositor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.Deposit.depositor)
  return _impl_.depositor_.Release();
}
inline void Deposit::set_allocated_depositor(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.depositor_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.depositor_.IsDefault()) {
    _impl_.depositor_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.Deposit.depositor)
}

// repeated .cosmos.base.v1beta1.Coin amount = 3 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
inline int Deposit::_internal_amount_size() const {
  return _internal_amount().size();
}
inline int Deposit::amount_size() const {
  return _internal_amount_size();
}
inline ::cosmos::base::v1beta1::Coin* Deposit::mutable_amount(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.Deposit.amount)
  return _internal_mutable_amount()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* Deposit::mutable_amount()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.gov.v1beta1.Deposit.amount)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_amount();
}
inline const ::cosmos::base::v1beta1::Coin& Deposit::amount(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.Deposit.amount)
  return _internal_amount().Get(index);
}
inline ::cosmos::base::v1beta1::Coin* Deposit::add_amount() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::base::v1beta1::Coin* _add = _internal_mutable_amount()->Add();
  // @@protoc_insertion_point(field_add:cosmos.gov.v1beta1.Deposit.amount)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& Deposit::amount() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.gov.v1beta1.Deposit.amount)
  return _internal_amount();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
Deposit::_internal_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
Deposit::_internal_mutable_amount() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.amount_;
}

// -------------------------------------------------------------------

// Proposal

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void Proposal::clear_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t Proposal::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.Proposal.proposal_id)
  return _internal_proposal_id();
}
inline void Proposal::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.Proposal.proposal_id)
}
inline ::uint64_t Proposal::_internal_proposal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proposal_id_;
}
inline void Proposal::_internal_set_proposal_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_ = value;
}

// .google.protobuf.Any content = 2 [json_name = "content", (.cosmos_proto.accepts_interface) = "cosmos.gov.v1beta1.Content"];
inline bool Proposal::has_content() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.content_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& Proposal::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Any* p = _impl_.content_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& Proposal::content() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.Proposal.content)
  return _internal_content();
}
inline void Proposal::unsafe_arena_set_allocated_content(::google::protobuf::Any* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.content_);
  }
  _impl_.content_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1beta1.Proposal.content)
}
inline ::google::protobuf::Any* Proposal::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* released = _impl_.content_;
  _impl_.content_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Any* Proposal::unsafe_arena_release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.Proposal.content)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* temp = _impl_.content_;
  _impl_.content_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* Proposal::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.content_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Any>(GetArena());
    _impl_.content_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.content_;
}
inline ::google::protobuf::Any* Proposal::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Any* _msg = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.Proposal.content)
  return _msg;
}
inline void Proposal::set_allocated_content(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.content_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.content_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.Proposal.content)
}

// .cosmos.gov.v1beta1.ProposalStatus status = 3 [json_name = "status"];
inline void Proposal::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::cosmos::gov::v1beta1::ProposalStatus Proposal::status() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.Proposal.status)
  return _internal_status();
}
inline void Proposal::set_status(::cosmos::gov::v1beta1::ProposalStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.Proposal.status)
}
inline ::cosmos::gov::v1beta1::ProposalStatus Proposal::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::cosmos::gov::v1beta1::ProposalStatus>(_impl_.status_);
}
inline void Proposal::_internal_set_status(::cosmos::gov::v1beta1::ProposalStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// .cosmos.gov.v1beta1.TallyResult final_tally_result = 4 [json_name = "finalTallyResult", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool Proposal::has_final_tally_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.final_tally_result_ != nullptr);
  return value;
}
inline void Proposal::clear_final_tally_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.final_tally_result_ != nullptr) _impl_.final_tally_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cosmos::gov::v1beta1::TallyResult& Proposal::_internal_final_tally_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::gov::v1beta1::TallyResult* p = _impl_.final_tally_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::gov::v1beta1::TallyResult&>(::cosmos::gov::v1beta1::_TallyResult_default_instance_);
}
inline const ::cosmos::gov::v1beta1::TallyResult& Proposal::final_tally_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.Proposal.final_tally_result)
  return _internal_final_tally_result();
}
inline void Proposal::unsafe_arena_set_allocated_final_tally_result(::cosmos::gov::v1beta1::TallyResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.final_tally_result_);
  }
  _impl_.final_tally_result_ = reinterpret_cast<::cosmos::gov::v1beta1::TallyResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1beta1.Proposal.final_tally_result)
}
inline ::cosmos::gov::v1beta1::TallyResult* Proposal::release_final_tally_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::gov::v1beta1::TallyResult* released = _impl_.final_tally_result_;
  _impl_.final_tally_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::gov::v1beta1::TallyResult* Proposal::unsafe_arena_release_final_tally_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.Proposal.final_tally_result)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::gov::v1beta1::TallyResult* temp = _impl_.final_tally_result_;
  _impl_.final_tally_result_ = nullptr;
  return temp;
}
inline ::cosmos::gov::v1beta1::TallyResult* Proposal::_internal_mutable_final_tally_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.final_tally_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::gov::v1beta1::TallyResult>(GetArena());
    _impl_.final_tally_result_ = reinterpret_cast<::cosmos::gov::v1beta1::TallyResult*>(p);
  }
  return _impl_.final_tally_result_;
}
inline ::cosmos::gov::v1beta1::TallyResult* Proposal::mutable_final_tally_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::cosmos::gov::v1beta1::TallyResult* _msg = _internal_mutable_final_tally_result();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.Proposal.final_tally_result)
  return _msg;
}
inline void Proposal::set_allocated_final_tally_result(::cosmos::gov::v1beta1::TallyResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.final_tally_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.final_tally_result_ = reinterpret_cast<::cosmos::gov::v1beta1::TallyResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.Proposal.final_tally_result)
}

// .google.protobuf.Timestamp submit_time = 5 [json_name = "submitTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
inline bool Proposal::has_submit_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.submit_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Proposal::_internal_submit_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.submit_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Proposal::submit_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.Proposal.submit_time)
  return _internal_submit_time();
}
inline void Proposal::unsafe_arena_set_allocated_submit_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.submit_time_);
  }
  _impl_.submit_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1beta1.Proposal.submit_time)
}
inline ::google::protobuf::Timestamp* Proposal::release_submit_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* released = _impl_.submit_time_;
  _impl_.submit_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* Proposal::unsafe_arena_release_submit_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.Proposal.submit_time)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* temp = _impl_.submit_time_;
  _impl_.submit_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Proposal::_internal_mutable_submit_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.submit_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.submit_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.submit_time_;
}
inline ::google::protobuf::Timestamp* Proposal::mutable_submit_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_submit_time();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.Proposal.submit_time)
  return _msg;
}
inline void Proposal::set_allocated_submit_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.submit_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.submit_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.Proposal.submit_time)
}

// .google.protobuf.Timestamp deposit_end_time = 6 [json_name = "depositEndTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
inline bool Proposal::has_deposit_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.deposit_end_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Proposal::_internal_deposit_end_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.deposit_end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Proposal::deposit_end_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.Proposal.deposit_end_time)
  return _internal_deposit_end_time();
}
inline void Proposal::unsafe_arena_set_allocated_deposit_end_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.deposit_end_time_);
  }
  _impl_.deposit_end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1beta1.Proposal.deposit_end_time)
}
inline ::google::protobuf::Timestamp* Proposal::release_deposit_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::Timestamp* released = _impl_.deposit_end_time_;
  _impl_.deposit_end_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* Proposal::unsafe_arena_release_deposit_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.Proposal.deposit_end_time)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::Timestamp* temp = _impl_.deposit_end_time_;
  _impl_.deposit_end_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Proposal::_internal_mutable_deposit_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.deposit_end_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.deposit_end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.deposit_end_time_;
}
inline ::google::protobuf::Timestamp* Proposal::mutable_deposit_end_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_deposit_end_time();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.Proposal.deposit_end_time)
  return _msg;
}
inline void Proposal::set_allocated_deposit_end_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.deposit_end_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.deposit_end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.Proposal.deposit_end_time)
}

// repeated .cosmos.base.v1beta1.Coin total_deposit = 7 [json_name = "totalDeposit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
inline int Proposal::_internal_total_deposit_size() const {
  return _internal_total_deposit().size();
}
inline int Proposal::total_deposit_size() const {
  return _internal_total_deposit_size();
}
inline ::cosmos::base::v1beta1::Coin* Proposal::mutable_total_deposit(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.Proposal.total_deposit)
  return _internal_mutable_total_deposit()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* Proposal::mutable_total_deposit()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.gov.v1beta1.Proposal.total_deposit)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_total_deposit();
}
inline const ::cosmos::base::v1beta1::Coin& Proposal::total_deposit(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.Proposal.total_deposit)
  return _internal_total_deposit().Get(index);
}
inline ::cosmos::base::v1beta1::Coin* Proposal::add_total_deposit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::base::v1beta1::Coin* _add = _internal_mutable_total_deposit()->Add();
  // @@protoc_insertion_point(field_add:cosmos.gov.v1beta1.Proposal.total_deposit)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& Proposal::total_deposit() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.gov.v1beta1.Proposal.total_deposit)
  return _internal_total_deposit();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
Proposal::_internal_total_deposit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_deposit_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
Proposal::_internal_mutable_total_deposit() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.total_deposit_;
}

// .google.protobuf.Timestamp voting_start_time = 8 [json_name = "votingStartTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
inline bool Proposal::has_voting_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.voting_start_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Proposal::_internal_voting_start_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.voting_start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Proposal::voting_start_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.Proposal.voting_start_time)
  return _internal_voting_start_time();
}
inline void Proposal::unsafe_arena_set_allocated_voting_start_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.voting_start_time_);
  }
  _impl_.voting_start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1beta1.Proposal.voting_start_time)
}
inline ::google::protobuf::Timestamp* Proposal::release_voting_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* released = _impl_.voting_start_time_;
  _impl_.voting_start_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* Proposal::unsafe_arena_release_voting_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.Proposal.voting_start_time)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* temp = _impl_.voting_start_time_;
  _impl_.voting_start_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Proposal::_internal_mutable_voting_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.voting_start_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.voting_start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.voting_start_time_;
}
inline ::google::protobuf::Timestamp* Proposal::mutable_voting_start_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_voting_start_time();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.Proposal.voting_start_time)
  return _msg;
}
inline void Proposal::set_allocated_voting_start_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.voting_start_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.voting_start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.Proposal.voting_start_time)
}

// .google.protobuf.Timestamp voting_end_time = 9 [json_name = "votingEndTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
inline bool Proposal::has_voting_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.voting_end_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Proposal::_internal_voting_end_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.voting_end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Proposal::voting_end_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.Proposal.voting_end_time)
  return _internal_voting_end_time();
}
inline void Proposal::unsafe_arena_set_allocated_voting_end_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.voting_end_time_);
  }
  _impl_.voting_end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1beta1.Proposal.voting_end_time)
}
inline ::google::protobuf::Timestamp* Proposal::release_voting_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::protobuf::Timestamp* released = _impl_.voting_end_time_;
  _impl_.voting_end_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* Proposal::unsafe_arena_release_voting_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.Proposal.voting_end_time)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::protobuf::Timestamp* temp = _impl_.voting_end_time_;
  _impl_.voting_end_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Proposal::_internal_mutable_voting_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.voting_end_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.voting_end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.voting_end_time_;
}
inline ::google::protobuf::Timestamp* Proposal::mutable_voting_end_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_voting_end_time();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.Proposal.voting_end_time)
  return _msg;
}
inline void Proposal::set_allocated_voting_end_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.voting_end_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.voting_end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.Proposal.voting_end_time)
}

// -------------------------------------------------------------------

// TallyResult

// string yes = 1 [json_name = "yes", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
inline void TallyResult::clear_yes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yes_.ClearToEmpty();
}
inline const std::string& TallyResult::yes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.TallyResult.yes)
  return _internal_yes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TallyResult::set_yes(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yes_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.TallyResult.yes)
}
inline std::string* TallyResult::mutable_yes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_yes();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.TallyResult.yes)
  return _s;
}
inline const std::string& TallyResult::_internal_yes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.yes_.Get();
}
inline void TallyResult::_internal_set_yes(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yes_.Set(value, GetArena());
}
inline std::string* TallyResult::_internal_mutable_yes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.yes_.Mutable( GetArena());
}
inline std::string* TallyResult::release_yes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.TallyResult.yes)
  return _impl_.yes_.Release();
}
inline void TallyResult::set_allocated_yes(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yes_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.yes_.IsDefault()) {
    _impl_.yes_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.TallyResult.yes)
}

// string abstain = 2 [json_name = "abstain", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
inline void TallyResult::clear_abstain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.abstain_.ClearToEmpty();
}
inline const std::string& TallyResult::abstain() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.TallyResult.abstain)
  return _internal_abstain();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TallyResult::set_abstain(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.abstain_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.TallyResult.abstain)
}
inline std::string* TallyResult::mutable_abstain() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_abstain();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.TallyResult.abstain)
  return _s;
}
inline const std::string& TallyResult::_internal_abstain() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.abstain_.Get();
}
inline void TallyResult::_internal_set_abstain(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.abstain_.Set(value, GetArena());
}
inline std::string* TallyResult::_internal_mutable_abstain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.abstain_.Mutable( GetArena());
}
inline std::string* TallyResult::release_abstain() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.TallyResult.abstain)
  return _impl_.abstain_.Release();
}
inline void TallyResult::set_allocated_abstain(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.abstain_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.abstain_.IsDefault()) {
    _impl_.abstain_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.TallyResult.abstain)
}

// string no = 3 [json_name = "no", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
inline void TallyResult::clear_no() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.no_.ClearToEmpty();
}
inline const std::string& TallyResult::no() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.TallyResult.no)
  return _internal_no();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TallyResult::set_no(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.no_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.TallyResult.no)
}
inline std::string* TallyResult::mutable_no() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_no();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.TallyResult.no)
  return _s;
}
inline const std::string& TallyResult::_internal_no() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.no_.Get();
}
inline void TallyResult::_internal_set_no(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.no_.Set(value, GetArena());
}
inline std::string* TallyResult::_internal_mutable_no() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.no_.Mutable( GetArena());
}
inline std::string* TallyResult::release_no() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.TallyResult.no)
  return _impl_.no_.Release();
}
inline void TallyResult::set_allocated_no(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.no_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.no_.IsDefault()) {
    _impl_.no_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.TallyResult.no)
}

// string no_with_veto = 4 [json_name = "noWithVeto", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
inline void TallyResult::clear_no_with_veto() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.no_with_veto_.ClearToEmpty();
}
inline const std::string& TallyResult::no_with_veto() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.TallyResult.no_with_veto)
  return _internal_no_with_veto();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TallyResult::set_no_with_veto(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.no_with_veto_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.TallyResult.no_with_veto)
}
inline std::string* TallyResult::mutable_no_with_veto() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_no_with_veto();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.TallyResult.no_with_veto)
  return _s;
}
inline const std::string& TallyResult::_internal_no_with_veto() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.no_with_veto_.Get();
}
inline void TallyResult::_internal_set_no_with_veto(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.no_with_veto_.Set(value, GetArena());
}
inline std::string* TallyResult::_internal_mutable_no_with_veto() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.no_with_veto_.Mutable( GetArena());
}
inline std::string* TallyResult::release_no_with_veto() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.TallyResult.no_with_veto)
  return _impl_.no_with_veto_.Release();
}
inline void TallyResult::set_allocated_no_with_veto(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.no_with_veto_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.no_with_veto_.IsDefault()) {
    _impl_.no_with_veto_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.TallyResult.no_with_veto)
}

// -------------------------------------------------------------------

// Vote

// uint64 proposal_id = 1 [json_name = "proposalId", (.gogoproto.jsontag) = "id", (.amino.field_name) = "id", (.amino.dont_omitempty) = true];
inline void Vote::clear_proposal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t Vote::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.Vote.proposal_id)
  return _internal_proposal_id();
}
inline void Vote::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.Vote.proposal_id)
}
inline ::uint64_t Vote::_internal_proposal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proposal_id_;
}
inline void Vote::_internal_set_proposal_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proposal_id_ = value;
}

// string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void Vote::clear_voter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voter_.ClearToEmpty();
}
inline const std::string& Vote::voter() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.Vote.voter)
  return _internal_voter();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Vote::set_voter(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voter_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.Vote.voter)
}
inline std::string* Vote::mutable_voter() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_voter();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.Vote.voter)
  return _s;
}
inline const std::string& Vote::_internal_voter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.voter_.Get();
}
inline void Vote::_internal_set_voter(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voter_.Set(value, GetArena());
}
inline std::string* Vote::_internal_mutable_voter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.voter_.Mutable( GetArena());
}
inline std::string* Vote::release_voter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.Vote.voter)
  return _impl_.voter_.Release();
}
inline void Vote::set_allocated_voter(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voter_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.voter_.IsDefault()) {
    _impl_.voter_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.Vote.voter)
}

// .cosmos.gov.v1beta1.VoteOption option = 3 [json_name = "option", deprecated = true];
inline void Vote::clear_option() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.option_ = 0;
}
inline ::cosmos::gov::v1beta1::VoteOption Vote::option() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.Vote.option)
  return _internal_option();
}
inline void Vote::set_option(::cosmos::gov::v1beta1::VoteOption value) {
  _internal_set_option(value);
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.Vote.option)
}
inline ::cosmos::gov::v1beta1::VoteOption Vote::_internal_option() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::cosmos::gov::v1beta1::VoteOption>(_impl_.option_);
}
inline void Vote::_internal_set_option(::cosmos::gov::v1beta1::VoteOption value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.option_ = value;
}

// repeated .cosmos.gov.v1beta1.WeightedVoteOption options = 4 [json_name = "options", (.gogoproto.nullable) = false, (.cosmos_proto.field_added_in) = "cosmos-sdk 0.43", (.amino.dont_omitempty) = true];
inline int Vote::_internal_options_size() const {
  return _internal_options().size();
}
inline int Vote::options_size() const {
  return _internal_options_size();
}
inline void Vote::clear_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.options_.Clear();
}
inline ::cosmos::gov::v1beta1::WeightedVoteOption* Vote::mutable_options(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.Vote.options)
  return _internal_mutable_options()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::gov::v1beta1::WeightedVoteOption>* Vote::mutable_options()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.gov.v1beta1.Vote.options)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_options();
}
inline const ::cosmos::gov::v1beta1::WeightedVoteOption& Vote::options(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.Vote.options)
  return _internal_options().Get(index);
}
inline ::cosmos::gov::v1beta1::WeightedVoteOption* Vote::add_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::gov::v1beta1::WeightedVoteOption* _add = _internal_mutable_options()->Add();
  // @@protoc_insertion_point(field_add:cosmos.gov.v1beta1.Vote.options)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::gov::v1beta1::WeightedVoteOption>& Vote::options() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.gov.v1beta1.Vote.options)
  return _internal_options();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::gov::v1beta1::WeightedVoteOption>&
Vote::_internal_options() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.options_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::gov::v1beta1::WeightedVoteOption>*
Vote::_internal_mutable_options() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.options_;
}

// -------------------------------------------------------------------

// DepositParams

// repeated .cosmos.base.v1beta1.Coin min_deposit = 1 [json_name = "minDeposit", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "min_deposit,omitempty", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
inline int DepositParams::_internal_min_deposit_size() const {
  return _internal_min_deposit().size();
}
inline int DepositParams::min_deposit_size() const {
  return _internal_min_deposit_size();
}
inline ::cosmos::base::v1beta1::Coin* DepositParams::mutable_min_deposit(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.DepositParams.min_deposit)
  return _internal_mutable_min_deposit()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* DepositParams::mutable_min_deposit()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.gov.v1beta1.DepositParams.min_deposit)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_min_deposit();
}
inline const ::cosmos::base::v1beta1::Coin& DepositParams::min_deposit(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.DepositParams.min_deposit)
  return _internal_min_deposit().Get(index);
}
inline ::cosmos::base::v1beta1::Coin* DepositParams::add_min_deposit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::base::v1beta1::Coin* _add = _internal_mutable_min_deposit()->Add();
  // @@protoc_insertion_point(field_add:cosmos.gov.v1beta1.DepositParams.min_deposit)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& DepositParams::min_deposit() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.gov.v1beta1.DepositParams.min_deposit)
  return _internal_min_deposit();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
DepositParams::_internal_min_deposit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.min_deposit_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
DepositParams::_internal_mutable_min_deposit() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.min_deposit_;
}

// .google.protobuf.Duration max_deposit_period = 2 [json_name = "maxDepositPeriod", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "max_deposit_period,omitempty", (.gogoproto.stdduration) = true];
inline bool DepositParams::has_max_deposit_period() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.max_deposit_period_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& DepositParams::_internal_max_deposit_period() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Duration* p = _impl_.max_deposit_period_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& DepositParams::max_deposit_period() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.DepositParams.max_deposit_period)
  return _internal_max_deposit_period();
}
inline void DepositParams::unsafe_arena_set_allocated_max_deposit_period(::google::protobuf::Duration* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.max_deposit_period_);
  }
  _impl_.max_deposit_period_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1beta1.DepositParams.max_deposit_period)
}
inline ::google::protobuf::Duration* DepositParams::release_max_deposit_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* released = _impl_.max_deposit_period_;
  _impl_.max_deposit_period_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Duration* DepositParams::unsafe_arena_release_max_deposit_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.DepositParams.max_deposit_period)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* temp = _impl_.max_deposit_period_;
  _impl_.max_deposit_period_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* DepositParams::_internal_mutable_max_deposit_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.max_deposit_period_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Duration>(GetArena());
    _impl_.max_deposit_period_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.max_deposit_period_;
}
inline ::google::protobuf::Duration* DepositParams::mutable_max_deposit_period() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Duration* _msg = _internal_mutable_max_deposit_period();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.DepositParams.max_deposit_period)
  return _msg;
}
inline void DepositParams::set_allocated_max_deposit_period(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.max_deposit_period_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.max_deposit_period_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.DepositParams.max_deposit_period)
}

// -------------------------------------------------------------------

// VotingParams

// .google.protobuf.Duration voting_period = 1 [json_name = "votingPeriod", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "voting_period,omitempty", (.gogoproto.stdduration) = true];
inline bool VotingParams::has_voting_period() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.voting_period_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& VotingParams::_internal_voting_period() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Duration* p = _impl_.voting_period_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& VotingParams::voting_period() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.VotingParams.voting_period)
  return _internal_voting_period();
}
inline void VotingParams::unsafe_arena_set_allocated_voting_period(::google::protobuf::Duration* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.voting_period_);
  }
  _impl_.voting_period_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1beta1.VotingParams.voting_period)
}
inline ::google::protobuf::Duration* VotingParams::release_voting_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* released = _impl_.voting_period_;
  _impl_.voting_period_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Duration* VotingParams::unsafe_arena_release_voting_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.VotingParams.voting_period)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* temp = _impl_.voting_period_;
  _impl_.voting_period_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* VotingParams::_internal_mutable_voting_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.voting_period_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Duration>(GetArena());
    _impl_.voting_period_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.voting_period_;
}
inline ::google::protobuf::Duration* VotingParams::mutable_voting_period() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Duration* _msg = _internal_mutable_voting_period();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.VotingParams.voting_period)
  return _msg;
}
inline void VotingParams::set_allocated_voting_period(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.voting_period_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.voting_period_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.VotingParams.voting_period)
}

// -------------------------------------------------------------------

// TallyParams

// bytes quorum = 1 [json_name = "quorum", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.jsontag) = "quorum,omitempty", (.cosmos_proto.scalar) = "cosmos.Dec"];
inline void TallyParams::clear_quorum() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quorum_.ClearToEmpty();
}
inline const std::string& TallyParams::quorum() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.TallyParams.quorum)
  return _internal_quorum();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TallyParams::set_quorum(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quorum_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.TallyParams.quorum)
}
inline std::string* TallyParams::mutable_quorum() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_quorum();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.TallyParams.quorum)
  return _s;
}
inline const std::string& TallyParams::_internal_quorum() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.quorum_.Get();
}
inline void TallyParams::_internal_set_quorum(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quorum_.Set(value, GetArena());
}
inline std::string* TallyParams::_internal_mutable_quorum() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.quorum_.Mutable( GetArena());
}
inline std::string* TallyParams::release_quorum() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.TallyParams.quorum)
  return _impl_.quorum_.Release();
}
inline void TallyParams::set_allocated_quorum(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quorum_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.quorum_.IsDefault()) {
    _impl_.quorum_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.TallyParams.quorum)
}

// bytes threshold = 2 [json_name = "threshold", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.jsontag) = "threshold,omitempty", (.cosmos_proto.scalar) = "cosmos.Dec"];
inline void TallyParams::clear_threshold() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.threshold_.ClearToEmpty();
}
inline const std::string& TallyParams::threshold() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.TallyParams.threshold)
  return _internal_threshold();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TallyParams::set_threshold(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.threshold_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.TallyParams.threshold)
}
inline std::string* TallyParams::mutable_threshold() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_threshold();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.TallyParams.threshold)
  return _s;
}
inline const std::string& TallyParams::_internal_threshold() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.threshold_.Get();
}
inline void TallyParams::_internal_set_threshold(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.threshold_.Set(value, GetArena());
}
inline std::string* TallyParams::_internal_mutable_threshold() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.threshold_.Mutable( GetArena());
}
inline std::string* TallyParams::release_threshold() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.TallyParams.threshold)
  return _impl_.threshold_.Release();
}
inline void TallyParams::set_allocated_threshold(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.threshold_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.threshold_.IsDefault()) {
    _impl_.threshold_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.TallyParams.threshold)
}

// bytes veto_threshold = 3 [json_name = "vetoThreshold", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.jsontag) = "veto_threshold,omitempty", (.cosmos_proto.scalar) = "cosmos.Dec"];
inline void TallyParams::clear_veto_threshold() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.veto_threshold_.ClearToEmpty();
}
inline const std::string& TallyParams::veto_threshold() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.TallyParams.veto_threshold)
  return _internal_veto_threshold();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TallyParams::set_veto_threshold(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.veto_threshold_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.TallyParams.veto_threshold)
}
inline std::string* TallyParams::mutable_veto_threshold() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_veto_threshold();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.TallyParams.veto_threshold)
  return _s;
}
inline const std::string& TallyParams::_internal_veto_threshold() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.veto_threshold_.Get();
}
inline void TallyParams::_internal_set_veto_threshold(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.veto_threshold_.Set(value, GetArena());
}
inline std::string* TallyParams::_internal_mutable_veto_threshold() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.veto_threshold_.Mutable( GetArena());
}
inline std::string* TallyParams::release_veto_threshold() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.TallyParams.veto_threshold)
  return _impl_.veto_threshold_.Release();
}
inline void TallyParams::set_allocated_veto_threshold(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.veto_threshold_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.veto_threshold_.IsDefault()) {
    _impl_.veto_threshold_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.TallyParams.veto_threshold)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace gov
}  // namespace cosmos


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::cosmos::gov::v1beta1::VoteOption> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cosmos::gov::v1beta1::VoteOption>() {
  return ::cosmos::gov::v1beta1::VoteOption_descriptor();
}
template <>
struct is_proto_enum<::cosmos::gov::v1beta1::ProposalStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cosmos::gov::v1beta1::ProposalStatus>() {
  return ::cosmos::gov::v1beta1::ProposalStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2fgov_2fv1beta1_2fgov_2eproto_2epb_2eh
