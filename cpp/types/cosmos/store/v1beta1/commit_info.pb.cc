// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/store/v1beta1/commit_info.proto
// Protobuf C++ Version: 5.29.4

#include "cosmos/store/v1beta1/commit_info.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace cosmos {
namespace store {
namespace v1beta1 {

inline constexpr CommitID::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        version_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CommitID::CommitID(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CommitIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommitIDDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommitIDDefaultTypeInternal() {}
  union {
    CommitID _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommitIDDefaultTypeInternal _CommitID_default_instance_;

inline constexpr StoreInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        commit_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR StoreInfo::StoreInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StoreInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoreInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoreInfoDefaultTypeInternal() {}
  union {
    StoreInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoreInfoDefaultTypeInternal _StoreInfo_default_instance_;

inline constexpr CommitInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        store_infos_{},
        timestamp_{nullptr},
        version_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR CommitInfo::CommitInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CommitInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommitInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommitInfoDefaultTypeInternal() {}
  union {
    CommitInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommitInfoDefaultTypeInternal _CommitInfo_default_instance_;
}  // namespace v1beta1
}  // namespace store
}  // namespace cosmos
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fstore_2fv1beta1_2fcommit_5finfo_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fstore_2fv1beta1_2fcommit_5finfo_2eproto = nullptr;
const ::uint32_t
    TableStruct_cosmos_2fstore_2fv1beta1_2fcommit_5finfo_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::cosmos::store::v1beta1::CommitInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cosmos::store::v1beta1::CommitInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::store::v1beta1::CommitInfo, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::cosmos::store::v1beta1::CommitInfo, _impl_.store_infos_),
        PROTOBUF_FIELD_OFFSET(::cosmos::store::v1beta1::CommitInfo, _impl_.timestamp_),
        ~0u,
        ~0u,
        0,
        PROTOBUF_FIELD_OFFSET(::cosmos::store::v1beta1::StoreInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::cosmos::store::v1beta1::StoreInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::store::v1beta1::StoreInfo, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::cosmos::store::v1beta1::StoreInfo, _impl_.commit_id_),
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cosmos::store::v1beta1::CommitID, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cosmos::store::v1beta1::CommitID, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::cosmos::store::v1beta1::CommitID, _impl_.hash_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::cosmos::store::v1beta1::CommitInfo)},
        {14, 24, -1, sizeof(::cosmos::store::v1beta1::StoreInfo)},
        {26, -1, -1, sizeof(::cosmos::store::v1beta1::CommitID)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::store::v1beta1::_CommitInfo_default_instance_._instance,
    &::cosmos::store::v1beta1::_StoreInfo_default_instance_._instance,
    &::cosmos::store::v1beta1::_CommitID_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fstore_2fv1beta1_2fcommit_5finfo_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n&cosmos/store/v1beta1/commit_info.proto"
    "\022\024cosmos.store.v1beta1\032\024gogoproto/gogo.p"
    "roto\032\037google/protobuf/timestamp.proto\"\262\001"
    "\n\nCommitInfo\022\030\n\007version\030\001 \001(\003R\007version\022F"
    "\n\013store_infos\030\002 \003(\0132\037.cosmos.store.v1bet"
    "a1.StoreInfoB\004\310\336\037\000R\nstoreInfos\022B\n\ttimest"
    "amp\030\003 \001(\0132\032.google.protobuf.TimestampB\010\310"
    "\336\037\000\220\337\037\001R\ttimestamp\"b\n\tStoreInfo\022\022\n\004name\030"
    "\001 \001(\tR\004name\022A\n\tcommit_id\030\002 \001(\0132\036.cosmos."
    "store.v1beta1.CommitIDB\004\310\336\037\000R\010commitId\">"
    "\n\010CommitID\022\030\n\007version\030\001 \001(\003R\007version\022\022\n\004"
    "hash\030\002 \001(\014R\004hash:\004\230\240\037\000B\032Z\030cosmossdk.io/s"
    "tore/typesb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fstore_2fv1beta1_2fcommit_5finfo_2eproto_deps[2] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fstore_2fv1beta1_2fcommit_5finfo_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_cosmos_2fstore_2fv1beta1_2fcommit_5finfo_2eproto = {
    false,
    false,
    498,
    descriptor_table_protodef_cosmos_2fstore_2fv1beta1_2fcommit_5finfo_2eproto,
    "cosmos/store/v1beta1/commit_info.proto",
    &descriptor_table_cosmos_2fstore_2fv1beta1_2fcommit_5finfo_2eproto_once,
    descriptor_table_cosmos_2fstore_2fv1beta1_2fcommit_5finfo_2eproto_deps,
    2,
    3,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fstore_2fv1beta1_2fcommit_5finfo_2eproto::offsets,
    file_level_enum_descriptors_cosmos_2fstore_2fv1beta1_2fcommit_5finfo_2eproto,
    file_level_service_descriptors_cosmos_2fstore_2fv1beta1_2fcommit_5finfo_2eproto,
};
namespace cosmos {
namespace store {
namespace v1beta1 {
// ===================================================================

class CommitInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CommitInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CommitInfo, _impl_._has_bits_);
};

void CommitInfo::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CommitInfo::CommitInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.store.v1beta1.CommitInfo)
}
inline PROTOBUF_NDEBUG_INLINE CommitInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::store::v1beta1::CommitInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        store_infos_{visibility, arena, from.store_infos_} {}

CommitInfo::CommitInfo(
    ::google::protobuf::Arena* arena,
    const CommitInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CommitInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timestamp_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.timestamp_)
                        : nullptr;
  _impl_.version_ = from._impl_.version_;

  // @@protoc_insertion_point(copy_constructor:cosmos.store.v1beta1.CommitInfo)
}
inline PROTOBUF_NDEBUG_INLINE CommitInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        store_infos_{visibility, arena} {}

inline void CommitInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, version_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::version_));
}
CommitInfo::~CommitInfo() {
  // @@protoc_insertion_point(destructor:cosmos.store.v1beta1.CommitInfo)
  SharedDtor(*this);
}
inline void CommitInfo::SharedDtor(MessageLite& self) {
  CommitInfo& this_ = static_cast<CommitInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.timestamp_;
  this_._impl_.~Impl_();
}

inline void* CommitInfo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CommitInfo(arena);
}
constexpr auto CommitInfo::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(CommitInfo, _impl_.store_infos_) +
          decltype(CommitInfo::_impl_.store_infos_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(CommitInfo), alignof(CommitInfo), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&CommitInfo::PlacementNew_,
                                 sizeof(CommitInfo),
                                 alignof(CommitInfo));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CommitInfo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CommitInfo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CommitInfo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CommitInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CommitInfo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CommitInfo>(), &CommitInfo::ByteSizeLong,
            &CommitInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CommitInfo, _impl_._cached_size_),
        false,
    },
    &CommitInfo::kDescriptorMethods,
    &descriptor_table_cosmos_2fstore_2fv1beta1_2fcommit_5finfo_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CommitInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> CommitInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CommitInfo, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::store::v1beta1::CommitInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 version = 1 [json_name = "version"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CommitInfo, _impl_.version_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CommitInfo, _impl_.version_)}},
    // repeated .cosmos.store.v1beta1.StoreInfo store_infos = 2 [json_name = "storeInfos", (.gogoproto.nullable) = false];
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CommitInfo, _impl_.store_infos_)}},
    // .google.protobuf.Timestamp timestamp = 3 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 1, PROTOBUF_FIELD_OFFSET(CommitInfo, _impl_.timestamp_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 version = 1 [json_name = "version"];
    {PROTOBUF_FIELD_OFFSET(CommitInfo, _impl_.version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // repeated .cosmos.store.v1beta1.StoreInfo store_infos = 2 [json_name = "storeInfos", (.gogoproto.nullable) = false];
    {PROTOBUF_FIELD_OFFSET(CommitInfo, _impl_.store_infos_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp timestamp = 3 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
    {PROTOBUF_FIELD_OFFSET(CommitInfo, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cosmos::store::v1beta1::StoreInfo>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void CommitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.store.v1beta1.CommitInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.store_infos_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timestamp_ != nullptr);
    _impl_.timestamp_->Clear();
  }
  _impl_.version_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CommitInfo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CommitInfo& this_ = static_cast<const CommitInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CommitInfo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CommitInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.store.v1beta1.CommitInfo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int64 version = 1 [json_name = "version"];
          if (this_._internal_version() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<1>(
                    stream, this_._internal_version(), target);
          }

          // repeated .cosmos.store.v1beta1.StoreInfo store_infos = 2 [json_name = "storeInfos", (.gogoproto.nullable) = false];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_store_infos_size());
               i < n; i++) {
            const auto& repfield = this_._internal_store_infos().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp timestamp = 3 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.timestamp_, this_._impl_.timestamp_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.store.v1beta1.CommitInfo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CommitInfo::ByteSizeLong(const MessageLite& base) {
          const CommitInfo& this_ = static_cast<const CommitInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CommitInfo::ByteSizeLong() const {
          const CommitInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.store.v1beta1.CommitInfo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .cosmos.store.v1beta1.StoreInfo store_infos = 2 [json_name = "storeInfos", (.gogoproto.nullable) = false];
            {
              total_size += 1UL * this_._internal_store_infos_size();
              for (const auto& msg : this_._internal_store_infos()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // .google.protobuf.Timestamp timestamp = 3 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.timestamp_);
            }
          }
           {
            // int64 version = 1 [json_name = "version"];
            if (this_._internal_version() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_version());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CommitInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CommitInfo*>(&to_msg);
  auto& from = static_cast<const CommitInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.store.v1beta1.CommitInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_store_infos()->MergeFrom(
      from._internal_store_infos());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.timestamp_ != nullptr);
    if (_this->_impl_.timestamp_ == nullptr) {
      _this->_impl_.timestamp_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_);
    } else {
      _this->_impl_.timestamp_->MergeFrom(*from._impl_.timestamp_);
    }
  }
  if (from._internal_version() != 0) {
    _this->_impl_.version_ = from._impl_.version_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CommitInfo::CopyFrom(const CommitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.store.v1beta1.CommitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CommitInfo::InternalSwap(CommitInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.store_infos_.InternalSwap(&other->_impl_.store_infos_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommitInfo, _impl_.version_)
      + sizeof(CommitInfo::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(CommitInfo, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata CommitInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class StoreInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<StoreInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(StoreInfo, _impl_._has_bits_);
};

StoreInfo::StoreInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.store.v1beta1.StoreInfo)
}
inline PROTOBUF_NDEBUG_INLINE StoreInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::store::v1beta1::StoreInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_) {}

StoreInfo::StoreInfo(
    ::google::protobuf::Arena* arena,
    const StoreInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  StoreInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.commit_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::cosmos::store::v1beta1::CommitID>(
                              arena, *from._impl_.commit_id_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:cosmos.store.v1beta1.StoreInfo)
}
inline PROTOBUF_NDEBUG_INLINE StoreInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena) {}

inline void StoreInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.commit_id_ = {};
}
StoreInfo::~StoreInfo() {
  // @@protoc_insertion_point(destructor:cosmos.store.v1beta1.StoreInfo)
  SharedDtor(*this);
}
inline void StoreInfo::SharedDtor(MessageLite& self) {
  StoreInfo& this_ = static_cast<StoreInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  delete this_._impl_.commit_id_;
  this_._impl_.~Impl_();
}

inline void* StoreInfo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) StoreInfo(arena);
}
constexpr auto StoreInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(StoreInfo),
                                            alignof(StoreInfo));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull StoreInfo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_StoreInfo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &StoreInfo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<StoreInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &StoreInfo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<StoreInfo>(), &StoreInfo::ByteSizeLong,
            &StoreInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(StoreInfo, _impl_._cached_size_),
        false,
    },
    &StoreInfo::kDescriptorMethods,
    &descriptor_table_cosmos_2fstore_2fv1beta1_2fcommit_5finfo_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* StoreInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 43, 2> StoreInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StoreInfo, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::store::v1beta1::StoreInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .cosmos.store.v1beta1.CommitID commit_id = 2 [json_name = "commitId", (.gogoproto.nullable) = false];
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(StoreInfo, _impl_.commit_id_)}},
    // string name = 1 [json_name = "name"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(StoreInfo, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1 [json_name = "name"];
    {PROTOBUF_FIELD_OFFSET(StoreInfo, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .cosmos.store.v1beta1.CommitID commit_id = 2 [json_name = "commitId", (.gogoproto.nullable) = false];
    {PROTOBUF_FIELD_OFFSET(StoreInfo, _impl_.commit_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cosmos::store::v1beta1::CommitID>()},
  }}, {{
    "\36\4\0\0\0\0\0\0"
    "cosmos.store.v1beta1.StoreInfo"
    "name"
  }},
};

PROTOBUF_NOINLINE void StoreInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.store.v1beta1.StoreInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.commit_id_ != nullptr);
    _impl_.commit_id_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* StoreInfo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const StoreInfo& this_ = static_cast<const StoreInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* StoreInfo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const StoreInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.store.v1beta1.StoreInfo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string name = 1 [json_name = "name"];
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "cosmos.store.v1beta1.StoreInfo.name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .cosmos.store.v1beta1.CommitID commit_id = 2 [json_name = "commitId", (.gogoproto.nullable) = false];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.commit_id_, this_._impl_.commit_id_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.store.v1beta1.StoreInfo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t StoreInfo::ByteSizeLong(const MessageLite& base) {
          const StoreInfo& this_ = static_cast<const StoreInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t StoreInfo::ByteSizeLong() const {
          const StoreInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.store.v1beta1.StoreInfo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string name = 1 [json_name = "name"];
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
          }
           {
            // .cosmos.store.v1beta1.CommitID commit_id = 2 [json_name = "commitId", (.gogoproto.nullable) = false];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.commit_id_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void StoreInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StoreInfo*>(&to_msg);
  auto& from = static_cast<const StoreInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.store.v1beta1.StoreInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.commit_id_ != nullptr);
    if (_this->_impl_.commit_id_ == nullptr) {
      _this->_impl_.commit_id_ =
          ::google::protobuf::Message::CopyConstruct<::cosmos::store::v1beta1::CommitID>(arena, *from._impl_.commit_id_);
    } else {
      _this->_impl_.commit_id_->MergeFrom(*from._impl_.commit_id_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StoreInfo::CopyFrom(const StoreInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.store.v1beta1.StoreInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StoreInfo::InternalSwap(StoreInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  swap(_impl_.commit_id_, other->_impl_.commit_id_);
}

::google::protobuf::Metadata StoreInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CommitID::_Internal {
 public:
};

CommitID::CommitID(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.store.v1beta1.CommitID)
}
inline PROTOBUF_NDEBUG_INLINE CommitID::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cosmos::store::v1beta1::CommitID& from_msg)
      : hash_(arena, from.hash_),
        _cached_size_{0} {}

CommitID::CommitID(
    ::google::protobuf::Arena* arena,
    const CommitID& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CommitID* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.version_ = from._impl_.version_;

  // @@protoc_insertion_point(copy_constructor:cosmos.store.v1beta1.CommitID)
}
inline PROTOBUF_NDEBUG_INLINE CommitID::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : hash_(arena),
        _cached_size_{0} {}

inline void CommitID::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.version_ = {};
}
CommitID::~CommitID() {
  // @@protoc_insertion_point(destructor:cosmos.store.v1beta1.CommitID)
  SharedDtor(*this);
}
inline void CommitID::SharedDtor(MessageLite& self) {
  CommitID& this_ = static_cast<CommitID&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.hash_.Destroy();
  this_._impl_.~Impl_();
}

inline void* CommitID::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CommitID(arena);
}
constexpr auto CommitID::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CommitID),
                                            alignof(CommitID));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CommitID::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CommitID_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CommitID::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CommitID>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CommitID::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CommitID>(), &CommitID::ByteSizeLong,
            &CommitID::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CommitID, _impl_._cached_size_),
        false,
    },
    &CommitID::kDescriptorMethods,
    &descriptor_table_cosmos_2fstore_2fv1beta1_2fcommit_5finfo_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CommitID::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> CommitID::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cosmos::store::v1beta1::CommitID>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bytes hash = 2 [json_name = "hash"];
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CommitID, _impl_.hash_)}},
    // int64 version = 1 [json_name = "version"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CommitID, _impl_.version_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CommitID, _impl_.version_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 version = 1 [json_name = "version"];
    {PROTOBUF_FIELD_OFFSET(CommitID, _impl_.version_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // bytes hash = 2 [json_name = "hash"];
    {PROTOBUF_FIELD_OFFSET(CommitID, _impl_.hash_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void CommitID::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.store.v1beta1.CommitID)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hash_.ClearToEmpty();
  _impl_.version_ = ::int64_t{0};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CommitID::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CommitID& this_ = static_cast<const CommitID&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CommitID::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CommitID& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cosmos.store.v1beta1.CommitID)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int64 version = 1 [json_name = "version"];
          if (this_._internal_version() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<1>(
                    stream, this_._internal_version(), target);
          }

          // bytes hash = 2 [json_name = "hash"];
          if (!this_._internal_hash().empty()) {
            const std::string& _s = this_._internal_hash();
            target = stream->WriteBytesMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cosmos.store.v1beta1.CommitID)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CommitID::ByteSizeLong(const MessageLite& base) {
          const CommitID& this_ = static_cast<const CommitID&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CommitID::ByteSizeLong() const {
          const CommitID& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cosmos.store.v1beta1.CommitID)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bytes hash = 2 [json_name = "hash"];
            if (!this_._internal_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_hash());
            }
            // int64 version = 1 [json_name = "version"];
            if (this_._internal_version() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_version());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CommitID::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CommitID*>(&to_msg);
  auto& from = static_cast<const CommitID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.store.v1beta1.CommitID)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (from._internal_version() != 0) {
    _this->_impl_.version_ = from._impl_.version_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CommitID::CopyFrom(const CommitID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.store.v1beta1.CommitID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CommitID::InternalSwap(CommitID* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, &other->_impl_.hash_, arena);
        swap(_impl_.version_, other->_impl_.version_);
}

::google::protobuf::Metadata CommitID::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace store
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_cosmos_2fstore_2fv1beta1_2fcommit_5finfo_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
