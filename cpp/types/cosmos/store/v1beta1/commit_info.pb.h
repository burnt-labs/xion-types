// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/store/v1beta1/commit_info.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2fstore_2fv1beta1_2fcommit_5finfo_2eproto_2epb_2eh
#define cosmos_2fstore_2fv1beta1_2fcommit_5finfo_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fstore_2fv1beta1_2fcommit_5finfo_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fstore_2fv1beta1_2fcommit_5finfo_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2fstore_2fv1beta1_2fcommit_5finfo_2eproto;
namespace cosmos {
namespace store {
namespace v1beta1 {
class CommitID;
struct CommitIDDefaultTypeInternal;
extern CommitIDDefaultTypeInternal _CommitID_default_instance_;
class CommitInfo;
struct CommitInfoDefaultTypeInternal;
extern CommitInfoDefaultTypeInternal _CommitInfo_default_instance_;
class StoreInfo;
struct StoreInfoDefaultTypeInternal;
extern StoreInfoDefaultTypeInternal _StoreInfo_default_instance_;
}  // namespace v1beta1
}  // namespace store
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace store {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class CommitID final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.store.v1beta1.CommitID) */ {
 public:
  inline CommitID() : CommitID(nullptr) {}
  ~CommitID() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CommitID* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CommitID));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CommitID(
      ::google::protobuf::internal::ConstantInitialized);

  inline CommitID(const CommitID& from) : CommitID(nullptr, from) {}
  inline CommitID(CommitID&& from) noexcept
      : CommitID(nullptr, std::move(from)) {}
  inline CommitID& operator=(const CommitID& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommitID& operator=(CommitID&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommitID& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommitID* internal_default_instance() {
    return reinterpret_cast<const CommitID*>(
        &_CommitID_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(CommitID& a, CommitID& b) { a.Swap(&b); }
  inline void Swap(CommitID* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommitID* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommitID* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CommitID>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CommitID& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CommitID& from) { CommitID::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CommitID* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.store.v1beta1.CommitID"; }

 protected:
  explicit CommitID(::google::protobuf::Arena* arena);
  CommitID(::google::protobuf::Arena* arena, const CommitID& from);
  CommitID(::google::protobuf::Arena* arena, CommitID&& from) noexcept
      : CommitID(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHashFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // bytes hash = 2 [json_name = "hash"];
  void clear_hash() ;
  const std::string& hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hash(Arg_&& arg, Args_... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* value);

  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(
      const std::string& value);
  std::string* _internal_mutable_hash();

  public:
  // int64 version = 1 [json_name = "version"];
  void clear_version() ;
  ::int64_t version() const;
  void set_version(::int64_t value);

  private:
  ::int64_t _internal_version() const;
  void _internal_set_version(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.store.v1beta1.CommitID)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CommitID& from_msg);
    ::google::protobuf::internal::ArenaStringPtr hash_;
    ::int64_t version_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fstore_2fv1beta1_2fcommit_5finfo_2eproto;
};
// -------------------------------------------------------------------

class StoreInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.store.v1beta1.StoreInfo) */ {
 public:
  inline StoreInfo() : StoreInfo(nullptr) {}
  ~StoreInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StoreInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StoreInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StoreInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline StoreInfo(const StoreInfo& from) : StoreInfo(nullptr, from) {}
  inline StoreInfo(StoreInfo&& from) noexcept
      : StoreInfo(nullptr, std::move(from)) {}
  inline StoreInfo& operator=(const StoreInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreInfo& operator=(StoreInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StoreInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const StoreInfo* internal_default_instance() {
    return reinterpret_cast<const StoreInfo*>(
        &_StoreInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(StoreInfo& a, StoreInfo& b) { a.Swap(&b); }
  inline void Swap(StoreInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoreInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StoreInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StoreInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StoreInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StoreInfo& from) { StoreInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StoreInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.store.v1beta1.StoreInfo"; }

 protected:
  explicit StoreInfo(::google::protobuf::Arena* arena);
  StoreInfo(::google::protobuf::Arena* arena, const StoreInfo& from);
  StoreInfo(::google::protobuf::Arena* arena, StoreInfo&& from) noexcept
      : StoreInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kCommitIdFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .cosmos.store.v1beta1.CommitID commit_id = 2 [json_name = "commitId", (.gogoproto.nullable) = false];
  bool has_commit_id() const;
  void clear_commit_id() ;
  const ::cosmos::store::v1beta1::CommitID& commit_id() const;
  PROTOBUF_NODISCARD ::cosmos::store::v1beta1::CommitID* release_commit_id();
  ::cosmos::store::v1beta1::CommitID* mutable_commit_id();
  void set_allocated_commit_id(::cosmos::store::v1beta1::CommitID* value);
  void unsafe_arena_set_allocated_commit_id(::cosmos::store::v1beta1::CommitID* value);
  ::cosmos::store::v1beta1::CommitID* unsafe_arena_release_commit_id();

  private:
  const ::cosmos::store::v1beta1::CommitID& _internal_commit_id() const;
  ::cosmos::store::v1beta1::CommitID* _internal_mutable_commit_id();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.store.v1beta1.StoreInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      43, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StoreInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::cosmos::store::v1beta1::CommitID* commit_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fstore_2fv1beta1_2fcommit_5finfo_2eproto;
};
// -------------------------------------------------------------------

class CommitInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.store.v1beta1.CommitInfo) */ {
 public:
  inline CommitInfo() : CommitInfo(nullptr) {}
  ~CommitInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CommitInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CommitInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CommitInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline CommitInfo(const CommitInfo& from) : CommitInfo(nullptr, from) {}
  inline CommitInfo(CommitInfo&& from) noexcept
      : CommitInfo(nullptr, std::move(from)) {}
  inline CommitInfo& operator=(const CommitInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommitInfo& operator=(CommitInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommitInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommitInfo* internal_default_instance() {
    return reinterpret_cast<const CommitInfo*>(
        &_CommitInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(CommitInfo& a, CommitInfo& b) { a.Swap(&b); }
  inline void Swap(CommitInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommitInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommitInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CommitInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CommitInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CommitInfo& from) { CommitInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CommitInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.store.v1beta1.CommitInfo"; }

 protected:
  explicit CommitInfo(::google::protobuf::Arena* arena);
  CommitInfo(::google::protobuf::Arena* arena, const CommitInfo& from);
  CommitInfo(::google::protobuf::Arena* arena, CommitInfo&& from) noexcept
      : CommitInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStoreInfosFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kVersionFieldNumber = 1,
  };
  // repeated .cosmos.store.v1beta1.StoreInfo store_infos = 2 [json_name = "storeInfos", (.gogoproto.nullable) = false];
  int store_infos_size() const;
  private:
  int _internal_store_infos_size() const;

  public:
  void clear_store_infos() ;
  ::cosmos::store::v1beta1::StoreInfo* mutable_store_infos(int index);
  ::google::protobuf::RepeatedPtrField<::cosmos::store::v1beta1::StoreInfo>* mutable_store_infos();

  private:
  const ::google::protobuf::RepeatedPtrField<::cosmos::store::v1beta1::StoreInfo>& _internal_store_infos() const;
  ::google::protobuf::RepeatedPtrField<::cosmos::store::v1beta1::StoreInfo>* _internal_mutable_store_infos();
  public:
  const ::cosmos::store::v1beta1::StoreInfo& store_infos(int index) const;
  ::cosmos::store::v1beta1::StoreInfo* add_store_infos();
  const ::google::protobuf::RepeatedPtrField<::cosmos::store::v1beta1::StoreInfo>& store_infos() const;
  // .google.protobuf.Timestamp timestamp = 3 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::google::protobuf::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_timestamp();

  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  ::google::protobuf::Timestamp* _internal_mutable_timestamp();

  public:
  // int64 version = 1 [json_name = "version"];
  void clear_version() ;
  ::int64_t version() const;
  void set_version(::int64_t value);

  private:
  ::int64_t _internal_version() const;
  void _internal_set_version(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.store.v1beta1.CommitInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CommitInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::cosmos::store::v1beta1::StoreInfo > store_infos_;
    ::google::protobuf::Timestamp* timestamp_;
    ::int64_t version_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fstore_2fv1beta1_2fcommit_5finfo_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CommitInfo

// int64 version = 1 [json_name = "version"];
inline void CommitInfo::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = ::int64_t{0};
}
inline ::int64_t CommitInfo::version() const {
  // @@protoc_insertion_point(field_get:cosmos.store.v1beta1.CommitInfo.version)
  return _internal_version();
}
inline void CommitInfo::set_version(::int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:cosmos.store.v1beta1.CommitInfo.version)
}
inline ::int64_t CommitInfo::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_;
}
inline void CommitInfo::_internal_set_version(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = value;
}

// repeated .cosmos.store.v1beta1.StoreInfo store_infos = 2 [json_name = "storeInfos", (.gogoproto.nullable) = false];
inline int CommitInfo::_internal_store_infos_size() const {
  return _internal_store_infos().size();
}
inline int CommitInfo::store_infos_size() const {
  return _internal_store_infos_size();
}
inline void CommitInfo::clear_store_infos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.store_infos_.Clear();
}
inline ::cosmos::store::v1beta1::StoreInfo* CommitInfo::mutable_store_infos(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.store.v1beta1.CommitInfo.store_infos)
  return _internal_mutable_store_infos()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::store::v1beta1::StoreInfo>* CommitInfo::mutable_store_infos()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.store.v1beta1.CommitInfo.store_infos)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_store_infos();
}
inline const ::cosmos::store::v1beta1::StoreInfo& CommitInfo::store_infos(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.store.v1beta1.CommitInfo.store_infos)
  return _internal_store_infos().Get(index);
}
inline ::cosmos::store::v1beta1::StoreInfo* CommitInfo::add_store_infos() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::cosmos::store::v1beta1::StoreInfo* _add = _internal_mutable_store_infos()->Add();
  // @@protoc_insertion_point(field_add:cosmos.store.v1beta1.CommitInfo.store_infos)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::store::v1beta1::StoreInfo>& CommitInfo::store_infos() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.store.v1beta1.CommitInfo.store_infos)
  return _internal_store_infos();
}
inline const ::google::protobuf::RepeatedPtrField<::cosmos::store::v1beta1::StoreInfo>&
CommitInfo::_internal_store_infos() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.store_infos_;
}
inline ::google::protobuf::RepeatedPtrField<::cosmos::store::v1beta1::StoreInfo>*
CommitInfo::_internal_mutable_store_infos() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.store_infos_;
}

// .google.protobuf.Timestamp timestamp = 3 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool CommitInfo::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& CommitInfo::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& CommitInfo::timestamp() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.store.v1beta1.CommitInfo.timestamp)
  return _internal_timestamp();
}
inline void CommitInfo::unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.store.v1beta1.CommitInfo.timestamp)
}
inline ::google::protobuf::Timestamp* CommitInfo::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* CommitInfo::unsafe_arena_release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.store.v1beta1.CommitInfo.timestamp)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* CommitInfo::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timestamp_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.timestamp_;
}
inline ::google::protobuf::Timestamp* CommitInfo::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:cosmos.store.v1beta1.CommitInfo.timestamp)
  return _msg;
}
inline void CommitInfo::set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.store.v1beta1.CommitInfo.timestamp)
}

// -------------------------------------------------------------------

// StoreInfo

// string name = 1 [json_name = "name"];
inline void StoreInfo::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& StoreInfo::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.store.v1beta1.StoreInfo.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StoreInfo::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.store.v1beta1.StoreInfo.name)
}
inline std::string* StoreInfo::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cosmos.store.v1beta1.StoreInfo.name)
  return _s;
}
inline const std::string& StoreInfo::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void StoreInfo::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* StoreInfo::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* StoreInfo::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.store.v1beta1.StoreInfo.name)
  return _impl_.name_.Release();
}
inline void StoreInfo::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.store.v1beta1.StoreInfo.name)
}

// .cosmos.store.v1beta1.CommitID commit_id = 2 [json_name = "commitId", (.gogoproto.nullable) = false];
inline bool StoreInfo::has_commit_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.commit_id_ != nullptr);
  return value;
}
inline void StoreInfo::clear_commit_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.commit_id_ != nullptr) _impl_.commit_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::store::v1beta1::CommitID& StoreInfo::_internal_commit_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::store::v1beta1::CommitID* p = _impl_.commit_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::store::v1beta1::CommitID&>(::cosmos::store::v1beta1::_CommitID_default_instance_);
}
inline const ::cosmos::store::v1beta1::CommitID& StoreInfo::commit_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.store.v1beta1.StoreInfo.commit_id)
  return _internal_commit_id();
}
inline void StoreInfo::unsafe_arena_set_allocated_commit_id(::cosmos::store::v1beta1::CommitID* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.commit_id_);
  }
  _impl_.commit_id_ = reinterpret_cast<::cosmos::store::v1beta1::CommitID*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.store.v1beta1.StoreInfo.commit_id)
}
inline ::cosmos::store::v1beta1::CommitID* StoreInfo::release_commit_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::store::v1beta1::CommitID* released = _impl_.commit_id_;
  _impl_.commit_id_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::store::v1beta1::CommitID* StoreInfo::unsafe_arena_release_commit_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.store.v1beta1.StoreInfo.commit_id)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::store::v1beta1::CommitID* temp = _impl_.commit_id_;
  _impl_.commit_id_ = nullptr;
  return temp;
}
inline ::cosmos::store::v1beta1::CommitID* StoreInfo::_internal_mutable_commit_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.commit_id_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::store::v1beta1::CommitID>(GetArena());
    _impl_.commit_id_ = reinterpret_cast<::cosmos::store::v1beta1::CommitID*>(p);
  }
  return _impl_.commit_id_;
}
inline ::cosmos::store::v1beta1::CommitID* StoreInfo::mutable_commit_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::store::v1beta1::CommitID* _msg = _internal_mutable_commit_id();
  // @@protoc_insertion_point(field_mutable:cosmos.store.v1beta1.StoreInfo.commit_id)
  return _msg;
}
inline void StoreInfo::set_allocated_commit_id(::cosmos::store::v1beta1::CommitID* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.commit_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.commit_id_ = reinterpret_cast<::cosmos::store::v1beta1::CommitID*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.store.v1beta1.StoreInfo.commit_id)
}

// -------------------------------------------------------------------

// CommitID

// int64 version = 1 [json_name = "version"];
inline void CommitID::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = ::int64_t{0};
}
inline ::int64_t CommitID::version() const {
  // @@protoc_insertion_point(field_get:cosmos.store.v1beta1.CommitID.version)
  return _internal_version();
}
inline void CommitID::set_version(::int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:cosmos.store.v1beta1.CommitID.version)
}
inline ::int64_t CommitID::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_;
}
inline void CommitID::_internal_set_version(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = value;
}

// bytes hash = 2 [json_name = "hash"];
inline void CommitID::clear_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& CommitID::hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.store.v1beta1.CommitID.hash)
  return _internal_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommitID::set_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.store.v1beta1.CommitID.hash)
}
inline std::string* CommitID::mutable_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:cosmos.store.v1beta1.CommitID.hash)
  return _s;
}
inline const std::string& CommitID::_internal_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hash_.Get();
}
inline void CommitID::_internal_set_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.Set(value, GetArena());
}
inline std::string* CommitID::_internal_mutable_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hash_.Mutable( GetArena());
}
inline std::string* CommitID::release_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.store.v1beta1.CommitID.hash)
  return _impl_.hash_.Release();
}
inline void CommitID::set_allocated_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.store.v1beta1.CommitID.hash)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace store
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2fstore_2fv1beta1_2fcommit_5finfo_2eproto_2epb_2eh
