// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cosmos/store/snapshots/v1/snapshot.proto
// Protobuf C++ Version: 5.29.4

#ifndef cosmos_2fstore_2fsnapshots_2fv1_2fsnapshot_2eproto_2epb_2eh
#define cosmos_2fstore_2fsnapshots_2fv1_2fsnapshot_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029004
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos_proto/cosmos.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fstore_2fsnapshots_2fv1_2fsnapshot_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fstore_2fsnapshots_2fv1_2fsnapshot_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cosmos_2fstore_2fsnapshots_2fv1_2fsnapshot_2eproto;
namespace cosmos {
namespace store {
namespace snapshots {
namespace v1 {
class Metadata;
struct MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class Snapshot;
struct SnapshotDefaultTypeInternal;
extern SnapshotDefaultTypeInternal _Snapshot_default_instance_;
class SnapshotExtensionMeta;
struct SnapshotExtensionMetaDefaultTypeInternal;
extern SnapshotExtensionMetaDefaultTypeInternal _SnapshotExtensionMeta_default_instance_;
class SnapshotExtensionPayload;
struct SnapshotExtensionPayloadDefaultTypeInternal;
extern SnapshotExtensionPayloadDefaultTypeInternal _SnapshotExtensionPayload_default_instance_;
class SnapshotIAVLItem;
struct SnapshotIAVLItemDefaultTypeInternal;
extern SnapshotIAVLItemDefaultTypeInternal _SnapshotIAVLItem_default_instance_;
class SnapshotItem;
struct SnapshotItemDefaultTypeInternal;
extern SnapshotItemDefaultTypeInternal _SnapshotItem_default_instance_;
class SnapshotStoreItem;
struct SnapshotStoreItemDefaultTypeInternal;
extern SnapshotStoreItemDefaultTypeInternal _SnapshotStoreItem_default_instance_;
}  // namespace v1
}  // namespace snapshots
}  // namespace store
}  // namespace cosmos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cosmos {
namespace store {
namespace snapshots {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class SnapshotStoreItem final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.store.snapshots.v1.SnapshotStoreItem) */ {
 public:
  inline SnapshotStoreItem() : SnapshotStoreItem(nullptr) {}
  ~SnapshotStoreItem() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SnapshotStoreItem* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SnapshotStoreItem));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SnapshotStoreItem(
      ::google::protobuf::internal::ConstantInitialized);

  inline SnapshotStoreItem(const SnapshotStoreItem& from) : SnapshotStoreItem(nullptr, from) {}
  inline SnapshotStoreItem(SnapshotStoreItem&& from) noexcept
      : SnapshotStoreItem(nullptr, std::move(from)) {}
  inline SnapshotStoreItem& operator=(const SnapshotStoreItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotStoreItem& operator=(SnapshotStoreItem&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnapshotStoreItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnapshotStoreItem* internal_default_instance() {
    return reinterpret_cast<const SnapshotStoreItem*>(
        &_SnapshotStoreItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(SnapshotStoreItem& a, SnapshotStoreItem& b) { a.Swap(&b); }
  inline void Swap(SnapshotStoreItem* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnapshotStoreItem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnapshotStoreItem* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SnapshotStoreItem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SnapshotStoreItem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SnapshotStoreItem& from) { SnapshotStoreItem::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SnapshotStoreItem* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.store.snapshots.v1.SnapshotStoreItem"; }

 protected:
  explicit SnapshotStoreItem(::google::protobuf::Arena* arena);
  SnapshotStoreItem(::google::protobuf::Arena* arena, const SnapshotStoreItem& from);
  SnapshotStoreItem(::google::protobuf::Arena* arena, SnapshotStoreItem&& from) noexcept
      : SnapshotStoreItem(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.store.snapshots.v1.SnapshotStoreItem)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      56, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SnapshotStoreItem& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fstore_2fsnapshots_2fv1_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class SnapshotIAVLItem final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.store.snapshots.v1.SnapshotIAVLItem) */ {
 public:
  inline SnapshotIAVLItem() : SnapshotIAVLItem(nullptr) {}
  ~SnapshotIAVLItem() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SnapshotIAVLItem* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SnapshotIAVLItem));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SnapshotIAVLItem(
      ::google::protobuf::internal::ConstantInitialized);

  inline SnapshotIAVLItem(const SnapshotIAVLItem& from) : SnapshotIAVLItem(nullptr, from) {}
  inline SnapshotIAVLItem(SnapshotIAVLItem&& from) noexcept
      : SnapshotIAVLItem(nullptr, std::move(from)) {}
  inline SnapshotIAVLItem& operator=(const SnapshotIAVLItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotIAVLItem& operator=(SnapshotIAVLItem&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnapshotIAVLItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnapshotIAVLItem* internal_default_instance() {
    return reinterpret_cast<const SnapshotIAVLItem*>(
        &_SnapshotIAVLItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(SnapshotIAVLItem& a, SnapshotIAVLItem& b) { a.Swap(&b); }
  inline void Swap(SnapshotIAVLItem* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnapshotIAVLItem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnapshotIAVLItem* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SnapshotIAVLItem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SnapshotIAVLItem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SnapshotIAVLItem& from) { SnapshotIAVLItem::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SnapshotIAVLItem* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.store.snapshots.v1.SnapshotIAVLItem"; }

 protected:
  explicit SnapshotIAVLItem(::google::protobuf::Arena* arena);
  SnapshotIAVLItem(::google::protobuf::Arena* arena, const SnapshotIAVLItem& from);
  SnapshotIAVLItem(::google::protobuf::Arena* arena, SnapshotIAVLItem&& from) noexcept
      : SnapshotIAVLItem(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kVersionFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // bytes key = 1 [json_name = "key"];
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // bytes value = 2 [json_name = "value"];
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // int64 version = 3 [json_name = "version"];
  void clear_version() ;
  ::int64_t version() const;
  void set_version(::int64_t value);

  private:
  ::int64_t _internal_version() const;
  void _internal_set_version(::int64_t value);

  public:
  // int32 height = 4 [json_name = "height"];
  void clear_height() ;
  ::int32_t height() const;
  void set_height(::int32_t value);

  private:
  ::int32_t _internal_height() const;
  void _internal_set_height(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.store.snapshots.v1.SnapshotIAVLItem)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SnapshotIAVLItem& from_msg);
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    ::int64_t version_;
    ::int32_t height_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fstore_2fsnapshots_2fv1_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class SnapshotExtensionPayload final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.store.snapshots.v1.SnapshotExtensionPayload) */ {
 public:
  inline SnapshotExtensionPayload() : SnapshotExtensionPayload(nullptr) {}
  ~SnapshotExtensionPayload() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SnapshotExtensionPayload* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SnapshotExtensionPayload));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SnapshotExtensionPayload(
      ::google::protobuf::internal::ConstantInitialized);

  inline SnapshotExtensionPayload(const SnapshotExtensionPayload& from) : SnapshotExtensionPayload(nullptr, from) {}
  inline SnapshotExtensionPayload(SnapshotExtensionPayload&& from) noexcept
      : SnapshotExtensionPayload(nullptr, std::move(from)) {}
  inline SnapshotExtensionPayload& operator=(const SnapshotExtensionPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotExtensionPayload& operator=(SnapshotExtensionPayload&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnapshotExtensionPayload& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnapshotExtensionPayload* internal_default_instance() {
    return reinterpret_cast<const SnapshotExtensionPayload*>(
        &_SnapshotExtensionPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(SnapshotExtensionPayload& a, SnapshotExtensionPayload& b) { a.Swap(&b); }
  inline void Swap(SnapshotExtensionPayload* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnapshotExtensionPayload* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnapshotExtensionPayload* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SnapshotExtensionPayload>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SnapshotExtensionPayload& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SnapshotExtensionPayload& from) { SnapshotExtensionPayload::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SnapshotExtensionPayload* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.store.snapshots.v1.SnapshotExtensionPayload"; }

 protected:
  explicit SnapshotExtensionPayload(::google::protobuf::Arena* arena);
  SnapshotExtensionPayload(::google::protobuf::Arena* arena, const SnapshotExtensionPayload& from);
  SnapshotExtensionPayload(::google::protobuf::Arena* arena, SnapshotExtensionPayload&& from) noexcept
      : SnapshotExtensionPayload(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPayloadFieldNumber = 1,
  };
  // bytes payload = 1 [json_name = "payload"];
  void clear_payload() ;
  const std::string& payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* value);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.store.snapshots.v1.SnapshotExtensionPayload)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SnapshotExtensionPayload& from_msg);
    ::google::protobuf::internal::ArenaStringPtr payload_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fstore_2fsnapshots_2fv1_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class SnapshotExtensionMeta final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.store.snapshots.v1.SnapshotExtensionMeta) */ {
 public:
  inline SnapshotExtensionMeta() : SnapshotExtensionMeta(nullptr) {}
  ~SnapshotExtensionMeta() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SnapshotExtensionMeta* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SnapshotExtensionMeta));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SnapshotExtensionMeta(
      ::google::protobuf::internal::ConstantInitialized);

  inline SnapshotExtensionMeta(const SnapshotExtensionMeta& from) : SnapshotExtensionMeta(nullptr, from) {}
  inline SnapshotExtensionMeta(SnapshotExtensionMeta&& from) noexcept
      : SnapshotExtensionMeta(nullptr, std::move(from)) {}
  inline SnapshotExtensionMeta& operator=(const SnapshotExtensionMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotExtensionMeta& operator=(SnapshotExtensionMeta&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnapshotExtensionMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnapshotExtensionMeta* internal_default_instance() {
    return reinterpret_cast<const SnapshotExtensionMeta*>(
        &_SnapshotExtensionMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(SnapshotExtensionMeta& a, SnapshotExtensionMeta& b) { a.Swap(&b); }
  inline void Swap(SnapshotExtensionMeta* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnapshotExtensionMeta* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnapshotExtensionMeta* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SnapshotExtensionMeta>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SnapshotExtensionMeta& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SnapshotExtensionMeta& from) { SnapshotExtensionMeta::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SnapshotExtensionMeta* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.store.snapshots.v1.SnapshotExtensionMeta"; }

 protected:
  explicit SnapshotExtensionMeta(::google::protobuf::Arena* arena);
  SnapshotExtensionMeta(::google::protobuf::Arena* arena, const SnapshotExtensionMeta& from);
  SnapshotExtensionMeta(::google::protobuf::Arena* arena, SnapshotExtensionMeta&& from) noexcept
      : SnapshotExtensionMeta(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kFormatFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // uint32 format = 2 [json_name = "format"];
  void clear_format() ;
  ::uint32_t format() const;
  void set_format(::uint32_t value);

  private:
  ::uint32_t _internal_format() const;
  void _internal_set_format(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.store.snapshots.v1.SnapshotExtensionMeta)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      60, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SnapshotExtensionMeta& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::uint32_t format_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fstore_2fsnapshots_2fv1_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class Metadata final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.store.snapshots.v1.Metadata) */ {
 public:
  inline Metadata() : Metadata(nullptr) {}
  ~Metadata() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Metadata* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Metadata));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Metadata(
      ::google::protobuf::internal::ConstantInitialized);

  inline Metadata(const Metadata& from) : Metadata(nullptr, from) {}
  inline Metadata(Metadata&& from) noexcept
      : Metadata(nullptr, std::move(from)) {}
  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
        &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Metadata& a, Metadata& b) { a.Swap(&b); }
  inline void Swap(Metadata* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metadata* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Metadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Metadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Metadata& from) { Metadata::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Metadata* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.store.snapshots.v1.Metadata"; }

 protected:
  explicit Metadata(::google::protobuf::Arena* arena);
  Metadata(::google::protobuf::Arena* arena, const Metadata& from);
  Metadata(::google::protobuf::Arena* arena, Metadata&& from) noexcept
      : Metadata(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChunkHashesFieldNumber = 1,
  };
  // repeated bytes chunk_hashes = 1 [json_name = "chunkHashes"];
  int chunk_hashes_size() const;
  private:
  int _internal_chunk_hashes_size() const;

  public:
  void clear_chunk_hashes() ;
  const std::string& chunk_hashes(int index) const;
  std::string* mutable_chunk_hashes(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chunk_hashes(int index, Arg_&& value, Args_... args);
  std::string* add_chunk_hashes();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_chunk_hashes(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& chunk_hashes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_chunk_hashes();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_chunk_hashes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_chunk_hashes();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.store.snapshots.v1.Metadata)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Metadata& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> chunk_hashes_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fstore_2fsnapshots_2fv1_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class SnapshotItem final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.store.snapshots.v1.SnapshotItem) */ {
 public:
  inline SnapshotItem() : SnapshotItem(nullptr) {}
  ~SnapshotItem() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SnapshotItem* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SnapshotItem));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SnapshotItem(
      ::google::protobuf::internal::ConstantInitialized);

  inline SnapshotItem(const SnapshotItem& from) : SnapshotItem(nullptr, from) {}
  inline SnapshotItem(SnapshotItem&& from) noexcept
      : SnapshotItem(nullptr, std::move(from)) {}
  inline SnapshotItem& operator=(const SnapshotItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotItem& operator=(SnapshotItem&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnapshotItem& default_instance() {
    return *internal_default_instance();
  }
  enum ItemCase {
    kStore = 1,
    kIavl = 2,
    kExtension = 3,
    kExtensionPayload = 4,
    ITEM_NOT_SET = 0,
  };
  static inline const SnapshotItem* internal_default_instance() {
    return reinterpret_cast<const SnapshotItem*>(
        &_SnapshotItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(SnapshotItem& a, SnapshotItem& b) { a.Swap(&b); }
  inline void Swap(SnapshotItem* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnapshotItem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnapshotItem* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SnapshotItem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SnapshotItem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SnapshotItem& from) { SnapshotItem::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SnapshotItem* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.store.snapshots.v1.SnapshotItem"; }

 protected:
  explicit SnapshotItem(::google::protobuf::Arena* arena);
  SnapshotItem(::google::protobuf::Arena* arena, const SnapshotItem& from);
  SnapshotItem(::google::protobuf::Arena* arena, SnapshotItem&& from) noexcept
      : SnapshotItem(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStoreFieldNumber = 1,
    kIavlFieldNumber = 2,
    kExtensionFieldNumber = 3,
    kExtensionPayloadFieldNumber = 4,
  };
  // .cosmos.store.snapshots.v1.SnapshotStoreItem store = 1 [json_name = "store"];
  bool has_store() const;
  private:
  bool _internal_has_store() const;

  public:
  void clear_store() ;
  const ::cosmos::store::snapshots::v1::SnapshotStoreItem& store() const;
  PROTOBUF_NODISCARD ::cosmos::store::snapshots::v1::SnapshotStoreItem* release_store();
  ::cosmos::store::snapshots::v1::SnapshotStoreItem* mutable_store();
  void set_allocated_store(::cosmos::store::snapshots::v1::SnapshotStoreItem* value);
  void unsafe_arena_set_allocated_store(::cosmos::store::snapshots::v1::SnapshotStoreItem* value);
  ::cosmos::store::snapshots::v1::SnapshotStoreItem* unsafe_arena_release_store();

  private:
  const ::cosmos::store::snapshots::v1::SnapshotStoreItem& _internal_store() const;
  ::cosmos::store::snapshots::v1::SnapshotStoreItem* _internal_mutable_store();

  public:
  // .cosmos.store.snapshots.v1.SnapshotIAVLItem iavl = 2 [json_name = "iavl", (.gogoproto.customname) = "IAVL"];
  bool has_iavl() const;
  private:
  bool _internal_has_iavl() const;

  public:
  void clear_iavl() ;
  const ::cosmos::store::snapshots::v1::SnapshotIAVLItem& iavl() const;
  PROTOBUF_NODISCARD ::cosmos::store::snapshots::v1::SnapshotIAVLItem* release_iavl();
  ::cosmos::store::snapshots::v1::SnapshotIAVLItem* mutable_iavl();
  void set_allocated_iavl(::cosmos::store::snapshots::v1::SnapshotIAVLItem* value);
  void unsafe_arena_set_allocated_iavl(::cosmos::store::snapshots::v1::SnapshotIAVLItem* value);
  ::cosmos::store::snapshots::v1::SnapshotIAVLItem* unsafe_arena_release_iavl();

  private:
  const ::cosmos::store::snapshots::v1::SnapshotIAVLItem& _internal_iavl() const;
  ::cosmos::store::snapshots::v1::SnapshotIAVLItem* _internal_mutable_iavl();

  public:
  // .cosmos.store.snapshots.v1.SnapshotExtensionMeta extension = 3 [json_name = "extension"];
  bool has_extension() const;
  private:
  bool _internal_has_extension() const;

  public:
  void clear_extension() ;
  const ::cosmos::store::snapshots::v1::SnapshotExtensionMeta& extension() const;
  PROTOBUF_NODISCARD ::cosmos::store::snapshots::v1::SnapshotExtensionMeta* release_extension();
  ::cosmos::store::snapshots::v1::SnapshotExtensionMeta* mutable_extension();
  void set_allocated_extension(::cosmos::store::snapshots::v1::SnapshotExtensionMeta* value);
  void unsafe_arena_set_allocated_extension(::cosmos::store::snapshots::v1::SnapshotExtensionMeta* value);
  ::cosmos::store::snapshots::v1::SnapshotExtensionMeta* unsafe_arena_release_extension();

  private:
  const ::cosmos::store::snapshots::v1::SnapshotExtensionMeta& _internal_extension() const;
  ::cosmos::store::snapshots::v1::SnapshotExtensionMeta* _internal_mutable_extension();

  public:
  // .cosmos.store.snapshots.v1.SnapshotExtensionPayload extension_payload = 4 [json_name = "extensionPayload"];
  bool has_extension_payload() const;
  private:
  bool _internal_has_extension_payload() const;

  public:
  void clear_extension_payload() ;
  const ::cosmos::store::snapshots::v1::SnapshotExtensionPayload& extension_payload() const;
  PROTOBUF_NODISCARD ::cosmos::store::snapshots::v1::SnapshotExtensionPayload* release_extension_payload();
  ::cosmos::store::snapshots::v1::SnapshotExtensionPayload* mutable_extension_payload();
  void set_allocated_extension_payload(::cosmos::store::snapshots::v1::SnapshotExtensionPayload* value);
  void unsafe_arena_set_allocated_extension_payload(::cosmos::store::snapshots::v1::SnapshotExtensionPayload* value);
  ::cosmos::store::snapshots::v1::SnapshotExtensionPayload* unsafe_arena_release_extension_payload();

  private:
  const ::cosmos::store::snapshots::v1::SnapshotExtensionPayload& _internal_extension_payload() const;
  ::cosmos::store::snapshots::v1::SnapshotExtensionPayload* _internal_mutable_extension_payload();

  public:
  void clear_item();
  ItemCase item_case() const;
  // @@protoc_insertion_point(class_scope:cosmos.store.snapshots.v1.SnapshotItem)
 private:
  class _Internal;
  void set_has_store();
  void set_has_iavl();
  void set_has_extension();
  void set_has_extension_payload();
  inline bool has_item() const;
  inline void clear_has_item();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 4, 4,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SnapshotItem& from_msg);
    union ItemUnion {
      constexpr ItemUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::cosmos::store::snapshots::v1::SnapshotStoreItem* store_;
      ::cosmos::store::snapshots::v1::SnapshotIAVLItem* iavl_;
      ::cosmos::store::snapshots::v1::SnapshotExtensionMeta* extension_;
      ::cosmos::store::snapshots::v1::SnapshotExtensionPayload* extension_payload_;
    } item_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fstore_2fsnapshots_2fv1_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class Snapshot final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cosmos.store.snapshots.v1.Snapshot) */ {
 public:
  inline Snapshot() : Snapshot(nullptr) {}
  ~Snapshot() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Snapshot* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Snapshot));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Snapshot(
      ::google::protobuf::internal::ConstantInitialized);

  inline Snapshot(const Snapshot& from) : Snapshot(nullptr, from) {}
  inline Snapshot(Snapshot&& from) noexcept
      : Snapshot(nullptr, std::move(from)) {}
  inline Snapshot& operator=(const Snapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snapshot& operator=(Snapshot&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Snapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const Snapshot* internal_default_instance() {
    return reinterpret_cast<const Snapshot*>(
        &_Snapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Snapshot& a, Snapshot& b) { a.Swap(&b); }
  inline void Swap(Snapshot* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Snapshot* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Snapshot* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Snapshot>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Snapshot& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Snapshot& from) { Snapshot::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Snapshot* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cosmos.store.snapshots.v1.Snapshot"; }

 protected:
  explicit Snapshot(::google::protobuf::Arena* arena);
  Snapshot(::google::protobuf::Arena* arena, const Snapshot& from);
  Snapshot(::google::protobuf::Arena* arena, Snapshot&& from) noexcept
      : Snapshot(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHashFieldNumber = 4,
    kMetadataFieldNumber = 5,
    kHeightFieldNumber = 1,
    kFormatFieldNumber = 2,
    kChunksFieldNumber = 3,
  };
  // bytes hash = 4 [json_name = "hash"];
  void clear_hash() ;
  const std::string& hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hash(Arg_&& arg, Args_... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* value);

  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(
      const std::string& value);
  std::string* _internal_mutable_hash();

  public:
  // .cosmos.store.snapshots.v1.Metadata metadata = 5 [json_name = "metadata", (.gogoproto.nullable) = false];
  bool has_metadata() const;
  void clear_metadata() ;
  const ::cosmos::store::snapshots::v1::Metadata& metadata() const;
  PROTOBUF_NODISCARD ::cosmos::store::snapshots::v1::Metadata* release_metadata();
  ::cosmos::store::snapshots::v1::Metadata* mutable_metadata();
  void set_allocated_metadata(::cosmos::store::snapshots::v1::Metadata* value);
  void unsafe_arena_set_allocated_metadata(::cosmos::store::snapshots::v1::Metadata* value);
  ::cosmos::store::snapshots::v1::Metadata* unsafe_arena_release_metadata();

  private:
  const ::cosmos::store::snapshots::v1::Metadata& _internal_metadata() const;
  ::cosmos::store::snapshots::v1::Metadata* _internal_mutable_metadata();

  public:
  // uint64 height = 1 [json_name = "height"];
  void clear_height() ;
  ::uint64_t height() const;
  void set_height(::uint64_t value);

  private:
  ::uint64_t _internal_height() const;
  void _internal_set_height(::uint64_t value);

  public:
  // uint32 format = 2 [json_name = "format"];
  void clear_format() ;
  ::uint32_t format() const;
  void set_format(::uint32_t value);

  private:
  ::uint32_t _internal_format() const;
  void _internal_set_format(::uint32_t value);

  public:
  // uint32 chunks = 3 [json_name = "chunks"];
  void clear_chunks() ;
  ::uint32_t chunks() const;
  void set_chunks(::uint32_t value);

  private:
  ::uint32_t _internal_chunks() const;
  void _internal_set_chunks(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.store.snapshots.v1.Snapshot)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Snapshot& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr hash_;
    ::cosmos::store::snapshots::v1::Metadata* metadata_;
    ::uint64_t height_;
    ::uint32_t format_;
    ::uint32_t chunks_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fstore_2fsnapshots_2fv1_2fsnapshot_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Snapshot

// uint64 height = 1 [json_name = "height"];
inline void Snapshot::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = ::uint64_t{0u};
}
inline ::uint64_t Snapshot::height() const {
  // @@protoc_insertion_point(field_get:cosmos.store.snapshots.v1.Snapshot.height)
  return _internal_height();
}
inline void Snapshot::set_height(::uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:cosmos.store.snapshots.v1.Snapshot.height)
}
inline ::uint64_t Snapshot::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void Snapshot::_internal_set_height(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// uint32 format = 2 [json_name = "format"];
inline void Snapshot::clear_format() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_ = 0u;
}
inline ::uint32_t Snapshot::format() const {
  // @@protoc_insertion_point(field_get:cosmos.store.snapshots.v1.Snapshot.format)
  return _internal_format();
}
inline void Snapshot::set_format(::uint32_t value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:cosmos.store.snapshots.v1.Snapshot.format)
}
inline ::uint32_t Snapshot::_internal_format() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.format_;
}
inline void Snapshot::_internal_set_format(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_ = value;
}

// uint32 chunks = 3 [json_name = "chunks"];
inline void Snapshot::clear_chunks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunks_ = 0u;
}
inline ::uint32_t Snapshot::chunks() const {
  // @@protoc_insertion_point(field_get:cosmos.store.snapshots.v1.Snapshot.chunks)
  return _internal_chunks();
}
inline void Snapshot::set_chunks(::uint32_t value) {
  _internal_set_chunks(value);
  // @@protoc_insertion_point(field_set:cosmos.store.snapshots.v1.Snapshot.chunks)
}
inline ::uint32_t Snapshot::_internal_chunks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chunks_;
}
inline void Snapshot::_internal_set_chunks(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunks_ = value;
}

// bytes hash = 4 [json_name = "hash"];
inline void Snapshot::clear_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& Snapshot::hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.store.snapshots.v1.Snapshot.hash)
  return _internal_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Snapshot::set_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.store.snapshots.v1.Snapshot.hash)
}
inline std::string* Snapshot::mutable_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:cosmos.store.snapshots.v1.Snapshot.hash)
  return _s;
}
inline const std::string& Snapshot::_internal_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hash_.Get();
}
inline void Snapshot::_internal_set_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.Set(value, GetArena());
}
inline std::string* Snapshot::_internal_mutable_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hash_.Mutable( GetArena());
}
inline std::string* Snapshot::release_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.store.snapshots.v1.Snapshot.hash)
  return _impl_.hash_.Release();
}
inline void Snapshot::set_allocated_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.store.snapshots.v1.Snapshot.hash)
}

// .cosmos.store.snapshots.v1.Metadata metadata = 5 [json_name = "metadata", (.gogoproto.nullable) = false];
inline bool Snapshot::has_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.metadata_ != nullptr);
  return value;
}
inline void Snapshot::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.metadata_ != nullptr) _impl_.metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::store::snapshots::v1::Metadata& Snapshot::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cosmos::store::snapshots::v1::Metadata* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::store::snapshots::v1::Metadata&>(::cosmos::store::snapshots::v1::_Metadata_default_instance_);
}
inline const ::cosmos::store::snapshots::v1::Metadata& Snapshot::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.store.snapshots.v1.Snapshot.metadata)
  return _internal_metadata();
}
inline void Snapshot::unsafe_arena_set_allocated_metadata(::cosmos::store::snapshots::v1::Metadata* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = reinterpret_cast<::cosmos::store::snapshots::v1::Metadata*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.store.snapshots.v1.Snapshot.metadata)
}
inline ::cosmos::store::snapshots::v1::Metadata* Snapshot::release_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::store::snapshots::v1::Metadata* released = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cosmos::store::snapshots::v1::Metadata* Snapshot::unsafe_arena_release_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.store.snapshots.v1.Snapshot.metadata)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::store::snapshots::v1::Metadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::cosmos::store::snapshots::v1::Metadata* Snapshot::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.metadata_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cosmos::store::snapshots::v1::Metadata>(GetArena());
    _impl_.metadata_ = reinterpret_cast<::cosmos::store::snapshots::v1::Metadata*>(p);
  }
  return _impl_.metadata_;
}
inline ::cosmos::store::snapshots::v1::Metadata* Snapshot::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cosmos::store::snapshots::v1::Metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:cosmos.store.snapshots.v1.Snapshot.metadata)
  return _msg;
}
inline void Snapshot::set_allocated_metadata(::cosmos::store::snapshots::v1::Metadata* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.metadata_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.metadata_ = reinterpret_cast<::cosmos::store::snapshots::v1::Metadata*>(value);
  // @@protoc_insertion_point(field_set_allocated:cosmos.store.snapshots.v1.Snapshot.metadata)
}

// -------------------------------------------------------------------

// Metadata

// repeated bytes chunk_hashes = 1 [json_name = "chunkHashes"];
inline int Metadata::_internal_chunk_hashes_size() const {
  return _internal_chunk_hashes().size();
}
inline int Metadata::chunk_hashes_size() const {
  return _internal_chunk_hashes_size();
}
inline void Metadata::clear_chunk_hashes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunk_hashes_.Clear();
}
inline std::string* Metadata::add_chunk_hashes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_chunk_hashes()->Add();
  // @@protoc_insertion_point(field_add_mutable:cosmos.store.snapshots.v1.Metadata.chunk_hashes)
  return _s;
}
inline const std::string& Metadata::chunk_hashes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.store.snapshots.v1.Metadata.chunk_hashes)
  return _internal_chunk_hashes().Get(index);
}
inline std::string* Metadata::mutable_chunk_hashes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cosmos.store.snapshots.v1.Metadata.chunk_hashes)
  return _internal_mutable_chunk_hashes()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void Metadata::set_chunk_hashes(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_chunk_hashes()->Mutable(index),
      std::forward<Arg_>(value), args... , ::google::protobuf::internal::BytesTag{});
  // @@protoc_insertion_point(field_set:cosmos.store.snapshots.v1.Metadata.chunk_hashes)
}
template <typename Arg_, typename... Args_>
inline void Metadata::add_chunk_hashes(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_chunk_hashes(),
                               std::forward<Arg_>(value),
                               args... , ::google::protobuf::internal::BytesTag{});
  // @@protoc_insertion_point(field_add:cosmos.store.snapshots.v1.Metadata.chunk_hashes)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Metadata::chunk_hashes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cosmos.store.snapshots.v1.Metadata.chunk_hashes)
  return _internal_chunk_hashes();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Metadata::mutable_chunk_hashes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cosmos.store.snapshots.v1.Metadata.chunk_hashes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_chunk_hashes();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Metadata::_internal_chunk_hashes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chunk_hashes_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Metadata::_internal_mutable_chunk_hashes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.chunk_hashes_;
}

// -------------------------------------------------------------------

// SnapshotItem

// .cosmos.store.snapshots.v1.SnapshotStoreItem store = 1 [json_name = "store"];
inline bool SnapshotItem::has_store() const {
  return item_case() == kStore;
}
inline bool SnapshotItem::_internal_has_store() const {
  return item_case() == kStore;
}
inline void SnapshotItem::set_has_store() {
  _impl_._oneof_case_[0] = kStore;
}
inline void SnapshotItem::clear_store() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (item_case() == kStore) {
    if (GetArena() == nullptr) {
      delete _impl_.item_.store_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.item_.store_);
    }
    clear_has_item();
  }
}
inline ::cosmos::store::snapshots::v1::SnapshotStoreItem* SnapshotItem::release_store() {
  // @@protoc_insertion_point(field_release:cosmos.store.snapshots.v1.SnapshotItem.store)
  if (item_case() == kStore) {
    clear_has_item();
    auto* temp = _impl_.item_.store_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.store_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cosmos::store::snapshots::v1::SnapshotStoreItem& SnapshotItem::_internal_store() const {
  return item_case() == kStore ? *_impl_.item_.store_ : reinterpret_cast<::cosmos::store::snapshots::v1::SnapshotStoreItem&>(::cosmos::store::snapshots::v1::_SnapshotStoreItem_default_instance_);
}
inline const ::cosmos::store::snapshots::v1::SnapshotStoreItem& SnapshotItem::store() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.store.snapshots.v1.SnapshotItem.store)
  return _internal_store();
}
inline ::cosmos::store::snapshots::v1::SnapshotStoreItem* SnapshotItem::unsafe_arena_release_store() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmos.store.snapshots.v1.SnapshotItem.store)
  if (item_case() == kStore) {
    clear_has_item();
    auto* temp = _impl_.item_.store_;
    _impl_.item_.store_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SnapshotItem::unsafe_arena_set_allocated_store(::cosmos::store::snapshots::v1::SnapshotStoreItem* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_item();
  if (value) {
    set_has_store();
    _impl_.item_.store_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.store.snapshots.v1.SnapshotItem.store)
}
inline ::cosmos::store::snapshots::v1::SnapshotStoreItem* SnapshotItem::_internal_mutable_store() {
  if (item_case() != kStore) {
    clear_item();
    set_has_store();
    _impl_.item_.store_ =
        ::google::protobuf::Message::DefaultConstruct<::cosmos::store::snapshots::v1::SnapshotStoreItem>(GetArena());
  }
  return _impl_.item_.store_;
}
inline ::cosmos::store::snapshots::v1::SnapshotStoreItem* SnapshotItem::mutable_store() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cosmos::store::snapshots::v1::SnapshotStoreItem* _msg = _internal_mutable_store();
  // @@protoc_insertion_point(field_mutable:cosmos.store.snapshots.v1.SnapshotItem.store)
  return _msg;
}

// .cosmos.store.snapshots.v1.SnapshotIAVLItem iavl = 2 [json_name = "iavl", (.gogoproto.customname) = "IAVL"];
inline bool SnapshotItem::has_iavl() const {
  return item_case() == kIavl;
}
inline bool SnapshotItem::_internal_has_iavl() const {
  return item_case() == kIavl;
}
inline void SnapshotItem::set_has_iavl() {
  _impl_._oneof_case_[0] = kIavl;
}
inline void SnapshotItem::clear_iavl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (item_case() == kIavl) {
    if (GetArena() == nullptr) {
      delete _impl_.item_.iavl_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.item_.iavl_);
    }
    clear_has_item();
  }
}
inline ::cosmos::store::snapshots::v1::SnapshotIAVLItem* SnapshotItem::release_iavl() {
  // @@protoc_insertion_point(field_release:cosmos.store.snapshots.v1.SnapshotItem.iavl)
  if (item_case() == kIavl) {
    clear_has_item();
    auto* temp = _impl_.item_.iavl_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.iavl_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cosmos::store::snapshots::v1::SnapshotIAVLItem& SnapshotItem::_internal_iavl() const {
  return item_case() == kIavl ? *_impl_.item_.iavl_ : reinterpret_cast<::cosmos::store::snapshots::v1::SnapshotIAVLItem&>(::cosmos::store::snapshots::v1::_SnapshotIAVLItem_default_instance_);
}
inline const ::cosmos::store::snapshots::v1::SnapshotIAVLItem& SnapshotItem::iavl() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.store.snapshots.v1.SnapshotItem.iavl)
  return _internal_iavl();
}
inline ::cosmos::store::snapshots::v1::SnapshotIAVLItem* SnapshotItem::unsafe_arena_release_iavl() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmos.store.snapshots.v1.SnapshotItem.iavl)
  if (item_case() == kIavl) {
    clear_has_item();
    auto* temp = _impl_.item_.iavl_;
    _impl_.item_.iavl_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SnapshotItem::unsafe_arena_set_allocated_iavl(::cosmos::store::snapshots::v1::SnapshotIAVLItem* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_item();
  if (value) {
    set_has_iavl();
    _impl_.item_.iavl_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.store.snapshots.v1.SnapshotItem.iavl)
}
inline ::cosmos::store::snapshots::v1::SnapshotIAVLItem* SnapshotItem::_internal_mutable_iavl() {
  if (item_case() != kIavl) {
    clear_item();
    set_has_iavl();
    _impl_.item_.iavl_ =
        ::google::protobuf::Message::DefaultConstruct<::cosmos::store::snapshots::v1::SnapshotIAVLItem>(GetArena());
  }
  return _impl_.item_.iavl_;
}
inline ::cosmos::store::snapshots::v1::SnapshotIAVLItem* SnapshotItem::mutable_iavl() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cosmos::store::snapshots::v1::SnapshotIAVLItem* _msg = _internal_mutable_iavl();
  // @@protoc_insertion_point(field_mutable:cosmos.store.snapshots.v1.SnapshotItem.iavl)
  return _msg;
}

// .cosmos.store.snapshots.v1.SnapshotExtensionMeta extension = 3 [json_name = "extension"];
inline bool SnapshotItem::has_extension() const {
  return item_case() == kExtension;
}
inline bool SnapshotItem::_internal_has_extension() const {
  return item_case() == kExtension;
}
inline void SnapshotItem::set_has_extension() {
  _impl_._oneof_case_[0] = kExtension;
}
inline void SnapshotItem::clear_extension() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (item_case() == kExtension) {
    if (GetArena() == nullptr) {
      delete _impl_.item_.extension_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.item_.extension_);
    }
    clear_has_item();
  }
}
inline ::cosmos::store::snapshots::v1::SnapshotExtensionMeta* SnapshotItem::release_extension() {
  // @@protoc_insertion_point(field_release:cosmos.store.snapshots.v1.SnapshotItem.extension)
  if (item_case() == kExtension) {
    clear_has_item();
    auto* temp = _impl_.item_.extension_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.extension_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cosmos::store::snapshots::v1::SnapshotExtensionMeta& SnapshotItem::_internal_extension() const {
  return item_case() == kExtension ? *_impl_.item_.extension_ : reinterpret_cast<::cosmos::store::snapshots::v1::SnapshotExtensionMeta&>(::cosmos::store::snapshots::v1::_SnapshotExtensionMeta_default_instance_);
}
inline const ::cosmos::store::snapshots::v1::SnapshotExtensionMeta& SnapshotItem::extension() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.store.snapshots.v1.SnapshotItem.extension)
  return _internal_extension();
}
inline ::cosmos::store::snapshots::v1::SnapshotExtensionMeta* SnapshotItem::unsafe_arena_release_extension() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmos.store.snapshots.v1.SnapshotItem.extension)
  if (item_case() == kExtension) {
    clear_has_item();
    auto* temp = _impl_.item_.extension_;
    _impl_.item_.extension_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SnapshotItem::unsafe_arena_set_allocated_extension(::cosmos::store::snapshots::v1::SnapshotExtensionMeta* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_item();
  if (value) {
    set_has_extension();
    _impl_.item_.extension_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.store.snapshots.v1.SnapshotItem.extension)
}
inline ::cosmos::store::snapshots::v1::SnapshotExtensionMeta* SnapshotItem::_internal_mutable_extension() {
  if (item_case() != kExtension) {
    clear_item();
    set_has_extension();
    _impl_.item_.extension_ =
        ::google::protobuf::Message::DefaultConstruct<::cosmos::store::snapshots::v1::SnapshotExtensionMeta>(GetArena());
  }
  return _impl_.item_.extension_;
}
inline ::cosmos::store::snapshots::v1::SnapshotExtensionMeta* SnapshotItem::mutable_extension() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cosmos::store::snapshots::v1::SnapshotExtensionMeta* _msg = _internal_mutable_extension();
  // @@protoc_insertion_point(field_mutable:cosmos.store.snapshots.v1.SnapshotItem.extension)
  return _msg;
}

// .cosmos.store.snapshots.v1.SnapshotExtensionPayload extension_payload = 4 [json_name = "extensionPayload"];
inline bool SnapshotItem::has_extension_payload() const {
  return item_case() == kExtensionPayload;
}
inline bool SnapshotItem::_internal_has_extension_payload() const {
  return item_case() == kExtensionPayload;
}
inline void SnapshotItem::set_has_extension_payload() {
  _impl_._oneof_case_[0] = kExtensionPayload;
}
inline void SnapshotItem::clear_extension_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (item_case() == kExtensionPayload) {
    if (GetArena() == nullptr) {
      delete _impl_.item_.extension_payload_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.item_.extension_payload_);
    }
    clear_has_item();
  }
}
inline ::cosmos::store::snapshots::v1::SnapshotExtensionPayload* SnapshotItem::release_extension_payload() {
  // @@protoc_insertion_point(field_release:cosmos.store.snapshots.v1.SnapshotItem.extension_payload)
  if (item_case() == kExtensionPayload) {
    clear_has_item();
    auto* temp = _impl_.item_.extension_payload_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.extension_payload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cosmos::store::snapshots::v1::SnapshotExtensionPayload& SnapshotItem::_internal_extension_payload() const {
  return item_case() == kExtensionPayload ? *_impl_.item_.extension_payload_ : reinterpret_cast<::cosmos::store::snapshots::v1::SnapshotExtensionPayload&>(::cosmos::store::snapshots::v1::_SnapshotExtensionPayload_default_instance_);
}
inline const ::cosmos::store::snapshots::v1::SnapshotExtensionPayload& SnapshotItem::extension_payload() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.store.snapshots.v1.SnapshotItem.extension_payload)
  return _internal_extension_payload();
}
inline ::cosmos::store::snapshots::v1::SnapshotExtensionPayload* SnapshotItem::unsafe_arena_release_extension_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmos.store.snapshots.v1.SnapshotItem.extension_payload)
  if (item_case() == kExtensionPayload) {
    clear_has_item();
    auto* temp = _impl_.item_.extension_payload_;
    _impl_.item_.extension_payload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SnapshotItem::unsafe_arena_set_allocated_extension_payload(::cosmos::store::snapshots::v1::SnapshotExtensionPayload* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_item();
  if (value) {
    set_has_extension_payload();
    _impl_.item_.extension_payload_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.store.snapshots.v1.SnapshotItem.extension_payload)
}
inline ::cosmos::store::snapshots::v1::SnapshotExtensionPayload* SnapshotItem::_internal_mutable_extension_payload() {
  if (item_case() != kExtensionPayload) {
    clear_item();
    set_has_extension_payload();
    _impl_.item_.extension_payload_ =
        ::google::protobuf::Message::DefaultConstruct<::cosmos::store::snapshots::v1::SnapshotExtensionPayload>(GetArena());
  }
  return _impl_.item_.extension_payload_;
}
inline ::cosmos::store::snapshots::v1::SnapshotExtensionPayload* SnapshotItem::mutable_extension_payload() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cosmos::store::snapshots::v1::SnapshotExtensionPayload* _msg = _internal_mutable_extension_payload();
  // @@protoc_insertion_point(field_mutable:cosmos.store.snapshots.v1.SnapshotItem.extension_payload)
  return _msg;
}

inline bool SnapshotItem::has_item() const {
  return item_case() != ITEM_NOT_SET;
}
inline void SnapshotItem::clear_has_item() {
  _impl_._oneof_case_[0] = ITEM_NOT_SET;
}
inline SnapshotItem::ItemCase SnapshotItem::item_case() const {
  return SnapshotItem::ItemCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// SnapshotStoreItem

// string name = 1 [json_name = "name"];
inline void SnapshotStoreItem::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SnapshotStoreItem::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.store.snapshots.v1.SnapshotStoreItem.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SnapshotStoreItem::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.store.snapshots.v1.SnapshotStoreItem.name)
}
inline std::string* SnapshotStoreItem::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cosmos.store.snapshots.v1.SnapshotStoreItem.name)
  return _s;
}
inline const std::string& SnapshotStoreItem::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void SnapshotStoreItem::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* SnapshotStoreItem::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* SnapshotStoreItem::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.store.snapshots.v1.SnapshotStoreItem.name)
  return _impl_.name_.Release();
}
inline void SnapshotStoreItem::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.store.snapshots.v1.SnapshotStoreItem.name)
}

// -------------------------------------------------------------------

// SnapshotIAVLItem

// bytes key = 1 [json_name = "key"];
inline void SnapshotIAVLItem::clear_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& SnapshotIAVLItem::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.store.snapshots.v1.SnapshotIAVLItem.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SnapshotIAVLItem::set_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.store.snapshots.v1.SnapshotIAVLItem.key)
}
inline std::string* SnapshotIAVLItem::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:cosmos.store.snapshots.v1.SnapshotIAVLItem.key)
  return _s;
}
inline const std::string& SnapshotIAVLItem::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_.Get();
}
inline void SnapshotIAVLItem::_internal_set_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(value, GetArena());
}
inline std::string* SnapshotIAVLItem::_internal_mutable_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* SnapshotIAVLItem::release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.store.snapshots.v1.SnapshotIAVLItem.key)
  return _impl_.key_.Release();
}
inline void SnapshotIAVLItem::set_allocated_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.store.snapshots.v1.SnapshotIAVLItem.key)
}

// bytes value = 2 [json_name = "value"];
inline void SnapshotIAVLItem::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& SnapshotIAVLItem::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.store.snapshots.v1.SnapshotIAVLItem.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SnapshotIAVLItem::set_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.store.snapshots.v1.SnapshotIAVLItem.value)
}
inline std::string* SnapshotIAVLItem::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:cosmos.store.snapshots.v1.SnapshotIAVLItem.value)
  return _s;
}
inline const std::string& SnapshotIAVLItem::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_.Get();
}
inline void SnapshotIAVLItem::_internal_set_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(value, GetArena());
}
inline std::string* SnapshotIAVLItem::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* SnapshotIAVLItem::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.store.snapshots.v1.SnapshotIAVLItem.value)
  return _impl_.value_.Release();
}
inline void SnapshotIAVLItem::set_allocated_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.store.snapshots.v1.SnapshotIAVLItem.value)
}

// int64 version = 3 [json_name = "version"];
inline void SnapshotIAVLItem::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = ::int64_t{0};
}
inline ::int64_t SnapshotIAVLItem::version() const {
  // @@protoc_insertion_point(field_get:cosmos.store.snapshots.v1.SnapshotIAVLItem.version)
  return _internal_version();
}
inline void SnapshotIAVLItem::set_version(::int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:cosmos.store.snapshots.v1.SnapshotIAVLItem.version)
}
inline ::int64_t SnapshotIAVLItem::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_;
}
inline void SnapshotIAVLItem::_internal_set_version(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = value;
}

// int32 height = 4 [json_name = "height"];
inline void SnapshotIAVLItem::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = 0;
}
inline ::int32_t SnapshotIAVLItem::height() const {
  // @@protoc_insertion_point(field_get:cosmos.store.snapshots.v1.SnapshotIAVLItem.height)
  return _internal_height();
}
inline void SnapshotIAVLItem::set_height(::int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:cosmos.store.snapshots.v1.SnapshotIAVLItem.height)
}
inline ::int32_t SnapshotIAVLItem::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void SnapshotIAVLItem::_internal_set_height(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// -------------------------------------------------------------------

// SnapshotExtensionMeta

// string name = 1 [json_name = "name"];
inline void SnapshotExtensionMeta::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SnapshotExtensionMeta::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.store.snapshots.v1.SnapshotExtensionMeta.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SnapshotExtensionMeta::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.store.snapshots.v1.SnapshotExtensionMeta.name)
}
inline std::string* SnapshotExtensionMeta::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cosmos.store.snapshots.v1.SnapshotExtensionMeta.name)
  return _s;
}
inline const std::string& SnapshotExtensionMeta::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void SnapshotExtensionMeta::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* SnapshotExtensionMeta::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* SnapshotExtensionMeta::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.store.snapshots.v1.SnapshotExtensionMeta.name)
  return _impl_.name_.Release();
}
inline void SnapshotExtensionMeta::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.store.snapshots.v1.SnapshotExtensionMeta.name)
}

// uint32 format = 2 [json_name = "format"];
inline void SnapshotExtensionMeta::clear_format() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_ = 0u;
}
inline ::uint32_t SnapshotExtensionMeta::format() const {
  // @@protoc_insertion_point(field_get:cosmos.store.snapshots.v1.SnapshotExtensionMeta.format)
  return _internal_format();
}
inline void SnapshotExtensionMeta::set_format(::uint32_t value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:cosmos.store.snapshots.v1.SnapshotExtensionMeta.format)
}
inline ::uint32_t SnapshotExtensionMeta::_internal_format() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.format_;
}
inline void SnapshotExtensionMeta::_internal_set_format(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.format_ = value;
}

// -------------------------------------------------------------------

// SnapshotExtensionPayload

// bytes payload = 1 [json_name = "payload"];
inline void SnapshotExtensionPayload::clear_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& SnapshotExtensionPayload::payload() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cosmos.store.snapshots.v1.SnapshotExtensionPayload.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SnapshotExtensionPayload::set_payload(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cosmos.store.snapshots.v1.SnapshotExtensionPayload.payload)
}
inline std::string* SnapshotExtensionPayload::mutable_payload() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:cosmos.store.snapshots.v1.SnapshotExtensionPayload.payload)
  return _s;
}
inline const std::string& SnapshotExtensionPayload::_internal_payload() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.payload_.Get();
}
inline void SnapshotExtensionPayload::_internal_set_payload(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.Set(value, GetArena());
}
inline std::string* SnapshotExtensionPayload::_internal_mutable_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.payload_.Mutable( GetArena());
}
inline std::string* SnapshotExtensionPayload::release_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cosmos.store.snapshots.v1.SnapshotExtensionPayload.payload)
  return _impl_.payload_.Release();
}
inline void SnapshotExtensionPayload::set_allocated_payload(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.store.snapshots.v1.SnapshotExtensionPayload.payload)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace snapshots
}  // namespace store
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cosmos_2fstore_2fsnapshots_2fv1_2fsnapshot_2eproto_2epb_2eh
